import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (13, 9, 4))#candidate|0|(13, 9, 4)|var|float64
uop_1 = relay.asin(var_0.astype('float64')) # shape=(13, 9, 4)
bop_3 = relay.not_equal(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(13, 9, 4)
uop_6 = relay.sinh(var_0.astype('float32')) # shape=(13, 9, 4)
uop_8 = relay.rsqrt(var_0.astype('float64')) # shape=(13, 9, 4)
uop_10 = relay.sigmoid(bop_3.astype('float32')) # shape=(13, 9, 4)
output = relay.Tuple([uop_6,uop_8,uop_10,])
output2 = relay.Tuple([uop_6,uop_8,uop_10,])
func_12 = relay.Function([var_0,], output)
mod['func_12'] = func_12
mod = relay.transform.InferType()(mod)
var_13 = relay.var("var_13", dtype = "float64", shape = (13, 9, 4))#candidate|13|(13, 9, 4)|var|float64
output = func_12(var_13)
func_14 = relay.Function([var_13], output)
mutated_mod['func_14'] = func_14
mutated_mod = relay.transform.InferType()(mutated_mod)
const_16 = relay.const(-4.668669, dtype = "float64")#candidate|16|()|const|float64
uop_17 = relay.cos(const_16.astype('float64')) # shape=()
uop_19 = relay.tan(uop_17.astype('float64')) # shape=()
bop_21 = relay.bitwise_and(const_16.astype('uint32'), uop_17.astype('uint32')) # shape=()
uop_24 = relay.asinh(const_16.astype('float64')) # shape=()
var_26 = relay.var("var_26", dtype = "float64", shape = (2, 6, 14))#candidate|26|(2, 6, 14)|var|float64
bop_27 = relay.not_equal(uop_19.astype('bool'), var_26.astype('bool')) # shape=(2, 6, 14)
var_30 = relay.var("var_30", dtype = "float64", shape = (15, 12))#candidate|30|(15, 12)|var|float64
bop_31 = relay.bitwise_or(uop_24.astype('uint8'), var_30.astype('uint8')) # shape=(15, 12)
bop_34 = relay.floor_mod(uop_19.astype('float64'), uop_24.astype('float64')) # shape=()
uop_37 = relay.acosh(bop_34.astype('float32')) # shape=()
bop_39 = relay.less_equal(bop_34.astype('bool'), uop_17.astype('bool')) # shape=()
uop_42 = relay.tan(var_26.astype('float64')) # shape=(2, 6, 14)
uop_44 = relay.asinh(uop_42.astype('float32')) # shape=(2, 6, 14)
uop_46 = relay.log10(uop_17.astype('float32')) # shape=()
bop_48 = relay.mod(bop_31.astype('float64'), bop_39.astype('float64')) # shape=(15, 12)
bop_51 = relay.divide(bop_39.astype('float32'), bop_34.astype('float32')) # shape=()
bop_54 = relay.greater(bop_39.astype('bool'), bop_31.astype('bool')) # shape=(15, 12)
var_57 = relay.var("var_57", dtype = "float32", shape = (16, 12, 11))#candidate|57|(16, 12, 11)|var|float32
bop_58 = relay.add(uop_37.astype('int32'), var_57.astype('int32')) # shape=(16, 12, 11)
output = relay.Tuple([bop_21,bop_27,uop_44,uop_46,bop_48,bop_51,bop_54,bop_58,])
output2 = relay.Tuple([bop_21,bop_27,uop_44,uop_46,bop_48,bop_51,bop_54,bop_58,])
func_61 = relay.Function([var_26,var_30,var_57,], output)
mod['func_61'] = func_61
mod = relay.transform.InferType()(mod)
var_62 = relay.var("var_62", dtype = "float64", shape = (2, 6, 14))#candidate|62|(2, 6, 14)|var|float64
var_63 = relay.var("var_63", dtype = "float64", shape = (15, 12))#candidate|63|(15, 12)|var|float64
var_64 = relay.var("var_64", dtype = "float32", shape = (16, 12, 11))#candidate|64|(16, 12, 11)|var|float32
output = func_61(var_62,var_63,var_64,)
func_65 = relay.Function([var_62,var_63,var_64,], output)
mutated_mod['func_65'] = func_65
mutated_mod = relay.transform.InferType()(mutated_mod)
var_67 = relay.var("var_67", dtype = "uint64", shape = ())#candidate|67|()|var|uint64
var_68 = relay.var("var_68", dtype = "uint64", shape = ())#candidate|68|()|var|uint64
bop_69 = relay.bitwise_or(var_67.astype('uint64'), var_68.astype('uint64')) # shape=()
bop_72 = relay.bitwise_and(var_68.astype('int16'), bop_69.astype('int16')) # shape=()
uop_75 = relay.asinh(var_68.astype('float64')) # shape=()
bop_77 = relay.equal(uop_75.astype('bool'), bop_72.astype('bool')) # shape=()
var_80 = relay.var("var_80", dtype = "float64", shape = (12,))#candidate|80|(12,)|var|float64
bop_81 = relay.add(uop_75.astype('float32'), var_80.astype('float32')) # shape=(12,)
func_61_call = mod.get_global_var('func_61')
func_65_call = mutated_mod.get_global_var('func_65')
var_85 = relay.var("var_85", dtype = "float64", shape = (168,))#candidate|85|(168,)|var|float64
const_86 = relay.const([-8.493744,4.828731,9.279306,-5.694712,-7.604574,-0.102854,0.440445,1.849212,-1.906707,-9.481695,0.838269,-3.192096,-8.082785,-7.487259,0.297874,-3.069953,-9.868743,-0.785686,-8.468276,-2.054404,-4.221972,-8.876587,4.746757,-7.855517,6.858292,6.592722,-5.308456,-2.480502,0.483687,-4.462085,-1.294552,3.059605,-0.260780,-4.995529,-4.481744,5.008068,2.622815,-2.268782,4.193917,-4.762389,2.322466,3.144370,-3.155319,-6.072342,-9.775986,-7.552823,5.207263,-1.630436,5.888791,9.643421,2.926773,-8.473404,-5.549416,-9.979635,-1.616765,-7.585474,-3.405938,4.692662,0.411232,-1.808223,-1.357061,-9.516211,-6.969971,0.098347,0.651208,3.745369,7.138396,7.217282,-8.158966,-3.053026,4.850438,-8.045036,-1.329957,-9.102323,-0.301509,-5.141522,0.035278,-2.993082,8.730298,2.818324,-7.231883,7.557700,3.899092,1.104680,-1.603405,-8.367805,-1.480822,3.475628,-7.662424,1.565692,0.525677,2.763806,-0.042630,-5.252442,3.043143,5.866479,3.027921,9.939422,2.094220,-4.079476,-6.365922,1.997468,-6.229194,-1.687036,-7.530002,7.959473,2.030097,-9.185944,-2.535654,9.216259,3.560624,-4.709543,3.160721,7.555909,-1.712705,4.532762,-9.218995,-8.944238,4.312583,1.754381,-6.428887,2.947642,3.294669,0.667971,6.823582,2.105677,3.595097,9.684200,6.475447,-6.680722,-8.897313,9.022465,-7.532911,8.911623,-0.912681,-8.651612,3.777236,-0.407022,0.844180,0.837421,-0.722209,9.548610,-0.460631,-8.733837,7.504419,7.627249,-4.434180,-7.475321,-3.172084,8.632787,-2.837904,4.889730,6.114582,-9.221703,-2.890538,6.998784,-1.868761,-4.260631,7.716483,7.268717,6.632267,3.251398,3.269227,6.027005,3.942658,-9.049182,-2.176057,-9.767579,2.613403,-4.122557,-7.511351,-1.533865,8.215079,3.107063,5.748371,7.955340,0.023634,9.587310,9.689678,9.448829], dtype = "float64")#candidate|86|(180,)|const|float64
const_87 = relay.const([[9.388158,-1.449856,-6.412282,-7.708798,2.071618,-1.042004,-5.939798,8.399323],[-3.814023,-2.653008,1.790450,-3.642882,6.327109,-1.303960,2.588991,-3.996187],[-9.730213,8.752573,4.327656,7.790021,3.347959,2.545499,-0.653174,1.233808],[5.116250,-3.447905,1.809599,0.430063,-3.018559,1.204971,-2.180548,-1.906152],[-2.215403,6.739071,4.290668,-7.980403,-0.127223,2.579962,9.559102,-2.560939],[-4.969193,9.372488,7.226563,-3.544503,9.939330,-7.155141,6.260774,-3.356083],[-0.634139,9.983895,8.920442,-6.454669,8.364610,-7.526808,-9.377789,-9.644982],[6.064772,1.089020,-4.330524,-7.274053,5.604882,5.789132,8.211891,-7.765608],[-5.944166,-7.175471,4.608604,3.835605,-0.596568,3.643825,-2.984076,3.222625],[-4.803076,8.712415,9.471691,-6.507047,-1.081748,9.181891,0.892248,1.876524],[-6.337540,1.683842,-3.330765,-1.292206,-0.303778,5.948334,0.653679,-4.655363],[6.934105,7.576571,2.553693,9.368531,4.162533,-1.657419,-1.994582,-7.372447],[1.587957,3.969207,6.891517,-9.636842,4.049506,-8.228514,-0.001168,-7.492532],[-2.283231,-0.709127,0.343677,0.553956,1.610845,-5.905894,2.896440,-5.323128],[-1.444721,-7.921807,5.703477,-5.552511,8.282379,-2.383470,7.197876,8.310105],[-4.718215,-6.503001,-7.599226,-4.500006,0.664005,4.321242,-0.620712,6.664213],[5.285627,-9.564293,-1.352290,-2.311819,2.953675,6.057940,5.865655,2.824804],[2.292312,-6.889015,0.175332,0.595319,7.366170,-3.241918,-6.502266,-8.467591],[9.586508,-0.457942,7.749183,7.910730,2.528637,-8.887512,-6.015146,-3.642764],[3.808332,6.769902,-7.437913,5.013562,8.677199,3.102713,2.629393,-9.329110],[-7.606696,-2.527409,3.379840,-8.181985,-3.908279,2.380342,-7.419683,-6.553509],[-2.541776,3.157860,-2.814880,-3.613276,-2.503836,6.858629,-0.404530,-9.073611],[6.967370,-0.080513,6.443466,2.228127,7.812710,-2.563736,9.547545,7.283890],[-3.815468,-5.120022,5.818327,-7.055152,-2.294785,9.945477,7.549636,4.890333],[-7.780290,6.947346,-7.374809,-5.159632,-9.793314,-5.488183,3.929359,0.819762],[-8.060709,7.443865,1.215222,6.087200,3.300009,-4.758631,-6.813856,0.171433],[1.312708,-9.208163,-5.483268,-8.630555,9.417530,-0.844437,-3.753035,-2.830613],[7.364966,2.787411,-1.978747,-7.444898,3.469588,-9.034141,-2.018282,6.558142],[6.655876,4.037532,-5.846902,-0.664482,-3.458948,-4.430051,-1.653047,0.192419],[-3.717052,-3.168287,4.216186,4.798011,1.419764,6.100580,0.764589,-7.685652],[-1.964439,-7.331568,4.116222,7.436055,0.314889,-9.593563,-8.504519,7.070550],[-7.443343,8.043861,-1.722011,4.520584,6.848153,5.856975,5.938300,0.354110],[-4.696262,-6.676883,-5.654593,9.145028,6.786228,1.137903,-6.675470,9.621289],[6.122865,-1.861423,9.062224,1.334433,-3.754748,8.527681,-5.275875,-0.580419],[6.706523,-1.152605,-4.726523,0.716325,-1.377641,6.004774,-5.788362,8.757723],[-7.664587,6.883239,9.509544,-7.331298,-2.745484,4.062037,-5.897707,9.238128],[-4.330338,2.683889,9.662836,7.897739,3.774835,-8.700432,5.235369,6.512237],[-1.425410,1.975044,-2.469491,6.850958,7.333524,4.747740,-0.826817,6.167811],[2.329928,7.963598,-7.477397,-5.361297,-5.361138,2.616443,-8.814780,1.533092],[4.600987,0.648726,-1.755633,-8.509640,9.415275,1.483683,-3.443088,7.142776],[9.356946,4.795833,7.703052,6.236916,-8.875020,9.477298,-3.149999,7.704335],[8.746612,5.180671,-9.724547,5.946241,6.038654,3.294077,-4.093660,8.504397],[-3.397114,4.393357,-1.522735,7.596876,0.652717,-5.069328,5.895849,2.673559],[-2.647458,-2.538884,5.999318,-8.775051,-5.333540,-1.391990,-5.318499,-5.738616],[-1.030423,-0.632728,-3.803457,-6.292868,-8.138643,4.370278,-2.704749,-2.114982],[4.913375,7.526659,0.245209,-7.943164,-0.479247,-4.970505,-3.667637,1.514388],[-6.114332,-6.153158,8.924583,-1.237205,8.572266,2.450468,-6.851212,-1.130482],[-3.522836,-0.904313,9.439995,6.647490,-2.151234,3.714287,-5.975575,9.289368],[-9.655067,9.615890,-2.576609,-5.570280,-2.642165,-5.478583,9.667186,-8.066616],[-8.940035,5.704597,8.634978,5.104605,-8.779206,2.796147,7.924445,6.040413],[-6.373422,2.016612,-2.080642,-9.812641,9.696740,-3.880554,5.639999,-4.214296],[2.194311,7.940492,-3.245903,-5.758181,6.717870,7.311544,5.301067,5.203175],[-9.404553,-3.100919,-2.210799,5.172160,6.511574,-9.663303,-4.670406,9.982704],[9.766876,8.562117,2.409902,-6.958299,2.042208,-9.700419,0.300694,-6.942828],[-3.851172,-3.035837,6.852281,0.846508,9.464085,2.755711,-1.203134,-5.366121],[8.941646,-7.973453,0.120901,-2.341408,-6.741569,7.616286,-4.703601,4.696813],[8.779857,5.770895,0.207200,1.631152,-3.700094,9.505933,8.963198,-0.947272],[6.593625,-7.553154,-6.982322,9.423047,6.627936,-7.666998,-8.461295,-5.459669],[7.416906,-4.575202,-0.851495,-9.970950,-8.139550,-8.418865,3.363491,-4.697310],[7.678522,8.405066,5.579547,-9.058475,-7.197732,-9.168314,0.926905,-9.753887],[-8.611458,9.998676,-6.117609,-8.011291,4.284107,2.459281,1.917784,1.569664],[-0.378195,-0.632374,4.519877,-5.999412,2.381039,-6.698077,5.385040,-1.692138],[8.655889,9.754501,4.982649,-4.564863,-1.102451,5.789269,-7.888131,-6.928725],[8.524377,-0.006061,2.921621,-5.700821,-8.154494,5.761885,6.429879,7.355606],[-9.529289,6.855006,-3.311173,-6.297024,7.522915,7.973242,0.988960,-5.744721],[-6.956863,3.769928,7.169995,5.099201,1.038090,6.825523,-0.444952,9.476476],[1.591795,-8.424645,2.356998,-3.852894,-9.166497,-9.985393,1.510660,-8.817584],[2.820735,-0.295900,-0.918773,-8.473407,-6.508650,-4.205122,6.771747,7.131432],[-2.899286,-7.767332,7.826998,-0.849012,-7.728075,1.720986,8.185107,-2.662731],[6.094067,5.857291,-8.288337,1.753056,-7.830843,7.329393,-0.923959,-0.443570],[-7.685923,-4.322450,-7.937475,4.027380,2.167979,-2.567503,-3.760017,9.225134],[1.529514,7.348303,6.831646,2.649491,7.045720,7.949229,1.650360,-3.202931],[-3.874616,5.678032,-3.524006,-1.094443,2.026402,-6.559546,7.105693,-4.419935],[4.353576,-6.359604,-6.285929,-8.767469,-8.843881,9.246634,1.583369,8.454961],[-2.663570,-1.724686,0.164466,-7.006972,-2.706228,-6.670922,7.086020,-5.177482],[0.638099,5.910537,-5.190436,3.669754,0.289857,8.813351,-5.716939,-7.030924],[8.327923,8.986462,8.967136,-9.486512,5.034187,0.357366,5.169289,4.506387],[-2.256821,-3.105236,-6.555008,0.272953,6.392785,-5.943249,0.107968,-5.890528],[-7.595473,6.471538,-8.222279,9.459673,5.698527,-2.861984,-0.265268,2.738563],[-6.898222,-2.823362,9.611152,-2.490905,-2.484969,-6.030729,8.658958,-2.758640],[8.701066,-0.328987,2.469404,5.246187,-0.387964,2.662112,5.907767,-6.201471],[2.029894,-7.996476,-8.891841,6.966584,5.808588,5.655033,-5.162632,-8.460897],[2.373403,9.840073,-1.205751,8.123047,-1.464125,-8.532215,8.161011,1.357094],[2.988230,5.828995,-3.285010,-9.172960,4.434118,2.156519,5.792751,5.315967],[-5.824609,-3.020527,7.408185,5.563007,-0.731260,5.320348,-0.316445,-4.115862],[-8.408828,-3.634653,-7.741100,-2.670742,-6.360974,-5.710928,-2.992582,-1.450653],[-2.010525,8.929525,6.588397,-7.304902,-1.109964,4.562313,-0.661368,-6.676623],[-1.174222,-0.069222,7.507851,-7.017126,-0.289196,-4.189339,-5.392529,1.328465],[6.547535,-3.237857,7.768951,-8.442867,-2.655525,7.299705,-8.899412,2.318660],[-4.252335,9.704922,-1.279788,0.115257,-8.311860,3.386656,-3.972283,-5.791935],[-9.469178,-5.482301,2.970202,1.750601,2.839520,-7.908728,9.431328,-4.996200],[9.969898,2.805009,5.539462,-3.347583,-0.006718,-0.911610,-0.457211,-8.246218],[3.496002,0.700315,-0.011347,-4.915079,3.040545,1.674249,-0.897728,-4.078895],[6.287358,8.490891,-3.880976,3.820207,-4.895415,7.916413,-9.144656,1.891318],[0.880907,-1.993401,6.985959,0.643769,3.364556,2.074823,-8.688669,-3.976623],[-8.367795,-3.675750,9.241906,5.708711,6.174518,7.366750,1.021851,3.115173],[1.723092,-9.801523,-8.108631,5.682342,-8.310412,7.352777,-0.264239,-2.754119],[9.709945,7.676176,-8.853928,-7.643413,1.255236,8.625580,-7.353027,6.109088],[-6.563578,8.583011,6.835968,1.094317,8.676572,-7.216035,-4.396626,-6.756366],[8.513256,-6.432061,1.990591,7.797962,-8.982331,1.802421,2.853207,-9.317365],[-9.597198,-4.354853,-0.820916,6.144475,-8.616862,8.223505,-1.022172,9.857894],[8.639882,-4.866405,-3.542215,-0.891008,-2.169873,-4.494417,-8.969357,-5.298691],[-0.021086,7.192896,-6.795891,-2.810507,-8.228320,8.669420,-5.628735,6.610911],[-8.794657,-6.572060,9.310848,-0.766762,-1.542219,-2.608940,9.455505,8.587133],[0.370828,9.824732,7.853694,1.843162,9.485661,-2.237061,9.238610,-8.905429],[5.779711,-4.806636,9.309376,6.509500,7.043969,-1.348349,-8.705067,-1.071841],[-5.064922,4.431297,-2.019683,-5.713008,4.109318,0.974438,-8.291755,-0.040300],[-7.444436,-1.975493,9.762350,7.578286,3.057465,-1.199024,8.833202,-6.179836],[-2.887430,2.181417,-5.714424,-4.073735,-3.546441,-7.420551,3.940289,2.834763],[0.354067,5.106122,0.414008,-9.023330,8.458289,-7.425621,5.345472,-5.900965],[-9.323868,-0.917805,5.342425,-0.731204,-3.788756,-1.694941,5.656121,0.985815],[-4.518380,-4.435935,7.923694,-4.199250,1.001209,9.042616,5.868907,-9.647518],[0.431171,-5.563900,1.151787,0.190372,2.889997,-5.639725,8.301425,-8.783431],[-1.164141,5.191495,5.540836,-7.983923,-0.813049,7.404076,-8.562103,3.215890],[2.920621,-8.106140,-1.111150,-8.343501,-0.635015,-4.465749,7.022144,8.044926],[4.061317,7.005495,-0.514352,9.366546,-9.489276,8.907186,-3.426371,-1.987774],[-6.134409,3.603914,-5.773742,7.396128,-2.472061,-2.885479,-3.674374,1.180418],[-8.992846,-7.644948,4.225225,1.733900,-9.125315,-4.401603,0.576839,-3.577457],[3.652455,-0.628139,-4.420491,-8.327994,-2.917014,-2.393096,-4.239507,-2.271545],[-5.386291,-7.674410,6.479506,2.707159,-0.884998,-2.706767,4.066017,4.871646],[-7.959710,-2.403291,4.908347,3.933417,-8.579477,-1.390047,-4.871243,8.212822],[7.601734,-6.218066,-0.753068,3.974730,9.870866,-9.008465,-4.117812,1.193018],[-5.329624,7.757493,9.785925,1.078591,-2.523019,-7.603382,-1.582719,-6.300019],[5.118975,-2.848064,-0.088713,-9.447369,-7.215262,-7.948385,7.862293,4.570502],[-2.232403,9.651650,-9.673516,9.149379,0.614598,9.681967,1.275676,9.088573],[-5.632694,-8.612398,2.128442,-8.513638,-2.392820,8.752002,-9.677016,9.944055],[5.661529,-2.514918,7.176647,0.983935,-3.643958,-2.284738,-0.459382,-4.361996],[-3.422583,6.494859,-4.166189,8.242005,3.162853,-2.555587,5.254886,-6.536447],[-2.290987,-7.504812,-0.290287,-3.539523,-6.813375,-7.902136,9.208989,1.452247],[-7.885749,0.901304,-3.184761,1.118306,6.647051,-9.110178,9.228103,-5.776000],[3.580279,7.175044,-3.909599,-4.981599,-3.940780,0.676157,-1.234945,6.368906],[7.107158,6.179160,9.763152,2.882640,-0.749207,-2.759685,-6.235057,5.821120],[9.411781,2.982838,3.462542,1.211182,9.805102,3.126750,4.524784,-3.203985],[2.729427,6.630929,-4.915493,-4.080447,-2.662913,-7.307391,0.898792,-3.765359],[-1.513807,-3.729664,-6.619147,7.028968,-6.866947,1.252240,-0.236304,-5.621051],[2.541180,-2.064590,9.411488,-1.171491,9.020790,-9.514462,-9.139383,-5.193287],[4.885725,-7.333884,-3.371977,8.292463,-6.134504,-0.024818,-0.014568,6.540937],[-3.817736,4.384066,-7.932451,3.585466,-4.529692,-8.725652,5.859482,8.718428],[6.195178,-7.021945,1.735077,-1.117940,-3.994861,-4.920099,8.499508,-7.324371],[-6.749603,7.549187,0.051136,-7.003442,2.845372,-2.509908,5.191055,8.244792],[-7.815445,-8.060142,9.315165,1.792515,-9.817319,-0.964016,1.975433,8.865420],[-0.575449,-5.569182,-0.295056,5.632865,7.085549,-1.153516,4.440783,9.808142],[8.575087,6.823257,-8.766439,-5.631864,6.476567,7.696413,4.912859,-1.523324],[4.602102,9.101441,9.870501,8.361561,-4.786384,-6.569431,4.148346,8.554390],[8.991643,6.849961,-5.394036,-5.495094,-0.802508,-0.895330,6.845282,3.476608],[-8.671230,-4.230545,0.542040,-8.535418,1.809421,9.736077,0.814382,9.848577],[-4.625991,-5.630600,-9.327364,-1.585917,-2.457092,-2.348420,9.979198,5.704564],[-6.103314,2.030682,9.677051,5.393023,-5.605649,-7.891753,-6.984638,6.342260],[-7.373017,8.578992,-5.052630,-4.252416,-9.388673,-2.067572,-4.229491,2.407160],[8.629552,8.883941,1.927438,2.821465,6.218713,0.700506,3.013747,-9.807220],[-1.566781,-8.806289,7.836181,-7.170086,4.220603,2.834733,-1.346337,-9.661962],[-0.156547,-1.537355,4.989205,6.516641,4.695181,-0.480905,3.855519,9.716477],[-4.080798,5.068067,-8.239017,8.988592,-2.276268,0.674941,-0.027084,3.313734],[0.154713,-5.917829,9.248308,-1.030226,-8.466841,-2.514625,2.402743,8.012226],[8.544178,-6.078082,-1.706430,-7.906731,-2.977589,7.858334,7.790754,8.386689],[8.049578,4.400377,-7.089560,8.946141,-7.558627,-2.053551,4.429665,1.105474],[-3.712262,-6.945938,-6.788667,-5.849751,0.861338,2.383080,-7.247561,4.863761],[-9.718148,-8.197505,-1.905309,8.793949,2.426663,3.131720,3.753099,-4.915155],[-5.946460,5.831013,2.236886,0.922712,5.463180,5.003940,-2.225134,0.479389],[-1.355006,1.758423,-9.156760,1.030080,-4.721489,-3.100735,-4.164678,-6.730826],[-2.669406,3.087807,2.381475,-1.721968,3.858310,-7.844463,-0.374967,-9.115952],[4.571713,-1.164514,-7.684900,-1.846516,-0.058865,-0.261669,3.076475,6.606504],[-3.500554,9.062240,8.044534,8.949621,2.046627,-6.644831,3.636293,-7.112403],[-6.693182,-9.621972,3.794954,-4.014966,-6.979039,-7.306533,7.673615,0.937102],[-9.242504,9.244387,-4.147012,-6.608908,-4.391348,1.617802,0.746742,-1.731528],[-4.955188,-3.559645,4.716717,0.368891,9.232004,4.789987,0.132620,8.035840],[9.757723,-3.223472,1.731536,-0.098879,4.626063,0.103428,1.458103,7.998417],[0.102653,6.536521,-4.886462,-2.445558,-4.768482,-2.474652,-7.148017,1.255414],[-0.221096,0.502302,-2.814971,8.648343,9.315815,-0.232850,-6.952298,5.776838],[2.187393,4.221469,8.498850,-0.591847,3.016079,-1.850500,-2.009461,-6.723435],[1.180799,-1.203763,4.667304,9.106906,-9.002443,2.379412,0.603440,-1.784492],[-0.836141,-2.827778,8.298327,7.934448,5.381476,-6.663314,-0.699623,-1.668399],[-0.119691,2.705141,-9.889014,3.468301,3.533485,-1.129296,4.755516,5.239607],[-9.668414,6.203203,-0.795334,-1.859037,-2.411311,2.818904,9.279017,-8.625551],[-7.100680,7.990969,9.762142,-4.547365,-8.063629,9.098526,5.156162,5.919520],[4.563662,-6.373397,0.555369,2.709524,0.894536,-9.323918,1.809916,1.221422],[1.162741,-4.998424,3.496678,8.539994,3.716535,0.683479,8.103732,-4.547568],[8.446138,6.851936,-7.334806,0.749393,4.064443,-1.188035,-7.781057,6.800202],[8.800300,-4.645916,-5.426838,-3.201218,2.944026,-4.176289,-4.721495,8.872762],[5.549936,-3.792407,2.527145,-6.292101,-7.900551,8.149750,-0.653933,-1.657917],[0.993320,-7.975070,-4.382017,1.927545,-3.968203,-6.552565,3.012185,-4.277114],[-1.972181,-8.450418,-3.192142,3.701713,2.264213,-8.233112,2.372682,3.841293],[8.836450,-9.978357,-6.159857,5.951997,4.117833,9.161255,8.059389,-5.483667],[7.595276,-7.298624,5.973994,-8.150706,-0.680131,-0.496645,1.137839,-4.825505],[8.260601,-9.926178,0.034096,-5.092099,5.999777,3.131246,5.583564,6.115083],[-3.137524,8.822323,7.255508,-6.925914,-7.745694,9.297328,1.606082,-3.014622],[-6.782963,-6.733489,3.112484,-5.763029,0.135347,7.740683,7.444792,6.501919],[-3.123387,9.987053,-8.955847,-7.983912,-7.324954,-6.018087,2.226332,-3.832406],[1.432667,9.315115,4.024147,2.679534,7.216703,-8.600697,4.475068,-4.506574],[-2.061018,8.710824,-4.140846,4.018956,6.771280,-6.422477,-3.861268,-2.987298],[8.191142,-7.624143,-0.334050,0.257124,0.575056,-6.873025,5.674256,-7.794195],[5.384133,-7.189018,9.715601,-6.607662,8.777943,-8.966233,-3.271374,6.257113],[-0.786103,-6.844279,-8.220312,7.832535,0.074184,-9.208542,-9.205847,-8.112400],[3.133483,7.670134,-9.845652,5.378589,-8.941469,-0.340680,3.838424,5.701927],[7.332568,-2.204523,0.050710,0.279592,5.106104,-6.548015,8.090977,9.338499],[6.372300,5.783266,0.276386,-1.118808,-7.894799,-3.200567,-6.217964,-8.940734],[5.157662,2.344207,-8.167839,-3.746387,9.174183,0.247835,8.426563,5.482817],[-8.497085,0.228895,0.386007,4.160357,-4.390881,1.960577,9.435113,-5.775673],[-5.892069,-0.217907,3.341420,6.559845,1.109011,2.249899,8.429406,5.731005],[7.693936,7.044172,-0.728793,8.760853,-6.995758,-2.517884,-2.681491,8.010527],[-1.504535,1.232305,-1.426176,-9.902422,2.624420,-1.316239,-1.775247,-2.838143],[-0.158962,8.512571,9.672967,9.646911,2.317651,7.055970,1.071318,7.997335],[-2.066420,8.984009,8.921724,-9.651867,0.760320,4.679484,8.927701,7.072208],[-7.945650,-9.441071,0.460222,2.553291,6.481931,-7.292675,8.687369,6.662593],[-5.888066,-6.974333,-9.647094,9.425573,-8.225777,-9.698073,-5.631163,9.394811],[-5.618984,-0.557717,-2.729137,-8.009971,9.104983,-2.534086,-4.446222,-7.200133],[-3.498732,-5.781843,-2.620899,-6.558990,3.837066,-9.294966,-0.085593,-1.425130],[1.834298,2.602141,-8.919734,-4.730212,-1.794365,8.602090,-9.157605,-5.652520],[-8.248645,1.465315,-3.531209,7.755632,-3.762816,0.787386,-8.295046,9.798486],[4.156183,7.992879,0.949835,5.443780,-8.962139,-8.720173,-6.020622,5.689650],[-1.577342,6.925731,-0.207783,-4.653058,-3.337727,9.386045,8.852470,8.882416],[9.770501,-4.370117,-9.724376,3.097614,-8.084488,2.011026,-7.347731,-2.612620],[7.515320,3.270717,-9.448952,1.008153,5.921916,9.890224,5.569476,3.612493],[5.075659,0.436737,1.081262,-3.211105,5.294609,8.584553,-5.635165,-4.358547],[7.785734,5.230301,2.765248,1.817497,-4.352798,4.232122,7.147676,-3.041807],[-2.847721,-2.525922,-4.806534,-6.385240,-9.571862,4.609454,5.730488,-4.174072],[3.294963,-9.442254,-3.427942,-2.264890,1.259398,6.234383,-3.285480,8.300047],[6.304102,1.804108,7.115554,0.711043,9.721424,-8.799178,-0.695095,9.408359],[9.027628,-3.704908,0.357473,-5.380839,-8.770668,6.072408,1.522410,-2.593430],[-4.566591,2.824202,4.830558,9.920215,2.399568,6.379813,9.610120,-1.401533],[-7.225900,-1.130589,9.248776,-2.215120,-7.207737,-3.003388,3.089297,2.165699],[-1.664381,7.152254,7.619459,-4.882254,-1.754766,1.716598,9.954565,-5.549679],[-5.799052,0.464707,5.583908,-9.316782,-6.250814,-5.284852,9.058330,0.339297],[-7.818998,7.512965,-1.083288,-0.053287,4.609303,-4.666035,3.566985,-6.519577],[9.678737,4.019675,-8.787561,4.412011,2.956184,-5.624935,1.107116,-3.825753],[-8.294622,1.627458,-6.065160,2.927354,2.019504,-2.986197,3.483489,7.179526],[-6.671160,1.588900,-6.180436,1.759852,-3.315723,-5.391307,-0.718081,1.886719],[-1.374329,3.596564,6.697213,-6.151093,-3.046234,1.614427,9.835710,-6.741196],[-7.890314,-6.405887,-5.209278,-6.871344,5.651107,-1.124358,3.444841,-8.966885],[8.484258,-7.516387,2.503427,6.508592,2.530652,6.829790,4.526697,2.410268],[4.129515,-8.264289,5.993713,0.238227,8.778580,-8.408929,0.953391,-1.031064],[-8.088064,5.534351,8.739481,2.942201,-9.850448,-3.630263,4.102198,3.667168],[9.005319,-9.847000,-7.066573,-2.264572,-4.794286,-5.867007,4.730415,-6.115613],[-5.618403,7.671932,-5.626156,-5.600736,3.769577,0.935260,-4.075698,-7.983836],[-7.430718,8.069545,-8.532363,0.330588,-8.075128,-8.758194,-7.639650,-6.338779],[0.442667,0.338426,-1.575119,-6.916681,-9.038317,-0.196890,-9.199541,-6.616697],[-4.572547,0.537442,6.587986,9.825533,-2.560169,-4.363276,-2.575100,1.329666],[-6.080559,8.568873,0.980699,9.810586,5.196676,-4.144671,-5.499338,4.630281],[-0.711591,6.157871,3.006360,-8.642519,-2.256475,-9.536196,5.466074,-1.943409],[-5.530617,-9.127659,5.904186,4.643965,-9.012996,-6.034265,8.825916,5.326256],[-9.529853,6.366545,5.184753,-6.845221,-4.890203,-3.691558,-2.289598,-6.795811],[-2.180053,-4.547355,-2.060538,3.586660,-5.532884,3.531676,4.963793,5.429214],[1.935932,2.033343,-5.518731,-7.061357,-3.426982,-3.470763,-0.606797,-9.833571],[-3.203238,-3.313677,-7.851784,0.146957,-1.683797,-4.146549,9.325945,4.321406],[8.785136,7.792556,-5.604360,-1.380343,-7.758723,-1.474088,8.933894,2.908135],[3.928718,-6.352415,2.833391,-1.340183,-5.366928,9.776467,2.276835,-8.527640],[3.781520,-5.525293,-7.022517,9.761281,-0.961053,4.332129,-0.933637,1.078785],[-5.003513,0.049476,0.153523,6.586705,1.291814,1.792183,-0.878857,8.533206],[7.654269,4.988605,-9.197452,-1.638697,-7.834613,6.422155,-4.293557,1.628469],[-8.095448,5.487629,-9.948803,-3.620184,6.499490,-9.447494,4.643772,-2.243409],[-5.113420,-4.128943,-5.248280,7.617642,-7.521900,2.268651,4.117932,-0.870766],[7.573803,0.440809,-8.460573,9.232615,8.868307,0.882720,1.063240,7.929421],[-1.857334,1.210848,-6.558080,0.793097,0.506233,9.999669,5.430802,-2.369440],[3.493677,7.993230,6.418582,-8.692315,-1.459340,-3.824097,8.420042,7.696110],[4.542940,-6.552772,5.789632,1.120264,-2.414719,9.217913,-0.972994,-4.113208],[5.946857,1.914768,1.862207,8.263411,-4.246194,7.647288,7.110914,3.194873],[4.421814,-0.327063,1.674132,7.494955,7.872642,-1.595611,3.904876,7.627887],[-7.396165,7.052190,-0.746501,9.954473,-2.134065,-0.439967,-7.611603,2.880114],[8.194586,-3.591384,6.702928,-6.999918,9.742206,-5.841030,-5.968566,0.848693],[-8.612068,-8.279339,-7.186291,4.697664,-4.110945,-7.801134,2.260770,0.072412],[-3.256839,-0.578394,2.136869,-3.790515,6.183244,4.738714,-0.597034,-9.339309],[-4.088225,-8.670118,-5.160682,9.700040,7.117771,6.690674,1.146158,-1.390212],[5.334571,5.380715,1.074575,9.926215,-0.990914,-7.712327,7.965876,-7.956401],[8.915290,-6.936435,-5.843980,3.989212,-7.710766,1.044719,4.343240,4.201576]], dtype = "float32")#candidate|87|(264, 8)|const|float32
call_84 = relay.TupleGetItem(func_61_call(relay.reshape(var_85.astype('float64'), [2, 6, 14]), relay.reshape(const_86.astype('float64'), [15, 12]), relay.reshape(const_87.astype('float32'), [16, 12, 11]), ), 3)
call_88 = relay.TupleGetItem(func_65_call(relay.reshape(var_85.astype('float64'), [2, 6, 14]), relay.reshape(const_86.astype('float64'), [15, 12]), relay.reshape(const_87.astype('float32'), [16, 12, 11]), ), 3)
bop_89 = relay.bitwise_xor(bop_81.astype('int8'), var_67.astype('int8')) # shape=(12,)
output = relay.Tuple([bop_77,call_84,var_85,const_86,const_87,bop_89,])
output2 = relay.Tuple([bop_77,call_88,var_85,const_86,const_87,bop_89,])
func_92 = relay.Function([var_67,var_68,var_80,var_85,], output)
mod['func_92'] = func_92
mod = relay.transform.InferType()(mod)
mutated_mod['func_92'] = func_92
mutated_mod = relay.transform.InferType()(mutated_mod)
func_92_call = mutated_mod.get_global_var('func_92')
var_94 = relay.var("var_94", dtype = "uint64", shape = ())#candidate|94|()|var|uint64
var_95 = relay.var("var_95", dtype = "uint64", shape = ())#candidate|95|()|var|uint64
var_96 = relay.var("var_96", dtype = "float64", shape = (12,))#candidate|96|(12,)|var|float64
var_97 = relay.var("var_97", dtype = "float64", shape = (168,))#candidate|97|(168,)|var|float64
call_93 = func_92_call(var_94,var_95,var_96,var_97,)
output = call_93
func_98 = relay.Function([var_94,var_95,var_96,var_97,], output)
mutated_mod['func_98'] = func_98
mutated_mod = relay.transform.InferType()(mutated_mod)
var_100 = relay.var("var_100", dtype = "float32", shape = (9, 1))#candidate|100|(9, 1)|var|float32
uop_101 = relay.cosh(var_100.astype('float32')) # shape=(9, 1)
uop_103 = relay.atan(var_100.astype('float64')) # shape=(9, 1)
var_105 = relay.var("var_105", dtype = "float32", shape = (9, 1))#candidate|105|(9, 1)|var|float32
bop_106 = relay.bitwise_xor(uop_101.astype('uint32'), relay.reshape(var_105.astype('uint32'), relay.shape_of(uop_101))) # shape=(9, 1)
var_109 = relay.var("var_109", dtype = "float32", shape = (9, 13))#candidate|109|(9, 13)|var|float32
bop_110 = relay.mod(uop_101.astype('float32'), var_109.astype('float32')) # shape=(9, 13)
uop_113 = relay.sigmoid(uop_103.astype('float64')) # shape=(9, 1)
var_115 = relay.var("var_115", dtype = "float64", shape = (9, 10))#candidate|115|(9, 10)|var|float64
bop_116 = relay.bitwise_or(uop_113.astype('uint32'), var_115.astype('uint32')) # shape=(9, 10)
uop_119 = relay.cosh(bop_110.astype('float64')) # shape=(9, 13)
uop_121 = relay.rsqrt(uop_119.astype('float32')) # shape=(9, 13)
bop_123 = relay.less_equal(uop_121.astype('bool'), uop_101.astype('bool')) # shape=(9, 13)
bop_126 = relay.power(bop_123.astype('float32'), var_105.astype('float32')) # shape=(9, 13)
uop_129 = relay.acos(uop_103.astype('float64')) # shape=(9, 1)
output = relay.Tuple([bop_106,bop_116,bop_126,uop_129,])
output2 = relay.Tuple([bop_106,bop_116,bop_126,uop_129,])
func_131 = relay.Function([var_100,var_105,var_109,var_115,], output)
mod['func_131'] = func_131
mod = relay.transform.InferType()(mod)
mutated_mod['func_131'] = func_131
mutated_mod = relay.transform.InferType()(mutated_mod)
func_131_call = mutated_mod.get_global_var('func_131')
var_133 = relay.var("var_133", dtype = "float32", shape = (9, 1))#candidate|133|(9, 1)|var|float32
var_134 = relay.var("var_134", dtype = "float32", shape = (9, 1))#candidate|134|(9, 1)|var|float32
var_135 = relay.var("var_135", dtype = "float32", shape = (9, 13))#candidate|135|(9, 13)|var|float32
var_136 = relay.var("var_136", dtype = "float64", shape = (9, 10))#candidate|136|(9, 10)|var|float64
call_132 = func_131_call(var_133,var_134,var_135,var_136,)
output = call_132
func_137 = relay.Function([var_133,var_134,var_135,var_136,], output)
mutated_mod['func_137'] = func_137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_139 = relay.var("var_139", dtype = "float64", shape = ())#candidate|139|()|var|float64
uop_140 = relay.acosh(var_139.astype('float64')) # shape=()
uop_142 = relay.erf(uop_140.astype('float32')) # shape=()
bop_144 = relay.bitwise_xor(uop_140.astype('int16'), uop_142.astype('int16')) # shape=()
uop_147 = relay.rsqrt(bop_144.astype('float64')) # shape=()
bop_149 = relay.multiply(bop_144.astype('uint32'), uop_142.astype('uint32')) # shape=()
bop_152 = relay.floor_divide(uop_147.astype('float64'), uop_140.astype('float64')) # shape=()
uop_155 = relay.atan(bop_152.astype('float32')) # shape=()
var_157 = relay.var("var_157", dtype = "float64", shape = ())#candidate|157|()|var|float64
bop_158 = relay.divide(uop_140.astype('float64'), var_157.astype('float64')) # shape=()
bop_161 = relay.left_shift(uop_142.astype('int32'), uop_155.astype('int32')) # shape=()
var_164 = relay.var("var_164", dtype = "float64", shape = (12, 16))#candidate|164|(12, 16)|var|float64
bop_165 = relay.right_shift(bop_158.astype('int64'), var_164.astype('int64')) # shape=(12, 16)
bop_168 = relay.bitwise_or(uop_140.astype('uint8'), uop_142.astype('uint8')) # shape=()
bop_171 = relay.left_shift(uop_155.astype('uint64'), bop_161.astype('uint64')) # shape=()
uop_174 = relay.sqrt(bop_161.astype('float32')) # shape=()
bop_176 = relay.bitwise_or(uop_155.astype('int64'), var_164.astype('int64')) # shape=(12, 16)
bop_179 = relay.power(uop_174.astype('float32'), uop_155.astype('float32')) # shape=()
bop_182 = relay.logical_xor(bop_161.astype('int8'), bop_168.astype('int8')) # shape=()
bop_185 = relay.greater(uop_174.astype('bool'), uop_142.astype('bool')) # shape=()
var_188 = relay.var("var_188", dtype = "int8", shape = ())#candidate|188|()|var|int8
bop_189 = relay.floor_divide(bop_182.astype('float32'), var_188.astype('float32')) # shape=()
bop_192 = relay.logical_xor(uop_174.astype('int16'), bop_158.astype('int16')) # shape=()
bop_195 = relay.mod(uop_140.astype('float64'), bop_144.astype('float64')) # shape=()
func_12_call = mod.get_global_var('func_12')
func_14_call = mutated_mod.get_global_var('func_14')
const_199 = relay.const([-4.472176,-4.460718,8.051274,1.378831,-0.615816,4.667346,5.218645,0.478511,-1.030309,-7.864258,-3.374113,-1.262095,-5.888306,6.271469,-2.946880,4.198577,0.854297,-0.070125,-8.969350,-2.801139,-7.982218,-1.860240,-0.510138,-4.640054,9.914368,-1.760313,7.869655,1.549825,3.166779,-7.771154,2.952726,1.417920,8.506474,1.976766,7.039018,-8.472187,-0.150875,-9.200577,3.769624,1.508743,5.617870,-7.963233,8.880706,-2.947014,0.010010,-1.019560,-4.767585,3.628302,5.369501,7.766049,-4.219733,-6.812415,7.740267,-3.302443,-6.955019,3.040638,4.227060,-4.865155,5.895178,-8.025642,9.305560,9.039564,-3.277145,0.454750,-7.017981,-8.731121,5.730320,6.847808,8.821708,1.503402,4.271757,6.129680,-6.298211,1.202077,5.442945,-0.287191,-9.957921,-6.606341,0.506182,-1.379974,9.800415,-0.289681,-2.466862,7.543974,7.947565,4.468773,8.205331,-2.710770,-9.617165,9.644643,0.182888,0.291905,-2.040833,-5.059144,0.998529,1.394293,4.631680,2.393933,4.029605,-9.657376,2.154940,7.965527,-7.914063,3.888199,-2.162781,-5.621903,-4.885177,2.016470,-0.500342,-8.457008,1.830059,-5.178453,-7.117662,-1.689039,-5.197649,-8.432217,-9.535190,-2.809748,3.645967,5.537015,-1.228667,6.265293,7.302206,4.860191,-5.710546,-7.711494,6.974485,6.522459,-3.377199,2.130502,-8.451259,7.615248,-3.254194,2.504473,0.593784,2.690518,6.011122,-4.559443,9.602056,-3.157927,-3.349288,6.950128,3.473045,6.460992,-5.746553,-2.168142,-9.365235,0.753145,3.788811,3.477497,-9.558967,-3.030869,7.490193,-3.921189,2.127033,2.525661,2.834262,0.718594,8.227585,3.986472,-2.359036,-2.906082,0.129657,6.951027,-6.638198,7.396423,7.930090,-3.063237,-5.810990,9.103959,7.645051,7.772594,-1.348648,8.526114,5.310738,5.377652,-2.792319,9.100593,-0.376663,-3.947582,3.799833,0.003579,-2.085613,1.671602,-2.642170,-1.772088,0.222006,4.481687,-9.847069,0.885202,3.691806,9.787377,-8.614582,4.458701,9.800389,-3.596351,3.268711,9.548563,5.742056,-5.142979,-9.333571,-2.942238,7.216929,7.283362,-1.555886,5.526113,8.909804,-7.907007,3.671466,-2.733913,7.482104,6.708730,-1.804642,-9.255508,-4.635971,-4.183136,2.981654,-0.259128,-9.479685,1.179447,6.142641,-5.514889,0.811755,-0.714095,-2.072197,-7.689816,5.877026,-8.025800,-4.930290,-1.936699,2.006837,9.898382,8.302852,5.351504,5.941319,-9.153019,-0.059730,-3.400959,8.838344,-9.098870,7.985947,-1.458837,9.912259,4.045342,6.067422,-6.368367,-9.494192,-8.329136,5.408603,9.240043,-4.704912,4.456249,-0.662284,-2.880935,1.190433,6.404598,8.626422,4.558780,-7.097805,7.697462,-8.406493,-1.724040,6.136810,-9.648333,4.277880,-7.961196,-9.959113,-3.667531,4.281778,-0.753232,3.840287,4.945050,6.252829,5.124661,5.813907,-1.005586,-2.296715,-9.366029,5.828117,9.958708,-5.002764,-8.785976,9.357864,9.888228,7.759185,6.232274,3.185305,-6.369900,-5.085152,-8.579650,-5.942639,7.233938,-4.534854,-6.984670,7.961706,-8.714752,4.000678,-0.303485,8.224797,8.727576,2.676853,0.133056,-0.972546,-3.297288,-9.274262,-6.028885,3.365896,5.764259,-9.005574,8.551494,3.885066,5.111426,-2.656786,-4.132586,-6.435914,-2.364706,-5.486851,-3.154742,3.329706,2.166669,-4.306630,-3.624756,-7.631801,7.076851,-3.316489,-9.853986,-9.977992,-0.218537,2.747663,-2.991120,6.125815,9.392799,-9.364862,-7.035200,-5.023547,5.474684,1.791334,-5.107190,-1.952832,-3.958723,-2.507685,-2.535113,9.410676,6.595970,0.062482,-3.281505,7.868864,5.429752,3.702646,5.128777,6.442897,-8.513761,0.021315,-6.341750,-7.587029,-2.453211,8.032952,9.837404,3.163156,6.219034,-3.510092,8.382891,-0.779906,-1.632298,-5.477225,0.676594,-8.163522,1.895339,4.708409,2.970233,-6.668696,-9.519052,9.709344,-7.754724,4.252336,3.916769,1.575043,0.925345,0.486483,-0.357804,7.381582,-1.684490,7.574071,9.551994,2.594947,4.721816,-3.940026,-5.059187,3.509537,2.862279,-1.994871,2.254291,5.956417,9.541329,-1.108303,3.333689,-8.992042,2.536663,2.832563,-5.764809,-9.818958,-6.235161,5.817633,-3.740339,-8.503378,2.036702,-1.233813,-8.695779,1.182230,0.953481,7.389923,-0.099409,-5.154536,-8.110145,-8.780946,-8.366387,-2.725282,-1.639797,4.005761,-2.140519,-3.479524,0.465819,-8.306548,-0.517431,2.005560,8.220436,-5.549117,-0.443079,-4.799020,-9.473965,5.060874,8.176837,-5.496387,-6.070331,-8.013127,0.275753,-3.032866,5.084845,-2.521730,7.389813,7.151810,8.907462,-6.037149,-8.315571,-6.226481,3.543950,-2.153695,6.414864,-3.458672,-5.141169,-3.250323,2.366929,-2.770500,-6.818301,6.724528,5.742607,-9.836767,-0.961494,-5.423105,7.745590,-6.766523,6.766516,8.219189,4.561515,-2.352105,-7.118748,1.846458,3.434230], dtype = "float64")#candidate|199|(468,)|const|float64
call_198 = relay.TupleGetItem(func_12_call(relay.reshape(const_199.astype('float64'), [13, 9, 4])), 2)
call_200 = relay.TupleGetItem(func_14_call(relay.reshape(const_199.astype('float64'), [13, 9, 4])), 2)
uop_201 = relay.erf(bop_171.astype('float32')) # shape=()
bop_203 = relay.equal(bop_192.astype('bool'), bop_179.astype('bool')) # shape=()
uop_206 = relay.sin(uop_142.astype('float32')) # shape=()
bop_208 = relay.mod(bop_152.astype('float64'), bop_203.astype('float64')) # shape=()
uop_211 = relay.erf(bop_152.astype('float32')) # shape=()
uop_213 = relay.cos(uop_201.astype('float32')) # shape=()
bop_215 = relay.less(uop_211.astype('bool'), bop_185.astype('bool')) # shape=()
var_218 = relay.var("var_218", dtype = "int16", shape = (1, 7, 11))#candidate|218|(1, 7, 11)|var|int16
bop_219 = relay.equal(bop_192.astype('bool'), var_218.astype('bool')) # shape=(1, 7, 11)
var_222 = relay.var("var_222", dtype = "float32", shape = ())#candidate|222|()|var|float32
bop_223 = relay.mod(uop_213.astype('float32'), var_222.astype('float32')) # shape=()
var_226 = relay.var("var_226", dtype = "float32", shape = (9,))#candidate|226|(9,)|var|float32
bop_227 = relay.less(uop_213.astype('bool'), var_226.astype('bool')) # shape=(9,)
var_230 = relay.var("var_230", dtype = "float32", shape = (16, 7))#candidate|230|(16, 7)|var|float32
bop_231 = relay.power(uop_213.astype('float32'), var_230.astype('float32')) # shape=(16, 7)
uop_234 = relay.acosh(bop_161.astype('float32')) # shape=()
bop_236 = relay.logical_or(uop_201.astype('bool'), uop_174.astype('bool')) # shape=()
bop_239 = relay.equal(bop_231.astype('bool'), var_188.astype('bool')) # shape=(16, 7)
uop_242 = relay.cosh(bop_223.astype('float32')) # shape=()
uop_244 = relay.exp(uop_242.astype('float64')) # shape=()
func_61_call = mod.get_global_var('func_61')
func_65_call = mutated_mod.get_global_var('func_65')
var_247 = relay.var("var_247", dtype = "float64", shape = (168,))#candidate|247|(168,)|var|float64
const_248 = relay.const([-0.471022,-0.184324,3.817949,8.809714,-1.044572,-3.189247,7.311470,-4.499345,-4.698393,9.064218,-1.314622,1.143101,-6.725604,3.016872,6.431155,7.073255,-2.788217,-7.337441,-9.344681,-0.358253,-7.871574,-2.107752,0.439514,-5.779764,1.252241,-3.241920,-3.521395,-7.291125,-7.332725,7.257537,8.010715,6.154000,-2.336243,5.731452,-1.950961,9.064215,2.659388,-8.100869,-2.026369,-1.674340,-7.714302,-7.812025,7.278613,-1.750644,-1.590500,3.008175,-2.549790,8.447367,-8.001123,7.035864,-3.002098,-4.559462,-0.372153,-0.821361,1.279333,9.126573,-2.586181,-9.095441,-4.286228,0.329801,-6.781517,-8.096345,-3.948202,-3.823926,0.385050,9.891748,-1.604821,2.839510,-0.801249,-6.163801,-7.260829,-5.470356,5.151426,-4.203758,2.246447,-7.678958,-0.328963,-7.452614,-7.121380,-1.531065,-3.246741,0.043240,9.362366,3.659235,-7.895769,0.609335,9.710890,0.615593,-3.292328,5.959911,-3.743948,-2.376866,-6.693808,9.624946,5.900226,-4.320739,4.222424,-0.494164,-0.823343,-6.513452,2.455525,-8.521350,7.163005,7.226683,2.507879,5.312933,-2.234142,3.908362,-6.459795,9.624753,-1.844682,5.830008,1.180323,-7.382820,-1.083078,7.633768,-8.343940,-2.786921,9.231368,2.675842,-4.083538,-8.440246,-4.295327,-8.125174,-7.569059,-7.952139,4.072327,-9.076562,-8.512137,6.697287,-1.239884,-0.660043,-2.590755,-6.415345,8.185534,-3.612153,7.735375,-6.758803,-6.783498,-5.848988,9.344519,2.345623,1.554507,2.877072,-0.105383,-6.440614,4.844967,2.119691,1.332154,-4.226036,-4.932686,8.240015,2.993310,5.614941,-5.819945,5.686784,5.812021,-3.434145,-2.129991,-9.164445,-1.315735,6.828866,7.359542,0.932312,4.604485,6.255905,4.553213,5.194555,3.396382,-0.542087,-8.508480,9.318064,4.178220,-2.285151,7.931025,-8.520576,0.189316,-7.854105,6.593983,-0.924991], dtype = "float64")#candidate|248|(180,)|const|float64
const_249 = relay.const([-3.448229,4.905614,-3.284650,4.401943,5.569876,-3.227907,-1.283116,3.648964,1.960692,-2.456020,5.310611,-8.331724,-3.054610,2.232633,-1.200425,-6.573452,5.986420,-7.507942,-3.082955,0.567763,-7.104610,-6.921250,-1.705493,3.961276,6.598936,1.853460,-8.820280,2.919571,-0.406599,-0.749452,-7.060474,1.909957,-2.198365,-4.671144,7.137648,5.364849,6.525300,-3.394038,3.187008,-4.186347,7.484585,5.889361,7.779357,2.654709,-4.103838,-1.385157,-5.411969,-9.491382,-3.357354,5.714075,-5.553239,9.988866,-4.152251,-6.622598,2.160319,9.322470,-9.358123,-1.325626,8.496578,1.948746,7.743743,9.581281,4.977067,1.735218,-0.649482,2.938146,5.606918,-7.921421,-5.266432,1.412545,8.656759,9.573022,2.347356,6.190962,7.917483,-7.966747,0.527140,-1.669858,-0.685537,-4.929269,0.519058,3.730112,-6.598163,-8.710910,-2.755860,1.036992,-2.759877,2.517814,-0.408516,7.597041,8.715494,9.722819,3.687746,0.630581,9.351116,-0.228785,7.419277,0.834252,3.963666,7.990309,9.787907,-6.900721,5.143245,2.311001,-5.042309,1.617698,2.156149,-5.761617,-9.403183,-3.088565,9.610112,-7.906163,-7.693897,1.795584,-4.521499,-5.794468,5.431612,0.063725,-8.885592,-0.729275,9.818011,9.453912,-1.671584,0.678294,8.441714,-0.419332,-3.848161,-6.967526,-5.068051,0.891262,-9.260120,-2.659210,-0.531555,-5.415771,9.538469,7.037711,-8.972831,3.400015,4.429532,2.338967,-7.061037,3.581418,7.702658,8.059008,9.599410,-4.118233,-4.346546,4.170454,-8.821884,-7.269749,7.848353,0.372985,-1.903048,-5.043978,9.253026,-3.178990,-6.411838,8.659474,2.451747,1.041817,8.143579,-8.279910,1.776083,-9.948200,6.858706,7.441387,-7.504321,-0.748478,7.034813,-3.194367,1.931505,-9.138745,8.849485,2.141125,-7.334252,4.608687,-9.665110,-9.088232,-0.992907,0.244981,1.035535,-9.828763,3.029433,-0.435661,8.974501,-0.597896,2.716034,-2.522947,-1.391149,-0.911039,8.059268,-2.311255,1.231101,2.774093,2.963223,-8.160469,1.353091,-2.992889,7.239862,7.834277,-7.620340,1.381560,-4.836587,-0.915217,7.681548,3.965008,-0.335705,-3.704713,-1.102519,9.101134,9.373281,-6.929176,-2.013883,9.682690,0.122222,0.683871,-3.248229,-6.106129,-9.952720,6.482232,7.595919,-5.505464,-2.489638,3.730914,-1.339491,-2.959966,-5.882163,-2.124420,-9.710131,8.737949,-9.038986,6.504499,5.038155,9.161598,-5.479604,-6.075891,-6.441697,8.433931,1.804918,3.719523,-8.193128,5.241327,0.462420,9.056279,-0.222516,6.088663,6.883568,8.253868,-4.849554,5.069761,-1.940606,-3.928632,-1.472753,2.352495,9.323483,-1.295529,8.336572,-0.638465,2.006854,-5.457573,-4.004831,4.045587,-8.756537,0.405151,7.663264,8.481833,-2.947335,-7.859959,1.422508,-3.514749,8.663246,-2.800679,5.097026,0.938741,7.188054,-4.612506,5.983405,6.895105,-3.714455,1.081745,9.344596,9.232292,-4.486723,2.652399,-7.421779,-8.309588,-4.095155,-5.288278,-8.023529,-5.368107,1.398511,8.270566,-5.481709,-2.276515,7.593501,3.793120,-6.878970,-9.729530,-0.358012,-8.114065,-5.901609,-0.245582,-4.487649,-7.799280,-5.491340,-2.535872,6.488533,6.163165,-7.095783,-4.649971,0.472022,0.544484,2.944124,-7.431374,5.543658,-6.987446,-3.585331,-9.627985,6.681505,7.090671,8.492742,3.005045,2.887750,4.201205,-7.334937,-5.687162,2.944446,4.415299,9.533865,-2.796688,-3.843061,-9.517057,-2.693568,2.030425,2.778200,0.487787,-5.254493,4.258116,0.615906,-6.862830,5.858809,0.223097,-7.797385,7.140137,3.432217,-0.117398,-5.173297,-6.695781,3.519236,-7.138019,-4.665276,5.152457,-3.782364,-2.501400,7.097085,9.777130,0.349832,5.102257,7.853520,-8.913069,2.564843,-8.398497,6.364837,-2.708210,3.809781,-3.340792,-6.305874,-6.737517,-0.073600,0.046212,3.190994,-8.976490,1.597002,-0.546639,-4.516907,3.592239,3.138779,8.181958,-6.778791,4.888151,-9.851473,2.254089,-9.778390,8.002611,1.613379,-3.173090,2.547101,5.309114,1.733431,3.714129,-8.478181,5.743169,9.465428,2.491445,-7.803289,3.131501,-3.328957,8.307463,-8.124075,7.978394,7.798094,0.969671,1.425072,-7.409547,-6.916572,-2.099062,-1.836573,6.024938,9.035522,-5.683441,5.893392,-5.803923,-0.646075,-9.517476,1.271488,-7.629121,-5.794654,0.352417,0.704261,-0.699996,-6.734429,-6.420807,-5.279766,-1.445927,-7.273952,8.259011,-0.396240,8.445050,9.285637,8.224620,-9.604523,-4.830798,3.552862,-1.795820,9.609598,6.893856,8.279606,-1.326765,1.235476,7.390807,1.354816,1.953643,4.181382,9.789833,9.715854,5.620606,-0.601780,-9.161472,8.986424,-6.918560,2.999734,-3.978608,-6.095650,-3.123099,4.037901,3.119642,-8.963032,-3.100318,-8.999739,-5.231726,8.495378,0.934621,5.297269,8.208512,-0.602808,5.918803,1.193634,-8.456514,3.901574,4.532920,6.407578,7.696884,-9.425921,3.772073,1.852937,-3.570104,2.513543,9.795661,0.611822,0.643907,-0.695940,0.773432,6.307458,0.520490,-9.592888,5.152989,-4.236510,3.470112,5.869749,5.405193,-2.637821,9.780572,1.143742,7.073641,3.016544,-8.316131,6.820244,-0.786528,4.446007,7.499310,-8.929810,8.248009,-6.747823,8.939755,0.773670,-0.309055,-8.646358,9.635612,-2.559049,-0.380637,-4.788876,-3.346870,-4.016753,-4.118506,-0.020694,1.878660,-4.509667,6.781675,0.877553,-5.691974,4.119115,5.924242,-2.746804,0.404521,1.780521,1.878216,-8.678864,1.381091,-2.869148,2.221471,-2.076654,3.146142,8.799575,1.952340,-2.475782,-9.717554,-8.672177,1.311918,-7.927954,-6.247719,4.408021,8.921570,6.337272,-0.587450,-0.296847,-4.300091,9.785980,-4.087050,7.737490,1.443785,3.101447,3.833846,2.854372,3.132841,-1.755688,6.147731,7.061785,8.240646,-0.861553,-8.494489,8.369017,5.011508,-3.812293,-9.643233,3.382950,9.961301,9.814549,-0.392697,-8.532797,-7.166744,8.491014,-7.450097,5.182237,4.558497,0.250686,-7.059187,4.564194,6.359841,5.853665,0.249657,-8.586184,-2.551300,6.563049,-4.979982,-2.082194,-1.988021,8.541715,-3.703540,4.026549,-3.454641,4.740788,1.147016,-8.138496,-7.963615,-8.408166,-0.576523,3.994560,-8.421373,4.937017,-5.646222,-5.441543,-3.113471,4.153032,-0.511228,-5.107825,3.240447,9.731536,-1.027855,-6.911615,-2.974428,-8.169871,4.320327,0.340897,5.985383,-0.723067,-7.352680,-8.762936,-5.727453,7.305268,-7.130819,3.766713,7.482869,7.733999,-5.697475,-6.676382,-2.735412,1.219191,-1.049461,-4.706000,-8.547379,7.618632,0.899767,0.557685,4.270185,-2.034680,-8.542049,-8.855829,-8.687661,-3.745000,3.963252,4.866489,1.558968,0.548557,9.350433,3.200479,-8.991465,-2.945694,1.295165,-8.185572,-1.944337,-4.718446,-5.934226,-7.572387,-9.558358,-1.632538,-6.123773,-2.615589,-1.093156,0.096319,4.105506,0.308672,-1.776126,7.495702,1.909091,-8.280982,-0.310638,9.975308,5.581797,9.774612,-8.346098,3.287385,-1.235921,-7.273446,7.533532,-0.677799,8.374075,4.657396,-2.650943,1.561261,-1.625200,5.463809,-6.473408,0.167759,8.220469,-8.940355,-8.515924,-2.796218,3.917682,-2.768491,-0.452858,3.780768,-0.434088,7.030047,4.984766,3.661569,0.534523,-0.255196,5.930317,4.247410,-5.968557,-1.030604,-8.811188,2.025910,3.168160,-1.690873,2.478778,2.489188,-2.735854,-1.217811,8.748772,5.637434,-8.786432,0.589275,-2.165451,-3.633842,-4.811491,7.968239,6.685597,-6.563696,-0.976203,6.776749,-3.849496,-3.486960,6.982164,-6.009844,-8.219337,1.405644,0.488325,-7.785122,-9.641185,-0.185591,2.116047,5.967428,2.114533,8.466536,-8.838356,1.480215,-2.212443,-7.058499,-4.773235,-5.289941,-3.030481,2.288514,-1.865067,1.762093,8.099900,8.182651,-0.464627,4.515643,-1.033360,6.152558,4.716729,0.409873,-4.758399,-0.892152,-3.608316,9.552469,-6.109199,-5.738703,-9.505528,4.747980,-9.438504,-0.798402,1.987693,-7.630230,9.807064,8.791032,-1.778580,-9.861323,-6.981808,0.847775,2.447768,7.316082,5.663930,4.322153,-3.519701,5.253039,2.791718,4.688196,-6.344798,6.885717,9.105956,-2.145889,3.233366,2.384284,6.743252,2.143476,5.492353,1.106818,-8.825882,6.851590,3.990427,5.007602,-5.743923,-9.456302,-2.718990,-5.215845,-8.805784,7.466338,8.063471,1.664675,3.017329,-4.642157,7.586790,-9.369282,-1.467011,-1.706698,-0.934536,-0.969314,-0.022064,1.822765,-3.810184,4.469422,4.190619,1.631811,0.609942,9.701182,5.239440,6.845364,3.563953,-7.396279,8.411926,-0.961740,2.871148,6.584027,8.660738,-1.825541,-3.658784,-0.755997,3.028215,3.377999,-6.662562,5.476407,-4.355095,-6.305267,-3.764333,8.103214,-7.068130,-5.338759,-4.429010,0.837812,-9.007033,-1.628567,5.263720,-5.701504,-8.619549,5.873916,1.427648,-1.736431,-1.689950,5.283134,6.853497,-7.174784,-4.022886,1.758272,-9.264135,-4.116415,4.970915,-1.575075,6.838204,5.532758,-7.389086,-5.976358,1.010234,0.346951,-5.102966,0.995880,0.961850,5.458859,-0.289404,-9.800119,0.328400,5.129171,0.708583,-6.541143,7.987778,-5.278993,-1.880057,6.103803,9.145667,5.278497,8.820431,-4.058407,7.841997,6.968711,-3.483306,-0.938781,-4.539128,-7.178944,2.604942,2.296585,-2.749519,-6.013386,-4.452950,0.875084,-4.914790,1.371874,2.470309,-3.354917,7.038348,-8.478355,-6.675820,-2.534804,-1.179725,-1.378403,7.172712,-4.790415,-0.856069,-0.866415,-4.952651,-3.027043,7.867964,8.729383,7.780899,8.717482,8.540229,1.588736,-7.744945,-4.274925,-0.011427,0.728580,-1.122337,-5.355935,-0.632646,-3.605861,-4.915765,-6.267867,-7.932724,-0.061271,4.694534,3.499040,7.437205,-2.617747,-3.272563,-5.632853,-2.770543,-1.147885,-3.642989,6.183433,8.403876,7.626540,-3.130509,6.203450,5.658028,2.735667,8.075454,0.058314,9.872871,9.768801,0.351871,-3.027969,4.902419,-0.857463,1.480809,-8.488869,5.610592,-8.915784,4.049139,6.822293,6.656935,-6.299633,1.379279,7.617430,6.032570,-3.712810,6.518578,-3.654618,0.246011,-9.661186,-6.131989,9.741705,-9.467540,-5.772080,-3.350591,4.729418,-7.120466,-4.090861,3.463569,-4.260396,-2.214738,8.149329,5.503014,-2.027467,2.695609,-0.110141,-7.926003,6.894266,5.187781,-5.068618,3.225192,-2.566347,3.870769,3.214563,-1.647029,-7.127147,-5.158380,-3.230490,7.675728,-6.646779,7.027478,9.466651,3.788257,4.974224,-6.779025,-1.987450,2.279904,3.675859,0.475568,5.561832,-2.507577,2.747468,-9.232746,-8.885603,-4.568357,-0.007024,8.947718,7.001026,-5.805485,-5.647710,2.012064,8.393130,5.491535,7.260304,8.098289,-3.307269,-0.455063,4.675437,-0.140982,3.278214,-0.012320,-9.489630,5.973154,-6.857021,-2.847496,-2.390493,2.057202,-1.503436,-9.907338,-4.919939,2.220548,0.225330,-0.296914,-6.989788,-9.645859,4.175029,8.910239,4.977429,-8.291075,-3.621294,-0.340587,-7.821125,-8.328659,-3.935570,-1.092872,3.348615,3.310773,-6.004723,5.580471,-0.199236,-6.249982,-4.089795,-1.548334,-0.284609,-6.320760,0.958644,6.693905,-8.811279,8.240472,-6.264577,5.300571,6.514132,-9.620763,-4.778099,-5.352489,9.147254,3.406150,-7.318870,1.573106,-8.993202,6.585906,-6.377037,8.984963,5.208574,9.230342,-8.155045,4.803242,-2.637604,4.337660,1.767173,0.397989,-9.636163,-6.968761,-0.977031,6.888998,2.187444,8.162571,3.280159,0.037714,1.756561,-1.175544,7.714629,2.641103,3.394977,7.450087,-5.135205,-7.143978,2.581091,7.051690,-2.272896,-4.325007,5.220435,-8.217677,-2.928588,2.227963,-5.175777,3.746490,0.291942,8.920095,-9.126931,3.792653,-8.917474,1.391464,8.979450,1.825406,-0.476688,1.538269,9.412106,-8.623990,1.745038,8.198006,-1.971265,-4.899864,0.593379,-2.095460,-8.298359,-1.205735,4.777042,-6.422727,-1.070754,6.891189,1.949852,3.312928,-6.085458,-8.240412,7.315098,2.019431,-3.435621,-3.259953,-8.852082,8.486587,-6.146083,8.055196,-6.444844,-7.285392,4.407094,2.708617,5.756981,-7.608901,-6.549143,8.154789,-6.963976,6.935487,-1.806924,1.658414,2.407642,1.966651,-7.330964,9.102149,-6.617737,-8.310452,1.548056,-8.281821,-7.692470,-9.099428,0.801552,-7.147200,9.493630,9.606772,3.045607,-8.869164,4.631561,8.818497,-4.214317,-4.512674,-7.984858,-9.221275,-1.072391,-0.020621,0.847705,-1.639898,1.788699,1.006799,-3.805351,-2.644194,2.890315,-4.059688,7.316082,-0.010901,9.447775,-9.680167,4.525721,7.254427,-8.234463,-2.788511,1.140220,-0.554706,-4.491635,0.976311,-2.808810,-4.983418,-5.228365,7.716086,-0.344348,7.125612,-7.066387,-6.005758,-6.930993,-5.038925,8.831864,5.080020,3.128626,6.636919,3.384947,-2.990971,5.979350,3.514025,-0.074346,5.345591,-0.423588,-9.180754,-9.370110,4.921328,-1.437352,8.888268,-3.994394,-7.134980,8.361598,8.739155,-9.612165,-1.725701,5.994572,8.473614,-5.832284,-6.932162,0.211541,-1.371608,6.325374,7.071562,4.551372,-4.483242,9.224802,3.939799,-8.109944,7.550385,-5.719676,-3.040479,4.717109,2.715523,-9.888855,-3.802693,-5.209711,-9.761523,-4.743231,-6.005681,-2.821312,-8.603689,0.788037,-2.578761,-0.150323,2.085315,-3.182097,-0.953620,7.359891,0.405453,-9.640645,-7.110102,-1.358253,-8.242025,-4.974369,-3.149288,9.929235,-5.735309,-4.994170,8.611007,-4.807555,-5.786103,-2.756902,-3.071326,-1.620432,-3.405376,7.204461,-4.604666,8.109814,1.594902,3.655477,-9.574760,-7.013059,9.193491,-5.232300,8.471012,8.250257,8.932700,1.016097,-5.555838,6.990088,-5.953091,9.106370,1.107447,6.623874,-1.637313,-1.196901,-1.992366,7.146330,-1.947930,-6.815405,-8.753356,5.703941,5.455881,5.546502,-8.184726,-7.791109,6.310718,4.446899,-0.034100,3.200194,2.780480,-8.965272,-8.979463,-2.969971,6.290712,3.775662,-7.644858,6.713903,7.261564,2.918946,9.658567,-9.162606,9.798360,6.486320,-7.683001,-1.398150,9.888948,4.856157,-1.554342,-1.174679,-1.452354,6.002001,-6.132518,4.519626,5.261974,0.840605,-7.140259,-2.361131,-6.407828,-4.964835,-5.045625,-5.725622,0.396322,-3.681716,7.436094,0.462312,-6.281114,3.400803,9.329040,-1.140937,1.533134,8.398382,7.913804,-2.760945,-5.603462,-0.847874,1.504582,-9.503408,0.171046,6.452882,6.276300,-6.659884,8.106742,-8.794373,-0.687725,-0.278744,-3.711338,-7.775345,8.927110,4.251339,4.988969,-7.464179,9.584281,5.412146,0.672345,5.909077,3.424792,-3.770455,5.580357,2.029397,6.814822,-8.038768,3.010205,8.515437,4.011425,-9.949868,6.248129,6.936634,3.286315,2.341514,2.543353,2.141676,-0.966801,-7.872680,-3.631990,-2.380198,1.426476,-4.518158,2.441421,9.510486,-5.551980,1.308219,-5.895688,-1.657927,3.731798,0.841041,6.799227,9.170905,-0.020827,8.141048,6.179818,0.602434,-9.608947,8.211582,2.942335,-2.723749,0.111318,5.610533,3.217979,2.655202,6.104968,9.584247,-1.284020,4.275090,-3.034423,3.071750,-4.557826,-5.280304,-7.247447,-0.323848,-2.131707,-0.853507,-3.858340,-9.636161,3.795031,-5.580974,-1.528571,1.985560,-6.197233,0.235792,-8.750124,-8.680481,9.721766,4.521226,-2.096747,-8.197958,9.286654,-0.339994,-6.959876,7.228100,6.856842,8.721394,7.977440,-4.100949,8.508520,3.644927,-0.769672,-1.900112,-0.917085,-6.095569,0.662882,-0.896247,3.927780,-4.932758,9.330970,4.605129,3.084905,-8.894854,-0.451279,-1.224641,-4.236587,5.039026,5.597012,4.701908,6.298473,-4.443784,-8.633630,1.950070,-0.621298,5.726634,1.979115,-5.523337,2.603394,-6.008426,0.799062,7.332659,-3.910381,-3.972579,-4.723495,2.473176,8.159927,-7.324794,-9.719426,5.607880,9.951959,-9.017984,-9.951407,3.866897,7.416396,3.184260,-7.496911,7.390434,6.950282,-6.129625,5.111639,0.748416,-0.229975,-0.762593,-5.037036,5.585863,-2.267159,-9.034033,-0.353057,9.795420,1.408348,-7.089749,6.856841,-8.224264,4.063471,3.058399,2.878615,-0.689318,-6.458512,-5.147270,-4.458907,9.826815,-4.803664,8.952665,1.530109,-2.143239,7.592876,3.497306,-6.701037,5.420593,-0.334446,-6.506309,-9.847666,8.434739,4.765956,6.795514,4.974195,2.578468,-0.086801,-5.021148,4.702286,9.530476,4.850231,3.097908,-1.218509,-2.471894,5.627015,-1.736829,0.482863,3.888064,-0.887245,-1.201495,7.674544,8.656886,2.355564,5.738961,-5.219971,1.099718,2.945998,-9.858345,-0.264344,8.978625,0.249300,9.809510,2.357790,-3.314414,8.409729,-2.282219,-5.411193,-1.477188,8.359892,-2.467355,-9.530060,-7.823570,-8.029534,-5.371306,1.103278,1.526152,1.944136,5.924771,6.946732,-1.577523,-2.164132,0.262807,-9.721628,-3.943695,4.919858,-3.398381,4.565321,-8.549927,9.880761,-8.548762,-0.820498,9.562297,-5.321669,-1.635007,-4.559069,-5.231583,3.411184,0.306688,9.196205,-0.476919,-6.111141,6.706197,9.540848,-4.456855,-7.851507,8.646580,-0.866007,-3.566405,0.629389,-7.168456,-6.317118,-8.816033,-3.405411,7.490537,-4.519565,-0.944585,-9.132241,-6.499306,9.788957,-8.768588,9.283327,-8.698981,6.580415,-4.699226,-8.403743,-2.908875,4.680687,-0.183908,0.396108,6.013266,2.713311,-0.342026,1.365068,2.868668,0.993410,-7.557395,5.616202,-1.892051,-8.135766,4.101385,3.569957,5.511060,2.990431,-6.063834,4.957962,-8.886875,-9.026556,3.075598,8.700732,-3.961029,-5.384511,6.256462,-8.760419,-0.934139,-9.888991,7.740417,-7.417385,-8.680903,-8.804548,-2.610540,-7.224340,6.589448,6.050981,3.602261,5.594822,-9.716297,-0.986330,-4.806891,3.081881,9.421793,-2.321371,-5.197315,4.182093,-0.168467,7.807209,-5.818133,5.754691,-7.467557,-0.293922,4.129228,-3.772193,2.952568,5.358211,3.071247,0.024318,-8.520566,6.011433,-9.912334,6.974711,-3.378961,6.627409,7.077505,-0.326090,5.158225,4.037599,4.505191,-1.558189,-8.517597,-9.381894,7.469772,7.596491,1.462672,-0.181319,1.776537,9.181390,-3.914764,-4.075112,3.081724,-7.450004,8.471493,-3.376526,1.404081,-1.798591,-6.040663,2.021612,-9.309455,-5.912156,6.749636,3.337591,-8.675342,-7.074847,5.015206,-8.065673,-5.268260,3.394641,-0.325540,-3.154434,4.431057,-1.001344,3.811186,3.158191,-8.895942,0.431009,-0.556992,-1.723002,2.336668,0.720205,-8.325665,-0.834179,-0.080764,-8.530987,8.517243,-0.941759,2.480975,-4.031924,-6.161942,-8.162711,7.208478,-5.619895,-7.351648,8.243990,-1.823129,-9.093708,-1.632448,8.864577,3.723142,-4.446317,-6.274399,7.417242,6.325018,-7.535720,7.519120,-9.073877,-9.467386,-6.647716,5.456248,6.433770,-5.242348,-4.240174,-3.554260,-9.277890,-3.627822,-2.139166,1.517644,-7.231735,3.588644,2.177430,-5.366647,-6.004762,-8.750151,9.307087,-5.993221,2.383931,2.831519,1.906431,8.719030,3.717318,-4.542510,-7.540364,7.673553,-3.683110,6.037685,6.430593,1.667597,6.030654,-3.073185,-0.458118,2.830412,6.771184,8.888825,-0.285911,-1.244351,-3.140716,3.255642,2.664935,-7.179568,1.906312,7.635696,2.307868,-5.122390,-0.623839,4.491296,6.469479,3.268676,7.871641,-2.528016,2.056350,7.121816,3.891304,2.878923,1.695018,3.812160,6.613495,1.790770,7.878961,6.434876,-4.691695,-7.777669,2.862126,3.491704,7.652446,-5.134304,-5.319438,-6.425004,-7.090141,-3.256218,7.885828,1.352247,-3.644792,8.643419,-5.602108,-6.459458,-0.531026,6.181632,-0.220725,-7.447493,-1.889879,-3.900982,0.308548,-9.838039,-0.221906,8.867208,-2.464931,8.178674,-2.212960,3.946963,3.951333,5.921620,-7.340631,-0.709005,4.755738,-2.243544,8.704364,5.772445,-3.249458,2.528271,-4.441338,-2.988157,7.513576,-3.776779,0.988323,-6.009883,0.453569,-6.316016,-3.710984,-1.549967,4.521778,3.597473,3.318171,0.738678,9.416152,5.683980,-9.075962,-0.747141,5.804242,6.741594,-7.098610,7.523044,2.177639,-6.280338,-8.857468,-0.911378,1.215756,3.913435,-9.679515,-4.578412,8.389317,9.891263,-3.394435,6.638118,-6.953008,-4.091252,-7.498723,-7.208151,9.035225,-1.069805,6.217010,1.444913,-7.032962,-5.437944,-5.012630,-7.581557,-7.980756,2.366241,-1.984705,-7.043705,8.408268,2.874029,-8.345602,0.931339,-5.493507,-4.323429,-5.429874,4.184591,-3.575607,2.829964,-5.176071,-5.348025,-3.244548,4.491698,-4.999588,5.031694,-0.717164,4.785151,9.102108,-4.938250,-5.576160,9.628943,3.484341,-8.580606,-6.328117,-5.528862,2.076341,7.064274,-3.236836,-4.407925,-1.504958,-2.467641,0.469218,-5.529463,-5.911986,-5.236054,1.814853,-6.855501,-1.199485,-1.076449,-5.116064,-2.866255,9.492410,9.085172,-0.165230,-5.754390,-6.083999,-3.886570,-9.382702,-9.316405,8.519874,-1.945829,-3.839356,9.189339,7.622770,-5.530998,-1.764975,4.453868,-0.800425,5.987876,2.007534,-3.848540,-2.934851,7.789620,7.847305,-7.305987,-1.530736,6.493114,7.374670,-6.249519,-7.465480,-2.090591,9.669595,-7.101275,9.231927,-4.120163,2.180781,-8.897965,4.358407,-4.461596,5.374119,-5.516114,2.004019,-9.271848,-6.441341,4.264974,7.624083,-6.520072,-5.240807,9.654447,-5.958352,-0.718332,-1.453288,-0.985575,-6.727755,-2.775178,1.226072,0.918233,-1.355987,1.876240,-0.990706,8.446977,-3.720908,-4.874037,-7.972185,-7.663869,-3.724238,-3.413416,6.338035,-8.806480,1.230626,0.426182,7.627246,-4.073117,9.691449,7.972533,-8.291353,6.827578,-2.835787,6.178985,5.098539,6.535276,-6.638189,-8.021630,-5.105890,9.717821,2.512819,-3.786294,-0.842670,-0.210608,-7.905179,1.880402,-8.897435,-0.420431,6.427199,5.871032,1.385000,-0.326936,-6.426337,-3.611005,1.605870,4.367533,-3.820927,-8.626329,-3.318509,-0.765924,-4.008747,1.000823,5.329574,7.129011,-2.582937,6.394129,5.291269,0.266766,7.528394,5.043580,-0.783085,1.585215,-8.006084,4.037429,5.133641,-1.290956,8.185253,-2.200485,4.500978,8.066548,4.382369,5.639236,-1.184086,-9.816707,-3.693980,1.163198,-4.168542,-6.793089,-5.611632], dtype = "float32")#candidate|249|(2112,)|const|float32
call_246 = relay.TupleGetItem(func_61_call(relay.reshape(var_247.astype('float64'), [2, 6, 14]), relay.reshape(const_248.astype('float64'), [15, 12]), relay.reshape(const_249.astype('float32'), [16, 12, 11]), ), 0)
call_250 = relay.TupleGetItem(func_65_call(relay.reshape(var_247.astype('float64'), [2, 6, 14]), relay.reshape(const_248.astype('float64'), [15, 12]), relay.reshape(const_249.astype('float32'), [16, 12, 11]), ), 0)
uop_251 = relay.rsqrt(bop_227.astype('float64')) # shape=(9,)
func_92_call = mod.get_global_var('func_92')
func_98_call = mutated_mod.get_global_var('func_98')
const_254 = relay.const([4.645635,-5.271161,-3.340460,6.609527,-6.313323,-6.119256,-3.989470,3.076035,-7.022629,-7.996616,1.963723,-4.443082], dtype = "float64")#candidate|254|(12,)|const|float64
call_253 = relay.TupleGetItem(func_92_call(relay.reshape(bop_208.astype('uint64'), []), relay.reshape(bop_149.astype('uint64'), []), relay.reshape(const_254.astype('float64'), [12,]), relay.reshape(var_247.astype('float64'), [168,]), ), 0)
call_255 = relay.TupleGetItem(func_98_call(relay.reshape(bop_208.astype('uint64'), []), relay.reshape(bop_149.astype('uint64'), []), relay.reshape(const_254.astype('float64'), [12,]), relay.reshape(var_247.astype('float64'), [168,]), ), 0)
output = relay.Tuple([bop_149,bop_165,bop_176,bop_189,bop_195,call_198,const_199,uop_206,bop_208,bop_215,bop_219,uop_234,bop_236,bop_239,uop_244,call_246,var_247,const_248,const_249,uop_251,call_253,const_254,])
output2 = relay.Tuple([bop_149,bop_165,bop_176,bop_189,bop_195,call_200,const_199,uop_206,bop_208,bop_215,bop_219,uop_234,bop_236,bop_239,uop_244,call_250,var_247,const_248,const_249,uop_251,call_255,const_254,])
func_256 = relay.Function([var_139,var_157,var_164,var_188,var_218,var_222,var_226,var_230,var_247,], output)
mod['func_256'] = func_256
mod = relay.transform.InferType()(mod)
mutated_mod['func_256'] = func_256
mutated_mod = relay.transform.InferType()(mutated_mod)
func_256_call = mutated_mod.get_global_var('func_256')
var_258 = relay.var("var_258", dtype = "float64", shape = ())#candidate|258|()|var|float64
var_259 = relay.var("var_259", dtype = "float64", shape = ())#candidate|259|()|var|float64
var_260 = relay.var("var_260", dtype = "float64", shape = (12, 16))#candidate|260|(12, 16)|var|float64
var_261 = relay.var("var_261", dtype = "int8", shape = ())#candidate|261|()|var|int8
var_262 = relay.var("var_262", dtype = "int16", shape = (1, 7, 11))#candidate|262|(1, 7, 11)|var|int16
var_263 = relay.var("var_263", dtype = "float32", shape = ())#candidate|263|()|var|float32
var_264 = relay.var("var_264", dtype = "float32", shape = (9,))#candidate|264|(9,)|var|float32
var_265 = relay.var("var_265", dtype = "float32", shape = (16, 7))#candidate|265|(16, 7)|var|float32
var_266 = relay.var("var_266", dtype = "float64", shape = (168,))#candidate|266|(168,)|var|float64
call_257 = func_256_call(var_258,var_259,var_260,var_261,var_262,var_263,var_264,var_265,var_266,)
output = call_257
func_267 = relay.Function([var_258,var_259,var_260,var_261,var_262,var_263,var_264,var_265,var_266,], output)
mutated_mod['func_267'] = func_267
mutated_mod = relay.transform.InferType()(mutated_mod)
var_269 = relay.var("var_269", dtype = "float64", shape = (11, 12))#candidate|269|(11, 12)|var|float64
const_270 = relay.const([[-4.196037,-6.242426,-5.741205,-9.250145,-1.470946,5.168711,-0.322385,1.756980,-2.151023,9.077328,-5.853280,3.419919],[2.630362,-1.455690,9.626824,-9.674148,-8.681658,-0.744209,8.759998,-2.389377,5.594803,-6.907811,-9.614182,1.254102],[6.005376,-6.099869,8.641067,9.635956,4.907172,-5.514010,-9.123888,-1.913283,5.866285,0.796596,8.790448,4.089425],[7.157137,7.416629,3.239670,-4.100840,2.039681,-0.519310,-8.031254,6.579534,6.014311,-0.784852,-8.515126,-3.591557],[9.013561,-5.731414,-9.077636,3.302149,5.801734,6.808965,-1.361340,-0.498948,6.086682,-0.491492,-8.766938,7.947972],[6.413384,1.254205,2.513298,-5.278181,4.807669,3.602163,-2.336623,6.784784,7.083553,-7.380748,-5.698481,4.427501],[4.032321,-5.285653,3.809717,-0.023701,3.017059,-8.250842,8.993543,-7.998235,5.695599,-7.690642,-3.866661,-5.301455],[3.757603,9.765104,1.583457,1.677103,2.878657,-3.620067,7.627864,5.422847,3.888807,1.496256,-2.255321,1.692913],[-6.240763,3.086950,-8.718916,-1.344011,-2.281060,5.945281,1.275872,5.636862,-2.030415,5.359009,-9.152099,8.411561],[0.676527,-1.648720,-4.611926,9.229195,-2.316379,0.565714,-0.763840,-2.096510,-6.650124,-0.711812,-6.320796,-4.989770],[-1.978040,-0.739280,-0.695485,-3.129972,8.645189,-2.272466,-1.617623,-3.451278,-8.181330,1.120892,7.425280,-4.716504]], dtype = "float64")#candidate|270|(11, 12)|const|float64
bop_271 = relay.multiply(var_269.astype('float64'), relay.reshape(const_270.astype('float64'), relay.shape_of(var_269))) # shape=(11, 12)
bop_274 = relay.logical_xor(bop_271.astype('int8'), relay.reshape(var_269.astype('int8'), relay.shape_of(bop_271))) # shape=(11, 12)
uop_277 = relay.log(const_270.astype('float32')) # shape=(11, 12)
uop_279 = relay.sigmoid(uop_277.astype('float64')) # shape=(11, 12)
uop_281 = relay.asinh(uop_277.astype('float64')) # shape=(11, 12)
uop_283 = relay.acosh(uop_279.astype('float64')) # shape=(11, 12)
bop_285 = relay.power(uop_279.astype('float32'), relay.reshape(var_269.astype('float32'), relay.shape_of(uop_279))) # shape=(11, 12)
output = relay.Tuple([bop_274,uop_281,uop_283,bop_285,])
output2 = relay.Tuple([bop_274,uop_281,uop_283,bop_285,])
func_288 = relay.Function([var_269,], output)
mod['func_288'] = func_288
mod = relay.transform.InferType()(mod)
mutated_mod['func_288'] = func_288
mutated_mod = relay.transform.InferType()(mutated_mod)
var_289 = relay.var("var_289", dtype = "float64", shape = (11, 12))#candidate|289|(11, 12)|var|float64
func_288_call = mutated_mod.get_global_var('func_288')
call_290 = func_288_call(var_289)
output = call_290
func_291 = relay.Function([var_289], output)
mutated_mod['func_291'] = func_291
mutated_mod = relay.transform.InferType()(mutated_mod)
var_293 = relay.var("var_293", dtype = "float32", shape = (5, 13))#candidate|293|(5, 13)|var|float32
uop_294 = relay.rsqrt(var_293.astype('float32')) # shape=(5, 13)
bop_296 = relay.less(uop_294.astype('bool'), relay.reshape(var_293.astype('bool'), relay.shape_of(uop_294))) # shape=(5, 13)
uop_299 = relay.asinh(uop_294.astype('float64')) # shape=(5, 13)
var_301 = relay.var("var_301", dtype = "float64", shape = (5, 13))#candidate|301|(5, 13)|var|float64
bop_302 = relay.less(uop_299.astype('bool'), relay.reshape(var_301.astype('bool'), relay.shape_of(uop_299))) # shape=(5, 13)
uop_305 = relay.atanh(uop_299.astype('float32')) # shape=(5, 13)
func_92_call = mod.get_global_var('func_92')
func_98_call = mutated_mod.get_global_var('func_98')
var_308 = relay.var("var_308", dtype = "uint64", shape = ())#candidate|308|()|var|uint64
var_309 = relay.var("var_309", dtype = "float64", shape = (12,))#candidate|309|(12,)|var|float64
var_310 = relay.var("var_310", dtype = "float64", shape = (168,))#candidate|310|(168,)|var|float64
call_307 = relay.TupleGetItem(func_92_call(relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_309.astype('float64'), [12,]), relay.reshape(var_310.astype('float64'), [168,]), ), 1)
call_311 = relay.TupleGetItem(func_98_call(relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_309.astype('float64'), [12,]), relay.reshape(var_310.astype('float64'), [168,]), ), 1)
func_131_call = mod.get_global_var('func_131')
func_137_call = mutated_mod.get_global_var('func_137')
var_313 = relay.var("var_313", dtype = "float32", shape = (9,))#candidate|313|(9,)|var|float32
const_314 = relay.const([[-3.769834],[-7.728025],[4.865932],[2.984607],[-8.489030],[-8.085438],[-6.196593],[8.136304],[9.992044],[8.527709],[9.385310],[8.481493],[-9.686891],[-5.775831],[9.899025],[7.257094],[8.596895],[7.377194],[1.476618],[6.067974],[-7.324629],[-2.672318],[-9.295258],[-0.917250],[-9.240225],[1.718418],[9.873886],[-8.556855],[-0.536477],[-2.960021],[-7.420926],[8.187462],[3.470634],[-9.443807],[1.535748],[-1.860861],[4.919600],[-6.266751],[-0.004570],[1.392834],[-3.856236],[-4.763211],[4.627206],[-4.337584],[1.855725],[7.443596],[-2.373508],[-7.926824],[2.757402],[-9.421833],[-9.548542],[-8.474984],[-4.293330],[1.375989],[3.764192],[7.552939],[5.546335],[3.645998],[-8.141646],[-0.678245],[-0.221924],[5.007424],[-8.894741],[-2.731237],[-0.656956],[-6.963552],[2.232926],[-2.110749],[9.046829],[-3.891951],[-8.155813],[0.669480],[-9.779094],[-8.800346],[-4.090123],[-2.720942],[-2.704684],[6.987388],[0.251598],[-0.593882],[2.415217],[-8.894360],[-4.204606],[-9.133424],[-1.911734],[-4.717297],[-7.841121],[7.696422],[5.716316],[5.439206],[-5.198525],[-0.200467],[-0.894931],[-2.930625],[-9.347534],[9.562180],[0.366494],[-8.056263],[6.665583],[-4.562600],[-6.103573],[-1.332360],[-2.757668],[9.319365],[-7.956724],[5.696996],[-1.060524],[8.695369],[8.490171],[3.389512],[8.541031],[2.614208],[-3.047464],[-2.096430],[-9.848618],[-7.538073],[2.917275]], dtype = "float32")#candidate|314|(117, 1)|const|float32
const_315 = relay.const([0.297892,-4.182297,8.693752,4.378290,4.392343,-8.647404,-9.160034,5.264813,1.492134,3.565263,0.310692,-1.050578,-6.183406,8.003100,7.726494,-7.649532,-5.506239,0.253481,-5.993890,-6.233253,8.510240,-8.499916,-6.788086,-1.929629,5.656481,3.164642,6.624191,-4.757074,-9.358215,-0.768658,2.557507,-8.541475,5.617921,-2.770978,-1.511158,7.788484,4.986931,9.896932,5.104109,3.170244,-9.432831,-0.783370,-3.918585,8.649890,-3.002068,-3.103244,1.974369,6.154801,-7.690741,-1.933325,-4.374295,9.400775,4.238296,-9.044021,-5.289700,6.863456,-7.443083,-7.578222,9.531970,6.190118,0.879365,8.616305,8.726620,8.449856,-1.280425,-0.756534,6.684325,1.830260,5.872801,-8.925646,0.250523,-2.017117,3.262695,0.353083,-1.033228,-2.080836,-7.455844,-5.183345,-3.031388,-0.174681,6.219999,9.014181,-6.144331,2.340072,-5.845479,3.450133,-1.529401,-5.247266,-5.282140,-4.258503], dtype = "float64")#candidate|315|(90,)|const|float64
call_312 = relay.TupleGetItem(func_131_call(relay.reshape(var_313.astype('float32'), [9, 1]), relay.reshape(var_313.astype('float32'), [9, 1]), relay.reshape(const_314.astype('float32'), [9, 13]), relay.reshape(const_315.astype('float64'), [9, 10]), ), 1)
call_316 = relay.TupleGetItem(func_137_call(relay.reshape(var_313.astype('float32'), [9, 1]), relay.reshape(var_313.astype('float32'), [9, 1]), relay.reshape(const_314.astype('float32'), [9, 13]), relay.reshape(const_315.astype('float64'), [9, 10]), ), 1)
uop_317 = relay.asin(bop_302.astype('float64')) # shape=(5, 13)
bop_319 = relay.logical_and(bop_302.astype('bool'), call_307.astype('bool')) # shape=(5, 13)
bop_322 = relay.logical_and(bop_302.astype('bool'), call_311.astype('bool')) # shape=(5, 13)
func_92_call = mod.get_global_var('func_92')
func_98_call = mutated_mod.get_global_var('func_98')
call_323 = relay.TupleGetItem(func_92_call(relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_309.astype('float64'), [12,]), relay.reshape(var_310.astype('float64'), [168,]), ), 1)
call_324 = relay.TupleGetItem(func_98_call(relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_308.astype('uint64'), []), relay.reshape(var_309.astype('float64'), [12,]), relay.reshape(var_310.astype('float64'), [168,]), ), 1)
uop_325 = relay.atanh(bop_302.astype('float32')) # shape=(5, 13)
var_327 = relay.var("var_327", dtype = "float64", shape = (5, 13))#candidate|327|(5, 13)|var|float64
bop_328 = relay.greater_equal(uop_299.astype('bool'), relay.reshape(var_327.astype('bool'), relay.shape_of(uop_299))) # shape=(5, 13)
output = relay.Tuple([bop_296,uop_305,var_308,var_309,var_310,call_312,var_313,const_314,const_315,uop_317,bop_319,call_323,uop_325,bop_328,])
output2 = relay.Tuple([bop_296,uop_305,var_308,var_309,var_310,call_316,var_313,const_314,const_315,uop_317,bop_322,call_324,uop_325,bop_328,])
func_331 = relay.Function([var_293,var_301,var_308,var_309,var_310,var_313,var_327,], output)
mod['func_331'] = func_331
mod = relay.transform.InferType()(mod)
var_332 = relay.var("var_332", dtype = "float32", shape = (5, 13))#candidate|332|(5, 13)|var|float32
var_333 = relay.var("var_333", dtype = "float64", shape = (5, 13))#candidate|333|(5, 13)|var|float64
var_334 = relay.var("var_334", dtype = "uint64", shape = ())#candidate|334|()|var|uint64
var_335 = relay.var("var_335", dtype = "float64", shape = (12,))#candidate|335|(12,)|var|float64
var_336 = relay.var("var_336", dtype = "float64", shape = (168,))#candidate|336|(168,)|var|float64
var_337 = relay.var("var_337", dtype = "float32", shape = (9,))#candidate|337|(9,)|var|float32
var_338 = relay.var("var_338", dtype = "float64", shape = (5, 13))#candidate|338|(5, 13)|var|float64
output = func_331(var_332,var_333,var_334,var_335,var_336,var_337,var_338,)
func_339 = relay.Function([var_332,var_333,var_334,var_335,var_336,var_337,var_338,], output)
mutated_mod['func_339'] = func_339
mutated_mod = relay.transform.InferType()(mutated_mod)
var_341 = relay.var("var_341", dtype = "float64", shape = ())#candidate|341|()|var|float64
var_342 = relay.var("var_342", dtype = "float64", shape = (7,))#candidate|342|(7,)|var|float64
bop_343 = relay.power(var_341.astype('float64'), var_342.astype('float64')) # shape=(7,)
func_131_call = mod.get_global_var('func_131')
func_137_call = mutated_mod.get_global_var('func_137')
var_347 = relay.var("var_347", dtype = "float32", shape = (9,))#candidate|347|(9,)|var|float32
var_348 = relay.var("var_348", dtype = "float32", shape = (117,))#candidate|348|(117,)|var|float32
const_349 = relay.const([-2.842274,-5.245349,-1.954287,8.253161,-5.574433,-5.540920,4.309575,-8.066782,1.300271,2.401849,-1.445801,-0.794162,-6.433662,6.811279,9.098759,-8.433212,-8.023714,8.237812,8.362448,-2.367450,-8.920660,-0.540344,0.874409,-5.746005,1.269456,4.283815,-3.527729,-0.885474,8.532593,-3.116768,4.127129,-9.902797,5.667206,-4.426090,5.521525,-7.615179,-2.548112,4.034751,-7.759834,-7.202129,1.044690,2.004010,-0.570569,-9.626867,-6.736901,-7.833030,9.623177,2.466089,-3.858746,5.198735,-2.021258,-1.836589,-3.656637,-4.991640,6.378385,6.696040,-9.084603,4.344448,-2.525032,-9.990794,-1.679416,-3.348773,1.248194,2.653234,-8.601291,1.391037,-9.350579,6.154652,3.106165,0.019977,-0.647571,0.727753,-1.531543,4.885241,-8.637729,1.913464,-8.759789,-2.430180,1.218717,-1.856169,4.978375,-8.139308,6.592578,-0.338000,1.319492,2.824864,-3.341060,-0.054306,8.083916,-3.578272], dtype = "float64")#candidate|349|(90,)|const|float64
call_346 = relay.TupleGetItem(func_131_call(relay.reshape(var_347.astype('float32'), [9, 1]), relay.reshape(var_347.astype('float32'), [9, 1]), relay.reshape(var_348.astype('float32'), [9, 13]), relay.reshape(const_349.astype('float64'), [9, 10]), ), 0)
call_350 = relay.TupleGetItem(func_137_call(relay.reshape(var_347.astype('float32'), [9, 1]), relay.reshape(var_347.astype('float32'), [9, 1]), relay.reshape(var_348.astype('float32'), [9, 13]), relay.reshape(const_349.astype('float64'), [9, 10]), ), 0)
uop_351 = relay.log10(bop_343.astype('float64')) # shape=(7,)
bop_353 = relay.divide(uop_351.astype('float32'), relay.reshape(var_342.astype('float32'), relay.shape_of(uop_351))) # shape=(7,)
func_131_call = mod.get_global_var('func_131')
func_137_call = mutated_mod.get_global_var('func_137')
call_356 = relay.TupleGetItem(func_131_call(relay.reshape(call_346.astype('float32'), [9, 1]), relay.reshape(call_346.astype('float32'), [9, 1]), relay.reshape(var_348.astype('float32'), [9, 13]), relay.reshape(const_349.astype('float64'), [9, 10]), ), 0)
call_357 = relay.TupleGetItem(func_137_call(relay.reshape(call_346.astype('float32'), [9, 1]), relay.reshape(call_346.astype('float32'), [9, 1]), relay.reshape(var_348.astype('float32'), [9, 13]), relay.reshape(const_349.astype('float64'), [9, 10]), ), 0)
uop_358 = relay.log(uop_351.astype('float32')) # shape=(7,)
uop_360 = relay.atan(uop_351.astype('float64')) # shape=(7,)
uop_362 = relay.sqrt(var_347.astype('float64')) # shape=(9,)
var_364 = relay.var("var_364", dtype = "float64", shape = (9,))#candidate|364|(9,)|var|float64
bop_365 = relay.subtract(uop_362.astype('int32'), relay.reshape(var_364.astype('int32'), relay.shape_of(uop_362))) # shape=(9,)
bop_368 = relay.less(uop_358.astype('bool'), call_356.astype('bool')) # shape=(9, 7)
bop_371 = relay.less(uop_358.astype('bool'), call_357.astype('bool')) # shape=(9, 7)
bop_372 = relay.logical_or(uop_358.astype('bool'), var_341.astype('bool')) # shape=(7,)
output = relay.Tuple([call_346,var_348,const_349,bop_353,uop_360,bop_365,bop_368,bop_372,])
output2 = relay.Tuple([call_350,var_348,const_349,bop_353,uop_360,bop_365,bop_371,bop_372,])
F = relay.Function([var_341,var_342,var_347,var_348,var_364,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_341,var_342,var_347,var_348,var_364,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_341= np.array(3.424700, dtype='float64')
module1.set_input('var_341', input_341)
input_342= np.array([8.995954,-1.241995,1.909125,-4.900005,-9.636353,9.603409,0.799949], dtype='float64')
module1.set_input('var_342', input_342)
input_347= np.array([-4.228556,5.188051,8.102575,8.459543,-0.295520,-2.058689,-3.809262,1.080570,4.559086], dtype='float32')
module1.set_input('var_347', input_347)
input_348= np.array([-1.866619,-6.690362,-7.908440,-7.309922,5.255738,9.829939,-5.015414,2.560775,-8.018891,-2.581070,7.251140,0.341063,-4.256483,7.048989,6.949904,-3.693733,2.025191,8.856303,-3.620644,-2.379891,6.271433,-8.680460,-3.068346,-2.948496,-3.302345,-1.106804,4.968141,3.679048,-3.143507,-7.690150,7.971801,5.560610,4.185506,0.439605,-2.075868,5.523931,9.364416,-7.188207,-4.549750,-7.159491,3.902192,-1.294029,2.901910,-7.594815,-9.986904,6.315479,-8.497654,-9.193696,-2.855362,2.459393,-0.722056,-6.948749,-4.257610,5.685554,4.931893,5.535238,-7.561667,-3.912198,4.471405,6.586968,5.864674,1.197243,7.144650,2.662358,6.700294,7.925105,-0.570810,0.819211,-7.183714,7.868215,0.860111,-8.381253,-5.260263,0.558780,-2.990450,0.030448,8.969974,1.119530,6.032912,-1.315629,6.665401,-3.054236,-8.607069,-1.298571,-0.371227,-2.805096,-7.173149,2.428588,7.659096,-1.174907,-9.492041,0.810690,-3.598668,-4.792372,-5.538614,7.382917,-5.387506,4.429105,3.737881,5.454763,2.879942,2.519726,4.897179,-7.343778,4.891231,-0.037187,-2.413708,-1.682335,-4.255622,-0.900251,5.562409,-6.019387,1.182394,-4.918140,7.288775,-2.742482,-3.739518], dtype='float32')
module1.set_input('var_348', input_348)
input_364= np.array([-7.314966,5.910583,-3.106406,1.391044,-9.620125,6.055264,-3.969752,5.494254,-3.569726], dtype='float64')
module1.set_input('var_364', input_364)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res3 = intrp3.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res4 = intrp4.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_341', input_341)
module5.set_input('var_342', input_342)
module5.set_input('var_347', input_347)
module5.set_input('var_348', input_348)
module5.set_input('var_364', input_364)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res7 = intrp7.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res8 = intrp8.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_341', input_341)
module9.set_input('var_342', input_342)
module9.set_input('var_347', input_347)
module9.set_input('var_348', input_348)
module9.set_input('var_364', input_364)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res11 = intrp11.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res12 = intrp12.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_341', input_341)
module13.set_input('var_342', input_342)
module13.set_input('var_347', input_347)
module13.set_input('var_348', input_348)
module13.set_input('var_364', input_364)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res15 = intrp15.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res16 = intrp16.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_341', input_341)
module17.set_input('var_342', input_342)
module17.set_input('var_347', input_347)
module17.set_input('var_348', input_348)
module17.set_input('var_364', input_364)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res19 = intrp19.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res20 = intrp20.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_341', input_341)
module21.set_input('var_342', input_342)
module21.set_input('var_347', input_347)
module21.set_input('var_348', input_348)
module21.set_input('var_364', input_364)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res23 = intrp23.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res24 = intrp24.evaluate()(input_341, input_342, input_347, input_348, input_364, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''