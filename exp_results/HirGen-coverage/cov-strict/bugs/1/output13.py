import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_10 = relay.var("var_10", dtype = "float64", shape = (3, 6))#candidate|10|(3, 6)|var|float64
var_11 = relay.var("var_11", dtype = "float64", shape = (3, 6))#candidate|11|(3, 6)|var|float64
bop_12 = relay.floor_divide(var_10.astype('float64'), relay.reshape(var_11.astype('float64'), relay.shape_of(var_10))) # shape=(3, 6)
uop_25 = relay.sin(var_10.astype('float32')) # shape=(3, 6)
const_36 = relay.const([[-3.080722,0.339995,0.098075,6.693566,2.514767,-0.017942],[-4.410949,5.177784,-6.603468,-0.468933,-6.475571,-3.727071],[0.128589,-6.537125,9.361750,3.905680,2.804345,-4.385947]], dtype = "float32")#candidate|36|(3, 6)|const|float32
bop_37 = relay.subtract(uop_25.astype('float32'), relay.reshape(const_36.astype('float32'), relay.shape_of(uop_25))) # shape=(3, 6)
uop_43 = relay.tan(bop_37.astype('float32')) # shape=(3, 6)
output = relay.Tuple([bop_12,uop_43,])
output2 = relay.Tuple([bop_12,uop_43,])
func_46 = relay.Function([var_10,var_11,], output)
mod['func_46'] = func_46
mod = relay.transform.InferType()(mod)
var_47 = relay.var("var_47", dtype = "float64", shape = (3, 6))#candidate|47|(3, 6)|var|float64
var_48 = relay.var("var_48", dtype = "float64", shape = (3, 6))#candidate|48|(3, 6)|var|float64
output = func_46(var_47,var_48,)
func_49 = relay.Function([var_47,var_48,], output)
mutated_mod['func_49'] = func_49
mutated_mod = relay.transform.InferType()(mutated_mod)
var_157 = relay.var("var_157", dtype = "float32", shape = (12, 13, 1))#candidate|157|(12, 13, 1)|var|float32
uop_158 = relay.log2(var_157.astype('float32')) # shape=(12, 13, 1)
output = uop_158
output2 = uop_158
func_164 = relay.Function([var_157,], output)
mod['func_164'] = func_164
mod = relay.transform.InferType()(mod)
var_165 = relay.var("var_165", dtype = "float32", shape = (12, 13, 1))#candidate|165|(12, 13, 1)|var|float32
output = func_164(var_165)
func_166 = relay.Function([var_165], output)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
const_179 = relay.const(-5, dtype = "uint64")#candidate|179|()|const|uint64
var_180 = relay.var("var_180", dtype = "uint64", shape = (4, 13, 9))#candidate|180|(4, 13, 9)|var|uint64
bop_181 = relay.greater(const_179.astype('bool'), var_180.astype('bool')) # shape=(4, 13, 9)
func_164_call = mod.get_global_var('func_164')
func_166_call = mutated_mod.get_global_var('func_166')
var_187 = relay.var("var_187", dtype = "float32", shape = (156,))#candidate|187|(156,)|var|float32
call_186 = func_164_call(relay.reshape(var_187.astype('float32'), [12, 13, 1]))
call_188 = func_164_call(relay.reshape(var_187.astype('float32'), [12, 13, 1]))
output = relay.Tuple([bop_181,call_186,var_187,])
output2 = relay.Tuple([bop_181,call_188,var_187,])
func_189 = relay.Function([var_180,var_187,], output)
mod['func_189'] = func_189
mod = relay.transform.InferType()(mod)
var_190 = relay.var("var_190", dtype = "uint64", shape = (4, 13, 9))#candidate|190|(4, 13, 9)|var|uint64
var_191 = relay.var("var_191", dtype = "float32", shape = (156,))#candidate|191|(156,)|var|float32
output = func_189(var_190,var_191,)
func_192 = relay.Function([var_190,var_191,], output)
mutated_mod['func_192'] = func_192
mutated_mod = relay.transform.InferType()(mutated_mod)
var_299 = relay.var("var_299", dtype = "float64", shape = (16, 7, 3))#candidate|299|(16, 7, 3)|var|float64
uop_300 = relay.sqrt(var_299.astype('float64')) # shape=(16, 7, 3)
func_164_call = mod.get_global_var('func_164')
func_166_call = mutated_mod.get_global_var('func_166')
var_304 = relay.var("var_304", dtype = "float32", shape = (156, 1))#candidate|304|(156, 1)|var|float32
call_303 = func_164_call(relay.reshape(var_304.astype('float32'), [12, 13, 1]))
call_305 = func_164_call(relay.reshape(var_304.astype('float32'), [12, 13, 1]))
uop_306 = relay.log(uop_300.astype('float64')) # shape=(16, 7, 3)
bop_308 = relay.logical_or(uop_300.astype('bool'), relay.reshape(var_299.astype('bool'), relay.shape_of(uop_300))) # shape=(16, 7, 3)
output = relay.Tuple([call_303,var_304,uop_306,bop_308,])
output2 = relay.Tuple([call_305,var_304,uop_306,bop_308,])
func_314 = relay.Function([var_299,var_304,], output)
mod['func_314'] = func_314
mod = relay.transform.InferType()(mod)
var_315 = relay.var("var_315", dtype = "float64", shape = (16, 7, 3))#candidate|315|(16, 7, 3)|var|float64
var_316 = relay.var("var_316", dtype = "float32", shape = (156, 1))#candidate|316|(156, 1)|var|float32
output = func_314(var_315,var_316,)
func_317 = relay.Function([var_315,var_316,], output)
mutated_mod['func_317'] = func_317
mutated_mod = relay.transform.InferType()(mutated_mod)
var_347 = relay.var("var_347", dtype = "int64", shape = (4, 7))#candidate|347|(4, 7)|var|int64
var_348 = relay.var("var_348", dtype = "int64", shape = (4, 7))#candidate|348|(4, 7)|var|int64
bop_349 = relay.multiply(var_347.astype('int64'), relay.reshape(var_348.astype('int64'), relay.shape_of(var_347))) # shape=(4, 7)
output = bop_349
output2 = bop_349
func_354 = relay.Function([var_347,var_348,], output)
mod['func_354'] = func_354
mod = relay.transform.InferType()(mod)
var_355 = relay.var("var_355", dtype = "int64", shape = (4, 7))#candidate|355|(4, 7)|var|int64
var_356 = relay.var("var_356", dtype = "int64", shape = (4, 7))#candidate|356|(4, 7)|var|int64
output = func_354(var_355,var_356,)
func_357 = relay.Function([var_355,var_356,], output)
mutated_mod['func_357'] = func_357
mutated_mod = relay.transform.InferType()(mutated_mod)
const_376 = relay.constdtype = "float32")#candidate|376|(12, 13, 16)|const|float32
uop_377 = relay.asin(const_376.astype('float32')) # shape=(12, 13, 16)
bop_382 = relay.not_equal(uop_377.astype('bool'), relay.reshape(const_376.astype('bool'), relay.shape_of(uop_377))) # shape=(12, 13, 16)
uop_393 = relay.log10(bop_382.astype('float32')) # shape=(12, 13, 16)
func_189_call = mod.get_global_var('func_189')
func_192_call = mutated_mod.get_global_var('func_192')
var_399 = relay.var("var_399", dtype = "uint64", shape = (6, 78))#candidate|399|(6, 78)|var|uint64
var_400 = relay.var("var_400", dtype = "float32", shape = (156,))#candidate|400|(156,)|var|float32
call_398 = relay.TupleGetItem(func_189_call(relay.reshape(var_399.astype('uint64'), [4, 13, 9]), relay.reshape(var_400.astype('float32'), [156,]), ), 0)
call_401 = relay.TupleGetItem(func_192_call(relay.reshape(var_399.astype('uint64'), [4, 13, 9]), relay.reshape(var_400.astype('float32'), [156,]), ), 0)
bop_403 = relay.left_shift(bop_382.astype('int16'), relay.reshape(uop_377.astype('int16'), relay.shape_of(bop_382))) # shape=(12, 13, 16)
output = relay.Tuple([uop_393,call_398,var_399,var_400,bop_403,])
output2 = relay.Tuple([uop_393,call_401,var_399,var_400,bop_403,])
func_418 = relay.Function([var_399,var_400,], output)
mod['func_418'] = func_418
mod = relay.transform.InferType()(mod)
var_419 = relay.var("var_419", dtype = "uint64", shape = (6, 78))#candidate|419|(6, 78)|var|uint64
var_420 = relay.var("var_420", dtype = "float32", shape = (156,))#candidate|420|(156,)|var|float32
output = func_418(var_419,var_420,)
func_421 = relay.Function([var_419,var_420,], output)
mutated_mod['func_421'] = func_421
mutated_mod = relay.transform.InferType()(mutated_mod)
var_475 = relay.var("var_475", dtype = "float32", shape = (14, 15))#candidate|475|(14, 15)|var|float32
uop_476 = relay.cos(var_475.astype('float32')) # shape=(14, 15)
uop_483 = relay.acos(uop_476.astype('float32')) # shape=(14, 15)
output = uop_483
output2 = uop_483
func_487 = relay.Function([var_475,], output)
mod['func_487'] = func_487
mod = relay.transform.InferType()(mod)
var_488 = relay.var("var_488", dtype = "float32", shape = (14, 15))#candidate|488|(14, 15)|var|float32
output = func_487(var_488)
func_489 = relay.Function([var_488], output)
mutated_mod['func_489'] = func_489
mutated_mod = relay.transform.InferType()(mutated_mod)
var_494 = relay.var("var_494", dtype = "float64", shape = (3, 2))#candidate|494|(3, 2)|var|float64
uop_495 = relay.sinh(var_494.astype('float64')) # shape=(3, 2)
func_354_call = mod.get_global_var('func_354')
func_357_call = mutated_mod.get_global_var('func_357')
var_500 = relay.var("var_500", dtype = "int64", shape = (28,))#candidate|500|(28,)|var|int64
call_499 = func_354_call(relay.reshape(var_500.astype('int64'), [4, 7]), relay.reshape(var_500.astype('int64'), [4, 7]), )
call_501 = func_354_call(relay.reshape(var_500.astype('int64'), [4, 7]), relay.reshape(var_500.astype('int64'), [4, 7]), )
uop_502 = relay.acos(uop_495.astype('float64')) # shape=(3, 2)
bop_508 = relay.divide(var_500.astype('float64'), relay.reshape(call_499.astype('float64'), relay.shape_of(var_500))) # shape=(28,)
bop_511 = relay.divide(var_500.astype('float64'), relay.reshape(call_501.astype('float64'), relay.shape_of(var_500))) # shape=(28,)
output = relay.Tuple([uop_502,bop_508,])
output2 = relay.Tuple([uop_502,bop_511,])
func_513 = relay.Function([var_494,var_500,], output)
mod['func_513'] = func_513
mod = relay.transform.InferType()(mod)
var_514 = relay.var("var_514", dtype = "float64", shape = (3, 2))#candidate|514|(3, 2)|var|float64
var_515 = relay.var("var_515", dtype = "int64", shape = (28,))#candidate|515|(28,)|var|int64
output = func_513(var_514,var_515,)
func_516 = relay.Function([var_514,var_515,], output)
mutated_mod['func_516'] = func_516
mutated_mod = relay.transform.InferType()(mutated_mod)
var_521 = relay.var("var_521", dtype = "float64", shape = (8, 10))#candidate|521|(8, 10)|var|float64
const_522 = relay.const([[4.877337,3.270829,5.369565,0.384903,-0.277502,0.725910,6.122770,7.987679,-6.615972,5.000464],[7.583617,-1.665020,-0.920757,-0.573412,9.731303,2.219657,-4.998124,4.483711,-8.664796,-0.359657],[8.346326,6.339116,9.019577,1.145589,-3.459505,8.540030,6.093061,-8.606639,-4.137398,-3.147805],[-2.539895,-6.028756,6.777641,3.717014,-4.758202,-7.925398,4.387106,-0.426141,-1.093088,-3.470525],[9.624149,6.040284,1.356978,-1.401209,-5.950061,4.551359,6.497133,-0.195441,6.673045,-5.086757],[6.275281,6.265599,-1.349634,7.655815,3.612583,1.760333,1.201591,-2.153277,-0.951147,-0.420950],[1.892584,-3.756492,9.346483,0.832552,-7.741248,6.103281,4.439752,-8.637606,-8.788839,-8.598777],[-7.457349,-5.388764,-1.997340,-5.225622,-9.369072,-2.566155,2.405264,-4.113248,9.088247,9.526095]], dtype = "float64")#candidate|522|(8, 10)|const|float64
bop_523 = relay.floor_mod(var_521.astype('float64'), relay.reshape(const_522.astype('float64'), relay.shape_of(var_521))) # shape=(8, 10)
bop_526 = relay.logical_and(const_522.astype('bool'), relay.reshape(bop_523.astype('bool'), relay.shape_of(const_522))) # shape=(8, 10)
output = bop_526
output2 = bop_526
func_530 = relay.Function([var_521,], output)
mod['func_530'] = func_530
mod = relay.transform.InferType()(mod)
var_531 = relay.var("var_531", dtype = "float64", shape = (8, 10))#candidate|531|(8, 10)|var|float64
output = func_530(var_531)
func_532 = relay.Function([var_531], output)
mutated_mod['func_532'] = func_532
mutated_mod = relay.transform.InferType()(mutated_mod)
var_547 = relay.var("var_547", dtype = "float64", shape = (2, 5, 10))#candidate|547|(2, 5, 10)|var|float64
const_548 = relay.const([[[9.238606,6.839720,-6.621090,-0.011828,-2.695653,6.961947,1.570066,9.832674,-4.603644,-3.241855],[9.704878,-1.678041,-7.014314,0.976431,-2.735932,-6.686499,9.078625,7.433540,-0.359573,2.060534],[-1.794598,0.352424,8.487580,-6.936076,3.201023,-7.406379,4.462467,8.862931,0.184717,3.099601],[3.222254,7.752178,1.924203,-9.981197,-8.047188,-3.507280,-8.839724,-8.190880,-4.493477,-5.821901],[-1.629547,-2.655641,0.236969,8.493437,-9.131418,-8.768933,2.231661,5.979297,-2.888866,-6.473448]],[[9.317403,-1.141985,-7.206205,0.260434,8.794821,-4.500524,-0.616223,-9.659739,9.934733,7.273702],[-2.353835,0.161702,7.215585,-1.890693,7.245951,7.996994,2.255364,-4.778976,-8.965683,5.913593],[9.738468,7.599853,-9.472504,7.130861,-7.271335,-9.402241,-1.690719,-1.250407,-1.995749,-9.529027],[9.374900,-1.823783,7.374575,5.978750,-2.829758,0.242158,-0.967667,1.522289,-2.531024,-8.810476],[3.314196,7.253766,1.330084,-7.529533,-2.640828,5.803033,-2.235743,4.083165,-7.071889,0.714346]]], dtype = "float64")#candidate|548|(2, 5, 10)|const|float64
bop_549 = relay.floor_mod(var_547.astype('float64'), relay.reshape(const_548.astype('float64'), relay.shape_of(var_547))) # shape=(2, 5, 10)
bop_556 = relay.logical_and(var_547.astype('bool'), relay.reshape(const_548.astype('bool'), relay.shape_of(var_547))) # shape=(2, 5, 10)
bop_559 = relay.add(const_548.astype('uint32'), relay.reshape(bop_556.astype('uint32'), relay.shape_of(const_548))) # shape=(2, 5, 10)
output = relay.Tuple([bop_549,bop_559,])
output2 = relay.Tuple([bop_549,bop_559,])
func_562 = relay.Function([var_547,], output)
mod['func_562'] = func_562
mod = relay.transform.InferType()(mod)
mutated_mod['func_562'] = func_562
mutated_mod = relay.transform.InferType()(mutated_mod)
var_563 = relay.var("var_563", dtype = "float64", shape = (2, 5, 10))#candidate|563|(2, 5, 10)|var|float64
func_562_call = mutated_mod.get_global_var('func_562')
call_564 = func_562_call(var_563)
output = call_564
func_565 = relay.Function([var_563], output)
mutated_mod['func_565'] = func_565
mutated_mod = relay.transform.InferType()(mutated_mod)
var_631 = relay.var("var_631", dtype = "uint32", shape = (4, 7))#candidate|631|(4, 7)|var|uint32
var_632 = relay.var("var_632", dtype = "uint32", shape = (4, 7))#candidate|632|(4, 7)|var|uint32
bop_633 = relay.right_shift(var_631.astype('uint32'), relay.reshape(var_632.astype('uint32'), relay.shape_of(var_631))) # shape=(4, 7)
output = bop_633
output2 = bop_633
func_643 = relay.Function([var_631,var_632,], output)
mod['func_643'] = func_643
mod = relay.transform.InferType()(mod)
mutated_mod['func_643'] = func_643
mutated_mod = relay.transform.InferType()(mutated_mod)
func_643_call = mutated_mod.get_global_var('func_643')
var_645 = relay.var("var_645", dtype = "uint32", shape = (4, 7))#candidate|645|(4, 7)|var|uint32
var_646 = relay.var("var_646", dtype = "uint32", shape = (4, 7))#candidate|646|(4, 7)|var|uint32
call_644 = func_643_call(var_645,var_646,)
output = call_644
func_647 = relay.Function([var_645,var_646,], output)
mutated_mod['func_647'] = func_647
mutated_mod = relay.transform.InferType()(mutated_mod)
var_722 = relay.var("var_722", dtype = "float32", shape = (3, 3, 15))#candidate|722|(3, 3, 15)|var|float32
var_723 = relay.var("var_723", dtype = "float32", shape = (3, 3, 15))#candidate|723|(3, 3, 15)|var|float32
bop_724 = relay.greater(var_722.astype('bool'), relay.reshape(var_723.astype('bool'), relay.shape_of(var_722))) # shape=(3, 3, 15)
bop_727 = relay.logical_and(var_723.astype('bool'), relay.reshape(var_722.astype('bool'), relay.shape_of(var_723))) # shape=(3, 3, 15)
func_354_call = mod.get_global_var('func_354')
func_357_call = mutated_mod.get_global_var('func_357')
const_734 = relay.const([[10,10,-3,-2],[-7,9,10,-1],[-1,5,-1,7],[7,5,-5,-8],[6,-4,7,10],[-8,9,-1,5],[7,1,-3,7]], dtype = "int64")#candidate|734|(7, 4)|const|int64
call_733 = func_354_call(relay.reshape(const_734.astype('int64'), [4, 7]), relay.reshape(const_734.astype('int64'), [4, 7]), )
call_735 = func_354_call(relay.reshape(const_734.astype('int64'), [4, 7]), relay.reshape(const_734.astype('int64'), [4, 7]), )
bop_736 = relay.equal(var_722.astype('bool'), relay.reshape(var_723.astype('bool'), relay.shape_of(var_722))) # shape=(3, 3, 15)
func_354_call = mod.get_global_var('func_354')
func_357_call = mutated_mod.get_global_var('func_357')
call_739 = func_354_call(relay.reshape(call_733.astype('int64'), [4, 7]), relay.reshape(const_734.astype('int64'), [4, 7]), )
call_740 = func_354_call(relay.reshape(call_733.astype('int64'), [4, 7]), relay.reshape(const_734.astype('int64'), [4, 7]), )
func_418_call = mod.get_global_var('func_418')
func_421_call = mutated_mod.get_global_var('func_421')
var_747 = relay.var("var_747", dtype = "uint64", shape = (468,))#candidate|747|(468,)|var|uint64
const_748 = relay.const([-1.454465,-4.387349,-8.726671,7.428142,-8.691189,9.178827,3.118737,0.557320,1.967123,2.183821,-3.773424,-0.750959,-9.671120,-4.862838,3.609961,-7.638782,-6.630910,2.403891,-8.975675,8.628557,-0.971919,4.680216,3.245278,-7.318254,4.260485,5.021545,6.417936,-2.346599,7.732730,9.233835,2.131802,-0.631014,-7.727376,-8.468227,2.761621,-4.444689,-4.878541,9.260866,-0.877672,-3.253214,7.933114,7.912607,-7.022261,8.246477,-6.697027,-5.999245,-8.983624,9.522947,-4.307130,5.736444,-6.116607,-0.353001,1.306774,-3.415046,1.072478,8.675928,-5.314255,6.733753,-8.571927,-1.771208,-3.422094,-0.838832,9.872161,2.316343,6.613650,0.258738,-5.356695,-0.883950,-7.301070,6.025453,-8.110595,-0.934763,8.566866,7.111645,-8.874159,-7.168849,-5.616959,5.512662,7.626858,-1.870272,3.663430,-1.050635,6.440786,6.569366,2.697157,5.228899,2.752836,-0.583039,-0.756929,8.994989,3.022318,7.912696,-9.302403,1.259903,4.781835,9.736767,-1.125252,4.132205,-5.753882,6.171962,4.676572,3.676097,-9.015624,-1.396991,5.738085,-5.560895,9.011526,9.643137,-6.054675,5.417429,-4.123850,3.340835,-3.148530,-8.320230,0.651860,-6.474909,-6.629395,-1.387422,2.671176,2.903349,-3.200554,4.406252,8.733223,7.108835,-2.965549,-6.943561,5.888061,2.389730,-5.976866,9.663557,8.539209,-1.574379,6.011554,-6.170945,8.961561,-4.322386,0.363986,-5.033108,-8.816599,3.346930,-5.145080,2.451717,3.649305,-7.820795,-2.323456,3.541929,4.975209,3.350129,-1.500575,-9.020890,-0.064959,8.395706,-9.764548,-6.323546,-3.508857,1.688377], dtype = "float32")#candidate|748|(156,)|const|float32
call_746 = relay.TupleGetItem(func_418_call(relay.reshape(var_747.astype('uint64'), [6, 78]), relay.reshape(const_748.astype('float32'), [156,]), ), 0)
call_749 = relay.TupleGetItem(func_421_call(relay.reshape(var_747.astype('uint64'), [6, 78]), relay.reshape(const_748.astype('float32'), [156,]), ), 0)
uop_750 = relay.atan(bop_736.astype('float32')) # shape=(3, 3, 15)
output = relay.Tuple([bop_724,bop_727,call_733,const_734,call_739,call_746,var_747,const_748,uop_750,])
output2 = relay.Tuple([bop_724,bop_727,call_735,const_734,call_740,call_749,var_747,const_748,uop_750,])
func_767 = relay.Function([var_722,var_723,var_747,], output)
mod['func_767'] = func_767
mod = relay.transform.InferType()(mod)
mutated_mod['func_767'] = func_767
mutated_mod = relay.transform.InferType()(mutated_mod)
func_767_call = mutated_mod.get_global_var('func_767')
var_769 = relay.var("var_769", dtype = "float32", shape = (3, 3, 15))#candidate|769|(3, 3, 15)|var|float32
var_770 = relay.var("var_770", dtype = "float32", shape = (3, 3, 15))#candidate|770|(3, 3, 15)|var|float32
var_771 = relay.var("var_771", dtype = "uint64", shape = (468,))#candidate|771|(468,)|var|uint64
call_768 = func_767_call(var_769,var_770,var_771,)
output = call_768
func_772 = relay.Function([var_769,var_770,var_771,], output)
mutated_mod['func_772'] = func_772
mutated_mod = relay.transform.InferType()(mutated_mod)
var_891 = relay.var("var_891", dtype = "float32", shape = ())#candidate|891|()|var|float32
const_892 = relay.const([[8.517981,7.921606,-3.127040,-3.142482,7.658096,2.224671,5.465673,-5.348255,-6.803078,9.839410,-9.078403,-3.916108,-5.862418,-1.902315,1.045045],[-0.368526,-6.109365,4.276672,-7.863953,8.643207,-7.359363,-6.255364,2.950037,-9.259115,8.386342,8.410306,-5.545851,-4.394293,-6.749370,-1.857189],[-3.826310,-3.542963,-0.654439,0.921541,-7.623383,0.804774,3.761476,-7.504665,-4.205140,8.564334,-5.759061,2.569366,-4.881624,9.736514,-9.690811],[-2.731393,-9.865673,-4.390813,4.224458,-3.316009,-2.468530,-2.225526,6.752970,-4.662467,-1.054136,-0.965181,1.603540,5.643774,9.223338,-2.102738],[-3.789088,-7.558123,-7.392562,-0.189134,9.545899,1.647118,-5.744763,9.194486,-0.030376,5.441814,7.926053,6.989809,4.926504,-8.573135,-2.672033],[2.603400,-4.786157,9.339868,-7.480431,-8.777791,-7.441212,0.133137,6.589388,8.625675,9.454657,-2.173903,-4.474394,4.265791,-9.265402,-5.798615]], dtype = "float32")#candidate|892|(6, 15)|const|float32
bop_893 = relay.floor_divide(var_891.astype('float32'), const_892.astype('float32')) # shape=(6, 15)
bop_896 = relay.mod(var_891.astype('float64'), const_892.astype('float64')) # shape=(6, 15)
func_164_call = mod.get_global_var('func_164')
func_166_call = mutated_mod.get_global_var('func_166')
const_903 = relay.const([4.455655,-8.972269,-0.888213,-6.934595,-8.096820,2.635615,-9.443393,3.670776,-8.015747,-5.848423,-6.798608,1.435502,-8.041655,-7.638655,-2.462291,9.661982,2.452221,-5.428923,-8.471398,-9.979099,2.593999,7.653833,9.744775,6.112737,-8.215903,-8.916098,-7.356298,-5.592445,8.636047,-3.220841,1.008557,2.898088,-6.774896,6.273096,-1.918399,1.323717,6.924972,-6.563552,-1.518602,-5.387988,4.693282,0.929098,-8.019611,-1.935638,-8.009169,-8.656691,-8.997888,6.769899,3.558684,9.490972,-6.009077,-6.039569,-0.295668,-2.241795,-6.560876,0.078557,0.578392,6.446577,3.081361,2.064628,-9.741968,2.329043,4.377829,3.090884,3.841006,8.701395,-3.911339,9.346095,-8.199944,8.519022,-9.555969,-4.091915,3.168827,-7.816179,6.952506,7.827342,6.913831,-2.851316,1.989528,9.833779,-9.372917,-3.282124,-9.150672,1.658761,2.812600,9.323978,-0.100184,3.800205,7.759077,-8.177228,6.372458,6.176356,-1.751887,0.377960,6.215901,7.235437,4.800207,-1.518716,9.679245,-0.115655,-1.125953,2.093848,2.892473,9.224547,-9.025240,3.369339,9.960092,-5.634179,-2.535430,7.640667,-6.014541,-1.953510,-7.461442,-8.440831,-0.430579,-5.889832,-1.847946,2.650617,-6.465317,1.330545,-3.035916,-9.578337,4.497784,-7.394526,-4.108028,5.089813,-6.034496,5.352592,6.954429,-3.146112,-7.113863,-1.975780,-6.769876,7.953648,-1.333960,4.525597,1.968758,-5.389578,-6.474260,6.451242,-2.015327,-9.748678,-4.493925,2.358854,2.776789,3.834690,-9.782418,-8.184614,-6.543543,7.742657,-6.180243,5.283188,-8.506759,-0.791265,-8.998567,-8.954857], dtype = "float32")#candidate|903|(156,)|const|float32
call_902 = func_164_call(relay.reshape(const_903.astype('float32'), [12, 13, 1]))
call_904 = func_164_call(relay.reshape(const_903.astype('float32'), [12, 13, 1]))
output = relay.Tuple([bop_893,bop_896,call_902,const_903,])
output2 = relay.Tuple([bop_893,bop_896,call_904,const_903,])
func_905 = relay.Function([var_891,], output)
mod['func_905'] = func_905
mod = relay.transform.InferType()(mod)
mutated_mod['func_905'] = func_905
mutated_mod = relay.transform.InferType()(mutated_mod)
var_906 = relay.var("var_906", dtype = "float32", shape = ())#candidate|906|()|var|float32
func_905_call = mutated_mod.get_global_var('func_905')
call_907 = func_905_call(var_906)
output = call_907
func_908 = relay.Function([var_906], output)
mutated_mod['func_908'] = func_908
mutated_mod = relay.transform.InferType()(mutated_mod)
var_950 = relay.var("var_950", dtype = "bool", shape = ())#candidate|950|()|var|bool
var_951 = relay.var("var_951", dtype = "bool", shape = (7, 4, 3))#candidate|951|(7, 4, 3)|var|bool
bop_952 = relay.logical_or(var_950.astype('bool'), var_951.astype('bool')) # shape=(7, 4, 3)
func_643_call = mod.get_global_var('func_643')
func_647_call = mutated_mod.get_global_var('func_647')
var_962 = relay.var("var_962", dtype = "uint32", shape = (28,))#candidate|962|(28,)|var|uint32
call_961 = func_643_call(relay.reshape(var_962.astype('uint32'), [4, 7]), relay.reshape(var_962.astype('uint32'), [4, 7]), )
call_963 = func_643_call(relay.reshape(var_962.astype('uint32'), [4, 7]), relay.reshape(var_962.astype('uint32'), [4, 7]), )
bop_970 = relay.left_shift(var_951.astype('int64'), var_950.astype('int64')) # shape=(7, 4, 3)
bop_981 = relay.less(var_950.astype('bool'), var_962.astype('bool')) # shape=(28,)
output = relay.Tuple([bop_952,call_961,bop_970,bop_981,])
output2 = relay.Tuple([bop_952,call_963,bop_970,bop_981,])
func_988 = relay.Function([var_950,var_951,var_962,], output)
mod['func_988'] = func_988
mod = relay.transform.InferType()(mod)
var_989 = relay.var("var_989", dtype = "bool", shape = ())#candidate|989|()|var|bool
var_990 = relay.var("var_990", dtype = "bool", shape = (7, 4, 3))#candidate|990|(7, 4, 3)|var|bool
var_991 = relay.var("var_991", dtype = "uint32", shape = (28,))#candidate|991|(28,)|var|uint32
output = func_988(var_989,var_990,var_991,)
func_992 = relay.Function([var_989,var_990,var_991,], output)
mutated_mod['func_992'] = func_992
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1118 = relay.var("var_1118", dtype = "int16", shape = ())#candidate|1118|()|var|int16
const_1119 = relay.const([[-3,1,9,-9,1,1,5,-1,1,9,2,6],[-5,-9,-8,10,-9,1,4,-2,-5,3,9,4],[7,-5,-1,-3,6,5,-2,-5,-6,10,-8,7],[5,1,3,-4,-9,9,10,8,-3,-7,-8,7],[1,-5,10,-2,3,-9,-1,9,9,-3,2,-2],[4,2,-4,-7,-6,7,6,3,5,6,-2,-9],[2,10,3,9,-5,-9,-9,7,-9,-5,4,-4]], dtype = "int16")#candidate|1119|(7, 12)|const|int16
bop_1120 = relay.maximum(var_1118.astype('int16'), const_1119.astype('int16')) # shape=(7, 12)
const_1132 = relay.const([[8,2,2,-4,3,-9,5,-6,8,2,9,-2],[6,4,4,2,9,3,-3,4,-10,6,10,-4],[1,4,3,-8,8,2,10,-3,5,10,4,3],[-4,-9,-10,-3,-10,-2,-4,1,2,3,7,-3],[-1,-10,9,-9,2,-7,3,-5,10,-6,-8,8],[2,4,-9,-2,3,5,7,5,4,-4,-4,9],[-6,10,-6,6,2,-9,-10,-1,-5,5,2,1]], dtype = "int16")#candidate|1132|(7, 12)|const|int16
bop_1133 = relay.bitwise_xor(bop_1120.astype('uint16'), relay.reshape(const_1132.astype('uint16'), relay.shape_of(bop_1120))) # shape=(7, 12)
uop_1141 = relay.acosh(bop_1120.astype('float64')) # shape=(7, 12)
var_1145 = relay.var("var_1145", dtype = "float64", shape = (7, 12))#candidate|1145|(7, 12)|var|float64
bop_1146 = relay.bitwise_or(uop_1141.astype('uint64'), relay.reshape(var_1145.astype('uint64'), relay.shape_of(uop_1141))) # shape=(7, 12)
func_905_call = mod.get_global_var('func_905')
func_908_call = mutated_mod.get_global_var('func_908')
call_1156 = relay.TupleGetItem(func_905_call(relay.reshape(var_1118.astype('float32'), [])), 2)
call_1157 = relay.TupleGetItem(func_908_call(relay.reshape(var_1118.astype('float32'), [])), 2)
func_905_call = mod.get_global_var('func_905')
func_908_call = mutated_mod.get_global_var('func_908')
call_1159 = relay.TupleGetItem(func_905_call(relay.reshape(var_1118.astype('float32'), [])), 3)
call_1160 = relay.TupleGetItem(func_908_call(relay.reshape(var_1118.astype('float32'), [])), 3)
output = relay.Tuple([bop_1133,bop_1146,call_1156,call_1159,])
output2 = relay.Tuple([bop_1133,bop_1146,call_1157,call_1160,])
func_1165 = relay.Function([var_1118,var_1145,], output)
mod['func_1165'] = func_1165
mod = relay.transform.InferType()(mod)
mutated_mod['func_1165'] = func_1165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1165_call = mutated_mod.get_global_var('func_1165')
var_1167 = relay.var("var_1167", dtype = "int16", shape = ())#candidate|1167|()|var|int16
var_1168 = relay.var("var_1168", dtype = "float64", shape = (7, 12))#candidate|1168|(7, 12)|var|float64
call_1166 = func_1165_call(var_1167,var_1168,)
output = call_1166
func_1169 = relay.Function([var_1167,var_1168,], output)
mutated_mod['func_1169'] = func_1169
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1188 = relay.var("var_1188", dtype = "float64", shape = (12, 6))#candidate|1188|(12, 6)|var|float64
uop_1189 = relay.sinh(var_1188.astype('float64')) # shape=(12, 6)
bop_1195 = relay.bitwise_and(uop_1189.astype('int8'), relay.reshape(var_1188.astype('int8'), relay.shape_of(uop_1189))) # shape=(12, 6)
const_1204 = relay.const([[1,9,-3,4,5,-4],[1,7,-8,-4,7,-9],[-5,3,-1,7,5,6],[8,-1,1,3,-5,-1],[7,2,-5,6,-1,5],[-9,3,-8,-10,-2,-1],[-6,-4,5,4,3,5],[-6,-10,-9,10,-5,2],[6,2,-4,-9,-7,1],[-10,-3,10,3,-8,-2],[7,-7,-5,-10,10,8],[-4,4,2,3,-10,-7]], dtype = "int8")#candidate|1204|(12, 6)|const|int8
bop_1205 = relay.greater_equal(bop_1195.astype('bool'), relay.reshape(const_1204.astype('bool'), relay.shape_of(bop_1195))) # shape=(12, 6)
uop_1216 = relay.sigmoid(bop_1205.astype('float32')) # shape=(12, 6)
func_354_call = mod.get_global_var('func_354')
func_357_call = mutated_mod.get_global_var('func_357')
var_1219 = relay.var("var_1219", dtype = "int64", shape = (28,))#candidate|1219|(28,)|var|int64
call_1218 = func_354_call(relay.reshape(var_1219.astype('int64'), [4, 7]), relay.reshape(var_1219.astype('int64'), [4, 7]), )
call_1220 = func_354_call(relay.reshape(var_1219.astype('int64'), [4, 7]), relay.reshape(var_1219.astype('int64'), [4, 7]), )
var_1223 = relay.var("var_1223", dtype = "float32", shape = (12, 6))#candidate|1223|(12, 6)|var|float32
bop_1224 = relay.less(uop_1216.astype('bool'), relay.reshape(var_1223.astype('bool'), relay.shape_of(uop_1216))) # shape=(12, 6)
output = relay.Tuple([call_1218,var_1219,bop_1224,])
output2 = relay.Tuple([call_1220,var_1219,bop_1224,])
func_1229 = relay.Function([var_1188,var_1219,var_1223,], output)
mod['func_1229'] = func_1229
mod = relay.transform.InferType()(mod)
mutated_mod['func_1229'] = func_1229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1229_call = mutated_mod.get_global_var('func_1229')
var_1231 = relay.var("var_1231", dtype = "float64", shape = (12, 6))#candidate|1231|(12, 6)|var|float64
var_1232 = relay.var("var_1232", dtype = "int64", shape = (28,))#candidate|1232|(28,)|var|int64
var_1233 = relay.var("var_1233", dtype = "float32", shape = (12, 6))#candidate|1233|(12, 6)|var|float32
call_1230 = func_1229_call(var_1231,var_1232,var_1233,)
output = call_1230
func_1234 = relay.Function([var_1231,var_1232,var_1233,], output)
mutated_mod['func_1234'] = func_1234
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1283 = relay.const([[-3.034193,-9.063263,-0.024819,0.823112,4.343849,-6.271171,-7.427837,0.309267,0.761441,-5.345968,2.499850,6.510731,-9.029363,-0.642109],[-7.617533,6.870124,-6.741922,0.916784,-0.277155,-8.713315,7.086646,-5.769031,2.355824,6.577244,3.613729,5.286459,5.949037,8.550260],[8.692425,-1.568525,2.036415,-3.109900,-2.358278,1.088619,-9.492142,-6.276923,-6.592176,-9.185996,-2.758407,-4.658668,0.505676,-1.226208],[-3.856508,-5.918993,6.129728,4.282304,6.395041,-1.383263,3.113067,-5.034936,4.281060,-6.316665,3.299911,-6.359640,-8.452087,1.850141],[-6.894960,-7.140758,1.202647,-2.294843,-1.077503,-9.549961,2.943470,3.708775,-2.477361,8.673823,-5.644151,3.954841,-9.646303,6.010254],[1.903085,-7.853987,-9.273314,-8.769839,1.164362,4.586715,8.467230,1.292543,-2.464339,6.287283,5.833347,4.257680,-0.461513,1.884608],[-8.769801,-6.761260,-5.313894,6.003527,5.637061,-1.410259,1.428905,-3.420763,0.522801,8.544094,-7.357779,-1.828300,9.944600,1.795518],[7.971361,-5.674145,5.152050,7.771989,9.318642,9.995097,-8.715074,-2.453337,8.062974,-0.787930,-0.612296,-8.536311,0.062225,-6.636351],[-3.130281,-8.332333,3.901885,4.084906,7.129799,-5.866879,-3.741744,-6.245545,8.984539,-3.293092,9.950122,-9.542563,-4.580709,5.065334],[9.630747,0.061617,8.257307,2.419658,-5.093279,-8.306704,6.027637,9.007555,-0.059342,1.372519,-8.709806,-4.259965,-9.518160,2.804642],[8.301992,-1.477262,3.692450,4.557663,-6.090134,5.076119,3.104271,-7.611478,-1.286217,-9.334505,1.016186,-5.005430,4.042946,-1.722828],[4.828324,4.152799,-3.263198,-7.817434,9.175290,-7.396711,-9.744263,-1.261909,4.139993,7.704347,-1.418044,-1.641864,1.774371,3.934268],[4.687543,-6.533533,-9.800322,-0.821296,-4.302058,-5.617221,-4.542321,5.995883,-7.420545,-1.509163,-7.598082,9.466904,-3.592780,6.276361],[-1.969590,-5.417060,-9.914924,0.291306,-4.957389,2.193410,-0.613076,-3.164265,-4.828381,3.571352,-6.540953,0.354741,1.331694,0.301392],[-0.868132,8.931918,-7.791219,4.501905,6.101261,2.810176,-3.069001,-8.114544,-7.537887,9.076815,-4.851304,7.288125,-9.628461,1.900906],[1.174081,6.283550,8.201197,-2.773247,2.365142,-8.545566,-1.426189,-1.646414,-5.123319,5.879642,-0.212295,-0.333462,-8.705983,1.936880]], dtype = "float32")#candidate|1283|(16, 14)|const|float32
uop_1284 = relay.sqrt(const_1283.astype('float32')) # shape=(16, 14)
bop_1286 = relay.equal(uop_1284.astype('bool'), relay.reshape(const_1283.astype('bool'), relay.shape_of(uop_1284))) # shape=(16, 14)
output = bop_1286
output2 = bop_1286
func_1293 = relay.Function([], output)
mod['func_1293'] = func_1293
mod = relay.transform.InferType()(mod)
mutated_mod['func_1293'] = func_1293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mutated_mod.get_global_var('func_1293')
call_1294 = func_1293_call()
output = call_1294
func_1295 = relay.Function([], output)
mutated_mod['func_1295'] = func_1295
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1301 = relay.var("var_1301", dtype = "float32", shape = (4, 13))#candidate|1301|(4, 13)|var|float32
var_1302 = relay.var("var_1302", dtype = "float32", shape = (4, 13))#candidate|1302|(4, 13)|var|float32
bop_1303 = relay.floor_mod(var_1301.astype('float32'), relay.reshape(var_1302.astype('float32'), relay.shape_of(var_1301))) # shape=(4, 13)
var_1306 = relay.var("var_1306", dtype = "float32", shape = (4, 13))#candidate|1306|(4, 13)|var|float32
bop_1307 = relay.greater(var_1302.astype('bool'), relay.reshape(var_1306.astype('bool'), relay.shape_of(var_1302))) # shape=(4, 13)
uop_1312 = relay.asin(bop_1307.astype('float32')) # shape=(4, 13)
var_1316 = relay.var("var_1316", dtype = "float32", shape = (4, 13))#candidate|1316|(4, 13)|var|float32
bop_1317 = relay.equal(uop_1312.astype('bool'), relay.reshape(var_1316.astype('bool'), relay.shape_of(uop_1312))) # shape=(4, 13)
output = relay.Tuple([bop_1303,bop_1317,])
output2 = relay.Tuple([bop_1303,bop_1317,])
func_1322 = relay.Function([var_1301,var_1302,var_1306,var_1316,], output)
mod['func_1322'] = func_1322
mod = relay.transform.InferType()(mod)
mutated_mod['func_1322'] = func_1322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1322_call = mutated_mod.get_global_var('func_1322')
var_1324 = relay.var("var_1324", dtype = "float32", shape = (4, 13))#candidate|1324|(4, 13)|var|float32
var_1325 = relay.var("var_1325", dtype = "float32", shape = (4, 13))#candidate|1325|(4, 13)|var|float32
var_1326 = relay.var("var_1326", dtype = "float32", shape = (4, 13))#candidate|1326|(4, 13)|var|float32
var_1327 = relay.var("var_1327", dtype = "float32", shape = (4, 13))#candidate|1327|(4, 13)|var|float32
call_1323 = func_1322_call(var_1324,var_1325,var_1326,var_1327,)
output = call_1323
func_1328 = relay.Function([var_1324,var_1325,var_1326,var_1327,], output)
mutated_mod['func_1328'] = func_1328
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mod.get_global_var('func_1293')
func_1295_call = mutated_mod.get_global_var('func_1295')
call_1337 = func_1293_call()
call_1338 = func_1293_call()
var_1348 = relay.var("var_1348", dtype = "bool", shape = (16, 14))#candidate|1348|(16, 14)|var|bool
bop_1349 = relay.left_shift(call_1337.astype('uint32'), relay.reshape(var_1348.astype('uint32'), relay.shape_of(call_1337))) # shape=(16, 14)
bop_1352 = relay.left_shift(call_1338.astype('uint32'), relay.reshape(var_1348.astype('uint32'), relay.shape_of(call_1338))) # shape=(16, 14)
bop_1353 = relay.subtract(call_1337.astype('float32'), relay.reshape(var_1348.astype('float32'), relay.shape_of(call_1337))) # shape=(16, 14)
bop_1356 = relay.subtract(call_1338.astype('float32'), relay.reshape(var_1348.astype('float32'), relay.shape_of(call_1338))) # shape=(16, 14)
bop_1366 = relay.maximum(bop_1349.astype('float32'), relay.reshape(bop_1353.astype('float32'), relay.shape_of(bop_1349))) # shape=(16, 14)
bop_1369 = relay.maximum(bop_1352.astype('float32'), relay.reshape(bop_1356.astype('float32'), relay.shape_of(bop_1352))) # shape=(16, 14)
bop_1372 = relay.right_shift(var_1348.astype('int8'), relay.reshape(bop_1353.astype('int8'), relay.shape_of(var_1348))) # shape=(16, 14)
bop_1375 = relay.right_shift(var_1348.astype('int8'), relay.reshape(bop_1356.astype('int8'), relay.shape_of(var_1348))) # shape=(16, 14)
output = relay.Tuple([bop_1366,bop_1372,])
output2 = relay.Tuple([bop_1369,bop_1375,])
func_1379 = relay.Function([var_1348,], output)
mod['func_1379'] = func_1379
mod = relay.transform.InferType()(mod)
var_1380 = relay.var("var_1380", dtype = "bool", shape = (16, 14))#candidate|1380|(16, 14)|var|bool
output = func_1379(var_1380)
func_1381 = relay.Function([var_1380], output)
mutated_mod['func_1381'] = func_1381
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mod.get_global_var('func_1293')
func_1295_call = mutated_mod.get_global_var('func_1295')
call_1397 = func_1293_call()
call_1398 = func_1293_call()
var_1410 = relay.var("var_1410", dtype = "bool", shape = (16, 14))#candidate|1410|(16, 14)|var|bool
bop_1411 = relay.mod(call_1397.astype('float32'), relay.reshape(var_1410.astype('float32'), relay.shape_of(call_1397))) # shape=(16, 14)
bop_1414 = relay.mod(call_1398.astype('float32'), relay.reshape(var_1410.astype('float32'), relay.shape_of(call_1398))) # shape=(16, 14)
bop_1425 = relay.bitwise_or(bop_1411.astype('uint16'), relay.reshape(call_1397.astype('uint16'), relay.shape_of(bop_1411))) # shape=(16, 14)
bop_1428 = relay.bitwise_or(bop_1414.astype('uint16'), relay.reshape(call_1398.astype('uint16'), relay.shape_of(bop_1414))) # shape=(16, 14)
bop_1429 = relay.power(bop_1411.astype('float32'), relay.reshape(call_1397.astype('float32'), relay.shape_of(bop_1411))) # shape=(16, 14)
bop_1432 = relay.power(bop_1414.astype('float32'), relay.reshape(call_1398.astype('float32'), relay.shape_of(bop_1414))) # shape=(16, 14)
func_164_call = mod.get_global_var('func_164')
func_166_call = mutated_mod.get_global_var('func_166')
const_1439 = relay.const([-2.142233,-4.294102,-9.558869,-9.994536,3.655951,-7.676761,0.587598,1.409702,-0.951510,-9.930234,4.502572,1.061489,4.685636,8.898990,-6.958731,-1.212476,5.974437,5.542732,-7.003902,-8.552848,-9.905240,0.881347,9.076430,-2.881939,0.264386,8.638283,6.705292,-5.254706,-4.909836,-7.586066,3.753810,7.749277,7.322027,-2.295878,1.342162,3.881784,4.234767,3.144877,-7.944387,-9.373370,5.254125,-7.174114,-4.002112,7.955593,-7.813708,3.871771,9.556198,8.660249,2.361249,-6.417500,-7.764527,9.404577,-0.451505,-2.691249,-9.242739,0.263819,8.351535,2.043910,-4.740676,-8.733319,-1.508909,-8.329474,8.859837,-1.953043,9.979834,3.876065,7.452263,4.515522,4.575419,-4.655445,-6.363986,4.129855,0.929074,-5.219338,-7.060553,4.181385,-7.412242,-7.994700,4.342889,7.872204,6.449453,-7.981510,2.020165,-3.490582,9.968596,-1.046860,-3.430634,3.292399,-3.962425,-5.479556,5.836501,3.123671,2.793559,3.972092,5.621462,-7.936215,3.417479,3.490164,-4.271313,2.929967,-3.782939,-8.471122,-4.724542,-5.729777,1.335646,3.603772,-9.470556,-3.338581,-2.314465,-5.003358,-4.951290,-7.691156,9.186768,-7.585992,2.139717,-9.879941,-1.099218,9.308742,-4.485718,1.944438,-1.729837,-5.296571,-4.876043,-8.346825,-8.397382,-0.141739,0.147344,-8.577025,-8.940896,5.216748,0.241050,2.388115,-4.294524,-1.738746,-4.376348,-2.256670,-8.128459,-0.865699,9.907063,2.096892,9.133569,6.352130,-5.463331,-7.522293,-4.850283,-1.156467,0.136143,8.132371,-8.934843,-1.972501,-1.617042,7.099376,-7.846707,2.757477,5.492814,1.494102], dtype = "float32")#candidate|1439|(156,)|const|float32
call_1438 = func_164_call(relay.reshape(const_1439.astype('float32'), [12, 13, 1]))
call_1440 = func_164_call(relay.reshape(const_1439.astype('float32'), [12, 13, 1]))
var_1456 = relay.var("var_1456", dtype = "uint16", shape = (16, 14))#candidate|1456|(16, 14)|var|uint16
bop_1457 = relay.logical_and(bop_1425.astype('bool'), relay.reshape(var_1456.astype('bool'), relay.shape_of(bop_1425))) # shape=(16, 14)
bop_1460 = relay.logical_and(bop_1428.astype('bool'), relay.reshape(var_1456.astype('bool'), relay.shape_of(bop_1428))) # shape=(16, 14)
func_1322_call = mod.get_global_var('func_1322')
func_1328_call = mutated_mod.get_global_var('func_1328')
const_1464 = relay.const([-5.769214,4.921463,-4.485318,7.161011,-1.792275,-4.364716,-0.832514,-5.927948,0.570226,6.433994,-3.847692,4.589219,-7.808712,6.456342,9.360338,4.589294,-3.282401,-4.347019,-8.735382,-3.685136,-4.431975,-6.357500,4.573753,0.634438,7.604664,-8.359667,-3.376588,1.119637,-5.266145,-0.587211,5.321959,4.104603,-4.904991,-2.454206,-1.859866,-8.779714,-6.077042,0.271908,0.340583,-3.893023,-8.236774,1.114430,-8.102417,5.372763,3.853273,9.914839,1.391446,-7.438792,-4.772564,-7.245036,3.446804,1.047448], dtype = "float32")#candidate|1464|(52,)|const|float32
call_1463 = relay.TupleGetItem(func_1322_call(relay.reshape(const_1464.astype('float32'), [4, 13]), relay.reshape(const_1464.astype('float32'), [4, 13]), relay.reshape(const_1464.astype('float32'), [4, 13]), relay.reshape(const_1464.astype('float32'), [4, 13]), ), 0)
call_1465 = relay.TupleGetItem(func_1328_call(relay.reshape(const_1464.astype('float32'), [4, 13]), relay.reshape(const_1464.astype('float32'), [4, 13]), relay.reshape(const_1464.astype('float32'), [4, 13]), relay.reshape(const_1464.astype('float32'), [4, 13]), ), 0)
output = relay.Tuple([bop_1429,call_1438,const_1439,bop_1457,call_1463,const_1464,])
output2 = relay.Tuple([bop_1432,call_1440,const_1439,bop_1460,call_1465,const_1464,])
func_1466 = relay.Function([var_1410,var_1456,], output)
mod['func_1466'] = func_1466
mod = relay.transform.InferType()(mod)
var_1467 = relay.var("var_1467", dtype = "bool", shape = (16, 14))#candidate|1467|(16, 14)|var|bool
var_1468 = relay.var("var_1468", dtype = "uint16", shape = (16, 14))#candidate|1468|(16, 14)|var|uint16
output = func_1466(var_1467,var_1468,)
func_1469 = relay.Function([var_1467,var_1468,], output)
mutated_mod['func_1469'] = func_1469
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mod.get_global_var('func_1293')
func_1295_call = mutated_mod.get_global_var('func_1295')
call_1552 = func_1293_call()
call_1553 = func_1293_call()
uop_1554 = relay.acos(call_1552.astype('float32')) # shape=(16, 14)
uop_1556 = relay.acos(call_1553.astype('float32')) # shape=(16, 14)
output = uop_1554
output2 = uop_1556
func_1562 = relay.Function([], output)
mod['func_1562'] = func_1562
mod = relay.transform.InferType()(mod)
output = func_1562()
func_1563 = relay.Function([], output)
mutated_mod['func_1563'] = func_1563
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1562_call = mod.get_global_var('func_1562')
func_1563_call = mutated_mod.get_global_var('func_1563')
call_1612 = func_1562_call()
call_1613 = func_1562_call()
func_767_call = mod.get_global_var('func_767')
func_772_call = mutated_mod.get_global_var('func_772')
var_1625 = relay.var("var_1625", dtype = "float32", shape = (135,))#candidate|1625|(135,)|var|float32
const_1626 = relay.const([1,10,10,9,3,-8,5,-4,-3,-2,8,9,3,2,7,6,7,-10,-2,-1,-2,-1,-10,-9,-7,-4,-3,7,-1,5,10,-8,7,-4,-8,7,3,6,-7,8,7,1,3,9,-4,-3,-4,-3,-10,4,-1,-7,-1,10,9,-1,10,-8,9,8,-10,10,-2,8,10,-8,-3,7,-10,-3,7,-5,8,-1,-3,-2,9,-8,7,-3,-8,-9,-7,-8,-7,6,-6,2,-6,-5,-9,-1,-1,1,5,-6,-4,5,-3,-8,5,-6,-5,-7,9,-10,-8,-9,10,-8,4,9,9,1,8,-6,-5,3,9,3,-3,10,-5,-10,-9,-1,2,-2,5,-7,-5,5,-5,4,-10,4,1,5,-5,1,5,8,4,-10,-3,2,-2,-2,7,1,-2,-1,2,-8,-2,10,3,-7,-8,-5,-8,1,-4,-4,-8,8,-3,10,6,-10,-9,8,-8,6,-5,-9,8,10,-2,4,-1,-7,-1,10,8,-6,4,-6,2,-10,-3,-10,6,6,4,7,2,2,4,-3,-5,9,6,2,7,4,9,-4,2,5,10,5,-10,7,10,8,2,3,-3,5,6,-2,1,-2,-4,1,10,7,-3,-6,6,-8,-1,6,7,6,1,10,3,-7,8,-2,5,10,4,3,-2,-10,-4,-9,-10,-6,-2,-2,-8,-2,8,7,-1,-1,7,-9,-5,-3,9,-1,8,9,6,5,-2,-2,-8,2,-10,-8,-5,5,8,-8,-2,6,-8,10,-6,-10,9,-9,-5,-10,-3,1,7,-9,-3,-10,8,5,-10,-2,7,5,7,4,-4,-8,-5,5,4,5,-1,-2,-2,6,9,8,-3,-1,8,4,-2,-9,1,6,-7,1,-7,-8,-10,-1,-6,5,2,2,1,-2,-8,9,4,-3,8,1,-8,6,-5,7,4,1,-5,-7,-8,-1,-9,-8,-8,6,-6,5,7,-2,-6,6,-10,-9,-1,-3,-5,-7,-9,-1,-5,-4,5,-9,-1,-5,-1,-9,9,5,-2,8,7,6,-10,2,4,-8,-7,1,9,3,8,-10,9,4,-4,-3,-6,6,5,-3,5,-8,-10,8,-7,-9,4,10,3,-7,6,9,-8,-10,-2,-2,4,-9,10,-4,-10,-2,2,-10,-5,3,6,5,-8,8,8,7,1,6,3,8,5,-8,1,-2,-4,10,-9,-7,-2,9,7,1,1,-9,9,8,9,-9,-3,-1,-9,8,-7,-7,7,8,1,2,-9,6], dtype = "uint64")#candidate|1626|(468,)|const|uint64
call_1624 = relay.TupleGetItem(func_767_call(relay.reshape(var_1625.astype('float32'), [3, 3, 15]), relay.reshape(var_1625.astype('float32'), [3, 3, 15]), relay.reshape(const_1626.astype('uint64'), [468,]), ), 7)
call_1627 = relay.TupleGetItem(func_772_call(relay.reshape(var_1625.astype('float32'), [3, 3, 15]), relay.reshape(var_1625.astype('float32'), [3, 3, 15]), relay.reshape(const_1626.astype('uint64'), [468,]), ), 7)
var_1655 = relay.var("var_1655", dtype = "float32", shape = (135,))#candidate|1655|(135,)|var|float32
bop_1656 = relay.maximum(var_1625.astype('int64'), relay.reshape(var_1655.astype('int64'), relay.shape_of(var_1625))) # shape=(135,)
output = relay.Tuple([call_1612,call_1624,const_1626,bop_1656,])
output2 = relay.Tuple([call_1613,call_1627,const_1626,bop_1656,])
func_1672 = relay.Function([var_1625,var_1655,], output)
mod['func_1672'] = func_1672
mod = relay.transform.InferType()(mod)
mutated_mod['func_1672'] = func_1672
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1672_call = mutated_mod.get_global_var('func_1672')
var_1674 = relay.var("var_1674", dtype = "float32", shape = (135,))#candidate|1674|(135,)|var|float32
var_1675 = relay.var("var_1675", dtype = "float32", shape = (135,))#candidate|1675|(135,)|var|float32
call_1673 = func_1672_call(var_1674,var_1675,)
output = call_1673
func_1676 = relay.Function([var_1674,var_1675,], output)
mutated_mod['func_1676'] = func_1676
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1562_call = mod.get_global_var('func_1562')
func_1563_call = mutated_mod.get_global_var('func_1563')
call_1681 = func_1562_call()
call_1682 = func_1562_call()
uop_1688 = relay.asin(call_1681.astype('float64')) # shape=(16, 14)
uop_1690 = relay.asin(call_1682.astype('float64')) # shape=(16, 14)
uop_1697 = relay.erf(uop_1688.astype('float64')) # shape=(16, 14)
uop_1699 = relay.erf(uop_1690.astype('float64')) # shape=(16, 14)
func_1322_call = mod.get_global_var('func_1322')
func_1328_call = mutated_mod.get_global_var('func_1328')
const_1702 = relay.const([[6.522778,-7.258366],[-3.347868,9.740424],[-5.106468,-8.455093],[-9.256464,0.963163],[-7.674430,2.382265],[-3.730417,-5.145875],[-3.162614,1.330512],[-4.005669,-1.384989],[-8.841375,-3.138451],[2.658113,-3.328060],[-9.942821,0.560965],[5.452593,-1.846569],[2.637790,3.036831],[-1.696049,-5.063869],[-1.173267,0.300105],[0.188013,-5.919409],[-1.654767,-1.530223],[6.641506,-7.996031],[4.865599,-9.857193],[-1.976506,3.539558],[-6.775832,4.415124],[-5.704913,8.935755],[4.343696,3.586481],[8.304132,-4.041597],[5.472893,0.687437],[1.708022,-3.943171]], dtype = "float32")#candidate|1702|(26, 2)|const|float32
call_1701 = relay.TupleGetItem(func_1322_call(relay.reshape(const_1702.astype('float32'), [4, 13]), relay.reshape(const_1702.astype('float32'), [4, 13]), relay.reshape(const_1702.astype('float32'), [4, 13]), relay.reshape(const_1702.astype('float32'), [4, 13]), ), 1)
call_1703 = relay.TupleGetItem(func_1328_call(relay.reshape(const_1702.astype('float32'), [4, 13]), relay.reshape(const_1702.astype('float32'), [4, 13]), relay.reshape(const_1702.astype('float32'), [4, 13]), relay.reshape(const_1702.astype('float32'), [4, 13]), ), 1)
output = relay.Tuple([uop_1697,call_1701,const_1702,])
output2 = relay.Tuple([uop_1699,call_1703,const_1702,])
func_1705 = relay.Function([], output)
mod['func_1705'] = func_1705
mod = relay.transform.InferType()(mod)
mutated_mod['func_1705'] = func_1705
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1705_call = mutated_mod.get_global_var('func_1705')
call_1706 = func_1705_call()
output = call_1706
func_1707 = relay.Function([], output)
mutated_mod['func_1707'] = func_1707
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1714 = relay.var("var_1714", dtype = "float32", shape = (11, 5, 2))#candidate|1714|(11, 5, 2)|var|float32
uop_1715 = relay.acos(var_1714.astype('float32')) # shape=(11, 5, 2)
bop_1722 = relay.mod(uop_1715.astype('float64'), relay.reshape(var_1714.astype('float64'), relay.shape_of(uop_1715))) # shape=(11, 5, 2)
output = bop_1722
output2 = bop_1722
func_1725 = relay.Function([var_1714,], output)
mod['func_1725'] = func_1725
mod = relay.transform.InferType()(mod)
mutated_mod['func_1725'] = func_1725
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1726 = relay.var("var_1726", dtype = "float32", shape = (11, 5, 2))#candidate|1726|(11, 5, 2)|var|float32
func_1725_call = mutated_mod.get_global_var('func_1725')
call_1727 = func_1725_call(var_1726)
output = call_1727
func_1728 = relay.Function([var_1726], output)
mutated_mod['func_1728'] = func_1728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mod.get_global_var('func_1293')
func_1295_call = mutated_mod.get_global_var('func_1295')
call_1739 = func_1293_call()
call_1740 = func_1293_call()
uop_1743 = relay.exp(call_1739.astype('float32')) # shape=(16, 14)
uop_1745 = relay.exp(call_1740.astype('float32')) # shape=(16, 14)
func_643_call = mod.get_global_var('func_643')
func_647_call = mutated_mod.get_global_var('func_647')
const_1757 = relay.const([4,9,2,-2,-5,1,8,-4,7,4,2,9,2,-8,-3,-2,-9,-9,-5,5,-9,4,2,-2,-4,10,-4,-8], dtype = "uint32")#candidate|1757|(28,)|const|uint32
call_1756 = func_643_call(relay.reshape(const_1757.astype('uint32'), [4, 7]), relay.reshape(const_1757.astype('uint32'), [4, 7]), )
call_1758 = func_643_call(relay.reshape(const_1757.astype('uint32'), [4, 7]), relay.reshape(const_1757.astype('uint32'), [4, 7]), )
func_905_call = mod.get_global_var('func_905')
func_908_call = mutated_mod.get_global_var('func_908')
const_1760 = relay.const(-7.116216, dtype = "float32")#candidate|1760|()|const|float32
call_1759 = relay.TupleGetItem(func_905_call(relay.reshape(const_1760.astype('float32'), [])), 2)
call_1761 = relay.TupleGetItem(func_908_call(relay.reshape(const_1760.astype('float32'), [])), 2)
output = relay.Tuple([uop_1743,call_1756,const_1757,call_1759,const_1760,])
output2 = relay.Tuple([uop_1745,call_1758,const_1757,call_1761,const_1760,])
func_1766 = relay.Function([], output)
mod['func_1766'] = func_1766
mod = relay.transform.InferType()(mod)
output = func_1766()
func_1767 = relay.Function([], output)
mutated_mod['func_1767'] = func_1767
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mod.get_global_var('func_1293')
func_1295_call = mutated_mod.get_global_var('func_1295')
call_1782 = func_1293_call()
call_1783 = func_1293_call()
const_1784 = relay.const([[False,True,True,False,False,False,False,False,True,False,True,False,True,True],[True,True,False,True,True,False,False,False,False,True,False,True,True,False],[True,True,True,True,True,False,False,True,False,False,True,True,False,False],[False,False,True,True,True,False,False,True,False,False,True,True,True,False],[False,True,False,False,False,True,True,True,True,True,False,True,False,True],[True,False,True,True,False,True,False,False,True,False,True,True,True,False],[False,False,False,True,True,True,True,False,False,False,True,False,False,False],[True,False,True,False,False,True,True,True,False,True,True,True,False,False],[False,True,False,True,True,True,False,True,False,True,True,False,True,False],[False,True,False,False,True,False,False,False,True,False,True,True,True,False],[False,True,False,False,False,False,True,False,True,True,True,True,False,False],[False,False,False,False,True,True,False,True,True,True,True,False,True,False],[True,False,False,True,False,False,True,False,False,True,False,False,False,True],[True,True,True,True,True,False,False,False,True,False,True,False,True,False],[False,False,False,True,True,False,False,True,False,True,True,True,False,False],[True,True,True,False,False,True,False,True,True,False,True,False,False,True]], dtype = "bool")#candidate|1784|(16, 14)|const|bool
bop_1785 = relay.greater_equal(call_1782.astype('bool'), relay.reshape(const_1784.astype('bool'), relay.shape_of(call_1782))) # shape=(16, 14)
bop_1788 = relay.greater_equal(call_1783.astype('bool'), relay.reshape(const_1784.astype('bool'), relay.shape_of(call_1783))) # shape=(16, 14)
uop_1804 = relay.log(call_1782.astype('float32')) # shape=(16, 14)
uop_1806 = relay.log(call_1783.astype('float32')) # shape=(16, 14)
func_487_call = mod.get_global_var('func_487')
func_489_call = mutated_mod.get_global_var('func_489')
var_1810 = relay.var("var_1810", dtype = "float32", shape = (210,))#candidate|1810|(210,)|var|float32
call_1809 = func_487_call(relay.reshape(var_1810.astype('float32'), [14, 15]))
call_1811 = func_487_call(relay.reshape(var_1810.astype('float32'), [14, 15]))
func_1466_call = mod.get_global_var('func_1466')
func_1469_call = mutated_mod.get_global_var('func_1469')
call_1812 = relay.TupleGetItem(func_1466_call(relay.reshape(const_1784.astype('bool'), [16, 14]), relay.reshape(uop_1804.astype('uint16'), [16, 14]), ), 1)
call_1813 = relay.TupleGetItem(func_1469_call(relay.reshape(const_1784.astype('bool'), [16, 14]), relay.reshape(uop_1804.astype('uint16'), [16, 14]), ), 1)
func_164_call = mod.get_global_var('func_164')
func_166_call = mutated_mod.get_global_var('func_166')
call_1823 = func_164_call(relay.reshape(call_1812.astype('float32'), [12, 13, 1]))
call_1824 = func_164_call(relay.reshape(call_1812.astype('float32'), [12, 13, 1]))
uop_1826 = relay.log2(uop_1804.astype('float32')) # shape=(16, 14)
uop_1828 = relay.log2(uop_1806.astype('float32')) # shape=(16, 14)
bop_1832 = relay.greater(uop_1826.astype('bool'), relay.reshape(uop_1804.astype('bool'), relay.shape_of(uop_1826))) # shape=(16, 14)
bop_1835 = relay.greater(uop_1828.astype('bool'), relay.reshape(uop_1806.astype('bool'), relay.shape_of(uop_1828))) # shape=(16, 14)
func_1229_call = mod.get_global_var('func_1229')
func_1234_call = mutated_mod.get_global_var('func_1234')
var_1838 = relay.var("var_1838", dtype = "float64", shape = (72,))#candidate|1838|(72,)|var|float64
const_1839 = relay.const([[-7,6,3,2],[-8,-3,-7,-1],[-10,-6,8,-7],[3,3,-1,8],[10,-3,10,7],[4,-6,9,-1],[6,-1,7,5]], dtype = "int64")#candidate|1839|(7, 4)|const|int64
call_1837 = relay.TupleGetItem(func_1229_call(relay.reshape(var_1838.astype('float64'), [12, 6]), relay.reshape(const_1839.astype('int64'), [28,]), relay.reshape(var_1838.astype('float32'), [12, 6]), ), 2)
call_1840 = relay.TupleGetItem(func_1234_call(relay.reshape(var_1838.astype('float64'), [12, 6]), relay.reshape(const_1839.astype('int64'), [28,]), relay.reshape(var_1838.astype('float32'), [12, 6]), ), 2)
bop_1843 = relay.minimum(uop_1804.astype('int8'), relay.reshape(bop_1832.astype('int8'), relay.shape_of(uop_1804))) # shape=(16, 14)
bop_1846 = relay.minimum(uop_1806.astype('int8'), relay.reshape(bop_1835.astype('int8'), relay.shape_of(uop_1806))) # shape=(16, 14)
bop_1868 = relay.floor_mod(uop_1804.astype('float32'), relay.reshape(bop_1832.astype('float32'), relay.shape_of(uop_1804))) # shape=(16, 14)
bop_1871 = relay.floor_mod(uop_1806.astype('float32'), relay.reshape(bop_1835.astype('float32'), relay.shape_of(uop_1806))) # shape=(16, 14)
bop_1880 = relay.not_equal(uop_1804.astype('bool'), relay.reshape(bop_1785.astype('bool'), relay.shape_of(uop_1804))) # shape=(16, 14)
bop_1883 = relay.not_equal(uop_1806.astype('bool'), relay.reshape(bop_1788.astype('bool'), relay.shape_of(uop_1806))) # shape=(16, 14)
func_189_call = mod.get_global_var('func_189')
func_192_call = mutated_mod.get_global_var('func_192')
const_1886 = relay.const([4,3,6,-1,3,-10,9,-4,8,-10,-5,-5,-4,7,7,-7,9,-6,-7,4,10,8,-9,2,10,-2,8,5,10,-4,-4,-7,-9,2,2,8,1,1,-10,7,4,-4,-7,-4,1,-3,9,9,-4,5,-6,-8,-1,-9,4,1,-5,2,-4,-10,-4,-1,4,-2,3,-4,2,-8,-3,-4,-2,4,-1,-3,3,-1,8,-10,4,-1,-1,7,-7,6,1,6,6,5,6,-2,3,8,5,-6,-1,-5,-1,6,7,-7,-2,6,-3,-5,8,10,3,3,-7,9,5,10,8,4,-8,6,4,-7,-10,5,-2,-9,4,-6,-10,-1,-1,-1,-9,-4,5,-6,-1,-3,-7,-9,7,5,2,4,-6,-7,8,-6,2,-5,-10,-6,-3,-2,-9,-1,-10,10,10,2,-1,-3,-8,7,8,8,2,-1,-3,7,-3,-2,5,-5,-6,-10,-7,-7,3,6,3,-1,8,-1,-4,-6,-7,2,-10,6,5,6,-1,8,4,-7,-9,-3,-2,-1,1,5,-6,1,-3,6,4,-1,-3,-9,4,6,-8,-2,3,7,1,-3,1,6,10,-4,-4,-9,6,5,-6,5,2,-4,-1,9,5,2,6,1,-2,10,10,4,-7,-5,-4,9,-8,-10,-6,-2,3,-8,-1,-4,-4,8,6,-7,5,-8,-2,2,1,-8,1,9,-3,-2,8,9,2,3,1,3,-3,2,7,5,6,-5,3,-10,3,-5,9,2,-1,-9,8,-8,-2,-6,6,9,3,10,9,6,-3,-4,5,4,-2,10,-5,-9,-1,-8,-4,-1,-2,-5,-3,5,-2,-8,5,-2,-5,5,1,8,10,-6,-4,3,8,-7,1,-6,-10,-9,-8,-2,-3,6,-4,3,2,-8,6,2,-3,6,-2,-8,-1,-9,-8,-4,9,-3,4,-7,-7,3,-10,9,4,7,2,-8,4,1,-10,3,5,-4,-1,-7,10,4,-5,-3,-10,6,-8,4,4,4,-2,-5,2,-8,-10,3,-3,10,-8,10,3,-2,2,1,-3,2,-1,-2,4,-5,-3,6,5,-7,-9,3,-2,-1,10,4,8,-1,-3,-1,3,3,6,5,7,6,-8,6,-3,8,-2,9,8,-10,-2,-8,-8,-2,-4,8,10,5,-1,10,1,-9,10,-2,7,9,-4,-4,-2,9,-5,7,-10,-5,-5,-9,5,-9,6,-5,-5,2,-5,-4,-7,1,1,-9,-10,4,-9,4,-10,1,6,1], dtype = "uint64")#candidate|1886|(468,)|const|uint64
call_1885 = relay.TupleGetItem(func_189_call(relay.reshape(const_1886.astype('uint64'), [4, 13, 9]), relay.reshape(call_1823.astype('float32'), [156,]), ), 2)
call_1887 = relay.TupleGetItem(func_192_call(relay.reshape(const_1886.astype('uint64'), [4, 13, 9]), relay.reshape(call_1823.astype('float32'), [156,]), ), 2)
func_1672_call = mod.get_global_var('func_1672')
func_1676_call = mutated_mod.get_global_var('func_1676')
const_1901 = relay.const([4.227029,2.714372,1.671773,-0.684067,-1.643260,5.237814,-5.897428,-4.062814,-7.512655,0.573976,6.376723,3.645501,6.045917,6.210566,-5.626500,0.153811,-7.054599,-1.472482,9.153829,-1.700237,1.599803,-7.472315,-7.856219,-9.540484,7.471780,-0.235086,9.439285,1.706523,5.855146,-8.486195,-5.499445,2.636062,-0.083493,-9.159008,-7.305577,5.968006,6.582962,-9.540804,-5.285832,-7.940722,-8.110566,-8.668364,-1.963375,-1.295873,-5.091108,6.540557,-5.097723,-9.005671,-8.055577,3.866598,7.731177,2.828733,-4.434158,3.919712,-8.728282,-7.432347,-4.765016,9.452905,-8.645898,-3.074767,-5.313218,7.798097,-1.739438,5.742417,0.258095,-0.680529,1.494904,6.124089,6.269670,-1.634275,-5.199878,-4.465595,-7.733897,-3.931929,5.875769,4.332385,-4.062089,-9.461988,-8.448474,-0.539065,-4.847904,5.749838,-5.515791,-2.615363,9.804582,6.518777,2.211557,-4.449825,9.469893,5.405429,1.454127,-9.056559,7.361058,-3.996913,-9.398736,2.199910,8.702222,-5.721421,9.153677,3.959036,-7.602354,4.864022,-6.527312,7.676948,-0.059878,-4.569507,5.126624,4.213810,-1.734116,8.012932,-3.869562,7.420727,0.893984,5.938198,-2.821676,0.129777,-2.967132,3.384164,-7.545750,-3.526488,1.186563,-3.642480,-0.429718,3.853897,2.126245,0.214991,-8.808731,-3.345695,9.333608,-4.431632,-4.551449,-9.272840,-9.786653,-8.677375,-5.283134], dtype = "float32")#candidate|1901|(135,)|const|float32
call_1900 = relay.TupleGetItem(func_1672_call(relay.reshape(const_1901.astype('float32'), [135,]), relay.reshape(const_1901.astype('float32'), [135,]), ), 1)
call_1902 = relay.TupleGetItem(func_1676_call(relay.reshape(const_1901.astype('float32'), [135,]), relay.reshape(const_1901.astype('float32'), [135,]), ), 1)
output = relay.Tuple([call_1809,var_1810,call_1812,call_1823,call_1837,var_1838,const_1839,bop_1843,bop_1868,bop_1880,call_1885,const_1886,call_1900,const_1901,])
output2 = relay.Tuple([call_1811,var_1810,call_1813,call_1824,call_1840,var_1838,const_1839,bop_1846,bop_1871,bop_1883,call_1887,const_1886,call_1902,const_1901,])
func_1908 = relay.Function([var_1810,var_1838,], output)
mod['func_1908'] = func_1908
mod = relay.transform.InferType()(mod)
mutated_mod['func_1908'] = func_1908
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1908_call = mutated_mod.get_global_var('func_1908')
var_1910 = relay.var("var_1910", dtype = "float32", shape = (210,))#candidate|1910|(210,)|var|float32
var_1911 = relay.var("var_1911", dtype = "float64", shape = (72,))#candidate|1911|(72,)|var|float64
call_1909 = func_1908_call(var_1910,var_1911,)
output = call_1909
func_1912 = relay.Function([var_1910,var_1911,], output)
mutated_mod['func_1912'] = func_1912
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1916 = relay.var("var_1916", dtype = "float32", shape = (1, 16, 13))#candidate|1916|(1, 16, 13)|var|float32
var_1917 = relay.var("var_1917", dtype = "float32", shape = (2, 16, 13))#candidate|1917|(2, 16, 13)|var|float32
bop_1918 = relay.add(var_1916.astype('float32'), var_1917.astype('float32')) # shape=(2, 16, 13)
output = bop_1918
output2 = bop_1918
func_1921 = relay.Function([var_1916,var_1917,], output)
mod['func_1921'] = func_1921
mod = relay.transform.InferType()(mod)
var_1922 = relay.var("var_1922", dtype = "float32", shape = (1, 16, 13))#candidate|1922|(1, 16, 13)|var|float32
var_1923 = relay.var("var_1923", dtype = "float32", shape = (2, 16, 13))#candidate|1923|(2, 16, 13)|var|float32
output = func_1921(var_1922,var_1923,)
func_1924 = relay.Function([var_1922,var_1923,], output)
mutated_mod['func_1924'] = func_1924
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1705_call = mod.get_global_var('func_1705')
func_1707_call = mutated_mod.get_global_var('func_1707')
call_1947 = relay.TupleGetItem(func_1705_call(), 1)
call_1948 = relay.TupleGetItem(func_1707_call(), 1)
output = relay.Tuple([call_1947,])
output2 = relay.Tuple([call_1948,])
func_1964 = relay.Function([], output)
mod['func_1964'] = func_1964
mod = relay.transform.InferType()(mod)
output = func_1964()
func_1965 = relay.Function([], output)
mutated_mod['func_1965'] = func_1965
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1964_call = mod.get_global_var('func_1964')
func_1965_call = mutated_mod.get_global_var('func_1965')
call_2007 = relay.TupleGetItem(func_1964_call(), 0)
call_2008 = relay.TupleGetItem(func_1965_call(), 0)
var_2010 = relay.var("var_2010", dtype = "bool", shape = (4, 13))#candidate|2010|(4, 13)|var|bool
bop_2011 = relay.not_equal(call_2007.astype('bool'), relay.reshape(var_2010.astype('bool'), relay.shape_of(call_2007))) # shape=(4, 13)
bop_2014 = relay.not_equal(call_2008.astype('bool'), relay.reshape(var_2010.astype('bool'), relay.shape_of(call_2008))) # shape=(4, 13)
func_1466_call = mod.get_global_var('func_1466')
func_1469_call = mutated_mod.get_global_var('func_1469')
var_2030 = relay.var("var_2030", dtype = "bool", shape = (224,))#candidate|2030|(224,)|var|bool
call_2029 = relay.TupleGetItem(func_1466_call(relay.reshape(var_2030.astype('bool'), [16, 14]), relay.reshape(var_2030.astype('uint16'), [16, 14]), ), 3)
call_2031 = relay.TupleGetItem(func_1469_call(relay.reshape(var_2030.astype('bool'), [16, 14]), relay.reshape(var_2030.astype('uint16'), [16, 14]), ), 3)
output = relay.Tuple([bop_2011,call_2029,var_2030,])
output2 = relay.Tuple([bop_2014,call_2031,var_2030,])
func_2048 = relay.Function([var_2010,var_2030,], output)
mod['func_2048'] = func_2048
mod = relay.transform.InferType()(mod)
var_2049 = relay.var("var_2049", dtype = "bool", shape = (4, 13))#candidate|2049|(4, 13)|var|bool
var_2050 = relay.var("var_2050", dtype = "bool", shape = (224,))#candidate|2050|(224,)|var|bool
output = func_2048(var_2049,var_2050,)
func_2051 = relay.Function([var_2049,var_2050,], output)
mutated_mod['func_2051'] = func_2051
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2055 = relay.var("var_2055", dtype = "float64", shape = (14, 6))#candidate|2055|(14, 6)|var|float64
uop_2056 = relay.sqrt(var_2055.astype('float64')) # shape=(14, 6)
output = relay.Tuple([uop_2056,])
output2 = relay.Tuple([uop_2056,])
func_2065 = relay.Function([var_2055,], output)
mod['func_2065'] = func_2065
mod = relay.transform.InferType()(mod)
var_2066 = relay.var("var_2066", dtype = "float64", shape = (14, 6))#candidate|2066|(14, 6)|var|float64
output = func_2065(var_2066)
func_2067 = relay.Function([var_2066], output)
mutated_mod['func_2067'] = func_2067
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1964_call = mod.get_global_var('func_1964')
func_1965_call = mutated_mod.get_global_var('func_1965')
call_2076 = relay.TupleGetItem(func_1964_call(), 0)
call_2077 = relay.TupleGetItem(func_1965_call(), 0)
func_189_call = mod.get_global_var('func_189')
func_192_call = mutated_mod.get_global_var('func_192')
const_2080 = relay.const([-4,-9,1,-10,2,-5,-8,-7,-8,2,-7,5,5,10,-2,-5,1,-3,-5,-7,-3,-5,1,-3,-9,8,2,-9,3,5,8,4,-3,4,-9,4,-7,2,-3,6,-10,5,10,-8,-3,10,2,-5,-8,4,1,-9,1,4,-8,3,5,-9,3,-9,10,-2,-3,9,7,3,5,4,-5,9,9,1,-3,-10,-10,7,-8,2,7,7,9,9,3,-2,-2,-2,-5,6,5,-6,-4,-5,-1,8,-2,-9,-4,-7,-4,5,-1,10,2,-6,9,-4,-3,5,-7,2,-7,-2,-1,-10,-9,-4,4,8,7,6,6,-9,10,4,9,9,-7,7,-10,-5,-3,-1,1,2,-5,-6,-8,-1,10,-6,-9,3,5,-6,-8,-6,-9,8,8,2,10,-4,2,7,-1,1,9,8,5,-1,-6,-5,-5,9,-5,-7,-8,5,8,-1,6,-1,-7,1,4,8,6,-4,-8,-4,-3,-10,-6,10,9,-5,5,-2,-4,6,-2,5,-8,10,-4,-1,-7,-6,7,9,9,-1,-7,-7,-5,-8,-7,-8,3,-3,2,4,6,-4,-7,-9,4,-1,4,-3,-2,7,-3,-6,-2,-5,-4,6,8,3,5,-4,-1,-2,-2,3,4,-7,6,5,-4,-2,9,8,-2,-5,-2,-5,-3,-7,2,10,1,-6,1,-5,-4,-5,9,-2,-6,-7,5,3,-1,-4,-2,10,4,-2,-7,-1,-6,-4,2,7,5,6,5,10,10,10,10,7,6,-2,6,4,2,10,-5,1,8,10,7,-1,5,10,1,-1,7,-10,7,-9,-5,2,-6,10,10,-9,-1,5,4,-3,-5,2,10,-8,-9,5,-6,1,-9,7,-2,-8,9,-1,1,9,-8,9,-6,-4,-6,6,7,-5,10,-8,6,-7,1,9,-2,9,3,8,7,-2,-3,6,-8,8,10,-2,2,-3,-9,-5,5,1,-4,-5,2,-5,-6,7,-1,-3,9,-9,-7,1,7,5,2,9,-6,8,-2,5,5,3,4,-6,1,5,-10,-2,-4,10,-4,1,-5,-9,3,6,-5,5,5,6,9,-4,8,5,-4,6,-3,-9,8,-5,4,-9,2,-2,-5,7,-8,10,-8,7,-1,-3,10,3,1,-8,-3,6,1,4,-6,10,1,-1,-9,4,-1,-4,-8,10,-7,6,5,7,10,4,4,2,-5,6,-9,-4,7,3,5,7,-2,-3,-7,-5,-4,4,2,-3,7,3], dtype = "uint64")#candidate|2080|(468,)|const|uint64
var_2081 = relay.var("var_2081", dtype = "float32", shape = (156,))#candidate|2081|(156,)|var|float32
call_2079 = relay.TupleGetItem(func_189_call(relay.reshape(const_2080.astype('uint64'), [4, 13, 9]), relay.reshape(var_2081.astype('float32'), [156,]), ), 1)
call_2082 = relay.TupleGetItem(func_192_call(relay.reshape(const_2080.astype('uint64'), [4, 13, 9]), relay.reshape(var_2081.astype('float32'), [156,]), ), 1)
func_1705_call = mod.get_global_var('func_1705')
func_1707_call = mutated_mod.get_global_var('func_1707')
call_2084 = relay.TupleGetItem(func_1705_call(), 2)
call_2085 = relay.TupleGetItem(func_1707_call(), 2)
bop_2093 = relay.logical_and(call_2084.astype('bool'), relay.reshape(call_2076.astype('bool'), relay.shape_of(call_2084))) # shape=(26, 2)
bop_2096 = relay.logical_and(call_2085.astype('bool'), relay.reshape(call_2077.astype('bool'), relay.shape_of(call_2085))) # shape=(26, 2)
func_905_call = mod.get_global_var('func_905')
func_908_call = mutated_mod.get_global_var('func_908')
const_2099 = relay.const(-6.844623, dtype = "float32")#candidate|2099|()|const|float32
call_2098 = relay.TupleGetItem(func_905_call(relay.reshape(const_2099.astype('float32'), [])), 1)
call_2100 = relay.TupleGetItem(func_908_call(relay.reshape(const_2099.astype('float32'), [])), 1)
output = relay.Tuple([call_2079,const_2080,var_2081,bop_2093,call_2098,const_2099,])
output2 = relay.Tuple([call_2082,const_2080,var_2081,bop_2096,call_2100,const_2099,])
func_2104 = relay.Function([var_2081,], output)
mod['func_2104'] = func_2104
mod = relay.transform.InferType()(mod)
var_2105 = relay.var("var_2105", dtype = "float32", shape = (156,))#candidate|2105|(156,)|var|float32
output = func_2104(var_2105)
func_2106 = relay.Function([var_2105], output)
mutated_mod['func_2106'] = func_2106
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1766_call = mod.get_global_var('func_1766')
func_1767_call = mutated_mod.get_global_var('func_1767')
call_2121 = relay.TupleGetItem(func_1766_call(), 1)
call_2122 = relay.TupleGetItem(func_1767_call(), 1)
var_2124 = relay.var("var_2124", dtype = "uint32", shape = (4, 7))#candidate|2124|(4, 7)|var|uint32
bop_2125 = relay.logical_xor(call_2121.astype('uint32'), relay.reshape(var_2124.astype('uint32'), relay.shape_of(call_2121))) # shape=(4, 7)
bop_2128 = relay.logical_xor(call_2122.astype('uint32'), relay.reshape(var_2124.astype('uint32'), relay.shape_of(call_2122))) # shape=(4, 7)
output = relay.Tuple([bop_2125,])
output2 = relay.Tuple([bop_2128,])
func_2149 = relay.Function([var_2124,], output)
mod['func_2149'] = func_2149
mod = relay.transform.InferType()(mod)
mutated_mod['func_2149'] = func_2149
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2150 = relay.var("var_2150", dtype = "uint32", shape = (4, 7))#candidate|2150|(4, 7)|var|uint32
func_2149_call = mutated_mod.get_global_var('func_2149')
call_2151 = func_2149_call(var_2150)
output = call_2151
func_2152 = relay.Function([var_2150], output)
mutated_mod['func_2152'] = func_2152
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2202 = relay.var("var_2202", dtype = "uint32", shape = (5, 7, 11))#candidate|2202|(5, 7, 11)|var|uint32
var_2203 = relay.var("var_2203", dtype = "uint32", shape = (5, 7, 11))#candidate|2203|(5, 7, 11)|var|uint32
bop_2204 = relay.less_equal(var_2202.astype('bool'), relay.reshape(var_2203.astype('bool'), relay.shape_of(var_2202))) # shape=(5, 7, 11)
bop_2219 = relay.subtract(bop_2204.astype('float64'), relay.reshape(var_2202.astype('float64'), relay.shape_of(bop_2204))) # shape=(5, 7, 11)
bop_2249 = relay.bitwise_or(var_2203.astype('uint32'), relay.reshape(var_2202.astype('uint32'), relay.shape_of(var_2203))) # shape=(5, 7, 11)
output = relay.Tuple([bop_2219,bop_2249,])
output2 = relay.Tuple([bop_2219,bop_2249,])
func_2261 = relay.Function([var_2202,var_2203,], output)
mod['func_2261'] = func_2261
mod = relay.transform.InferType()(mod)
var_2262 = relay.var("var_2262", dtype = "uint32", shape = (5, 7, 11))#candidate|2262|(5, 7, 11)|var|uint32
var_2263 = relay.var("var_2263", dtype = "uint32", shape = (5, 7, 11))#candidate|2263|(5, 7, 11)|var|uint32
output = func_2261(var_2262,var_2263,)
func_2264 = relay.Function([var_2262,var_2263,], output)
mutated_mod['func_2264'] = func_2264
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2288 = relay.var("var_2288", dtype = "float32", shape = (8, 9, 16))#candidate|2288|(8, 9, 16)|var|float32
uop_2289 = relay.tan(var_2288.astype('float32')) # shape=(8, 9, 16)
output = uop_2289
output2 = uop_2289
func_2302 = relay.Function([var_2288,], output)
mod['func_2302'] = func_2302
mod = relay.transform.InferType()(mod)
var_2303 = relay.var("var_2303", dtype = "float32", shape = (8, 9, 16))#candidate|2303|(8, 9, 16)|var|float32
output = func_2302(var_2303)
func_2304 = relay.Function([var_2303], output)
mutated_mod['func_2304'] = func_2304
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2324 = relay.var("var_2324", dtype = "float64", shape = (10, 15))#candidate|2324|(10, 15)|var|float64
uop_2325 = relay.cos(var_2324.astype('float64')) # shape=(10, 15)
output = relay.Tuple([uop_2325,])
output2 = relay.Tuple([uop_2325,])
func_2335 = relay.Function([var_2324,], output)
mod['func_2335'] = func_2335
mod = relay.transform.InferType()(mod)
var_2336 = relay.var("var_2336", dtype = "float64", shape = (10, 15))#candidate|2336|(10, 15)|var|float64
output = func_2335(var_2336)
func_2337 = relay.Function([var_2336], output)
mutated_mod['func_2337'] = func_2337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1705_call = mod.get_global_var('func_1705')
func_1707_call = mutated_mod.get_global_var('func_1707')
call_2339 = relay.TupleGetItem(func_1705_call(), 0)
call_2340 = relay.TupleGetItem(func_1707_call(), 0)
output = relay.Tuple([call_2339,])
output2 = relay.Tuple([call_2340,])
func_2354 = relay.Function([], output)
mod['func_2354'] = func_2354
mod = relay.transform.InferType()(mod)
mutated_mod['func_2354'] = func_2354
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2354_call = mutated_mod.get_global_var('func_2354')
call_2355 = func_2354_call()
output = call_2355
func_2356 = relay.Function([], output)
mutated_mod['func_2356'] = func_2356
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2398 = relay.var("var_2398", dtype = "float64", shape = (13, 14))#candidate|2398|(13, 14)|var|float64
uop_2399 = relay.rsqrt(var_2398.astype('float64')) # shape=(13, 14)
bop_2407 = relay.right_shift(var_2398.astype('uint64'), relay.reshape(uop_2399.astype('uint64'), relay.shape_of(var_2398))) # shape=(13, 14)
uop_2413 = relay.acos(var_2398.astype('float64')) # shape=(13, 14)
uop_2417 = relay.sqrt(bop_2407.astype('float32')) # shape=(13, 14)
bop_2425 = relay.mod(bop_2407.astype('float32'), relay.reshape(uop_2417.astype('float32'), relay.shape_of(bop_2407))) # shape=(13, 14)
output = relay.Tuple([uop_2413,bop_2425,])
output2 = relay.Tuple([uop_2413,bop_2425,])
func_2435 = relay.Function([var_2398,], output)
mod['func_2435'] = func_2435
mod = relay.transform.InferType()(mod)
var_2436 = relay.var("var_2436", dtype = "float64", shape = (13, 14))#candidate|2436|(13, 14)|var|float64
output = func_2435(var_2436)
func_2437 = relay.Function([var_2436], output)
mutated_mod['func_2437'] = func_2437
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2535 = relay.var("var_2535", dtype = "uint64", shape = (4, 9))#candidate|2535|(4, 9)|var|uint64
var_2536 = relay.var("var_2536", dtype = "uint64", shape = (4, 9))#candidate|2536|(4, 9)|var|uint64
bop_2537 = relay.less(var_2535.astype('bool'), relay.reshape(var_2536.astype('bool'), relay.shape_of(var_2535))) # shape=(4, 9)
bop_2543 = relay.add(var_2535.astype('int32'), relay.reshape(var_2536.astype('int32'), relay.shape_of(var_2535))) # shape=(4, 9)
func_1562_call = mod.get_global_var('func_1562')
func_1563_call = mutated_mod.get_global_var('func_1563')
call_2548 = func_1562_call()
call_2549 = func_1562_call()
uop_2552 = relay.tan(var_2536.astype('float32')) # shape=(4, 9)
bop_2564 = relay.maximum(uop_2552.astype('uint32'), relay.reshape(bop_2543.astype('uint32'), relay.shape_of(uop_2552))) # shape=(4, 9)
bop_2576 = relay.right_shift(bop_2564.astype('uint8'), relay.reshape(uop_2552.astype('uint8'), relay.shape_of(bop_2564))) # shape=(4, 9)
func_2335_call = mod.get_global_var('func_2335')
func_2337_call = mutated_mod.get_global_var('func_2337')
const_2580 = relay.const([7.161907,-2.257311,-0.359647,-8.212386,7.801438,3.936125,4.839472,9.886293,-4.154535,1.971146,-8.182533,-9.512528,2.241015,1.305416,6.713446,9.397474,-5.666106,9.309706,-4.175355,8.393181,-4.314005,4.786274,-6.397531,7.949473,-6.660249,5.740001,0.137962,3.042023,-3.066802,9.667166,1.110464,-2.933070,-3.403636,-4.676533,2.140691,-6.695349,7.509694,4.610746,-9.882922,-5.817486,5.359843,7.569421,4.468423,5.853095,3.582421,-7.157916,-1.024173,3.489609,-9.343512,7.440981,4.176263,-0.586424,3.522303,-6.338755,-2.748528,-9.749806,3.347472,-3.655557,8.943226,-7.251097,-3.286283,3.581948,4.226861,-9.708332,4.781320,9.583109,1.313695,7.896771,7.147022,0.447600,-0.063101,-8.978846,9.450879,-2.038676,-3.117760,-0.922671,6.132371,5.864509,-5.205165,9.589099,-8.524383,-4.246635,-9.706534,-3.299227,8.293386,7.619183,-6.989929,2.380266,2.371900,-2.797677,-8.090644,-1.343066,-3.507038,-3.363785,8.925904,-8.990657,-4.278231,-3.972111,-7.093766,0.613858,-7.883776,3.073752,-9.045100,-4.406210,3.713479,5.118661,1.913939,7.393904,-9.878445,-0.606298,3.247090,2.924796,6.387831,-8.378162,-1.178478,-2.675071,2.978290,0.945409,-6.625066,4.158388,-5.051746,-0.195079,-9.346100,-5.769424,5.686825,2.385155,7.221670,6.463122,-2.613885,5.788286,5.822498,3.723171,9.636619,-7.126587,-3.868042,3.713465,-9.342670,6.619156,-0.953529,8.240798,-4.996224,-4.166336,0.486190,3.528538,-1.720071,4.148710,-2.217335,-4.400994,8.492477,7.341913], dtype = "float64")#candidate|2580|(150,)|const|float64
call_2579 = relay.TupleGetItem(func_2335_call(relay.reshape(const_2580.astype('float64'), [10, 15])), 0)
call_2581 = relay.TupleGetItem(func_2337_call(relay.reshape(const_2580.astype('float64'), [10, 15])), 0)
bop_2582 = relay.floor_mod(uop_2552.astype('float64'), relay.reshape(bop_2564.astype('float64'), relay.shape_of(uop_2552))) # shape=(4, 9)
uop_2602 = relay.log10(bop_2576.astype('float32')) # shape=(4, 9)
func_1725_call = mod.get_global_var('func_1725')
func_1728_call = mutated_mod.get_global_var('func_1728')
var_2632 = relay.var("var_2632", dtype = "float32", shape = (110,))#candidate|2632|(110,)|var|float32
call_2631 = func_1725_call(relay.reshape(var_2632.astype('float32'), [11, 5, 2]))
call_2633 = func_1725_call(relay.reshape(var_2632.astype('float32'), [11, 5, 2]))
bop_2638 = relay.less_equal(bop_2576.astype('bool'), relay.reshape(bop_2543.astype('bool'), relay.shape_of(bop_2576))) # shape=(4, 9)
uop_2643 = relay.rsqrt(uop_2602.astype('float64')) # shape=(4, 9)
output = relay.Tuple([bop_2537,call_2548,call_2579,const_2580,bop_2582,call_2631,var_2632,bop_2638,uop_2643,])
output2 = relay.Tuple([bop_2537,call_2549,call_2581,const_2580,bop_2582,call_2633,var_2632,bop_2638,uop_2643,])
func_2654 = relay.Function([var_2535,var_2536,var_2632,], output)
mod['func_2654'] = func_2654
mod = relay.transform.InferType()(mod)
var_2655 = relay.var("var_2655", dtype = "uint64", shape = (4, 9))#candidate|2655|(4, 9)|var|uint64
var_2656 = relay.var("var_2656", dtype = "uint64", shape = (4, 9))#candidate|2656|(4, 9)|var|uint64
var_2657 = relay.var("var_2657", dtype = "float32", shape = (110,))#candidate|2657|(110,)|var|float32
output = func_2654(var_2655,var_2656,var_2657,)
func_2658 = relay.Function([var_2655,var_2656,var_2657,], output)
mutated_mod['func_2658'] = func_2658
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2680 = relay.const([[-1,-1,-8,2,-4,-9,10],[-4,-5,-5,1,-9,-6,-2],[-8,-6,1,5,-6,3,5],[6,-3,4,-5,-1,4,-7],[-10,5,3,6,-1,-3,7],[-8,8,-8,8,9,2,10],[-1,-6,5,9,-3,1,-4],[-2,2,3,-7,1,2,9],[-9,10,3,10,-7,7,4],[5,-6,-10,8,8,-4,-1],[8,-8,6,-8,-4,-10,-7],[-5,6,-10,-9,-3,-2,4],[-2,2,-4,9,-8,2,5],[-5,8,-3,1,9,2,9],[-2,1,8,6,-4,6,9],[-4,-8,7,2,-2,-5,-1]], dtype = "int64")#candidate|2680|(16, 7)|const|int64
var_2681 = relay.var("var_2681", dtype = "int64", shape = (16, 7))#candidate|2681|(16, 7)|var|int64
bop_2682 = relay.equal(const_2680.astype('bool'), relay.reshape(var_2681.astype('bool'), relay.shape_of(const_2680))) # shape=(16, 7)
var_2691 = relay.var("var_2691", dtype = "int64", shape = (16, 7))#candidate|2691|(16, 7)|var|int64
bop_2692 = relay.less_equal(var_2681.astype('bool'), relay.reshape(var_2691.astype('bool'), relay.shape_of(var_2681))) # shape=(16, 7)
uop_2696 = relay.erf(bop_2682.astype('float32')) # shape=(16, 7)
bop_2702 = relay.bitwise_or(uop_2696.astype('uint32'), relay.reshape(bop_2692.astype('uint32'), relay.shape_of(uop_2696))) # shape=(16, 7)
func_1921_call = mod.get_global_var('func_1921')
func_1924_call = mutated_mod.get_global_var('func_1924')
var_2707 = relay.var("var_2707", dtype = "float32", shape = (208,))#candidate|2707|(208,)|var|float32
const_2708 = relay.const([[2.224147,8.240150,-4.715487,4.548005,4.585436,-0.299459,8.981792,-3.833170,7.181267,-1.276073,-2.854659,-4.779660,-5.688699,4.734854,-3.038237,-6.670722,-4.696044,4.031589,-3.012949,-4.340761,0.913924,5.077664,1.802401,4.319347,4.035097,4.191548,-1.037377,-6.507952,6.862710,3.697292,4.984003,6.780759,8.117471,-5.143540,5.687637,8.131224,9.865658,0.976992,-0.657997,-2.130635,-6.025318,8.611542,6.348343,9.322054,9.112629,-4.514133,4.340941,-4.725312,-4.462416,-2.910168,-8.175792,-2.528180,-1.764234,-0.542163,-0.661184,-5.707764,-1.939551,8.327736,0.568552,-0.636234,8.419329,0.223890,-6.404182,-1.818575,7.677576,-3.557229,-7.903082,5.907817,-8.117458,-1.193261,-3.141896,1.735979,-4.624343,-3.719625,-3.560864,9.207326,5.874660,-1.128617,-0.184977,-3.595286,2.563459,4.431864,0.337310,-2.754458,-4.228220,-2.350962,7.762832,9.519983,-9.040467,3.170608,-2.683390,5.727925,7.829960,0.215613,-4.315233,3.387669,-3.801643,2.791092,-1.641698,9.206043,-6.971033,8.436281,-8.059089,-6.471166],[0.832941,4.973873,-7.894007,4.199800,-2.894235,3.365997,8.081385,-1.892568,-9.982388,3.315964,8.268122,6.789922,7.981889,8.322034,-2.056829,-2.036912,3.465985,9.109321,-8.007479,3.090935,-2.280447,8.812035,-5.815119,2.245674,-4.104279,2.536376,-1.388750,0.194278,9.413094,4.792175,-9.196172,6.384987,5.429012,5.548195,-5.966527,-6.818136,-2.181031,-3.815821,6.202110,6.434389,-6.607726,7.205113,9.396180,-4.975502,5.088222,-2.750220,-8.333008,2.318833,1.418959,1.076426,6.112564,-2.835554,-5.925557,-4.727202,-4.535505,3.464464,-1.126968,4.056855,5.477687,8.105883,2.192131,6.494063,8.838338,9.866115,1.991043,-4.245857,-5.544453,-4.894692,1.113181,-5.670904,-2.432865,5.736914,-1.169857,3.594742,-9.015183,-4.738921,-6.058678,4.742117,-6.821971,-4.489018,-9.534599,2.870316,7.651701,8.205192,-5.745062,3.228804,7.847411,-1.664070,8.515138,6.664075,-1.551835,-2.699763,1.165131,-6.566733,-7.914021,-4.263219,-0.758290,-9.836113,9.461379,-3.593562,1.158847,6.953614,-0.292287,5.847682],[8.625966,-7.681863,-2.488740,-1.503315,-5.764715,-2.378497,-4.386328,0.136419,-8.254288,-0.465507,7.266215,9.042698,-4.328704,4.279164,-1.144290,0.452541,-4.735655,8.879029,-4.467644,-8.348596,8.744207,3.264827,7.110494,-0.915399,-2.152745,-9.270830,1.290303,9.407910,-5.497012,3.569838,0.547924,-9.743505,-7.373751,-0.003916,7.931281,4.729295,3.159398,-8.819209,-3.177397,-0.065431,-3.254162,-9.985229,5.291825,4.003882,8.893734,-0.435722,9.695308,-8.518005,6.391153,-1.442224,2.603862,8.769661,1.810812,-2.547114,-6.411049,-1.696943,2.413341,-8.401660,-1.436584,-4.208901,-1.701613,-7.985338,0.541304,8.624961,-3.572934,7.495499,-7.791490,-8.707314,5.389894,2.981751,-8.118425,-9.156131,-4.606354,-6.789458,-7.612499,-4.597896,6.207301,7.220349,7.184429,5.735216,-8.266366,-5.108962,6.115557,-4.866805,4.992341,-2.196329,-8.990434,2.406391,-0.204468,2.094190,-1.028296,2.621416,1.928637,-6.525991,-4.288222,-4.706814,-3.897762,5.608363,4.377277,-4.785496,2.061615,-5.473190,0.599306,-1.345470],[8.570478,7.585149,-8.315859,-4.398676,5.458792,-1.680483,-5.264530,-7.589090,4.664827,5.058082,-9.263084,2.804219,-7.697080,4.826403,7.522156,1.724182,9.922715,-0.522515,-5.161079,1.252611,4.305771,0.563177,-3.373926,3.757925,7.333342,2.449520,-1.007513,8.766276,-6.692096,2.050462,-0.304496,7.701675,8.640221,9.894137,-0.849315,7.738534,5.107036,6.040787,-0.295994,6.188771,6.651664,6.863070,-7.370669,9.688610,4.915765,-7.674496,9.052779,-5.314750,-6.354780,-3.498325,-7.200177,-7.720122,-2.886029,-8.344380,-6.150864,-3.949867,-4.514096,-4.803880,-8.265898,0.643369,-6.862294,-8.764630,9.170200,-2.190688,-8.247236,-5.529712,-8.504857,-5.015813,4.286528,7.955217,8.274685,7.419759,-0.825230,-5.065759,9.982848,-2.239200,5.667793,-6.336120,1.542421,-1.043762,6.849617,3.192535,-3.253097,4.897412,-5.319754,5.449400,-8.552729,8.327820,-4.393847,-9.462199,3.224130,3.181392,9.476300,-6.642630,-3.057367,-5.653531,0.203438,2.183587,-0.988089,8.149942,-5.712271,-6.006458,-6.583861,7.089336]], dtype = "float32")#candidate|2708|(4, 104)|const|float32
call_2706 = func_1921_call(relay.reshape(var_2707.astype('float32'), [1, 16, 13]), relay.reshape(const_2708.astype('float32'), [2, 16, 13]), )
call_2709 = func_1921_call(relay.reshape(var_2707.astype('float32'), [1, 16, 13]), relay.reshape(const_2708.astype('float32'), [2, 16, 13]), )
bop_2717 = relay.floor_divide(bop_2682.astype('float32'), relay.reshape(bop_2692.astype('float32'), relay.shape_of(bop_2682))) # shape=(16, 7)
output = relay.Tuple([bop_2702,call_2706,var_2707,const_2708,bop_2717,])
output2 = relay.Tuple([bop_2702,call_2709,var_2707,const_2708,bop_2717,])
F = relay.Function([var_2681,var_2691,var_2707,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_2681,var_2691,var_2707,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_2681= np.array([[-1,-9,-9,-9,3,-5,-4],[-10,-1,-5,-9,4,-9,9],[4,-1,6,-3,-8,9,2],[10,2,2,-7,8,9,7],[8,9,-7,-9,8,-9,6],[10,2,5,-2,-9,-3,4],[-6,-10,-6,-6,-7,7,7],[-6,5,-3,5,-3,5,7],[-7,-2,3,-7,10,3,8],[-7,-7,-10,-8,-9,10,-2],[-4,-5,-2,-3,-8,6,-4],[7,1,1,-6,10,3,-7],[-1,-10,-9,-5,-3,-6,9],[-10,2,-6,-1,1,-7,9],[2,5,-6,10,1,4,6],[-6,3,9,-3,-8,-2,-10]], dtype='int64')
module1.set_input('var_2681', input_2681)
input_2691= np.array([[-2,1,7,-9,4,-6,-7],[-10,2,7,1,-1,-10,7],[-8,5,5,5,-5,-3,-8],[-3,-1,7,8,-1,9,-1],[10,5,6,9,-7,3,1],[-10,-7,5,5,-5,5,1],[-7,6,-2,-3,-10,-10,-9],[10,1,10,-10,-7,-6,-9],[-8,6,5,-1,3,-7,-8],[-4,10,-6,2,10,-10,9],[9,6,8,-3,4,-10,-9],[3,-6,4,-9,-8,6,-4],[-4,10,-9,-3,8,10,9],[10,8,3,10,-9,-8,1],[4,-2,-6,-2,-1,-4,10],[-1,-3,-6,4,-7,9,-3]], dtype='int64')
module1.set_input('var_2691', input_2691)
input_2707= np.array([7.080724,-5.871486,-8.701677,-3.456953,-1.975003,-0.770523,3.403306,5.732445,6.381911,-9.612182,1.789397,1.555275,3.443301,-7.354781,-2.592826,-7.299249,-5.625465,-2.462704,9.865540,-6.546532,-6.447111,3.319641,9.687874,8.355921,7.885407,4.832210,-3.683236,6.966188,-7.100678,9.906671,-1.109732,-8.813803,-4.707769,8.920891,4.278237,0.357752,-9.986125,-7.191308,6.872812,-1.549019,6.059040,8.990587,-3.012049,-0.037514,-2.122603,-3.317889,3.921068,7.839355,3.966627,-9.140925,-0.135217,-0.248253,-7.799224,2.719751,5.143365,-0.209004,9.804706,-0.551032,-0.216630,-2.678048,-4.689611,6.652688,7.814150,3.867220,7.104854,-1.212901,1.775515,1.541057,2.983887,-2.420112,-1.220171,1.455715,-4.895575,-5.283089,-6.158648,-0.036826,3.741690,6.041654,-6.389630,9.059886,-9.793821,-9.137412,5.471474,8.739007,-1.434381,1.905939,-8.282320,-9.114004,-1.484384,6.963957,-2.448593,-3.669073,7.138743,-0.354362,-6.155889,2.272976,2.832443,8.372598,1.450809,6.988447,-8.906951,5.123581,-0.717422,4.180846,-8.511575,5.208142,-1.557022,-9.407977,0.633128,-5.006098,-1.689306,-5.119652,8.390385,-2.630179,-6.464867,-1.068337,-0.695363,4.525362,0.716801,-9.582705,0.686176,-2.476687,5.747950,5.847906,-9.037289,-5.048988,-2.732472,-1.035459,-0.865116,-5.945266,8.594634,2.417485,-1.255539,-8.496431,-5.582575,2.663697,-6.002691,1.166548,-9.608211,6.001903,-4.276002,-1.944715,-5.368499,-3.857744,2.298657,-1.806190,3.959212,7.383858,-5.912751,-6.724379,-3.507049,0.221763,5.467132,-2.941759,0.538541,-2.372184,4.100887,-0.855646,-9.708999,6.100181,-4.547259,-1.214818,9.587324,0.674592,0.776652,-2.393868,-6.581010,-4.250519,6.487660,1.330995,-4.332674,-5.239475,-8.523684,-8.315936,-4.217611,9.557116,7.719536,-3.609585,5.034588,-9.509334,2.633082,-7.400398,-0.686868,-4.752596,7.438613,7.613678,1.767358,5.932132,-7.217414,-7.051867,0.324024,3.076278,0.904926,-1.220506,-8.133720,1.736617,5.236922,9.140292,3.931751,2.844995,8.733783,-2.543694,2.123043,8.763432,9.819446,-3.287133,9.710184,4.403721], dtype='float32')
module1.set_input('var_2707', input_2707)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_2681, input_2691, input_2707, )
res3 = intrp3.evaluate()(input_2681, input_2691, input_2707, )
res4 = intrp4.evaluate()(input_2681, input_2691, input_2707, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
module5.set_input('var_2681', input_2681)
module5.set_input('var_2691', input_2691)
module5.set_input('var_2707', input_2707)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_2681, input_2691, input_2707, )
res7 = intrp7.evaluate()(input_2681, input_2691, input_2707, )
res8 = intrp8.evaluate()(input_2681, input_2691, input_2707, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
module9.set_input('var_2681', input_2681)
module9.set_input('var_2691', input_2691)
module9.set_input('var_2707', input_2707)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_2681, input_2691, input_2707, )
res11 = intrp11.evaluate()(input_2681, input_2691, input_2707, )
res12 = intrp12.evaluate()(input_2681, input_2691, input_2707, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
module13.set_input('var_2681', input_2681)
module13.set_input('var_2691', input_2691)
module13.set_input('var_2707', input_2707)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_2681, input_2691, input_2707, )
res15 = intrp15.evaluate()(input_2681, input_2691, input_2707, )
res16 = intrp16.evaluate()(input_2681, input_2691, input_2707, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
module17.set_input('var_2681', input_2681)
module17.set_input('var_2691', input_2691)
module17.set_input('var_2707', input_2707)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_2681, input_2691, input_2707, )
res19 = intrp19.evaluate()(input_2681, input_2691, input_2707, )
res20 = intrp20.evaluate()(input_2681, input_2691, input_2707, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
module21.set_input('var_2681', input_2681)
module21.set_input('var_2691', input_2691)
module21.set_input('var_2707', input_2707)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_2681, input_2691, input_2707, )
res23 = intrp23.evaluate()(input_2681, input_2691, input_2707, )
res24 = intrp24.evaluate()(input_2681, input_2691, input_2707, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()

'''6: TVMFuncCall
5: _ZNSt17_Function_handlerIFvN3tvm7runtime7
4: tvm::runtime::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const [clone .isra.808]
3: tvm::runtime::GraphExecutorCreate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module const&, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
2: tvm::runtime::GraphExecutor::Init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::Module, std::vector<DLDevice, std::allocator<DLDevice> > const&, tvm::runtime::PackedFunc)
1: tvm::runtime::GraphExecutor::SetupOpExecs()
0: tvm::runtime::GraphExecutor::CreateTVMOp(tvm::runtime::TVMOpParam const&, std::vector<DLTensor, std::allocator<DLTensor> > const&)

'''