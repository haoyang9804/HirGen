import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_56 = relay.var("var_56", dtype = "int16", shape = (15, 11, 4))#candidate|56|(15, 11, 4)|var|int16
var_57 = relay.var("var_57", dtype = "int16", shape = (15, 11, 4))#candidate|57|(15, 11, 4)|var|int16
bop_58 = relay.less_equal(var_56.astype('bool'), relay.reshape(var_57.astype('bool'), relay.shape_of(var_56))) # shape=(15, 11, 4)
var_61 = relay.var("var_61", dtype = "bool", shape = (15, 11, 4))#candidate|61|(15, 11, 4)|var|bool
bop_62 = relay.not_equal(bop_58.astype('bool'), relay.reshape(var_61.astype('bool'), relay.shape_of(bop_58))) # shape=(15, 11, 4)
output = bop_62
output2 = bop_62
func_71 = relay.Function([var_56,var_57,var_61,], output)
mod['func_71'] = func_71
mod = relay.transform.InferType()(mod)
mutated_mod['func_71'] = func_71
mutated_mod = relay.transform.InferType()(mutated_mod)
func_71_call = mutated_mod.get_global_var('func_71')
var_73 = relay.var("var_73", dtype = "int16", shape = (15, 11, 4))#candidate|73|(15, 11, 4)|var|int16
var_74 = relay.var("var_74", dtype = "int16", shape = (15, 11, 4))#candidate|74|(15, 11, 4)|var|int16
var_75 = relay.var("var_75", dtype = "bool", shape = (15, 11, 4))#candidate|75|(15, 11, 4)|var|bool
call_72 = func_71_call(var_73,var_74,var_75,)
output = call_72
func_76 = relay.Function([var_73,var_74,var_75,], output)
mutated_mod['func_76'] = func_76
mutated_mod = relay.transform.InferType()(mutated_mod)
const_147 = relay.const([[[8.861703,-1.555941,9.900249,-7.234809,-2.419022,1.915815,-2.450612,-3.236265,6.456210,8.245065,-8.187384,3.353380,2.235096,-4.473752,-4.404904,-4.588709],[-0.691965,-4.155670,4.866205,-3.561746,9.238055,7.098100,9.922587,-5.166098,-3.106976,-0.243882,-3.557266,2.820959,0.100278,6.994522,5.096959,-7.527941],[-2.054798,-4.360447,5.637004,-0.342730,-5.912762,4.307917,0.013158,5.534949,3.305216,-3.171399,7.599051,2.681317,7.086932,-2.075389,-8.857817,-5.615319],[3.993188,-3.419915,4.555841,-4.559727,4.498960,8.824416,3.518102,-0.233176,7.655435,-9.131941,-4.058560,2.343939,-8.232447,-5.858844,-9.662573,-8.853894],[1.168707,0.151440,4.125027,5.133007,5.151499,9.376706,3.767797,5.391272,-6.619135,7.807755,-5.548081,4.675535,-2.875724,2.734582,-6.795972,-0.066102],[1.126923,7.920511,0.062003,2.347202,7.869521,-8.099025,-0.781252,7.235243,1.101906,0.665659,-5.052918,4.093417,-7.062240,2.185073,-9.819365,6.457603],[2.755783,-9.127773,3.963380,3.370301,-7.596079,0.428763,-8.095266,6.008851,2.000197,8.413098,8.607882,-1.820175,7.446779,8.166501,5.909099,1.980966],[8.681476,-0.423357,9.603926,0.402077,0.513217,-6.093739,-4.581221,9.755813,-7.511375,2.371306,9.557927,-7.367037,4.951750,-9.003662,-4.349280,-6.266885],[1.547294,-9.977237,-3.455877,-7.506704,-9.445827,1.787898,9.532053,-7.549010,5.509344,0.865249,8.876813,-2.425396,9.819719,7.285476,-6.668946,4.849045],[-1.936843,8.777967,-9.517906,-3.470210,-7.790649,4.164578,7.260245,-0.686479,2.348475,1.250498,4.545293,3.458347,7.189396,-6.280654,-8.388622,0.889037],[9.351010,-8.004706,4.514048,-5.556563,-0.275892,6.367160,8.019800,0.234946,7.609319,9.880494,-9.716119,-5.022743,2.225756,1.844889,-6.476899,1.226919],[3.431225,1.870384,-3.618275,9.706953,9.208390,-6.748407,-8.178014,4.005352,2.635460,-0.520016,-5.782864,8.296533,0.667412,9.013830,2.134415,1.791691],[-9.440242,1.305825,-9.020994,-5.201509,0.222565,-5.509310,-7.645305,-5.306183,-9.082291,4.623050,5.510154,-9.672111,0.619000,-2.760750,-2.624415,-3.038472],[4.342432,-1.147240,-1.375270,9.549938,1.631889,1.477566,-4.922540,5.151231,-8.277285,9.406803,1.942850,-1.859314,1.699303,-4.744777,-1.364933,4.383736],[-7.938128,3.733653,-0.802122,0.797920,-2.263228,1.297368,-6.934434,0.935075,0.906602,-1.010154,-1.861463,3.124879,7.981740,-5.172727,-8.116469,9.295177],[8.656526,0.348482,-5.648078,9.848345,8.323708,4.038916,-3.669894,-8.810464,8.130729,-6.618760,4.343656,7.430748,3.111952,-0.699856,1.336040,6.357025]],[[-3.219319,-1.328846,8.657287,9.240892,-8.196110,-3.059138,1.493235,-3.991232,4.742823,0.154786,5.773853,2.316313,-8.897990,-2.946449,-3.205047,-6.269039],[0.702367,0.423191,-6.962779,9.652232,0.227163,8.671269,9.883234,3.611312,2.493782,3.798772,8.737599,9.860004,1.460480,-0.362077,1.890310,-2.207004],[5.452030,5.656779,1.341838,4.351267,-7.951314,9.132906,-9.382132,-1.241954,0.356075,-6.032237,5.792052,-0.006232,-7.591971,-2.013972,8.196108,-5.935232],[-6.542439,3.410048,-3.501233,-7.279964,4.290321,-3.768261,-4.456404,5.763457,8.428268,-5.917385,-1.357163,8.524208,0.703458,-7.988025,-3.448985,-9.066541],[9.299477,-9.191942,-7.120744,-6.491317,5.589720,6.737381,-0.414591,8.484581,1.930878,-6.262617,7.981353,-8.547238,9.912115,5.984736,8.420249,-9.471786],[6.690622,-8.354988,3.538162,-0.704316,-6.306510,-9.655237,-6.272585,-1.737415,0.317719,8.376325,-3.110052,-7.087523,9.592610,9.499965,7.026637,8.337460],[0.756813,-9.664636,-1.620932,3.533253,-2.971892,7.998115,0.556708,-8.043446,-5.521996,6.365208,2.795071,-4.749463,-0.226133,7.860593,7.603718,-5.836962],[2.308193,3.400836,5.732125,-0.536007,-8.043698,1.806867,4.230328,6.843676,5.357995,-6.285533,-5.869111,0.714508,-1.391633,-0.584413,5.718340,-8.140631],[5.116318,3.308881,-1.220340,-6.748743,8.350082,0.067970,-2.230744,3.551578,3.112971,-7.186715,-1.068161,-9.664641,8.184191,3.717868,-8.109146,8.052894],[5.333513,-6.037852,-1.202665,0.852228,-9.987781,-1.020005,2.145168,9.703769,0.632899,-0.871723,7.981072,-3.464634,1.481014,-8.180015,-1.675985,9.782733],[-7.057064,9.258331,-3.006845,-4.137354,0.060927,5.452803,-2.508283,-8.117546,1.142307,-6.348853,3.880171,1.560178,-5.877661,-5.547953,5.273234,-7.911500],[-1.559982,-3.062033,-7.592989,8.125811,6.816895,-8.366235,0.976753,6.439180,0.932754,-0.021729,-0.541615,1.391253,1.013719,1.734275,0.666301,-1.255668],[-4.820198,5.330516,3.760115,-3.352874,8.008886,4.739248,5.357044,7.939943,-0.260437,-7.797234,3.211060,0.397053,7.103034,8.550377,-5.604089,-1.958560],[-0.544428,-2.252098,0.729699,-4.271903,1.576847,4.640292,-1.601944,-1.628999,-7.326062,-9.828650,-3.784662,-6.888396,-1.417422,4.524078,8.577111,4.437507],[7.281338,-4.952531,3.563421,0.965156,-9.960458,6.341259,-4.342640,5.498149,-5.726135,-2.787939,7.351126,9.501012,1.519988,-7.821867,-0.076427,-0.131833],[6.216444,-8.891715,-2.424640,-1.920140,1.677284,2.080920,0.520470,-4.752355,-3.059024,-8.002626,-4.344741,-3.040286,-3.320159,-6.645353,-2.347876,-3.700262]],[[8.237816,-3.283014,6.324133,-6.983990,6.162094,-2.264284,-8.612506,-3.903875,7.515228,-3.122546,-8.532417,0.082898,-5.294493,-4.658892,4.258703,-6.489894],[4.996351,-6.048038,7.009701,6.450162,-4.655448,1.333173,1.442258,-6.055638,8.093090,-5.800792,8.621330,-2.788579,0.918754,-4.047155,-2.399365,-9.013351],[-2.887124,-2.876794,3.874123,-2.195044,0.820688,8.443721,1.240685,6.559323,-5.253362,2.776735,-3.973876,5.984019,-7.694230,-7.540698,2.346639,-5.534468],[7.331595,4.720676,3.450624,-9.334893,-9.887329,1.809508,8.819798,-6.967360,-5.653175,3.835028,8.542843,-0.215960,9.455756,-9.986435,5.219410,-0.544128],[2.822802,-5.851903,1.254116,0.678064,-3.683722,3.524495,-5.828124,7.142103,0.473504,7.569604,-4.393505,-2.353962,-3.602090,-3.628686,-3.946365,-8.639667],[-8.124620,-5.936771,8.952850,7.004205,-5.026036,-8.227367,-5.379840,0.471614,-4.029732,7.260595,-3.562172,-7.118045,-7.212752,4.601967,7.239623,9.022704],[-4.782996,2.812481,3.513519,2.353095,-9.235956,-2.488552,1.742724,-8.160394,-4.411258,-7.225945,-4.858892,3.955660,2.224262,0.885012,-9.423728,4.432652],[-1.736506,7.645772,0.736837,0.701454,-1.697775,4.194093,5.810229,4.419716,3.604972,-1.916116,7.322765,-9.547032,-5.606346,0.640863,-6.982215,9.064648],[-7.918416,3.246479,5.867551,9.235698,-2.611079,-5.089547,-9.336380,-6.562404,5.335893,5.018549,-9.845091,-8.931052,2.860750,-0.815694,-2.012552,-4.998740],[-6.490433,-8.645386,-2.064228,2.074227,-3.421615,-1.179848,9.968630,-8.632849,-9.544304,4.200902,-4.104367,4.865844,-0.691032,8.838311,-2.275287,4.305045],[9.267703,-8.104417,7.672705,0.227727,4.703841,-6.945149,-5.139459,-0.898874,3.351304,3.585092,5.248042,9.544812,-0.125589,-1.312662,2.893845,6.765355],[5.363623,-9.925163,9.072385,2.867759,-7.988350,-0.387723,-5.424857,2.747157,-2.336051,8.194022,0.417511,0.483115,-5.150742,-1.756532,7.582661,-2.791190],[-8.957346,8.873357,-0.585751,-9.657986,4.208993,9.240710,1.772519,1.223441,-0.823957,0.623010,0.917994,5.193809,-9.139994,9.701323,-5.229461,3.040858],[3.840201,-1.727602,6.516443,-3.907852,1.150618,-0.683313,-9.368071,7.747091,6.975448,-9.939452,9.125621,-4.060227,-4.022411,-5.533838,8.513564,1.246188],[-1.032262,1.226058,-0.893382,-6.886940,0.182660,1.430060,-8.402880,-7.758867,8.225426,7.291365,1.250218,3.370819,4.877996,-7.142007,6.900648,9.283495],[8.863184,3.692599,-2.155944,-6.813878,-9.888715,7.605581,-9.783066,-5.671799,6.967777,-1.486742,1.938836,-9.594647,3.684516,-3.006561,-9.377323,1.720498]],[[-4.957908,0.630942,-2.629703,-1.682222,2.001458,-4.431772,-3.482323,-9.843146,-3.841262,-6.459950,-6.161924,-4.825974,5.483412,-4.190292,5.066215,6.669995],[-9.789021,-3.140641,-3.082370,5.883076,4.043491,4.783058,8.070855,1.480682,4.415486,5.504485,-1.567665,7.646240,-0.090653,0.063293,6.757198,8.384499],[8.246391,2.993740,1.612344,-4.367706,-7.549454,-5.474388,5.503045,7.278749,6.725822,-2.472463,-6.158563,7.858800,4.026440,-1.462201,1.942243,-8.685112],[-0.848806,6.502747,-9.282238,-9.371654,7.161785,-1.604900,-6.502784,1.477536,9.306705,2.761900,-4.251466,-4.919853,3.389325,-4.003377,0.566701,3.766299],[-9.979718,0.538254,-2.179632,0.467461,-1.438580,-0.916962,7.325673,-7.273044,6.898187,4.649792,-5.711994,7.555939,-2.059489,-6.968613,-0.500943,5.612850],[-0.495512,-9.293403,-3.671007,2.534586,9.829848,9.454521,4.499802,4.761876,5.858711,-5.402687,5.309715,8.282298,-3.331774,2.243529,-5.580078,9.896836],[6.500481,7.412314,-8.968129,-6.558412,4.903999,-9.476711,0.656241,1.473498,-2.349036,-9.792723,-6.813028,-0.873327,8.832485,5.751867,-1.640805,7.880936],[-3.690628,-7.140427,7.387409,8.399020,-5.665345,6.892948,3.346481,0.977703,3.681652,8.794275,5.683583,-1.968595,6.454525,-6.217213,-8.650592,6.149948],[3.301258,7.476913,-0.474571,0.141094,0.487309,-0.080660,2.684015,-8.973104,8.956635,-3.295856,3.919001,-2.527922,6.201298,9.827871,-8.003553,-2.205856],[-3.060583,-8.587019,-7.406373,7.669949,-4.681212,4.622899,5.007241,-1.914416,5.265530,-7.042938,3.654389,-2.964370,9.569067,2.439599,-3.484919,2.357986],[2.847843,-9.951096,4.993292,2.674458,3.672696,-2.895048,6.709692,-8.562997,0.825223,9.041276,5.633451,7.205366,7.398248,-4.146458,1.007686,-0.900100],[4.218201,-3.221093,1.876681,-5.504054,-6.889108,0.507474,-1.646784,6.935022,-4.863633,-7.011167,-8.594150,5.838672,-3.753899,1.828459,5.748712,9.176704],[-4.587859,-5.889296,0.191338,6.628587,0.343164,8.573916,-0.907089,2.217598,-8.217216,-3.074410,-6.696505,-0.431029,0.781561,-4.473223,-4.381295,3.549830],[9.341026,-6.610330,-9.561778,9.385202,-1.572602,9.870066,7.400781,-9.566625,8.292793,-4.100037,-8.719580,-4.473173,-2.397774,-8.675778,-1.761144,-2.169970],[1.663355,1.892943,-0.607759,5.627031,1.139021,0.551202,-1.429477,-8.806995,-2.465811,4.075025,-3.344536,-6.011310,-1.366216,2.321000,-2.498527,-6.067985],[-3.778813,2.451427,-8.264714,2.620615,-4.761947,-2.196652,-1.742454,-5.147946,7.051594,0.130703,9.382063,7.597703,7.445075,7.037571,-2.193217,8.395057]],[[6.246182,3.886486,-7.258294,2.919374,1.848436,4.832723,6.771792,-5.186280,9.048369,-9.719483,8.120792,-7.862079,-9.227383,-3.379686,9.098994,3.186833],[-5.263063,1.646715,6.933811,5.282043,-0.509039,6.374354,-3.505993,0.287428,2.521306,2.818421,8.221464,1.564102,0.247635,-5.620073,-0.164381,3.422502],[-2.224384,5.454843,0.512134,-1.613873,5.404723,0.407670,8.115360,5.592434,-2.899472,7.716306,-6.195495,2.368167,-1.838791,-2.300825,3.755884,5.026372],[-2.444421,-6.911105,-1.842042,-0.642581,-6.107543,4.521971,-2.688610,-3.699878,9.390204,-0.905608,6.619926,1.182437,4.596273,-6.423206,9.902298,-5.074254],[-7.240379,-4.333078,9.939579,-3.631705,-9.576980,5.687010,-1.758264,-7.723807,0.606595,5.357775,-7.796670,-8.585496,-9.790147,4.175189,-4.213388,-0.422655],[-8.023054,9.001929,5.550375,8.291624,-8.320542,-2.742642,-6.501505,-1.345060,2.072615,-6.783113,1.690013,3.618960,1.796282,9.663916,-3.834901,-5.145004],[-6.995361,-7.990330,9.980597,-8.223145,-0.515222,-7.478819,6.681837,-1.690130,-3.100930,-5.386656,9.399984,-7.720114,-3.158582,-4.567436,1.388441,4.966150],[8.681518,9.105488,6.570132,-8.978272,-8.062352,1.318561,7.339611,-0.482538,-8.859110,9.208894,-1.636363,4.593044,-8.125656,5.370713,-0.645930,1.632009],[-6.953512,2.940789,-0.776087,8.371156,-6.120478,-8.545922,-9.267312,-2.110791,-1.682222,-2.937924,8.294405,0.850354,9.726447,7.066528,-8.998629,4.751430],[5.516659,-5.344445,-4.581930,-3.347157,-1.071157,9.634186,7.495754,-3.598439,3.741562,-3.122648,-2.705667,-4.419153,-5.545028,2.917704,5.161157,0.682502],[9.010778,-2.359368,9.652531,7.968666,-7.898710,-9.452759,-9.704126,2.171983,5.818864,-8.617409,5.500440,0.055259,-9.386461,-2.615134,-3.618088,-1.002804],[-0.623694,4.567837,2.737418,4.322867,8.296993,1.285900,-0.490401,-8.302946,-3.069275,0.824508,3.630792,6.950751,-0.528435,8.792373,4.539432,-0.615278],[0.494173,1.009783,-7.664886,-4.387225,-1.893941,6.292080,-7.682047,-2.218606,-8.688987,-2.107475,-5.855521,7.925818,-2.421292,6.051328,-1.913913,7.116544],[-6.202866,-0.189872,0.573685,-1.916218,-5.131864,0.583086,6.509343,7.674096,0.798740,-8.665271,0.150340,-2.278059,-0.881126,7.248154,-5.976977,-3.658465],[3.557571,5.608681,1.287866,-8.538594,-1.591565,-3.322030,9.085515,9.565087,-7.334393,4.029783,-7.967826,6.376510,2.962512,4.017672,7.792806,-5.620051],[2.871525,2.367099,-6.142474,-9.462278,8.264888,-8.810532,7.211750,-6.621175,1.017489,7.611786,5.820490,9.353510,-0.306872,-3.312708,-2.561634,-5.056635]],[[8.252174,1.544487,-0.428747,-2.920538,-8.996215,-3.148128,-0.672233,3.939133,-4.492452,4.984351,2.873649,4.833986,-5.001897,0.880649,-3.896964,-9.214838],[-9.425540,0.715966,2.159164,-0.520888,4.609505,2.653565,2.038068,9.384464,-2.882833,-7.220010,5.437405,9.633570,1.319102,5.586651,-1.182438,3.318070],[3.952485,0.050080,-8.963016,-1.775290,1.434403,-6.290197,0.106875,-5.176556,-1.907839,0.174003,-7.644778,7.129447,-6.067105,-2.327351,-8.834779,6.950998],[-3.838555,2.972020,-9.334366,-1.005155,1.915442,8.043067,9.364919,-3.551418,-3.555410,3.066910,-9.191743,-8.669349,9.038547,-3.224448,2.330383,2.330316],[-9.412682,-0.406381,8.386869,-8.138188,9.224484,7.696562,-6.503825,0.985872,1.957868,6.214269,5.172906,-1.605692,-4.253428,7.791563,-5.629156,-7.580021],[7.256980,-8.530069,5.207673,6.905441,-3.760450,7.320006,9.608295,3.856009,-9.502999,-4.937474,-6.240668,-3.872479,5.683414,-5.802206,0.362031,0.552252],[-8.946976,8.339470,-3.232518,-5.298026,7.131209,5.442654,-6.024973,3.160566,-4.488647,7.765155,3.704083,8.732035,9.983708,-9.118406,-3.203796,8.119452],[6.314159,5.754716,3.755298,-6.432382,4.687425,5.172854,-6.552626,-5.881872,3.554676,-7.362958,-3.295203,0.713703,6.061386,-5.404118,4.273947,-2.200693],[-7.567905,5.081003,-2.142039,-4.156056,9.117048,1.177199,-7.378760,-5.537852,5.912203,-9.562927,2.959420,8.722694,-0.013614,-4.525716,4.734909,-0.007443],[-1.500121,-2.612910,-5.113556,3.276360,-1.920476,6.059589,-8.269910,-6.326257,-7.285400,5.810207,1.345254,4.662137,-9.110805,8.291874,-7.766674,0.270548],[9.623542,8.910809,-3.861911,-9.663969,-1.518625,-3.310491,7.347711,-2.233595,6.218715,8.754105,6.376123,-1.200425,8.745445,6.606431,-2.369954,-9.166236],[-5.685267,9.118614,-5.913834,-9.254558,7.539033,-4.428831,3.357117,0.062303,-8.608806,6.231822,6.713558,-2.705455,-1.742199,-6.695712,-7.959177,-4.198216],[4.887065,-6.213006,7.753106,-7.280427,3.197523,-3.232064,0.491549,0.795986,-5.925457,1.785740,4.494338,-9.896340,-5.151980,-8.685430,-6.708376,0.535118],[-3.354829,1.786270,-6.584384,-2.206488,-9.484179,5.994066,-7.277873,-4.944798,6.508560,-3.864230,0.578241,-6.245162,-2.244095,-5.043890,-1.015563,-2.268213],[4.867720,-4.169229,6.510176,6.371267,3.443428,0.220967,-0.256508,0.270666,-0.006027,-2.672303,-8.460664,5.530544,7.918401,8.115110,2.488453,-7.223660],[-3.157763,2.488759,8.467422,3.164644,7.794372,1.444118,-3.536253,2.215512,-5.992869,-4.876103,5.324300,7.533737,-0.037485,-4.558922,-3.167272,-7.234364]],[[8.689776,-6.297685,7.341342,-1.252297,1.265794,-0.412380,-0.770773,-6.871257,5.345632,4.269863,-2.872246,3.959041,-4.883087,-3.730409,-1.526695,1.125867],[-3.058036,-2.597874,9.907330,-9.323647,-5.797785,8.813006,2.585123,-1.510185,-7.581498,3.010268,-9.595321,5.032529,-6.664964,-4.218560,9.412733,-3.042409],[0.778071,5.033219,5.344449,5.928849,-6.532105,-2.013063,-8.983058,-8.993490,7.061604,7.280019,-9.492795,-2.876716,8.590990,2.461506,-7.688894,-6.206876],[-4.726192,-7.434758,-5.761346,-9.005066,-9.538582,-0.175814,4.653486,-4.084556,-6.397395,-4.568661,-5.663932,0.423478,5.326791,-2.389344,-5.232141,-3.066630],[-5.629883,2.862695,-4.059607,7.957176,-6.797424,-3.310428,-7.648149,-5.169134,-9.579136,9.524822,3.589423,-8.411565,2.276211,-5.771947,-5.357450,5.967106],[-4.802527,6.047792,-2.890646,5.755472,-4.279451,-4.069981,-6.849346,6.332562,3.258437,-5.805177,8.595129,-2.605963,2.869510,-0.009722,2.811971,4.261235],[-5.447776,-2.036308,1.936574,-2.866631,9.870420,5.145590,1.347898,3.631171,5.281555,-7.130873,-8.663359,-1.633058,5.001451,3.395933,-3.802692,-5.012482],[5.317651,4.591151,8.066927,-0.735818,-4.670611,-8.413512,-9.088793,-1.635707,8.375268,-7.306970,8.225670,-1.142232,-8.951569,7.241679,-2.933970,3.960969],[9.984204,-1.155425,-7.906443,0.845484,-9.073379,5.935297,0.514993,6.599468,-8.085187,5.319702,-3.363581,-5.290525,8.893125,0.260980,-0.572332,-0.465416],[8.369160,-4.514729,8.676210,-9.540108,6.765850,2.922762,7.906370,-0.110645,-5.697376,-1.290252,9.601173,0.203408,-8.237029,-7.034930,-4.768644,-9.811182],[5.191232,9.994155,4.105395,4.045220,8.201296,7.919049,8.820943,-5.085253,9.690526,-2.816437,-6.704828,-7.553671,-5.553009,0.908868,7.787345,-1.843460],[-8.534731,2.736294,0.895070,-9.920983,0.555272,2.179647,0.842544,7.928224,-0.557635,0.914170,9.000814,-0.070475,-2.306189,-3.989407,6.421131,8.342045],[8.570894,5.702412,1.116679,0.697078,-7.842009,9.534280,6.019760,-2.436254,-5.902113,-9.696068,6.274924,4.984319,-0.404466,6.016431,-3.035427,0.127423],[-1.361059,-3.534463,-3.107227,-0.080420,-8.538363,2.573719,-4.773830,-9.709530,8.469669,1.664773,1.971807,7.252761,-8.273505,6.284673,2.034956,-1.996944],[-0.065408,5.698774,4.519880,3.125630,5.598165,6.018035,-2.369561,-4.694509,-4.085886,1.016407,-6.615726,9.432892,0.991593,2.664179,1.248988,-1.765040],[-8.411722,-5.820147,-2.582322,7.901019,-6.546263,0.166175,-1.209272,6.320185,1.396302,-2.309805,7.682269,8.837497,8.447478,4.671248,-9.585048,-6.171097]],[[1.931085,-5.745680,-4.481427,6.678122,-4.244940,3.649494,-2.925014,5.546683,9.834239,4.327302,1.970353,-5.944014,3.874053,5.502379,3.185615,-1.957405],[0.890147,-4.533848,-0.494099,-1.295064,2.308842,-4.845150,-2.648379,1.833197,8.415911,-3.764657,0.682624,2.037731,-6.312774,1.850983,-5.963791,-0.750845],[-3.109305,3.525535,-7.264068,-9.938921,-6.906378,1.414131,-6.809134,-1.272143,3.978650,7.848502,2.896953,1.383531,4.270374,-5.267558,-4.026405,7.187317],[1.283145,-1.362120,5.638021,4.183002,7.943123,-3.287415,-9.451843,0.983229,-2.125724,-9.920831,-7.168339,5.047008,-2.696623,6.859579,2.778846,-0.925469],[-4.645859,-7.280457,4.543245,8.633589,3.822815,-5.557163,-8.343842,7.733935,-2.072572,6.892564,-0.293932,4.742332,-7.808159,1.346663,6.859617,-0.571425],[-5.258089,7.123097,4.881934,-1.959017,7.649837,-2.448114,2.203847,-8.773070,1.617574,-5.433732,-6.928447,6.877160,-0.542758,-2.915503,-8.304815,9.124380],[-2.517982,-0.793347,4.593377,-4.117971,6.186895,7.844740,-7.027447,1.099670,5.032100,1.363708,2.292424,-8.471963,-4.136754,9.078722,7.212339,7.219662],[-4.410621,1.899398,9.634697,-2.557417,-2.997562,8.074884,9.832416,8.574145,-1.108362,-2.190699,6.831932,3.854036,-6.177930,-6.803290,-2.804443,6.240173],[3.551018,-9.129676,-7.995769,7.495180,-4.355294,5.022172,9.731195,-7.024402,-7.664268,6.712936,7.686742,5.394331,-1.193583,-1.297503,4.366542,0.200877],[-9.651987,7.408179,-1.808118,-2.322751,6.306970,-8.964719,-4.496576,-6.438951,4.165748,-9.207834,0.509895,-4.720149,0.031873,-8.479703,-6.878535,8.699372],[2.247018,4.894719,5.105208,4.416607,-3.552322,-1.150168,-2.658061,1.440511,-3.639568,0.796031,1.657093,0.263075,-0.177280,7.685750,9.592976,3.586551],[-6.070855,-2.092237,-1.945567,-4.467940,0.131708,9.632052,-6.451731,-8.064944,-8.307873,-2.742662,3.281533,-7.609048,9.301750,4.278701,-0.206788,9.207309],[2.114457,8.311646,4.382022,-7.397860,-0.862329,8.895845,-5.011334,3.396106,2.338513,-5.253265,-1.730593,-7.051998,4.138208,-1.246357,-6.047965,-2.192640],[-1.887340,-0.325403,2.787745,-7.000818,-6.068635,-8.780707,6.613772,-8.701994,7.466654,-9.785598,0.924421,6.780923,-8.520493,0.303809,-7.895889,-8.355327],[9.482981,-7.686618,-6.463294,-0.403660,-6.223041,2.305034,-4.807075,-3.221489,4.533024,6.714348,3.985722,9.193876,2.520939,6.709547,-6.021656,-0.334580],[-2.014852,-4.354851,9.742191,4.899456,-4.510866,-0.377244,-9.746249,-6.992713,5.544820,5.428809,0.390462,-9.576683,7.676588,-2.605857,9.793735,8.737108]],[[1.969106,-5.594796,-7.114880,9.213411,0.704335,0.847429,-6.800775,0.494431,-3.356398,0.714211,6.475356,-1.292925,3.159960,-2.012755,8.129336,-3.871367],[1.329243,5.272469,-3.424964,-1.682058,-0.514001,-0.095937,-4.514976,-3.727177,-4.055488,-6.669662,5.291434,-4.852388,5.919773,-4.107718,-1.286328,9.463704],[4.136676,9.653240,5.831594,1.944222,2.834266,2.033819,4.943241,-8.439214,8.357723,5.319137,2.229724,6.165460,-7.591426,0.881438,-6.732886,2.977404],[-9.714314,8.210591,-7.287657,5.602702,-0.189703,7.286762,5.684742,4.876218,-7.806450,2.527519,-0.034195,-4.817864,-6.873032,5.072634,7.888436,3.522968],[4.313247,8.017399,3.654362,-6.411611,5.835512,-7.644616,5.827594,6.381117,-6.674250,-6.097683,8.113317,-0.044412,-5.308125,-6.631887,-5.329782,1.132778],[7.243748,5.736236,-5.703824,-0.398402,-6.965434,-4.635383,8.615647,9.232838,-7.986895,-1.231605,9.409470,-4.555472,6.227395,2.705805,-0.557646,6.939683],[3.537997,-4.205654,-7.423558,-3.686289,6.151377,1.911431,-1.991049,7.641399,-5.997869,7.022581,-3.948402,4.658906,-2.180422,1.039905,-4.969948,-0.305809],[9.707249,9.513442,-1.293218,-7.303484,-7.799538,-0.714401,1.427397,0.971403,5.519973,3.036005,-5.356742,4.454616,5.896499,8.138518,-8.747286,6.805367],[5.806012,2.999816,-2.373612,2.807413,9.864249,-5.680455,6.453712,-6.423066,-4.149021,-1.252386,6.518743,1.220908,-7.491108,-3.882702,6.955229,9.568405],[-4.227386,-7.085297,-1.741550,7.654025,8.959018,-6.742515,5.175190,3.174069,-7.205714,1.997931,-3.329069,-6.214632,5.668185,1.013293,5.606588,7.946983],[4.239835,-1.030432,-3.854639,-7.816431,3.918456,-7.392867,8.405275,-3.151233,-8.016064,0.957056,3.116466,2.180332,-5.276120,0.981443,0.650781,3.957039],[-7.296184,2.955961,3.847463,-3.549360,-4.501262,-2.139233,-1.371136,-5.835174,-1.081983,9.213551,2.432804,-1.174407,3.734340,6.151205,3.454927,-7.691472],[8.875723,-1.859366,7.601037,0.700523,1.726048,6.484284,3.604542,-5.514806,-4.022620,9.511955,8.452169,6.783509,8.969632,4.460660,-0.106384,-4.811246],[8.657859,-0.902743,3.193072,6.675852,6.071420,-6.072485,-9.218899,-1.451816,3.725312,-5.813838,-9.767024,9.259074,3.195406,-7.159093,-2.824482,4.823871],[5.057458,-9.707054,2.209370,0.709067,5.208240,6.028989,0.020195,-4.293219,1.705474,6.786095,-1.194633,2.683909,9.588154,8.060360,-4.782631,-8.790410],[0.689758,-7.687324,-0.997955,7.623306,-7.460129,6.660623,8.637134,-7.910238,-5.279558,-6.947522,-8.521807,-7.643849,7.404442,-1.327446,-6.849629,6.266668]],[[1.199571,0.275548,4.765167,3.424432,1.104594,8.439322,-3.144431,-6.286050,4.624355,-9.850148,-7.577890,-8.874417,-6.417573,-2.070325,1.830233,-8.128197],[8.330074,-3.591769,6.177240,-8.632176,-8.034590,0.933086,1.053094,6.249863,-8.502626,4.699803,9.796548,-1.214691,-4.373689,-7.652856,-2.941312,-3.337334],[-7.214730,-7.812978,0.589677,4.867572,7.484015,-3.144700,-3.699268,1.407541,3.970059,9.632343,-5.785468,0.798601,-3.605596,-9.082947,-4.743523,0.609666],[1.676769,-6.810216,-3.116754,-5.320656,-8.688120,5.469533,5.822137,2.140070,0.931129,1.914814,-4.190997,-0.986388,-1.101597,0.094455,7.312368,-8.284544],[4.801604,9.630791,-3.163084,7.554323,0.501499,5.859707,9.808478,9.970568,2.069931,3.623786,4.491504,9.428635,-8.005017,6.557455,9.888703,4.370549],[-1.247791,-2.904209,-1.005941,-2.307218,-7.924584,-9.623515,-7.092917,-3.732303,-8.513299,-3.091332,0.446456,-9.280167,-4.543151,-0.627587,1.948623,-7.126405],[-2.061770,-6.825755,-1.912610,-5.761942,-2.259947,7.835728,6.474058,-2.107676,4.299320,0.636538,-1.385981,-9.572602,0.283151,-5.501942,-2.221941,1.781210],[-3.510814,-0.215949,-5.437512,4.003388,6.951556,3.814374,6.450765,1.923279,-6.228739,7.049484,-3.527585,-7.393832,-4.502960,-4.255654,8.669138,-2.825966],[5.802369,3.404045,2.776561,-8.470892,4.762301,2.234182,3.795345,6.906909,-0.014441,3.341411,-2.986071,-7.437696,-0.952337,-7.850125,-2.268722,2.610391],[6.522034,2.733377,-6.534980,0.574392,-8.824715,-2.477586,6.170599,0.636774,-0.882142,-7.420392,-8.529995,-8.172201,4.288454,1.287002,9.916022,5.210778],[2.384841,5.675997,-0.119403,6.307889,-3.488619,2.347309,0.019038,3.228013,3.101678,-1.304602,-5.854919,-2.730182,7.065913,-3.836839,8.171878,9.095593],[-5.314110,-2.251319,-5.540130,8.237568,2.565955,-5.522798,-5.302922,-7.289621,-9.118382,5.645053,0.345970,-5.672846,6.641804,5.622937,9.223236,6.266049],[-8.558582,-5.658144,1.144660,4.194405,-6.109340,7.788319,4.910080,-7.459363,7.016789,-9.115250,-4.623065,2.281825,2.584935,-1.129570,-3.807037,9.288383],[5.868741,3.705021,6.637285,5.921576,-8.382672,-2.923462,-4.230450,4.530075,8.968409,9.091176,8.474139,8.933508,4.943148,3.024858,-5.373310,-8.340618],[-6.213638,-7.868126,-7.033317,-6.091137,0.716742,-3.679398,3.559203,7.742151,-2.427838,-6.077692,7.941093,-4.813498,8.142007,-3.748392,-2.014513,9.878654],[-9.960978,9.858839,2.954176,-5.999480,-1.333748,6.019202,-4.899439,-2.449934,3.637368,-4.756896,7.388516,3.738817,-8.843518,-2.676216,0.597001,-5.931766]],[[8.464077,-6.104765,8.398719,2.259938,-6.685568,3.738656,7.018239,3.105195,7.979340,-3.736254,-3.596429,7.746280,3.619782,-3.927985,-5.618437,1.095239],[-7.737107,-5.083351,-7.466471,0.032676,-9.645868,4.880945,8.142918,-7.400345,3.212872,9.993518,7.486533,-7.287819,-4.371623,8.908746,3.643701,-0.335910],[-4.311930,0.141701,6.693061,0.103951,-2.157364,9.433591,6.334911,-8.137238,-0.715308,6.564803,-3.654242,2.382220,-8.315542,9.799020,8.926413,9.732834],[3.017816,-2.396065,0.358761,-9.783823,-0.568693,5.897045,-1.576949,-9.548422,3.789737,-6.959350,-2.235152,-2.978339,-0.503474,-9.669291,-6.394614,5.596785],[3.513652,-0.978567,-2.342535,-6.642902,-9.841705,-2.614248,2.263301,-9.418395,-2.745004,-3.161689,-8.327301,7.323899,9.813691,-1.930701,7.297984,5.572719],[0.282427,-6.780036,-1.690183,-4.625465,-0.082256,8.659629,-5.783676,0.041123,-4.545405,4.144227,-7.731578,5.645722,-4.910084,7.204545,-0.605419,-7.762036],[-8.708778,8.690044,7.891029,-8.614584,-0.054513,7.076110,0.298654,-0.872336,2.417861,-2.939213,-1.797431,2.167597,9.370408,0.689986,2.811491,8.405144],[-0.634080,-1.431618,-3.083395,5.485867,5.948198,2.825827,9.031228,-5.383236,0.326874,4.127199,4.077047,2.689243,3.828576,-2.716834,-7.800451,3.773672],[-5.045482,5.609366,-6.987719,8.826961,1.579385,-6.401578,-1.387798,7.922028,3.102297,-0.324360,6.756578,8.171538,-2.174984,7.536345,6.841587,9.306456],[5.907199,-8.152142,3.197746,7.789160,8.142421,-5.569170,-8.996074,6.093844,-4.645105,-7.428876,8.623845,-5.331388,7.585554,0.841199,-2.569540,-0.973108],[1.360186,8.209062,0.726685,5.165721,-3.627936,-1.772685,-8.717846,-5.933037,9.040531,-6.442595,-8.175997,-9.922366,3.746562,-6.509322,-6.204534,2.107718],[-1.894286,1.270821,0.876752,-0.663817,-4.986833,-6.251455,-1.922355,5.301377,-4.315438,5.162880,-2.264253,-7.506698,6.442464,-5.235905,-3.999676,5.801394],[-5.934033,-6.221261,9.672989,-1.050032,3.990508,-0.414180,6.731330,-8.482667,-0.760325,8.771638,8.149117,-8.081960,-7.492822,8.517615,-2.600896,0.315028],[0.866128,-3.561077,-9.254380,-7.568070,4.541004,-9.038144,-4.978001,-6.497412,-9.707468,7.688865,-4.581534,-0.192107,-9.162426,4.416930,-3.095730,-4.208418],[-0.773593,-3.921076,6.418974,-8.770689,-9.633655,7.524255,6.447506,2.670752,9.319086,-4.136728,-8.766546,9.371857,-9.047825,3.532122,4.233299,-7.828300],[-4.232599,6.123854,9.663080,-9.084844,-9.915345,-2.840758,-3.835225,5.694226,-1.148491,5.317516,-4.801163,-3.271351,8.488749,7.087149,4.531186,-7.699355]],[[-6.544874,0.483387,3.848558,2.712798,9.808552,-9.300514,2.626266,-2.488105,6.559428,-9.811443,-2.228566,-9.894625,-7.987476,-1.812584,2.107193,3.791941],[-8.845208,5.042263,1.064111,2.061141,-0.523073,-2.049236,7.718548,4.648452,-1.380711,-6.763732,-7.181519,-3.284582,-4.703726,-5.444655,8.109962,-9.916097],[-4.763615,4.998908,-6.496206,8.889740,-8.306207,8.715964,-7.543874,-7.955060,-4.379685,3.816717,2.512330,-5.863266,-2.920846,2.046111,-3.812928,-8.971307],[3.840005,-2.550365,-3.200453,-2.741463,7.420959,1.438918,1.610535,-8.222382,-1.042543,-6.109532,6.148667,-6.513760,-5.815023,4.192003,4.261533,8.698462],[-8.886342,-6.300002,9.432899,6.944870,-8.107580,-7.418140,8.534115,-4.218503,-3.544012,3.130212,6.555230,-7.822227,-1.800681,-1.018971,8.487095,-8.012468],[-6.931753,-4.116007,-9.294312,-0.642641,-9.286499,-2.638360,-8.074344,-8.286630,3.917289,-6.044465,3.600841,-4.252629,8.541947,4.561957,9.689994,-6.881566],[-1.357167,9.681809,-5.457783,-2.251485,5.244540,-5.533544,4.256995,-5.109207,6.305309,5.078708,1.321098,-8.091680,-6.735093,0.379046,1.361840,9.689361],[3.600201,-4.646432,7.750333,-8.746835,9.324082,-5.740749,6.725898,-4.160377,2.690574,5.693435,5.891577,3.128202,1.019206,6.817347,-9.430666,8.328382],[-7.915983,-8.018891,-7.051140,-1.331584,8.469686,-0.698101,8.300916,5.073644,-2.891905,-4.907684,-2.409018,6.171085,-2.296755,8.497426,-5.811294,-8.495264],[-9.787586,-8.591426,-4.400481,5.828384,3.005918,-4.692105,-3.396922,6.513619,3.994343,-7.028905,-5.355457,8.257358,9.368944,0.031076,9.579586,-0.045394],[-4.424564,-6.202759,2.354696,1.629477,6.201058,6.509144,0.825470,-8.211597,-0.362360,1.520275,5.758492,-1.883343,8.011301,-8.669175,6.412736,-1.838221],[6.538243,-8.921142,-6.567928,0.928494,-7.533425,8.507075,6.272427,-5.288836,8.577818,-3.202381,-8.465888,2.741646,0.870330,4.297636,-8.803120,-3.634502],[-5.833617,-0.370217,-5.110031,8.570154,-3.916869,4.497848,-6.755691,-4.802730,1.545164,-0.585381,2.243920,5.883599,5.694327,3.400228,-4.582377,7.455178],[6.815377,-0.812926,3.247353,-1.125596,-9.946388,-6.258450,9.657258,-6.117831,5.029299,-4.820938,-6.416243,7.906257,-1.623133,4.314872,2.913059,-0.776287],[-0.249360,-6.633650,-3.705997,-7.221167,-1.880118,0.051789,0.551582,-6.455273,7.017769,3.749382,-8.476349,4.637304,7.466802,-0.503912,-4.449649,2.065409],[9.904274,-0.449684,-2.055039,-2.081362,4.520000,-7.589532,-0.258011,-9.911145,-0.406951,1.931704,-4.265309,7.386369,-7.171981,-2.316112,-8.672975,0.439975]],[[-7.235727,8.222885,-2.148201,4.922309,-1.526759,-7.687711,5.470640,-5.287245,-9.510739,-9.520344,-0.509964,0.412101,6.383983,6.895311,7.023276,9.953641],[6.217701,4.717146,4.381566,2.472997,-1.567837,-4.431926,-2.457155,8.922612,-4.736724,-8.846910,-3.734555,7.939623,6.130002,9.440007,-7.383630,-8.631141],[-2.475063,1.601716,4.475519,8.259699,9.946228,9.806407,-6.021924,-5.757001,-0.195957,9.652725,-1.901562,9.285566,-3.767947,1.078773,9.145710,-6.488845],[3.968692,4.117594,-8.427440,-2.295910,-3.261374,-1.731316,3.686150,-8.790326,3.436553,-2.039600,-5.952303,2.370787,-2.734302,0.955343,9.626044,8.969761],[-9.446137,5.214171,4.523702,-4.865460,0.255637,-5.516259,5.922972,-9.522688,5.726190,9.420321,-9.735640,-6.568477,9.998252,9.243407,6.090188,9.149298],[8.385148,-7.518183,-4.059833,8.601476,3.148606,-1.772069,-1.865131,9.082196,9.098245,4.342899,-8.510039,9.157373,-6.773655,-6.608006,3.220031,0.811166],[-8.950733,-5.560164,-6.790129,-9.833789,8.742909,-4.466938,2.642970,1.599357,-3.937780,9.815656,-3.227389,-0.707168,3.987322,-2.452721,-2.489286,3.299717],[-5.107490,-5.066857,7.149246,-2.123667,0.447393,-0.942147,8.332795,-6.679679,4.565205,-7.184778,-3.671372,-8.260998,9.719641,-5.166322,-3.163252,-4.735488],[3.129072,1.819609,6.612534,-4.983138,-1.914610,4.229671,-3.419391,-7.565168,0.953113,-9.997786,1.908255,0.156766,9.005541,2.450785,-9.213589,-4.960270],[-5.023339,-8.627073,-1.648830,-7.333184,-2.181626,-8.114149,7.471851,-1.853340,5.151346,-3.292708,4.391312,2.930172,-5.505908,-4.198806,-9.481029,-9.194170],[-1.675080,-9.755821,4.215795,8.346901,-1.850209,0.618834,-2.900784,5.716489,-5.515688,9.427330,1.354504,-3.649189,7.001163,-5.402149,-4.262489,-1.939844],[-9.737677,7.915960,1.598742,1.742518,-3.691799,-3.797747,-5.864014,-2.996274,7.688562,-3.712154,-9.123857,-8.242631,5.472361,6.462728,-3.715032,-6.023467],[-3.787308,-7.950090,-3.425163,1.536189,-1.069132,-3.643862,7.894703,9.396908,-4.207438,-4.706873,5.833278,-5.056736,7.636327,-2.857532,2.732179,-3.347962],[-0.465934,9.230202,-4.586423,6.887044,-1.592905,0.492365,-5.112241,4.750755,-0.985049,7.193268,-8.625060,-2.182606,2.233754,7.384742,9.753182,-9.647185],[8.767914,2.920458,-3.715300,-7.437857,-6.479769,6.382261,0.701041,2.277673,-8.000796,1.830687,-5.359680,-8.691763,-3.554573,-6.342412,-0.989237,1.553115],[-5.820606,7.227640,3.725577,-8.547268,-8.448097,-3.984633,-6.114890,0.337447,-7.856326,7.777640,2.708475,-7.949340,-0.989781,6.355402,3.074110,-4.765518]],[[5.035639,-3.842804,6.635559,-5.472697,-8.523427,7.789978,-9.129918,4.797598,6.948250,7.556330,1.102292,-3.110742,-3.147820,-6.780872,-4.560403,-8.180993],[-2.825227,-4.234789,3.799823,2.572941,2.747553,-2.700315,-7.175915,-7.450284,-6.418563,-8.949135,5.569394,8.269465,-4.617494,8.194973,-9.168999,4.205839],[2.770005,4.662753,-8.471110,-4.201841,1.780871,-6.570722,2.036899,-2.547622,-9.642176,1.106354,9.409706,-0.179664,-1.619487,2.528694,1.864626,0.177952],[-7.344005,2.995838,-7.208558,6.993427,-4.028529,8.000799,-0.202984,7.931452,-5.386653,7.106700,-4.369741,8.529395,6.239929,0.876998,5.367747,8.277115],[6.462022,2.637281,3.324970,-1.528970,-4.911844,5.401644,0.844992,8.838588,9.542327,8.136759,-5.605811,-6.747568,1.541110,-1.896807,-4.400262,9.117971],[-8.142154,0.053721,6.822821,2.717853,5.274904,-1.339709,-2.920691,-7.034851,-9.521771,8.673214,7.738645,6.949431,6.942686,3.453816,8.172015,-4.219137],[6.875411,1.240638,8.819346,-6.885956,0.021307,5.544535,1.182202,5.405626,2.208687,-4.685928,-0.496152,-4.993450,-2.276593,-7.137957,-3.822712,7.847169],[-8.387031,-8.435934,-1.913798,6.146765,2.675405,7.654820,-2.906245,3.688714,6.032405,-0.314513,6.512422,1.472085,6.653043,9.810940,-4.139738,7.713171],[-8.947417,-9.952608,9.617781,-4.368058,-6.428867,1.223673,3.935823,6.576948,-9.791032,-5.848900,-4.698563,8.271626,6.550021,6.153460,-1.233250,5.714071],[-5.221138,2.145996,9.601168,-9.015149,8.921593,-3.106180,-3.767017,7.726185,-5.706775,-6.461254,8.829266,-5.227561,7.121714,5.455528,-9.856520,-1.347422],[-6.135321,-9.770933,6.900422,-7.931669,-3.419327,4.210822,-8.726319,-7.676981,9.164035,8.180930,-0.145782,3.911314,4.654202,3.281802,2.280524,-4.247062],[3.354582,0.627798,0.616085,9.475787,0.966877,7.962514,3.258862,-9.924080,-0.286116,-6.623435,4.557434,-9.682596,-1.252083,-2.066590,5.186270,3.651887],[-0.050042,-0.875613,-2.472839,2.337906,-5.518583,1.601686,-6.658272,-0.672760,4.354448,-1.437597,2.637728,2.723835,-4.217485,9.694136,-9.543677,1.247679],[-1.503735,2.988101,6.183635,-2.517074,7.887818,-8.139294,3.493894,-4.191012,8.923451,4.750191,-8.614393,-2.252374,-1.372263,-4.698108,-8.653150,8.059750],[6.140041,-3.680649,-9.939263,4.007650,-0.116486,4.559371,-6.832013,8.613045,-2.344513,-8.331825,6.323314,-9.637262,7.593198,0.167597,-0.803666,-5.064981],[1.034819,-2.506879,4.102729,6.652997,6.919489,3.542721,-8.722550,2.774319,7.739343,3.233417,-0.453332,-4.415251,5.271393,-2.402610,3.360987,3.089498]]], dtype = "float32")#candidate|147|(14, 16, 16)|const|float32
uop_148 = relay.cosh(const_147.astype('float32')) # shape=(14, 16, 16)
uop_154 = relay.atanh(uop_148.astype('float32')) # shape=(14, 16, 16)
func_71_call = mod.get_global_var('func_71')
func_76_call = mutated_mod.get_global_var('func_76')
const_157 = relay.const([1,-1,-4,-3,-6,-9,4,8,-7,-4,2,2,10,1,9,7,4,8,-3,-8,-4,1,-6,4,5,-8,1,-4,3,5,1,-1,-2,-10,10,3,5,-1,-2,-6,2,-5,-2,-4,-6,9,2,10,-1,-10,-6,-2,-8,4,8,8,-4,3,-2,2,-7,-3,5,7,-2,4,2,1,-10,4,6,8,-5,-5,9,2,10,-6,-9,-10,2,10,-1,7,-7,1,-3,1,-1,2,6,5,1,1,-6,10,-5,3,-3,-7,-1,4,-7,-1,-1,-8,9,3,7,-10,6,-5,2,7,10,4,2,5,-2,8,9,2,-1,8,10,-5,9,7,7,5,-8,9,8,9,-10,5,3,9,-2,-4,-6,7,6,-9,8,10,-4,5,-5,-3,-9,6,4,8,2,-6,-8,6,-9,-6,-8,2,-9,7,1,-9,-6,4,10,-6,3,-1,-7,4,-1,-4,1,4,-4,4,-8,-8,9,6,4,-2,-4,-8,1,10,4,-2,3,-5,-6,4,1,10,-4,1,-8,4,7,6,6,9,-9,5,6,9,-8,-6,5,-10,2,-6,4,4,-6,9,-4,1,9,7,7,-7,-1,3,1,-4,7,-5,3,-2,8,8,2,-9,-7,-6,6,-9,-10,-4,8,-6,-9,-5,8,1,1,-2,-1,3,9,2,5,-2,-4,8,4,4,-4,-8,-8,-2,8,-9,-7,9,-4,-1,4,5,-10,9,-8,-7,-4,9,-4,9,5,1,2,7,-2,-4,2,4,4,-5,-10,7,7,-6,-6,-3,4,-4,7,-4,-10,7,10,5,7,-8,-2,1,-2,-2,-3,-1,2,-5,9,-10,-10,2,-8,-5,6,-2,-10,-2,9,1,1,-8,9,4,5,-6,8,-4,-4,-1,-2,-1,-5,5,6,-5,9,-4,9,6,-3,-8,10,-9,-8,-9,3,-3,2,4,3,9,-5,8,-2,-9,-7,-5,-8,3,5,8,-1,-10,-6,-3,6,-1,-6,6,-5,2,-1,-9,3,6,-6,-10,5,10,-2,2,-6,8,4,-1,-8,-9,9,-9,1,-2,2,-4,2,2,-10,4,7,-9,6,8,-2,-7,6,-5,3,-4,1,-4,3,-9,-10,10,-4,8,8,6,-4,10,10,9,-3,10,2,-9,10,7,-8,9,5,-2,5,2,2,1,7,5,10,6,-7,-6,-2,9,1,1,-5,-10,2,10,-4,-4,-9,-3,-2,3,-5,-10,-4,-6,-7,3,-2,2,5,-8,3,9,10,-4,-2,-6,8,1,-5,6,-6,5,2,-1,-9,3,10,-5,6,7,-6,3,8,-5,5,-6,2,10,-9,8,-2,2,-7,-4,-8,-10,-3,10,9,6,-9,-6,4,-5,-6,2,4,-10,3,-3,-5,7,8,-9,5,2,8,6,-3,-6,2,9,-2,-8,-4,-5,-5,-9,10,-9,-3,-2,8,-2,7,-2,-6,8,1,-10,-8,-8,-7,-6,-6,5,-8,10,-3,9,-2,2,5,3,-7,-2,10,-9,-8,-6,-2,4,8,-7,8,-2,10,-6,3,10,-4,4,-4,-9,-10,9,-7,-3,6,-5,-6,5,-2,-1,-2,-2,3,8,-1,-4,-3,-4,-5,-7,-6,7,1,10,-3,-6,-9,-1,8,-4,8,1,-10,-4,-1,7,-3,-1,-6,-8,9,-6,-6,-5,-6,-5,-8,6,3,-6,-10,4,-7,10,4,-6,5,5,1,-6,-10,3,-9,-7,-10,-7,-6,-8,3,-10,-7,4], dtype = "int16")#candidate|157|(660,)|const|int16
call_156 = func_71_call(relay.reshape(const_157.astype('int16'), [15, 11, 4]), relay.reshape(const_157.astype('int16'), [15, 11, 4]), relay.reshape(const_157.astype('bool'), [15, 11, 4]), )
call_158 = func_71_call(relay.reshape(const_157.astype('int16'), [15, 11, 4]), relay.reshape(const_157.astype('int16'), [15, 11, 4]), relay.reshape(const_157.astype('bool'), [15, 11, 4]), )
var_159 = relay.var("var_159", dtype = "float32", shape = (14, 16, 16))#candidate|159|(14, 16, 16)|var|float32
bop_160 = relay.less_equal(uop_148.astype('bool'), relay.reshape(var_159.astype('bool'), relay.shape_of(uop_148))) # shape=(14, 16, 16)
uop_163 = relay.tan(const_157.astype('float64')) # shape=(660,)
var_165 = relay.var("var_165", dtype = "float32", shape = (14, 16, 16))#candidate|165|(14, 16, 16)|var|float32
bop_166 = relay.power(uop_154.astype('float64'), relay.reshape(var_165.astype('float64'), relay.shape_of(uop_154))) # shape=(14, 16, 16)
uop_169 = relay.log2(uop_154.astype('float64')) # shape=(14, 16, 16)
func_71_call = mod.get_global_var('func_71')
func_76_call = mutated_mod.get_global_var('func_76')
call_171 = func_71_call(relay.reshape(uop_163.astype('int16'), [15, 11, 4]), relay.reshape(call_156.astype('int16'), [15, 11, 4]), relay.reshape(uop_163.astype('bool'), [15, 11, 4]), )
call_172 = func_71_call(relay.reshape(uop_163.astype('int16'), [15, 11, 4]), relay.reshape(call_156.astype('int16'), [15, 11, 4]), relay.reshape(uop_163.astype('bool'), [15, 11, 4]), )
bop_174 = relay.greater(uop_169.astype('bool'), relay.reshape(var_159.astype('bool'), relay.shape_of(uop_169))) # shape=(14, 16, 16)
var_182 = relay.var("var_182", dtype = "bool", shape = (14, 16, 16))#candidate|182|(14, 16, 16)|var|bool
bop_183 = relay.floor_divide(bop_174.astype('float64'), relay.reshape(var_182.astype('float64'), relay.shape_of(bop_174))) # shape=(14, 16, 16)
bop_187 = relay.bitwise_or(bop_174.astype('int32'), relay.reshape(const_147.astype('int32'), relay.shape_of(bop_174))) # shape=(14, 16, 16)
uop_197 = relay.cos(uop_169.astype('float32')) # shape=(14, 16, 16)
uop_199 = relay.asin(uop_154.astype('float64')) # shape=(14, 16, 16)
uop_201 = relay.log10(uop_154.astype('float64')) # shape=(14, 16, 16)
func_71_call = mod.get_global_var('func_71')
func_76_call = mutated_mod.get_global_var('func_76')
call_207 = func_71_call(relay.reshape(call_171.astype('int16'), [15, 11, 4]), relay.reshape(uop_163.astype('int16'), [15, 11, 4]), relay.reshape(uop_163.astype('bool'), [15, 11, 4]), )
call_208 = func_71_call(relay.reshape(call_171.astype('int16'), [15, 11, 4]), relay.reshape(uop_163.astype('int16'), [15, 11, 4]), relay.reshape(uop_163.astype('bool'), [15, 11, 4]), )
uop_212 = relay.sqrt(uop_197.astype('float32')) # shape=(14, 16, 16)
output = relay.Tuple([call_156,bop_160,uop_163,bop_166,call_171,bop_183,bop_187,uop_199,uop_201,call_207,uop_212,])
output2 = relay.Tuple([call_158,bop_160,uop_163,bop_166,call_172,bop_183,bop_187,uop_199,uop_201,call_208,uop_212,])
func_214 = relay.Function([var_159,var_165,var_182,], output)
mod['func_214'] = func_214
mod = relay.transform.InferType()(mod)
mutated_mod['func_214'] = func_214
mutated_mod = relay.transform.InferType()(mutated_mod)
func_214_call = mutated_mod.get_global_var('func_214')
var_216 = relay.var("var_216", dtype = "float32", shape = (14, 16, 16))#candidate|216|(14, 16, 16)|var|float32
var_217 = relay.var("var_217", dtype = "float32", shape = (14, 16, 16))#candidate|217|(14, 16, 16)|var|float32
var_218 = relay.var("var_218", dtype = "bool", shape = (14, 16, 16))#candidate|218|(14, 16, 16)|var|bool
call_215 = func_214_call(var_216,var_217,var_218,)
output = call_215
func_219 = relay.Function([var_216,var_217,var_218,], output)
mutated_mod['func_219'] = func_219
mutated_mod = relay.transform.InferType()(mutated_mod)
var_224 = relay.var("var_224", dtype = "float32", shape = (6, 5))#candidate|224|(6, 5)|var|float32
uop_225 = relay.asin(var_224.astype('float32')) # shape=(6, 5)
output = relay.Tuple([uop_225,])
output2 = relay.Tuple([uop_225,])
func_234 = relay.Function([var_224,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
var_235 = relay.var("var_235", dtype = "float32", shape = (6, 5))#candidate|235|(6, 5)|var|float32
func_234_call = mutated_mod.get_global_var('func_234')
call_236 = func_234_call(var_235)
output = call_236
func_237 = relay.Function([var_235], output)
mutated_mod['func_237'] = func_237
mutated_mod = relay.transform.InferType()(mutated_mod)
var_257 = relay.var("var_257", dtype = "float64", shape = (7, 13))#candidate|257|(7, 13)|var|float64
uop_258 = relay.exp(var_257.astype('float64')) # shape=(7, 13)
bop_263 = relay.bitwise_and(uop_258.astype('uint32'), relay.reshape(var_257.astype('uint32'), relay.shape_of(uop_258))) # shape=(7, 13)
func_71_call = mod.get_global_var('func_71')
func_76_call = mutated_mod.get_global_var('func_76')
const_270 = relay.const([[1,-2],[6,4],[-6,-7],[-8,-10],[5,9],[-3,10],[-8,7],[-6,-4],[4,-7],[-5,-2],[-3,-3],[-6,-7],[3,3],[-7,-1],[9,-2],[10,-3],[3,5],[-1,3],[5,-7],[9,10],[-2,-7],[5,5],[-5,-10],[-3,1],[10,-8],[-4,5],[6,-10],[5,-6],[-4,-7],[2,-4],[9,4],[-6,-1],[-3,-7],[9,6],[-3,-8],[-8,-7],[-9,1],[6,-8],[9,8],[9,2],[-8,10],[-1,3],[-5,-6],[7,-5],[-10,8],[4,-3],[-10,-8],[2,-2],[9,2],[-8,-5],[7,-6],[-5,-1],[-7,-10],[-6,4],[6,6],[4,-2],[8,2],[-8,9],[-6,-8],[-5,-5],[1,-5],[-10,5],[-3,-6],[9,-7],[-2,2],[-5,3],[-5,-2],[3,3],[3,-1],[7,9],[-4,-6],[-6,9],[3,8],[-4,9],[6,-10],[-7,3],[10,-2],[-9,-8],[9,6],[-8,-3],[-8,-9],[4,4],[7,6],[-10,7],[2,-9],[-2,4],[1,-9],[8,-10],[-3,-1],[-6,4],[10,1],[-1,-9],[8,6],[7,3],[1,-6],[4,-5],[6,-3],[-2,6],[-6,-1],[-3,-2],[10,-3],[7,6],[-8,8],[10,-8],[-1,7],[-7,-5],[-9,-10],[9,-5],[9,8],[2,7],[-6,-3],[-8,3],[3,3],[2,-2],[6,-3],[-5,8],[6,3],[1,9],[3,-4],[-4,-2],[-6,6],[-3,-8],[10,4],[2,1],[-9,6],[-2,-7],[-7,-10],[7,-8],[5,2],[-2,-8],[2,8],[-5,9],[-3,2],[-10,-4],[10,-9],[-4,-4],[1,-8],[4,7],[-10,-1],[-6,-9],[-7,-6],[-9,-3],[-2,10],[1,6],[9,7],[2,1],[-9,-6],[-3,3],[5,-7],[10,5],[-4,8],[10,7],[10,1],[6,-3],[-4,-9],[2,-7],[9,-1],[-5,1],[-3,5],[4,3],[6,5],[7,6],[-7,-8],[-6,7],[-8,6],[-7,3],[7,7],[9,-5],[-3,-6],[10,-2],[6,-5],[-5,-10],[3,8],[-3,3],[-10,9],[-10,2],[-7,-4],[2,-4],[-7,1],[-3,7],[-6,-7],[-10,7],[1,-9],[4,-4],[2,8],[5,-2],[-2,4],[-5,1],[-8,10],[-1,9],[-5,-4],[-10,10],[6,5],[9,-4],[2,6],[1,-9],[-8,-8],[-6,-2],[5,-9],[-4,-8],[8,-6],[3,-8],[7,2],[-3,-8],[2,1],[-5,8],[-1,-5],[-8,7],[-8,-3],[-2,6],[4,9],[3,-8],[7,2],[4,-10],[-8,10],[-9,10],[-2,6],[3,-5],[-2,-6],[-4,-9],[-6,1],[-10,3],[-7,2],[1,-3],[6,-7],[3,-5],[6,1],[8,1],[8,1],[6,-6],[8,8],[1,-4],[-3,5],[3,-1],[3,-9],[2,2],[5,-10],[9,3],[-5,1],[-4,-4],[-4,-3],[10,5],[7,-4],[-7,1],[-4,-2],[-10,-2],[-8,2],[8,9],[4,8],[-7,9],[9,3],[4,8],[8,10],[-5,-2],[7,-4],[-9,-8],[6,-8],[1,7],[3,-5],[-7,-4],[3,2],[10,10],[7,2],[-9,-10],[8,-8],[-5,8],[4,-6],[8,-5],[-6,8],[10,-3],[4,-4],[8,7],[-9,-5],[-9,-6],[-8,-3],[4,7],[4,6],[-5,-2],[4,1],[-9,-8],[-5,-7],[-7,7],[-5,2],[-10,-9],[-6,10],[-2,2],[2,10],[4,-10],[-2,-3],[-9,-4],[3,-6],[-5,-9],[8,4],[-4,9],[-10,7],[-8,4],[5,-1],[-10,-1],[-1,7],[-1,-8],[-6,10],[9,-5],[-10,-4],[1,-10],[-9,-1],[8,-3],[-10,-8],[7,-10],[8,-2],[-1,7],[-1,-10],[3,9],[5,-1],[3,-3],[-6,-3],[-6,-5],[-5,5],[-8,-9],[-5,1],[1,10],[-9,8],[-6,-4],[3,-5],[-4,-7],[-1,-7],[5,8],[-5,8],[9,1],[-6,10],[1,4]], dtype = "int16")#candidate|270|(330, 2)|const|int16
call_269 = func_71_call(relay.reshape(const_270.astype('int16'), [15, 11, 4]), relay.reshape(const_270.astype('int16'), [15, 11, 4]), relay.reshape(const_270.astype('bool'), [15, 11, 4]), )
call_271 = func_71_call(relay.reshape(const_270.astype('int16'), [15, 11, 4]), relay.reshape(const_270.astype('int16'), [15, 11, 4]), relay.reshape(const_270.astype('bool'), [15, 11, 4]), )
uop_274 = relay.acosh(uop_258.astype('float64')) # shape=(7, 13)
func_214_call = mod.get_global_var('func_214')
func_219_call = mutated_mod.get_global_var('func_219')
var_277 = relay.var("var_277", dtype = "float32", shape = (3584,))#candidate|277|(3584,)|var|float32
call_276 = relay.TupleGetItem(func_214_call(relay.reshape(var_277.astype('float32'), [14, 16, 16]), relay.reshape(var_277.astype('float32'), [14, 16, 16]), relay.reshape(var_277.astype('bool'), [14, 16, 16]), ), 0)
call_278 = relay.TupleGetItem(func_219_call(relay.reshape(var_277.astype('float32'), [14, 16, 16]), relay.reshape(var_277.astype('float32'), [14, 16, 16]), relay.reshape(var_277.astype('bool'), [14, 16, 16]), ), 0)
bop_283 = relay.equal(uop_274.astype('bool'), relay.reshape(bop_263.astype('bool'), relay.shape_of(uop_274))) # shape=(7, 13)
bop_293 = relay.divide(uop_274.astype('float64'), relay.reshape(var_257.astype('float64'), relay.shape_of(uop_274))) # shape=(7, 13)
bop_296 = relay.greater_equal(bop_293.astype('bool'), relay.reshape(var_257.astype('bool'), relay.shape_of(bop_293))) # shape=(7, 13)
bop_302 = relay.power(uop_274.astype('float32'), relay.reshape(bop_283.astype('float32'), relay.shape_of(uop_274))) # shape=(7, 13)
output = relay.Tuple([call_269,const_270,call_276,var_277,bop_296,bop_302,])
output2 = relay.Tuple([call_271,const_270,call_278,var_277,bop_296,bop_302,])
func_307 = relay.Function([var_257,var_277,], output)
mod['func_307'] = func_307
mod = relay.transform.InferType()(mod)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
func_307_call = mutated_mod.get_global_var('func_307')
var_309 = relay.var("var_309", dtype = "float64", shape = (7, 13))#candidate|309|(7, 13)|var|float64
var_310 = relay.var("var_310", dtype = "float32", shape = (3584,))#candidate|310|(3584,)|var|float32
call_308 = func_307_call(var_309,var_310,)
output = call_308
func_311 = relay.Function([var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
const_324 = relay.const([[[-2.185274,7.890053,1.324158,5.464014,-5.358828,-9.511436,-8.233916,-3.348871,-9.427371,0.869049,0.262015,5.687405,-1.158920]],[[4.943837,6.885419,-9.065005,-2.628195,-2.924699,-1.215630,-9.487065,-8.619095,-0.089557,-5.138263,-5.816258,-4.158229,6.503820]],[[5.894915,-7.921342,1.907979,9.799182,5.166624,-2.753571,7.379020,5.536013,-6.934444,-5.100605,-6.991436,-2.015547,4.170301]],[[4.469746,-3.558091,-5.478282,5.035837,3.154429,-2.312200,-4.950257,-2.941996,2.287392,2.890187,0.511086,7.805270,-7.908318]],[[-1.881547,-7.351837,9.679399,-8.526952,-6.984580,2.497464,2.937268,-0.031131,6.082132,6.945139,-7.064429,5.924296,2.646436]],[[6.384259,7.582803,-1.911476,-4.398422,8.521952,-2.296866,7.762475,-7.108920,3.323091,7.286456,-0.097695,-5.598269,-3.976105]],[[-1.428601,-8.336731,5.678300,-1.577008,5.839357,-9.496619,3.797913,-4.335831,0.907841,-3.621983,-0.354594,-2.995903,-1.806319]],[[5.146897,-9.778547,1.916836,6.382626,5.849772,3.768276,8.956410,-9.818053,5.863622,-5.833159,-4.054973,8.129148,4.732681]],[[-6.005575,-7.006979,-7.693039,7.311925,5.587106,-5.537292,-4.915723,9.493870,1.059502,-3.612731,1.721417,-7.843430,5.850407]]], dtype = "float32")#candidate|324|(9, 1, 13)|const|float32
uop_325 = relay.tan(const_324.astype('float32')) # shape=(9, 1, 13)
const_328 = relay.const([[[4.682299,0.305929,-5.957109,7.154854,3.882021,0.759127,-8.145688,5.684562,0.608611,6.885578,-4.650441,-7.693475,6.687213],[-4.313314,-5.715263,9.527088,4.173425,-6.804995,-5.753763,-6.218955,-0.802825,3.449212,3.457467,-8.624527,-3.640330,9.469291],[7.087327,7.347131,1.439401,-4.553978,-1.893001,2.551148,-1.086957,7.929647,1.226009,-3.939030,-6.450686,0.082609,-7.257873],[-7.244405,2.720071,9.909827,-1.528163,4.701191,1.224277,2.003916,-0.390010,3.185243,-5.179165,6.513257,-9.929007,-7.163820],[4.571172,7.748966,0.192905,5.053951,0.565488,4.683821,3.276625,3.132363,-0.276442,-1.347863,9.134436,9.731067,4.271528],[9.561700,7.814773,-2.057599,8.540280,-3.421477,9.659552,2.564072,2.906546,-6.838256,-4.664263,3.001497,-9.446357,8.243154],[8.685841,-8.975351,1.233601,4.532607,7.490677,2.657463,6.543099,1.810337,1.493819,7.878267,-9.399964,-6.072527,3.182228],[6.383990,7.747571,4.873515,-7.680978,5.808862,3.211089,-7.768945,-5.793763,-1.279974,2.429032,5.110202,-3.933825,1.382217],[-0.496265,2.478662,0.207939,-1.082197,9.621880,-7.485835,4.213876,8.953066,-9.980598,7.876670,-2.355624,-9.592299,0.109562],[-5.075659,-8.875015,-0.507856,8.857635,-7.614279,0.765023,-0.388905,-6.644498,-8.446239,-8.834895,-8.239364,7.086786,-2.051818]],[[3.596953,7.367830,-4.231468,5.926205,-6.157236,7.969541,7.658849,-4.508407,-6.471157,-8.875569,5.788157,-0.547300,-7.621148],[-9.969917,-6.987826,7.170950,4.555630,9.733455,6.614317,-3.599518,-2.703580,5.806534,3.622970,-4.046895,-0.060855,-5.084454],[9.383442,-6.995878,-0.171787,2.882540,7.230410,-8.268660,-8.073741,-8.535088,-2.725486,6.163324,-7.061400,3.681683,-4.309488],[-6.334539,-2.371549,8.699680,9.203563,3.863789,-7.273337,8.480768,-2.248526,6.519596,1.280747,-2.025029,-7.040281,-6.203158],[-2.815356,3.940904,-0.825442,-1.439426,-5.757017,-7.190462,9.384042,5.609588,1.590266,5.839834,8.886741,-3.336071,-1.438057],[-3.085382,-8.264856,2.825797,-2.960931,7.433509,-7.470397,5.674017,9.914753,7.178740,-0.865667,5.433681,9.164187,5.231164],[1.351216,1.234554,-1.983743,-3.526460,-6.306058,2.526423,-4.295519,8.242606,-6.712892,-8.012508,9.585622,-6.299249,-9.398557],[5.381821,-5.640886,-7.370572,-2.798365,1.670097,-9.768691,7.686435,-0.210239,1.605036,9.464691,9.741709,-9.785904,-6.282432],[9.699734,9.471709,-9.004146,1.634178,8.954018,-6.066395,4.465270,-3.197932,9.452488,9.787705,-4.818970,8.290218,5.149445],[-1.497785,-0.543086,6.129050,6.908832,9.550884,1.694045,3.204431,7.157688,-8.726544,8.343937,-2.481172,-6.783272,-9.062786]],[[-2.290548,1.398383,0.794901,6.842304,-3.685981,3.958823,3.718733,8.218731,-7.345167,6.476459,-6.397064,-7.121398,-0.743645],[-8.786447,-4.186391,-5.127992,-6.962860,4.842089,6.007066,1.245523,4.747880,0.983304,-9.037715,-8.704423,8.664623,-1.371645],[4.352942,-0.233267,9.966591,7.160951,3.477055,-2.616756,3.027105,9.767625,3.892396,-2.124562,-3.572520,9.414824,-2.190628],[1.055008,-8.779325,8.227905,-7.573229,4.859799,-9.696463,-3.973662,-1.018645,-1.924601,-7.016617,-8.885892,-9.761682,-9.389189],[1.473261,0.525110,7.114132,1.551621,-7.080173,-9.446691,-3.376287,-8.959203,-7.924448,9.228763,-1.266505,-0.917820,9.696871],[-5.182212,3.335933,-7.932773,-9.675715,-4.245755,-4.437502,5.557807,-4.937157,-2.068951,-8.169867,1.492190,6.536079,5.012524],[-6.912510,-7.498684,4.510977,-0.239083,6.451125,1.014673,-8.716761,-9.429388,6.284110,-4.728600,0.981692,2.161763,5.421667],[-5.867650,0.367580,-4.833920,7.120530,1.279733,9.914201,8.640005,0.255762,7.813299,-5.079069,-2.470115,1.716315,4.909272],[8.957401,-2.438579,8.126652,8.192560,7.136380,4.939705,-9.028784,1.120973,-6.111839,4.159689,2.123271,6.079727,-8.082634],[2.302540,-4.695594,-8.205631,5.970318,9.210894,2.923036,8.734338,-6.913250,2.164983,-4.183605,1.115693,6.992034,-6.554911]],[[2.081856,-1.278108,3.890223,3.972762,-4.669652,-5.069999,3.854959,-3.808239,-3.084156,2.601289,-1.245673,-6.384188,4.615974],[8.302660,-6.788875,3.148594,-5.478420,6.636690,5.357034,0.143524,-1.784673,-6.622390,3.163157,-9.865767,-6.267377,2.355312],[-3.670370,5.782745,1.344571,-7.774116,-5.278425,7.931399,3.503705,0.561073,8.966360,-8.179455,-9.083114,5.541884,8.109650],[6.899544,2.525176,4.841891,-8.029429,0.462184,7.713401,1.271312,4.083350,-8.120560,1.865446,-9.679706,7.599429,-2.841324],[9.573184,6.615067,3.612593,-9.353235,4.641955,-6.072995,6.052910,2.405822,9.306356,-0.026337,6.592603,4.140645,-6.272620],[-8.524815,-1.691923,2.639977,-9.362483,3.350418,-5.835511,7.802091,4.739304,4.061866,3.557401,5.787573,-4.824589,-3.279952],[6.919661,-6.549936,2.596075,8.000098,-9.689142,0.339127,9.900871,-5.059297,-0.335583,-1.128763,-2.547847,-5.767429,-3.532365],[-7.457636,-1.331714,4.376767,2.375791,4.231387,-9.040132,-2.549443,-4.412401,0.055706,-8.226891,1.826382,4.383365,-5.093095],[8.595257,-3.743099,0.251299,-1.940925,5.251715,2.733258,-8.586431,6.296352,6.202819,1.707984,8.049235,2.565230,-0.266304],[-2.892243,-4.140287,2.016472,-6.353426,-6.464761,2.929403,3.349467,-9.855584,3.619865,9.249458,5.043607,-5.512945,-8.907879]],[[8.234425,-2.354163,-8.850996,-9.225452,2.213057,3.831850,9.199038,9.546569,-0.275377,3.431195,1.068899,5.704153,1.530579],[9.832307,1.890009,2.302947,-5.686946,9.564473,-1.794841,1.822062,2.937265,0.631711,-3.625657,5.380753,4.504656,5.362751],[5.814609,-8.937547,1.711035,6.534082,1.570154,-9.772432,-5.876979,6.168918,4.344711,-3.120162,2.406141,4.938271,4.239324],[-1.485371,2.411191,9.250580,9.145395,6.744257,-1.019745,0.721904,6.461771,0.221562,0.268474,-5.893180,7.209133,-8.163589],[4.968619,2.580046,-6.683973,6.026960,8.566976,6.467394,-1.295649,-0.833678,6.265453,0.844256,2.576571,-9.557878,8.581393],[3.268150,2.837272,6.183847,4.518773,4.183102,-6.700733,4.405877,-1.837374,-0.665163,0.071186,0.142912,7.774522,4.972589],[3.799373,7.549350,-5.129141,4.240038,-4.498309,-9.460183,3.137214,-1.436623,4.787533,-4.317414,-0.552797,-8.139918,4.391710],[-5.465211,-9.895562,9.062313,8.299653,-4.804903,7.789865,4.127014,-9.838088,3.116133,-7.781358,-8.984276,9.242245,1.180982],[8.964830,0.860953,2.656636,3.627022,4.827449,9.062167,-3.329309,-1.846444,2.899001,0.984017,-0.173436,-3.713082,-1.691614],[-7.955299,2.882355,3.093110,7.183048,1.684172,-4.682525,4.392682,8.683291,-7.215723,-4.866755,8.075466,3.079103,-1.574048]],[[9.292963,-0.309928,7.661860,5.562096,-6.417863,2.193816,1.048718,-2.295804,-0.063130,6.396379,-8.525771,4.060802,-8.394300],[-4.181124,3.600477,8.392778,5.382119,9.586536,-8.007740,5.489340,0.833154,5.876167,4.396679,0.511856,4.998343,2.690328],[-7.363495,-2.587697,2.407263,-4.416276,3.847041,5.618701,7.279392,1.464461,1.287352,-9.438306,-7.631405,4.456261,3.574388],[9.029936,7.955316,-2.626763,4.896236,8.969487,-2.162280,3.892286,7.313547,-6.134469,1.447168,9.764462,2.038988,-0.121534],[2.462040,8.966792,-3.295747,2.691195,-0.217487,0.563570,-2.946169,-3.754934,7.282867,8.993264,6.248340,7.999457,8.025672],[0.649147,9.894764,-4.211042,-9.165686,9.271156,-6.087129,-7.525486,3.933403,-8.246927,-3.951884,-4.147770,6.085360,0.158748],[1.439171,5.035133,7.985649,0.075218,-4.343027,6.242456,-0.438941,4.888918,9.189817,9.892385,-7.071038,-2.346503,-4.540310],[-9.662202,-4.121964,-2.887135,-0.211290,9.700948,8.856213,-5.989506,-7.650769,-3.335549,4.758116,-3.419437,8.664386,0.992950],[1.474072,7.908629,-1.854198,0.116166,9.127155,-5.268716,-2.033636,2.157369,2.094228,1.810674,1.814037,-8.653014,-7.848577],[7.005528,-4.876750,1.056271,-7.884363,4.345451,-1.298994,-0.654109,4.036123,2.552708,-3.035597,4.203185,3.750840,4.456929]],[[-5.889188,6.788291,-5.686593,-1.554517,2.151653,3.704930,-3.856538,-3.495820,2.171813,-3.470857,3.691682,-5.575124,-8.861597],[6.692228,5.571106,-8.520440,-8.113011,-3.586909,-9.710740,5.814982,-1.983144,-2.934900,-0.200503,2.951310,0.892835,-2.636175],[0.648712,-2.163538,-7.721225,1.472223,-1.811786,6.698130,1.196391,-2.262361,-6.577230,3.873699,-5.028090,-1.059838,-6.485517],[-6.346002,0.759284,5.954041,-6.485935,6.024020,2.941407,-9.952745,-6.287614,9.588297,5.167661,-5.211966,2.246899,-6.616127],[7.549238,-8.759063,-5.086819,9.311697,6.107007,-1.693513,-8.912611,-1.237614,2.580977,1.010870,-3.721315,7.389496,-5.334113],[-9.824775,-5.619222,6.855377,9.528748,9.176332,4.189453,0.277885,8.535603,-1.907795,9.114845,-0.460074,4.024053,4.478913],[-6.195450,7.484996,-0.032472,-5.067618,-9.771537,-6.589975,-9.153565,1.088417,-5.313550,-2.976781,-7.026264,4.958883,-9.981420],[-7.025961,2.448684,0.525101,3.464576,5.574566,-8.701864,-0.959603,2.339670,-8.367483,-2.969289,0.033338,0.627633,1.588839],[-8.298898,7.653059,-1.393480,-0.313964,0.878509,2.737584,-5.817506,-0.480909,-7.994443,7.952683,3.697433,8.786848,4.901420],[-9.747232,6.439809,4.735069,-0.184016,-8.548475,-4.342431,1.818454,-8.711648,-2.674186,9.193967,-2.442439,3.517178,8.363153]],[[4.763614,8.915715,-4.811122,0.601184,3.837190,3.457023,-1.951998,-4.231239,8.074354,-1.534544,-9.075953,-1.232555,-1.808487],[9.142021,4.251590,-5.176263,-8.067936,2.652607,-3.887294,-4.471583,4.460021,3.299442,8.416813,9.153606,3.417083,-4.400234],[-8.547837,1.815536,7.680756,7.597650,-2.206421,-9.666256,2.032996,6.576413,-7.258105,3.298433,6.855941,8.987099,-5.370494],[0.083235,8.674650,1.004210,0.718268,-9.284047,6.511034,6.029476,0.615665,-0.021326,0.204059,-9.067911,5.987427,-7.892308],[1.905326,9.021048,-2.254709,3.769399,3.308279,9.375430,-6.352223,2.080735,1.413826,1.578444,-7.876217,7.902609,3.632962],[-2.183962,2.053043,0.061264,-7.386823,-2.255287,-5.690369,-8.488550,-5.296650,-3.772082,9.371577,7.453489,-9.119059,-8.326740],[-3.267407,-6.623879,9.338517,2.516173,6.417383,3.224319,7.556519,-2.380364,-2.971692,3.714449,7.173352,1.615707,-7.722046],[7.627039,8.960282,8.461275,-3.084449,0.465981,-0.594875,-5.554028,6.594969,-0.029002,-6.599041,-2.273524,9.323686,7.902712],[3.126348,-8.225794,2.429298,-7.558833,7.755831,8.467477,-7.085937,5.849374,1.182032,-0.664416,-2.542865,6.254284,-0.648323],[7.944452,-1.453236,-9.688399,6.107821,7.166639,-5.445437,4.655235,7.708264,0.522902,0.206769,7.907291,2.534663,0.177672]],[[-1.392290,-4.246498,5.841052,-8.171071,-1.231074,7.060286,6.489077,1.457157,2.697589,0.722203,9.422671,-2.167414,-7.932502],[0.667331,3.385441,6.434849,6.067982,-5.912082,0.054473,-9.753774,3.410207,0.836988,-8.474538,6.311139,3.944532,7.827150],[7.100821,1.630825,8.769221,1.030021,6.917862,-9.190954,-8.969089,5.451390,4.711384,-2.279604,-8.183419,-3.582761,-4.786792],[-8.234526,-8.419704,-2.117529,1.966145,9.381681,-1.117774,4.624483,2.051212,-2.024312,4.117864,6.834522,-9.274932,0.545923],[9.465699,2.195584,9.030628,7.774397,2.393901,-1.598502,0.848889,2.308833,-3.434232,-0.304401,-3.791882,-9.022323,-1.354409],[7.642870,2.672805,2.685520,-4.328199,-8.686799,-1.710428,7.916072,2.512866,-7.785164,-5.775290,-1.472868,0.622975,-1.924564],[4.842566,2.102674,4.726840,-4.745536,9.949815,9.559888,3.360131,-0.118989,-6.064900,8.668904,4.242574,-3.735801,-1.373457],[-8.774842,4.106824,8.182241,3.522200,8.430137,6.029961,0.527497,2.705115,-0.186322,-3.741549,8.835066,7.463031,-5.277709],[-1.204711,-4.127199,1.335468,-7.447116,9.125822,-6.049063,-2.227440,5.983653,6.883869,4.979568,-3.452611,3.478464,-1.801779],[4.319083,-6.572914,-5.453395,-7.715113,3.816689,1.136020,3.055732,0.421659,-5.057347,9.273066,-7.513973,-1.940604,7.242946]]], dtype = "float32")#candidate|328|(9, 10, 13)|const|float32
bop_329 = relay.minimum(const_324.astype('uint16'), const_328.astype('uint16')) # shape=(9, 10, 13)
uop_333 = relay.cosh(uop_325.astype('float32')) # shape=(9, 1, 13)
output = relay.Tuple([bop_329,uop_333,])
output2 = relay.Tuple([bop_329,uop_333,])
func_335 = relay.Function([], output)
mod['func_335'] = func_335
mod = relay.transform.InferType()(mod)
mutated_mod['func_335'] = func_335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_335_call = mutated_mod.get_global_var('func_335')
call_336 = func_335_call()
output = call_336
func_337 = relay.Function([], output)
mutated_mod['func_337'] = func_337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_335_call = mod.get_global_var('func_335')
func_337_call = mutated_mod.get_global_var('func_337')
call_344 = relay.TupleGetItem(func_335_call(), 0)
call_345 = relay.TupleGetItem(func_337_call(), 0)
uop_348 = relay.atan(call_344.astype('float64')) # shape=(9, 10, 13)
uop_350 = relay.atan(call_345.astype('float64')) # shape=(9, 10, 13)
bop_351 = relay.add(uop_348.astype('int64'), relay.reshape(call_344.astype('int64'), relay.shape_of(uop_348))) # shape=(9, 10, 13)
bop_354 = relay.add(uop_350.astype('int64'), relay.reshape(call_345.astype('int64'), relay.shape_of(uop_350))) # shape=(9, 10, 13)
bop_356 = relay.bitwise_and(bop_351.astype('uint32'), relay.reshape(uop_348.astype('uint32'), relay.shape_of(bop_351))) # shape=(9, 10, 13)
bop_359 = relay.bitwise_and(bop_354.astype('uint32'), relay.reshape(uop_350.astype('uint32'), relay.shape_of(bop_354))) # shape=(9, 10, 13)
output = bop_356
output2 = bop_359
func_360 = relay.Function([], output)
mod['func_360'] = func_360
mod = relay.transform.InferType()(mod)
mutated_mod['func_360'] = func_360
mutated_mod = relay.transform.InferType()(mutated_mod)
func_360_call = mutated_mod.get_global_var('func_360')
call_361 = func_360_call()
output = call_361
func_362 = relay.Function([], output)
mutated_mod['func_362'] = func_362
mutated_mod = relay.transform.InferType()(mutated_mod)
func_360_call = mod.get_global_var('func_360')
func_362_call = mutated_mod.get_global_var('func_362')
call_365 = func_360_call()
call_366 = func_360_call()
output = call_365
output2 = call_366
func_381 = relay.Function([], output)
mod['func_381'] = func_381
mod = relay.transform.InferType()(mod)
output = func_381()
func_382 = relay.Function([], output)
mutated_mod['func_382'] = func_382
mutated_mod = relay.transform.InferType()(mutated_mod)
const_398 = relay.const([[[7.917089],[8.039072],[-4.914411],[-3.628852],[9.258869],[9.396515],[8.750566],[7.384550],[3.913869],[9.843417],[9.894665],[-3.993643],[-0.990433]],[[-6.947637],[9.131765],[-1.296606],[-4.046442],[-1.871452],[8.822119],[0.118781],[6.329978],[-4.649814],[7.463974],[2.425244],[-2.427627],[4.819557]],[[5.382041],[5.175438],[-5.470572],[6.110902],[2.135541],[-7.510067],[2.837379],[-4.967570],[2.595514],[3.241730],[-7.462753],[5.688910],[-6.836867]],[[0.307126],[0.574849],[-2.631886],[-2.827930],[-3.367202],[5.818319],[-3.934617],[5.196709],[-3.885075],[-7.763564],[-0.836458],[-3.922612],[-7.050459]],[[0.098638],[8.700673],[-8.053684],[-8.698124],[7.692915],[-9.434151],[-9.402026],[-0.381342],[-6.686259],[9.408579],[1.134813],[-6.145000],[-8.142872]],[[9.213532],[8.003503],[-1.831705],[9.813621],[-7.116362],[-4.415320],[8.393724],[2.229652],[5.886139],[8.148963],[0.714806],[7.401228],[2.777834]],[[-3.780462],[-2.462357],[-4.060787],[4.718774],[0.994456],[-3.925402],[9.074155],[-2.161081],[9.754471],[-3.797551],[-1.909718],[7.930901],[7.547582]],[[5.643747],[3.634258],[-3.336014],[5.270640],[-9.429984],[-1.878842],[2.588175],[7.782537],[3.374120],[-8.961434],[-5.802962],[8.032033],[-2.531700]]], dtype = "float64")#candidate|398|(8, 13, 1)|const|float64
const_399 = relay.const([[[-0.611942,0.694348,-6.679428,6.650858,-3.695118,3.072548,2.717742],[-4.640070,5.645644,-1.926055,7.033082,8.300486,6.033831,-0.419727],[5.548507,2.410256,8.787960,8.192247,-6.627624,9.687153,9.744960],[-4.955901,4.586183,0.711842,-2.334092,-1.651404,9.350881,-6.027276],[2.269813,2.553070,4.224342,-6.760310,6.139287,-8.658621,-7.075815],[-3.697458,-9.744126,-3.353202,6.805133,-8.774947,6.419546,2.139099],[7.456337,6.650172,3.867720,2.037848,-3.601238,3.213681,-3.818536],[7.207906,8.431904,-5.410405,-8.038612,9.275417,-8.735379,3.991883],[-2.839635,-8.328003,0.924649,-7.568279,-4.525320,6.448977,5.000122],[-1.452785,-0.379013,-7.292777,9.271387,4.193865,1.087525,2.724081],[9.041965,-2.000993,-0.837076,8.128988,-2.813824,-4.861824,9.212119],[4.485071,-9.951092,-3.594923,-0.715101,-8.600620,1.546143,2.554088],[-5.371568,9.779919,-8.935383,3.227095,-6.688954,-6.513921,-4.555041]],[[-9.474807,-5.605810,-3.095005,4.999521,3.347344,6.666307,-1.523860],[9.473376,3.159566,-0.046231,0.527802,-2.321800,2.265828,7.300951],[-8.413798,-1.663811,-8.872885,-1.530317,9.452893,1.918345,3.587104],[-0.645233,-6.308539,-6.038900,6.696592,-0.533702,5.908228,1.258877],[8.955470,-3.379840,-7.204720,-1.889807,0.150856,5.477355,8.531326],[3.019813,6.048461,-4.459249,3.630737,-7.815522,0.403280,-9.356219],[6.540706,-7.276451,-8.669031,-8.780782,3.886065,9.351390,-9.156154],[-4.455157,-9.241566,-6.178149,7.352038,3.131616,7.578155,-0.371207],[-0.635959,8.441972,-4.872183,-8.939799,-4.047618,-8.831152,-1.189914],[-0.878385,-1.524686,-4.465260,-3.356404,4.297043,0.392991,0.123535],[-4.797733,5.763628,-4.967818,-9.795351,-9.525683,1.841899,-6.634488],[8.529349,-0.973050,5.752754,-8.475345,3.824262,-6.161790,-3.947983],[7.303558,4.740065,9.729114,-5.484374,4.295528,2.666266,0.158825]],[[0.332055,-2.007140,-3.470930,-5.595904,2.593054,3.254839,-0.687967],[9.650138,8.380827,-4.919827,-9.249966,-1.195103,1.097854,-1.089133],[4.802167,3.782452,3.523244,3.175955,-9.901976,8.164476,-9.864134],[-9.387164,-7.736397,-2.978715,-5.823960,-1.982483,-1.636576,9.932763],[9.819165,-4.859615,-2.990268,1.256369,7.936892,3.232427,-8.716570],[-7.842288,-9.078349,3.549431,-3.509367,-2.225607,-3.001920,-7.602548],[3.396751,-4.634100,5.358253,-7.994825,5.283984,3.118402,-7.967593],[-2.680779,4.037582,-9.599419,-1.888122,-1.251866,4.274537,2.210937],[-2.671863,-9.321030,-3.757711,-7.430539,-8.876001,6.485212,-2.186387],[-4.018796,1.478232,0.952836,6.221738,-6.433301,-8.501127,9.275223],[-2.814256,6.599040,-7.313226,-1.011789,2.795233,-3.342337,5.104491],[0.890770,-5.326484,0.078402,-9.779562,-7.523061,-0.680257,2.250416],[5.559042,-9.053835,-8.749928,-4.582024,8.978219,8.530053,0.832266]],[[-1.472957,1.891776,-3.844865,-0.166841,0.383325,3.269021,-2.669593],[7.823502,-8.819920,-7.285181,-4.854167,-0.067081,7.416309,7.901950],[-1.809068,-3.511534,-3.276753,-3.206160,4.976806,-0.318137,-3.574471],[-3.550992,8.326180,-7.028895,5.663139,-5.093260,5.742214,-2.188481],[-7.923133,6.769038,7.651019,-1.339672,1.742601,-5.090765,7.303849],[-2.243580,-4.081732,-6.648241,-5.002783,5.693891,-3.067135,5.207409],[3.192618,-1.728252,7.221383,-2.724127,-5.125515,-1.446978,-7.781448],[-0.344877,7.552512,1.632095,-3.726292,4.974224,-4.629214,-7.096936],[-6.448367,2.661549,7.612782,-5.506439,6.512988,4.808566,5.707259],[-2.472865,4.802074,7.257885,6.012215,-3.797726,-8.921211,-2.801675],[6.175474,8.052457,-0.226003,5.881778,8.398077,-2.584858,-4.083622],[-6.859372,-7.702472,9.699172,1.297297,-9.210127,0.521479,-7.065654],[2.838580,6.943034,0.626451,-9.008683,9.471731,-3.099974,0.484865]],[[7.124089,-0.372266,3.258049,-9.439651,-1.067307,0.145713,-6.247273],[-0.634429,2.577460,0.606563,-4.496975,5.403073,-1.732070,-8.951169],[4.506478,-1.853540,9.436737,-2.112140,9.095330,-3.621918,5.559061],[-2.288775,-6.137861,-9.413352,-6.216965,-4.587873,5.081885,-8.508663],[-7.773322,-1.033522,-2.372346,5.081053,5.478015,8.372927,-7.834005],[0.876372,2.123698,-8.036029,-2.704981,4.599215,-7.298396,3.339866],[-2.849330,-6.953616,-9.022281,-9.949147,1.177012,-6.952212,-9.585149],[0.549141,1.168136,-5.288070,-1.113535,9.784631,8.799129,-4.622348],[-6.441657,1.351964,7.655908,-2.779721,-7.779581,-2.182873,-7.769302],[4.048376,-8.042910,6.079213,9.472598,3.965589,-9.502144,-9.402001],[1.869748,-3.095511,-7.300924,-2.707385,6.000192,8.191765,-1.214139],[9.282776,-6.399214,2.322175,7.910433,7.536578,-6.396055,-2.409219],[4.612576,-9.017135,8.108248,-4.449688,7.116310,4.113358,9.765311]],[[-6.963688,3.840964,-5.392684,-9.696162,-9.866053,7.414345,-3.222172],[-2.380281,-8.354525,1.901304,2.507552,8.152865,-5.206647,-1.969115],[9.158628,-3.090569,9.442295,1.176910,-2.555642,5.836636,9.006069],[-6.109739,-0.199323,1.372939,-0.102091,-9.534019,7.906757,0.015933],[-8.219880,-9.466604,-1.318779,0.270468,-4.482463,6.409024,2.785929],[6.273455,6.211140,-8.778908,1.268213,3.409963,1.856311,0.514590],[8.405294,-5.914625,-6.833323,-5.708922,-1.225692,4.960840,-7.898928],[9.152598,4.922581,0.477589,-7.960677,2.870907,2.965749,2.291454],[-0.278407,2.251697,4.920917,1.112909,-0.117945,-7.099419,4.831173],[5.925783,8.623575,3.541112,-5.034746,3.171644,5.505694,-1.491410],[9.063082,0.905286,-0.533735,-9.388444,-5.939363,6.113104,8.699360],[3.593516,8.951597,-1.439443,2.078503,-4.397947,-9.824944,-7.153781],[-3.164826,-5.613962,-0.937666,2.671688,5.838000,9.118028,8.679429]],[[-4.599094,-6.216584,6.179781,9.422120,-6.725488,-0.691424,-5.063926],[4.232033,-8.215496,9.367384,3.446469,-1.394424,-9.031826,-7.808958],[8.615256,-8.051444,-8.563218,-7.861743,5.725428,-8.974346,-2.923528],[-1.731122,5.391993,-5.508906,0.793577,0.854484,0.448095,2.501541],[5.993772,5.991042,1.532377,-2.914688,9.656236,9.962573,-8.284013],[-2.599226,-5.761514,5.145489,-7.543595,9.697459,2.435220,5.479132],[-1.299745,-5.059465,-9.820549,3.356074,-2.395583,-0.279320,-1.475085],[-0.864273,8.681391,3.197701,2.246260,2.505705,-3.333667,8.067466],[9.559329,4.984435,6.652201,2.512951,6.577250,0.739992,8.375012],[2.555375,9.989644,-2.959373,3.857052,9.075754,9.029076,-4.532292],[1.572155,1.247944,-4.233715,7.324189,8.034144,-3.694028,7.053902],[-4.783173,4.737235,-8.720476,1.242658,3.783942,-1.905144,3.392435],[6.539565,-6.497083,7.147551,-1.041193,-3.810598,3.228593,-2.902658]],[[-2.710908,5.474289,-4.621700,9.072491,6.424249,-5.536233,6.235001],[0.638233,-1.979378,-4.072615,-9.449910,-5.719083,-6.343009,-8.931420],[-8.913992,0.001677,-3.061242,7.385385,5.551462,0.535445,6.682979],[9.377063,-0.441849,5.777417,1.528465,6.245949,0.778756,-6.909850],[-2.356021,3.377093,-5.423017,-9.970706,6.036301,1.240632,-6.075689],[-4.940671,-1.151351,-5.993004,-8.065083,0.821595,6.110616,4.633668],[4.511389,-0.690239,-9.921072,-4.453762,-1.352271,5.981686,9.775383],[-8.927058,1.945919,7.243414,-0.836706,9.688537,-1.725103,8.935939],[6.230816,-0.293381,-1.935706,7.849472,6.578801,9.900595,-8.069941],[5.424827,-1.248485,2.619789,-0.913810,1.650232,-5.907459,-0.304829],[-1.005069,-6.814006,-3.311191,-1.069192,-1.028606,-2.987049,2.462210],[7.161327,-1.650969,1.595377,7.002592,9.608659,-7.725494,-1.388902],[5.106961,7.999561,-4.303422,4.382173,-6.668573,-0.870247,5.662002]]], dtype = "float64")#candidate|399|(8, 13, 7)|const|float64
bop_400 = relay.floor_divide(const_398.astype('float64'), const_399.astype('float64')) # shape=(8, 13, 7)
func_335_call = mod.get_global_var('func_335')
func_337_call = mutated_mod.get_global_var('func_337')
call_408 = relay.TupleGetItem(func_335_call(), 1)
call_409 = relay.TupleGetItem(func_337_call(), 1)
func_71_call = mod.get_global_var('func_71')
func_76_call = mutated_mod.get_global_var('func_76')
const_420 = relay.const([-4,-10,-2,9,-8,-8,-7,3,-5,-8,7,-5,-6,-7,8,-6,10,3,8,-9,7,7,-10,-6,1,8,-9,-6,6,6,3,6,2,3,-5,6,10,4,4,-4,5,2,7,-1,-3,-8,-10,8,-6,-2,5,-1,-1,-6,-6,-1,-4,-6,-1,7,5,10,10,7,-1,6,-9,1,-1,-5,7,9,9,6,2,5,9,-3,3,6,3,10,-9,1,7,-9,2,-10,3,2,-7,5,2,8,1,9,-6,-3,-9,-6,-10,3,-3,6,6,5,7,-3,9,-4,5,-2,2,5,2,8,-6,-8,1,-7,4,-2,2,-9,7,1,7,-1,1,-10,7,6,6,-4,-6,6,3,-10,-3,7,-4,-10,-2,-2,8,5,-8,1,-3,-3,-8,-10,8,5,10,-1,-10,5,-5,4,-7,-3,10,-10,-10,5,-3,6,-6,5,5,-8,9,7,-8,-9,10,1,5,6,-8,1,5,-5,10,-4,-5,2,-6,10,-9,-9,1,2,3,3,-6,-3,4,1,7,1,-10,8,9,9,8,-9,-10,-7,7,-6,-4,6,-8,-2,-4,9,-3,1,-4,9,10,1,9,5,-7,10,2,9,-7,-5,3,7,10,7,-8,-5,6,-8,-5,-2,-6,4,-10,-7,6,-8,-7,-3,2,-2,8,-7,-5,-9,10,1,-2,5,1,-9,-6,-4,-1,-2,8,-3,3,-1,7,-7,9,-4,-6,-5,8,4,2,-9,-6,7,-8,2,-10,-10,-3,5,-8,5,5,10,5,-9,1,-1,2,-5,-8,-2,2,-7,-10,6,-9,-9,-10,-10,-3,3,1,-5,2,1,-6,10,4,2,-8,-9,7,3,-1,4,4,-9,1,-5,-3,5,-1,9,2,9,-10,-9,10,-6,-5,-6,8,-3,1,-4,-6,8,-3,5,10,7,6,-9,-10,-9,7,-3,1,6,5,8,8,-1,3,-8,3,3,3,-8,-10,9,2,-4,7,-7,-9,-4,-1,8,4,-8,-3,-8,4,-9,-3,-2,10,10,-8,-10,9,4,2,5,9,-2,-6,-7,6,-7,-6,-6,6,6,10,-1,-3,-3,8,-10,1,7,4,-10,-4,1,-5,-8,2,3,1,5,8,8,5,-2,10,6,3,-6,10,-9,-4,-5,9,10,-1,-4,4,6,-8,6,6,-3,7,-10,-7,-1,3,9,4,-2,6,-8,7,-10,10,4,7,9,-9,10,-5,6,8,2,7,-1,-9,3,-2,-1,-8,-10,-4,-10,9,8,-4,-4,10,-6,-9,9,-7,5,7,2,3,-4,-5,2,6,-10,6,3,-9,4,8,-5,10,-4,8,-4,-10,-1,-3,-6,5,-9,9,1,-3,-5,10,7,2,9,-7,-2,-3,1,8,-7,5,-7,8,-2,3,-5,9,-5,3,-2,8,9,-9,-9,10,-3,2,9,8,-2,-1,5,8,1,-5,4,-9,7,3,-8,-2,8,-8,3,-10,-6,3,-1,3,-2,6,-6,-1,6,10,9,-2,-3,5,8,-4,-6,-8,-8,8,-3,-8,-1,3,4,-1,3,-1,-6,6,-4,8,7,-9,-9,7,-5,-3,5,-4,-7,-4,-8,9,-5,-8,5,-3,4,-7,10,6,-8,-2,3,4,10,-2,-6,4,6,-2,-8,3,-6,-6,4,-4,9,7,-1,-1,2,-3,6,2,9,-5,9,-10,10,-3,-6,-9,2,-6,-9,-6,-2,-1,-6,2,-5,4,-7,-10,2,1,10,-2,6], dtype = "int16")#candidate|420|(660,)|const|int16
call_419 = func_71_call(relay.reshape(const_420.astype('int16'), [15, 11, 4]), relay.reshape(const_420.astype('int16'), [15, 11, 4]), relay.reshape(const_420.astype('bool'), [15, 11, 4]), )
call_421 = func_71_call(relay.reshape(const_420.astype('int16'), [15, 11, 4]), relay.reshape(const_420.astype('int16'), [15, 11, 4]), relay.reshape(const_420.astype('bool'), [15, 11, 4]), )
bop_427 = relay.bitwise_and(const_420.astype('uint16'), const_398.astype('uint16')) # shape=(8, 13, 660)
const_430 = relay.const([2,9,-1,-9,-6,-5,-7,3,-6,10,-7,6,3,-5,4,4,9,-7,2,3,10,6,-10,-9,1,6,-2,-8,-8,6,4,-7,3,-5,-4,2,4,-1,-9,5,-10,2,3,-7,-2,2,-2,10,7,-2,-2,4,4,-4,-8,7,-10,-9,8,4,8,-7,-7,8,10,4,4,-2,5,-5,7,-2,10,1,-9,7,3,10,1,-3,-5,7,-6,2,-6,-6,-9,-1,-2,-7,9,8,10,-1,5,-3,2,-4,8,-2,10,-7,-10,8,-1,3,-10,2,-1,10,7,-8,3,9,-5,4,-3,-6,1,3,8,-2,8,-10,-6,-7,-6,-6,-7,10,8,-9,7,3,9,2,3,8,9,-4,-2,2,8,-7,-2,6,3,2,1,7,-3,-7,-4,-10,7,-8,7,-7,7,-7,-2,-1,-10,-2,8,1,10,-10,5,7,-5,10,-6,-6,-10,-2,-8,7,7,1,1,-9,-1,7,-10,-7,9,9,-6,-6,10,1,4,7,7,7,1,-1,6,8,2,10,-5,-7,-4,9,5,-1,6,-8,-8,-3,2,1,3,3,7,7,2,4,8,-9,1,-10,10,2,-5,-6,8,-5,7,8,-1,5,-10,-1,-2,1,-4,10,3,3,6,6,-7,7,-9,7,10,5,-2,-8,1,-8,4,-9,2,4,-1,2,-1,3,3,-2,-3,3,-5,10,2,-1,7,-3,3,-7,-10,-4,9,3,-7,-5,3,-6,8,-8,-5,7,10,1,1,-2,8,-4,-5,-10,-3,5,-2,-8,-8,-1,5,2,-1,-3,-2,3,-2,8,-5,2,-3,8,7,-6,-2,7,-8,-7,4,9,-4,6,1,-3,-2,6,1,1,-10,4,-7,-1,10,1,-7,-9,-5,9,1,-2,-7,8,-2,6,9,4,-1,-8,5,6,-4,-5,2,-6,-5,5,9,-10,6,3,-7,9,3,8,9,-2,-1,-3,-2,-7,9,1,-7,7,8,-7,6,-1,-5,9,-7,8,-1,-10,-10,-1,8,7,2,9,5,-5,3,-1,6,-6,-2,-10,5,-7,-6,-6,-2,-2,-8,-6,-8,-3,4,-3,4,3,2,-3,3,6,10,-8,6,7,-2,6,-2,2,2,8,5,-6,-7,7,-8,-1,-6,9,10,5,-8,1,9,8,3,9,-9,4,-3,6,-4,8,-8,2,-4,8,-2,-2,6,-4,7,-6,8,10,1,-1,-3,-6,7,-8,9,-2,7,-1,5,-4,7,-7,-10,-6,-3,9,-5,8,5,2,-2,-4,-10,5,-10,-8,-9,-2,3,1,5,3,-4,-4,7,-4,2,-1,3,-8,7,10,2,-6,-1,1,8,8,5,3,-1,4,-3,6,2,-8,3,-6,9,-7,10,6,2,-2,-7,-10,1,2,10,9,5,3,-5,-2,-1,-3,-9,-1,-5,9,-7,10,4,2,-1,7,10,3,-7,10,-4,-10,-3,3,1,10,2,4,4,-9,8,-3,6,-4,3,-2,6,-1,1,7,-5,-10,8,2,-3,-9,8,9,-1,6,6,10,-10,-1,4,-4,4,5,-1,6,-9,5,10,-3,7,-3,-9,-7,6,1,7,-9,3,-4,5,10,-6,3,-9,7,6,-10,-4,6,-4,-10,-4,3,4,-4,7,3,9,1,2,3,-7,5,-10,1,-7,7,1,1,-7,-6,-10,-10,-7,-6,-7,9,4,7,-4,-9,1,-4,-6,-10,3,9,-5,2,-8,-2,-9,-10], dtype = "int16")#candidate|430|(660,)|const|int16
bop_431 = relay.floor_mod(const_420.astype('float32'), relay.reshape(const_430.astype('float32'), relay.shape_of(const_420))) # shape=(660,)
bop_436 = relay.floor_mod(bop_427.astype('float64'), bop_431.astype('float64')) # shape=(8, 13, 660)
bop_441 = relay.multiply(bop_400.astype('float32'), const_398.astype('float32')) # shape=(8, 13, 7)
func_234_call = mod.get_global_var('func_234')
func_237_call = mutated_mod.get_global_var('func_237')
var_445 = relay.var("var_445", dtype = "float32", shape = (30,))#candidate|445|(30,)|var|float32
call_444 = relay.TupleGetItem(func_234_call(relay.reshape(var_445.astype('float32'), [6, 5])), 0)
call_446 = relay.TupleGetItem(func_237_call(relay.reshape(var_445.astype('float32'), [6, 5])), 0)
bop_453 = relay.bitwise_or(const_398.astype('int32'), const_420.astype('int32')) # shape=(8, 13, 660)
uop_456 = relay.cos(bop_400.astype('float64')) # shape=(8, 13, 7)
func_360_call = mod.get_global_var('func_360')
func_362_call = mutated_mod.get_global_var('func_362')
call_461 = func_360_call()
call_462 = func_360_call()
output = relay.Tuple([call_408,call_419,bop_436,bop_441,call_444,var_445,bop_453,uop_456,call_461,])
output2 = relay.Tuple([call_409,call_421,bop_436,bop_441,call_446,var_445,bop_453,uop_456,call_462,])
func_463 = relay.Function([var_445,], output)
mod['func_463'] = func_463
mod = relay.transform.InferType()(mod)
var_464 = relay.var("var_464", dtype = "float32", shape = (30,))#candidate|464|(30,)|var|float32
output = func_463(var_464)
func_465 = relay.Function([var_464], output)
mutated_mod['func_465'] = func_465
mutated_mod = relay.transform.InferType()(mutated_mod)
const_467 = relay.const([[2.901673,-5.024464,7.534613,-8.223181,-5.950288,0.574844,-5.463270,8.115682,5.828957,-7.569227,-4.113662],[-9.665612,-1.706664,-2.308114,2.357728,-7.643703,7.004688,1.334057,-4.198420,1.241270,-6.086475,8.508776],[6.010524,5.710189,-3.715044,5.459424,1.655260,-7.615384,1.368374,5.626276,-0.403627,3.981640,-7.020649],[-0.488151,7.550138,5.768467,2.776348,-4.115671,-8.990594,8.870202,2.874559,8.495851,-9.859927,0.550933],[8.581024,-8.059289,-1.931137,3.629187,1.654037,6.896811,2.065331,-8.759696,-4.529730,8.274581,4.778228],[6.069761,1.266564,5.507448,3.373341,6.007610,0.523484,-7.333279,-6.872850,3.968065,-9.911977,-9.233541],[5.077661,-2.261469,8.586867,-4.479054,-9.172254,9.578356,2.027244,2.826954,5.140978,4.004049,-2.092960],[4.141608,7.411276,-8.059852,5.736232,1.055876,-9.270939,-2.243661,4.854142,-1.665753,7.088475,-2.423987],[-5.747657,3.181407,-2.610199,-1.404990,-3.355144,3.113937,-4.360627,2.448060,-7.028197,3.252583,-3.693949],[-7.155600,-4.553459,7.208588,0.028366,-9.721138,1.966463,5.296156,-2.358833,4.181978,2.933270,-2.917201],[-3.732612,-7.137170,-0.624032,8.316983,8.031736,2.716300,-2.567084,0.872708,-5.919348,0.219138,5.006826],[6.631249,6.760719,3.585961,-5.462795,-5.650223,9.158885,9.101152,-5.389972,6.934716,4.286713,-9.601232],[5.625290,8.925162,4.424586,-0.702683,5.796496,8.808402,-0.994447,-4.817234,-6.063286,2.746288,3.458227]], dtype = "float32")#candidate|467|(13, 11)|const|float32
uop_468 = relay.log10(const_467.astype('float32')) # shape=(13, 11)
bop_470 = relay.logical_or(uop_468.astype('bool'), relay.reshape(const_467.astype('bool'), relay.shape_of(uop_468))) # shape=(13, 11)
func_214_call = mod.get_global_var('func_214')
func_219_call = mutated_mod.get_global_var('func_219')
var_474 = relay.var("var_474", dtype = "float32", shape = (896, 4))#candidate|474|(896, 4)|var|float32
call_473 = relay.TupleGetItem(func_214_call(relay.reshape(var_474.astype('float32'), [14, 16, 16]), relay.reshape(var_474.astype('float32'), [14, 16, 16]), relay.reshape(var_474.astype('bool'), [14, 16, 16]), ), 8)
call_475 = relay.TupleGetItem(func_219_call(relay.reshape(var_474.astype('float32'), [14, 16, 16]), relay.reshape(var_474.astype('float32'), [14, 16, 16]), relay.reshape(var_474.astype('bool'), [14, 16, 16]), ), 8)
var_478 = relay.var("var_478", dtype = "float32", shape = (13, 11))#candidate|478|(13, 11)|var|float32
bop_479 = relay.floor_divide(const_467.astype('float64'), relay.reshape(var_478.astype('float64'), relay.shape_of(const_467))) # shape=(13, 11)
bop_482 = relay.floor_mod(uop_468.astype('float64'), relay.reshape(bop_470.astype('float64'), relay.shape_of(uop_468))) # shape=(13, 11)
bop_485 = relay.greater_equal(uop_468.astype('bool'), relay.reshape(bop_479.astype('bool'), relay.shape_of(uop_468))) # shape=(13, 11)
bop_489 = relay.subtract(bop_470.astype('float64'), relay.reshape(bop_485.astype('float64'), relay.shape_of(bop_470))) # shape=(13, 11)
uop_498 = relay.log(bop_479.astype('float32')) # shape=(13, 11)
output = relay.Tuple([call_473,var_474,bop_482,bop_489,uop_498,])
output2 = relay.Tuple([call_475,var_474,bop_482,bop_489,uop_498,])
func_504 = relay.Function([var_474,var_478,], output)
mod['func_504'] = func_504
mod = relay.transform.InferType()(mod)
var_505 = relay.var("var_505", dtype = "float32", shape = (896, 4))#candidate|505|(896, 4)|var|float32
var_506 = relay.var("var_506", dtype = "float32", shape = (13, 11))#candidate|506|(13, 11)|var|float32
output = func_504(var_505,var_506,)
func_507 = relay.Function([var_505,var_506,], output)
mutated_mod['func_507'] = func_507
mutated_mod = relay.transform.InferType()(mutated_mod)
var_514 = relay.var("var_514", dtype = "float64", shape = (4, 8, 6))#candidate|514|(4, 8, 6)|var|float64
uop_515 = relay.log10(var_514.astype('float64')) # shape=(4, 8, 6)
uop_517 = relay.acos(uop_515.astype('float64')) # shape=(4, 8, 6)
func_234_call = mod.get_global_var('func_234')
func_237_call = mutated_mod.get_global_var('func_237')
var_527 = relay.var("var_527", dtype = "float32", shape = (30,))#candidate|527|(30,)|var|float32
call_526 = relay.TupleGetItem(func_234_call(relay.reshape(var_527.astype('float32'), [6, 5])), 0)
call_528 = relay.TupleGetItem(func_237_call(relay.reshape(var_527.astype('float32'), [6, 5])), 0)
output = relay.Tuple([uop_517,call_526,var_527,])
output2 = relay.Tuple([uop_517,call_528,var_527,])
func_529 = relay.Function([var_514,var_527,], output)
mod['func_529'] = func_529
mod = relay.transform.InferType()(mod)
var_530 = relay.var("var_530", dtype = "float64", shape = (4, 8, 6))#candidate|530|(4, 8, 6)|var|float64
var_531 = relay.var("var_531", dtype = "float32", shape = (30,))#candidate|531|(30,)|var|float32
output = func_529(var_530,var_531,)
func_532 = relay.Function([var_530,var_531,], output)
mutated_mod['func_532'] = func_532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_335_call = mod.get_global_var('func_335')
func_337_call = mutated_mod.get_global_var('func_337')
call_549 = relay.TupleGetItem(func_335_call(), 0)
call_550 = relay.TupleGetItem(func_337_call(), 0)
uop_551 = relay.cos(call_549.astype('float32')) # shape=(9, 10, 13)
uop_553 = relay.cos(call_550.astype('float32')) # shape=(9, 10, 13)
bop_558 = relay.logical_and(uop_551.astype('bool'), relay.reshape(call_549.astype('bool'), relay.shape_of(uop_551))) # shape=(9, 10, 13)
bop_561 = relay.logical_and(uop_553.astype('bool'), relay.reshape(call_550.astype('bool'), relay.shape_of(uop_553))) # shape=(9, 10, 13)
bop_566 = relay.maximum(bop_558.astype('float32'), relay.reshape(uop_551.astype('float32'), relay.shape_of(bop_558))) # shape=(9, 10, 13)
bop_569 = relay.maximum(bop_561.astype('float32'), relay.reshape(uop_553.astype('float32'), relay.shape_of(bop_561))) # shape=(9, 10, 13)
bop_572 = relay.power(uop_551.astype('float32'), relay.reshape(call_549.astype('float32'), relay.shape_of(uop_551))) # shape=(9, 10, 13)
bop_575 = relay.power(uop_553.astype('float32'), relay.reshape(call_550.astype('float32'), relay.shape_of(uop_553))) # shape=(9, 10, 13)
bop_582 = relay.equal(bop_558.astype('bool'), relay.reshape(bop_572.astype('bool'), relay.shape_of(bop_558))) # shape=(9, 10, 13)
bop_585 = relay.equal(bop_561.astype('bool'), relay.reshape(bop_575.astype('bool'), relay.shape_of(bop_561))) # shape=(9, 10, 13)
uop_586 = relay.log(bop_566.astype('float32')) # shape=(9, 10, 13)
uop_588 = relay.log(bop_569.astype('float32')) # shape=(9, 10, 13)
uop_594 = relay.exp(uop_586.astype('float64')) # shape=(9, 10, 13)
uop_596 = relay.exp(uop_588.astype('float64')) # shape=(9, 10, 13)
output = relay.Tuple([bop_582,uop_594,])
output2 = relay.Tuple([bop_585,uop_596,])
func_600 = relay.Function([], output)
mod['func_600'] = func_600
mod = relay.transform.InferType()(mod)
output = func_600()
func_601 = relay.Function([], output)
mutated_mod['func_601'] = func_601
mutated_mod = relay.transform.InferType()(mutated_mod)
var_630 = relay.var("var_630", dtype = "int16", shape = ())#candidate|630|()|var|int16
var_631 = relay.var("var_631", dtype = "int16", shape = (3, 5))#candidate|631|(3, 5)|var|int16
bop_632 = relay.greater(var_630.astype('bool'), var_631.astype('bool')) # shape=(3, 5)
output = relay.Tuple([bop_632,])
output2 = relay.Tuple([bop_632,])
func_636 = relay.Function([var_630,var_631,], output)
mod['func_636'] = func_636
mod = relay.transform.InferType()(mod)
mutated_mod['func_636'] = func_636
mutated_mod = relay.transform.InferType()(mutated_mod)
func_636_call = mutated_mod.get_global_var('func_636')
var_638 = relay.var("var_638", dtype = "int16", shape = ())#candidate|638|()|var|int16
var_639 = relay.var("var_639", dtype = "int16", shape = (3, 5))#candidate|639|(3, 5)|var|int16
call_637 = func_636_call(var_638,var_639,)
output = call_637
func_640 = relay.Function([var_638,var_639,], output)
mutated_mod['func_640'] = func_640
mutated_mod = relay.transform.InferType()(mutated_mod)
const_648 = relay.const([[[-4.279255,7.216092,7.852619,-6.715237,-5.742779,-1.032585,1.274621,-9.798384,-9.227646,3.448464,-6.426639,-4.416850,-7.970394,-5.540922,6.002509],[-7.854348,0.138272,8.302893,-6.803109,-1.073241,-3.374635,6.475200,-9.359680,-7.908341,1.702540,-3.846744,0.678580,-7.023109,-4.008392,-7.063241],[-4.759033,2.069695,-7.088721,-6.816655,-5.962418,2.212477,2.183123,-1.821338,-7.985401,-9.625236,-4.282774,7.766216,2.876843,-8.482879,-8.809423],[4.344943,1.990985,-8.160609,8.572294,-6.776949,-0.225736,2.315789,-2.621175,3.197431,-4.937054,-0.951732,-7.527677,6.011007,7.856480,0.616092],[-3.460083,-6.308498,8.987650,7.707444,-1.518859,-3.323756,4.820950,-6.535247,6.274484,-8.499895,-1.655589,-1.335358,8.315261,-8.486198,3.707543],[-7.638672,0.718313,9.694549,-7.283568,3.179090,-9.194764,1.636476,2.305474,5.039713,9.387363,0.787046,7.687431,-5.228784,4.268888,0.795731],[-7.240302,-3.019834,6.577665,-0.617482,-6.055639,-8.437706,6.967813,-8.902966,9.178796,8.288632,6.445858,-1.996637,-9.019140,9.671072,-0.017905],[8.043178,9.687014,-1.583957,2.603296,-9.359669,-4.835671,9.998319,-0.302610,5.499367,2.769114,-2.672889,9.006143,5.713402,4.392637,2.983639],[-4.583971,-5.789521,-9.168359,-1.613886,7.010462,0.951583,9.132133,5.444754,-3.499178,4.860486,1.755497,-5.292493,4.335348,-0.425846,6.609990],[-1.926314,-7.728054,7.878007,4.775775,8.371200,-1.535415,-6.626055,9.453412,3.953966,-8.472007,0.375776,-7.167727,-1.964704,-3.098456,-8.000597],[-4.441477,8.673275,2.158716,2.862805,-8.371023,2.559184,7.517484,-3.290426,5.687647,-6.502842,-1.047172,1.200546,-4.171809,-3.141334,-8.168709],[-7.311895,2.741737,-2.924845,-5.140782,9.341620,-0.617216,3.188024,6.847262,-8.497077,4.675292,-4.003083,-2.651414,-3.367358,-3.304872,2.474399],[3.357361,4.801574,5.221244,9.951893,-1.481392,-0.164564,2.387568,-2.044934,3.392454,3.971351,-5.703862,3.108591,5.502793,4.465777,-8.278382]],[[-8.093765,-2.362999,5.331052,6.371593,7.651549,6.268634,-6.658521,6.423520,2.934903,2.327086,0.909580,8.320015,9.956043,-5.713742,-6.040846],[1.644392,-0.931930,-1.531048,-0.684701,-4.604203,6.790448,1.783272,-0.123795,5.778746,-0.455370,-4.481297,-3.761934,-6.278705,-2.953760,-7.036152],[1.326136,4.297888,3.877661,5.840997,-9.565139,6.006541,-0.307700,7.868666,1.835059,-1.079764,-3.775499,6.493553,-6.087819,-8.512393,-7.834118],[1.048677,-5.150605,3.019834,5.197049,6.669185,-2.103172,9.731637,-2.749375,3.824037,9.631002,9.927733,-8.981028,-4.976165,-5.166790,3.984852],[9.897643,-0.809752,6.405915,2.186837,9.522453,-9.062674,2.027591,-3.261898,5.855621,5.544871,6.977453,-5.344410,4.575743,4.483945,5.150164],[-0.999525,1.845476,-4.532660,-4.338445,0.099265,5.785335,9.871267,-5.522200,-3.625332,7.197571,-9.791307,-6.387331,-0.800118,-7.325358,0.507102],[-7.211941,-3.282224,-9.274239,6.137804,8.071943,-9.572942,-9.503991,0.560935,8.545074,-3.799089,-0.794688,-1.707592,1.822371,-0.947672,-7.973478],[0.401767,-8.797271,-6.503602,5.064982,2.209444,0.844999,4.554753,-4.375704,-4.083740,-3.379152,-2.369696,3.549468,9.223361,-2.009588,-5.083768],[3.332244,1.893918,-9.142821,-5.014308,2.814981,-0.559444,-5.940571,1.950516,-7.325018,-4.069682,-0.763436,4.172367,8.816024,0.095889,4.420278],[-6.864117,6.515972,-2.521137,-6.928537,7.057734,-6.313935,-4.351793,7.748004,5.994966,6.415801,-4.509465,5.743727,9.052807,-6.196086,-7.703640],[9.513007,-6.860392,-9.324157,-9.767036,-3.168618,7.929995,1.600755,1.036660,7.660235,-4.602522,-1.719935,-7.808934,1.609598,6.379177,-3.616328],[7.714819,-3.428868,6.152055,-6.110631,3.323098,4.022642,1.396344,-3.149065,-1.296650,-6.198003,-9.962184,8.975031,-7.519431,6.177885,6.517146],[0.304551,0.838242,-7.497503,-7.723964,-2.574469,0.372064,-1.142051,-4.439465,4.280211,-7.559956,0.951582,4.226594,-7.483842,1.689388,8.315489]],[[6.097244,5.006803,-9.615621,0.378452,-9.144469,5.860341,-4.255180,3.367706,-7.256113,7.935681,-8.902298,-1.236105,1.428426,3.835107,-5.645734],[9.220344,1.478691,-3.591871,8.934469,-6.433228,2.393342,7.968570,-2.979176,-0.284842,-9.484155,2.483324,-5.147809,-3.778203,-8.965093,5.342592],[-2.672386,7.327936,1.308989,4.638478,0.921106,7.811223,9.889787,-4.953577,2.399667,4.986953,-0.524840,-2.526880,-8.125617,0.931211,-8.600515],[0.562327,6.617537,-9.772590,-0.200289,1.987597,8.852123,-1.702714,-3.033790,-1.554895,0.177423,3.851463,0.065942,-6.994149,-9.470676,-9.025968],[-5.777717,2.515855,-1.224584,1.519123,7.659020,1.974339,5.710164,-5.085660,-0.957035,0.646040,-9.412328,-8.992829,-0.924332,0.750421,-6.157192],[6.378617,3.583341,-0.752242,-4.815411,-3.936622,0.137258,-4.281273,2.200104,-1.320819,-2.048005,6.144924,-8.048212,-7.184637,-4.172818,8.912372],[6.844931,-1.085582,5.321112,2.142907,-5.572118,1.486970,6.975269,-5.632067,-3.230368,-9.895100,-0.531561,2.178579,0.147314,6.795910,3.892053],[-9.250951,0.231949,1.808022,-9.747039,-9.667065,-0.429089,-2.942147,2.225334,-8.348813,1.975851,-4.005592,-4.264338,-4.341326,4.908601,-6.625693],[-6.843290,-3.324863,6.852588,-1.004898,-2.079743,-9.585020,-5.431851,-7.077267,1.292563,-2.115205,6.086456,-2.249164,-0.286353,-9.068865,-5.955293],[9.115987,7.684881,-1.687829,4.741716,-5.005170,3.156522,6.781361,0.683195,7.723316,-7.275727,0.555302,1.418569,-6.355539,-2.380014,4.005790],[8.071109,7.342347,-2.709344,1.530262,-7.597025,1.313467,-6.464083,-8.401805,-1.509833,-7.075251,6.052884,8.122453,8.252288,-6.769122,-3.484037],[-7.827160,-0.038552,-9.869540,6.303134,6.788634,-0.513950,9.937464,3.281398,-8.374130,8.768963,-4.804897,3.392518,2.557796,2.620622,-8.237103],[-7.790964,8.781951,0.359770,3.383017,7.485981,-4.545561,-5.870265,-1.279695,8.966268,8.674932,7.008423,9.281426,3.230748,7.188689,5.396823]],[[-1.798149,-6.801551,-3.812913,-4.894139,-5.958265,-6.537222,1.126947,-8.566939,-6.368939,-5.467795,9.887916,-9.928950,-9.960330,4.275524,-4.240785],[-7.278564,-0.834008,5.621179,-9.147151,4.356927,8.098418,4.146537,-3.197905,8.552110,-4.811124,-0.825177,3.421526,-7.269348,8.072152,-7.339962],[-3.025304,-3.061211,0.099846,-3.733874,5.336961,3.924158,2.310359,3.443893,-4.495645,8.157127,4.207382,-5.545464,-9.700834,-4.531968,1.617580],[8.950987,6.312579,-2.519509,3.216210,-1.339239,-9.520606,-2.368636,8.050949,0.607269,-7.524392,-5.665866,4.621335,-9.270009,1.885835,9.754115],[9.826797,8.876066,-0.014905,-2.452095,-6.108505,7.920523,-3.069049,-7.254408,0.943625,8.765476,-1.883263,8.483631,3.678090,7.099388,7.864374],[6.615895,-6.876539,1.375128,-6.904994,-3.404209,8.258865,-1.790966,3.011517,2.683956,-8.247567,-2.836798,-9.279525,-2.107332,-4.343375,-1.588261],[-0.978977,-9.703779,-5.868498,-1.245661,6.622133,0.192139,-9.929312,-2.339834,5.762799,-3.438032,2.747036,-8.188245,3.660828,8.776378,6.672455],[8.703053,2.784467,-3.552020,9.859679,-2.378900,8.773350,5.494186,4.747036,-2.119175,1.491708,1.386437,0.463340,-8.848418,-2.680340,-1.888283],[-0.997581,-6.126460,-2.934183,1.943747,5.593308,-1.036240,-7.620051,-7.180351,-8.587384,-7.526938,3.918254,-6.492204,8.857950,7.165170,-3.537061],[2.487478,6.911960,-0.815991,-9.756359,-1.688301,5.833085,6.966109,-9.133401,-3.262724,-0.695834,3.627808,-9.378859,-8.855004,-2.604902,1.913960],[-0.998555,4.240205,-4.444088,5.329255,-0.780007,-2.715979,-1.014357,7.079719,7.140017,1.066377,-1.934329,-8.659296,-5.674364,-2.273026,-0.820372],[1.846273,9.342708,7.290414,-3.278292,-1.371217,-6.949170,7.879297,-2.278086,6.321653,-0.746685,8.719141,9.611345,6.233321,4.921019,4.712263],[1.858827,-4.836117,8.747191,1.000446,-2.044668,-7.927729,-1.782830,1.926561,-1.721197,3.998833,-1.385429,1.337428,-6.079777,1.325969,1.742832]],[[9.740919,-5.338543,9.331121,8.665760,2.357494,-7.074136,-8.423757,7.009311,-9.459721,1.845855,-2.514626,-3.287199,2.315487,-5.164518,-9.576548],[1.256826,4.069901,2.636569,-4.064200,3.838281,-0.560458,8.136507,-4.467109,7.811658,7.394492,-0.447431,-4.820141,8.400589,6.295554,-5.126092],[4.715705,-5.197331,6.069510,8.371925,-7.352020,-9.637386,2.724024,-9.192604,-7.572358,-2.373653,-2.821821,-8.818957,9.682960,-0.781191,7.180806],[3.703736,0.799365,8.528433,2.327344,-3.619679,1.516718,9.765998,-1.766338,0.881294,9.563767,-8.902056,-5.461621,-5.847730,0.880381,9.543112],[2.396185,6.939637,-8.903790,-3.213581,-0.171130,3.246200,1.357845,-0.689298,-4.390496,-9.422315,5.195400,1.559416,5.839407,9.650640,0.199172],[-2.971797,9.882102,1.170213,-9.661761,-0.546838,-2.041733,6.040125,-5.468773,5.884805,3.596736,-7.500036,9.523049,-0.546910,8.503639,1.450777],[-7.180386,7.807634,6.279045,5.193375,-3.787694,-3.189224,-8.320078,-6.960893,7.578081,1.784730,-5.504585,9.925064,-7.740891,-4.292383,-3.368017],[-7.552619,3.802149,-2.888401,-5.662258,1.800649,5.716511,8.508377,2.135907,-6.477141,7.303860,7.367840,5.709189,5.662445,-2.705148,0.421536],[2.539915,-8.859438,-4.807520,-5.734455,-0.065035,9.485616,8.244924,1.696201,3.809073,-0.973465,-3.649168,-2.889621,-7.485376,9.170777,0.538010],[0.778526,-0.776052,-9.472203,7.922081,4.968672,-4.218776,2.017707,0.853050,-2.326337,8.959881,1.110964,-8.040464,2.984138,-7.288421,4.326472],[-4.919870,-2.245746,-5.906490,7.854690,9.881959,-2.236499,7.676988,-3.795686,-1.722480,1.755829,9.976835,5.558971,-0.495285,-4.088975,1.130393],[5.029768,2.867586,-5.467862,-7.711679,3.112905,-1.326949,9.967826,9.036954,-4.166798,-8.477101,5.309551,2.237271,4.887448,-5.975135,-2.097855],[8.744857,4.087694,8.305044,7.807795,9.965100,-3.726447,-5.044888,8.726348,3.685033,4.694131,-0.887364,3.438597,-9.299048,2.656762,-7.006417]]], dtype = "float64")#candidate|648|(5, 13, 15)|const|float64
var_649 = relay.var("var_649", dtype = "float64", shape = (5, 13, 15))#candidate|649|(5, 13, 15)|var|float64
bop_650 = relay.greater_equal(const_648.astype('bool'), relay.reshape(var_649.astype('bool'), relay.shape_of(const_648))) # shape=(5, 13, 15)
output = bop_650
output2 = bop_650
func_662 = relay.Function([var_649,], output)
mod['func_662'] = func_662
mod = relay.transform.InferType()(mod)
var_663 = relay.var("var_663", dtype = "float64", shape = (5, 13, 15))#candidate|663|(5, 13, 15)|var|float64
output = func_662(var_663)
func_664 = relay.Function([var_663], output)
mutated_mod['func_664'] = func_664
mutated_mod = relay.transform.InferType()(mutated_mod)
const_747 = relay.const([[[7.238610,-5.421308]],[[-5.659329,-4.400271]],[[-9.485342,0.040203]],[[9.056633,-0.123371]],[[-9.198105,9.126824]],[[-4.748606,1.183035]],[[-8.018890,8.986418]],[[-6.748540,-5.253949]],[[-3.546096,-9.302700]],[[-4.975805,7.681106]],[[1.068601,5.735614]],[[-9.294643,5.075967]]], dtype = "float64")#candidate|747|(12, 1, 2)|const|float64
const_748 = relay.const([[[4.792218,-6.374800],[5.298082,-2.756368],[0.446349,-3.820508],[9.018314,-1.119015],[8.413362,3.661516],[-1.207234,5.151712],[-0.168609,6.645205],[7.279511,2.993553],[3.011847,-5.961771],[1.552523,-6.094914],[9.915192,3.985396],[8.730130,-4.112350],[5.007014,1.702362]],[[5.791425,5.984043],[-6.636843,4.013850],[9.952559,-8.215484],[-6.926213,4.619580],[4.528480,-1.727430],[-7.344635,8.620553],[4.968546,-7.347949],[9.555721,-2.936550],[-4.589636,-0.846525],[-2.568650,-4.430232],[-7.805595,-8.457642],[5.537125,7.114885],[1.243208,-5.729063]],[[4.995416,8.832368],[2.030421,5.691429],[-2.388810,3.230508],[9.430153,1.648151],[5.223039,3.014925],[-7.842385,5.655762],[-6.587127,-7.005709],[-5.188185,8.551838],[-7.170842,4.101883],[2.277229,5.325126],[-2.351101,-8.111643],[-3.388466,-2.356943],[-5.846517,-5.595816]],[[4.831028,-6.052863],[-9.524436,-1.754268],[4.120023,-2.105535],[-6.469251,-4.116800],[-1.241428,3.539353],[-7.655198,0.752870],[1.922708,8.818538],[2.006672,-9.520215],[6.840062,-8.536738],[8.586990,-6.569035],[1.996425,4.976286],[-5.329136,8.003029],[0.374127,-7.972034]],[[-6.647543,-9.768142],[8.491770,8.909167],[4.032037,7.734119],[7.340628,-2.348084],[-9.520076,7.694690],[6.908328,-0.632532],[-5.751287,6.653053],[-1.624281,-3.174156],[5.369096,9.780853],[-0.021771,7.014542],[-9.499539,-1.109405],[8.417084,7.488907],[5.261159,3.366908]],[[3.809435,4.026991],[5.673808,9.954985],[-9.637807,-0.886443],[-8.712862,-0.512637],[4.488106,3.745122],[-9.368709,1.376883],[-0.948677,-4.408527],[8.184957,4.845227],[0.106777,2.807484],[9.040586,-4.834628],[-1.947875,0.191106],[-0.194641,6.767756],[7.198276,-8.793298]],[[-4.400603,4.520600],[-7.639882,-9.395499],[9.188105,-9.882632],[-3.169656,9.134148],[-0.614449,8.433433],[3.619048,9.680322],[-7.363924,9.971061],[4.533886,-5.743746],[6.650406,5.399445],[8.042561,4.992160],[1.589951,6.680365],[5.904944,4.636175],[-6.343055,-4.080626]],[[0.299265,-0.638438],[-4.906940,3.349676],[9.146440,6.169861],[-1.350466,-6.757350],[2.899779,-4.265699],[9.697850,-9.447905],[1.553018,-1.756323],[4.355522,9.373356],[-1.222113,-3.492495],[6.800309,9.377071],[7.424931,2.733723],[8.733005,4.895431],[4.208279,9.867753]],[[6.213379,-7.589479],[2.219190,2.693180],[9.481447,2.864361],[-4.482829,7.876798],[2.907683,-6.193509],[5.782842,-7.273973],[3.657016,0.233671],[-6.435090,3.716424],[7.140107,-4.361085],[-7.514248,3.582192],[-5.422428,8.060658],[-3.997998,-6.013185],[6.781176,6.778623]],[[-3.662659,6.039550],[9.087683,-2.894560],[4.145243,-9.449615],[2.631341,9.563680],[-9.723094,-8.336245],[7.390816,7.110502],[-2.074058,-4.026953],[-4.233538,-4.378337],[4.096758,-9.326970],[1.914456,-5.106840],[-9.592392,1.208692],[6.740113,9.313232],[1.931982,-5.500458]],[[1.573145,-6.180679],[2.384953,-8.940830],[-8.271900,-6.325553],[-1.445430,4.034015],[-1.955258,8.350367],[-4.361389,-6.827897],[5.063810,1.920936],[1.240470,-6.548543],[0.458599,-4.992275],[2.454147,-0.488241],[-1.777980,2.411323],[4.765590,-9.749489],[1.938028,-6.480302]],[[-2.219709,3.360578],[-4.225713,-1.670958],[0.889854,-6.628200],[2.863830,9.222337],[5.374876,7.840243],[0.633853,9.535652],[1.914327,-3.197358],[5.535450,-7.883911],[0.192134,5.586012],[-5.160427,-1.876652],[-1.951681,-9.729073],[5.655897,-8.265475],[5.693366,-0.942647]]], dtype = "float64")#candidate|748|(12, 13, 2)|const|float64
bop_749 = relay.mod(const_747.astype('float64'), const_748.astype('float64')) # shape=(12, 13, 2)
output = bop_749
output2 = bop_749
func_752 = relay.Function([], output)
mod['func_752'] = func_752
mod = relay.transform.InferType()(mod)
mutated_mod['func_752'] = func_752
mutated_mod = relay.transform.InferType()(mutated_mod)
func_752_call = mutated_mod.get_global_var('func_752')
call_753 = func_752_call()
output = call_753
func_754 = relay.Function([], output)
mutated_mod['func_754'] = func_754
mutated_mod = relay.transform.InferType()(mutated_mod)
var_758 = relay.var("var_758", dtype = "float32", shape = ())#candidate|758|()|var|float32
const_759 = relay.const([[[8.870692,5.357740,5.836628,-7.602436,-8.588583],[3.642897,5.084008,4.702915,-9.808434,6.894534],[-9.765085,-7.473427,8.176853,7.868217,-2.590016],[-8.910756,-2.199280,5.810417,-9.261213,0.130073],[1.950675,5.806679,-0.347960,-6.239509,9.767614],[2.383149,8.082745,0.866728,-9.883706,9.970657]],[[5.371880,-6.190793,-1.250238,-0.351395,7.144067],[4.521335,-9.081071,9.063872,8.159257,9.942129],[9.459181,9.678706,0.203765,3.461650,5.259358],[-9.248921,-3.665101,-1.542596,-7.592326,8.729984],[-6.594630,2.334436,6.402390,7.502783,-5.039351],[-5.650434,7.956553,0.213000,-2.686100,-1.911895]],[[0.738743,4.676023,5.975763,-8.878458,-9.672850],[9.038141,7.562650,1.801972,7.825637,8.926558],[5.884127,6.828627,8.543151,7.822983,2.356064],[5.673003,3.364655,-4.830407,6.519807,-2.922597],[-6.054896,-3.439749,-0.872196,5.635135,9.970892],[-9.785864,-8.858782,8.110502,-1.322429,6.366135]],[[0.401128,-3.680908,4.718645,6.737378,-4.944558],[-3.911033,-1.208626,-1.162095,-7.555245,-8.822732],[-6.668343,3.082852,8.295049,2.985230,6.022713],[6.146549,6.827334,5.626039,6.049238,2.611924],[8.114402,-8.816025,3.081307,-1.014008,-7.592434],[4.030140,1.868731,9.170275,1.988525,-7.027461]],[[-6.172135,2.198718,-5.122334,-6.201216,-9.298884],[3.025611,-4.269200,9.820504,-8.158606,4.518203],[-1.429153,5.515827,2.995104,-7.732513,1.993805],[-2.764994,9.995264,-5.969299,-7.296860,4.574328],[-1.332721,-5.456560,-5.911604,-3.304774,-9.509602],[-0.361962,-3.771072,-4.340411,-0.517584,9.314695]]], dtype = "float32")#candidate|759|(5, 6, 5)|const|float32
bop_760 = relay.power(var_758.astype('float32'), const_759.astype('float32')) # shape=(5, 6, 5)
func_71_call = mod.get_global_var('func_71')
func_76_call = mutated_mod.get_global_var('func_76')
var_778 = relay.var("var_778", dtype = "int16", shape = (330, 2))#candidate|778|(330, 2)|var|int16
call_777 = func_71_call(relay.reshape(var_778.astype('int16'), [15, 11, 4]), relay.reshape(var_778.astype('int16'), [15, 11, 4]), relay.reshape(var_778.astype('bool'), [15, 11, 4]), )
call_779 = func_71_call(relay.reshape(var_778.astype('int16'), [15, 11, 4]), relay.reshape(var_778.astype('int16'), [15, 11, 4]), relay.reshape(var_778.astype('bool'), [15, 11, 4]), )
output = relay.Tuple([bop_760,call_777,var_778,])
output2 = relay.Tuple([bop_760,call_779,var_778,])
func_782 = relay.Function([var_758,var_778,], output)
mod['func_782'] = func_782
mod = relay.transform.InferType()(mod)
mutated_mod['func_782'] = func_782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_782_call = mutated_mod.get_global_var('func_782')
var_784 = relay.var("var_784", dtype = "float32", shape = ())#candidate|784|()|var|float32
var_785 = relay.var("var_785", dtype = "int16", shape = (330, 2))#candidate|785|(330, 2)|var|int16
call_783 = func_782_call(var_784,var_785,)
output = call_783
func_786 = relay.Function([var_784,var_785,], output)
mutated_mod['func_786'] = func_786
mutated_mod = relay.transform.InferType()(mutated_mod)
var_796 = relay.var("var_796", dtype = "bool", shape = (9, 3))#candidate|796|(9, 3)|var|bool
var_797 = relay.var("var_797", dtype = "bool", shape = (9, 3))#candidate|797|(9, 3)|var|bool
bop_798 = relay.logical_and(var_796.astype('bool'), relay.reshape(var_797.astype('bool'), relay.shape_of(var_796))) # shape=(9, 3)
output = relay.Tuple([bop_798,])
output2 = relay.Tuple([bop_798,])
func_803 = relay.Function([var_796,var_797,], output)
mod['func_803'] = func_803
mod = relay.transform.InferType()(mod)
mutated_mod['func_803'] = func_803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_803_call = mutated_mod.get_global_var('func_803')
var_805 = relay.var("var_805", dtype = "bool", shape = (9, 3))#candidate|805|(9, 3)|var|bool
var_806 = relay.var("var_806", dtype = "bool", shape = (9, 3))#candidate|806|(9, 3)|var|bool
call_804 = func_803_call(var_805,var_806,)
output = call_804
func_807 = relay.Function([var_805,var_806,], output)
mutated_mod['func_807'] = func_807
mutated_mod = relay.transform.InferType()(mutated_mod)
func_381_call = mod.get_global_var('func_381')
func_382_call = mutated_mod.get_global_var('func_382')
call_820 = func_381_call()
call_821 = func_381_call()
var_848 = relay.var("var_848", dtype = "uint32", shape = (9, 10, 13))#candidate|848|(9, 10, 13)|var|uint32
bop_849 = relay.bitwise_xor(call_820.astype('uint8'), relay.reshape(var_848.astype('uint8'), relay.shape_of(call_820))) # shape=(9, 10, 13)
bop_852 = relay.bitwise_xor(call_821.astype('uint8'), relay.reshape(var_848.astype('uint8'), relay.shape_of(call_821))) # shape=(9, 10, 13)
var_855 = relay.var("var_855", dtype = "uint8", shape = (9, 10, 13))#candidate|855|(9, 10, 13)|var|uint8
bop_856 = relay.less(bop_849.astype('bool'), relay.reshape(var_855.astype('bool'), relay.shape_of(bop_849))) # shape=(9, 10, 13)
bop_859 = relay.less(bop_852.astype('bool'), relay.reshape(var_855.astype('bool'), relay.shape_of(bop_852))) # shape=(9, 10, 13)
output = bop_856
output2 = bop_859
func_860 = relay.Function([var_848,var_855,], output)
mod['func_860'] = func_860
mod = relay.transform.InferType()(mod)
mutated_mod['func_860'] = func_860
mutated_mod = relay.transform.InferType()(mutated_mod)
func_860_call = mutated_mod.get_global_var('func_860')
var_862 = relay.var("var_862", dtype = "uint32", shape = (9, 10, 13))#candidate|862|(9, 10, 13)|var|uint32
var_863 = relay.var("var_863", dtype = "uint8", shape = (9, 10, 13))#candidate|863|(9, 10, 13)|var|uint8
call_861 = func_860_call(var_862,var_863,)
output = call_861
func_864 = relay.Function([var_862,var_863,], output)
mutated_mod['func_864'] = func_864
mutated_mod = relay.transform.InferType()(mutated_mod)
var_880 = relay.var("var_880", dtype = "float64", shape = (12, 4))#candidate|880|(12, 4)|var|float64
uop_881 = relay.sin(var_880.astype('float64')) # shape=(12, 4)
uop_883 = relay.cosh(uop_881.astype('float32')) # shape=(12, 4)
output = relay.Tuple([uop_883,])
output2 = relay.Tuple([uop_883,])
func_885 = relay.Function([var_880,], output)
mod['func_885'] = func_885
mod = relay.transform.InferType()(mod)
var_886 = relay.var("var_886", dtype = "float64", shape = (12, 4))#candidate|886|(12, 4)|var|float64
output = func_885(var_886)
func_887 = relay.Function([var_886], output)
mutated_mod['func_887'] = func_887
mutated_mod = relay.transform.InferType()(mutated_mod)
var_905 = relay.var("var_905", dtype = "float32", shape = (5,))#candidate|905|(5,)|var|float32
uop_906 = relay.tan(var_905.astype('float32')) # shape=(5,)
func_860_call = mod.get_global_var('func_860')
func_864_call = mutated_mod.get_global_var('func_864')
const_909 = relay.const([7,3,-3,8,1,-3,3,6,9,10,9,1,5,-3,-9,-3,-10,-6,5,4,7,10,9,-5,-6,-8,-10,-2,1,2,-4,6,-3,-9,-6,4,-2,5,-10,2,7,1,-1,2,8,9,1,8,-8,2,-9,1,-1,-7,-9,5,8,-5,8,-8,3,2,3,-10,6,8,10,-1,8,-2,-4,6,4,1,-1,10,-8,-8,2,-3,1,8,-3,-2,4,7,-10,1,4,-6,3,-9,-2,-2,-8,-5,-8,-2,-9,-1,10,-2,-3,-6,7,4,-2,8,1,-8,-5,-9,5,2,-6,8,1,8,-7,2,8,3,-8,-2,1,9,-3,6,10,2,3,5,4,-9,-8,4,-5,-4,7,6,-5,1,5,-6,7,2,1,-5,1,-5,-3,4,5,-2,5,-10,3,8,1,3,-3,-10,-2,-9,-7,1,5,-9,-5,-5,-7,3,-6,-9,7,9,-7,-4,3,4,-8,-1,2,3,1,10,-3,-9,5,8,-10,-6,7,7,-5,-2,-6,8,-5,7,-1,5,1,-2,3,-2,8,-9,-8,-5,-9,-6,1,3,6,-1,9,8,-9,-8,-4,-5,-6,9,5,7,-2,9,8,9,-3,1,-8,2,3,2,-10,-10,-3,4,-3,-10,-5,-8,10,-9,2,7,-10,9,-10,-1,-8,-1,-1,9,-6,-9,-7,-6,-6,1,6,10,-8,-1,10,1,4,10,-6,9,7,3,-7,-4,5,-3,-5,8,1,-2,-3,10,-6,3,9,-4,-4,-2,-7,5,4,-6,2,2,5,-6,-8,6,-5,4,2,10,-4,-6,1,-4,1,3,3,-9,-1,7,-9,3,-3,-10,4,3,-4,-10,2,1,-1,-9,2,-5,2,2,6,-9,-2,-5,9,-6,-7,-10,-8,4,-5,-8,-10,-10,4,6,-7,8,-4,-8,1,7,-10,-8,-6,-10,3,8,2,8,1,-5,-10,10,7,8,1,7,10,10,8,-9,-9,-6,8,-6,-1,7,-7,7,2,4,-1,-5,-8,9,4,-7,-8,5,-1,4,3,3,-6,-3,-8,-4,-10,9,3,-2,-9,-3,3,4,-6,-6,-10,8,-1,-8,8,7,-2,-3,-6,3,5,-6,-3,-4,9,-9,-9,8,-6,7,8,-1,2,-5,-3,6,4,8,-2,-6,10,-1,2,9,6,1,1,4,10,-2,8,10,-9,1,1,-4,5,-2,-7,-5,8,-6,-2,2,10,2,1,-1,-2,-4,4,-8,5,5,2,2,-10,10,-9,-1,-8,8,-4,-2,3,-1,-3,-7,-8,10,-4,9,3,5,4,2,8,-1,-8,1,10,10,9,-4,10,7,8,-8,-9,-2,9,-5,1,1,1,-3,-4,-4,8,1,2,2,6,-1,-4,-8,-7,2,-10,-9,5,-4,3,-3,6,9,-2,9,4,2,3,5,-4,-7,-9,7,-8,-6,-9,-4,-1,-4,-7,-2,1,10,-6,3,1,-4,8,-6,-2,-9,-1,5,-5,6,2,-2,-2,8,-5,-7,2,-9,-5,-7,9,-6,-9,4,-10,6,10,6,10,1,-4,4,-2,-8,-7,-1,-3,7,-8,5,-3,1,-9,-7,-10,4,9,-1,8,5,4,-2,-5,-8,1,-2,-4,-10,-9,-2,5,4,-4,4,-4,-9,-7,7,3,-6,1,-1,-2,-8,7,-1,-7,-8,-9,5,3,4,-9,3,-8,-6,-8,4,5,-2,-3,7,-7,-3,7,-10,3,10,6,-4,4,-1,-5,4,-8,-4,-9,-3,8,-3,-5,7,8,10,1,-6,3,9,4,-10,10,-5,9,-7,5,3,-6,8,6,-8,5,3,-3,6,6,2,-3,6,7,8,7,4,10,7,-1,6,-9,3,-1,-1,-6,4,-2,-9,6,-2,9,-8,7,8,10,-5,-2,3,7,2,-7,-1,9,-9,-9,9,7,10,5,-4,-1,4,-7,-9,-10,-8,-9,7,2,4,9,1,3,3,-7,-2,6,-4,-2,-7,-7,-1,-5,6,-6,-9,6,-4,9,-6,2,7,-4,3,5,10,5,8,-2,7,5,-5,-6,-9,-4,-5,2,8,-4,-2,1,1,-3,-7,-3,3,2,2,-6,-7,7,1,-4,5,-10,-5,1,8,-4,9,1,9,1,-5,2,9,2,9,9,-3,3,1,-5,7,3,-9,9,10,-9,9,7,-1,10,-4,-5,9,5,1,-8,-9,6,5,-8,-7,2,-10,-6,7,-2,8,-7,5,-8,4,-7,-6,3,-10,8,9,5,-10,-10,-8,7,-2,-4,10,5,7,7,7,-5,-2,-4,7,-10,-2,-4,-5,-6,-7,5,-2,1,4,-3,7,-10,2,-10,5,6,10,-8,2,3,-6,-7,1,-8,-6,-8,8,4,1,-1,-3,4,8,2,5,9,4,-10,4,1,-8,4,4,9,1,-4,8,2,9,8,-9,-5,-3,-9,-2,6,9,7,-8,-1,-6,-5,-10,-2,1,2,9,5,4,-10,6,8,7,-9,2,4,-4,4,-8,-4,8,-10,-5,8,1,-10,5,-10,-5,-5,-8,7,-10,7,-9,6,7,6,-1,5,-4,8,-3,2,-7,5,8,9,-2,7,-7,3,-10,-10,-7,2,-8,-3,-9,8,-3,-5,-4,-10,-3,2,-9,6,5,-10,-10,4,-5,10,-3,3,-3,7,-3,8,4,-5,-4,-4,-6,-9,-9,6,-3,1,7,2,-10,-9,-5,-10,4,6,6,-7,4,-1,-1,10,-5,2,3,-2,-2,-8,8,8,3,10,-3,4,-4,-2,-3,-1,-3,10,6,1,-3,-4,6,2,7,-1,-10,-8,3,1,4,6,-4,3,8,-5,4,-1,5,-2,-7,3,-1,4,-2,-9,7,-6,-2,9,5,-3,7,-1,-9,-3,9,6,6,1,-4,-6,8,2,-1,3,6,6,10,-4,-2,5,-2,9,-2,-7,3,-7,-5,4,-7,3,1,-7,-7,-9,-9,-8,7,10,-10,-6,-2,5,-10,-5,-5,2,-8,-8,3,1,4,-4,7,-2,3,-9,1,-4,4,-9,10,3,-2,2,-10,7,2,-7,-5,7,7,5,-1,-10,-10,2,-10,-7,-7,8,-2,1,4,5,9], dtype = "uint32")#candidate|909|(1170,)|const|uint32
call_908 = func_860_call(relay.reshape(const_909.astype('uint32'), [9, 10, 13]), relay.reshape(const_909.astype('uint8'), [9, 10, 13]), )
call_910 = func_860_call(relay.reshape(const_909.astype('uint32'), [9, 10, 13]), relay.reshape(const_909.astype('uint8'), [9, 10, 13]), )
uop_913 = relay.sqrt(uop_906.astype('float64')) # shape=(5,)
uop_917 = relay.rsqrt(uop_913.astype('float32')) # shape=(5,)
output = relay.Tuple([call_908,const_909,uop_917,])
output2 = relay.Tuple([call_910,const_909,uop_917,])
func_919 = relay.Function([var_905,], output)
mod['func_919'] = func_919
mod = relay.transform.InferType()(mod)
mutated_mod['func_919'] = func_919
mutated_mod = relay.transform.InferType()(mutated_mod)
var_920 = relay.var("var_920", dtype = "float32", shape = (5,))#candidate|920|(5,)|var|float32
func_919_call = mutated_mod.get_global_var('func_919')
call_921 = func_919_call(var_920)
output = call_921
func_922 = relay.Function([var_920], output)
mutated_mod['func_922'] = func_922
mutated_mod = relay.transform.InferType()(mutated_mod)
func_600_call = mod.get_global_var('func_600')
func_601_call = mutated_mod.get_global_var('func_601')
call_965 = relay.TupleGetItem(func_600_call(), 1)
call_966 = relay.TupleGetItem(func_601_call(), 1)
output = relay.Tuple([call_965,])
output2 = relay.Tuple([call_966,])
func_969 = relay.Function([], output)
mod['func_969'] = func_969
mod = relay.transform.InferType()(mod)
mutated_mod['func_969'] = func_969
mutated_mod = relay.transform.InferType()(mutated_mod)
func_969_call = mutated_mod.get_global_var('func_969')
call_970 = func_969_call()
output = call_970
func_971 = relay.Function([], output)
mutated_mod['func_971'] = func_971
mutated_mod = relay.transform.InferType()(mutated_mod)
func_335_call = mod.get_global_var('func_335')
func_337_call = mutated_mod.get_global_var('func_337')
call_1003 = relay.TupleGetItem(func_335_call(), 0)
call_1004 = relay.TupleGetItem(func_337_call(), 0)
var_1007 = relay.var("var_1007", dtype = "uint16", shape = (9, 10, 13))#candidate|1007|(9, 10, 13)|var|uint16
bop_1008 = relay.divide(call_1003.astype('float64'), relay.reshape(var_1007.astype('float64'), relay.shape_of(call_1003))) # shape=(9, 10, 13)
bop_1011 = relay.divide(call_1004.astype('float64'), relay.reshape(var_1007.astype('float64'), relay.shape_of(call_1004))) # shape=(9, 10, 13)
bop_1012 = relay.mod(bop_1008.astype('float64'), relay.reshape(call_1003.astype('float64'), relay.shape_of(bop_1008))) # shape=(9, 10, 13)
bop_1015 = relay.mod(bop_1011.astype('float64'), relay.reshape(call_1004.astype('float64'), relay.shape_of(bop_1011))) # shape=(9, 10, 13)
uop_1027 = relay.cosh(bop_1008.astype('float64')) # shape=(9, 10, 13)
uop_1029 = relay.cosh(bop_1011.astype('float64')) # shape=(9, 10, 13)
bop_1030 = relay.less(uop_1027.astype('bool'), relay.reshape(call_1003.astype('bool'), relay.shape_of(uop_1027))) # shape=(9, 10, 13)
bop_1033 = relay.less(uop_1029.astype('bool'), relay.reshape(call_1004.astype('bool'), relay.shape_of(uop_1029))) # shape=(9, 10, 13)
output = relay.Tuple([bop_1012,bop_1030,])
output2 = relay.Tuple([bop_1015,bop_1033,])
func_1037 = relay.Function([var_1007,], output)
mod['func_1037'] = func_1037
mod = relay.transform.InferType()(mod)
mutated_mod['func_1037'] = func_1037
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1038 = relay.var("var_1038", dtype = "uint16", shape = (9, 10, 13))#candidate|1038|(9, 10, 13)|var|uint16
func_1037_call = mutated_mod.get_global_var('func_1037')
call_1039 = func_1037_call(var_1038)
output = call_1039
func_1040 = relay.Function([var_1038], output)
mutated_mod['func_1040'] = func_1040
mutated_mod = relay.transform.InferType()(mutated_mod)
func_381_call = mod.get_global_var('func_381')
func_382_call = mutated_mod.get_global_var('func_382')
call_1048 = func_381_call()
call_1049 = func_381_call()
var_1058 = relay.var("var_1058", dtype = "uint32", shape = (9, 10, 13))#candidate|1058|(9, 10, 13)|var|uint32
bop_1059 = relay.multiply(call_1048.astype('int16'), relay.reshape(var_1058.astype('int16'), relay.shape_of(call_1048))) # shape=(9, 10, 13)
bop_1062 = relay.multiply(call_1049.astype('int16'), relay.reshape(var_1058.astype('int16'), relay.shape_of(call_1049))) # shape=(9, 10, 13)
bop_1063 = relay.bitwise_or(bop_1059.astype('int8'), relay.reshape(call_1048.astype('int8'), relay.shape_of(bop_1059))) # shape=(9, 10, 13)
bop_1066 = relay.bitwise_or(bop_1062.astype('int8'), relay.reshape(call_1049.astype('int8'), relay.shape_of(bop_1062))) # shape=(9, 10, 13)
output = relay.Tuple([bop_1063,])
output2 = relay.Tuple([bop_1066,])
func_1069 = relay.Function([var_1058,], output)
mod['func_1069'] = func_1069
mod = relay.transform.InferType()(mod)
var_1070 = relay.var("var_1070", dtype = "uint32", shape = (9, 10, 13))#candidate|1070|(9, 10, 13)|var|uint32
output = func_1069(var_1070)
func_1071 = relay.Function([var_1070], output)
mutated_mod['func_1071'] = func_1071
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1117 = relay.var("var_1117", dtype = "float64", shape = (15, 6))#candidate|1117|(15, 6)|var|float64
const_1118 = relay.const([[-8.950782,5.400466,-4.243317,-9.162765,-1.622955,2.984113],[9.521339,4.627461,-1.542893,5.156132,-4.431088,4.443055],[2.976093,-9.816241,2.267539,-9.355693,-5.927755,7.443992],[3.656297,8.409167,-1.534491,-1.954577,-8.047097,9.668653],[3.224823,-0.459101,3.101461,7.607173,7.468385,4.967125],[7.256807,-1.468761,3.109037,3.694742,4.114103,-9.685520],[7.347955,-1.810889,-2.818465,-1.502505,-7.942977,-0.076141],[4.330402,4.118644,6.062540,6.544988,-2.534235,-8.893404],[7.126497,-3.693733,0.203771,-7.798313,5.744086,-6.554357],[6.725139,9.014013,-3.889725,6.078749,0.093516,-2.925296],[5.988168,-8.660905,-2.657170,-5.695060,-4.367855,-6.667545],[9.781940,-3.238359,5.368786,5.778005,-5.315892,9.494603],[-7.651427,-6.909766,2.421246,-7.033728,-7.961523,-7.005558],[2.885956,-4.266628,8.608764,5.081379,4.767783,4.894889],[7.529737,3.421497,-3.194178,-4.220963,-3.581806,-6.123755]], dtype = "float64")#candidate|1118|(15, 6)|const|float64
bop_1119 = relay.power(var_1117.astype('float64'), relay.reshape(const_1118.astype('float64'), relay.shape_of(var_1117))) # shape=(15, 6)
output = relay.Tuple([bop_1119,])
output2 = relay.Tuple([bop_1119,])
func_1128 = relay.Function([var_1117,], output)
mod['func_1128'] = func_1128
mod = relay.transform.InferType()(mod)
var_1129 = relay.var("var_1129", dtype = "float64", shape = (15, 6))#candidate|1129|(15, 6)|var|float64
output = func_1128(var_1129)
func_1130 = relay.Function([var_1129], output)
mutated_mod['func_1130'] = func_1130
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1134 = relay.var("var_1134", dtype = "float32", shape = (7,))#candidate|1134|(7,)|var|float32
const_1135 = relay.const([-1.179488,-4.263096,-7.922089,-6.337990,6.976368,-0.973871,1.020259], dtype = "float32")#candidate|1135|(7,)|const|float32
bop_1136 = relay.maximum(var_1134.astype('float32'), relay.reshape(const_1135.astype('float32'), relay.shape_of(var_1134))) # shape=(7,)
func_1128_call = mod.get_global_var('func_1128')
func_1130_call = mutated_mod.get_global_var('func_1130')
const_1140 = relay.const([7.409661,-6.299336,-1.648914,-5.141736,7.564976,-5.504222,0.823213,0.110516,-8.638383,-5.278188,-0.762568,-3.646138,-5.527164,9.358059,-1.759110,1.188835,-9.340198,-6.756960,-2.505184,7.757387,0.705609,6.971309,-7.464557,4.229774,3.253804,-0.252991,-5.392606,1.652740,0.734636,-2.774282,-1.234554,-7.669402,5.709944,-5.750727,6.904426,5.666507,9.098320,-7.241463,8.619755,-8.928737,6.910682,6.321023,-5.754340,0.238612,5.547787,0.737136,8.814495,-6.189438,-7.564262,-9.757332,8.034041,-9.902326,9.313918,-8.050305,-0.907362,3.627684,1.718753,9.156249,7.809194,4.001667,5.648804,1.253444,-8.358747,7.945003,-2.200838,9.576441,-1.105029,-4.379480,-8.434530,-1.748434,4.920197,-7.890994,-2.205680,-6.814366,-0.436345,0.467937,-2.075660,-8.649037,-7.928861,1.728731,-4.567088,-4.519142,7.349135,-6.202901,3.860140,-9.577556,-5.669900,6.416164,5.736936,6.686353], dtype = "float64")#candidate|1140|(90,)|const|float64
call_1139 = relay.TupleGetItem(func_1128_call(relay.reshape(const_1140.astype('float64'), [15, 6])), 0)
call_1141 = relay.TupleGetItem(func_1130_call(relay.reshape(const_1140.astype('float64'), [15, 6])), 0)
output = relay.Tuple([bop_1136,call_1139,const_1140,])
output2 = relay.Tuple([bop_1136,call_1141,const_1140,])
func_1147 = relay.Function([var_1134,], output)
mod['func_1147'] = func_1147
mod = relay.transform.InferType()(mod)
var_1148 = relay.var("var_1148", dtype = "float32", shape = (7,))#candidate|1148|(7,)|var|float32
output = func_1147(var_1148)
func_1149 = relay.Function([var_1148], output)
mutated_mod['func_1149'] = func_1149
mutated_mod = relay.transform.InferType()(mutated_mod)
func_752_call = mod.get_global_var('func_752')
func_754_call = mutated_mod.get_global_var('func_754')
call_1176 = func_752_call()
call_1177 = func_752_call()
output = call_1176
output2 = call_1177
func_1188 = relay.Function([], output)
mod['func_1188'] = func_1188
mod = relay.transform.InferType()(mod)
output = func_1188()
func_1189 = relay.Function([], output)
mutated_mod['func_1189'] = func_1189
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1190 = relay.const([[[-7.059748,-4.413490,6.855402,-9.939860,2.374590],[-0.394660,-0.133015,3.778742,9.089586,3.101968],[5.721103,-8.534018,-6.241454,-2.740125,-6.323974],[-6.477535,0.891573,-6.362422,1.072091,-5.175537],[5.661570,2.490885,7.304301,-7.105456,2.010000],[-5.604153,0.541905,7.585097,8.406455,8.883588],[8.758486,9.994142,7.975479,7.052447,-3.153410],[1.158067,0.051891,8.095679,-3.296490,6.262060],[-5.102575,-2.968278,8.140821,6.710884,2.254085],[-9.302986,-2.027462,-9.751261,7.947948,0.852417],[5.207526,6.384070,4.990180,8.183107,-2.283881],[-6.770485,2.612420,3.293869,-6.890428,9.803609],[3.968748,-3.482955,4.803198,7.603404,2.327480],[8.659613,-2.750568,1.767429,0.886595,2.599429]],[[4.795610,-9.563585,-1.261950,4.144825,-2.803460],[6.270589,2.109430,-5.271397,-1.941694,6.106288],[-6.867708,-0.956983,-8.972138,-9.180667,4.318806],[9.377907,1.601747,0.530531,4.212570,-2.846480],[5.919744,-7.248754,-9.357296,-1.050665,-1.557938],[-8.117195,-7.303964,1.023006,-1.176589,-5.167228],[3.792004,-0.164824,-1.340087,1.414716,0.420031],[1.372925,2.770235,3.379855,-5.153816,-2.080167],[3.932688,7.762805,4.530584,-4.328701,5.923062],[3.983212,2.969990,4.682696,1.314553,2.038824],[0.945834,-5.675627,-6.192607,-3.949643,0.111552],[-0.601815,6.713425,-6.605739,-8.730185,-5.841655],[7.454021,8.243428,8.437079,-5.088172,2.935991],[7.634693,3.660855,2.114669,9.232277,-1.639527]],[[-2.804866,-3.888406,7.728304,-3.333153,3.660201],[5.377564,0.703512,3.814411,2.987198,6.288635],[-0.354559,7.092357,-9.783680,9.023138,-0.876259],[-7.750444,-5.667065,-8.618213,6.274448,-5.969778],[6.162350,-3.558772,-9.517897,-6.282515,8.641549],[-7.941112,-2.345193,7.275720,-8.028472,8.358291],[1.354330,0.077170,-1.744679,4.768885,-3.665483],[-4.060711,0.458117,-3.019136,6.626683,7.809129],[2.996738,-8.482105,-4.265379,-8.329282,-0.508503],[2.156641,-0.639676,-8.924611,6.051210,-4.726303],[1.414726,9.536236,3.195563,-2.663643,-8.799883],[-5.046159,5.256982,-7.877909,-0.459231,-8.575569],[-2.806342,-6.297181,-2.042460,1.914877,-9.917243],[0.581883,-5.870643,-2.560683,3.890378,-0.592047]],[[8.455884,1.956409,5.709620,-7.210447,-9.607968],[6.803085,-9.019017,5.086478,-4.521929,-5.994326],[7.971465,-9.944420,1.810370,8.293912,9.239926],[-4.698616,-7.281406,7.152796,0.711093,-0.861249],[-1.612136,-2.995685,9.545557,2.131187,-5.523649],[3.467968,2.373611,-8.761329,-5.833820,7.426305],[3.565848,-2.766332,5.992808,-2.480810,8.756022],[4.641824,-6.742868,3.074019,6.507098,1.557079],[-5.787658,1.306537,-1.001464,-9.811581,-6.294422],[-2.546879,-8.582034,8.524188,-7.213348,-5.156723],[-3.481032,7.538581,-7.623950,1.290606,4.175679],[3.166016,9.200618,3.880344,-1.380185,-1.574033],[-8.361628,7.932314,-0.146314,-7.653314,-8.390924],[-7.241194,-0.472667,0.885592,-4.660543,2.862394]]], dtype = "float32")#candidate|1190|(4, 14, 5)|const|float32
uop_1191 = relay.sigmoid(const_1190.astype('float32')) # shape=(4, 14, 5)
bop_1195 = relay.right_shift(uop_1191.astype('uint32'), relay.reshape(const_1190.astype('uint32'), relay.shape_of(uop_1191))) # shape=(4, 14, 5)
output = bop_1195
output2 = bop_1195
func_1198 = relay.Function([], output)
mod['func_1198'] = func_1198
mod = relay.transform.InferType()(mod)
output = func_1198()
func_1199 = relay.Function([], output)
mutated_mod['func_1199'] = func_1199
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1188_call = mod.get_global_var('func_1188')
func_1189_call = mutated_mod.get_global_var('func_1189')
call_1206 = func_1188_call()
call_1207 = func_1188_call()
output = call_1206
output2 = call_1207
func_1213 = relay.Function([], output)
mod['func_1213'] = func_1213
mod = relay.transform.InferType()(mod)
output = func_1213()
func_1214 = relay.Function([], output)
mutated_mod['func_1214'] = func_1214
mutated_mod = relay.transform.InferType()(mutated_mod)
func_969_call = mod.get_global_var('func_969')
func_971_call = mutated_mod.get_global_var('func_971')
call_1226 = relay.TupleGetItem(func_969_call(), 0)
call_1227 = relay.TupleGetItem(func_971_call(), 0)
const_1228 = relay.const([[[-7.538048,5.981037,-4.233587,-8.330083,-2.945584,2.915001,6.778721,-5.887755,-8.754799,3.315526,-4.323662,-5.438694,6.045841],[-5.469682,5.649857,-6.635466,7.807132,-5.422274,-4.209396,-8.421448,4.750555,1.609369,-3.374808,0.677923,9.869229,1.503695],[-2.921922,-7.373468,-4.698956,2.362807,-5.616130,0.914526,5.511626,4.725648,6.171264,-0.566936,1.486219,5.731019,6.705959],[-5.367963,-7.170842,-8.393757,-8.871321,-4.283336,3.737255,-5.142401,7.497721,9.588019,-3.832743,3.099178,-9.839427,-7.949924],[1.677749,-9.740568,-9.070922,0.454691,-2.189803,8.976754,-0.440501,3.350861,0.631962,5.446793,-7.815696,5.423306,8.871159],[-1.936212,-0.033194,1.286024,-3.890399,-3.787223,2.841677,4.547355,3.859401,-4.673018,8.289497,9.610670,2.918652,1.364415],[9.085385,-5.954997,8.455020,7.156066,8.232295,-0.807526,-3.312105,-0.557254,-5.406241,9.964806,8.499623,-5.889470,-6.453035],[1.525663,-8.659948,1.277188,-7.256627,5.803508,-2.447487,0.258334,2.907536,5.377003,2.655013,7.464457,-5.777135,4.045387],[-5.106122,-7.946685,-0.442478,3.461251,-0.449736,-0.441771,-4.096908,6.659558,-7.438297,4.551958,-7.924259,6.975124,-3.642028],[3.883137,-9.118074,-7.532019,-7.883636,2.644853,0.421021,-7.821272,5.211859,-5.733395,-7.852324,-8.114145,-6.129743,-0.596505]],[[-6.695126,-3.494006,9.537554,9.458031,0.127845,-4.293595,-0.268884,-0.483362,-0.342792,-3.814543,2.466561,-3.776476,-0.104223],[5.544022,-9.550779,7.849497,9.986878,4.622096,9.612561,-0.868125,4.193556,6.768181,-4.222223,1.294813,-7.555223,-4.254598],[-6.986385,2.994909,6.450502,6.781512,-2.162918,2.129615,2.051535,-0.480384,3.728717,1.750385,-0.027615,0.695303,-0.069158],[1.215743,-9.971384,-9.317813,-7.964250,0.572678,-6.992229,0.446467,9.842460,9.162002,-8.243722,1.375304,-3.616447,-6.468475],[4.973494,-3.472897,-8.577255,-1.623532,5.579797,6.406284,-8.560336,-2.296594,2.340932,-6.206943,-8.678506,4.571074,1.763995],[-4.995051,2.659855,-3.754473,-0.918716,-5.845132,8.125247,7.687917,-7.388137,-3.723170,3.884848,3.091319,8.583465,9.773966],[0.105233,-7.962641,-6.149226,1.564457,9.804067,-6.710513,-3.877422,-5.686512,-5.838849,-1.050200,-5.691079,8.400958,6.684862],[-3.420087,-7.158363,-1.838479,4.733049,0.626684,-2.780652,1.254717,-0.442326,4.539764,5.884272,-8.895155,-4.320222,-0.875720],[-5.048333,-0.298011,-2.270694,-8.304595,3.612112,0.007348,8.928480,-5.102136,8.178906,8.346291,4.340715,-1.830350,-9.258262],[-1.000533,8.955644,1.626904,2.338324,-2.560857,-8.266522,-7.306553,0.609114,-0.647887,-6.629596,-1.037914,1.075624,-6.638776]],[[7.853162,9.483199,4.214880,-6.625607,-6.727144,-6.951164,1.175771,9.680701,2.434095,3.397735,7.771118,8.459127,-0.861802],[8.894370,8.693349,7.223700,-7.186459,-4.259300,-3.588234,5.921128,-4.440430,-8.919086,-6.602675,-1.172888,-4.130578,-2.630195],[7.130338,6.308096,-7.876337,4.985700,-0.277543,-8.386997,6.941304,3.839569,8.533261,-4.223643,-6.270767,0.558152,7.941755],[1.685037,-3.898382,9.959520,1.546918,6.543332,-0.846511,-9.218270,0.440807,1.972311,5.663544,2.190679,7.992787,4.022190],[-5.530927,-4.053327,-2.407079,2.593537,-9.278466,-6.450972,-1.667204,4.524935,6.463878,2.846003,-4.745592,3.361051,9.468454],[-4.094666,7.442710,4.843184,-2.614848,9.626071,8.980006,7.140082,9.463463,9.234144,-2.740734,-6.490282,-8.214846,-8.993182],[7.615400,2.141553,-1.473277,9.165289,6.584022,-8.039503,6.061936,-5.294467,-8.621161,-0.976438,0.234182,0.667381,-8.677763],[2.951266,-7.370175,8.281467,-7.550178,-6.481779,-7.972035,-0.320349,-3.818427,3.962368,-5.834022,-9.543852,-7.679413,-3.706363],[4.707394,8.946845,-2.169152,-9.071862,-5.861692,-7.881968,-7.804942,-0.549225,-8.376488,-6.126220,8.805294,-1.648243,7.058843],[-4.031868,7.436215,-0.213463,4.865184,-1.810040,-7.996003,-8.954469,-3.602497,9.312720,3.414110,9.724252,-0.356616,1.169834]],[[-8.118223,6.568412,-6.566707,5.120656,9.389552,-8.392154,3.185114,-2.196912,-3.312980,-9.700903,4.391625,1.479447,4.110823],[-5.242827,7.542342,0.955349,-7.505251,7.135633,5.181401,-1.213686,-3.838118,0.814706,-7.016152,-0.788497,-3.520117,0.007010],[-3.212501,-7.999804,-5.411508,-4.438207,-1.884509,9.134841,-7.262898,-4.963479,3.755204,-4.909563,9.819105,4.947616,7.239510],[-7.677424,-7.226546,3.068922,6.768020,9.384976,5.289649,9.171097,3.154037,-3.344348,6.664294,0.120956,3.074537,7.291515],[5.931717,-1.745075,-6.169370,-2.000233,2.251584,9.173475,-4.087078,-9.210348,-5.190862,1.098354,-3.749632,-7.297760,-1.159583],[-8.893050,1.867122,6.898025,-2.130080,-7.860511,-6.599438,6.321677,-0.965620,-3.245113,0.947775,-1.124261,-7.230945,-5.962058],[6.727493,9.047356,-8.771823,-4.627827,4.562899,5.366714,2.899858,-2.623425,-6.518363,7.126660,-5.202952,6.538664,-3.474401],[-1.252324,-8.776488,3.913973,2.594825,3.101947,-9.127899,9.322226,2.283970,6.803175,-3.562282,5.857044,-0.144972,-3.082407],[-4.359597,-7.810208,9.038261,-6.179345,2.030401,-6.150200,-8.361615,4.986102,1.446767,-7.433508,7.922264,1.306975,8.426008],[-9.293107,-3.565374,-1.348506,3.125853,9.815869,5.737387,-5.871741,-0.188286,9.952607,-1.894818,7.899251,-5.231812,8.384321]],[[-9.922547,4.900373,9.551236,4.346491,-1.386341,-6.713192,-0.775280,6.418131,6.839929,6.684102,-0.906343,-3.490771,6.980607],[-9.580426,1.985728,2.941634,-6.574353,5.559480,-1.238090,8.991772,9.527936,-8.739814,-1.656306,0.470624,9.681513,0.835773],[-4.938667,1.369114,9.887387,3.423047,9.328960,-3.646846,0.192751,9.177445,-6.586776,1.183861,-9.743621,-9.934004,0.119949],[9.897641,-5.469958,-6.315933,-8.923456,-2.648686,4.178915,4.646001,-0.889799,-6.931798,3.172252,1.092092,2.808816,9.153531],[2.624131,-8.652115,-3.656234,1.557223,-6.892021,8.682398,9.769163,-0.727482,1.869560,9.633540,-7.979906,1.013596,8.161782],[2.433069,2.728766,8.341693,-5.847056,5.799531,1.273726,4.676707,-6.100714,-7.330143,-4.745648,-7.100985,-5.847079,1.849528],[-3.868831,9.862234,-8.335305,-7.667448,3.631808,-7.837830,5.891742,-4.216372,-0.230874,-1.038001,-0.255154,7.317585,2.346565],[-1.983290,2.616421,-2.401619,7.992127,-1.310242,0.410186,8.532895,-0.610720,-9.231214,-4.493533,-1.334932,8.679645,6.939901],[4.955153,-3.108421,0.802031,9.295887,9.095393,-3.510619,5.705048,-0.775572,3.052265,1.541761,4.834893,9.972060,7.643789],[-1.079899,-7.678878,-9.215193,-5.786326,-0.884175,-8.044797,5.108345,-3.883777,-3.848858,-0.777741,-2.628517,-0.787000,6.729425]],[[0.828398,6.448441,-3.321963,7.606203,-6.264024,-2.633008,9.691178,-5.796247,-4.291020,8.669400,8.755397,-7.754755,-8.359666],[8.531776,7.083500,-3.635037,1.667929,1.199079,8.398218,-3.098955,-4.229776,6.290488,2.144394,6.223295,4.295686,-7.893776],[-2.933310,-1.474055,3.560823,-7.696849,-5.042131,-6.284963,-3.043156,7.282417,-2.920040,1.440558,-1.758846,-8.933431,-4.938698],[-9.913713,-2.648682,-7.888841,8.484099,2.483011,-6.300282,5.511531,-8.835037,-5.878664,3.382126,1.843855,3.705257,3.507614],[2.449665,-4.645217,4.766581,6.902976,2.865060,3.612146,-5.323520,-2.048375,-1.215334,8.783874,7.422470,3.062765,9.265235],[-1.292961,-3.010987,-7.092366,-1.973122,7.298699,7.901325,2.040162,3.808311,-8.911928,-6.405169,-3.502877,-5.219600,2.528919],[-9.872636,5.758027,7.845155,-0.015554,0.408110,0.860980,6.245835,2.086079,0.419404,-7.447944,6.995740,-8.838290,5.049206],[-1.586448,-6.427002,4.626690,0.393991,-5.053844,-6.833561,-2.517593,-6.578317,4.376762,-3.415037,-6.338177,-7.415516,-4.388648],[0.062136,4.638159,-8.435328,9.076572,0.323602,6.902966,0.360649,-6.919099,-1.376177,8.045471,-0.194761,4.707225,6.870912],[6.480389,-0.929263,-3.536423,-1.999537,-1.777139,9.915765,-9.021711,-3.189998,2.300891,6.832396,2.463225,-3.080029,-7.410863]],[[-0.467090,-2.240555,-5.828651,1.484642,8.767327,-4.002404,2.593113,-7.386566,-8.091051,3.073523,-6.834515,-0.556389,-9.130219],[-9.869037,-2.271506,-8.443930,-4.249205,4.137734,-9.863330,6.588744,-7.895862,5.339194,-5.197118,-8.439601,-1.723408,2.175226],[1.240629,1.927774,1.579082,-7.605348,-5.694979,-0.648647,0.724812,6.386645,-8.121747,-4.998279,0.176443,-6.350659,4.599376],[-4.567627,7.096405,2.820221,-7.060634,-6.524814,-7.854594,4.207594,1.323625,0.859422,7.574767,-4.354996,9.127128,-0.440024],[5.989738,-3.815871,-7.451703,-7.358344,-3.754051,-0.546665,-8.979617,-5.879001,6.610870,-6.007031,-7.432852,-9.833194,-5.290693],[7.920746,3.117221,-0.241180,7.427382,8.590615,-6.153039,9.352364,4.916778,8.501553,-2.689124,-3.157411,6.842554,6.837384],[-4.850451,-0.175304,-5.525258,-6.694439,3.744732,-4.031901,0.182812,-6.220022,-1.824512,-8.428341,6.391890,7.341648,-0.152479],[-5.880818,-6.904409,9.522711,7.141904,-7.658252,5.067601,3.854341,7.291664,1.488171,6.086032,-9.336794,6.651310,-5.644945],[-6.519488,6.711506,4.486915,6.594067,3.317664,3.978232,-0.309081,-6.853953,-9.640138,-4.494920,-2.697811,3.344383,-1.237616],[7.587645,-0.147457,-9.537352,8.811105,8.549865,4.934289,1.809051,4.329948,1.148109,-2.441528,-3.668033,3.158961,-3.305492]],[[-5.280875,-1.732650,-0.188152,9.425509,0.300586,2.471644,6.563390,6.382576,2.493220,4.526117,4.439805,-2.288359,-6.216102],[4.532410,-6.582094,5.584614,7.589367,9.758281,3.119489,-2.989579,-1.271102,-6.351790,8.540405,4.038632,-4.718376,4.894328],[5.475748,8.406654,-4.590113,-4.965326,-6.990547,-7.567460,9.231060,0.754315,-5.761315,3.802597,-6.550619,-6.073544,6.915538],[-5.274767,-1.564879,-7.204404,-6.431565,4.760023,-3.402742,1.618081,-7.287430,-4.199223,6.442263,-3.903819,3.340907,-7.110657],[4.593129,4.620369,-8.399311,-9.597847,-4.081317,8.499045,-5.588468,6.852630,-2.971470,-3.467349,-6.150099,-6.854385,-1.897254],[3.184450,-4.723395,5.735881,-7.051374,-7.469820,2.107633,0.143463,2.810670,-1.916363,-4.347782,-0.279321,-0.424836,9.071799],[3.666524,-1.686899,-4.837550,-3.953274,1.271400,0.956059,-0.226758,1.579494,-6.424487,2.869963,7.783812,-8.707256,-6.272163],[-9.344202,1.545724,7.163119,2.367609,-1.665697,-0.250313,-8.194051,0.500392,5.186999,8.547991,3.329641,-4.249035,-3.309910],[-1.272697,8.309239,1.352666,4.845321,5.067826,-0.140399,-7.811563,-0.362803,2.458870,-9.129951,-6.113410,-3.047852,-2.238982],[-8.386080,5.512223,-4.973844,6.010298,-4.104511,9.762615,1.113475,-8.200891,1.608993,-3.273303,0.419890,-1.068629,-0.362167]],[[-2.072290,3.577049,-2.970055,5.600757,-5.609258,6.274929,2.327294,-7.811734,4.319844,5.930522,3.011892,-8.003047,-2.762907],[7.775783,-8.097482,-1.801324,6.164585,1.265861,3.512591,1.924407,1.819858,2.756046,-0.545976,7.639362,1.989194,0.069768],[-2.798914,-6.792776,-1.006178,7.735693,-3.391335,9.006321,0.597985,0.244869,7.221454,-0.766098,-8.172740,8.466168,-9.379548],[-1.875869,6.157846,-6.435968,-7.414695,-7.145138,4.414832,3.833189,7.678538,0.872625,0.173105,2.263506,9.080351,0.962352],[4.564673,-6.911391,-9.305094,7.937035,-2.261740,5.466470,9.576583,4.475219,0.504658,-0.907517,1.086230,-8.845897,-9.853943],[1.986022,0.574887,9.654314,2.802687,-4.461944,4.517019,5.782169,-8.407872,-3.176373,6.650614,-1.549216,-0.212575,2.472690],[-3.938833,-1.590232,-5.221515,-5.705912,7.436308,-8.980596,7.980139,-5.725187,7.462370,-0.277613,-3.478136,3.366296,9.773235],[-0.616263,-4.895107,8.808722,5.648416,6.556031,-8.904839,-2.240700,-5.794808,-2.801455,6.362347,-7.234300,7.418427,-9.843535],[8.370342,6.036668,3.877796,-7.601878,2.591153,-6.706419,6.593535,-5.330408,6.213293,2.701158,-5.277516,0.054181,-9.177365],[-1.934827,4.775568,3.881664,-7.481433,7.690574,0.946726,8.937966,2.653257,3.142210,6.845300,-6.304562,-1.683906,-0.785196]]], dtype = "float64")#candidate|1228|(9, 10, 13)|const|float64
bop_1229 = relay.not_equal(call_1226.astype('bool'), relay.reshape(const_1228.astype('bool'), relay.shape_of(call_1226))) # shape=(9, 10, 13)
bop_1232 = relay.not_equal(call_1227.astype('bool'), relay.reshape(const_1228.astype('bool'), relay.shape_of(call_1227))) # shape=(9, 10, 13)
func_307_call = mod.get_global_var('func_307')
func_311_call = mutated_mod.get_global_var('func_311')
var_1235 = relay.var("var_1235", dtype = "float64", shape = (1, 91))#candidate|1235|(1, 91)|var|float64
var_1236 = relay.var("var_1236", dtype = "float32", shape = (3584,))#candidate|1236|(3584,)|var|float32
call_1234 = relay.TupleGetItem(func_307_call(relay.reshape(var_1235.astype('float64'), [7, 13]), relay.reshape(var_1236.astype('float32'), [3584,]), ), 5)
call_1237 = relay.TupleGetItem(func_311_call(relay.reshape(var_1235.astype('float64'), [7, 13]), relay.reshape(var_1236.astype('float32'), [3584,]), ), 5)
func_969_call = mod.get_global_var('func_969')
func_971_call = mutated_mod.get_global_var('func_971')
call_1238 = relay.TupleGetItem(func_969_call(), 0)
call_1239 = relay.TupleGetItem(func_971_call(), 0)
func_1147_call = mod.get_global_var('func_1147')
func_1149_call = mutated_mod.get_global_var('func_1149')
var_1258 = relay.var("var_1258", dtype = "float32", shape = (7, 1))#candidate|1258|(7, 1)|var|float32
call_1257 = relay.TupleGetItem(func_1147_call(relay.reshape(var_1258.astype('float32'), [7,])), 1)
call_1259 = relay.TupleGetItem(func_1149_call(relay.reshape(var_1258.astype('float32'), [7,])), 1)
bop_1265 = relay.logical_or(bop_1229.astype('bool'), relay.reshape(call_1226.astype('bool'), relay.shape_of(bop_1229))) # shape=(9, 10, 13)
bop_1268 = relay.logical_or(bop_1232.astype('bool'), relay.reshape(call_1227.astype('bool'), relay.shape_of(bop_1232))) # shape=(9, 10, 13)
func_885_call = mod.get_global_var('func_885')
func_887_call = mutated_mod.get_global_var('func_887')
const_1281 = relay.const([9.172455,-1.783461,-3.806689,-7.917045,-5.440739,-4.415015,4.122143,5.379028,8.221367,1.860768,-4.829404,-0.106290,-9.349211,-1.784823,-2.162421,-8.397791,-5.819564,-6.972111,3.005144,-1.422808,-8.104708,1.652509,-4.773624,-4.189697,-2.123353,-6.284997,-0.659746,-4.615056,-2.510216,-5.542381,-5.566237,-6.485238,7.424166,5.815897,-5.833209,1.512477,0.260512,-0.979835,2.342241,9.956306,-1.657709,-5.127388,9.280800,-1.217549,-7.152209,-1.015740,0.544769,5.843204], dtype = "float64")#candidate|1281|(48,)|const|float64
call_1280 = relay.TupleGetItem(func_885_call(relay.reshape(const_1281.astype('float64'), [12, 4])), 0)
call_1282 = relay.TupleGetItem(func_887_call(relay.reshape(const_1281.astype('float64'), [12, 4])), 0)
var_1299 = relay.var("var_1299", dtype = "bool", shape = (9, 10, 13))#candidate|1299|(9, 10, 13)|var|bool
bop_1300 = relay.less(bop_1265.astype('bool'), relay.reshape(var_1299.astype('bool'), relay.shape_of(bop_1265))) # shape=(9, 10, 13)
bop_1303 = relay.less(bop_1268.astype('bool'), relay.reshape(var_1299.astype('bool'), relay.shape_of(bop_1268))) # shape=(9, 10, 13)
output = relay.Tuple([call_1234,var_1235,var_1236,call_1238,call_1257,var_1258,call_1280,const_1281,bop_1300,])
output2 = relay.Tuple([call_1237,var_1235,var_1236,call_1239,call_1259,var_1258,call_1282,const_1281,bop_1303,])
func_1310 = relay.Function([var_1235,var_1236,var_1258,var_1299,], output)
mod['func_1310'] = func_1310
mod = relay.transform.InferType()(mod)
var_1311 = relay.var("var_1311", dtype = "float64", shape = (1, 91))#candidate|1311|(1, 91)|var|float64
var_1312 = relay.var("var_1312", dtype = "float32", shape = (3584,))#candidate|1312|(3584,)|var|float32
var_1313 = relay.var("var_1313", dtype = "float32", shape = (7, 1))#candidate|1313|(7, 1)|var|float32
var_1314 = relay.var("var_1314", dtype = "bool", shape = (9, 10, 13))#candidate|1314|(9, 10, 13)|var|bool
output = func_1310(var_1311,var_1312,var_1313,var_1314,)
func_1315 = relay.Function([var_1311,var_1312,var_1313,var_1314,], output)
mutated_mod['func_1315'] = func_1315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_335_call = mod.get_global_var('func_335')
func_337_call = mutated_mod.get_global_var('func_337')
call_1322 = relay.TupleGetItem(func_335_call(), 1)
call_1323 = relay.TupleGetItem(func_337_call(), 1)
func_1069_call = mod.get_global_var('func_1069')
func_1071_call = mutated_mod.get_global_var('func_1071')
var_1327 = relay.var("var_1327", dtype = "uint32", shape = (1170,))#candidate|1327|(1170,)|var|uint32
call_1326 = relay.TupleGetItem(func_1069_call(relay.reshape(var_1327.astype('uint32'), [9, 10, 13])), 0)
call_1328 = relay.TupleGetItem(func_1071_call(relay.reshape(var_1327.astype('uint32'), [9, 10, 13])), 0)
output = relay.Tuple([call_1322,call_1326,var_1327,])
output2 = relay.Tuple([call_1323,call_1328,var_1327,])
func_1333 = relay.Function([var_1327,], output)
mod['func_1333'] = func_1333
mod = relay.transform.InferType()(mod)
mutated_mod['func_1333'] = func_1333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1334 = relay.var("var_1334", dtype = "uint32", shape = (1170,))#candidate|1334|(1170,)|var|uint32
func_1333_call = mutated_mod.get_global_var('func_1333')
call_1335 = func_1333_call(var_1334)
output = call_1335
func_1336 = relay.Function([var_1334], output)
mutated_mod['func_1336'] = func_1336
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1369 = relay.var("var_1369", dtype = "int32", shape = ())#candidate|1369|()|var|int32
var_1370 = relay.var("var_1370", dtype = "int32", shape = (9, 6, 11))#candidate|1370|(9, 6, 11)|var|int32
bop_1371 = relay.bitwise_xor(var_1369.astype('int32'), var_1370.astype('int32')) # shape=(9, 6, 11)
func_969_call = mod.get_global_var('func_969')
func_971_call = mutated_mod.get_global_var('func_971')
call_1382 = relay.TupleGetItem(func_969_call(), 0)
call_1383 = relay.TupleGetItem(func_971_call(), 0)
func_234_call = mod.get_global_var('func_234')
func_237_call = mutated_mod.get_global_var('func_237')
var_1385 = relay.var("var_1385", dtype = "float32", shape = (30,))#candidate|1385|(30,)|var|float32
call_1384 = relay.TupleGetItem(func_234_call(relay.reshape(var_1385.astype('float32'), [6, 5])), 0)
call_1386 = relay.TupleGetItem(func_237_call(relay.reshape(var_1385.astype('float32'), [6, 5])), 0)
var_1387 = relay.var("var_1387", dtype = "float32", shape = (30,))#candidate|1387|(30,)|var|float32
bop_1388 = relay.divide(var_1385.astype('float64'), relay.reshape(var_1387.astype('float64'), relay.shape_of(var_1385))) # shape=(30,)
output = relay.Tuple([bop_1371,call_1382,call_1384,bop_1388,])
output2 = relay.Tuple([bop_1371,call_1383,call_1386,bop_1388,])
func_1391 = relay.Function([var_1369,var_1370,var_1385,var_1387,], output)
mod['func_1391'] = func_1391
mod = relay.transform.InferType()(mod)
mutated_mod['func_1391'] = func_1391
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1391_call = mutated_mod.get_global_var('func_1391')
var_1393 = relay.var("var_1393", dtype = "int32", shape = ())#candidate|1393|()|var|int32
var_1394 = relay.var("var_1394", dtype = "int32", shape = (9, 6, 11))#candidate|1394|(9, 6, 11)|var|int32
var_1395 = relay.var("var_1395", dtype = "float32", shape = (30,))#candidate|1395|(30,)|var|float32
var_1396 = relay.var("var_1396", dtype = "float32", shape = (30,))#candidate|1396|(30,)|var|float32
call_1392 = func_1391_call(var_1393,var_1394,var_1395,var_1396,)
output = call_1392
func_1397 = relay.Function([var_1393,var_1394,var_1395,var_1396,], output)
mutated_mod['func_1397'] = func_1397
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1213_call = mod.get_global_var('func_1213')
func_1214_call = mutated_mod.get_global_var('func_1214')
call_1416 = func_1213_call()
call_1417 = func_1213_call()
output = call_1416
output2 = call_1417
func_1418 = relay.Function([], output)
mod['func_1418'] = func_1418
mod = relay.transform.InferType()(mod)
output = func_1418()
func_1419 = relay.Function([], output)
mutated_mod['func_1419'] = func_1419
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1454 = relay.var("var_1454", dtype = "float64", shape = (14, 7))#candidate|1454|(14, 7)|var|float64
uop_1455 = relay.atan(var_1454.astype('float64')) # shape=(14, 7)
output = uop_1455
output2 = uop_1455
func_1458 = relay.Function([var_1454,], output)
mod['func_1458'] = func_1458
mod = relay.transform.InferType()(mod)
var_1459 = relay.var("var_1459", dtype = "float64", shape = (14, 7))#candidate|1459|(14, 7)|var|float64
output = func_1458(var_1459)
func_1460 = relay.Function([var_1459], output)
mutated_mod['func_1460'] = func_1460
mutated_mod = relay.transform.InferType()(mutated_mod)
func_335_call = mod.get_global_var('func_335')
func_337_call = mutated_mod.get_global_var('func_337')
call_1473 = relay.TupleGetItem(func_335_call(), 1)
call_1474 = relay.TupleGetItem(func_337_call(), 1)
func_234_call = mod.get_global_var('func_234')
func_237_call = mutated_mod.get_global_var('func_237')
const_1483 = relay.const([[7.043230],[-7.225706],[-3.904387],[8.745526],[6.200599],[-8.806001],[-0.516824],[7.295763],[-4.641223],[-5.218522],[9.914774],[-3.863313],[-8.671164],[-0.986678],[-8.089696],[-4.744787],[-6.243185],[-1.794506],[9.899079],[-0.356862],[8.776931],[-1.027715],[-4.885269],[-5.693269],[-9.434552],[-4.123409],[3.769619],[9.583547],[6.991716],[-2.590637]], dtype = "float32")#candidate|1483|(30, 1)|const|float32
call_1482 = relay.TupleGetItem(func_234_call(relay.reshape(const_1483.astype('float32'), [6, 5])), 0)
call_1484 = relay.TupleGetItem(func_237_call(relay.reshape(const_1483.astype('float32'), [6, 5])), 0)
output = relay.Tuple([call_1473,call_1482,const_1483,])
output2 = relay.Tuple([call_1474,call_1484,const_1483,])
func_1486 = relay.Function([], output)
mod['func_1486'] = func_1486
mod = relay.transform.InferType()(mod)
output = func_1486()
func_1487 = relay.Function([], output)
mutated_mod['func_1487'] = func_1487
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1490 = relay.const([[-3.197761,-4.279657,-6.072973,-2.855908,-7.798089,4.459684,6.480625,-9.614842,-2.916970,-5.106811,4.688078,-4.250869,0.930331],[6.923259,3.610128,-8.381493,-4.989134,8.478221,3.446054,-8.638137,-6.772804,2.560934,-7.695174,4.154079,4.246354,-0.661643],[6.709902,9.139461,9.614934,5.829008,8.688794,3.777588,5.725445,1.485920,-8.337513,-6.642243,1.599283,-8.554313,0.511460],[-0.145351,1.775715,8.040749,-7.971144,6.662585,0.967888,-5.840207,-9.766290,4.766324,-3.599067,-3.861902,-4.126882,8.142891],[1.424192,4.265246,5.885923,1.594844,-3.627662,-9.829642,7.451702,4.557878,-9.101862,-4.643892,7.177478,-1.236542,-3.326718],[-4.891223,1.209498,-4.708270,3.240265,5.279673,-7.244257,-2.694767,8.374338,3.716936,-0.163121,-4.282664,-6.376648,-6.590218],[-6.838061,7.693198,0.630487,0.678832,3.013363,7.359572,6.595517,2.864346,7.517013,-8.926106,-2.104806,-8.834892,-1.273532],[-2.447044,2.470215,-7.467151,1.489865,-0.050351,3.346586,-7.041491,1.546625,-8.932020,-8.269629,-3.217927,2.976203,3.906026],[-3.960111,-9.707985,-2.569766,5.821480,6.270841,4.547668,5.493755,-5.756905,0.121548,0.598595,-4.931561,8.296478,-0.991162],[3.437282,-7.964743,8.040257,-7.118000,-6.986563,-7.578428,-8.781031,5.445495,0.849736,4.389802,-4.105195,-6.070938,1.933295]], dtype = "float64")#candidate|1490|(10, 13)|const|float64
const_1491 = relay.const([[3.259232,4.117955,7.359169,3.839180,-4.479334,-0.703675,-3.423913,2.459854,2.952099,-9.224603,6.827954,-5.514780,-0.203733],[-3.758012,5.890540,-8.648028,7.085402,3.662115,-5.707446,6.788026,-5.044978,1.371485,3.993664,3.789550,8.723968,8.724419],[5.001728,-2.521085,-3.015773,-6.183321,-1.859228,-0.626798,-8.707462,-9.675683,2.605886,5.670802,-8.974366,-7.146244,1.733234],[-4.527677,-7.427606,-5.248004,4.438488,9.394822,0.338473,8.637301,7.124435,4.801703,-4.842242,-2.699029,8.138342,4.865822],[-5.214213,1.313699,-3.862471,-7.367968,8.273179,-8.205611,-4.550005,-2.526192,7.477781,3.537381,-3.812870,-3.571507,3.785320],[-9.744526,2.402140,-1.852154,9.416877,8.872161,3.148448,-2.801236,-6.825934,9.243667,7.199899,-1.350154,4.519020,0.014578],[-4.440737,-8.891604,-8.091600,4.184445,1.376621,3.873418,1.101165,-0.008948,-5.437016,-4.830941,4.974297,6.702778,1.587373],[-7.486092,-9.528154,-3.378430,4.656855,-5.596044,2.608758,7.094378,6.510513,-4.830140,-6.606972,2.679345,7.858229,2.609936],[4.563863,6.130565,8.325530,6.327871,9.636117,-1.396191,6.344248,-7.822587,-4.808472,1.657268,-8.280856,8.460220,-9.553854],[-0.589335,-6.742836,-6.037178,-1.472908,-1.788940,2.903351,4.444285,-9.846347,-8.846051,-9.845774,-7.891843,-6.505142,-9.087093]], dtype = "float64")#candidate|1491|(10, 13)|const|float64
bop_1492 = relay.mod(const_1490.astype('float64'), relay.reshape(const_1491.astype('float64'), relay.shape_of(const_1490))) # shape=(10, 13)
bop_1495 = relay.bitwise_xor(const_1490.astype('uint32'), relay.reshape(bop_1492.astype('uint32'), relay.shape_of(const_1490))) # shape=(10, 13)
func_529_call = mod.get_global_var('func_529')
func_532_call = mutated_mod.get_global_var('func_532')
const_1512 = relay.const([[9.146897,4.414618,-3.891005,2.296212,8.584343,0.779500,-1.053477,0.143095,-6.089224,-7.198722,8.929410,5.930889,-2.202033,-4.381299,1.149641,3.075367,8.966529,5.089878,-7.907126,6.725235,1.918743,3.314889,1.706083,-1.610077,-3.638690,-9.162876,7.572274,7.758643,-6.470430,3.577999,-4.675313,-9.226716,1.286234,9.808854,9.965070,0.448004,3.997690,-5.286433,7.917122,-1.714660,2.210403,9.983975,-1.421303,-7.132762,4.726521,4.776207,-1.958433,7.891178,1.776534,1.419281,3.544154,-9.239709,3.168658,3.565288,6.952184,-7.621217,-9.525367,-7.631548,-1.063277,-7.645156,-0.474945,4.958168,8.069204,-6.535308,0.084762,3.552542,-4.391009,7.606641,-8.397334,1.864320,1.203125,-9.180092,4.562139,-2.068828,6.565982,6.911872,-0.566326,9.947571,9.405607,0.865050,9.475869,3.402894,-9.108784,-4.927562,-0.407469,-9.018482,6.393468,0.940249,6.273052,1.640094,-7.411585,-1.801012,0.112415,1.063298,2.550463,-0.493096],[4.377099,3.386313,-5.149589,0.608776,5.970518,-7.044597,-8.724015,7.915528,-3.786468,5.268990,-7.706994,3.712864,8.403946,-8.583019,8.986526,0.640407,9.165261,-6.523069,-0.350495,-9.452479,-0.108962,3.406104,-9.810232,-5.086521,9.809689,-1.733955,-3.291826,8.478016,-4.009675,-0.158823,-1.890675,-6.175836,-3.088089,-0.293072,-3.826384,-1.040500,6.802081,-7.504595,6.088423,-0.194802,-1.267313,-7.666899,5.932984,-2.045966,9.337681,2.032773,-5.448743,5.797754,4.268655,-5.464272,-4.346852,-4.559260,-9.150063,-5.791711,3.948372,-5.033003,2.710488,-8.523356,-2.562364,-7.463819,-5.811267,-8.703692,9.405397,8.248366,6.736669,3.320501,8.266675,1.492866,-2.501120,3.479146,0.930354,3.805637,-2.695283,3.568887,-7.591454,-1.398519,4.905269,3.882603,3.050221,0.077768,-4.790594,-9.782729,-6.145317,5.926766,9.893205,1.169924,-0.241916,1.478186,-2.707238,-6.037146,-4.816909,2.766845,4.452166,8.578978,-5.709858,0.361458]], dtype = "float64")#candidate|1512|(2, 96)|const|float64
const_1513 = relay.const([1.262808,-9.164021,-0.774208,2.127599,-4.374997,0.222467,4.320084,9.354905,-7.459170,-5.529428,5.358807,-7.540006,-9.331119,3.231444,-1.855009,-3.965270,6.796636,-3.520870,-8.283203,4.426423,9.108229,8.632057,-0.961744,-2.114030,-4.644663,-4.305167,-3.464838,3.426660,-4.855700,-5.270588], dtype = "float32")#candidate|1513|(30,)|const|float32
call_1511 = relay.TupleGetItem(func_529_call(relay.reshape(const_1512.astype('float64'), [4, 8, 6]), relay.reshape(const_1513.astype('float32'), [30,]), ), 0)
call_1514 = relay.TupleGetItem(func_532_call(relay.reshape(const_1512.astype('float64'), [4, 8, 6]), relay.reshape(const_1513.astype('float32'), [30,]), ), 0)
const_1516 = relay.const([-9.507807,-5.050668,7.528175,9.718831,8.070667,9.525439,-7.694450,-7.452627,9.249339,-0.766626,-4.233221,-7.857254,-2.673189,9.661537,3.946323,9.863838,1.682544,-2.965727,0.203820,-8.110501,-2.373842,3.305638,-5.517728,-2.613202,1.517983,-0.708861,-4.966772,-0.403871,-3.705141,-5.253470], dtype = "float32")#candidate|1516|(30,)|const|float32
bop_1517 = relay.bitwise_and(const_1513.astype('int8'), relay.reshape(const_1516.astype('int8'), relay.shape_of(const_1513))) # shape=(30,)
func_1418_call = mod.get_global_var('func_1418')
func_1419_call = mutated_mod.get_global_var('func_1419')
call_1520 = func_1418_call()
call_1521 = func_1418_call()
output = relay.Tuple([bop_1495,call_1511,const_1512,bop_1517,call_1520,])
output2 = relay.Tuple([bop_1495,call_1514,const_1512,bop_1517,call_1521,])
func_1522 = relay.Function([], output)
mod['func_1522'] = func_1522
mod = relay.transform.InferType()(mod)
mutated_mod['func_1522'] = func_1522
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1522_call = mutated_mod.get_global_var('func_1522')
call_1523 = func_1522_call()
output = call_1523
func_1524 = relay.Function([], output)
mutated_mod['func_1524'] = func_1524
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1525 = relay.const([[[0.945538,9.181230,-6.936994,9.399976,9.505130,-8.006220,7.921728,4.819486,-9.367426,-8.496607],[-7.097101,1.923416,6.067611,-2.917201,8.677145,-5.145114,2.774359,-7.327271,0.236213,9.635724],[-0.514467,3.621668,-4.664369,-0.711448,8.932966,-1.587708,3.589689,-5.537882,2.611976,-1.782064],[9.680455,0.820959,-1.369880,-3.613526,1.384242,5.228439,6.320067,4.482222,3.979292,-1.632165],[-4.843573,-4.589459,9.827702,-9.941128,4.016421,6.467429,-8.493142,-4.088136,-5.638013,-2.147407]],[[-8.160822,3.311461,0.476759,0.715932,-4.648035,6.879584,7.979522,-8.927971,3.046181,1.097453],[-7.539482,4.505458,3.379160,1.578361,-3.820581,8.706939,7.108804,-2.713214,-9.545963,-6.771026],[-0.588505,7.893137,6.865088,-8.233314,9.121275,-8.122418,-3.905554,-9.928118,6.679827,7.275278],[9.627317,-0.313412,7.002427,9.232879,-1.734210,-3.402087,-1.080067,-7.833796,3.463488,-9.915008],[-2.688892,-3.699649,-0.089399,-3.409627,6.297220,4.610355,5.928721,3.118159,-8.307869,-8.292820]]], dtype = "float64")#candidate|1525|(2, 5, 10)|const|float64
var_1526 = relay.var("var_1526", dtype = "float64", shape = (2, 5, 10))#candidate|1526|(2, 5, 10)|var|float64
bop_1527 = relay.power(const_1525.astype('float64'), relay.reshape(var_1526.astype('float64'), relay.shape_of(const_1525))) # shape=(2, 5, 10)
bop_1535 = relay.power(bop_1527.astype('float64'), relay.reshape(var_1526.astype('float64'), relay.shape_of(bop_1527))) # shape=(2, 5, 10)
const_1543 = relay.const([[[-4.468448,-2.730693,3.108780,1.691988,-6.829460,6.257588,4.040482,-2.046252,-3.673751,8.176808],[-3.332461,8.193028,2.156194,9.088323,-0.110670,-1.504350,-8.190899,4.887079,8.960007,-5.110188],[-8.881055,-7.593836,9.883086,0.693646,-2.203935,5.500371,3.060524,-6.006616,-6.136388,8.911785],[-5.972671,6.915487,-4.080182,-2.728090,9.732770,2.265295,1.842043,8.472619,8.274616,-1.027922],[-2.488522,-6.614294,-2.384102,-9.330988,-0.748549,5.956959,9.382221,-3.200228,-9.206727,4.697637]],[[5.874460,2.247075,4.986791,5.374904,6.820114,-6.806863,-6.557023,2.012510,4.183026,2.300544],[7.423717,-4.486612,1.881063,3.998743,9.167305,-1.717369,5.596490,6.843285,-7.504075,2.829085],[-6.117946,3.131803,-9.745877,6.899527,-9.523781,-3.044218,-6.798190,-6.865344,5.925457,6.525158],[0.324288,3.541429,2.461461,1.816616,-5.090410,-3.816242,-1.977571,9.294528,-0.716793,-2.669885],[0.322534,4.542294,2.398423,8.398860,7.524812,2.091093,-5.675488,6.097984,-8.797153,-3.255765]]], dtype = "float64")#candidate|1543|(2, 5, 10)|const|float64
bop_1544 = relay.multiply(bop_1527.astype('uint32'), relay.reshape(const_1543.astype('uint32'), relay.shape_of(bop_1527))) # shape=(2, 5, 10)
bop_1547 = relay.not_equal(bop_1535.astype('bool'), relay.reshape(bop_1544.astype('bool'), relay.shape_of(bop_1535))) # shape=(2, 5, 10)
bop_1550 = relay.floor_divide(bop_1544.astype('float32'), relay.reshape(bop_1527.astype('float32'), relay.shape_of(bop_1544))) # shape=(2, 5, 10)
uop_1553 = relay.atan(bop_1535.astype('float32')) # shape=(2, 5, 10)
const_1556 = relay.const([[[-5.032209,-4.557745,-9.666121,8.030058,6.349508,-9.772168,-7.947649,8.341199,-4.495440,-3.287588],[1.160628,6.529464,6.926670,-4.624233,-0.787070,-1.881965,6.780280,0.854596,5.368953,-3.562827],[-1.742340,1.117531,7.110211,9.002590,-3.802898,-0.600889,0.790592,-8.563727,-0.293568,8.915142],[9.785700,-7.292234,-9.050056,-3.594564,-8.202760,0.230162,-4.583148,4.233160,2.694362,2.208605],[4.443319,9.270447,2.932358,3.152130,-9.331954,9.778327,-3.242057,-6.516162,0.983458,-3.115556]],[[2.979240,6.422690,1.949338,8.296559,1.448413,-4.660519,9.283140,4.900984,-5.499624,-5.385841],[-2.938955,-5.958983,3.678572,2.616751,0.084754,4.338156,5.478509,-1.223867,3.938454,8.531618],[7.198607,8.113896,3.411878,0.218026,6.559463,-0.104393,2.899836,4.250611,7.047952,-9.858929],[-0.269768,8.976006,-2.469895,-1.580189,-7.512288,-2.625773,-3.040921,-2.030116,0.484518,9.031357],[2.852507,-2.662849,-1.209803,-9.996250,-3.850375,-7.518614,-1.850087,4.948565,-0.873518,-2.828768]]], dtype = "float64")#candidate|1556|(2, 5, 10)|const|float64
bop_1557 = relay.greater_equal(bop_1527.astype('bool'), relay.reshape(const_1556.astype('bool'), relay.shape_of(bop_1527))) # shape=(2, 5, 10)
output = relay.Tuple([bop_1547,bop_1550,uop_1553,bop_1557,])
output2 = relay.Tuple([bop_1547,bop_1550,uop_1553,bop_1557,])
func_1561 = relay.Function([var_1526,], output)
mod['func_1561'] = func_1561
mod = relay.transform.InferType()(mod)
mutated_mod['func_1561'] = func_1561
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1562 = relay.var("var_1562", dtype = "float64", shape = (2, 5, 10))#candidate|1562|(2, 5, 10)|var|float64
func_1561_call = mutated_mod.get_global_var('func_1561')
call_1563 = func_1561_call(var_1562)
output = call_1563
func_1564 = relay.Function([var_1562], output)
mutated_mod['func_1564'] = func_1564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1587 = relay.var("var_1587", dtype = "float64", shape = (12, 5, 9))#candidate|1587|(12, 5, 9)|var|float64
uop_1588 = relay.sqrt(var_1587.astype('float64')) # shape=(12, 5, 9)
output = relay.Tuple([uop_1588,])
output2 = relay.Tuple([uop_1588,])
func_1592 = relay.Function([var_1587,], output)
mod['func_1592'] = func_1592
mod = relay.transform.InferType()(mod)
var_1593 = relay.var("var_1593", dtype = "float64", shape = (12, 5, 9))#candidate|1593|(12, 5, 9)|var|float64
output = func_1592(var_1593)
func_1594 = relay.Function([var_1593], output)
mutated_mod['func_1594'] = func_1594
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1610 = relay.var("var_1610", dtype = "uint32", shape = (7, 9))#candidate|1610|(7, 9)|var|uint32
var_1611 = relay.var("var_1611", dtype = "uint32", shape = (7, 9))#candidate|1611|(7, 9)|var|uint32
bop_1612 = relay.maximum(var_1610.astype('uint32'), relay.reshape(var_1611.astype('uint32'), relay.shape_of(var_1610))) # shape=(7, 9)
output = relay.Tuple([bop_1612,])
output2 = relay.Tuple([bop_1612,])
func_1616 = relay.Function([var_1610,var_1611,], output)
mod['func_1616'] = func_1616
mod = relay.transform.InferType()(mod)
var_1617 = relay.var("var_1617", dtype = "uint32", shape = (7, 9))#candidate|1617|(7, 9)|var|uint32
var_1618 = relay.var("var_1618", dtype = "uint32", shape = (7, 9))#candidate|1618|(7, 9)|var|uint32
output = func_1616(var_1617,var_1618,)
func_1619 = relay.Function([var_1617,var_1618,], output)
mutated_mod['func_1619'] = func_1619
mutated_mod = relay.transform.InferType()(mutated_mod)
func_360_call = mod.get_global_var('func_360')
func_362_call = mutated_mod.get_global_var('func_362')
call_1654 = func_360_call()
call_1655 = func_360_call()
func_1128_call = mod.get_global_var('func_1128')
func_1130_call = mutated_mod.get_global_var('func_1130')
var_1668 = relay.var("var_1668", dtype = "float64", shape = (90,))#candidate|1668|(90,)|var|float64
call_1667 = relay.TupleGetItem(func_1128_call(relay.reshape(var_1668.astype('float64'), [15, 6])), 0)
call_1669 = relay.TupleGetItem(func_1130_call(relay.reshape(var_1668.astype('float64'), [15, 6])), 0)
output = relay.Tuple([call_1654,call_1667,var_1668,])
output2 = relay.Tuple([call_1655,call_1669,var_1668,])
func_1673 = relay.Function([var_1668,], output)
mod['func_1673'] = func_1673
mod = relay.transform.InferType()(mod)
var_1674 = relay.var("var_1674", dtype = "float64", shape = (90,))#candidate|1674|(90,)|var|float64
output = func_1673(var_1674)
func_1675 = relay.Function([var_1674], output)
mutated_mod['func_1675'] = func_1675
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1198_call = mod.get_global_var('func_1198')
func_1199_call = mutated_mod.get_global_var('func_1199')
call_1682 = func_1198_call()
call_1683 = func_1198_call()
var_1718 = relay.var("var_1718", dtype = "uint32", shape = (4, 14, 5))#candidate|1718|(4, 14, 5)|var|uint32
bop_1719 = relay.greater(call_1682.astype('bool'), relay.reshape(var_1718.astype('bool'), relay.shape_of(call_1682))) # shape=(4, 14, 5)
bop_1722 = relay.greater(call_1683.astype('bool'), relay.reshape(var_1718.astype('bool'), relay.shape_of(call_1683))) # shape=(4, 14, 5)
uop_1730 = relay.cos(bop_1719.astype('float32')) # shape=(4, 14, 5)
uop_1732 = relay.cos(bop_1722.astype('float32')) # shape=(4, 14, 5)
uop_1733 = relay.erf(uop_1730.astype('float32')) # shape=(4, 14, 5)
uop_1735 = relay.erf(uop_1732.astype('float32')) # shape=(4, 14, 5)
var_1736 = relay.var("var_1736", dtype = "float32", shape = (4, 14, 5))#candidate|1736|(4, 14, 5)|var|float32
bop_1737 = relay.bitwise_or(uop_1730.astype('uint64'), relay.reshape(var_1736.astype('uint64'), relay.shape_of(uop_1730))) # shape=(4, 14, 5)
bop_1740 = relay.bitwise_or(uop_1732.astype('uint64'), relay.reshape(var_1736.astype('uint64'), relay.shape_of(uop_1732))) # shape=(4, 14, 5)
bop_1742 = relay.floor_divide(bop_1737.astype('float64'), relay.reshape(uop_1733.astype('float64'), relay.shape_of(bop_1737))) # shape=(4, 14, 5)
bop_1745 = relay.floor_divide(bop_1740.astype('float64'), relay.reshape(uop_1735.astype('float64'), relay.shape_of(bop_1740))) # shape=(4, 14, 5)
uop_1746 = relay.exp(bop_1737.astype('float32')) # shape=(4, 14, 5)
uop_1748 = relay.exp(bop_1740.astype('float32')) # shape=(4, 14, 5)
bop_1751 = relay.subtract(call_1682.astype('int8'), relay.reshape(bop_1742.astype('int8'), relay.shape_of(call_1682))) # shape=(4, 14, 5)
bop_1754 = relay.subtract(call_1683.astype('int8'), relay.reshape(bop_1745.astype('int8'), relay.shape_of(call_1683))) # shape=(4, 14, 5)
output = relay.Tuple([uop_1746,bop_1751,])
output2 = relay.Tuple([uop_1748,bop_1754,])
func_1758 = relay.Function([var_1718,var_1736,], output)
mod['func_1758'] = func_1758
mod = relay.transform.InferType()(mod)
mutated_mod['func_1758'] = func_1758
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1758_call = mutated_mod.get_global_var('func_1758')
var_1760 = relay.var("var_1760", dtype = "uint32", shape = (4, 14, 5))#candidate|1760|(4, 14, 5)|var|uint32
var_1761 = relay.var("var_1761", dtype = "float32", shape = (4, 14, 5))#candidate|1761|(4, 14, 5)|var|float32
call_1759 = func_1758_call(var_1760,var_1761,)
output = call_1759
func_1762 = relay.Function([var_1760,var_1761,], output)
mutated_mod['func_1762'] = func_1762
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1188_call = mod.get_global_var('func_1188')
func_1189_call = mutated_mod.get_global_var('func_1189')
call_1855 = func_1188_call()
call_1856 = func_1188_call()
var_1863 = relay.var("var_1863", dtype = "float64", shape = (12, 13, 2))#candidate|1863|(12, 13, 2)|var|float64
bop_1864 = relay.bitwise_or(call_1855.astype('uint64'), relay.reshape(var_1863.astype('uint64'), relay.shape_of(call_1855))) # shape=(12, 13, 2)
bop_1867 = relay.bitwise_or(call_1856.astype('uint64'), relay.reshape(var_1863.astype('uint64'), relay.shape_of(call_1856))) # shape=(12, 13, 2)
output = bop_1864
output2 = bop_1867
F = relay.Function([var_1863,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1863,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1863= np.array([[[0.108005,9.798547],[0.245148,1.638349],[-0.374760,-1.579052],[-6.271999,2.347780],[-1.406775,-7.857095],[-7.933870,-6.429783],[9.543249,-2.533583],[5.913712,-1.174963],[-0.126370,-7.519374],[-7.161557,-8.750732],[1.943170,-5.348472],[4.586254,-8.844153],[-0.128375,7.668012]],[[5.017782,-8.800534],[9.372823,0.785339],[3.014458,8.594971],[-7.291419,0.376471],[8.350613,3.858388],[-8.757488,7.734591],[9.718983,7.573425],[-6.654226,9.973032],[9.575889,-0.460992],[-4.645312,2.712774],[7.714126,-0.018041],[-1.322431,9.574038],[0.010645,-2.131441]],[[-0.005744,-5.900352],[-8.813533,2.221673],[-3.633599,-3.577499],[-5.371884,-9.144691],[-4.797790,-6.764658],[-2.979828,5.080527],[-8.717873,8.207278],[6.198150,2.562750],[1.993384,-8.372737],[-0.148096,-7.229353],[-7.535744,-2.760880],[9.214292,2.604690],[-2.748437,5.259913]],[[-8.110178,8.341313],[6.094394,9.506741],[-1.332531,-3.643828],[-8.905234,2.857262],[-2.444782,3.152796],[-7.934903,4.032414],[3.679614,-6.261932],[-0.760971,-1.910085],[-4.471451,9.294569],[-2.312332,3.743514],[-7.249386,-6.071734],[-5.113628,5.908850],[1.359585,4.954895]],[[-9.186093,3.153447],[0.385697,7.474479],[-6.901609,6.797944],[8.184672,-1.527191],[7.819157,-5.439791],[-1.825022,-1.176257],[3.652345,1.588914],[-6.762712,-5.758817],[-0.354340,-1.514780],[5.168704,3.212983],[-5.076459,8.780237],[-1.805567,4.218451],[6.186814,1.902356]],[[7.451700,-1.032350],[5.629083,4.419686],[-7.933859,-3.501679],[-1.702493,-8.866206],[-4.327349,6.285641],[-9.606416,-9.832181],[-8.074242,-7.411699],[6.247948,0.621259],[4.800156,2.859956],[-1.052166,5.356866],[7.948042,3.229045],[-1.252536,5.416129],[2.783130,7.979670]],[[1.449927,-8.369568],[-3.844842,8.464049],[-7.879144,-0.042265],[-3.366809,-4.151247],[-0.502223,4.096650],[8.189069,2.571773],[5.141074,-4.621140],[3.964681,-0.315928],[7.378017,6.162323],[-2.811653,-7.493623],[8.733940,-2.679378],[-0.042316,-3.228520],[-3.165472,-2.164193]],[[-7.196355,-0.839267],[7.454817,7.830954],[-0.143579,0.283763],[-8.173975,9.347681],[-4.315095,-6.740928],[-0.642570,6.476193],[6.498906,-6.604781],[-0.195460,-5.362677],[-4.722707,-6.629565],[8.122969,0.494431],[8.457718,-0.506507],[8.159640,-4.924343],[9.498897,7.997165]],[[-2.905487,-9.282211],[1.660492,9.990138],[-7.402378,-7.431838],[-2.686314,-7.668396],[-9.806605,-6.571912],[-8.292658,-4.362789],[-6.937840,8.078712],[8.196486,-1.781000],[-8.885323,4.981572],[8.505561,1.025930],[-5.000348,-1.926978],[-5.484625,6.916190],[-4.075956,-0.478463]],[[-2.547288,-4.137731],[-1.169183,-8.927433],[1.284248,9.419122],[6.107846,3.086687],[0.170701,-1.032366],[-9.793190,1.423769],[8.395432,-1.367887],[-8.799004,9.083681],[5.968291,3.274326],[7.887112,3.000293],[-1.519622,-8.994987],[6.311385,-2.895013],[-1.345381,5.240186]],[[-2.960211,0.874264],[3.823226,5.030767],[3.201086,-6.310054],[6.796025,-6.681025],[8.891017,4.037235],[-8.986271,5.900038],[1.283040,-7.006178],[6.623153,-7.423884],[-0.731814,9.472419],[9.333016,2.015680],[0.105248,4.921932],[-4.670356,-3.616853],[1.139035,1.798036]],[[8.342461,-1.191821],[7.062137,2.517263],[-3.313423,-2.426535],[5.677771,-9.046313],[-0.589895,5.975857],[9.203418,-1.355478],[-2.221449,7.994643],[-9.392535,5.650159],[1.522461,-0.955211],[8.386499,7.417090],[-7.474078,-6.981324],[-7.799895,-6.107132],[6.218445,-2.486740]]], dtype='float64')
module1.set_input('var_1863', input_1863)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1863, )
res3 = intrp3.evaluate()(input_1863, )
res4 = intrp4.evaluate()(input_1863, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_1863', input_1863)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1863, )
res7 = intrp7.evaluate()(input_1863, )
res8 = intrp8.evaluate()(input_1863, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_1863', input_1863)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1863, )
res11 = intrp11.evaluate()(input_1863, )
res12 = intrp12.evaluate()(input_1863, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_1863', input_1863)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1863, )
res15 = intrp15.evaluate()(input_1863, )
res16 = intrp16.evaluate()(input_1863, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_1863', input_1863)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1863, )
res19 = intrp19.evaluate()(input_1863, )
res20 = intrp20.evaluate()(input_1863, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_1863', input_1863)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1863, )
res23 = intrp23.evaluate()(input_1863, )
res24 = intrp24.evaluate()(input_1863, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''21: TVMFuncCall
20: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
19: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
18: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
17: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
16: tvm::transform::Pass::operator()(tvm::IRModule) const
15: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
14: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
10: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''