import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_13 = relay.var("var_13", dtype = "float32", shape = (2, 6))#candidate|13|(2, 6)|var|float32
uop_14 = relay.cosh(var_13.astype('float32')) # shape=(2, 6)
bop_17 = relay.greater(var_13.astype('bool'), relay.reshape(uop_14.astype('bool'), relay.shape_of(var_13))) # shape=(2, 6)
bop_21 = relay.bitwise_or(uop_14.astype('int64'), relay.reshape(bop_17.astype('int64'), relay.shape_of(uop_14))) # shape=(2, 6)
uop_24 = relay.exp(uop_14.astype('float64')) # shape=(2, 6)
bop_28 = relay.less_equal(uop_14.astype('bool'), relay.reshape(bop_21.astype('bool'), relay.shape_of(uop_14))) # shape=(2, 6)
bop_39 = relay.maximum(uop_24.astype('int32'), relay.reshape(bop_21.astype('int32'), relay.shape_of(uop_24))) # shape=(2, 6)
bop_42 = relay.bitwise_xor(bop_28.astype('uint16'), relay.reshape(bop_39.astype('uint16'), relay.shape_of(bop_28))) # shape=(2, 6)
bop_54 = relay.logical_xor(bop_39.astype('uint32'), relay.reshape(bop_17.astype('uint32'), relay.shape_of(bop_39))) # shape=(2, 6)
bop_57 = relay.left_shift(bop_54.astype('int8'), relay.reshape(var_13.astype('int8'), relay.shape_of(bop_54))) # shape=(2, 6)
output = relay.Tuple([bop_42,bop_57,])
output2 = relay.Tuple([bop_42,bop_57,])
func_62 = relay.Function([var_13,], output)
mod['func_62'] = func_62
mod = relay.transform.InferType()(mod)
var_63 = relay.var("var_63", dtype = "float32", shape = (2, 6))#candidate|63|(2, 6)|var|float32
output = func_62(var_63)
func_64 = relay.Function([var_63], output)
mutated_mod['func_64'] = func_64
mutated_mod = relay.transform.InferType()(mutated_mod)
var_75 = relay.var("var_75", dtype = "int8", shape = (5, 15, 1))#candidate|75|(5, 15, 1)|var|int8
const_76 = relay.const([[[10,2,9,3,-7,4,7,-2,-3,6,3,6,4],[9,7,5,-5,-9,9,8,5,5,-9,10,3,6],[9,7,5,-9,4,-2,-2,-5,-2,-8,-6,-10,9],[9,-10,-7,6,2,-10,4,8,-4,6,3,4,-7],[-6,5,7,-9,-8,-5,10,6,2,-3,7,-1,7],[-2,-7,1,-4,-1,10,-9,6,-1,-3,6,8,-6],[-9,9,-8,8,8,1,6,4,-1,2,-8,2,1],[-7,-7,5,7,-3,7,-2,-1,-8,4,2,-4,1],[-9,-3,10,1,-2,-5,-2,-6,10,-3,-1,-7,-2],[10,-3,-8,-3,3,3,-3,2,-4,8,5,-7,10],[-1,7,-8,-9,-8,-5,2,-4,-4,7,-7,-4,10],[7,-10,-9,6,4,1,-8,2,9,3,-8,2,-7],[-6,-6,-10,6,-1,-3,-9,2,-2,-10,-4,-8,-2],[-6,-2,5,-3,4,7,-5,5,5,7,-3,-8,3],[1,2,10,10,-10,1,10,-9,7,5,-4,-3,6]],[[9,-10,9,-8,7,-9,-1,5,-2,-9,-4,-7,-6],[7,-5,9,10,-8,3,8,-5,8,-5,8,-10,2],[-1,2,3,9,4,-2,7,3,-8,-1,-7,-7,-4],[4,3,-9,-5,4,-10,-4,2,1,7,-1,-5,8],[-3,-6,1,10,-6,-8,10,8,6,-6,-7,-10,-1],[9,-3,-9,1,3,5,-8,4,1,10,6,1,-4],[9,5,5,7,3,4,1,-8,3,-9,-1,-3,-10],[-9,-2,-1,9,2,-2,-3,3,10,7,2,5,-10],[-2,9,3,4,3,8,-3,-7,9,1,7,8,9],[-5,1,-3,8,4,-10,-9,-4,-6,-7,-4,-10,2],[6,3,-2,-2,-4,6,6,5,10,10,1,3,-6],[-6,-1,6,-10,5,-7,-5,-1,-7,2,-3,-8,-8],[-7,-8,-9,-1,-3,-8,-6,-5,9,8,-10,6,-8],[6,-10,-6,-7,-1,-9,7,-9,-6,-7,10,8,5],[-4,2,10,2,4,8,-4,-8,-1,-8,-1,7,-3]],[[3,6,1,-10,6,5,-9,-7,2,6,-6,-6,-9],[-7,4,-5,3,-8,-3,-9,8,6,5,-4,5,-9],[-9,5,2,4,4,-7,-1,1,-1,3,-6,-7,-2],[-8,-1,8,-3,-7,5,-3,9,3,-4,3,7,-7],[7,-8,4,-6,4,-6,4,-2,-5,7,-4,5,7],[3,8,-8,1,3,-3,-4,-2,-2,4,-7,-8,4],[-5,7,-8,5,-8,10,1,9,-2,-9,-3,-1,6],[7,-10,-3,1,4,-2,-5,4,-4,-9,-8,-5,-5],[9,-7,-2,6,-5,-7,-3,-6,-2,5,-8,-8,1],[-10,-3,5,9,-7,-4,4,-6,-6,2,1,-4,-9],[-5,-3,-2,-3,6,-9,9,7,-10,5,-2,4,4],[7,6,-4,2,9,8,3,9,-2,-7,-4,-10,5],[-9,-3,6,4,-7,-3,6,4,-4,-10,8,-1,-1],[-4,-3,10,-9,8,-6,-7,1,-1,-2,10,2,10],[4,-7,-6,7,-9,3,3,-3,-2,-1,2,9,-8]],[[3,1,-2,-3,-1,9,10,6,-7,-3,-7,5,-9],[7,-3,8,-5,-7,5,5,3,-5,-5,6,-9,4],[-5,1,6,-1,5,6,8,8,-7,1,-10,-3,-7],[-6,-8,-10,9,-7,1,5,7,7,-7,9,1,-6],[-4,3,7,-8,10,-8,-3,-6,-2,2,4,-5,6],[7,-1,8,1,1,-1,-5,-8,1,-7,-8,8,8],[-1,5,6,5,-6,-7,4,-6,-6,7,-1,7,-3],[-9,-7,5,2,5,5,-7,5,-7,-3,-6,-4,-5],[1,-5,9,9,4,3,-7,6,-10,-2,-9,6,4],[1,6,2,-9,6,-4,-3,-9,4,5,-8,5,10],[9,-7,7,-10,5,-10,1,-2,1,1,2,-7,-7],[1,-5,5,-6,-6,10,6,9,10,2,-5,7,-4],[-3,-7,-4,-10,1,2,8,10,5,3,-4,6,-3],[10,6,1,2,2,8,6,9,-5,-7,5,3,-8],[9,2,2,5,3,-1,-4,3,-5,9,7,1,1]],[[8,5,10,7,-7,-3,10,8,2,-4,-6,-4,-5],[1,6,5,9,-9,4,-2,-6,-3,2,8,7,-1],[-3,10,-7,-5,6,-9,7,-1,-4,2,-7,-6,10],[4,-6,-10,9,6,-2,1,10,-10,-5,-8,5,9],[-8,-2,-1,-6,9,-7,-8,6,-5,-6,8,3,-9],[4,-2,-6,10,-9,-2,7,2,2,8,-8,9,-7],[1,10,-3,-2,7,-7,5,7,2,-1,-9,-4,4],[-9,7,-10,8,-6,2,7,-7,-8,10,-2,-1,-7],[-9,-1,-3,6,8,8,-5,8,6,9,-8,8,4],[10,-4,-8,-8,-7,-9,2,-10,7,7,-3,1,-8],[10,-8,-7,-10,7,-5,-6,5,5,7,10,-9,1],[1,7,-2,-7,-9,-3,5,-8,-5,1,2,-9,-1],[4,7,-3,9,8,-7,6,-9,-7,-8,-5,9,-5],[3,-3,5,4,5,8,9,5,-3,4,-1,6,-3],[-4,-8,5,-5,8,8,-9,1,-6,5,8,4,10]]], dtype = "int8")#candidate|76|(5, 15, 13)|const|int8
bop_77 = relay.bitwise_and(var_75.astype('int8'), const_76.astype('int8')) # shape=(5, 15, 13)
func_62_call = mod.get_global_var('func_62')
func_64_call = mutated_mod.get_global_var('func_64')
var_90 = relay.var("var_90", dtype = "float32", shape = (12,))#candidate|90|(12,)|var|float32
call_89 = relay.TupleGetItem(func_62_call(relay.reshape(var_90.astype('float32'), [2, 6])), 1)
call_91 = relay.TupleGetItem(func_64_call(relay.reshape(var_90.astype('float32'), [2, 6])), 1)
func_62_call = mod.get_global_var('func_62')
func_64_call = mutated_mod.get_global_var('func_64')
call_97 = relay.TupleGetItem(func_62_call(relay.reshape(call_89.astype('float32'), [2, 6])), 0)
call_98 = relay.TupleGetItem(func_64_call(relay.reshape(call_89.astype('float32'), [2, 6])), 0)
bop_99 = relay.bitwise_xor(bop_77.astype('int32'), relay.reshape(const_76.astype('int32'), relay.shape_of(bop_77))) # shape=(5, 15, 13)
output = relay.Tuple([call_89,var_90,call_97,bop_99,])
output2 = relay.Tuple([call_91,var_90,call_98,bop_99,])
func_104 = relay.Function([var_75,var_90,], output)
mod['func_104'] = func_104
mod = relay.transform.InferType()(mod)
var_105 = relay.var("var_105", dtype = "int8", shape = (5, 15, 1))#candidate|105|(5, 15, 1)|var|int8
var_106 = relay.var("var_106", dtype = "float32", shape = (12,))#candidate|106|(12,)|var|float32
output = func_104(var_105,var_106,)
func_107 = relay.Function([var_105,var_106,], output)
mutated_mod['func_107'] = func_107
mutated_mod = relay.transform.InferType()(mutated_mod)
var_109 = relay.var("var_109", dtype = "float64", shape = (12, 10))#candidate|109|(12, 10)|var|float64
var_110 = relay.var("var_110", dtype = "float64", shape = (12, 10))#candidate|110|(12, 10)|var|float64
bop_111 = relay.subtract(var_109.astype('float64'), relay.reshape(var_110.astype('float64'), relay.shape_of(var_109))) # shape=(12, 10)
output = relay.Tuple([bop_111,])
output2 = relay.Tuple([bop_111,])
func_119 = relay.Function([var_109,var_110,], output)
mod['func_119'] = func_119
mod = relay.transform.InferType()(mod)
mutated_mod['func_119'] = func_119
mutated_mod = relay.transform.InferType()(mutated_mod)
func_119_call = mutated_mod.get_global_var('func_119')
var_121 = relay.var("var_121", dtype = "float64", shape = (12, 10))#candidate|121|(12, 10)|var|float64
var_122 = relay.var("var_122", dtype = "float64", shape = (12, 10))#candidate|122|(12, 10)|var|float64
call_120 = func_119_call(var_121,var_122,)
output = call_120
func_123 = relay.Function([var_121,var_122,], output)
mutated_mod['func_123'] = func_123
mutated_mod = relay.transform.InferType()(mutated_mod)
var_162 = relay.var("var_162", dtype = "float32", shape = (16, 6, 12))#candidate|162|(16, 6, 12)|var|float32
const_163 = relay.const([[[7.566745,-7.209825,1.548787,-4.122964,-6.087344,-9.020427,-2.852064,7.298138,9.439787,7.230985,3.614907,-2.228278],[-9.365036,2.471218,8.879337,7.903142,-0.725050,7.659838,7.578066,6.374030,-3.291810,-2.016673,6.019105,3.629880],[8.448527,-2.023939,-7.910551,-2.925570,-4.628982,-5.586554,-2.666748,-6.122071,-0.697811,-7.886629,2.509964,5.436225],[-3.875757,9.872660,3.022795,-1.159320,2.344163,7.402725,1.865950,-4.077857,4.749588,-9.371497,-0.827229,2.721727],[-1.487612,-5.857319,3.028788,2.949055,0.123019,-0.291561,3.160151,3.972596,1.241705,7.718307,-1.467329,-0.061889],[-4.603494,-2.621374,-4.163420,6.443419,7.711055,-3.124807,9.716253,-2.875097,-6.722616,6.383272,-5.502276,-0.011952]],[[-3.383556,-7.021588,-0.131703,-7.837488,4.359385,6.591534,-4.009348,8.788104,9.574867,1.024561,6.350233,1.953264],[-3.231773,-6.233112,-3.545441,-1.350663,-2.618203,6.789107,-6.359507,7.024615,-1.733371,8.003701,-8.458721,5.010362],[-9.425163,-9.281994,-5.340594,-7.143301,6.132238,6.579163,2.367322,-4.158355,9.718412,-9.196596,4.723105,6.880482],[1.372340,9.806761,7.716796,2.437342,4.826093,-5.482923,1.368021,-9.082260,9.830517,-4.650477,1.622935,-8.528198],[5.569052,-6.462745,-4.543880,-9.846959,-8.275854,4.515192,-9.865663,-9.881534,4.266028,-6.151077,3.369216,5.231420],[-2.610691,2.213601,-0.093358,-2.457794,2.675772,-8.880830,7.653081,1.773857,-9.915099,4.250890,2.166994,-9.509419]],[[-9.349070,1.875788,1.383052,-0.625560,0.262139,-8.327520,8.979375,2.026872,7.900628,2.543479,-2.087087,9.419145],[3.980685,-1.449746,-2.520065,3.036253,8.519062,-9.138671,3.473007,-3.893647,-2.486383,-0.547566,-9.744165,-6.091112],[-1.222469,-0.190813,-1.355839,9.462824,-6.755756,-9.278949,0.471733,-9.994796,1.521139,6.921814,5.230677,5.815746],[-2.424350,-1.350531,9.767419,2.993803,-8.561963,-7.137449,0.936982,-6.152162,1.030216,-7.450291,8.433936,1.191228],[0.562559,7.520052,5.070423,-0.448754,6.303612,-6.040510,-6.911810,-4.408551,7.632898,3.433414,-7.897137,-4.633673],[6.474780,-4.367500,2.395178,4.592513,1.646810,-5.696017,9.099531,-4.019799,6.206164,4.308062,-0.499410,-4.725097]],[[-3.047253,-7.903864,8.613620,2.800350,9.394007,5.862757,3.350295,4.607866,-7.826658,6.101187,9.682578,-9.805948],[-3.826860,-8.480728,2.163719,-3.860078,-6.895791,-1.928999,-0.666386,-2.952645,-6.187581,-9.037721,-2.723229,-0.352375],[5.248926,-6.575114,6.198634,6.430391,-0.986334,0.776018,-3.941123,-2.916512,-0.226185,2.338698,-9.427701,9.325398],[3.477834,-6.443965,7.957995,-9.058010,1.069096,9.501010,3.522446,-8.950040,-3.467145,7.841951,-4.924277,-2.525248],[1.607763,6.039577,3.032536,-7.825389,-6.665699,7.972425,3.075842,4.267855,-7.634194,4.588140,8.247098,-8.203106],[7.839349,0.969107,5.827787,2.540832,2.654874,-7.387786,7.178254,3.743318,5.756239,2.782044,1.443876,1.290109]],[[-9.094100,1.623559,9.779992,6.185734,-1.621972,-3.284125,-8.519512,-4.793554,-1.483337,2.677605,2.001677,8.120751],[6.207082,7.168660,6.407463,-6.481982,1.442576,-9.870015,9.648576,-7.917496,-2.333242,2.897186,-6.852403,-1.678906],[-7.920078,-4.811273,-4.765158,6.702831,-3.040742,-1.197106,0.425011,7.432727,6.048663,7.389823,-3.240129,-1.060455],[-9.898474,2.849837,6.037343,0.579397,5.538408,3.210538,-1.061525,1.894475,4.023578,-2.968524,1.961639,3.889342],[0.742300,6.381752,-7.853225,-9.277177,-4.453834,0.728287,3.486380,8.093957,-5.350252,7.670032,3.683273,-5.966993],[-7.556003,-7.544270,-2.233215,-3.581106,-5.252146,6.816689,7.007769,-8.578813,-8.269346,5.178121,-3.465527,-0.969489]],[[4.726106,3.486735,4.881797,7.622065,8.415033,9.875566,-6.159814,7.211622,3.143767,1.836073,1.876890,-6.348533],[-6.267012,0.785516,4.091923,9.785741,1.569958,3.159433,-9.770628,2.609017,-6.123650,-7.241255,-2.195987,-2.699820],[-1.752172,1.993353,3.593229,5.920536,5.883815,-3.205519,0.991318,-8.123934,6.582324,5.490357,-0.308866,7.219730],[4.333165,2.023486,8.016835,6.227008,-0.727617,7.359438,4.127527,4.125294,-3.699069,7.781949,4.498801,-6.655464],[6.922600,6.323463,-3.634188,1.307092,-5.996766,-2.774512,-4.024729,3.073313,-7.446631,-2.303755,-1.669561,-7.187403],[9.249747,-9.997023,5.608831,1.699071,-7.473040,4.343726,8.704072,-8.467104,1.686945,-9.654751,-0.213067,-1.870648]],[[-8.690587,-8.487372,-7.275118,3.186506,-6.047469,4.020075,0.656886,2.872112,8.196797,-0.202740,9.049649,-9.406769],[5.743271,-7.280552,-8.528938,-6.959074,5.944878,7.856254,-2.822743,4.061929,-5.491259,-1.006373,-6.499842,5.061769],[-6.707231,-8.159059,-7.979690,3.674285,5.808379,-0.142262,-5.020917,8.635635,3.985468,-0.887072,0.731536,6.769497],[-3.154487,2.874196,3.268794,-6.481551,9.833489,8.616245,8.607665,2.812422,-1.093516,-9.574924,7.772213,-5.320276],[8.776687,-2.771970,-2.718510,-1.854680,7.896750,8.893547,7.554808,4.203681,4.227832,-9.504220,3.646037,9.660255],[8.442908,-1.393934,5.710674,-1.282470,6.848357,-9.060440,-1.893540,-1.540323,-9.312748,-0.078083,3.391433,-3.438826]],[[-8.432460,3.369348,7.648940,2.359503,6.978213,3.818107,-8.013648,3.124745,-7.562501,9.187761,-6.070051,-5.987928],[-5.118004,-4.401526,-9.012871,-0.966858,-0.849089,-1.005304,-9.386728,-7.348995,-4.886747,2.237664,2.559735,-0.399414],[-6.947617,-6.148050,-3.142529,9.926130,7.870373,-7.769749,3.137601,-8.410490,3.217966,1.744603,-1.593762,3.357697],[9.342688,1.316065,4.186463,-4.579684,-2.952604,-3.329337,6.221149,4.704435,-0.336279,3.338631,-9.562916,7.802165],[-9.657213,1.443708,-4.449086,8.516352,7.159876,8.193193,5.885031,-9.671651,-0.780661,-3.710548,0.287697,1.630920],[7.926012,3.804388,-5.669913,5.385952,5.846387,-8.761045,0.292488,1.558212,-8.856172,1.014767,-5.382706,7.541533]],[[4.534920,-1.823791,1.798920,-5.520944,-3.543031,-4.844896,-4.560567,-8.467118,7.257589,0.156103,-8.794849,2.933652],[6.479419,-1.755135,7.944903,2.259737,3.622640,6.516746,4.563856,-4.065395,3.152386,-8.015971,-3.175963,7.801024],[5.486577,1.798891,2.606222,5.580276,3.856645,-9.182382,6.288219,3.917559,4.175556,-7.706656,-2.172823,6.717164],[9.751825,8.375371,-3.047155,5.577245,-0.502134,7.337766,-8.712819,-6.339766,6.001342,-7.252569,-2.380896,8.528785],[-7.753169,-5.780391,-7.280168,-8.167511,-0.916835,-9.459942,-0.527109,-3.242436,-8.413220,-2.524216,-2.671267,-6.779148],[6.811552,2.076773,1.397960,3.965904,-8.491301,-7.833035,8.951471,-4.320649,7.224501,-7.695146,2.908114,-0.142565]],[[5.903963,-7.882401,0.467434,2.761104,1.843504,8.736943,8.490354,-1.078048,-2.816396,6.024343,2.091878,4.061016],[-3.672374,-3.720525,6.485224,7.975028,5.521416,-7.183820,-6.023050,3.926435,-1.945383,-9.251883,7.174917,3.637593],[-5.913872,-9.843877,4.851276,-0.554602,2.252997,5.684090,3.951960,7.261101,-5.225986,9.668430,2.973611,-6.086459],[8.627652,-6.137900,6.396176,6.016877,-8.338866,9.537253,5.213181,8.675107,-2.308003,5.393717,1.682064,-6.054780],[8.304661,-3.476094,-4.105161,-5.604288,-4.353466,-6.089791,6.509349,3.385648,2.827379,9.177150,-0.877694,-9.625336],[5.866437,-3.402582,-4.662726,-3.624316,-0.251388,3.743063,5.169523,6.380770,-1.181661,1.958994,2.018909,3.779603]],[[7.487488,2.527050,0.199412,-4.115735,-4.899568,7.036572,2.349860,-8.275092,-4.412685,-8.995787,8.717798,5.678908],[5.328583,7.625357,4.406220,-6.041430,2.367119,-7.975948,5.510435,9.821602,1.017048,-6.083616,-5.570645,9.560098],[-0.459830,-8.484486,2.306832,3.110316,-7.946549,2.434645,5.379772,-5.337365,8.961258,4.834797,7.573815,-0.544449],[1.698560,2.483857,5.666468,2.939470,-7.655479,-9.509335,9.279753,3.235158,-8.560344,-7.788228,-4.400599,6.550080],[4.894957,-9.245243,2.749158,-0.841410,1.231343,4.722224,-7.522064,7.385689,-2.551662,-1.529788,0.120789,-8.134821],[-0.406741,-8.574561,7.737273,-8.536947,-6.295732,-6.364465,-2.095207,1.112523,-5.047235,-1.362802,3.010076,-2.746581]],[[2.193586,5.536296,-5.155253,8.708889,-1.715205,8.682590,8.696893,9.939357,-7.546098,4.321219,-6.260863,-2.185675],[9.219739,4.839732,-1.231557,4.249511,-5.530466,6.821403,-2.190597,5.297419,-4.231964,-7.888088,-6.575340,3.327665],[9.859633,5.938876,7.225497,2.763774,4.309559,8.457286,-0.212947,3.952006,-2.130393,4.785738,8.944274,7.673153],[5.291804,3.106308,4.920589,-2.784966,-7.351235,-3.219832,7.356399,-4.941556,-1.848347,5.662538,-7.091413,4.120730],[5.273058,5.588327,6.465936,-4.052335,7.678540,6.422168,-2.749520,7.211774,1.202953,0.402170,4.457744,0.870022],[3.255365,-2.881948,-9.045815,-2.133314,-1.641763,-5.307620,9.851567,-9.270852,7.140050,1.436434,1.830134,-6.577400]],[[8.090747,-3.894350,9.205560,-5.530599,-0.983444,3.756978,1.235154,-3.951012,1.301422,7.036303,6.049128,1.468655],[5.423158,-7.760616,-2.460610,-6.996689,-9.829879,-4.314187,-9.240750,8.534183,-4.413355,4.736044,-8.048004,4.126227],[6.270605,-0.020580,3.264169,1.202017,2.407979,9.220947,-0.894383,9.629607,-3.792324,-6.069258,-1.178654,0.742103],[-7.508361,-4.519386,-5.349598,0.852504,9.219357,-5.209774,9.539560,9.895351,-0.200916,-1.571995,-2.425991,4.129166],[-0.822038,-5.536412,8.789579,2.616352,-1.137996,7.673537,4.315275,-1.036589,-2.727049,4.536783,-2.448180,-6.328625],[-9.275304,7.623616,-5.812448,3.254765,8.430903,-1.204581,-5.948316,-9.135029,8.471844,3.548910,-9.252064,4.604274]],[[4.862568,1.633583,-1.559867,-2.218824,-1.738344,0.077889,-3.433122,2.893198,-9.074613,0.597524,6.103492,-2.719598],[4.153228,-8.292933,5.056044,-2.512800,-8.346206,4.066064,-2.392109,8.552683,5.607831,0.412658,-7.945557,7.438782],[-7.457421,8.492458,9.083102,5.415668,4.481904,-5.710022,9.616371,8.149800,-3.186110,-4.345268,-3.956466,-5.685529],[9.530626,-4.157453,-7.129706,-4.471509,-6.485781,9.264755,8.503769,-4.626736,-9.443458,-1.545127,4.638972,7.489142],[-8.784709,-8.769451,-4.851699,-2.087139,4.535231,2.686406,9.819498,-1.619566,8.951822,9.813469,-3.429013,4.349748],[-4.292226,3.048815,-8.574246,-3.027033,-0.444383,4.783015,0.885869,-0.749030,-8.106393,-3.794967,-2.756879,7.302939]],[[-7.753116,-8.100195,-9.134067,4.690838,9.681635,6.136505,-1.273506,-8.682328,-8.561103,6.299056,-1.764387,-4.752213],[2.986371,-2.315978,-3.128267,7.170916,-5.938710,8.637562,4.646768,4.125720,7.664792,-9.834597,-0.648043,5.894032],[6.079291,-0.296988,-7.745284,-8.651948,-3.662503,5.185222,6.100017,1.155528,5.157938,-1.632172,-5.740081,4.369732],[-9.616912,1.479525,9.083704,-2.679535,3.104211,-3.459557,8.506876,2.857826,5.433086,-6.202459,3.812916,-9.719370],[1.259695,3.390856,-3.233597,8.551341,8.914688,-0.459166,3.609141,5.434806,4.278784,6.570053,-0.197851,-2.394288],[0.612636,-6.071813,5.086203,0.048370,-1.978844,-5.791889,-5.894884,1.415145,-6.863319,-3.795959,-9.025702,-1.396958]],[[0.947234,8.195744,-5.993163,9.885050,-9.650215,-6.497697,-2.232469,-3.603524,-8.389114,2.652487,0.322667,-9.944501],[-0.977534,8.888887,-3.089539,4.748951,0.885586,-3.221531,-5.547345,-7.631515,3.456737,-6.370273,-9.601278,-8.766490],[7.765193,7.562297,1.777027,-4.083350,-0.410772,-1.901735,2.400080,-9.294675,-3.163459,-8.520576,-7.342263,-2.671641],[3.075097,6.379298,9.568536,5.745190,-1.539898,3.143739,-7.597839,3.864102,-6.981616,-0.094968,5.290215,-5.505408],[4.736686,0.679142,5.892947,3.365462,-2.318964,2.876006,5.577066,2.957021,6.713617,3.343728,-1.066149,0.747025],[-0.565841,9.192528,-3.922882,-6.287245,-8.582519,-8.273721,6.604627,2.399232,-8.558792,1.684983,6.991509,2.524704]]], dtype = "float32")#candidate|163|(16, 6, 12)|const|float32
bop_164 = relay.floor_divide(var_162.astype('float32'), relay.reshape(const_163.astype('float32'), relay.shape_of(var_162))) # shape=(16, 6, 12)
func_119_call = mod.get_global_var('func_119')
func_123_call = mutated_mod.get_global_var('func_123')
var_172 = relay.var("var_172", dtype = "float64", shape = (120,))#candidate|172|(120,)|var|float64
call_171 = relay.TupleGetItem(func_119_call(relay.reshape(var_172.astype('float64'), [12, 10]), relay.reshape(var_172.astype('float64'), [12, 10]), ), 0)
call_173 = relay.TupleGetItem(func_123_call(relay.reshape(var_172.astype('float64'), [12, 10]), relay.reshape(var_172.astype('float64'), [12, 10]), ), 0)
var_180 = relay.var("var_180", dtype = "float64", shape = (120,))#candidate|180|(120,)|var|float64
bop_181 = relay.logical_xor(var_172.astype('int8'), relay.reshape(var_180.astype('int8'), relay.shape_of(var_172))) # shape=(120,)
uop_185 = relay.asin(bop_181.astype('float32')) # shape=(120,)
uop_187 = relay.atan(uop_185.astype('float64')) # shape=(120,)
bop_189 = relay.greater_equal(uop_187.astype('bool'), relay.reshape(bop_181.astype('bool'), relay.shape_of(uop_187))) # shape=(120,)
func_119_call = mod.get_global_var('func_119')
func_123_call = mutated_mod.get_global_var('func_123')
call_192 = relay.TupleGetItem(func_119_call(relay.reshape(uop_185.astype('float64'), [12, 10]), relay.reshape(call_171.astype('float64'), [12, 10]), ), 0)
call_193 = relay.TupleGetItem(func_123_call(relay.reshape(uop_185.astype('float64'), [12, 10]), relay.reshape(call_171.astype('float64'), [12, 10]), ), 0)
uop_196 = relay.exp(bop_189.astype('float32')) # shape=(120,)
bop_198 = relay.less_equal(uop_196.astype('bool'), relay.reshape(bop_189.astype('bool'), relay.shape_of(uop_196))) # shape=(120,)
func_62_call = mod.get_global_var('func_62')
func_64_call = mutated_mod.get_global_var('func_64')
var_203 = relay.var("var_203", dtype = "float32", shape = (1, 12))#candidate|203|(1, 12)|var|float32
call_202 = relay.TupleGetItem(func_62_call(relay.reshape(var_203.astype('float32'), [2, 6])), 0)
call_204 = relay.TupleGetItem(func_64_call(relay.reshape(var_203.astype('float32'), [2, 6])), 0)
output = relay.Tuple([bop_164,call_171,call_192,bop_198,call_202,var_203,])
output2 = relay.Tuple([bop_164,call_173,call_193,bop_198,call_204,var_203,])
func_211 = relay.Function([var_162,var_172,var_180,var_203,], output)
mod['func_211'] = func_211
mod = relay.transform.InferType()(mod)
mutated_mod['func_211'] = func_211
mutated_mod = relay.transform.InferType()(mutated_mod)
func_211_call = mutated_mod.get_global_var('func_211')
var_213 = relay.var("var_213", dtype = "float32", shape = (16, 6, 12))#candidate|213|(16, 6, 12)|var|float32
var_214 = relay.var("var_214", dtype = "float64", shape = (120,))#candidate|214|(120,)|var|float64
var_215 = relay.var("var_215", dtype = "float64", shape = (120,))#candidate|215|(120,)|var|float64
var_216 = relay.var("var_216", dtype = "float32", shape = (1, 12))#candidate|216|(1, 12)|var|float32
call_212 = func_211_call(var_213,var_214,var_215,var_216,)
output = call_212
func_217 = relay.Function([var_213,var_214,var_215,var_216,], output)
mutated_mod['func_217'] = func_217
mutated_mod = relay.transform.InferType()(mutated_mod)
var_249 = relay.var("var_249", dtype = "float64", shape = (14, 2, 8))#candidate|249|(14, 2, 8)|var|float64
uop_250 = relay.log10(var_249.astype('float64')) # shape=(14, 2, 8)
output = uop_250
output2 = uop_250
func_252 = relay.Function([var_249,], output)
mod['func_252'] = func_252
mod = relay.transform.InferType()(mod)
mutated_mod['func_252'] = func_252
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "float64", shape = (14, 2, 8))#candidate|253|(14, 2, 8)|var|float64
func_252_call = mutated_mod.get_global_var('func_252')
call_254 = func_252_call(var_253)
output = call_254
func_255 = relay.Function([var_253], output)
mutated_mod['func_255'] = func_255
mutated_mod = relay.transform.InferType()(mutated_mod)
var_272 = relay.var("var_272", dtype = "int16", shape = ())#candidate|272|()|var|int16
var_273 = relay.var("var_273", dtype = "int16", shape = (11, 16, 2))#candidate|273|(11, 16, 2)|var|int16
bop_274 = relay.equal(var_272.astype('bool'), var_273.astype('bool')) # shape=(11, 16, 2)
bop_281 = relay.subtract(var_272.astype('uint64'), bop_274.astype('uint64')) # shape=(11, 16, 2)
uop_288 = relay.asinh(bop_281.astype('float32')) # shape=(11, 16, 2)
func_211_call = mod.get_global_var('func_211')
func_217_call = mutated_mod.get_global_var('func_217')
const_291 = relay.const([7.717722,-3.190707,-6.105921,-7.753296,2.900504,-2.666518,8.549235,-5.672195,-8.117153,6.899070,-2.619742,-7.104122,3.185919,6.638216,-7.021713,7.137880,-6.909869,5.080091,-8.818252,9.538305,9.968730,8.476245,-1.971250,-0.673164,-8.787589,-6.434219,1.571162,-5.212083,-0.817406,-8.482868,-9.993964,-6.305960,7.696106,7.258818,1.472854,2.424478,-1.296325,-7.131043,-4.643011,-0.573934,-1.695530,-4.775243,5.790402,5.512934,-3.114032,7.933570,1.041144,9.438478,1.696934,-3.085242,8.490612,9.189739,-3.615938,-2.885777,0.058532,5.540536,4.509468,1.792309,4.149389,-7.230950,-8.991538,-3.362568,1.261535,-4.375567,1.392383,3.310072,1.352604,-5.847302,-2.261825,-2.883585,7.917686,-1.799855,1.434277,-4.693324,-3.055044,-2.613810,-3.978448,-9.159171,-4.550412,-0.125430,1.266670,-2.731961,-9.699202,-3.863579,1.739456,-6.256789,-7.900982,1.138270,2.157075,-2.041504,-5.640564,-5.703036,-3.349990,-6.512902,-3.133537,-7.477907,1.762182,-8.977629,0.985908,-0.045747,2.898094,-6.953843,9.973006,-6.112214,7.865974,-5.014179,7.949257,-8.337016,0.995917,6.050305,3.264692,7.499857,-2.643996,-5.346946,-9.244963,2.343331,-0.291944,-2.548253,5.837935,-9.395737,4.920736,8.905861,1.800928,-8.725123,-5.337966,-7.603291,2.232108,-4.553163,7.868775,-0.806505,-0.069517,-0.061556,3.050563,-2.095399,4.113212,9.572858,-6.953606,4.707450,-1.178233,-9.301401,9.971992,-1.674493,4.847197,2.981572,3.718549,-9.620123,0.894827,-7.155495,9.443131,1.881814,1.720370,-1.902817,8.031541,-4.696367,7.496722,4.056408,3.486066,-0.493134,-4.520009,-7.237634,9.812619,1.611414,0.168534,9.382281,9.792320,9.353400,5.807450,-4.381630,2.476256,-2.640359,6.553037,-6.250373,0.993226,7.800065,-5.482564,9.145210,7.983047,-8.769394,6.279243,4.616365,-6.375734,1.451905,-9.098843,0.323743,-9.008781,4.083076,9.887619,9.770195,-7.009069,-2.286600,-6.856712,-9.318994,7.201420,-4.731471,-6.629866,1.140096,-2.134022,-7.995612,-6.213781,-3.417520,5.147320,-8.048351,4.756707,6.636819,7.652632,-1.228443,6.555159,3.664940,5.340376,8.084164,6.163761,2.850324,-5.112833,0.262594,7.480428,4.220733,0.836880,0.306217,4.672029,-1.590292,-4.243216,-2.572994,1.948365,-3.135488,8.350458,-5.976038,-5.699429,-1.265415,8.847732,2.934317,-6.916019,9.310316,8.229305,-4.797011,6.823769,4.693671,-8.393915,5.492763,1.347265,-9.846920,-2.179708,2.297013,-6.932285,1.985382,2.492886,-7.419184,6.394357,4.953419,-1.987541,-4.240089,-1.781661,-6.530430,4.444254,-4.297541,5.659889,-9.401244,0.974553,9.205085,8.106203,4.480969,3.376484,-8.657444,2.486970,1.525465,-5.574833,5.576033,8.334688,4.235972,-1.201938,5.584619,-9.577567,0.494992,-1.962213,-2.519892,6.874854,-1.005867,6.121863,5.524680,5.993896,2.195613,-0.595358,-5.483860,-6.176607,4.834454,-6.238913,-1.520443,-9.765090,-0.845447,-9.650065,-8.535901,3.940448,1.144494,-3.027282,8.231208,5.931550,1.166332,-1.301050,-7.422307,8.069851,0.608313,-1.748321,-1.999544,0.969973,9.226275,6.163487,7.183482,9.774847,-3.830139,6.588286,2.341103,-8.322837,1.421541,-4.319982,4.408252,3.845566,2.993125,-0.236048,-5.752343,1.812908,-7.285382,1.653431,1.407266,-6.285515,-5.560205,3.305205,-0.617399,-2.230040,-2.449143,3.128876,-6.526451,-6.466983,1.699523,-3.763813,-9.202460,7.538139,-6.276282,-3.544256,1.141220,6.031478,6.672515,8.840162,-9.429748,0.172229,9.376576,-3.330477,1.996130,4.623611,-4.512502,-0.215620,1.656784,7.710653,-3.845258,3.218579,-7.250973,-1.534712,-5.891720,2.301643,3.119351,8.182048,-5.621776,9.883730,4.588894,-6.576264,-5.528499,-0.894565,-4.277597,5.732079,-3.097007,5.919543,-0.628885,-4.453721,1.918220,4.241025,-1.185847,1.169475,5.324251,-6.899355,-9.372382,-4.489612,8.632898,-6.780169,-3.897488,-3.827807,6.648210,5.586490,4.879205,-8.232093,2.783960,-8.578552,-9.960722,-1.328990,-1.883217,-4.747852,8.925314,0.437949,-8.742525,8.819927,3.955767,0.982935,5.815624,-8.505405,-3.805577,1.425200,2.494253,1.295166,-0.164891,6.531689,-0.184095,1.757068,-3.232889,-4.152939,-1.370746,5.735589,7.469261,-3.039746,7.592214,-4.101233,2.913894,4.703472,5.631909,8.426913,4.286205,-4.640950,-1.643030,5.017895,-4.672142,1.787739,8.771803,-2.174768,5.352051,5.604825,-3.212731,-0.039350,-7.236445,-8.254222,-1.612437,3.664322,-8.395788,0.547098,8.952167,6.205597,-2.117498,-8.341126,1.069883,2.413462,-6.008881,5.990782,-6.149219,-8.167711,9.070515,-5.660771,-8.690838,1.000181,6.043059,-0.857212,-7.892714,-3.644909,-5.535194,-5.782675,6.998145,5.604745,7.534126,-5.550714,-7.699894,-8.582543,9.503381,-0.484427,-7.498517,-0.445354,-0.639887,-6.412525,-7.233298,-8.970663,5.483257,-1.586929,-1.964339,-9.516795,-3.404327,8.082911,-2.788138,3.019131,-1.445818,2.721453,7.772855,-5.128012,-8.739699,-7.464716,0.660069,-8.185698,-3.386469,6.887959,-6.072150,-6.385034,0.584117,8.736263,9.219965,8.744616,-0.294420,-0.588314,6.605725,-1.134809,3.751476,-1.320582,7.830440,3.370575,-3.808129,-3.755876,5.641278,3.511378,-0.865372,-7.968482,7.485675,2.402105,-2.875674,-5.005175,-5.118378,-3.187236,8.003274,-4.910457,3.725101,-2.144028,-9.305235,-8.477109,0.220328,-8.730052,-7.767476,1.538039,9.792505,-4.337438,-1.114976,1.887829,6.230519,-5.379655,-1.604464,6.712377,7.408624,4.650712,-0.800306,5.131431,-6.225575,0.725341,-5.192186,-4.760995,5.821505,8.930642,2.649449,-6.182816,-2.434297,-6.076701,6.666542,-6.190682,1.807858,-2.541509,6.480544,-0.386734,-6.076941,1.682213,-7.719044,-1.714160,-0.399766,-7.731519,-1.113502,-4.022156,4.848097,3.765303,-2.987734,7.465592,-7.818892,9.844911,1.287858,1.728637,4.021910,-5.688633,-3.009819,9.355017,5.964782,1.299318,-8.620970,-6.216468,-5.631717,-8.079294,-5.036010,-8.244418,2.706020,-2.590865,5.140609,-1.547904,-7.968077,6.197812,2.366899,9.774465,-7.941913,-2.756590,-3.288407,-3.346072,1.392264,0.066032,0.795593,-2.996488,8.888703,9.691458,-3.505379,9.736319,3.508210,1.929430,3.786588,2.456796,6.641832,-0.828885,-0.928646,-3.572173,6.533404,1.845561,-2.557502,-9.432397,1.823305,-9.342010,4.467716,-0.162802,-5.742900,-0.543829,7.407243,9.965404,6.410951,-5.647701,1.556131,6.188830,8.325923,9.448276,-5.142031,3.304898,9.693282,2.436667,-8.220680,2.559580,-1.290790,-1.925467,0.718790,-1.569981,-1.428012,4.596006,-1.349524,-1.720789,0.880965,4.595195,8.536384,2.709045,-8.658069,-8.577369,0.507672,-0.389163,1.188510,0.534079,-1.236281,4.185512,-7.988043,-4.638961,-5.101753,-5.959687,-1.607218,2.981787,8.186337,3.789481,-0.545038,-4.853685,6.490281,2.949573,8.438229,-8.781444,-0.045753,-0.926690,-9.303727,3.013607,-4.362579,-7.516086,2.791665,-4.453132,9.343774,1.920597,4.928317,3.629381,-8.104269,9.916773,8.492087,1.322666,-6.106867,-0.401138,5.716370,7.515179,-4.937272,-2.254829,9.067871,-6.998817,-0.705995,-7.601278,7.958602,5.078452,-9.472647,9.926373,-5.965104,-7.591380,1.686256,2.496266,-3.900092,-4.584468,-6.101844,6.290503,2.389385,-0.243393,7.425015,-7.636737,-9.044729,-8.398120,-9.257909,-8.142474,-2.620709,3.244999,-7.907692,-3.120298,6.490380,7.994499,-8.312034,-1.422099,-2.868527,5.783641,8.050788,-0.503056,1.713710,2.031417,-2.930938,-9.602284,-3.729992,-5.260577,-2.345267,2.670616,1.609763,-2.144336,9.175188,-0.195757,7.441128,5.739341,6.433259,0.234083,-3.948499,-2.435596,-2.309318,-8.135353,4.290623,9.911567,9.099308,2.099272,1.417954,-8.789922,-7.742037,-2.930711,2.308239,0.914355,3.358467,9.927707,3.480085,3.472228,0.022880,-1.589006,-5.413202,-3.950283,-0.959545,6.360837,0.995018,9.887559,-4.615127,-3.454210,6.301697,-6.373752,-4.339188,2.814359,2.328139,3.443448,-0.860092,6.529714,-6.259783,-2.171538,-1.242038,-7.297335,-8.361866,5.839455,-5.277496,-1.375586,4.121057,-5.342073,-6.130108,5.549047,-2.525235,-0.778883,-1.041007,-3.474731,-2.592249,-0.468169,-8.269595,-7.109287,-4.565473,4.556280,7.108243,-0.419292,-4.219713,-3.289408,-3.288162,-2.329261,4.382272,3.779221,6.875153,-2.814084,8.018944,-8.784339,5.946668,-5.372893,-0.320092,-7.372040,7.906504,1.972725,-7.852016,-8.134391,0.981675,1.835027,-7.724203,5.990817,-3.704314,1.119205,-0.304280,3.320920,-4.747192,8.940326,2.509397,2.897427,-4.074902,-2.280211,-8.700949,-4.178574,-2.797258,-7.646260,-5.443574,-1.532278,1.600393,-9.994438,1.675374,-0.147797,6.475707,-0.562134,1.077834,0.749268,-3.589965,-9.568471,3.200352,3.270996,1.568880,-6.425237,8.727243,-0.234691,-8.933191,-9.307939,0.692767,9.221373,-9.376068,5.463751,8.439190,5.035220,3.479831,2.195361,-7.355034,-4.126363,-2.320367,-6.485307,3.307126,3.064401,4.092352,3.347902,-5.569948,-5.335676,-7.592348,-7.760999,-0.244590,-1.449589,-4.671383,-4.647762,-4.564408,-0.034737,2.309184,-7.009158,7.238702,-4.325360,9.883339,7.482395,1.389515,-0.110166,-2.869668,9.913932,-5.447995,-7.502326,6.989195,-2.927555,2.228492,3.373733,6.788293,6.218145,3.440777,8.863929,2.850353,-5.020194,-9.263443,-0.963135,2.664539,-2.920677,1.642926,-7.694009,7.935353,-7.274160,6.644023,-1.193106,5.220702,-9.045902,4.650467,5.255473,-8.289627,8.541211,-2.262418,0.121060,-5.372970,-0.265162,-6.193532,-5.097270,7.858521,-7.874193,-5.431023,1.203188,-6.999597,-9.531878,8.010677,-6.248233,1.245958,7.365535,-7.678106,-3.184070,-8.182679,-0.133132,3.282844,-9.392423,-8.829003,-9.275603,8.730062,-2.052027,2.930247,-2.904973,2.997011,-5.359781,-2.333208,-2.603749,3.188974,6.454142,2.892037,-5.303071,9.359061,6.648499,-2.961052,-5.852264,7.723014,7.081617,-7.659156,-8.672524,5.114332,-7.634229,-6.704404,-1.461930,5.249846,2.547916,3.690223,-6.130353,-2.024156,-0.051494,0.500437,1.201722,-4.034513,3.052814,-7.812233,-2.918162,-3.346457,3.922540,9.043994,-3.559935,-5.794738,-7.606277,-6.681753,-2.262822,-4.385017,3.837985,1.367099,8.614963,2.953948,-2.125846,-6.747347,3.586056,-5.704471,5.344188,-3.220321,-3.360473,3.778086,0.867264,7.757084,-0.978145,-0.512709,0.052756,-8.013051,9.646590,7.888898,8.661966,-2.764609,7.924567,-8.598385,4.296701,-7.248594,1.613451,-1.516857,5.445886,-2.803768,5.792626,3.670700,-3.093568,9.044271,-0.652399,-3.638812,-4.207196,-6.058994,0.491417,-0.225597,-2.736528,-1.237674,-9.296634,-3.835835,6.494259,-7.998621,5.272101,2.459077,4.107779,-8.901764,-0.510444,-9.261683,7.268266,-8.708267,5.553178,0.275924,9.971301,3.266592,-5.492481,-9.366558,-0.571049,7.160849,-5.009662,0.810372,1.803308,9.055977,-9.906196,7.162031,2.677849,-1.320904,-4.772174,-2.095298,-7.528832,-6.641981,2.192149,-3.415880,5.960348,5.595757,-6.957872,6.351147,-2.896595,7.449861,-4.692495,4.036341,-5.466207,-7.151394,3.743268,8.351680,-3.316343,4.877670,-9.393418,5.030320,6.421018,0.425475,-4.248514,9.388232,-5.962225,1.359951,5.642881,-0.634254,5.081385,9.310586,6.870813,-3.751021,-3.758594,0.662718,2.350730,-3.209928,2.886083,-4.297779,-0.304670,6.627761,0.829836,-8.171926,6.127543,-2.723609,4.492962,0.145440,-1.260352,9.263383,6.251960,9.315600,7.592396,7.750629,-4.160162,-3.547110,-2.024986,2.083614,4.902371,-3.478913,-0.807697,2.046731,-2.727995,-1.170331,-2.070521,2.711505,-5.881040,-4.247206,-2.619585,-6.073379,8.597529,-4.850402,-8.415639,0.422077,6.850193,-4.396977,8.936997,6.028607,9.002332,-3.985218,2.026159,2.035293,7.862674,-7.319398,-3.471886,-7.417248,0.676260,1.893954,-4.389300,1.665756], dtype = "float32")#candidate|291|(1152,)|const|float32
var_292 = relay.var("var_292", dtype = "float64", shape = (120,))#candidate|292|(120,)|var|float64
var_293 = relay.var("var_293", dtype = "float32", shape = (12, 1))#candidate|293|(12, 1)|var|float32
call_290 = relay.TupleGetItem(func_211_call(relay.reshape(const_291.astype('float32'), [16, 6, 12]), relay.reshape(var_292.astype('float64'), [120,]), relay.reshape(var_292.astype('float64'), [120,]), relay.reshape(var_293.astype('float32'), [1, 12]), ), 4)
call_294 = relay.TupleGetItem(func_217_call(relay.reshape(const_291.astype('float32'), [16, 6, 12]), relay.reshape(var_292.astype('float64'), [120,]), relay.reshape(var_292.astype('float64'), [120,]), relay.reshape(var_293.astype('float32'), [1, 12]), ), 4)
output = relay.Tuple([uop_288,call_290,const_291,var_292,var_293,])
output2 = relay.Tuple([uop_288,call_294,const_291,var_292,var_293,])
func_297 = relay.Function([var_272,var_273,var_292,var_293,], output)
mod['func_297'] = func_297
mod = relay.transform.InferType()(mod)
mutated_mod['func_297'] = func_297
mutated_mod = relay.transform.InferType()(mutated_mod)
func_297_call = mutated_mod.get_global_var('func_297')
var_299 = relay.var("var_299", dtype = "int16", shape = ())#candidate|299|()|var|int16
var_300 = relay.var("var_300", dtype = "int16", shape = (11, 16, 2))#candidate|300|(11, 16, 2)|var|int16
var_301 = relay.var("var_301", dtype = "float64", shape = (120,))#candidate|301|(120,)|var|float64
var_302 = relay.var("var_302", dtype = "float32", shape = (12, 1))#candidate|302|(12, 1)|var|float32
call_298 = func_297_call(var_299,var_300,var_301,var_302,)
output = call_298
func_303 = relay.Function([var_299,var_300,var_301,var_302,], output)
mutated_mod['func_303'] = func_303
mutated_mod = relay.transform.InferType()(mutated_mod)
var_311 = relay.var("var_311", dtype = "float64", shape = (8, 13))#candidate|311|(8, 13)|var|float64
uop_312 = relay.sqrt(var_311.astype('float64')) # shape=(8, 13)
uop_314 = relay.sinh(uop_312.astype('float32')) # shape=(8, 13)
uop_317 = relay.sin(uop_312.astype('float32')) # shape=(8, 13)
bop_319 = relay.logical_xor(uop_312.astype('uint8'), relay.reshape(uop_317.astype('uint8'), relay.shape_of(uop_312))) # shape=(8, 13)
output = relay.Tuple([uop_314,bop_319,])
output2 = relay.Tuple([uop_314,bop_319,])
func_324 = relay.Function([var_311,], output)
mod['func_324'] = func_324
mod = relay.transform.InferType()(mod)
var_325 = relay.var("var_325", dtype = "float64", shape = (8, 13))#candidate|325|(8, 13)|var|float64
output = func_324(var_325)
func_326 = relay.Function([var_325], output)
mutated_mod['func_326'] = func_326
mutated_mod = relay.transform.InferType()(mutated_mod)
var_380 = relay.var("var_380", dtype = "float64", shape = (8, 6, 15))#candidate|380|(8, 6, 15)|var|float64
uop_381 = relay.sqrt(var_380.astype('float64')) # shape=(8, 6, 15)
output = relay.Tuple([uop_381,])
output2 = relay.Tuple([uop_381,])
func_383 = relay.Function([var_380,], output)
mod['func_383'] = func_383
mod = relay.transform.InferType()(mod)
mutated_mod['func_383'] = func_383
mutated_mod = relay.transform.InferType()(mutated_mod)
var_384 = relay.var("var_384", dtype = "float64", shape = (8, 6, 15))#candidate|384|(8, 6, 15)|var|float64
func_383_call = mutated_mod.get_global_var('func_383')
call_385 = func_383_call(var_384)
output = call_385
func_386 = relay.Function([var_384], output)
mutated_mod['func_386'] = func_386
mutated_mod = relay.transform.InferType()(mutated_mod)
var_423 = relay.var("var_423", dtype = "float64", shape = (1, 7, 14))#candidate|423|(1, 7, 14)|var|float64
var_424 = relay.var("var_424", dtype = "float64", shape = (8, 7, 14))#candidate|424|(8, 7, 14)|var|float64
bop_425 = relay.floor_mod(var_423.astype('float64'), var_424.astype('float64')) # shape=(8, 7, 14)
uop_429 = relay.log2(var_423.astype('float32')) # shape=(1, 7, 14)
uop_431 = relay.asinh(bop_425.astype('float64')) # shape=(8, 7, 14)
output = relay.Tuple([uop_429,uop_431,])
output2 = relay.Tuple([uop_429,uop_431,])
func_436 = relay.Function([var_423,var_424,], output)
mod['func_436'] = func_436
mod = relay.transform.InferType()(mod)
var_437 = relay.var("var_437", dtype = "float64", shape = (1, 7, 14))#candidate|437|(1, 7, 14)|var|float64
var_438 = relay.var("var_438", dtype = "float64", shape = (8, 7, 14))#candidate|438|(8, 7, 14)|var|float64
output = func_436(var_437,var_438,)
func_439 = relay.Function([var_437,var_438,], output)
mutated_mod['func_439'] = func_439
mutated_mod = relay.transform.InferType()(mutated_mod)
var_480 = relay.var("var_480", dtype = "float32", shape = (10, 12))#candidate|480|(10, 12)|var|float32
uop_481 = relay.sqrt(var_480.astype('float32')) # shape=(10, 12)
bop_489 = relay.greater(uop_481.astype('bool'), relay.reshape(var_480.astype('bool'), relay.shape_of(uop_481))) # shape=(10, 12)
func_324_call = mod.get_global_var('func_324')
func_326_call = mutated_mod.get_global_var('func_326')
var_493 = relay.var("var_493", dtype = "float64", shape = (104,))#candidate|493|(104,)|var|float64
call_492 = relay.TupleGetItem(func_324_call(relay.reshape(var_493.astype('float64'), [8, 13])), 0)
call_494 = relay.TupleGetItem(func_326_call(relay.reshape(var_493.astype('float64'), [8, 13])), 0)
output = relay.Tuple([bop_489,call_492,var_493,])
output2 = relay.Tuple([bop_489,call_494,var_493,])
func_498 = relay.Function([var_480,var_493,], output)
mod['func_498'] = func_498
mod = relay.transform.InferType()(mod)
mutated_mod['func_498'] = func_498
mutated_mod = relay.transform.InferType()(mutated_mod)
func_498_call = mutated_mod.get_global_var('func_498')
var_500 = relay.var("var_500", dtype = "float32", shape = (10, 12))#candidate|500|(10, 12)|var|float32
var_501 = relay.var("var_501", dtype = "float64", shape = (104,))#candidate|501|(104,)|var|float64
call_499 = func_498_call(var_500,var_501,)
output = call_499
func_502 = relay.Function([var_500,var_501,], output)
mutated_mod['func_502'] = func_502
mutated_mod = relay.transform.InferType()(mutated_mod)
const_504 = relay.const([True,False,True,True,False,False,True,True,False,True,True,True,True,True,False], dtype = "bool")#candidate|504|(15,)|const|bool
var_505 = relay.var("var_505", dtype = "bool", shape = (15,))#candidate|505|(15,)|var|bool
bop_506 = relay.logical_or(const_504.astype('bool'), relay.reshape(var_505.astype('bool'), relay.shape_of(const_504))) # shape=(15,)
func_297_call = mod.get_global_var('func_297')
func_303_call = mutated_mod.get_global_var('func_303')
var_510 = relay.var("var_510", dtype = "int16", shape = ())#candidate|510|()|var|int16
var_511 = relay.var("var_511", dtype = "int16", shape = (352,))#candidate|511|(352,)|var|int16
var_512 = relay.var("var_512", dtype = "float64", shape = (120,))#candidate|512|(120,)|var|float64
var_513 = relay.var("var_513", dtype = "float32", shape = (6, 2))#candidate|513|(6, 2)|var|float32
call_509 = relay.TupleGetItem(func_297_call(relay.reshape(var_510.astype('int16'), []), relay.reshape(var_511.astype('int16'), [11, 16, 2]), relay.reshape(var_512.astype('float64'), [120,]), relay.reshape(var_513.astype('float32'), [12, 1]), ), 3)
call_514 = relay.TupleGetItem(func_303_call(relay.reshape(var_510.astype('int16'), []), relay.reshape(var_511.astype('int16'), [11, 16, 2]), relay.reshape(var_512.astype('float64'), [120,]), relay.reshape(var_513.astype('float32'), [12, 1]), ), 3)
bop_518 = relay.minimum(var_512.astype('uint8'), relay.reshape(call_509.astype('uint8'), relay.shape_of(var_512))) # shape=(120,)
bop_521 = relay.minimum(var_512.astype('uint8'), relay.reshape(call_514.astype('uint8'), relay.shape_of(var_512))) # shape=(120,)
output = relay.Tuple([bop_506,var_510,var_511,var_513,bop_518,])
output2 = relay.Tuple([bop_506,var_510,var_511,var_513,bop_521,])
func_533 = relay.Function([var_505,var_510,var_511,var_512,var_513,], output)
mod['func_533'] = func_533
mod = relay.transform.InferType()(mod)
mutated_mod['func_533'] = func_533
mutated_mod = relay.transform.InferType()(mutated_mod)
func_533_call = mutated_mod.get_global_var('func_533')
var_535 = relay.var("var_535", dtype = "bool", shape = (15,))#candidate|535|(15,)|var|bool
var_536 = relay.var("var_536", dtype = "int16", shape = ())#candidate|536|()|var|int16
var_537 = relay.var("var_537", dtype = "int16", shape = (352,))#candidate|537|(352,)|var|int16
var_538 = relay.var("var_538", dtype = "float64", shape = (120,))#candidate|538|(120,)|var|float64
var_539 = relay.var("var_539", dtype = "float32", shape = (6, 2))#candidate|539|(6, 2)|var|float32
call_534 = func_533_call(var_535,var_536,var_537,var_538,var_539,)
output = call_534
func_540 = relay.Function([var_535,var_536,var_537,var_538,var_539,], output)
mutated_mod['func_540'] = func_540
mutated_mod = relay.transform.InferType()(mutated_mod)
var_579 = relay.var("var_579", dtype = "int64", shape = (15, 4))#candidate|579|(15, 4)|var|int64
const_580 = relay.const([[3,7,-1,-3],[-6,-3,1,5],[3,-7,9,-3],[5,6,4,-1],[5,-3,8,7],[-1,1,2,-3],[9,9,-8,-10],[8,-10,-9,-9],[8,-3,8,-10],[-10,-2,-7,9],[-4,6,1,-4],[2,-3,-4,-7],[4,9,-10,10],[10,-2,6,-6],[2,-2,-8,1]], dtype = "int64")#candidate|580|(15, 4)|const|int64
bop_581 = relay.logical_xor(var_579.astype('int64'), relay.reshape(const_580.astype('int64'), relay.shape_of(var_579))) # shape=(15, 4)
func_252_call = mod.get_global_var('func_252')
func_255_call = mutated_mod.get_global_var('func_255')
var_588 = relay.var("var_588", dtype = "float64", shape = (224, 1))#candidate|588|(224, 1)|var|float64
call_587 = func_252_call(relay.reshape(var_588.astype('float64'), [14, 2, 8]))
call_589 = func_252_call(relay.reshape(var_588.astype('float64'), [14, 2, 8]))
var_592 = relay.var("var_592", dtype = "float64", shape = (224, 14))#candidate|592|(224, 14)|var|float64
bop_593 = relay.bitwise_or(var_588.astype('int32'), var_592.astype('int32')) # shape=(224, 14)
func_436_call = mod.get_global_var('func_436')
func_439_call = mutated_mod.get_global_var('func_439')
var_600 = relay.var("var_600", dtype = "float64", shape = (98,))#candidate|600|(98,)|var|float64
var_601 = relay.var("var_601", dtype = "float64", shape = (784,))#candidate|601|(784,)|var|float64
call_599 = relay.TupleGetItem(func_436_call(relay.reshape(var_600.astype('float64'), [1, 7, 14]), relay.reshape(var_601.astype('float64'), [8, 7, 14]), ), 1)
call_602 = relay.TupleGetItem(func_439_call(relay.reshape(var_600.astype('float64'), [1, 7, 14]), relay.reshape(var_601.astype('float64'), [8, 7, 14]), ), 1)
var_604 = relay.var("var_604", dtype = "int64", shape = (15, 4))#candidate|604|(15, 4)|var|int64
bop_605 = relay.left_shift(bop_581.astype('uint64'), relay.reshape(var_604.astype('uint64'), relay.shape_of(bop_581))) # shape=(15, 4)
output = relay.Tuple([call_587,bop_593,call_599,var_600,var_601,bop_605,])
output2 = relay.Tuple([call_589,bop_593,call_602,var_600,var_601,bop_605,])
func_612 = relay.Function([var_579,var_588,var_592,var_600,var_601,var_604,], output)
mod['func_612'] = func_612
mod = relay.transform.InferType()(mod)
var_613 = relay.var("var_613", dtype = "int64", shape = (15, 4))#candidate|613|(15, 4)|var|int64
var_614 = relay.var("var_614", dtype = "float64", shape = (224, 1))#candidate|614|(224, 1)|var|float64
var_615 = relay.var("var_615", dtype = "float64", shape = (224, 14))#candidate|615|(224, 14)|var|float64
var_616 = relay.var("var_616", dtype = "float64", shape = (98,))#candidate|616|(98,)|var|float64
var_617 = relay.var("var_617", dtype = "float64", shape = (784,))#candidate|617|(784,)|var|float64
var_618 = relay.var("var_618", dtype = "int64", shape = (15, 4))#candidate|618|(15, 4)|var|int64
output = func_612(var_613,var_614,var_615,var_616,var_617,var_618,)
func_619 = relay.Function([var_613,var_614,var_615,var_616,var_617,var_618,], output)
mutated_mod['func_619'] = func_619
mutated_mod = relay.transform.InferType()(mutated_mod)
var_638 = relay.var("var_638", dtype = "float32", shape = ())#candidate|638|()|var|float32
var_639 = relay.var("var_639", dtype = "float32", shape = (6,))#candidate|639|(6,)|var|float32
bop_640 = relay.power(var_638.astype('float32'), var_639.astype('float32')) # shape=(6,)
output = bop_640
output2 = bop_640
func_645 = relay.Function([var_638,var_639,], output)
mod['func_645'] = func_645
mod = relay.transform.InferType()(mod)
var_646 = relay.var("var_646", dtype = "float32", shape = ())#candidate|646|()|var|float32
var_647 = relay.var("var_647", dtype = "float32", shape = (6,))#candidate|647|(6,)|var|float32
output = func_645(var_646,var_647,)
func_648 = relay.Function([var_646,var_647,], output)
mutated_mod['func_648'] = func_648
mutated_mod = relay.transform.InferType()(mutated_mod)
const_696 = relay.const([[-2.675221,-3.257214,-9.499134],[-9.647811,-9.156670,8.118943],[5.332521,-1.735892,-5.842687],[-9.834790,6.816789,8.591073],[0.939548,-2.106981,3.674901],[9.266819,-8.276415,-1.541623],[6.765508,6.375688,1.348897],[1.822504,-7.844536,-0.492592],[5.195643,6.868349,-9.841617],[-3.900851,-5.418609,-4.938415],[-9.269815,2.431331,2.384969],[6.959924,-2.989981,-9.475288]], dtype = "float32")#candidate|696|(12, 3)|const|float32
uop_697 = relay.tan(const_696.astype('float32')) # shape=(12, 3)
output = uop_697
output2 = uop_697
func_700 = relay.Function([], output)
mod['func_700'] = func_700
mod = relay.transform.InferType()(mod)
mutated_mod['func_700'] = func_700
mutated_mod = relay.transform.InferType()(mutated_mod)
func_700_call = mutated_mod.get_global_var('func_700')
call_701 = func_700_call()
output = call_701
func_702 = relay.Function([], output)
mutated_mod['func_702'] = func_702
mutated_mod = relay.transform.InferType()(mutated_mod)
func_700_call = mod.get_global_var('func_700')
func_702_call = mutated_mod.get_global_var('func_702')
call_717 = func_700_call()
call_718 = func_700_call()
func_436_call = mod.get_global_var('func_436')
func_439_call = mutated_mod.get_global_var('func_439')
var_735 = relay.var("var_735", dtype = "float64", shape = (7, 14))#candidate|735|(7, 14)|var|float64
const_736 = relay.const([[-8.625365,2.749465,7.420819,3.531306,2.224078,-6.570884,-9.981377,-1.374675,-1.921939,8.456524,4.066693,-4.275793,2.945660,8.825275,8.976007,-0.079055,0.077194,6.518345,5.436322,1.077995,-6.821737,-1.058014,5.123440,-4.033534,9.717474,6.654574,0.704999,6.780271,5.639509,-6.212582,8.220428,2.779280,-9.321743,-2.032779,4.793255,8.391203,0.711027,5.054656,-4.706492,-3.349158,2.053166,-9.763272,9.761733,-9.065912,-6.307322,-0.235276,5.232073,-3.509712,-9.039985,-6.569291,-0.503938,4.578586,7.608596,-6.055579,-8.324482,-1.719322,-5.049149,5.904130,-2.018451,4.472593,-4.460264,-3.131498,6.759063,-1.650642,9.235947,5.834239,-2.461956,9.824140,5.817928,0.423466,-2.293602,-7.917870,-5.229851,3.892628,0.861443,9.094152,-4.459161,4.469615,-0.808589,5.641281,-8.883696,3.081671,-8.943972,1.423495,-8.557350,8.611977,-1.329084,-9.034819,1.818735,6.138422,-8.182203,6.810410,-4.241025,-1.391864,-6.963540,5.164905,-0.324200,3.210331,4.932412,3.605289,8.625064,1.279855,-7.200290,-1.862546,7.001593,-9.071227,-1.634845,-5.456823,-2.974860,2.813783,-7.592178,-5.711772,2.646176,3.711175,-5.137544,-8.339267,-6.547043,9.821615,2.071794,-6.078451,5.978766,-5.399711,-4.285672,-5.842451,2.127917,1.319504,-7.937911,5.062683,4.488071,3.590497,8.919137,9.766280,7.128606,-3.862645,-6.949776,9.946471,6.047790,3.561092,-2.017404,-9.534789,0.752697,7.289397,2.140988,0.532554,-9.464829,-1.159131,1.741842,7.643129,-1.993311,2.095648,-4.548351,-9.212919,1.390198,-6.030954,-4.285886,4.366556,-0.897982,2.784152,5.662557,6.141578,5.159165,9.188615,4.816786,2.663880,-5.746002,2.690314,3.453150,-2.943621,8.069430,-0.137010,-8.602801,-8.567942,5.729229,-7.592922,-4.415102,-5.193238,-6.177197,-0.762844,-5.993246,6.230461,5.813636,3.487910,4.795990,6.431284,-4.290109,-6.020069,8.725645,-0.752038,-6.562339,-7.760596,-8.871591,8.795079,-2.204371,-3.713811,3.172102,-5.280878],[-8.990673,-7.363127,6.078310,2.252832,5.313298,-2.199998,-9.532848,6.814871,-4.237743,2.265228,-5.730031,5.364531,7.778106,0.119513,3.359251,6.714487,-7.705313,5.256634,3.105810,9.002223,-7.710409,9.413793,-3.496279,-1.173190,-9.978643,8.855723,-1.890718,-2.944843,2.525506,-3.974249,6.022731,-7.860653,1.204504,7.394519,-0.400287,-2.644874,9.469732,4.985488,-0.716954,-7.004485,-7.948111,-7.533656,-0.821314,-7.984929,-0.245926,-7.300139,-3.562580,7.111413,3.899492,-6.613463,-6.634817,-5.862318,-8.342904,7.960156,0.684670,-5.156532,-5.393411,-2.419657,8.861139,-1.744308,-0.767253,5.944868,2.239618,-9.226695,7.258634,1.112343,6.024658,7.018854,5.575967,6.009062,-5.719987,-1.892358,-1.439436,0.576218,1.884971,0.851929,7.221283,-6.503746,-2.088111,1.790647,9.132039,2.267539,-8.136524,6.722740,7.694437,8.357896,-4.300775,-7.976343,-3.659273,-8.785861,2.757892,2.677301,-7.703452,-6.960068,2.910607,-2.403389,-0.070635,5.021189,7.354210,-2.744271,1.053283,-3.637114,-4.655997,-7.552011,3.898532,-1.745983,1.728590,9.397105,-3.387017,-2.701551,5.241927,-8.764166,-7.103537,-5.386044,-3.250928,-3.206078,-2.382300,8.157805,-4.770030,-5.149430,-5.656841,-6.966939,-9.478143,5.375790,5.243482,-7.671972,3.479750,-2.790225,2.458599,7.198171,-4.811799,4.907198,-5.732463,5.757933,1.612181,-8.732972,-2.380353,1.217160,-2.095890,6.565934,-6.457353,-6.275828,3.463943,7.903925,-6.239509,-2.991513,-4.265742,0.848839,6.142708,4.762379,-4.005136,-7.471528,4.139414,-2.050011,0.483027,7.937590,1.481197,7.593770,7.426489,2.586318,3.055490,-4.901795,-3.476935,-2.292649,-3.234795,-3.687341,-9.215885,7.741940,-1.351753,4.100937,-9.266920,5.179191,3.845701,-8.548449,6.856342,-5.692865,4.911616,-3.989660,-7.198478,6.036784,9.369489,-0.622066,8.113775,5.772429,9.408295,3.414116,4.064218,5.956343,4.280036,9.695967,-6.390321,5.131546,-9.523601,6.746231,-4.029380,6.422894],[-2.352047,1.174744,-4.567353,5.917401,-6.322876,8.215711,6.363243,-0.846525,-8.437351,1.732703,2.295557,-3.624732,-4.973787,-1.884279,0.380508,-0.114988,7.536011,4.868640,-4.456201,8.788335,3.592936,0.847328,-8.496204,2.797809,1.870514,3.378623,9.641338,1.284864,2.209721,-8.402305,8.737192,-6.981023,1.513543,-9.327909,-8.766104,-9.656159,-8.575004,-1.614410,4.796293,5.909922,-2.925199,4.878975,6.999668,7.864953,-7.566647,0.847117,9.009205,1.443426,2.002590,-8.158598,8.730927,1.059228,-1.615678,-5.171659,0.093453,3.303407,-8.536664,0.024068,1.572833,-2.932975,-1.528676,7.157024,8.013114,-7.511863,9.892650,-5.918988,6.428583,-0.267474,2.517800,9.942510,7.658318,-7.164167,6.361350,9.987189,3.498396,9.997513,9.289598,3.631863,7.753504,9.751747,-0.359478,7.916598,3.287745,-7.940001,8.481652,0.464951,-4.579211,-2.380971,3.679174,-5.873126,-1.067996,-3.035867,-8.924848,-0.152412,-0.831105,-2.846551,-6.123506,-0.947270,-5.064954,-1.340197,8.824889,-7.432347,-2.649525,3.085714,-6.402312,-1.177307,2.642837,-2.315585,-4.945811,2.329142,-0.967867,4.615489,-5.456210,-8.065071,-0.181515,-9.451872,-9.987304,4.766996,7.985381,-9.647139,-0.499358,-1.432803,2.948285,-4.315709,-4.848458,-5.992479,3.471480,7.932691,-5.923343,-6.601170,-4.314471,-8.536822,4.305769,0.217285,-2.933459,-7.124062,-2.657982,6.630843,6.441631,9.088559,9.247896,-7.673820,-4.242770,-4.031157,4.267571,6.088037,6.231012,-3.900802,-2.194243,-4.948318,1.987874,0.913585,2.403577,-7.365627,-6.628628,-4.329851,9.299248,2.094421,-6.534699,-7.152575,-5.104816,-2.589963,9.931121,6.727816,-7.836270,4.556810,-0.552829,-6.930195,1.904454,1.787296,-5.835469,8.251497,-9.725354,0.651385,3.912594,0.366681,-9.997105,5.759445,-1.283158,7.800876,-2.315127,1.485819,2.958392,8.768119,-6.556043,0.882456,-5.705575,-3.958243,0.543766,-0.083196,-7.376652,-6.885196,0.917295,-6.429986,-6.857815,-1.886821],[-5.855167,-6.732452,4.776986,-3.450481,-3.400314,0.084461,5.564607,8.005462,6.912279,1.101305,9.354825,-3.472653,8.015771,5.667894,-1.546437,9.209799,5.705083,4.120568,0.156338,-5.486491,5.296557,-7.386328,4.422150,4.183079,8.002324,-1.333021,-4.417329,9.206964,-7.308097,-2.428810,8.998382,5.217458,3.800375,5.760523,3.225845,-9.906733,6.551429,9.329104,-2.823206,-4.444283,4.919553,3.445848,9.383248,7.590342,0.574171,7.406907,8.087464,1.571623,1.398380,1.345721,-1.557167,8.447078,0.528755,-0.860455,6.072321,4.577132,-4.827114,-2.945201,-6.330158,8.487899,1.664058,-3.369367,9.389194,3.125041,-1.869142,4.650647,-6.481945,8.796367,3.784992,-3.895199,-4.075490,3.809416,-4.980958,-9.725538,-2.229629,-6.422262,-5.260808,-5.715476,-0.890381,-6.770829,1.324871,4.902324,-6.394404,3.391199,-6.882782,-1.141240,3.111351,9.894488,-7.640571,-6.472055,9.791580,-3.662348,3.492986,-9.832023,0.264609,4.845069,-6.448208,-1.631525,8.048007,7.676639,7.283365,-5.181821,2.880686,-8.100701,3.760300,-8.657731,9.868123,2.181668,-7.916672,-4.918416,-2.672647,-3.215803,-7.144109,-9.161585,-6.444776,-1.273701,0.194467,-7.277799,-5.407362,-3.060707,-8.805830,8.131802,-6.057099,-3.628989,-1.422005,-0.823960,-2.623650,0.375593,2.545951,-1.409390,1.853128,-7.774194,3.637118,-3.280621,9.716027,-5.303752,2.682628,-7.201403,-3.926659,-4.896594,0.448751,3.359282,7.451023,8.519104,-1.727834,-3.405630,-5.919495,0.417772,-0.150792,2.876360,-6.812786,3.394808,7.207351,7.752199,-6.527705,-1.586722,-7.081747,-4.833152,9.819453,1.264964,1.746661,5.469099,-0.834544,-4.409574,-1.558247,-9.878147,9.879252,3.565451,8.708681,-5.473321,-1.681324,-7.478507,-0.987118,8.888763,-4.307756,-7.077925,-5.891756,6.262164,-3.530862,1.452704,6.665862,9.338008,9.256668,-2.680565,-8.027810,7.403549,0.150780,5.631178,-4.316355,8.124867,6.501120,-5.667657,-3.670254,-2.082674,2.182164,6.899732]], dtype = "float64")#candidate|736|(4, 196)|const|float64
call_734 = relay.TupleGetItem(func_436_call(relay.reshape(var_735.astype('float64'), [1, 7, 14]), relay.reshape(const_736.astype('float64'), [8, 7, 14]), ), 1)
call_737 = relay.TupleGetItem(func_439_call(relay.reshape(var_735.astype('float64'), [1, 7, 14]), relay.reshape(const_736.astype('float64'), [8, 7, 14]), ), 1)
output = relay.Tuple([call_717,call_734,var_735,const_736,])
output2 = relay.Tuple([call_718,call_737,var_735,const_736,])
func_744 = relay.Function([var_735,], output)
mod['func_744'] = func_744
mod = relay.transform.InferType()(mod)
var_745 = relay.var("var_745", dtype = "float64", shape = (7, 14))#candidate|745|(7, 14)|var|float64
output = func_744(var_745)
func_746 = relay.Function([var_745], output)
mutated_mod['func_746'] = func_746
mutated_mod = relay.transform.InferType()(mutated_mod)
var_761 = relay.var("var_761", dtype = "float32", shape = (9, 6))#candidate|761|(9, 6)|var|float32
uop_762 = relay.sqrt(var_761.astype('float32')) # shape=(9, 6)
bop_766 = relay.maximum(var_761.astype('uint64'), relay.reshape(uop_762.astype('uint64'), relay.shape_of(var_761))) # shape=(9, 6)
bop_769 = relay.bitwise_or(uop_762.astype('int32'), relay.reshape(bop_766.astype('int32'), relay.shape_of(uop_762))) # shape=(9, 6)
var_772 = relay.var("var_772", dtype = "uint64", shape = (9, 6))#candidate|772|(9, 6)|var|uint64
bop_773 = relay.floor_mod(bop_766.astype('float64'), relay.reshape(var_772.astype('float64'), relay.shape_of(bop_766))) # shape=(9, 6)
output = relay.Tuple([bop_769,bop_773,])
output2 = relay.Tuple([bop_769,bop_773,])
func_778 = relay.Function([var_761,var_772,], output)
mod['func_778'] = func_778
mod = relay.transform.InferType()(mod)
var_779 = relay.var("var_779", dtype = "float32", shape = (9, 6))#candidate|779|(9, 6)|var|float32
var_780 = relay.var("var_780", dtype = "uint64", shape = (9, 6))#candidate|780|(9, 6)|var|uint64
output = func_778(var_779,var_780,)
func_781 = relay.Function([var_779,var_780,], output)
mutated_mod['func_781'] = func_781
mutated_mod = relay.transform.InferType()(mutated_mod)
var_791 = relay.var("var_791", dtype = "float32", shape = (10,))#candidate|791|(10,)|var|float32
uop_792 = relay.log2(var_791.astype('float32')) # shape=(10,)
func_778_call = mod.get_global_var('func_778')
func_781_call = mutated_mod.get_global_var('func_781')
const_801 = relay.const([[7.782502,-4.010936,5.841270,-2.031025,-2.827776,3.477983],[0.706522,-3.184168,-2.523909,8.635688,-9.879354,9.744307],[3.657183,-6.614638,-9.654530,-4.171875,-6.253781,0.254646],[6.898590,-8.753529,-6.557153,-7.410040,7.438375,-2.918368],[-3.021836,1.169651,9.445648,-8.415573,-1.490110,-0.743310],[7.976763,-7.578287,8.449212,-3.019767,2.382105,-0.807963],[-4.639460,9.241334,-5.837133,-8.210404,-1.785107,2.931727],[-5.929584,-9.324025,-6.022453,7.599548,2.777612,8.469076],[1.262078,8.183986,-4.254187,1.442242,5.430118,-1.798647]], dtype = "float32")#candidate|801|(9, 6)|const|float32
call_800 = relay.TupleGetItem(func_778_call(relay.reshape(const_801.astype('float32'), [9, 6]), relay.reshape(const_801.astype('uint64'), [9, 6]), ), 0)
call_802 = relay.TupleGetItem(func_781_call(relay.reshape(const_801.astype('float32'), [9, 6]), relay.reshape(const_801.astype('uint64'), [9, 6]), ), 0)
var_804 = relay.var("var_804", dtype = "float32", shape = (10,))#candidate|804|(10,)|var|float32
bop_805 = relay.less_equal(uop_792.astype('bool'), relay.reshape(var_804.astype('bool'), relay.shape_of(uop_792))) # shape=(10,)
func_700_call = mod.get_global_var('func_700')
func_702_call = mutated_mod.get_global_var('func_702')
call_808 = func_700_call()
call_809 = func_700_call()
func_778_call = mod.get_global_var('func_778')
func_781_call = mutated_mod.get_global_var('func_781')
call_812 = relay.TupleGetItem(func_778_call(relay.reshape(const_801.astype('float32'), [9, 6]), relay.reshape(const_801.astype('uint64'), [9, 6]), ), 0)
call_813 = relay.TupleGetItem(func_781_call(relay.reshape(const_801.astype('float32'), [9, 6]), relay.reshape(const_801.astype('uint64'), [9, 6]), ), 0)
bop_817 = relay.multiply(uop_792.astype('uint16'), relay.reshape(var_804.astype('uint16'), relay.shape_of(uop_792))) # shape=(10,)
func_533_call = mod.get_global_var('func_533')
func_540_call = mutated_mod.get_global_var('func_540')
const_822 = relay.const([False,True,False,False,True,False,False,True,True,True,True,False,True,False,False], dtype = "bool")#candidate|822|(15,)|const|bool
var_823 = relay.var("var_823", dtype = "int16", shape = ())#candidate|823|()|var|int16
var_824 = relay.var("var_824", dtype = "int16", shape = (352,))#candidate|824|(352,)|var|int16
const_825 = relay.const([-3.792125,5.362077,-8.994194,-4.597028,8.373803,-3.408207,0.086894,2.468266,6.138826,1.449447,-0.167786,5.621475,-6.982564,-9.568057,0.701573,6.702645,-2.056183,-5.206712,-8.239685,-3.932346,8.341630,7.805223,-7.659257,-1.415286,6.342877,-2.261429,1.958490,2.477183,-8.378907,-4.187883,1.931225,-2.764838,-2.248690,-6.068439,9.219168,-0.429868,-9.055438,6.801500,-2.079112,-4.867403,7.080639,4.691622,-5.371302,-7.877125,1.618166,-7.349846,-0.603702,-6.355479,6.522576,3.342213,3.879274,4.392588,-6.627922,1.630630,6.675138,-6.692427,-2.597857,3.931777,-9.462149,-5.500750,-4.079436,2.145989,6.709028,2.333834,-2.570174,0.867028,-7.511151,4.480040,2.413876,-5.946034,-7.591565,4.434345,-6.318399,4.257993,-1.825411,-7.954496,9.006470,0.619473,-1.952576,0.540725,8.933192,-1.645208,-7.444812,-3.068304,-5.115929,-2.255833,-6.118868,-5.526383,-3.001262,5.114946,5.165427,-2.651889,7.359868,2.580787,-8.568743,8.505006,6.171183,-6.461916,2.726318,1.582294,0.393053,3.336853,1.721866,-0.248785,5.912390,-0.311886,-1.822127,0.717811,-3.574486,8.679572,-8.030276,-0.081229,-6.179971,3.648015,-0.471439,-9.315459,-4.559800,6.253543,6.283546,7.485114], dtype = "float64")#candidate|825|(120,)|const|float64
const_826 = relay.const([-9.186383,-6.933548,9.462965,-3.228922,-2.820342,6.409932,9.009990,-7.744657,6.643707,9.030792,-4.783443,3.883038], dtype = "float32")#candidate|826|(12,)|const|float32
call_821 = relay.TupleGetItem(func_533_call(relay.reshape(const_822.astype('bool'), [15,]), relay.reshape(var_823.astype('int16'), []), relay.reshape(var_824.astype('int16'), [352,]), relay.reshape(const_825.astype('float64'), [120,]), relay.reshape(const_826.astype('float32'), [6, 2]), ), 3)
call_827 = relay.TupleGetItem(func_540_call(relay.reshape(const_822.astype('bool'), [15,]), relay.reshape(var_823.astype('int16'), []), relay.reshape(var_824.astype('int16'), [352,]), relay.reshape(const_825.astype('float64'), [120,]), relay.reshape(const_826.astype('float32'), [6, 2]), ), 3)
func_297_call = mod.get_global_var('func_297')
func_303_call = mutated_mod.get_global_var('func_303')
call_832 = relay.TupleGetItem(func_297_call(relay.reshape(var_823.astype('int16'), []), relay.reshape(var_824.astype('int16'), [11, 16, 2]), relay.reshape(const_825.astype('float64'), [120,]), relay.reshape(call_821.astype('float32'), [12, 1]), ), 3)
call_833 = relay.TupleGetItem(func_303_call(relay.reshape(var_823.astype('int16'), []), relay.reshape(var_824.astype('int16'), [11, 16, 2]), relay.reshape(const_825.astype('float64'), [120,]), relay.reshape(call_821.astype('float32'), [12, 1]), ), 3)
func_744_call = mod.get_global_var('func_744')
func_746_call = mutated_mod.get_global_var('func_746')
const_839 = relay.const([[-6.024906,5.742172,8.266852,-7.901398,-5.497892,-8.874653,-0.400497,-3.687102,4.039127,-8.800859,-7.126324,0.786823,-3.527489,2.086238,3.931312,-0.913896,4.195167,-7.607696,-0.530184,-7.950389,-9.532504,6.611259,0.784114,1.923083,-4.795173,3.785830,0.734438,7.060387,3.290772,-8.227639,-9.476547,-1.285743,-5.143822,-0.222236,2.195855,2.497028,5.806985,-9.100214,-7.685049,8.173297,-6.159400,2.920034,-8.910937,7.773300,-4.911139,-7.056806,-1.066320,-0.815529,-3.217140,2.643810,4.787677,6.707956,0.609252,-9.766025,-7.236905,9.523652,-5.791749,-3.200396,2.458425,-6.586600,-2.902147,-4.370039,-6.144299,3.535640,2.404844,-0.726275,-4.675928,2.612188,-8.093461,5.263695,-1.450323,6.414023,-9.451005,8.335910,4.294574,9.344216,-7.106830,6.002638,-3.520118,6.951406,8.710012,2.003629,-8.620548,-7.034911,-5.496150,4.218894,-0.792821,3.156744,-2.044613,-7.971315,-6.580319,3.915608,-3.817006,5.157800,-8.892698,-3.780443,3.600190,3.028751]], dtype = "float64")#candidate|839|(1, 98)|const|float64
call_838 = relay.TupleGetItem(func_744_call(relay.reshape(const_839.astype('float64'), [7, 14])), 1)
call_840 = relay.TupleGetItem(func_746_call(relay.reshape(const_839.astype('float64'), [7, 14])), 1)
uop_845 = relay.atan(bop_817.astype('float64')) # shape=(10,)
bop_848 = relay.greater_equal(bop_805.astype('bool'), relay.reshape(uop_792.astype('bool'), relay.shape_of(bop_805))) # shape=(10,)
func_104_call = mod.get_global_var('func_104')
func_107_call = mutated_mod.get_global_var('func_107')
const_853 = relay.const([10,2,5,1,6,6,-2,-4,7,-6,-10,3,3,5,-9,4,8,-5,9,-4,9,-10,-10,-7,-10,10,-5,-9,-7,6,9,-3,5,1,-5,10,8,6,-6,6,6,-6,-3,3,-9,5,-8,-6,-8,8,5,-9,6,2,-2,10,6,-1,10,8,3,-9,2,4,4,5,-10,4,-4,9,-5,-4,-2,-2,10], dtype = "int8")#candidate|853|(75,)|const|int8
call_852 = relay.TupleGetItem(func_104_call(relay.reshape(const_853.astype('int8'), [5, 15, 1]), relay.reshape(call_821.astype('float32'), [12,]), ), 2)
call_854 = relay.TupleGetItem(func_107_call(relay.reshape(const_853.astype('int8'), [5, 15, 1]), relay.reshape(call_821.astype('float32'), [12,]), ), 2)
bop_855 = relay.minimum(uop_845.astype('uint32'), var_823.astype('uint32')) # shape=(10,)
func_744_call = mod.get_global_var('func_744')
func_746_call = mutated_mod.get_global_var('func_746')
call_860 = relay.TupleGetItem(func_744_call(relay.reshape(const_839.astype('float64'), [7, 14])), 3)
call_861 = relay.TupleGetItem(func_746_call(relay.reshape(const_839.astype('float64'), [7, 14])), 3)
output = relay.Tuple([call_800,const_801,call_808,call_812,call_821,const_822,var_824,const_825,const_826,call_832,call_838,const_839,bop_848,call_852,const_853,bop_855,call_860,])
output2 = relay.Tuple([call_802,const_801,call_809,call_813,call_827,const_822,var_824,const_825,const_826,call_833,call_840,const_839,bop_848,call_854,const_853,bop_855,call_861,])
func_865 = relay.Function([var_791,var_804,var_823,var_824,], output)
mod['func_865'] = func_865
mod = relay.transform.InferType()(mod)
mutated_mod['func_865'] = func_865
mutated_mod = relay.transform.InferType()(mutated_mod)
func_865_call = mutated_mod.get_global_var('func_865')
var_867 = relay.var("var_867", dtype = "float32", shape = (10,))#candidate|867|(10,)|var|float32
var_868 = relay.var("var_868", dtype = "float32", shape = (10,))#candidate|868|(10,)|var|float32
var_869 = relay.var("var_869", dtype = "int16", shape = ())#candidate|869|()|var|int16
var_870 = relay.var("var_870", dtype = "int16", shape = (352,))#candidate|870|(352,)|var|int16
call_866 = func_865_call(var_867,var_868,var_869,var_870,)
output = call_866
func_871 = relay.Function([var_867,var_868,var_869,var_870,], output)
mutated_mod['func_871'] = func_871
mutated_mod = relay.transform.InferType()(mutated_mod)
func_700_call = mod.get_global_var('func_700')
func_702_call = mutated_mod.get_global_var('func_702')
call_895 = func_700_call()
call_896 = func_700_call()
output = call_895
output2 = call_896
func_903 = relay.Function([], output)
mod['func_903'] = func_903
mod = relay.transform.InferType()(mod)
output = func_903()
func_904 = relay.Function([], output)
mutated_mod['func_904'] = func_904
mutated_mod = relay.transform.InferType()(mutated_mod)
var_919 = relay.var("var_919", dtype = "uint64", shape = (10,))#candidate|919|(10,)|var|uint64
var_920 = relay.var("var_920", dtype = "uint64", shape = (10,))#candidate|920|(10,)|var|uint64
bop_921 = relay.right_shift(var_919.astype('uint64'), relay.reshape(var_920.astype('uint64'), relay.shape_of(var_919))) # shape=(10,)
bop_930 = relay.logical_or(bop_921.astype('bool'), relay.reshape(var_919.astype('bool'), relay.shape_of(bop_921))) # shape=(10,)
var_933 = relay.var("var_933", dtype = "uint64", shape = (10,))#candidate|933|(10,)|var|uint64
bop_934 = relay.floor_mod(bop_921.astype('float32'), relay.reshape(var_933.astype('float32'), relay.shape_of(bop_921))) # shape=(10,)
bop_943 = relay.left_shift(bop_930.astype('int32'), relay.reshape(var_920.astype('int32'), relay.shape_of(bop_930))) # shape=(10,)
func_903_call = mod.get_global_var('func_903')
func_904_call = mutated_mod.get_global_var('func_904')
call_950 = func_903_call()
call_951 = func_903_call()
output = relay.Tuple([bop_934,bop_943,call_950,])
output2 = relay.Tuple([bop_934,bop_943,call_951,])
func_959 = relay.Function([var_919,var_920,var_933,], output)
mod['func_959'] = func_959
mod = relay.transform.InferType()(mod)
var_960 = relay.var("var_960", dtype = "uint64", shape = (10,))#candidate|960|(10,)|var|uint64
var_961 = relay.var("var_961", dtype = "uint64", shape = (10,))#candidate|961|(10,)|var|uint64
var_962 = relay.var("var_962", dtype = "uint64", shape = (10,))#candidate|962|(10,)|var|uint64
output = func_959(var_960,var_961,var_962,)
func_963 = relay.Function([var_960,var_961,var_962,], output)
mutated_mod['func_963'] = func_963
mutated_mod = relay.transform.InferType()(mutated_mod)
var_973 = relay.var("var_973", dtype = "float32", shape = ())#candidate|973|()|var|float32
var_974 = relay.var("var_974", dtype = "float32", shape = (11,))#candidate|974|(11,)|var|float32
bop_975 = relay.divide(var_973.astype('float32'), var_974.astype('float32')) # shape=(11,)
uop_990 = relay.sinh(bop_975.astype('float32')) # shape=(11,)
uop_992 = relay.sqrt(uop_990.astype('float64')) # shape=(11,)
output = relay.Tuple([uop_992,])
output2 = relay.Tuple([uop_992,])
func_996 = relay.Function([var_973,var_974,], output)
mod['func_996'] = func_996
mod = relay.transform.InferType()(mod)
mutated_mod['func_996'] = func_996
mutated_mod = relay.transform.InferType()(mutated_mod)
func_996_call = mutated_mod.get_global_var('func_996')
var_998 = relay.var("var_998", dtype = "float32", shape = ())#candidate|998|()|var|float32
var_999 = relay.var("var_999", dtype = "float32", shape = (11,))#candidate|999|(11,)|var|float32
call_997 = func_996_call(var_998,var_999,)
output = call_997
func_1000 = relay.Function([var_998,var_999,], output)
mutated_mod['func_1000'] = func_1000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_903_call = mod.get_global_var('func_903')
func_904_call = mutated_mod.get_global_var('func_904')
call_1008 = func_903_call()
call_1009 = func_903_call()
output = call_1008
output2 = call_1009
func_1018 = relay.Function([], output)
mod['func_1018'] = func_1018
mod = relay.transform.InferType()(mod)
output = func_1018()
func_1019 = relay.Function([], output)
mutated_mod['func_1019'] = func_1019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1018_call = mod.get_global_var('func_1018')
func_1019_call = mutated_mod.get_global_var('func_1019')
call_1034 = func_1018_call()
call_1035 = func_1018_call()
output = relay.Tuple([call_1034,])
output2 = relay.Tuple([call_1035,])
func_1036 = relay.Function([], output)
mod['func_1036'] = func_1036
mod = relay.transform.InferType()(mod)
output = func_1036()
func_1037 = relay.Function([], output)
mutated_mod['func_1037'] = func_1037
mutated_mod = relay.transform.InferType()(mutated_mod)
func_903_call = mod.get_global_var('func_903')
func_904_call = mutated_mod.get_global_var('func_904')
call_1083 = func_903_call()
call_1084 = func_903_call()
var_1087 = relay.var("var_1087", dtype = "float32", shape = (12, 3))#candidate|1087|(12, 3)|var|float32
bop_1088 = relay.subtract(call_1083.astype('float32'), relay.reshape(var_1087.astype('float32'), relay.shape_of(call_1083))) # shape=(12, 3)
bop_1091 = relay.subtract(call_1084.astype('float32'), relay.reshape(var_1087.astype('float32'), relay.shape_of(call_1084))) # shape=(12, 3)
output = bop_1088
output2 = bop_1091
func_1095 = relay.Function([var_1087,], output)
mod['func_1095'] = func_1095
mod = relay.transform.InferType()(mod)
mutated_mod['func_1095'] = func_1095
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1096 = relay.var("var_1096", dtype = "float32", shape = (12, 3))#candidate|1096|(12, 3)|var|float32
func_1095_call = mutated_mod.get_global_var('func_1095')
call_1097 = func_1095_call(var_1096)
output = call_1097
func_1098 = relay.Function([var_1096], output)
mutated_mod['func_1098'] = func_1098
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1144 = relay.var("var_1144", dtype = "float32", shape = (13,))#candidate|1144|(13,)|var|float32
uop_1145 = relay.acos(var_1144.astype('float32')) # shape=(13,)
bop_1147 = relay.multiply(var_1144.astype('float64'), relay.reshape(uop_1145.astype('float64'), relay.shape_of(var_1144))) # shape=(13,)
bop_1158 = relay.divide(uop_1145.astype('float32'), relay.reshape(bop_1147.astype('float32'), relay.shape_of(uop_1145))) # shape=(13,)
func_744_call = mod.get_global_var('func_744')
func_746_call = mutated_mod.get_global_var('func_746')
var_1164 = relay.var("var_1164", dtype = "float64", shape = (98,))#candidate|1164|(98,)|var|float64
call_1163 = relay.TupleGetItem(func_744_call(relay.reshape(var_1164.astype('float64'), [7, 14])), 2)
call_1165 = relay.TupleGetItem(func_746_call(relay.reshape(var_1164.astype('float64'), [7, 14])), 2)
uop_1178 = relay.cosh(bop_1158.astype('float64')) # shape=(13,)
bop_1180 = relay.floor_mod(uop_1178.astype('float64'), relay.reshape(bop_1158.astype('float64'), relay.shape_of(uop_1178))) # shape=(13,)
bop_1188 = relay.logical_xor(bop_1180.astype('int16'), relay.reshape(bop_1147.astype('int16'), relay.shape_of(bop_1180))) # shape=(13,)
uop_1191 = relay.sinh(bop_1147.astype('float32')) # shape=(13,)
bop_1195 = relay.not_equal(call_1163.astype('bool'), relay.reshape(var_1164.astype('bool'), relay.shape_of(call_1163))) # shape=(7, 14)
bop_1198 = relay.not_equal(call_1165.astype('bool'), relay.reshape(var_1164.astype('bool'), relay.shape_of(call_1165))) # shape=(7, 14)
func_297_call = mod.get_global_var('func_297')
func_303_call = mutated_mod.get_global_var('func_303')
var_1202 = relay.var("var_1202", dtype = "int16", shape = ())#candidate|1202|()|var|int16
var_1203 = relay.var("var_1203", dtype = "int16", shape = (352,))#candidate|1203|(352,)|var|int16
var_1204 = relay.var("var_1204", dtype = "float64", shape = (120,))#candidate|1204|(120,)|var|float64
var_1205 = relay.var("var_1205", dtype = "float32", shape = (12,))#candidate|1205|(12,)|var|float32
call_1201 = relay.TupleGetItem(func_297_call(relay.reshape(var_1202.astype('int16'), []), relay.reshape(var_1203.astype('int16'), [11, 16, 2]), relay.reshape(var_1204.astype('float64'), [120,]), relay.reshape(var_1205.astype('float32'), [12, 1]), ), 4)
call_1206 = relay.TupleGetItem(func_303_call(relay.reshape(var_1202.astype('int16'), []), relay.reshape(var_1203.astype('int16'), [11, 16, 2]), relay.reshape(var_1204.astype('float64'), [120,]), relay.reshape(var_1205.astype('float32'), [12, 1]), ), 4)
uop_1207 = relay.atan(bop_1188.astype('float32')) # shape=(13,)
uop_1209 = relay.rsqrt(bop_1158.astype('float32')) # shape=(13,)
uop_1213 = relay.asinh(var_1144.astype('float32')) # shape=(13,)
uop_1216 = relay.sin(bop_1195.astype('float32')) # shape=(7, 14)
uop_1218 = relay.sin(bop_1198.astype('float32')) # shape=(7, 14)
func_533_call = mod.get_global_var('func_533')
func_540_call = mutated_mod.get_global_var('func_540')
const_1220 = relay.const([True,False,False,False,False,True,True,False,False,False,True,False,False,True,True], dtype = "bool")#candidate|1220|(15,)|const|bool
call_1219 = relay.TupleGetItem(func_533_call(relay.reshape(const_1220.astype('bool'), [15,]), relay.reshape(var_1202.astype('int16'), []), relay.reshape(var_1203.astype('int16'), [352,]), relay.reshape(var_1204.astype('float64'), [120,]), relay.reshape(var_1205.astype('float32'), [6, 2]), ), 3)
call_1221 = relay.TupleGetItem(func_540_call(relay.reshape(const_1220.astype('bool'), [15,]), relay.reshape(var_1202.astype('int16'), []), relay.reshape(var_1203.astype('int16'), [352,]), relay.reshape(var_1204.astype('float64'), [120,]), relay.reshape(var_1205.astype('float32'), [6, 2]), ), 3)
uop_1227 = relay.sin(uop_1191.astype('float64')) # shape=(13,)
output = relay.Tuple([call_1201,var_1202,var_1203,var_1204,var_1205,uop_1207,uop_1209,uop_1213,uop_1216,call_1219,const_1220,uop_1227,])
output2 = relay.Tuple([call_1206,var_1202,var_1203,var_1204,var_1205,uop_1207,uop_1209,uop_1213,uop_1218,call_1221,const_1220,uop_1227,])
func_1231 = relay.Function([var_1144,var_1164,var_1202,var_1203,var_1204,var_1205,], output)
mod['func_1231'] = func_1231
mod = relay.transform.InferType()(mod)
var_1232 = relay.var("var_1232", dtype = "float32", shape = (13,))#candidate|1232|(13,)|var|float32
var_1233 = relay.var("var_1233", dtype = "float64", shape = (98,))#candidate|1233|(98,)|var|float64
var_1234 = relay.var("var_1234", dtype = "int16", shape = ())#candidate|1234|()|var|int16
var_1235 = relay.var("var_1235", dtype = "int16", shape = (352,))#candidate|1235|(352,)|var|int16
var_1236 = relay.var("var_1236", dtype = "float64", shape = (120,))#candidate|1236|(120,)|var|float64
var_1237 = relay.var("var_1237", dtype = "float32", shape = (12,))#candidate|1237|(12,)|var|float32
output = func_1231(var_1232,var_1233,var_1234,var_1235,var_1236,var_1237,)
func_1238 = relay.Function([var_1232,var_1233,var_1234,var_1235,var_1236,var_1237,], output)
mutated_mod['func_1238'] = func_1238
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1251 = relay.var("var_1251", dtype = "int32", shape = (8,))#candidate|1251|(8,)|var|int32
var_1252 = relay.var("var_1252", dtype = "int32", shape = (8,))#candidate|1252|(8,)|var|int32
bop_1253 = relay.not_equal(var_1251.astype('bool'), relay.reshape(var_1252.astype('bool'), relay.shape_of(var_1251))) # shape=(8,)
bop_1259 = relay.equal(bop_1253.astype('bool'), relay.reshape(var_1252.astype('bool'), relay.shape_of(bop_1253))) # shape=(8,)
bop_1264 = relay.bitwise_and(var_1251.astype('uint64'), relay.reshape(bop_1253.astype('uint64'), relay.shape_of(var_1251))) # shape=(8,)
output = relay.Tuple([bop_1259,bop_1264,])
output2 = relay.Tuple([bop_1259,bop_1264,])
func_1277 = relay.Function([var_1251,var_1252,], output)
mod['func_1277'] = func_1277
mod = relay.transform.InferType()(mod)
mutated_mod['func_1277'] = func_1277
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1277_call = mutated_mod.get_global_var('func_1277')
var_1279 = relay.var("var_1279", dtype = "int32", shape = (8,))#candidate|1279|(8,)|var|int32
var_1280 = relay.var("var_1280", dtype = "int32", shape = (8,))#candidate|1280|(8,)|var|int32
call_1278 = func_1277_call(var_1279,var_1280,)
output = call_1278
func_1281 = relay.Function([var_1279,var_1280,], output)
mutated_mod['func_1281'] = func_1281
mutated_mod = relay.transform.InferType()(mutated_mod)
func_903_call = mod.get_global_var('func_903')
func_904_call = mutated_mod.get_global_var('func_904')
call_1302 = func_903_call()
call_1303 = func_903_call()
uop_1326 = relay.acosh(call_1302.astype('float64')) # shape=(12, 3)
uop_1328 = relay.acosh(call_1303.astype('float64')) # shape=(12, 3)
output = relay.Tuple([uop_1326,])
output2 = relay.Tuple([uop_1328,])
func_1330 = relay.Function([], output)
mod['func_1330'] = func_1330
mod = relay.transform.InferType()(mod)
mutated_mod['func_1330'] = func_1330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1330_call = mutated_mod.get_global_var('func_1330')
call_1331 = func_1330_call()
output = call_1331
func_1332 = relay.Function([], output)
mutated_mod['func_1332'] = func_1332
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1354 = relay.var("var_1354", dtype = "bool", shape = (13, 7))#candidate|1354|(13, 7)|var|bool
var_1355 = relay.var("var_1355", dtype = "bool", shape = (13, 7))#candidate|1355|(13, 7)|var|bool
bop_1356 = relay.logical_or(var_1354.astype('bool'), relay.reshape(var_1355.astype('bool'), relay.shape_of(var_1354))) # shape=(13, 7)
bop_1362 = relay.less(bop_1356.astype('bool'), relay.reshape(var_1355.astype('bool'), relay.shape_of(bop_1356))) # shape=(13, 7)
output = bop_1362
output2 = bop_1362
func_1366 = relay.Function([var_1354,var_1355,], output)
mod['func_1366'] = func_1366
mod = relay.transform.InferType()(mod)
var_1367 = relay.var("var_1367", dtype = "bool", shape = (13, 7))#candidate|1367|(13, 7)|var|bool
var_1368 = relay.var("var_1368", dtype = "bool", shape = (13, 7))#candidate|1368|(13, 7)|var|bool
output = func_1366(var_1367,var_1368,)
func_1369 = relay.Function([var_1367,var_1368,], output)
mutated_mod['func_1369'] = func_1369
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1428 = relay.var("var_1428", dtype = "float64", shape = (4,))#candidate|1428|(4,)|var|float64
uop_1429 = relay.sigmoid(var_1428.astype('float64')) # shape=(4,)
uop_1431 = relay.sinh(uop_1429.astype('float64')) # shape=(4,)
bop_1433 = relay.floor_mod(uop_1431.astype('float32'), relay.reshape(uop_1429.astype('float32'), relay.shape_of(uop_1431))) # shape=(4,)
var_1436 = relay.var("var_1436", dtype = "float64", shape = (4,))#candidate|1436|(4,)|var|float64
bop_1437 = relay.maximum(uop_1431.astype('uint8'), relay.reshape(var_1436.astype('uint8'), relay.shape_of(uop_1431))) # shape=(4,)
var_1440 = relay.var("var_1440", dtype = "float32", shape = (4,))#candidate|1440|(4,)|var|float32
bop_1441 = relay.greater_equal(bop_1433.astype('bool'), relay.reshape(var_1440.astype('bool'), relay.shape_of(bop_1433))) # shape=(4,)
bop_1447 = relay.minimum(uop_1429.astype('uint64'), relay.reshape(var_1428.astype('uint64'), relay.shape_of(uop_1429))) # shape=(4,)
func_1231_call = mod.get_global_var('func_1231')
func_1238_call = mutated_mod.get_global_var('func_1238')
var_1455 = relay.var("var_1455", dtype = "float32", shape = (13,))#candidate|1455|(13,)|var|float32
const_1456 = relay.const([-1.241265,2.661519,7.663185,-6.650619,-7.396027,-8.762588,-0.663153,0.881855,2.782888,-2.181686,4.627983,-9.538360,3.033889,-8.166949,2.966692,-9.912763,4.531131,-9.551078,-6.139085,-3.421575,-1.020421,-5.757849,1.749037,-7.521317,-0.354905,6.073088,1.197356,-0.585572,4.236373,-0.794923,-1.345743,4.806770,-1.819714,0.015093,-2.767481,2.557550,-5.963716,-6.985908,-8.336553,-4.917110,9.363007,-1.568446,-9.229948,3.378345,6.958139,-4.077460,-2.405055,-7.428090,6.174066,-6.468345,0.658548,-7.744445,7.785172,6.410163,5.883434,-2.137263,-3.045809,9.967423,8.811731,-6.568746,-8.762077,9.114680,-0.718703,2.971222,5.474128,-0.924175,-9.086429,-5.175756,5.826040,8.879672,9.181442,8.795124,-8.667254,-7.766031,3.705977,-8.929309,8.863174,0.272285,0.729738,1.856969,-5.238253,4.228395,-6.251608,-5.252617,-1.278373,-6.780354,6.242380,4.762161,3.390771,-6.706737,-9.014068,-3.080465,-6.783348,-1.557766,3.969151,-4.024092,0.221111,-5.791000], dtype = "float64")#candidate|1456|(98,)|const|float64
const_1457 = relay.const(-7, dtype = "int16")#candidate|1457|()|const|int16
const_1458 = relay.const([3,-5,7,-5,10,7,4,-4,9,-8,6,4,9,1,6,-7,3,-6,-8,1,6,-4,7,1,-3,-1,-8,-10,-1,-4,-2,8,3,-6,-6,6,4,4,9,7,4,-10,5,9,10,-4,4,-8,7,-5,10,7,-3,-5,-6,-6,-2,-1,6,-4,-3,9,-10,4,10,2,-3,1,-10,2,-1,-8,-3,-2,1,5,4,-1,8,4,7,7,-5,-9,7,2,-8,-4,1,1,-10,6,-10,-8,4,-8,10,-2,4,-9,-3,-10,3,-3,10,6,2,-3,1,-1,-5,-8,2,9,3,8,3,8,-4,10,-7,-3,10,-9,1,-8,9,-3,-7,-9,-4,-6,-7,-3,-5,4,-9,9,6,10,10,-6,-3,-1,3,9,-7,2,-9,-6,8,-4,-8,6,-3,-1,-2,3,6,-6,-4,-4,-1,-6,1,-3,-1,-8,2,-2,8,-7,10,10,3,-3,-2,-9,-3,-3,6,-7,-5,-5,7,-1,1,-9,-9,5,6,1,4,1,7,-6,-4,-2,-6,-7,6,-1,-9,10,-9,1,4,3,4,-9,-2,5,-8,4,-4,8,-10,-9,-9,-6,-5,-6,-1,-8,7,-5,2,4,7,-5,-10,2,-2,-6,1,3,-8,-6,-10,-5,4,5,-2,-8,-6,9,-6,3,-4,-2,10,1,-4,9,5,-10,-6,7,-3,-6,-7,-2,-5,-10,-5,-4,-8,5,5,-8,9,-9,5,2,8,5,-2,8,-4,-8,1,-4,-8,10,4,-4,-8,-10,7,-8,-10,10,-4,1,7,6,1,8,2,3,-6,1,-9,6,2,1,-1,-6,-1,2,4,5,-2,7,1,-10,-8,-2,3,-3,3,9,-6,8,1,3,-10,1,3,5,-9,-2,7,1,3,-5,9,2,-8,-3,4,4,-6,7,-4,-3,9,-7,-1,-6,-6,3], dtype = "int16")#candidate|1458|(352,)|const|int16
var_1459 = relay.var("var_1459", dtype = "float64", shape = (120,))#candidate|1459|(120,)|var|float64
const_1460 = relay.const([0.093769,2.920148,4.943830,2.663951,8.930220,-0.205229,7.310992,9.724090,-2.537805,-7.227854,9.305901,0.054150], dtype = "float32")#candidate|1460|(12,)|const|float32
call_1454 = relay.TupleGetItem(func_1231_call(relay.reshape(var_1455.astype('float32'), [13,]), relay.reshape(const_1456.astype('float64'), [98,]), relay.reshape(const_1457.astype('int16'), []), relay.reshape(const_1458.astype('int16'), [352,]), relay.reshape(var_1459.astype('float64'), [120,]), relay.reshape(const_1460.astype('float32'), [12,]), ), 5)
call_1461 = relay.TupleGetItem(func_1238_call(relay.reshape(var_1455.astype('float32'), [13,]), relay.reshape(const_1456.astype('float64'), [98,]), relay.reshape(const_1457.astype('int16'), []), relay.reshape(const_1458.astype('int16'), [352,]), relay.reshape(var_1459.astype('float64'), [120,]), relay.reshape(const_1460.astype('float32'), [12,]), ), 5)
output = relay.Tuple([bop_1437,bop_1441,bop_1447,call_1454,var_1455,const_1456,const_1457,const_1458,var_1459,const_1460,])
output2 = relay.Tuple([bop_1437,bop_1441,bop_1447,call_1461,var_1455,const_1456,const_1457,const_1458,var_1459,const_1460,])
func_1464 = relay.Function([var_1428,var_1436,var_1440,var_1455,var_1459,], output)
mod['func_1464'] = func_1464
mod = relay.transform.InferType()(mod)
mutated_mod['func_1464'] = func_1464
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mutated_mod.get_global_var('func_1464')
var_1466 = relay.var("var_1466", dtype = "float64", shape = (4,))#candidate|1466|(4,)|var|float64
var_1467 = relay.var("var_1467", dtype = "float64", shape = (4,))#candidate|1467|(4,)|var|float64
var_1468 = relay.var("var_1468", dtype = "float32", shape = (4,))#candidate|1468|(4,)|var|float32
var_1469 = relay.var("var_1469", dtype = "float32", shape = (13,))#candidate|1469|(13,)|var|float32
var_1470 = relay.var("var_1470", dtype = "float64", shape = (120,))#candidate|1470|(120,)|var|float64
call_1465 = func_1464_call(var_1466,var_1467,var_1468,var_1469,var_1470,)
output = call_1465
func_1471 = relay.Function([var_1466,var_1467,var_1468,var_1469,var_1470,], output)
mutated_mod['func_1471'] = func_1471
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1036_call = mod.get_global_var('func_1036')
func_1037_call = mutated_mod.get_global_var('func_1037')
call_1473 = relay.TupleGetItem(func_1036_call(), 0)
call_1474 = relay.TupleGetItem(func_1037_call(), 0)
func_436_call = mod.get_global_var('func_436')
func_439_call = mutated_mod.get_global_var('func_439')
var_1502 = relay.var("var_1502", dtype = "float64", shape = (98,))#candidate|1502|(98,)|var|float64
const_1503 = relay.const([1.997566,-6.711896,-0.022241,5.497612,9.253527,-6.258529,3.395144,-5.430414,9.469482,-9.844348,0.381410,-6.418131,-1.671949,-5.235078,2.296032,-4.451158,-7.984230,-3.978716,-9.963878,8.090143,-8.943789,-0.835261,-8.808981,1.061847,-1.962402,-0.687218,-9.098916,0.966857,0.816437,9.845482,-3.920306,7.614914,-7.748529,5.209106,7.335907,-7.821334,-9.665172,9.349943,5.446270,4.029330,8.536343,3.893648,-6.393021,-7.110431,0.587204,-7.159996,9.443220,-2.094489,4.210273,-3.599321,-4.344477,5.054671,0.067640,1.747609,2.388931,-4.981943,5.784961,-6.190288,-1.359826,7.055209,-8.519892,-0.226672,8.102249,2.739427,-9.994770,-3.233606,7.137082,-8.758488,-9.713503,1.631789,-2.406953,-6.624393,-0.573979,9.062090,9.296758,-5.076037,3.131141,6.897596,0.872343,1.244740,1.274976,8.684490,2.774887,8.471359,1.357900,9.587416,2.998012,1.564663,0.663625,-9.348147,1.619386,-4.364694,2.333782,-7.133939,8.639544,3.368334,8.124054,2.577039,-5.951827,-6.678846,9.127529,2.148429,-5.217111,-8.259117,9.922203,-6.999113,6.787394,2.963810,4.914856,-7.415842,-3.530743,3.574502,-9.639552,-2.969583,3.578522,-5.858238,9.811604,3.328188,9.813482,1.689187,3.406337,2.531683,-7.714719,0.334643,-4.979592,-0.096423,3.908153,-4.551094,-3.083182,-4.725044,-1.729405,9.969231,-1.978803,3.047000,-7.732690,0.625772,-7.325514,4.663296,8.007420,-5.529642,-9.021716,-4.330669,-4.957055,7.390270,-7.599359,3.906947,-4.144973,-5.384026,2.542534,-7.647646,-0.750739,7.327436,7.909411,6.103957,-2.324843,-6.256064,6.281932,-8.648578,-4.955089,-9.630026,-8.766905,2.299302,-5.790304,2.578203,2.666828,-7.427187,8.814970,-4.165422,-3.990199,-0.926365,-1.976003,0.585685,6.786357,4.200207,8.275816,-7.633338,7.697165,-7.003581,2.756659,-7.226493,-5.457287,-1.914690,-9.708348,-4.199221,3.751511,6.523211,6.451601,1.556840,9.212427,-4.905338,-6.810695,-7.034462,-7.940250,-3.983509,-9.776511,-4.808597,9.176638,6.318957,-5.069146,-0.738174,-6.986881,6.053186,-8.124605,-4.027947,3.131094,-7.928477,-2.698054,-5.365248,6.737867,-2.940991,5.937172,-9.439231,-7.664575,-7.302805,6.193716,-8.784415,0.606880,-3.618062,-2.541517,0.018553,0.734039,1.162177,-8.433806,3.097895,-7.667781,6.120629,-4.777639,-1.037834,2.497584,9.623216,2.575768,-7.848151,8.159926,-1.639122,-3.439139,-6.773651,7.010997,3.932891,9.326864,-1.197706,-4.594724,1.499833,9.161010,1.703948,-7.278418,-5.725626,-0.095882,-4.625292,5.291945,4.478175,-9.590489,8.211314,-1.333385,9.985595,7.518185,2.097913,-7.958933,1.374270,5.653636,-4.101035,0.921293,5.898022,-5.382011,-5.372870,3.446819,8.898063,3.170892,3.560835,3.595483,5.467981,-6.141427,-0.777296,3.742350,7.471563,9.915524,-2.464485,-3.966983,-8.933555,-6.790525,-4.052644,8.483068,4.408379,-1.646951,-1.769213,-6.027858,2.319532,-8.870297,1.848738,5.489860,-3.088285,-9.312166,1.214977,4.115045,9.056556,-4.064291,6.742813,9.906966,-2.059651,7.815791,4.980321,-5.596536,3.290259,4.364185,-8.514955,3.177230,0.592348,-9.442624,-3.354987,-3.485905,2.211785,5.095360,-4.675855,0.535414,-6.466983,7.909813,-3.789731,-2.100909,7.380784,-5.825018,-2.108869,-3.202573,-9.036637,8.555702,-0.104539,-6.005959,-6.402567,-6.097795,1.937316,-6.628499,2.684709,7.512548,2.149651,0.994451,4.650760,4.602346,0.989977,4.673006,-8.529856,-2.334336,7.802062,-3.442864,-5.951687,-4.862406,-3.285815,2.295043,5.281416,-2.210864,6.209664,4.619671,2.665386,-5.745654,-3.850367,-3.112046,-0.548859,-4.180695,-0.514629,-5.450472,4.307538,-3.896586,6.505554,0.985605,-6.480812,1.683086,0.857154,0.848281,3.579193,8.976362,0.261631,-8.036980,-6.105197,7.186942,5.516381,0.201171,4.390155,2.708800,-2.213968,7.427752,-5.881933,-3.697268,4.712889,-4.589664,9.677927,-3.112037,-6.698092,3.649996,0.146242,5.995633,-4.966884,-0.586354,-7.892908,-9.925262,-4.039930,8.681172,-4.865855,1.853567,0.920022,6.798822,9.754758,-1.230355,-5.464426,5.331635,-6.747929,3.667581,0.143046,-7.360322,3.851434,-6.484717,-4.996978,-9.547763,6.090818,-7.218566,0.134486,-2.661775,-4.243927,-5.784646,-6.032396,-6.258090,-4.029657,7.489108,5.957834,6.813388,-3.145238,0.007463,-4.344378,3.893124,6.504605,-1.541134,4.342959,0.757462,6.400766,1.581902,5.690853,9.586508,9.228433,-6.774598,-1.381125,7.157723,8.788659,-5.052948,-4.085632,-7.916691,1.396802,-9.585800,7.468275,-9.186844,-6.033145,-1.384776,-2.006454,5.845214,-9.281317,-3.030260,-5.885688,4.244827,-9.303918,1.497562,5.945945,-1.552070,-1.978989,-0.863695,8.496049,3.419685,-1.043998,8.759642,7.776690,-8.235885,-2.541606,-6.944625,-5.124745,8.619354,3.739287,4.964763,-3.393449,-5.883245,-0.067301,-3.170133,5.362099,2.533771,6.515374,-3.109178,-6.856056,-1.816390,-6.258330,5.501682,-5.818775,2.054515,6.721881,-5.123825,7.481437,-8.089523,0.013828,3.491614,-3.095250,-8.967013,8.212448,-4.976833,8.202449,7.190445,-9.018616,-3.829165,1.370144,-0.785693,-4.532545,-9.509041,1.460022,-0.384474,3.385229,-6.462039,-7.508669,7.454696,9.484103,8.206286,-8.059501,-1.695061,7.188908,5.852425,2.595794,6.355401,-1.348234,5.538049,7.065648,0.986990,2.268168,-7.981232,-1.751530,8.548421,-8.624281,7.290187,5.134768,0.089983,-6.190758,8.367452,-8.082109,-7.863106,-9.500517,6.457219,6.546050,-1.325434,-0.799447,-8.132829,-8.545289,-6.242545,7.934714,2.713569,-5.328085,9.537823,5.612941,-2.889420,-4.585663,5.101007,-6.265798,-4.910404,2.612742,-8.022361,5.038744,-8.726291,-3.162292,-4.066035,-7.770890,7.913791,-9.686052,-9.843516,3.014949,-8.373323,9.212644,8.356874,-1.052168,3.322008,-4.707776,6.283729,-5.651417,-0.774528,-7.379413,-5.777686,-1.278989,8.332535,3.875437,7.547201,-7.652423,-5.854798,0.535436,1.919479,6.316854,8.399169,-0.900996,5.199557,-3.803149,-1.157798,1.775103,-6.116848,-9.802009,-2.286165,1.340378,-6.760392,4.696428,0.455224,-2.014648,-9.519663,3.283547,-7.157466,-3.179160,-5.123571,6.932497,-7.211551,-9.168804,-7.160731,-3.450820,-1.614237,-8.079995,-7.362161,3.137846,-8.630914,-6.179236,1.358472,-6.793927,-5.119676,5.747467,-4.330846,8.936315,2.108490,0.126465,-1.793341,1.534194,7.376049,7.087412,5.383821,0.138181,5.071219,9.611920,5.380156,-2.862261,-9.734829,-2.195435,-2.624044,7.608968,5.675205,8.932871,1.299011,-2.195613,5.281552,-9.425551,-9.147491,-8.354143,0.288792,-9.753895,-5.344910,-2.952997,5.305545,5.722539,-9.986863,4.231691,6.887517,1.622285,1.900846,3.169039,-9.212040,-9.496076,6.244699,-2.982758,-6.170067,0.342861,5.502073,5.734518,-7.477920,-0.159168,-2.836450,7.848666,-2.184612,-1.358209,-8.452594,-5.942632,7.368918,-4.807583,-4.454831,4.612663,5.921772,4.243370,4.072589,2.769862,9.932715,-8.390217,-1.464669,5.839482,8.728336,-6.015285,1.277349,-1.914192,6.217710,0.085741,3.807695,-4.823845,3.314818,0.436799,9.424837,-1.959864,-7.243397,-2.488587,-6.381502,4.062854,9.799109,-1.113544,3.607349,9.304882,1.607880,-1.271639,8.004231,7.806085,-3.719531,4.558401,-8.366296,-7.670494,9.918000,0.428061,-7.882178,9.963780,-6.201297,-6.432872,-2.889663,2.405001,-1.855669,-3.314345,-9.568535,-9.283570,-7.034205,-7.713549,9.252227,7.225493,5.476582,7.185252,1.562020,1.126764,-4.852787,8.263410,4.261403,-9.265899,-5.805217,-1.348648,-3.216169,0.872766,-4.502569,9.417492,-8.148099,-8.989129,6.946859,0.447940,-6.767215,2.296761,-8.012307,8.864064,6.837338,4.548000,-7.554036,-8.592211,-8.517735,5.514336,-6.052547,9.643072,3.678373,-5.019303,5.720275,-6.792315,1.225038,-2.973095,-7.076285,4.686168,8.898109,-2.926270,-8.807904,-7.291633,-7.543561,-2.564244,8.832121,-9.280365,1.125301,2.523592,-2.603601,5.398790,9.178755,-8.651081,1.608795,6.212978,-0.734176,1.286584,8.570020,-9.057300], dtype = "float64")#candidate|1503|(784,)|const|float64
call_1501 = relay.TupleGetItem(func_436_call(relay.reshape(var_1502.astype('float64'), [1, 7, 14]), relay.reshape(const_1503.astype('float64'), [8, 7, 14]), ), 1)
call_1504 = relay.TupleGetItem(func_439_call(relay.reshape(var_1502.astype('float64'), [1, 7, 14]), relay.reshape(const_1503.astype('float64'), [8, 7, 14]), ), 1)
var_1507 = relay.var("var_1507", dtype = "float32", shape = (12, 3))#candidate|1507|(12, 3)|var|float32
bop_1508 = relay.minimum(call_1473.astype('int64'), relay.reshape(var_1507.astype('int64'), relay.shape_of(call_1473))) # shape=(12, 3)
bop_1511 = relay.minimum(call_1474.astype('int64'), relay.reshape(var_1507.astype('int64'), relay.shape_of(call_1474))) # shape=(12, 3)
var_1513 = relay.var("var_1513", dtype = "float64", shape = (98,))#candidate|1513|(98,)|var|float64
bop_1514 = relay.mod(var_1502.astype('float32'), relay.reshape(var_1513.astype('float32'), relay.shape_of(var_1502))) # shape=(98,)
uop_1517 = relay.sinh(const_1503.astype('float64')) # shape=(784,)
uop_1522 = relay.tan(uop_1517.astype('float64')) # shape=(784,)
output = relay.Tuple([call_1501,bop_1508,bop_1514,uop_1522,])
output2 = relay.Tuple([call_1504,bop_1511,bop_1514,uop_1522,])
func_1524 = relay.Function([var_1502,var_1507,var_1513,], output)
mod['func_1524'] = func_1524
mod = relay.transform.InferType()(mod)
mutated_mod['func_1524'] = func_1524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1524_call = mutated_mod.get_global_var('func_1524')
var_1526 = relay.var("var_1526", dtype = "float64", shape = (98,))#candidate|1526|(98,)|var|float64
var_1527 = relay.var("var_1527", dtype = "float32", shape = (12, 3))#candidate|1527|(12, 3)|var|float32
var_1528 = relay.var("var_1528", dtype = "float64", shape = (98,))#candidate|1528|(98,)|var|float64
call_1525 = func_1524_call(var_1526,var_1527,var_1528,)
output = call_1525
func_1529 = relay.Function([var_1526,var_1527,var_1528,], output)
mutated_mod['func_1529'] = func_1529
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1538 = relay.var("var_1538", dtype = "float32", shape = (15, 10, 10))#candidate|1538|(15, 10, 10)|var|float32
uop_1539 = relay.rsqrt(var_1538.astype('float32')) # shape=(15, 10, 10)
var_1541 = relay.var("var_1541", dtype = "float32", shape = (15, 10, 10))#candidate|1541|(15, 10, 10)|var|float32
bop_1542 = relay.maximum(uop_1539.astype('uint8'), relay.reshape(var_1541.astype('uint8'), relay.shape_of(uop_1539))) # shape=(15, 10, 10)
output = bop_1542
output2 = bop_1542
func_1547 = relay.Function([var_1538,var_1541,], output)
mod['func_1547'] = func_1547
mod = relay.transform.InferType()(mod)
mutated_mod['func_1547'] = func_1547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1547_call = mutated_mod.get_global_var('func_1547')
var_1549 = relay.var("var_1549", dtype = "float32", shape = (15, 10, 10))#candidate|1549|(15, 10, 10)|var|float32
var_1550 = relay.var("var_1550", dtype = "float32", shape = (15, 10, 10))#candidate|1550|(15, 10, 10)|var|float32
call_1548 = func_1547_call(var_1549,var_1550,)
output = call_1548
func_1551 = relay.Function([var_1549,var_1550,], output)
mutated_mod['func_1551'] = func_1551
mutated_mod = relay.transform.InferType()(mutated_mod)
func_903_call = mod.get_global_var('func_903')
func_904_call = mutated_mod.get_global_var('func_904')
call_1597 = func_903_call()
call_1598 = func_903_call()
var_1603 = relay.var("var_1603", dtype = "float32", shape = (12, 3))#candidate|1603|(12, 3)|var|float32
bop_1604 = relay.mod(call_1597.astype('float64'), relay.reshape(var_1603.astype('float64'), relay.shape_of(call_1597))) # shape=(12, 3)
bop_1607 = relay.mod(call_1598.astype('float64'), relay.reshape(var_1603.astype('float64'), relay.shape_of(call_1598))) # shape=(12, 3)
uop_1619 = relay.atanh(var_1603.astype('float32')) # shape=(12, 3)
uop_1621 = relay.sigmoid(uop_1619.astype('float64')) # shape=(12, 3)
output = relay.Tuple([bop_1604,uop_1621,])
output2 = relay.Tuple([bop_1607,uop_1621,])
func_1625 = relay.Function([var_1603,], output)
mod['func_1625'] = func_1625
mod = relay.transform.InferType()(mod)
mutated_mod['func_1625'] = func_1625
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1626 = relay.var("var_1626", dtype = "float32", shape = (12, 3))#candidate|1626|(12, 3)|var|float32
func_1625_call = mutated_mod.get_global_var('func_1625')
call_1627 = func_1625_call(var_1626)
output = call_1627
func_1628 = relay.Function([var_1626], output)
mutated_mod['func_1628'] = func_1628
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1635 = relay.var("var_1635", dtype = "float64", shape = (4,))#candidate|1635|(4,)|var|float64
uop_1636 = relay.exp(var_1635.astype('float64')) # shape=(4,)
func_700_call = mod.get_global_var('func_700')
func_702_call = mutated_mod.get_global_var('func_702')
call_1640 = func_700_call()
call_1641 = func_700_call()
func_744_call = mod.get_global_var('func_744')
func_746_call = mutated_mod.get_global_var('func_746')
var_1644 = relay.var("var_1644", dtype = "float64", shape = (98,))#candidate|1644|(98,)|var|float64
call_1643 = relay.TupleGetItem(func_744_call(relay.reshape(var_1644.astype('float64'), [7, 14])), 0)
call_1645 = relay.TupleGetItem(func_746_call(relay.reshape(var_1644.astype('float64'), [7, 14])), 0)
uop_1649 = relay.acos(uop_1636.astype('float64')) # shape=(4,)
func_1231_call = mod.get_global_var('func_1231')
func_1238_call = mutated_mod.get_global_var('func_1238')
var_1652 = relay.var("var_1652", dtype = "float32", shape = (1, 13))#candidate|1652|(1, 13)|var|float32
const_1653 = relay.const(5, dtype = "int16")#candidate|1653|()|const|int16
var_1654 = relay.var("var_1654", dtype = "int16", shape = (352,))#candidate|1654|(352,)|var|int16
const_1655 = relay.const([-6.171543,-4.821877,-2.635540,-6.255010,2.380296,-9.382241,-9.445288,-8.333671,9.956076,1.470331,0.968127,-6.708659,-1.091040,0.660734,-5.718545,-9.861813,4.617483,-1.147255,-7.697452,-9.503256,6.728453,4.027305,-7.818728,8.720288,-1.125754,6.827113,6.798457,7.006390,1.653108,-7.978318,0.782356,-3.236745,5.155318,-4.925973,9.573985,4.771268,-0.042276,-7.126808,-0.400924,-4.086746,-7.136483,-6.749975,-2.524384,-8.884776,6.376192,0.009779,3.556603,9.508979,-8.064289,-4.037725,-2.956247,1.547025,6.772932,1.601262,7.050783,-4.127884,5.042479,-2.674424,-1.372701,-8.342908,8.508596,-2.672215,7.076664,5.570464,-5.379232,-2.927561,-9.147378,1.012726,1.167909,5.287944,-4.759850,6.216957,1.514568,9.294860,-8.037432,5.842047,5.128019,-4.984973,6.829998,1.795693,5.216919,-7.975589,2.629430,0.441121,-8.567197,6.416925,-7.806030,0.991831,-9.457288,6.845749,-9.869769,-7.823816,4.557000,-9.684266,3.863815,-8.463473,2.549457,-0.437417,-0.520098,-4.637881,-3.730417,2.924823,-7.337069,-3.314816,-6.388451,6.786110,-1.652230,-6.112710,-8.751153,-2.089519,-8.065847,-9.932150,4.534933,-8.437311,2.526879,0.119219,3.268184,-7.354383,3.689385,-2.750207], dtype = "float64")#candidate|1655|(120,)|const|float64
const_1656 = relay.const([-6.725366,5.092677,4.634965,-1.662430,-5.128923,-6.614951,2.367842,5.201133,3.688974,-2.488638,8.189460,-1.033499], dtype = "float32")#candidate|1656|(12,)|const|float32
call_1651 = relay.TupleGetItem(func_1231_call(relay.reshape(var_1652.astype('float32'), [13,]), relay.reshape(var_1644.astype('float64'), [98,]), relay.reshape(const_1653.astype('int16'), []), relay.reshape(var_1654.astype('int16'), [352,]), relay.reshape(const_1655.astype('float64'), [120,]), relay.reshape(const_1656.astype('float32'), [12,]), ), 5)
call_1657 = relay.TupleGetItem(func_1238_call(relay.reshape(var_1652.astype('float32'), [13,]), relay.reshape(var_1644.astype('float64'), [98,]), relay.reshape(const_1653.astype('int16'), []), relay.reshape(var_1654.astype('int16'), [352,]), relay.reshape(const_1655.astype('float64'), [120,]), relay.reshape(const_1656.astype('float32'), [12,]), ), 5)
uop_1660 = relay.atan(uop_1649.astype('float32')) # shape=(4,)
uop_1666 = relay.sqrt(uop_1660.astype('float64')) # shape=(4,)
bop_1668 = relay.divide(uop_1666.astype('float32'), relay.reshape(uop_1636.astype('float32'), relay.shape_of(uop_1666))) # shape=(4,)
uop_1675 = relay.erf(uop_1636.astype('float32')) # shape=(4,)
bop_1686 = relay.logical_or(bop_1668.astype('bool'), relay.reshape(uop_1649.astype('bool'), relay.shape_of(bop_1668))) # shape=(4,)
var_1694 = relay.var("var_1694", dtype = "float32", shape = (4,))#candidate|1694|(4,)|var|float32
bop_1695 = relay.power(uop_1675.astype('float64'), relay.reshape(var_1694.astype('float64'), relay.shape_of(uop_1675))) # shape=(4,)
output = relay.Tuple([call_1640,call_1643,var_1644,call_1651,var_1652,const_1653,var_1654,const_1655,const_1656,bop_1686,bop_1695,])
output2 = relay.Tuple([call_1641,call_1645,var_1644,call_1657,var_1652,const_1653,var_1654,const_1655,const_1656,bop_1686,bop_1695,])
F = relay.Function([var_1635,var_1644,var_1652,var_1654,var_1694,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1635,var_1644,var_1652,var_1654,var_1694,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1635= np.array([-9.156109,1.671559,0.346791,7.329051], dtype='float64')
module1.set_input('var_1635', input_1635)
input_1644= np.array([-2.801793,-0.261811,-4.547952,-2.463692,1.397062,9.994728,8.343758,-0.860261,9.146165,8.328547,-2.198912,-2.543854,-6.892590,6.945635,7.902694,-4.676713,3.073844,-5.726180,6.632856,-2.681607,4.069032,-5.036278,2.047140,7.064954,9.364825,-5.104493,5.938221,-3.573904,-5.319328,6.162109,-1.448522,-4.680610,-7.284032,1.318344,2.464890,-2.527755,4.497987,0.102985,6.016397,7.370635,7.942173,4.595107,-6.501335,4.557153,6.087199,0.274954,-1.006243,-6.234414,-8.348922,-2.151674,0.624282,-2.024386,0.273336,2.853740,-6.248550,9.366717,-1.143430,-5.992567,-0.713216,2.527820,-7.950126,5.445153,-5.419837,9.875393,9.085825,-9.159755,-2.298473,4.452235,-2.409604,4.403418,-2.942344,5.556061,0.147851,0.867607,8.472875,1.910440,5.169747,-2.146609,-4.496175,0.614102,3.195989,-4.724067,-9.206874,-0.628279,-1.473104,-6.906869,-4.563571,7.541924,3.676871,-6.521261,-6.296424,6.632732,-3.319052,9.199228,6.591416,3.432323,9.323524,1.440377], dtype='float64')
module1.set_input('var_1644', input_1644)
input_1652= np.array([[5.637131,-4.452455,0.605165,-5.096592,-7.094918,7.970676,1.542181,-1.990333,0.963870,1.567636,8.080780,6.470196,7.457290]], dtype='float32')
module1.set_input('var_1652', input_1652)
input_1654= np.array([-6,7,-2,-10,2,-1,-1,3,6,5,7,1,-9,3,9,-8,-5,-8,1,-7,-8,-2,-5,-2,-8,-6,-4,-8,-8,-5,-5,9,-7,4,-6,8,9,2,6,4,-9,-8,9,-6,-5,1,3,9,-8,-7,-3,-8,-9,-8,-4,-7,-5,8,9,1,4,-5,2,10,-8,-6,-3,5,5,-7,8,-2,8,-8,-3,-4,-9,-7,-4,2,-3,3,3,10,-1,-8,8,1,9,5,-8,-10,-10,9,3,4,-10,-2,4,2,8,4,10,-3,7,-3,-9,-2,-2,-2,4,1,-4,-6,6,4,8,9,5,6,-2,-7,-2,1,-1,8,-3,-9,3,-7,-7,-10,-1,2,-5,-10,-7,-9,9,4,-6,-7,-3,-8,-4,-3,6,-6,6,-6,6,7,4,-4,-9,3,3,4,6,10,7,-3,-9,-3,-6,-4,-3,-8,9,10,-10,-3,4,-9,-9,2,-2,-10,-5,6,10,-6,2,-3,-7,9,7,2,-9,-2,10,8,-1,5,-1,-7,-10,5,-10,3,1,-5,-3,-10,8,5,-5,1,9,-2,-6,3,-4,6,-7,1,10,-8,3,-7,9,-8,-3,10,5,-4,1,-7,-6,-10,3,-2,-7,5,-8,10,4,-2,7,1,-4,-4,-4,1,-5,6,-2,8,1,-9,8,6,7,1,4,7,8,-4,-4,6,-7,5,1,1,1,-10,-9,-10,-8,2,2,-9,-3,-5,-1,-6,3,10,-9,5,2,6,4,8,7,-6,-9,9,10,-1,-5,9,-10,-4,-9,8,8,5,-10,-6,4,3,-6,7,8,-7,7,-3,-3,8,9,7,2,9,-6,-8,-6,-4,-5,8,-1,8,-9,8,9,-7,-4,6,-6,-5,-2,3,-5,-10,-7,6,3,7,5,7,-1,-4,9,-8,-5,-9,7,-4,-8,7,-5,3], dtype='int16')
module1.set_input('var_1654', input_1654)
input_1694= np.array([-8.984344,-2.512243,-0.549457,-9.590910], dtype='float32')
module1.set_input('var_1694', input_1694)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res3 = intrp3.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res4 = intrp4.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_1635', input_1635)
module5.set_input('var_1644', input_1644)
module5.set_input('var_1652', input_1652)
module5.set_input('var_1654', input_1654)
module5.set_input('var_1694', input_1694)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res7 = intrp7.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res8 = intrp8.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_1635', input_1635)
module9.set_input('var_1644', input_1644)
module9.set_input('var_1652', input_1652)
module9.set_input('var_1654', input_1654)
module9.set_input('var_1694', input_1694)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res11 = intrp11.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res12 = intrp12.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_1635', input_1635)
module13.set_input('var_1644', input_1644)
module13.set_input('var_1652', input_1652)
module13.set_input('var_1654', input_1654)
module13.set_input('var_1694', input_1694)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res15 = intrp15.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res16 = intrp16.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_1635', input_1635)
module17.set_input('var_1644', input_1644)
module17.set_input('var_1652', input_1652)
module17.set_input('var_1654', input_1654)
module17.set_input('var_1694', input_1694)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res19 = intrp19.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res20 = intrp20.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_1635', input_1635)
module21.set_input('var_1644', input_1644)
module21.set_input('var_1652', input_1652)
module21.set_input('var_1654', input_1654)
module21.set_input('var_1694', input_1694)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res23 = intrp23.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res24 = intrp24.evaluate()(input_1635, input_1644, input_1652, input_1654, input_1694, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''