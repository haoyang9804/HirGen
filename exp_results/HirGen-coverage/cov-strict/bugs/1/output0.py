import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_2 = relay.var("var_2", dtype = "uint64", shape = ())#candidate|2|()|var|uint64
var_3 = relay.var("var_3", dtype = "uint64", shape = (9,))#candidate|3|(9,)|var|uint64
bop_4 = relay.minimum(var_2.astype('uint64'), var_3.astype('uint64')) # shape=(9,)
uop_11 = relay.tan(bop_4.astype('float32')) # shape=(9,)
bop_15 = relay.floor_divide(uop_11.astype('float32'), relay.reshape(var_3.astype('float32'), relay.shape_of(uop_11))) # shape=(9,)
bop_18 = relay.left_shift(bop_4.astype('uint64'), relay.reshape(uop_11.astype('uint64'), relay.shape_of(bop_4))) # shape=(9,)
uop_21 = relay.log2(uop_11.astype('float32')) # shape=(9,)
bop_25 = relay.maximum(uop_21.astype('uint16'), relay.reshape(bop_15.astype('uint16'), relay.shape_of(uop_21))) # shape=(9,)
output = relay.Tuple([bop_18,bop_25,])
output2 = relay.Tuple([bop_18,bop_25,])
func_29 = relay.Function([var_2,var_3,], output)
mod['func_29'] = func_29
mod = relay.transform.InferType()(mod)
var_30 = relay.var("var_30", dtype = "uint64", shape = ())#candidate|30|()|var|uint64
var_31 = relay.var("var_31", dtype = "uint64", shape = (9,))#candidate|31|(9,)|var|uint64
output = func_29(var_30,var_31,)
func_32 = relay.Function([var_30,var_31,], output)
mutated_mod['func_32'] = func_32
mutated_mod = relay.transform.InferType()(mutated_mod)
const_39 = relay.const([[-5.715759,3.986192,-4.162919,-9.056760,-6.349097,5.201232,-0.462958,-2.911188,5.446339],[3.687536,-2.924512,-6.470832,-8.603296,9.936883,-1.640168,-2.981793,8.592329,7.508128],[-7.293884,7.463053,-3.207671,-1.963425,3.296144,6.348777,0.964564,-9.315396,4.319916]], dtype = "float64")#candidate|39|(3, 9)|const|float64
uop_40 = relay.log10(const_39.astype('float64')) # shape=(3, 9)
uop_42 = relay.tan(uop_40.astype('float32')) # shape=(3, 9)
uop_44 = relay.atan(uop_42.astype('float32')) # shape=(3, 9)
const_47 = relay.const([[-6.076319,-6.029822,1.094685,-4.680733,-2.347343,6.040360,3.981404,4.631980,-3.011300],[-9.206699,1.888468,4.277599,1.765818,2.511256,-3.982254,-5.156388,-9.868209,4.188144],[-4.759057,3.593909,9.884971,8.477667,3.994790,1.901532,0.005425,6.602331,-4.007769]], dtype = "float32")#candidate|47|(3, 9)|const|float32
bop_48 = relay.greater(uop_42.astype('bool'), relay.reshape(const_47.astype('bool'), relay.shape_of(uop_42))) # shape=(3, 9)
output = relay.Tuple([uop_44,bop_48,])
output2 = relay.Tuple([uop_44,bop_48,])
func_51 = relay.Function([], output)
mod['func_51'] = func_51
mod = relay.transform.InferType()(mod)
output = func_51()
func_52 = relay.Function([], output)
mutated_mod['func_52'] = func_52
mutated_mod = relay.transform.InferType()(mutated_mod)
const_78 = relay.const([[[-3,-6,3,5,-7,-6,-9,-7,5,9,-1,1,-3],[-10,-7,5,-9,-8,-7,8,7,-7,2,9,5,7],[-8,-1,-7,-6,-4,-2,-3,5,-3,-4,-7,-9,6],[8,6,7,-2,-5,-9,-3,3,6,-8,-6,4,-3],[10,1,10,7,-5,-1,3,9,-8,-5,-10,9,-3],[-2,4,9,-9,-9,-10,-6,1,5,5,3,6,8],[-8,5,1,-8,3,8,8,1,-6,-4,-4,10,-2],[-5,-3,-4,10,-2,-7,4,10,1,1,-7,-9,-3],[-1,-2,-8,-1,2,3,5,10,8,3,8,-7,6],[-6,-6,-7,6,9,-8,6,-6,-1,4,6,-7,-1],[2,6,3,-2,2,5,-1,-1,-5,-1,6,5,-3],[-2,-7,-5,-3,9,-2,-3,2,-4,4,-4,-2,1],[6,8,4,-10,-4,-4,-6,1,5,2,-3,10,2],[8,8,-4,5,2,3,-2,6,4,-8,8,10,-1],[-8,2,-7,-8,10,-7,-5,4,-2,-6,4,-8,4],[8,-10,9,-1,2,1,-1,3,6,9,-7,-6,-9]],[[1,-3,-5,-3,9,5,-4,6,-6,-6,6,-6,-10],[8,-3,6,-4,3,9,6,-7,-10,7,-6,-4,1],[-4,5,-9,-2,9,10,-9,3,-6,-8,2,-4,3],[-2,-2,-6,-2,-2,5,-5,4,-8,-6,-10,1,-9],[-5,2,3,-4,-8,1,1,-3,9,-1,-1,7,1],[4,-7,-5,-6,-2,-2,1,-7,2,-10,-6,-2,4],[-7,3,-8,10,-9,-10,1,-3,-8,-2,9,-5,-8],[-7,-8,-6,-2,3,-7,7,-5,3,9,-8,10,-4],[-4,7,-9,-4,7,-2,-10,-9,5,5,3,5,-1],[10,2,2,4,10,6,-10,6,2,-6,-5,4,-10],[-7,8,-7,1,4,-7,-5,-2,3,-5,-4,6,-5],[9,-10,-6,-6,-9,7,-6,5,9,-10,-10,3,-3],[2,4,-10,-7,-6,1,1,8,-10,-9,8,3,-1],[1,10,-8,5,10,-7,-10,-1,-6,9,-10,-6,1],[9,2,-9,-3,-8,1,-4,-1,-9,-5,-9,5,-5],[-6,4,-5,-3,2,-1,-3,7,-4,-7,4,-5,-6]],[[-2,-4,-6,7,10,-4,8,-5,2,-10,3,9,-7],[6,4,8,-3,-10,-3,-10,9,-3,3,-8,7,-5],[9,10,9,-2,8,-6,10,-1,-4,-5,-8,-4,8],[5,9,8,3,8,6,4,9,6,-7,4,1,-6],[10,7,1,5,-1,8,3,-6,5,6,10,-3,10],[-10,-9,-9,6,6,7,5,-4,-3,-10,-9,-1,-1],[6,9,3,8,-6,8,-10,-7,-6,8,7,1,10],[-6,-5,-3,-3,7,-2,8,10,9,-2,1,-1,2],[-10,-9,2,-3,-2,-8,-9,-1,-9,-10,-6,-3,7],[8,2,-10,-2,-3,4,-1,-2,-1,5,-3,-2,-5],[4,-9,-3,3,-7,-8,-1,5,-8,-4,-5,-3,-9],[-7,1,-7,4,-8,-3,4,3,10,4,-3,-2,-3],[2,-9,2,1,-10,10,6,-10,-8,-10,-6,-9,6],[1,9,-6,9,1,1,-7,-10,-4,-5,-5,9,-6],[-6,3,6,-9,-1,-5,10,4,-10,6,-7,8,7],[5,-1,-10,7,-10,-9,-8,-5,1,-1,-1,-7,2]],[[-7,6,-6,-7,5,3,-1,4,1,2,-7,3,1],[10,9,2,4,10,-2,-6,-6,-8,1,1,-4,-10],[-8,-10,7,7,-5,3,-10,9,2,8,4,7,9],[-9,-2,5,-4,-9,6,6,-6,1,4,7,-7,5],[2,-1,1,4,-1,-3,6,3,-7,-5,1,-6,-8],[-10,1,-10,-1,-4,1,6,-8,4,-1,8,-7,1],[-9,-3,-2,-5,10,6,4,-6,1,-4,2,-5,-6],[-1,5,1,10,4,6,-7,-3,-10,6,-2,7,-7],[6,2,-4,7,6,7,1,-2,-9,5,-3,-10,10],[-5,10,8,4,9,4,1,-3,7,-10,-1,7,2],[1,-10,-4,2,9,-3,9,-2,10,-4,-2,5,10],[-10,1,7,-3,-7,-2,-4,-8,-3,-9,-9,-8,1],[3,-1,-3,-10,-4,8,-3,-6,-3,-5,7,7,5],[-4,8,5,3,-4,9,-3,-8,2,-8,-6,9,2],[-3,2,5,-3,3,-4,-5,3,10,-9,-6,2,9],[5,-3,-4,3,4,-5,-1,-6,5,3,7,5,-6]],[[7,7,9,-4,8,-9,-5,1,2,10,-8,9,-4],[-7,-10,-2,-2,-3,-2,3,6,-2,-7,-2,-6,-6],[9,6,-10,4,5,-9,6,7,-10,7,2,-8,6],[-7,4,9,-9,-7,-9,2,-7,-2,-4,9,7,3],[-9,10,3,-10,-3,2,-3,2,10,-7,-7,-9,5],[-7,6,-4,1,2,1,4,-8,-5,-5,-6,-3,1],[-9,-10,-8,1,-7,3,-8,5,-5,-3,-5,-8,9],[7,-5,9,1,-2,-6,-5,5,2,-2,-5,8,-2],[8,5,-1,9,-3,2,8,2,-7,9,-4,-7,10],[3,-10,2,2,7,-10,-9,-5,-4,7,8,-3,-7],[-10,5,-6,9,-3,6,-6,9,9,8,3,10,-10],[-5,5,-9,-4,-4,-3,6,4,1,5,8,2,-2],[10,6,-10,2,-10,-10,-5,7,-9,-6,-5,5,-1],[-5,-8,9,-9,-9,-5,-4,-2,-1,3,9,-1,5],[3,5,2,6,-9,2,-9,8,-2,9,1,2,-10],[-5,5,-6,-1,-2,-2,-7,-3,-2,-9,-4,-5,6]],[[-5,-9,1,-5,-6,-7,-3,-2,-7,-8,7,1,-2],[-7,-2,-2,-1,-1,7,-1,6,-1,-8,5,-1,6],[-5,-4,-3,-4,3,-1,9,1,7,-10,-1,-1,-6],[-2,1,7,-4,3,-3,2,2,-2,-5,-8,4,-5],[-1,-4,5,7,4,2,-4,-5,9,-3,-1,4,10],[8,10,-1,-2,-1,10,2,10,4,-8,-3,8,-10],[4,7,-5,-10,-8,9,7,-6,-6,3,-4,-1,7],[9,-1,4,-2,9,-6,4,9,4,3,-5,10,-4],[4,-5,1,-6,-5,-8,-1,-8,-4,-3,-8,-1,8],[-10,3,-3,1,-9,3,5,-6,-9,-7,-6,-9,-8],[-7,-8,6,-3,9,-7,5,-3,1,-8,-10,-8,4],[-10,4,-10,8,5,-3,2,-4,4,-6,8,4,6],[5,-1,-9,-1,-10,3,-8,-1,-5,-7,-1,-8,10],[4,-4,-10,-6,5,3,-8,9,-2,-8,-2,-5,3],[1,-2,-9,-5,-9,-9,5,2,-2,-4,2,9,-10],[-4,-9,-2,10,1,4,-10,10,-10,7,-6,10,1]],[[-7,-1,-3,-3,-2,5,1,-1,4,8,3,1,-9],[1,1,3,-4,5,1,-2,-5,7,4,2,9,2],[-9,-4,-3,10,-8,-10,-7,-2,6,-3,2,8,-6],[-4,2,9,-10,-10,9,-5,-2,9,-3,-10,-8,10],[1,-8,10,-3,7,-4,6,-9,3,-2,-8,-6,4],[10,9,4,9,8,-3,2,3,-6,-1,4,9,-10],[-6,10,4,-4,1,4,9,9,-1,3,-6,-4,5],[10,-1,3,-7,-1,-4,-4,4,-4,10,-6,-2,-6],[7,-5,6,-6,-4,-8,1,-3,-6,-9,7,-5,7],[-7,-8,7,-4,8,6,9,-3,4,-8,-1,6,-5],[5,9,9,9,10,3,-8,4,-4,-7,-3,1,8],[4,-1,-6,-8,8,-2,7,5,-5,-10,9,5,-9],[7,-8,1,10,2,8,-10,7,5,5,3,-3,1],[7,9,4,7,10,5,-9,5,-9,6,-8,-2,-1],[3,10,-7,1,4,-2,9,-8,-2,-3,8,4,8],[5,5,4,1,3,2,3,-9,-8,7,-3,5,-9]],[[-8,9,7,5,-1,1,5,-1,7,-3,-1,5,9],[8,-5,-8,-10,-2,-10,-8,-8,-4,-4,-9,1,7],[5,9,-1,-9,-3,-1,4,1,-2,9,-9,-4,10],[-4,-7,2,-3,7,7,2,3,-7,9,-4,-9,1],[-6,1,-8,6,7,9,-10,-4,4,-10,-1,7,5],[1,2,1,6,-5,-8,4,-10,5,-1,8,-7,4],[3,8,-1,-9,-10,5,2,-4,3,-8,-1,3,-4],[-9,9,-10,5,10,8,2,-2,6,5,6,6,-10],[-7,-10,6,-3,-5,7,3,-7,-9,-9,-6,-6,-4],[10,6,-8,-5,-5,2,-9,-3,8,-6,-8,-3,-7],[-3,1,-5,9,1,6,8,10,-9,8,5,-9,10],[-5,4,4,-5,5,4,-3,1,-2,9,10,8,2],[-3,-4,6,-6,3,8,-4,10,-8,2,2,-10,-5],[3,-10,9,-3,4,4,10,1,7,-2,1,2,1],[1,-7,4,2,-2,-7,5,4,5,-7,1,-10,-1],[-5,8,6,-7,-6,2,9,8,-1,-9,-4,-9,1]]], dtype = "uint32")#candidate|78|(8, 16, 13)|const|uint32
var_79 = relay.var("var_79", dtype = "uint32", shape = (8, 16, 13))#candidate|79|(8, 16, 13)|var|uint32
bop_80 = relay.bitwise_or(const_78.astype('uint32'), relay.reshape(var_79.astype('uint32'), relay.shape_of(const_78))) # shape=(8, 16, 13)
var_86 = relay.var("var_86", dtype = "uint32", shape = (8, 16, 13))#candidate|86|(8, 16, 13)|var|uint32
bop_87 = relay.maximum(bop_80.astype('int8'), relay.reshape(var_86.astype('int8'), relay.shape_of(bop_80))) # shape=(8, 16, 13)
const_90 = relay.const([[[7,-7,1,1,2,5,-5,-1,-5,5,4,-10,-2],[10,6,4,-9,2,-5,-9,-6,-8,-3,3,4,8],[5,5,-8,-1,-10,8,6,-9,-3,-9,5,2,-6],[8,3,10,-5,7,-9,-8,5,-10,5,3,-2,-9],[-10,6,7,6,1,-8,-10,-10,5,-9,3,1,-1],[-6,-7,-1,-5,2,3,4,3,-10,8,1,-9,2],[-10,-10,7,5,2,-10,-2,-10,10,9,-5,6,1],[5,-6,2,1,-10,-7,-4,-10,7,-9,-7,9,4],[-6,-7,6,7,-10,9,-10,-2,3,-7,2,-6,-10],[-2,10,-3,4,3,4,3,8,5,-10,-6,-5,-9],[6,-8,10,-5,3,5,10,7,-8,7,-2,-4,1],[9,-3,-3,-4,5,-8,-4,-10,8,9,-3,-6,4],[5,2,8,-4,-10,9,-5,-9,7,-5,4,-7,9],[-3,2,-4,-5,-7,-6,3,-5,9,9,6,-1,2],[-4,-10,1,-9,1,2,-8,9,9,9,8,-7,-5],[-2,-3,2,1,2,5,7,-5,-2,-9,8,-6,-3]],[[4,-1,4,-5,-6,-4,-9,1,8,-2,6,-7,-8],[4,-1,-8,8,3,-5,-8,-5,9,1,-10,9,-5],[7,-9,-6,-8,-1,-1,8,-2,-4,5,5,5,-6],[-8,-8,-10,-2,9,4,-4,-4,4,10,-6,-8,-8],[-4,10,10,5,-10,3,5,-1,-9,-4,1,6,5],[8,10,-6,-8,4,-4,-8,-5,-6,4,9,-2,8],[-2,5,-4,-1,-8,1,-3,8,6,-2,8,1,-3],[7,3,9,8,3,6,8,-10,1,-6,1,-4,4],[10,4,-6,-1,6,2,-1,-8,8,-10,-7,-4,-8],[6,7,-4,5,-2,-10,-8,10,-2,9,-7,-10,-7],[-8,1,-5,9,-6,1,-2,-4,8,3,-4,-1,7],[-9,-5,-5,9,-8,-2,8,-2,3,4,8,-9,-9],[6,-7,-8,-1,5,7,-1,-8,-3,-2,5,-7,-3],[2,6,7,1,-4,-10,-3,8,-1,-4,1,-5,-2],[-10,-1,6,5,5,1,-3,5,9,-2,-6,5,2],[-7,10,-9,-8,1,4,-5,7,-4,-10,-6,5,-7]],[[3,-10,7,1,-7,-10,-1,-1,7,3,-2,4,4],[-3,2,-9,-2,-9,8,-10,10,-4,-9,5,2,1],[5,-8,-9,-9,2,5,10,-7,-2,5,-5,5,5],[3,10,-1,-1,-5,1,9,-3,-1,8,1,-3,4],[-7,-5,8,8,-9,-2,-8,-1,2,-6,6,-10,-5],[4,1,-9,6,-1,-9,-2,-7,-1,3,8,3,2],[3,-2,7,8,6,4,-9,-6,-5,-9,7,1,-1],[7,5,1,-3,6,-1,-6,2,-8,-7,1,5,6],[9,3,-6,-4,-10,-7,-10,-5,-7,-7,-4,-2,-9],[5,-3,7,-6,-2,1,-3,10,5,3,10,-10,-1],[-2,-5,3,7,1,-8,6,-1,-7,-7,-4,-7,-2],[-7,6,9,10,-8,-6,-1,-3,-5,-10,-6,-1,-3],[7,2,-7,-4,-8,10,6,10,-5,8,9,-8,10],[-7,-1,7,-8,-7,-1,-9,-3,6,-9,3,7,-3],[-7,-7,-7,9,5,-5,-7,10,-5,-5,-10,-2,-7],[-4,-6,-3,9,9,4,-3,-6,-2,3,8,-4,8]],[[6,-2,5,-7,4,6,-10,9,-5,-5,-3,1,-10],[3,6,8,1,4,8,7,-9,-3,-7,5,7,2],[-6,5,6,9,-9,-3,-9,-6,-6,8,7,-6,-4],[-8,-10,10,-5,-1,-10,2,-7,2,10,2,-5,3],[2,8,-2,-6,9,8,10,7,-10,-1,-4,5,-3],[3,-9,-1,6,6,8,-10,-9,-2,-8,9,10,6],[-5,9,10,-7,8,10,9,-4,10,-5,4,8,-6],[1,8,-1,10,2,-2,9,-9,8,2,7,7,3],[-9,3,-1,-3,-4,2,4,4,-5,8,9,-3,7],[5,2,-5,-10,-6,7,-9,-4,4,7,4,10,-7],[7,2,-10,9,-6,2,-5,6,-10,2,10,-9,-4],[10,-6,-3,-8,8,1,-9,4,-2,2,2,4,5],[9,-10,7,-9,8,-6,8,-4,5,-3,-5,-9,-4],[8,-4,2,6,-10,-4,6,2,8,-9,-6,-4,-3],[-7,-7,-1,9,-9,-1,-2,8,2,8,9,2,8],[2,1,2,-6,-7,5,6,-6,9,-10,6,10,-3]],[[-9,6,-7,1,4,5,4,8,-9,-3,1,-5,-6],[10,4,-6,-2,-10,1,-4,5,-4,1,-8,6,5],[1,8,-10,5,4,7,-4,-3,-10,-9,-8,6,4],[-2,-5,-8,9,-6,-6,3,4,6,-8,-4,-9,7],[-5,9,-7,10,9,10,3,9,7,-1,-3,-1,-7],[-1,-6,-4,-1,10,5,2,7,-4,-8,-2,-4,-7],[8,-7,-1,-1,-9,7,9,10,7,-10,5,-7,-6],[7,-9,-6,-2,-4,-5,1,-4,-6,8,-9,-1,1],[2,7,4,9,-2,-2,9,-9,-5,-10,1,-3,3],[5,-10,10,-2,-9,2,-2,4,9,4,-10,10,-7],[8,-1,-2,5,-3,-4,-1,-3,-5,-9,9,-2,8],[3,4,1,1,-4,-8,-5,-5,6,-5,1,2,-7],[-10,7,3,-7,9,10,10,3,3,9,-8,-4,-1],[-3,6,7,10,-3,-1,3,-8,8,-7,8,-8,7],[-9,10,-7,5,4,-9,-6,-1,-5,-7,-7,5,-7],[-5,-7,2,5,-7,7,-8,-6,7,-3,8,-3,3]],[[1,6,-8,-4,5,-2,-10,-7,-3,-9,-3,-2,7],[4,-7,3,-6,8,10,-10,8,7,3,8,-10,6],[5,10,9,5,-3,-6,7,-5,-5,-4,-9,4,7],[-9,-9,8,4,-8,-4,-1,-9,-5,10,-5,-7,2],[10,-7,6,-3,10,10,1,-6,-3,1,-3,-10,8],[-2,2,10,-7,-10,2,9,5,7,9,1,2,6],[10,-2,9,3,5,-5,10,-7,-9,6,8,-1,1],[-1,-6,10,-2,4,6,5,3,-4,-5,5,9,-9],[-7,4,-2,2,-3,-4,7,-6,-9,4,1,3,1],[2,-1,5,-1,5,7,3,-10,-4,-7,7,3,6],[-1,2,8,10,-6,7,-5,3,10,1,-3,6,-7],[-5,-6,6,3,9,-3,1,3,9,8,1,9,7],[-9,3,-6,6,-1,-9,-10,6,-7,-7,4,-2,9],[2,7,10,-2,2,1,-2,-10,-9,-1,-6,-3,-1],[-8,-9,6,6,3,-7,-9,5,-7,-4,-1,-7,-7],[1,5,-7,4,-1,9,2,-3,7,10,-2,2,-3]],[[-7,5,5,-6,-7,7,-8,2,6,-9,4,1,-9],[-10,6,-4,-8,-9,-7,7,-7,-7,-3,-2,4,-7],[7,-2,-10,-9,-10,1,4,-2,6,-6,2,-6,4],[-3,9,-7,-10,5,5,-8,9,-4,-1,5,-6,10],[4,-2,-6,-7,6,3,4,8,4,-4,-7,-7,5],[-8,2,-8,4,7,6,4,7,-8,7,-10,-3,-7],[3,1,-5,6,4,6,-3,-7,8,-10,1,5,5],[-1,10,-9,2,-10,6,6,1,2,-8,10,2,-10],[10,-3,1,-3,1,-7,-1,-2,4,-1,-2,6,1],[4,7,-6,-9,2,-2,4,-9,6,7,-1,6,3],[-6,-9,-6,2,-7,10,7,8,1,5,-3,3,1],[-9,7,-8,-1,-2,8,-10,-10,2,6,-1,4,-6],[8,-6,-3,-7,-7,5,-10,6,-9,-6,7,-8,-10],[10,4,-2,5,-3,-3,9,5,-9,-1,6,1,8],[-2,3,-7,7,-8,6,-8,-2,-1,-2,-6,-3,8],[-6,-1,-9,3,6,-6,3,-5,7,-10,-4,-3,7]],[[-1,-6,-2,-10,-9,8,2,3,-1,1,-7,-7,9],[-10,-2,-4,1,-2,4,-8,4,4,1,5,4,-8],[-6,2,8,10,2,1,-3,6,8,10,-1,-7,2],[6,7,8,9,-9,-3,5,2,-1,-10,4,-3,9],[9,-6,-7,8,4,-7,8,-10,-8,8,-2,7,-6],[-1,5,2,-5,6,1,-7,-2,10,4,-4,-4,2],[-1,-7,10,-7,7,1,-8,-7,3,-7,-10,-6,6],[5,-2,5,6,4,9,2,-1,-9,2,-9,10,1],[-3,-2,-8,-1,4,8,8,-5,-1,3,2,10,-8],[10,-7,7,9,-10,-6,9,-5,-1,7,9,5,-2],[8,10,3,3,10,-9,-9,7,-8,-5,-3,7,4],[-10,2,5,-3,3,4,5,5,-2,3,-10,-6,-7],[3,1,-1,-4,4,-10,-4,-5,2,10,-6,-2,2],[3,8,8,-1,7,-3,-5,-10,-6,-2,3,-4,1],[-7,-10,-6,-10,-10,-6,-9,-5,5,9,-6,2,-9],[10,-7,-3,4,5,4,-6,4,-7,6,5,-3,9]]], dtype = "int8")#candidate|90|(8, 16, 13)|const|int8
bop_91 = relay.divide(bop_87.astype('float32'), relay.reshape(const_90.astype('float32'), relay.shape_of(bop_87))) # shape=(8, 16, 13)
output = bop_91
output2 = bop_91
func_94 = relay.Function([var_79,var_86,], output)
mod['func_94'] = func_94
mod = relay.transform.InferType()(mod)
var_95 = relay.var("var_95", dtype = "uint32", shape = (8, 16, 13))#candidate|95|(8, 16, 13)|var|uint32
var_96 = relay.var("var_96", dtype = "uint32", shape = (8, 16, 13))#candidate|96|(8, 16, 13)|var|uint32
output = func_94(var_95,var_96,)
func_97 = relay.Function([var_95,var_96,], output)
mutated_mod['func_97'] = func_97
mutated_mod = relay.transform.InferType()(mutated_mod)
var_116 = relay.var("var_116", dtype = "uint8", shape = ())#candidate|116|()|var|uint8
var_117 = relay.var("var_117", dtype = "uint8", shape = (7,))#candidate|117|(7,)|var|uint8
bop_118 = relay.left_shift(var_116.astype('uint8'), var_117.astype('uint8')) # shape=(7,)
output = relay.Tuple([bop_118,])
output2 = relay.Tuple([bop_118,])
func_121 = relay.Function([var_116,var_117,], output)
mod['func_121'] = func_121
mod = relay.transform.InferType()(mod)
mutated_mod['func_121'] = func_121
mutated_mod = relay.transform.InferType()(mutated_mod)
func_121_call = mutated_mod.get_global_var('func_121')
var_123 = relay.var("var_123", dtype = "uint8", shape = ())#candidate|123|()|var|uint8
var_124 = relay.var("var_124", dtype = "uint8", shape = (7,))#candidate|124|(7,)|var|uint8
call_122 = func_121_call(var_123,var_124,)
output = call_122
func_125 = relay.Function([var_123,var_124,], output)
mutated_mod['func_125'] = func_125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_51_call = mod.get_global_var('func_51')
func_52_call = mutated_mod.get_global_var('func_52')
call_131 = relay.TupleGetItem(func_51_call(), 0)
call_132 = relay.TupleGetItem(func_52_call(), 0)
func_51_call = mod.get_global_var('func_51')
func_52_call = mutated_mod.get_global_var('func_52')
call_146 = relay.TupleGetItem(func_51_call(), 1)
call_147 = relay.TupleGetItem(func_52_call(), 1)
uop_157 = relay.erf(call_131.astype('float32')) # shape=(3, 9)
uop_159 = relay.erf(call_132.astype('float32')) # shape=(3, 9)
uop_161 = relay.sin(uop_157.astype('float64')) # shape=(3, 9)
uop_163 = relay.sin(uop_159.astype('float64')) # shape=(3, 9)
bop_165 = relay.multiply(uop_157.astype('float32'), relay.reshape(call_131.astype('float32'), relay.shape_of(uop_157))) # shape=(3, 9)
bop_168 = relay.multiply(uop_159.astype('float32'), relay.reshape(call_132.astype('float32'), relay.shape_of(uop_159))) # shape=(3, 9)
bop_169 = relay.greater(uop_161.astype('bool'), relay.reshape(call_146.astype('bool'), relay.shape_of(uop_161))) # shape=(3, 9)
bop_172 = relay.greater(uop_163.astype('bool'), relay.reshape(call_147.astype('bool'), relay.shape_of(uop_163))) # shape=(3, 9)
uop_173 = relay.sinh(bop_169.astype('float32')) # shape=(3, 9)
uop_175 = relay.sinh(bop_172.astype('float32')) # shape=(3, 9)
var_176 = relay.var("var_176", dtype = "float32", shape = (3, 9))#candidate|176|(3, 9)|var|float32
bop_177 = relay.minimum(uop_173.astype('float32'), relay.reshape(var_176.astype('float32'), relay.shape_of(uop_173))) # shape=(3, 9)
bop_180 = relay.minimum(uop_175.astype('float32'), relay.reshape(var_176.astype('float32'), relay.shape_of(uop_175))) # shape=(3, 9)
uop_181 = relay.asin(bop_169.astype('float64')) # shape=(3, 9)
uop_183 = relay.asin(bop_172.astype('float64')) # shape=(3, 9)
bop_184 = relay.maximum(bop_165.astype('int16'), relay.reshape(uop_181.astype('int16'), relay.shape_of(bop_165))) # shape=(3, 9)
bop_187 = relay.maximum(bop_168.astype('int16'), relay.reshape(uop_183.astype('int16'), relay.shape_of(bop_168))) # shape=(3, 9)
bop_188 = relay.add(uop_161.astype('int16'), relay.reshape(uop_181.astype('int16'), relay.shape_of(uop_161))) # shape=(3, 9)
bop_191 = relay.add(uop_163.astype('int16'), relay.reshape(uop_183.astype('int16'), relay.shape_of(uop_163))) # shape=(3, 9)
var_194 = relay.var("var_194", dtype = "int16", shape = (3, 9))#candidate|194|(3, 9)|var|int16
bop_195 = relay.less(bop_188.astype('bool'), relay.reshape(var_194.astype('bool'), relay.shape_of(bop_188))) # shape=(3, 9)
bop_198 = relay.less(bop_191.astype('bool'), relay.reshape(var_194.astype('bool'), relay.shape_of(bop_191))) # shape=(3, 9)
func_51_call = mod.get_global_var('func_51')
func_52_call = mutated_mod.get_global_var('func_52')
call_199 = relay.TupleGetItem(func_51_call(), 1)
call_200 = relay.TupleGetItem(func_52_call(), 1)
uop_201 = relay.rsqrt(bop_169.astype('float32')) # shape=(3, 9)
uop_203 = relay.rsqrt(bop_172.astype('float32')) # shape=(3, 9)
bop_206 = relay.equal(bop_177.astype('bool'), relay.reshape(uop_181.astype('bool'), relay.shape_of(bop_177))) # shape=(3, 9)
bop_209 = relay.equal(bop_180.astype('bool'), relay.reshape(uop_183.astype('bool'), relay.shape_of(bop_180))) # shape=(3, 9)
const_210 = relay.const([[True,True,True,False,False,True,True,True,False],[True,True,True,False,True,False,False,False,False],[False,True,True,True,True,True,False,False,False]], dtype = "bool")#candidate|210|(3, 9)|const|bool
bop_211 = relay.logical_and(bop_169.astype('bool'), relay.reshape(const_210.astype('bool'), relay.shape_of(bop_169))) # shape=(3, 9)
bop_214 = relay.logical_and(bop_172.astype('bool'), relay.reshape(const_210.astype('bool'), relay.shape_of(bop_172))) # shape=(3, 9)
func_94_call = mod.get_global_var('func_94')
func_97_call = mutated_mod.get_global_var('func_97')
var_216 = relay.var("var_216", dtype = "uint32", shape = (1664,))#candidate|216|(1664,)|var|uint32
call_215 = func_94_call(relay.reshape(var_216.astype('uint32'), [8, 16, 13]), relay.reshape(var_216.astype('uint32'), [8, 16, 13]), )
call_217 = func_94_call(relay.reshape(var_216.astype('uint32'), [8, 16, 13]), relay.reshape(var_216.astype('uint32'), [8, 16, 13]), )
bop_219 = relay.logical_xor(bop_165.astype('uint16'), relay.reshape(call_146.astype('uint16'), relay.shape_of(bop_165))) # shape=(3, 9)
bop_222 = relay.logical_xor(bop_168.astype('uint16'), relay.reshape(call_147.astype('uint16'), relay.shape_of(bop_168))) # shape=(3, 9)
bop_223 = relay.add(bop_219.astype('uint16'), relay.reshape(bop_188.astype('uint16'), relay.shape_of(bop_219))) # shape=(3, 9)
bop_226 = relay.add(bop_222.astype('uint16'), relay.reshape(bop_191.astype('uint16'), relay.shape_of(bop_222))) # shape=(3, 9)
uop_229 = relay.rsqrt(uop_181.astype('float64')) # shape=(3, 9)
uop_231 = relay.rsqrt(uop_183.astype('float64')) # shape=(3, 9)
var_232 = relay.var("var_232", dtype = "float32", shape = (3, 9))#candidate|232|(3, 9)|var|float32
bop_233 = relay.equal(uop_201.astype('bool'), relay.reshape(var_232.astype('bool'), relay.shape_of(uop_201))) # shape=(3, 9)
bop_236 = relay.equal(uop_203.astype('bool'), relay.reshape(var_232.astype('bool'), relay.shape_of(uop_203))) # shape=(3, 9)
bop_237 = relay.power(uop_229.astype('float32'), relay.reshape(bop_169.astype('float32'), relay.shape_of(uop_229))) # shape=(3, 9)
bop_240 = relay.power(uop_231.astype('float32'), relay.reshape(bop_172.astype('float32'), relay.shape_of(uop_231))) # shape=(3, 9)
uop_244 = relay.sigmoid(uop_181.astype('float64')) # shape=(3, 9)
uop_246 = relay.sigmoid(uop_183.astype('float64')) # shape=(3, 9)
var_249 = relay.var("var_249", dtype = "float32", shape = (3, 9))#candidate|249|(3, 9)|var|float32
bop_250 = relay.not_equal(bop_237.astype('bool'), relay.reshape(var_249.astype('bool'), relay.shape_of(bop_237))) # shape=(3, 9)
bop_253 = relay.not_equal(bop_240.astype('bool'), relay.reshape(var_249.astype('bool'), relay.shape_of(bop_240))) # shape=(3, 9)
func_29_call = mod.get_global_var('func_29')
func_32_call = mutated_mod.get_global_var('func_32')
var_256 = relay.var("var_256", dtype = "uint64", shape = ())#candidate|256|()|var|uint64
const_257 = relay.const([6,-2,1,10,-8,2,-9,-3,2], dtype = "uint64")#candidate|257|(9,)|const|uint64
call_255 = relay.TupleGetItem(func_29_call(relay.reshape(var_256.astype('uint64'), []), relay.reshape(const_257.astype('uint64'), [9,]), ), 1)
call_258 = relay.TupleGetItem(func_32_call(relay.reshape(var_256.astype('uint64'), []), relay.reshape(const_257.astype('uint64'), [9,]), ), 1)
bop_261 = relay.logical_or(bop_250.astype('bool'), relay.reshape(uop_201.astype('bool'), relay.shape_of(bop_250))) # shape=(3, 9)
bop_264 = relay.logical_or(bop_253.astype('bool'), relay.reshape(uop_203.astype('bool'), relay.shape_of(bop_253))) # shape=(3, 9)
bop_266 = relay.logical_xor(bop_177.astype('uint32'), relay.reshape(bop_233.astype('uint32'), relay.shape_of(bop_177))) # shape=(3, 9)
bop_269 = relay.logical_xor(bop_180.astype('uint32'), relay.reshape(bop_236.astype('uint32'), relay.shape_of(bop_180))) # shape=(3, 9)
func_29_call = mod.get_global_var('func_29')
func_32_call = mutated_mod.get_global_var('func_32')
call_270 = relay.TupleGetItem(func_29_call(relay.reshape(var_256.astype('uint64'), []), relay.reshape(call_255.astype('uint64'), [9,]), ), 1)
call_271 = relay.TupleGetItem(func_32_call(relay.reshape(var_256.astype('uint64'), []), relay.reshape(call_255.astype('uint64'), [9,]), ), 1)
func_121_call = mod.get_global_var('func_121')
func_125_call = mutated_mod.get_global_var('func_125')
var_273 = relay.var("var_273", dtype = "uint8", shape = (7,))#candidate|273|(7,)|var|uint8
call_272 = relay.TupleGetItem(func_121_call(relay.reshape(var_256.astype('uint8'), []), relay.reshape(var_273.astype('uint8'), [7,]), ), 0)
call_274 = relay.TupleGetItem(func_125_call(relay.reshape(var_256.astype('uint8'), []), relay.reshape(var_273.astype('uint8'), [7,]), ), 0)
bop_275 = relay.mod(bop_250.astype('float64'), relay.reshape(call_146.astype('float64'), relay.shape_of(bop_250))) # shape=(3, 9)
bop_278 = relay.mod(bop_253.astype('float64'), relay.reshape(call_147.astype('float64'), relay.shape_of(bop_253))) # shape=(3, 9)
func_94_call = mod.get_global_var('func_94')
func_97_call = mutated_mod.get_global_var('func_97')
call_280 = func_94_call(relay.reshape(call_215.astype('uint32'), [8, 16, 13]), relay.reshape(var_216.astype('uint32'), [8, 16, 13]), )
call_281 = func_94_call(relay.reshape(call_215.astype('uint32'), [8, 16, 13]), relay.reshape(var_216.astype('uint32'), [8, 16, 13]), )
output = relay.Tuple([bop_184,bop_195,call_199,bop_206,bop_211,call_215,var_216,bop_223,uop_244,call_255,var_256,const_257,bop_261,bop_266,call_270,call_272,var_273,bop_275,call_280,])
output2 = relay.Tuple([bop_187,bop_198,call_200,bop_209,bop_214,call_217,var_216,bop_226,uop_246,call_258,var_256,const_257,bop_264,bop_269,call_271,call_274,var_273,bop_278,call_281,])
func_282 = relay.Function([var_176,var_194,var_216,var_232,var_249,var_256,var_273,], output)
mod['func_282'] = func_282
mod = relay.transform.InferType()(mod)
mutated_mod['func_282'] = func_282
mutated_mod = relay.transform.InferType()(mutated_mod)
func_282_call = mutated_mod.get_global_var('func_282')
var_284 = relay.var("var_284", dtype = "float32", shape = (3, 9))#candidate|284|(3, 9)|var|float32
var_285 = relay.var("var_285", dtype = "int16", shape = (3, 9))#candidate|285|(3, 9)|var|int16
var_286 = relay.var("var_286", dtype = "uint32", shape = (1664,))#candidate|286|(1664,)|var|uint32
var_287 = relay.var("var_287", dtype = "float32", shape = (3, 9))#candidate|287|(3, 9)|var|float32
var_288 = relay.var("var_288", dtype = "float32", shape = (3, 9))#candidate|288|(3, 9)|var|float32
var_289 = relay.var("var_289", dtype = "uint64", shape = ())#candidate|289|()|var|uint64
var_290 = relay.var("var_290", dtype = "uint8", shape = (7,))#candidate|290|(7,)|var|uint8
call_283 = func_282_call(var_284,var_285,var_286,var_287,var_288,var_289,var_290,)
output = call_283
func_291 = relay.Function([var_284,var_285,var_286,var_287,var_288,var_289,var_290,], output)
mutated_mod['func_291'] = func_291
mutated_mod = relay.transform.InferType()(mutated_mod)
var_295 = relay.var("var_295", dtype = "float32", shape = ())#candidate|295|()|var|float32
uop_296 = relay.acos(var_295.astype('float32')) # shape=()
func_94_call = mod.get_global_var('func_94')
func_97_call = mutated_mod.get_global_var('func_97')
const_299 = relay.const([-1,-2,-8,7,-6,-6,-6,-9,-6,9,-8,4,-6,5,-7,2,3,-3,2,-7,-6,5,5,-2,1,-7,-10,4,-4,-5,-7,8,-2,-3,10,3,10,-10,6,-9,3,-5,-7,-10,1,-3,-4,-8,-4,3,8,2,5,-4,3,-7,7,1,4,6,-9,-2,2,1,9,-9,-1,-5,-2,7,-2,4,-8,-5,6,-6,10,10,-9,5,-5,5,7,2,10,-7,-6,4,-5,4,8,-8,9,-10,9,6,-4,-1,4,-2,-3,-7,-7,-2,-9,6,8,8,10,-8,5,-4,-9,-2,6,-7,1,7,6,2,6,1,-10,3,-8,10,7,4,6,-8,10,-3,-1,10,-2,1,2,3,-2,5,-9,5,8,-1,5,-7,7,7,2,5,2,1,-9,-10,-1,3,10,6,-7,-2,-8,-9,-1,-5,4,7,8,-1,-2,-10,-8,1,-10,5,3,2,-6,-8,-5,-8,-3,-4,2,-9,-10,5,3,3,-4,5,-6,9,-5,-7,-10,-1,1,-5,3,-5,-7,1,8,-5,4,10,-6,2,-7,-6,-5,1,2,-8,4,-10,-6,10,4,-8,7,8,8,7,-8,-2,7,8,-1,-6,10,5,6,-1,1,9,-7,3,7,-1,-2,8,8,1,-2,6,5,-7,-5,1,6,-7,-7,8,-10,-6,4,2,-10,3,3,4,-9,9,9,-3,2,-10,8,-10,7,-1,-2,2,9,5,-5,10,-2,-9,2,8,1,10,3,10,-6,2,-5,9,2,-3,-3,-2,-5,5,-4,-9,10,4,9,-5,4,-10,-4,2,3,4,2,2,-8,3,2,4,-3,-5,-4,-5,2,1,6,-3,-1,-6,4,10,-7,-1,-7,10,7,10,8,2,-5,-5,6,-2,6,10,8,-1,5,3,-8,1,8,7,-1,7,3,6,1,-8,6,8,-10,-6,-8,-8,-1,2,-2,-9,-9,8,-10,1,2,10,-9,-1,-5,5,-7,-2,2,10,-2,-9,-5,4,3,9,-7,3,-7,-7,1,-8,3,-7,-5,-8,-7,-9,-6,-8,-8,-4,7,-3,2,-9,-9,3,10,-6,-8,1,3,-8,4,-8,4,-9,7,-7,1,-4,-4,2,-7,-8,-5,10,10,-7,-3,-7,4,8,-10,-2,3,-9,5,1,-2,-6,-10,6,-4,4,-9,6,9,-7,-1,7,-7,10,-10,3,-2,10,7,1,9,1,-8,-1,1,5,-1,5,-1,-1,6,4,4,9,9,5,7,8,-2,-4,9,8,-4,-7,8,7,-1,-1,6,-6,-3,-7,-8,-8,3,7,1,-3,6,1,7,7,10,3,-9,-3,4,3,-2,-2,4,9,3,-2,2,-3,9,9,8,-7,2,9,7,-8,4,-8,-9,4,10,3,9,-3,5,-10,-3,-2,-5,3,-7,-3,-10,9,-9,-3,1,1,1,-8,5,1,-3,4,-6,-1,9,5,-6,-9,9,6,-8,-10,2,-7,-6,-6,1,-8,-9,1,-5,-7,1,10,10,2,2,8,9,-10,4,-5,-7,6,-4,-4,-3,1,-9,-6,6,8,9,1,-1,-3,10,2,1,-5,-4,3,2,-3,-7,-9,-6,-1,2,3,7,-8,3,4,5,6,-8,7,3,10,-1,-2,-5,4,-7,1,-4,-10,-9,1,-4,5,6,-4,4,-8,5,3,-3,9,5,-5,-1,8,-1,-5,-5,-1,-2,9,-8,-10,7,5,2,1,6,-8,2,6,-4,10,-1,8,3,7,4,-6,-1,-2,-7,-10,-10,-9,-4,-6,7,-6,7,2,-3,3,8,-10,-4,-4,7,3,4,-10,10,9,-1,8,10,8,-10,-3,-4,-9,-7,-9,-9,-2,8,-3,9,6,6,-8,5,-2,-10,-5,-7,-3,9,9,-4,-3,2,-1,-8,10,2,-2,5,1,-6,10,-1,8,-2,-8,-7,-1,6,1,-10,10,1,8,-6,3,-3,5,-3,4,1,6,-2,6,-10,4,10,-1,-7,-6,5,-5,2,4,7,3,-1,-4,5,-3,-9,-2,-2,-9,-1,2,-4,-6,-10,-2,-10,3,-3,4,-8,-10,5,-7,6,-6,1,-2,-6,3,-1,-3,9,4,-4,9,-5,-1,4,7,-4,-6,-2,1,-9,4,-9,-2,-2,2,5,7,2,-2,8,6,-2,-6,-1,2,1,-9,-4,3,-7,1,-8,-4,8,9,-5,9,-7,4,4,-7,4,9,9,6,-7,-10,7,5,9,-1,-9,4,7,-4,-5,-6,-1,9,-7,7,-1,-8,10,2,-7,6,5,-2,7,3,-8,-1,4,-8,2,-4,4,-1,-5,-8,10,-10,1,7,-7,9,1,-6,-7,-5,-2,4,-1,4,8,8,-5,2,8,5,-2,-3,-2,10,-3,-10,4,-5,-1,-8,-3,8,3,-4,-1,-10,-3,8,4,-5,-2,4,-1,10,-9,10,7,10,9,-4,-4,5,-7,-1,2,-8,2,-2,-2,-4,3,3,-3,-1,-8,3,7,-7,3,-5,-5,9,6,2,-4,-9,2,8,-6,10,-3,-5,-2,-7,4,2,-7,-9,-4,1,7,6,5,-7,-2,6,-9,-6,-5,6,4,-1,8,-4,-10,10,-8,-9,2,-1,-2,-10,9,-3,-8,6,-6,-3,-8,9,-3,-7,7,3,3,-2,2,-7,-7,-5,-9,6,-7,-2,-7,5,9,-10,-10,-6,6,10,-1,9,7,-10,3,2,5,7,4,-2,5,-1,-7,-8,6,-3,4,4,3,8,2,-6,-5,-8,6,-3,-4,-4,5,5,1,-8,-7,-6,8,4,5,6,-6,8,4,1,-10,-8,8,-6,-1,-3,9,-7,-5,-5,-3,-8,-5,1,10,9,6,2,-1,4,-5,10,-6,10,-8,-2,8,-1,6,2,3,-5,9,6,8,-3,7,-6,10,4,1,-10,6,1,3,-10,-5,9,4,5,5,6,1,5,-8,-9,7,-9,1,6,5,2,1,-5,7,7,-10,-4,-5,-2,7,5,1,8,-3,-7,8,-10,3,4,-5,-3,-3,6,3,-4,-1,6,-10,5,-9,-4,4,-6,9,-8,-10,-1,-6,-5,-7,1,6,4,-4,-1,-3,-7,-1,5,-2,8,4,7,8,-10,10,5,-3,-2,-7,-7,10,-9,-9,-4,-9,-5,2,4,-5,-5,10,-9,-8,-7,3,-9,-9,5,5,9,2,7,-5,3,9,-4,-9,-9,3,-4,-1,-1,-1,8,-8,10,-10,-5,9,-6,-8,-7,-3,-4,4,5,10,8,4,9,-3,-3,5,-10,6,5,4,10,8,-6,-1,10,8,-3,3,6,1,9,-7,-4,-4,-6,-9,-8,10,9,-4,3,8,4,-9,7,10,-8,6,-10,1,1,-4,-6,4,8,-8,-1,8,-8,-8,9,-5,-6,8,-3,4,10,-4,6,4,9,-4,8,8,9,3,5,-6,10,7,-5,-7,2,-1,-3,-2,-9,-3,-8,-5,6,-6,7,-1,8,-8,10,-7,-1,3,-3,4,-9,1,7,-6,-5,1,-6,6,-10,-6,2,-7,10,-6,-2,7,9,-3,-5,9,-3,9,-3,-5,1,-7,3,-7,1,9,8,-9,7,3,-10,1,3,5,7,10,1,5,3,-10,7,-10,-7,-2,-10,6,5,5,7,5,2,-4,-5,1,-10,2,2,2,2,6,9,4,-9,-2,-1,-2,4,-9,2,-7,-1,-2,3,-2,8,-9,-10,-10,1,7,1,-6,5,4,-3,2,1,7,-7,-9,9,-3,10,-9,-7,3,-6,-3,-4,8,9,3,5,-4,-1,9,-2,8,-8,-2,-1,-5,8,8,6,-1,-8,-4,6,-5,-10,6,9,-3,9,3,2,9,-7,-2,-4,7,9,5,7,4,-6,-9,-2,-5,-10,1,8,2,6,8,8,2,-9,5,-6,-5,-7,9,-9,-10,-3,-10,2,6,-5,10,2,-3,6,8,8,6,8,-7,-2,-5,-2,5,7,2,6,9,3,-8,1,2,-9,-9,6,5,4,2,-7,10,6,7,-3,9,-8,4,3,3,6,9,7,-1,-4,-7,-10,4,-8,-8,-7,6,6,-9,9,10,-3,9,-3,-10,-3,-7,-3,-9,-1,-1,-5,-8,-10,9,8,-5,8,-10,6,5,9,10,-2,5,5,-6,5,-1,-10,4,-2,6,5,-9,7,8,-8,8,-7,-7,-8,-5,4,8,8,1,-3,10,-4,6,-2,7,-5,2,-7,6,-10,10,9,-2,-2,-9,-10,10,7,-7,-2,-1,-9,-9,-1,-4,6,-9,-2,5,1,-8,2,-9,5,8,-10,2,-1,8,6,3,5,-8,-10,-10,7,-4,-5,-6,8,-8,2,-8,1,-4,-7,8,8,7,-8,-1,-5,2,9,-2,1,-5,-10,-7,-8,-7,-8,7,10,8,-2,-1,-5], dtype = "uint32")#candidate|299|(1664,)|const|uint32
call_298 = func_94_call(relay.reshape(const_299.astype('uint32'), [8, 16, 13]), relay.reshape(const_299.astype('uint32'), [8, 16, 13]), )
call_300 = func_94_call(relay.reshape(const_299.astype('uint32'), [8, 16, 13]), relay.reshape(const_299.astype('uint32'), [8, 16, 13]), )
uop_303 = relay.atanh(const_299.astype('float32')) # shape=(1664,)
bop_305 = relay.add(const_299.astype('int64'), var_295.astype('int64')) # shape=(1664,)
bop_308 = relay.add(uop_303.astype('float32'), uop_296.astype('float32')) # shape=(1664,)
bop_315 = relay.divide(var_295.astype('float64'), bop_308.astype('float64')) # shape=(1664,)
uop_318 = relay.sinh(bop_308.astype('float64')) # shape=(1664,)
const_320 = relay.const([7.618134,-4.126180,-7.699507,-2.075651,-2.381154,-5.655858,-3.737853,3.711557,-1.773463,-3.709190,-6.852293,-4.890643,4.509016,-0.795660,2.326787,-6.722532,-5.533650,5.100347,5.611461,4.450894,-0.053375,-2.720335,4.969475,1.252149,-3.393244,4.342661,-4.606445,6.604210,-7.754920,-0.215533,2.719496,-1.111407,2.091960,1.781890,-4.102191,6.868016,-4.127480,9.417030,9.375004,6.159474,-7.133137,6.620991,-1.138410,-3.822436,-2.438891,-2.160859,-2.588664,7.765992,-1.070204,-6.183555,3.695893,-8.776093,3.166920,-1.187155,-0.446687,0.404208,-3.546590,4.266516,9.895257,0.996406,-1.853932,9.491744,-4.786267,8.476173,0.812232,6.842049,0.392476,-0.803071,2.742621,7.744251,-6.763619,4.761341,1.567650,-0.719245,-8.480434,-8.041471,3.698958,6.651932,-5.175829,0.432430,-3.598777,0.819437,-0.794762,1.726414,-9.445876,4.767256,6.374921,1.813536,4.581828,9.106003,5.188681,2.735632,3.571628,-5.538881,2.381295,-2.218723,7.826653,3.518340,5.042737,0.387155,9.472210,4.903577,7.816878,-5.086396,-3.310249,1.091270,9.984478,-7.462766,3.708033,3.501012,-1.010754,6.802935,7.028611,7.920446,3.466195,-6.134700,0.800965,5.120537,-9.160793,-9.128863,1.423502,-7.210401,-0.992787,8.078908,7.913081,-5.803215,-0.977888,5.335163,-8.410302,6.718376,-0.752155,-0.322284,8.938754,-4.344490,8.923060,-5.745507,-3.213363,-0.452310,8.738646,5.606235,-6.170000,2.852880,8.409705,-9.572076,8.785794,2.910638,4.128334,-5.286906,8.553933,-6.898379,7.348367,0.367457,0.169902,-1.288065,6.919692,4.589978,7.005823,5.771514,-5.590999,-2.538452,6.599269,3.260914,3.021767,3.822816,-8.599694,-8.845999,-1.044303,-9.459495,5.231091,-4.316946,-7.322052,-5.210704,-1.462781,-1.386460,3.431996,0.805599,-0.362659,2.645379,-1.124223,-8.111339,-0.918696,-9.620414,-7.517286,-0.233162,1.288363,-7.088741,-7.834462,7.005570,-2.905320,7.696831,-2.919885,-0.831378,8.993313,-7.116733,-5.481305,9.409008,1.832955,2.383846,-0.443678,6.644420,9.681101,0.316901,-2.133795,-6.306612,-2.736823,-1.966946,-1.643076,5.299678,-0.690750,1.064115,-4.457853,3.398272,-4.637885,1.190253,-2.080711,-9.624703,-6.099014,-7.622564,-8.134513,-0.400916,-4.043606,8.403247,6.508293,9.221400,0.946343,3.072831,2.245957,3.003683,5.860123,-4.350368,-1.092971,0.560072,-2.395103,1.400991,3.994693,9.887264,3.484135,-0.646216,9.990309,-1.973814,4.344198,-5.947458,1.300957,-2.335831,-8.315747,-9.423987,-9.079544,9.274516,1.538030,0.169963,-1.877374,0.179487,-7.686301,6.357844,8.247458,-6.005746,0.434569,7.074252,-6.872361,6.359173,-9.985530,9.413951,-4.997487,4.800502,-4.632735,-8.012400,1.945395,-2.415808,2.464646,8.277963,3.027719,4.001391,-0.071775,3.694356,2.469322,3.090224,1.277315,-7.880553,5.479802,9.226170,-9.347082,8.414970,5.111425,8.109575,8.697456,4.761616,-5.846015,5.506672,2.258644,-7.836741,0.628752,-4.601623,-2.702580,-9.905239,-1.474261,0.382493,9.652738,-9.248190,-5.877059,-6.818594,-0.875113,3.579793,-8.214266,0.187394,2.822579,-8.549338,7.860526,6.788144,6.577071,-8.117643,-3.524332,3.486614,-1.988440,-9.483726,3.470856,-1.865064,3.855079,0.537339,-6.426716,6.261442,-0.180780,-5.912863,8.379140,7.618531,-0.162058,-5.722093,-2.051709,-3.087197,-5.054536,3.966559,4.396620,5.362300,2.624778,2.201304,-7.693823,-9.253499,-1.101300,-3.690740,-4.226852,6.820086,2.887566,7.323906,3.329350,-9.290703,0.088221,0.948156,6.252621,2.056153,2.415917,-5.457190,2.022702,-0.344944,-9.131777,2.603503,6.203621,3.430961,4.121652,-4.006995,-0.875213,-3.188771,-5.374177,3.031970,-0.961632,2.381152,0.061817,7.977610,-7.371993,-8.808729,7.296407,1.944425,-5.525550,2.533899,-5.578112,-7.722691,2.047345,-8.813053,2.462707,1.547927,-2.378463,3.102885,9.982632,-3.026300,3.927428,-1.989633,9.835395,0.227950,-7.245609,2.247141,-3.791332,9.756850,-4.266969,4.199606,9.580958,6.945327,8.429150,9.628884,-0.774958,-3.322973,3.539136,-2.847377,4.392789,-9.271452,-6.762213,-8.527140,-7.417743,-3.173892,5.914384,-6.919040,0.337209,-5.427568,-9.100017,7.850973,5.443899,-5.570865,-8.877831,1.175648,-1.955443,2.926423,8.624913,5.830751,1.663515,-4.687979,-4.003686,-7.540276,1.532810,-9.111614,-3.522987,-6.517354,-6.474485,-6.129824,0.885440,-7.285289,-3.731465,-3.458839,0.966029,1.176580,-2.516799,2.536499,-2.652311,-9.094119,-2.175608,2.703851,-7.033712,-4.223506,5.029045,1.994264,3.984656,-6.952529,7.967156,9.362062,1.194733,3.483676,0.545272,-6.311613,-8.821125,5.875803,7.989746,-6.015684,-6.437076,-6.569923,2.085752,-8.030863,1.618529,-8.523267,7.899512,5.822267,-9.977171,-5.848363,0.142085,6.812219,6.458197,-3.722113,-8.788862,-2.740658,-9.842993,-5.777563,-2.109366,-8.808403,8.250197,-4.717793,-2.803145,4.104544,7.527231,-3.533082,-0.773021,-1.873387,-9.789173,6.429757,9.721579,4.366608,-0.686659,-0.790978,-8.041511,1.481034,3.921589,5.868304,8.121339,6.655764,-6.403315,-7.879809,5.027791,1.951618,2.273048,-5.921862,-3.943425,-2.183083,4.371473,-0.298471,1.347560,-4.352140,0.779476,0.270161,-0.147071,9.331977,-9.234883,-2.915917,3.555948,-2.676455,-1.259253,7.577045,-7.421520,3.352538,-9.266641,-5.241374,6.309505,3.730123,-3.094299,-1.884951,3.351849,3.583653,2.227307,1.824541,1.158589,5.072554,7.096372,2.393683,3.957258,9.010189,-1.905192,2.247732,-6.165430,-5.956366,5.387019,-2.734770,9.131171,1.407486,1.220927,1.049337,-0.676970,-3.679965,5.970395,7.609332,-4.897792,2.340128,-1.308327,8.189702,2.144113,9.663121,-5.682411,3.960100,-0.107144,-9.645518,4.376062,-1.058691,-4.699847,0.076079,-8.423676,-9.203120,-3.055391,7.479137,7.800550,6.352632,1.022476,5.745305,-1.173742,1.764939,8.480733,-5.858321,1.312118,-2.199251,9.702633,4.237405,8.290859,0.118774,6.801124,-1.512396,2.209888,9.116724,6.370769,-8.245466,4.397722,-4.458331,3.553176,-1.121810,5.729484,-7.522415,-9.749088,5.231844,-6.483266,3.341803,4.344664,-6.464007,-7.337990,5.471504,-8.661056,2.925390,2.273940,5.713398,8.699983,9.107269,-2.192134,4.548874,-6.757237,-8.255258,0.854551,-6.748035,-5.412640,3.891570,3.177689,-2.096901,-6.114783,4.275446,3.718576,-4.397482,-5.150201,8.095357,-9.424814,-5.260789,4.281890,7.694229,-9.146307,-7.581889,-0.289188,4.264635,-4.399390,3.181725,-8.170980,3.429011,7.557243,-9.962415,7.339529,0.133217,-3.815150,-5.171335,-9.103835,3.647117,-5.020768,9.868787,7.628637,-0.408039,-7.893494,1.696506,-0.676123,-0.788400,-7.687241,-0.981834,4.484804,3.077946,7.619045,9.361693,5.196607,-5.022935,-5.975666,-0.571496,1.677294,-5.818385,5.988140,-3.693357,-8.115170,2.432959,9.906905,-5.385211,1.439298,-6.626718,-5.528118,4.562081,-2.351872,5.878564,4.369345,6.248420,-5.195434,7.063640,1.100835,3.669534,-5.068333,-9.164604,-4.805274,-9.884023,9.550482,-9.351913,7.548228,3.703218,-8.312408,-2.554993,3.534559,-1.454403,9.281613,5.683796,8.765016,-4.395151,5.392456,8.163871,-7.648493,-6.856478,-0.378748,1.374925,-7.350123,-3.825003,8.574654,-0.398723,-5.485127,-3.427131,-3.367331,-8.513559,-7.924810,-0.849116,4.627529,-5.532958,7.031060,1.703360,7.244902,5.379077,-8.136885,-9.807142,0.544961,-7.133568,1.475740,5.516487,-6.604401,5.041929,6.540240,-7.034395,1.839691,-3.984288,4.058252,0.149807,-4.102316,-2.397033,-1.576901,-6.330888,-9.684634,0.712195,1.162345,9.364030,-5.067493,-8.935757,-1.543145,-1.898461,8.141098,8.618283,3.303859,-9.447672,0.481165,-6.907989,0.799203,2.408640,0.463347,-5.468037,-6.654902,-7.343922,-5.934012,-1.484326,3.305076,5.854861,4.253848,-4.069328,3.335026,-6.747414,7.219623,-5.259157,1.165872,-5.412151,-1.181079,9.230969,7.357907,4.667297,-8.699041,-6.272539,-4.022581,7.462878,-4.761319,-2.983470,-4.529914,2.029549,9.579749,-6.810858,5.288216,3.227415,6.319746,-5.142796,-0.180916,7.666445,4.599905,0.809408,6.705110,0.700262,-7.044801,1.244035,-3.360486,-5.359707,-0.601880,-4.506589,-2.696218,6.013241,-5.754810,-6.431887,9.079870,-5.121506,9.633139,-1.235276,-8.708956,4.816261,-1.844462,2.797638,8.823045,-2.261547,-2.388484,8.562830,8.095691,0.460278,9.686451,-1.990403,8.487442,4.100146,-5.820103,3.717008,-0.999594,0.302390,3.207887,0.379529,1.034499,-7.420552,2.778176,-4.317757,-3.927498,-7.767766,9.690031,-2.869754,8.330816,8.031828,7.190934,-5.313310,9.573910,-8.869127,-9.051506,0.743586,-6.024230,-5.215782,-5.390271,-8.438937,-3.520729,-1.066056,0.795464,-3.669205,-7.958469,1.949927,-3.470944,9.602925,6.902026,-3.730697,-1.267703,8.484702,2.710923,-3.515870,-2.524099,-4.927832,7.037713,-9.639908,3.824725,-3.545425,6.374682,6.015695,1.049588,4.243071,7.007438,7.970716,-2.452160,-3.639420,-9.610103,3.866627,4.824310,1.704690,-5.241842,1.208814,-9.050127,7.876660,4.679532,7.980420,-1.123503,-3.197841,-8.049062,3.835651,-6.942018,-5.619937,-0.243790,-9.821300,5.987508,-3.226907,4.457235,8.945627,3.000333,2.105090,0.365040,-1.008192,-7.744281,4.525066,-7.660061,3.034915,-0.812520,8.583135,9.533090,-5.333352,2.127248,-8.025321,3.813780,-7.797114,-3.902517,8.053323,-5.109184,6.296669,-9.158935,2.419457,6.839968,-2.350413,-0.314902,-9.059234,9.037823,-9.845360,-9.765237,5.331488,-3.334754,-0.562130,-9.072859,-5.728740,3.607036,4.663744,0.730502,-1.100520,2.714311,-7.083164,-9.532035,1.200422,-5.917538,-8.597708,-6.831734,-4.030718,3.546523,7.562005,-6.637595,-1.527505,-2.234517,-8.963960,-8.608202,-4.470911,8.926973,4.683088,-8.699227,5.733102,-4.088277,5.134137,8.339625,0.755453,-4.999666,-5.832003,5.997699,2.714340,-2.592722,5.115042,-9.333561,-9.875443,-8.047965,-4.544556,-2.485791,5.741111,6.125866,9.928565,-0.377173,-7.664358,-1.935157,-4.396048,5.773756,3.195604,9.426961,5.604989,-3.572090,4.637706,5.839576,0.196423,0.924901,7.421815,0.042911,9.306176,9.563094,8.250148,4.691205,2.506677,0.375873,-3.153062,3.838150,-5.354361,-6.828433,1.286451,6.341812,9.243190,5.357512,-4.806424,-8.958091,8.385513,5.005072,4.145415,-9.034730,5.263743,4.778649,-7.778555,8.896260,-8.009137,-4.942068,-3.310491,4.281307,-9.669035,-3.290612,9.720296,-9.820111,-1.935066,6.776638,-6.690893,0.761519,4.951700,-9.539280,0.437013,8.809521,7.627032,0.354083,5.516073,9.512863,-6.502209,-2.318815,-1.064714,-7.050737,-2.932623,-4.061339,8.897413,4.993852,-4.319978,-4.167001,9.889127,-3.000543,6.074752,-7.284290,-2.079702,-7.226384,6.643011,-7.656308,4.053375,4.507847,7.030788,5.807590,4.436893,7.895492,-5.567076,0.271767,0.622770,-7.989967,-3.465803,-4.222797,-0.933828,7.224110,6.568186,-3.335048,-9.469491,6.973613,8.070199,-0.666609,3.678828,8.710985,3.070073,5.350831,-9.823184,5.553613,1.600209,4.979061,-1.641672,4.908010,-2.567189,-8.314613,9.392648,-5.302494,-2.286048,3.184124,6.466858,9.151078,-5.088327,8.434022,-1.886061,4.967352,-5.675677,-6.176972,0.763264,4.985485,7.808141,-1.066219,0.502254,9.474214,2.819432,4.116052,1.647845,3.403490,8.947154,-4.093672,0.631564,5.337515,-7.192526,-6.628736,-6.943900,-7.540081,7.196354,-4.465467,9.459395,7.842519,6.843934,3.711126,6.231843,-7.643243,-5.202964,3.041714,-3.497533,5.265786,-1.643021,-6.005599,9.887379,-2.521017,4.762207,2.022264,-8.915021,1.975157,5.726645,1.127883,3.753188,-4.125995,-2.154361,0.939357,-6.222226,-4.499482,-0.711391,3.226984,9.127598,-9.634672,2.352732,6.640586,-4.945124,5.916907,-6.298928,5.371788,-3.341686,0.004723,8.046770,2.339593,2.965560,-3.529801,-9.740961,-9.835085,1.837070,-3.168516,-4.728514,-9.743182,-3.428914,2.849228,-1.254149,-6.730299,-4.728602,-1.066120,-1.429121,7.599807,7.922995,0.414555,-1.035723,8.000068,-0.068856,-3.553592,9.279239,-2.430799,-6.794396,-5.753824,-7.093264,6.535325,-8.710950,-6.547250,4.106757,4.153390,9.624773,-9.002715,-5.152128,7.774264,2.011800,3.049741,-1.757743,-6.812775,8.862709,-7.485662,1.179813,-5.379533,7.491343,-7.343731,6.902139,0.819705,-3.323063,-5.245976,4.890883,7.714564,1.385774,1.023883,-5.272257,-5.268284,0.298998,6.750167,-2.858505,-1.558003,-8.170321,-5.960306,-6.825415,-7.459586,3.590215,9.209939,-1.205529,3.196848,-3.444725,-8.632838,-7.116939,-8.256201,5.324264,-7.522414,-2.796028,2.524793,0.064024,-7.726921,1.044077,-8.968597,6.528049,5.122288,-4.059916,3.658547,8.455502,-2.596392,-4.285780,0.184920,-1.293049,4.704139,5.722871,-6.371609,-3.127140,-6.673786,1.313177,-1.850861,2.966547,1.039708,-5.199942,-7.402892,-0.805993,2.993481,3.261235,-0.600029,-8.616369,-6.933388,-9.375420,-5.431148,6.185315,-7.702614,9.085839,5.179658,-2.819241,-4.542338,4.538067,-9.212836,6.639040,-0.816064,1.975355,3.764373,-1.134412,8.779605,-1.717000,1.394329,-2.722452,-3.964623,-8.982282,-7.736019,-9.792081,5.562008,6.360597,3.900002,2.312776,-2.638419,-8.264273,-6.062042,6.293192,6.147723,5.398282,-0.151655,-2.330085,0.954830,-2.556224,2.299314,2.085071,1.408425,0.430223,1.114740,-4.893327,8.562421,2.631791,-5.044463,3.461278,-1.361428,-1.704325,-6.332751,-1.570454,-2.292044,-1.680009,0.256457,-3.961796,-1.933985,-8.727192,4.287927,9.765344,8.495120,-0.648736,-6.305728,-0.264931,5.982253,7.135540,1.037098,6.124719,-5.049289,-7.611072,7.329003,-2.874664,-0.251984,-5.450685,-3.594664,-7.811345,-6.799748,3.407567,-9.705410,-1.321717,-2.172927,6.192089,0.482837,1.845090,-8.243425,7.549099,1.052511,-7.873459,-8.812836,6.416500,-8.129434,1.107241,-6.840651,2.867717,-2.957113,-0.857597,5.058359,-3.953229,8.245779,5.374322,6.187582,1.528172,-9.365526,-9.979072,-5.571047,2.111307,8.502541,-9.735532,7.919824,-3.580347,3.916396,0.345757,7.859404,7.363956,4.755077,-9.525334,3.818902,0.395420,1.612689,1.469414,4.974830,3.526154,9.802181,7.392457,7.616240,-5.407986,-5.662146,-3.139176,7.988234,-4.863770,-1.176930,-4.401247,9.887140,0.588088,6.173983,-5.402227,-7.435392,-9.538328,4.452488,-9.976167,4.091833,6.831930,-9.701904,9.620604,2.411940,1.140977,0.275494,-9.164732,3.536658,7.923489,-0.690108,-6.029145,6.971521,-3.559618,-8.446502,-6.155123,3.055838,7.266088,0.362616,8.523465,2.096501,-2.451279,-1.268710,0.186910,-7.134198,7.745843,-5.196545,9.344671,-9.279917,1.514827,2.819602,-8.679653,3.047297,-1.119205,9.653923,-7.875939,-4.878539,5.329029,4.173488,4.604663,7.267374,-6.644779,-5.558708,-9.359575,5.062231,7.544671,0.971976,0.612535,8.112069,8.010811,9.889892,7.304201,-0.585475,4.759175,9.460946,3.917439,1.692517,1.435818,-7.814166,-9.689334,5.389978,-5.771003,0.581856,2.645741,2.613509,2.246355,-9.511484,6.816722,2.542529,-4.172510,9.308018,-1.889634,7.095173,-4.562216,1.222278,0.553128,-7.006968,3.719408,0.059511,-9.150229,6.283528,-1.678966,7.449541,-1.326545,-9.710666,0.452933,-3.440384,-6.959914,1.834981,3.976400,1.672763,5.183033,-7.176110,5.578765,-9.556061,1.554491,-0.500260,2.778412,8.129049,-2.421342,3.629809,2.766872,2.821096,1.810875,-0.153694,5.429486,-1.411402,3.448841,7.237133,-9.489126,-4.431705,0.680150,2.215200,-4.836296,-3.226731,-5.159834,8.271964,-0.009125,7.236201,7.956789,-3.873076,1.444302,-7.621169,-9.174248,-1.485256,3.629628,-6.307658,8.590762,7.896717,-0.364298,-2.249901,8.714829,-2.516677,0.889503,-6.948595,1.205496,7.647420,3.279119,4.016853,-0.093610,-9.441247,-6.134025,-4.443269,4.272725,-1.526288,-8.028048,-5.290692,-5.778403,5.831212,5.981798,-7.213219,-4.386977,0.284151,7.417721,2.199528,-2.555353,8.222139,-4.091798,-6.749206,-2.912239,0.646098,-5.688980,-0.141562,-0.063309,-0.161775,6.958032,-8.606935,-4.644606,6.608237,-2.214276,7.007019,4.725582,-3.617572,7.222553,5.937366,2.660173,-9.852662,-7.704338,-3.479712,-9.439094,-3.958483,6.689344,7.385492,2.677841,-0.697191,-7.869552,-0.503892,-2.909142,5.334763,-7.397835,5.791709,-3.296266,5.200282,5.016172,4.127934,-8.055950,8.686710,3.483057,6.199740,-1.341379,-7.504496,-1.988085,-2.794153,1.648526,-2.461493,-3.467752,9.130660,8.815311,1.281926,-2.997989,-3.132695,1.381294,7.615578,-2.347099,4.150094,-0.028940,8.050927,-6.714306,0.320197,-8.755080,6.532140,-7.482244,4.799305,8.287900,-7.516774,7.579876,-9.593116,-2.076370,7.037481,6.287456,1.185639,7.757276,-9.767945,-9.429035,4.325849,5.371887,4.223775,-2.666083,4.320070,-4.227183,3.023575,-9.780176,-1.733701,3.869325,8.405939,-4.131972,-4.371439,-3.460466,2.865384,2.036878,7.147660,-0.225713,-5.206464,2.206408,-0.927228,3.431135,4.877813,-2.185013,-6.710977,-1.528947,-0.654534,9.698236], dtype = "float64")#candidate|320|(1664,)|const|float64
bop_321 = relay.less(uop_318.astype('bool'), relay.reshape(const_320.astype('bool'), relay.shape_of(uop_318))) # shape=(1664,)
var_325 = relay.var("var_325", dtype = "float32", shape = (16,))#candidate|325|(16,)|var|float32
bop_326 = relay.mod(uop_296.astype('float32'), var_325.astype('float32')) # shape=(16,)
func_51_call = mod.get_global_var('func_51')
func_52_call = mutated_mod.get_global_var('func_52')
call_329 = relay.TupleGetItem(func_51_call(), 0)
call_330 = relay.TupleGetItem(func_52_call(), 0)
bop_331 = relay.equal(bop_308.astype('bool'), uop_296.astype('bool')) # shape=(1664,)
uop_334 = relay.log(uop_318.astype('float32')) # shape=(1664,)
const_336 = relay.const([3.367696,-7.735249,-2.695934,1.913443,7.753529,3.502015,-8.811291,1.425166,-3.606114,7.309054,-8.435146,2.759695,-7.603662,0.683564,-3.446906,-7.426368,-1.273047,-9.541975,9.114768,-5.785273,-5.429275,-3.357704,8.023086,-5.821839,-4.235130,4.215635,5.305137,3.702597,3.083744,-6.430962,1.729618,2.038901,4.600674,-2.768673,1.484478,3.238124,-1.332303,-1.124812,3.104268,-9.445873,-4.928655,-1.147609,-1.652378,0.625810,1.408980,-3.260064,6.365845,-7.406547,2.775386,0.486915,9.823249,7.413324,-5.825532,1.516867,-0.872966,0.933818,2.878827,-5.021645,4.733048,2.071925,-0.591254,9.391477,1.876782,-1.473637,7.304132,2.781521,3.432652,-0.638630,-3.104520,4.310277,3.407127,6.226529,6.874534,6.545050,-4.876808,1.519496,-7.747930,-9.689596,-2.415977,-7.196227,-1.956120,-0.386558,-5.937211,8.623973,-5.290603,2.468934,8.059077,-5.570877,4.457433,2.885567,-8.235622,-5.490993,7.808009,-9.432978,7.728046,4.698039,-9.368626,2.042092,2.284044,4.579605,-6.504682,8.307184,9.705219,-2.215609,6.797009,-9.516687,-3.039690,-0.044427,4.537923,1.723177,-3.147207,-1.316830,-3.998517,4.432685,-3.325929,4.080681,-2.922981,-6.442313,-4.391499,-3.361949,-6.586623,0.383348,9.363429,7.554696,-5.919612,5.291774,7.143363,2.834032,-1.862927,6.572199,7.708372,1.761842,-2.655495,8.218959,-7.793632,-7.853928,1.735899,9.308668,-7.800181,8.790392,0.124589,9.747264,3.572564,-9.812823,8.944978,-5.428863,-8.838857,-9.681308,-9.313905,5.923829,7.784077,9.385354,0.759114,7.088788,3.721282,-8.423705,-5.584883,-3.146959,-2.882288,1.240894,-1.606319,-0.290278,6.905099,1.249119,-0.090879,-7.943168,9.128746,-5.753098,-1.089683,-0.205448,6.502681,-3.569897,-2.819381,4.323345,4.118923,-0.903338,-8.045015,-9.431668,-5.330092,9.314698,-6.441526,-4.572579,-4.116359,-5.688342,1.969106,-7.957287,7.681028,-2.102821,3.728300,-0.662599,-4.203779,2.843296,7.133361,-6.846542,5.215769,-1.375332,1.772587,5.143288,-6.364692,-0.865094,-1.768787,-5.851368,9.722187,4.884272,-5.852571,6.360580,0.816758,7.880528,-5.405656,-6.178776,-1.043904,7.886167,8.024280,4.409900,-7.922735,7.432850,-2.910527,-0.862960,-4.666301,2.364769,7.069283,0.153982,3.583670,8.824085,-3.587420,8.844451,-0.728393,-6.228705,-3.615309,4.680544,2.699799,3.362542,-5.406226,0.120668,-0.039274,5.433145,1.280250,-6.204508,-1.502136,-3.839725,8.797160,6.534074,-4.173594,3.230409,2.780795,6.207137,-0.295213,-0.394244,-1.060591,0.154797,-7.273615,-2.017137,-1.601577,-7.743085,-3.607643,0.917288,5.194902,-6.254215,6.413424,-9.179903,-0.058019,5.436648,-1.473408,-7.354443,-0.116702,0.829355,-2.796344,-8.680831,-2.216283,2.967562,-1.786303,-7.440106,2.907558,1.095733,6.491873,1.840940,-3.754160,-7.262740,2.196941,6.507936,-0.878625,-4.683578,3.791566,3.961519,-2.595389,-1.102548,-0.704232,-4.951222,2.934570,-7.651333,2.067444,9.248868,-0.477545,-4.660131,-4.866244,6.162057,8.550964,4.414848,1.866039,-3.231855,-1.118696,-6.387806,-0.717194,-1.379672,-0.831327,-0.050843,9.834275,8.129689,9.883329,3.590716,-8.020614,-9.059930,-2.354112,-6.878343,8.254812,3.318740,1.277127,-9.648337,-1.614346,-7.471338,7.328525,-2.013298,-4.856014,-3.328907,-7.593314,8.271085,1.974459,-5.383532,7.591638,2.852897,5.836186,-3.285259,-0.720756,-9.854829,-8.037742,7.107673,0.552409,-3.573850,-2.994494,5.618924,-6.442089,8.911221,0.091178,0.503977,-9.926564,4.658618,-3.422413,-9.860262,-2.409647,8.854599,1.968213,-4.166479,7.768436,-8.499255,0.315372,-0.859895,-8.515668,0.559547,7.330093,3.472130,5.437678,6.306004,-4.197963,-4.481468,8.063435,3.876901,8.575115,2.392082,-7.662560,-4.258063,-7.875755,3.644651,-0.310892,-2.682633,-2.646988,4.024847,-9.493115,0.934826,-1.751515,3.958655,6.613398,6.255324,-7.602841,6.906495,-7.101336,-2.537866,-8.621543,-7.664093,5.307290,-0.926291,-8.516840,0.783056,8.440689,6.877836,9.010197,7.392196,-2.044386,0.656582,8.169487,6.661301,-6.341841,-3.019965,-9.341292,2.917705,8.299309,8.502220,2.313353,-8.055901,5.320039,-2.873794,-7.069690,9.260579,-1.399140,9.258362,-7.464458,-2.765375,7.461744,0.213014,5.823624,7.197901,0.991935,-0.970667,5.710373,4.777360,-5.741569,7.688472,5.599838,8.387061,3.327929,1.562949,-1.009850,-9.348976,9.315811,5.522414,-3.724381,6.605509,6.739017,-7.394949,0.020795,6.453690,-9.946032,-9.031323,8.035716,8.424427,3.826156,-5.476016,-4.410030,3.461519,3.858816,-6.278002,4.818512,5.339367,9.835812,2.483673,8.830373,6.501645,-2.961557,0.710708,9.540850,-5.789687,2.905102,-1.664777,-0.318725,5.790489,-4.126981,3.787887,-5.458303,-7.446639,7.374901,-0.883047,-9.030677,-6.920261,7.407997,3.218592,-1.651772,0.187375,-6.760479,-1.958999,1.774937,-0.362421,9.104994,0.901368,-8.269736,-8.208578,-9.013380,-1.411997,-1.013709,8.939078,-5.163016,-7.691996,-2.388253,6.562902,-1.718754,4.471212,1.476672,3.826697,-4.695705,-4.609398,6.073074,-5.735999,1.651159,-0.795565,8.169383,-7.808355,-8.462402,-9.905791,-5.005237,-5.342675,2.174730,6.850128,7.390339,-4.519225,5.941358,8.868637,1.377671,-9.846215,-2.876348,-4.996105,-2.639304,-3.173700,7.918841,-3.643438,-2.306912,-1.575804,-0.577536,-2.444806,2.768766,0.051030,-0.108414,4.409038,-2.087745,-2.201154,-9.372139,-5.018763,8.202296,-1.886593,-3.445536,3.897407,5.600106,-7.137279,5.684739,8.001597,5.335791,6.687373,1.648742,5.967715,6.275718,1.579684,-6.785845,-1.170697,-0.626680,3.088670,9.571147,7.228023,-9.238447,9.267558,-5.867881,-0.154154,7.439239,9.261751,-1.633900,6.740810,3.854341,-4.828970,-9.082154,1.292060,6.894832,6.815704,1.902426,3.789292,6.854096,3.116368,2.376178,2.962764,-3.430168,-2.546625,-6.700097,-6.710494,-3.139935,3.818802,2.910081,0.979486,7.974712,-8.407018,3.297936,1.957705,-3.749092,-1.208018,-6.110703,-7.828129,8.973998,-3.996623,-8.860535,7.043390,7.570588,-3.241567,1.746496,9.706390,-1.745789,-2.645826,3.191852,-3.374710,-4.753536,6.513473,4.329966,1.790874,-9.602313,-7.970370,-9.016165,7.466679,-5.682900,1.357299,5.871986,5.452934,-1.845011,7.161133,8.503085,7.415678,3.999834,-7.075059,-0.005472,3.264317,2.785234,-2.925927,9.724656,3.389667,0.045691,1.449286,6.212514,-7.444938,-8.821843,9.718580,-8.219986,-5.951952,-5.485685,-6.225081,-5.705579,3.985829,1.141305,-3.011817,-9.789823,-2.260707,-6.305421,-5.510656,-3.128400,3.644477,2.835618,-6.881866,5.672841,0.087210,-2.214312,-0.200872,6.152580,-9.078470,6.882971,2.062463,4.937839,3.837890,7.454342,1.460799,2.548626,4.885907,-9.114896,-0.007134,-9.387729,5.478666,3.650081,8.151282,6.420602,8.442582,-1.012895,-2.035965,-1.276397,1.147378,-6.535069,-5.314434,7.376856,-7.177799,9.734470,6.914034,-9.264103,-2.617897,7.807820,-5.956889,-5.618070,4.577317,-2.199662,-8.266447,-1.936695,-6.017491,-5.942609,-6.797842,-9.534287,2.277205,2.624336,8.655453,7.899549,4.993431,-7.925115,-6.556427,8.915421,9.927356,9.127485,-3.176574,-4.463146,-3.277324,5.299301,-0.997643,4.331303,-5.912713,7.376240,-4.215429,8.120169,1.851869,3.976204,-1.386660,6.301047,-7.969147,7.975597,-7.554374,-2.705762,5.110089,4.547735,1.009994,2.658287,4.646706,-9.105956,-8.869684,1.618557,5.718479,2.982324,7.645432,8.024127,9.291274,8.783072,-6.899027,3.532146,4.229532,-3.228006,9.615357,-5.308957,-8.032295,0.974789,4.168842,-6.395882,6.508211,-5.245519,-0.846578,8.568782,6.468650,-0.002261,-4.630580,8.355743,-0.589818,-5.396653,7.888924,3.913300,0.987060,-2.849549,0.096096,6.381987,-5.938268,-6.081130,-8.842743,8.565799,-9.260616,4.119422,4.030569,-5.062877,-7.339765,2.838683,-0.002995,8.576709,9.211022,-2.773726,-3.048862,-8.776610,1.176818,-4.195003,-5.061990,0.649297,7.462727,6.740201,5.199208,-3.968074,-6.341369,-1.062727,-2.133507,6.277416,7.233571,0.333045,4.994684,0.426911,-5.041799,-6.367524,9.850866,2.960417,3.830718,4.245126,-6.891165,-4.562819,7.027892,0.478141,3.783091,-1.807474,-4.269546,-4.553227,8.803367,1.504073,8.213251,-6.398961,6.810901,4.636280,-9.206316,-4.343687,5.227665,7.553458,5.271665,-4.617446,3.853514,7.870162,-0.986673,-0.330088,7.097885,8.458139,1.534134,5.534567,0.383470,7.280411,3.873742,7.980636,9.918065,-4.595880,3.210332,6.900130,4.287771,9.124309,-6.270537,0.313859,1.799573,0.590794,-9.783322,6.101047,3.048323,2.720652,-7.080247,3.940464,0.036142,-3.554584,9.432817,-4.927490,5.797908,-4.157914,2.701050,2.120307,1.489685,0.465438,-7.467931,4.921632,-6.356173,-1.709286,7.107198,-0.844357,0.809794,-3.703819,-9.405802,0.823264,-7.631202,9.112151,0.209353,-0.704674,4.214043,-4.233246,-6.316484,-6.931929,-3.050747,-2.152279,-9.682565,8.663682,6.259013,-3.273321,-3.717112,4.343424,-2.311201,-3.120461,-0.137125,-8.055125,-2.565629,5.547093,-4.146151,1.607699,-0.420316,2.829972,-0.315118,8.827133,-9.076831,9.300207,1.642375,2.037109,-8.274051,-4.947500,-6.592195,-9.495658,7.215255,1.884528,0.844105,3.972506,-5.832535,6.108261,7.719212,2.242915,-2.684882,-0.710572,2.949597,5.723635,3.831703,-7.850709,-3.866132,-0.870338,-8.983568,-2.521159,8.466620,-5.861251,-4.220529,-1.194640,-7.376184,7.377512,9.825663,-3.554382,0.849714,-8.537881,9.484108,-6.033724,9.535306,-3.252059,-5.995001,-5.724231,-4.975561,-8.861019,-9.211707,-9.134915,-9.191289,2.647954,8.636342,-0.782824,-8.282663,9.363875,-5.413774,2.571249,-6.640428,7.862201,-8.961135,-6.819899,-7.031810,6.802266,-5.880238,4.286911,6.074063,-0.059327,1.722871,7.135125,2.975980,3.140501,-9.689057,6.676002,-7.525557,-3.971664,-5.072152,7.332191,9.539154,7.944086,-8.528339,-8.126318,-6.488312,-7.450075,5.810724,7.437225,-8.281875,-9.735560,1.378539,-2.346742,6.473455,5.150096,6.912977,-5.454147,9.754333,-2.496241,2.841469,-5.634917,0.186007,2.112553,-9.263373,1.901979,9.980102,-7.099800,-7.494975,3.802556,2.507240,7.559283,9.280636,4.454203,-0.360854,1.112157,-6.409855,3.251665,-3.203903,-7.941501,6.387670,-4.582037,-2.655225,2.889695,0.236672,-6.278806,3.223092,5.933170,3.936816,-7.306445,5.485806,2.703372,0.279827,7.165349,3.955672,-5.804437,-7.297841,-9.149565,7.239775,1.080972,-7.780999,9.636644,8.200349,-9.097394,7.926315,-9.123624,-4.111089,-4.058600,-3.258142,-0.725292,-0.253455,-7.929921,9.391929,8.525099,2.861588,3.848612,-5.686340,4.491145,4.864928,-6.226704,-9.858535,9.571455,2.166112,-5.289001,-4.229316,4.450105,-8.752030,0.729024,-8.273068,-6.666084,2.798899,0.945704,0.538356,7.199586,5.354106,0.803390,3.616540,-3.132281,4.669540,-2.046680,0.304167,-4.796319,-0.648974,1.742183,-1.201678,-9.587048,7.120891,1.436674,-0.369402,-8.930862,-2.178571,-4.678213,-0.291247,-5.705940,8.595199,9.990564,7.916413,-1.957475,6.168103,-8.154320,-7.308035,3.591027,5.606904,-3.231168,-4.029032,5.963610,-6.681585,-7.804897,-5.856922,-2.268145,5.335583,2.232664,2.424037,-7.768536,2.560025,-2.287852,7.774372,-2.081718,-8.608955,7.395173,6.655448,-5.727094,-0.411206,-8.290327,9.086592,-5.756754,9.064132,5.385223,-7.932065,8.143152,3.465604,7.455435,-4.945646,5.361495,-7.662394,3.588773,2.369706,3.311653,-8.169120,-5.095880,1.746198,-2.956285,-0.747081,2.776244,-2.845521,0.775683,8.729077,-1.036787,-8.821160,-7.094805,-1.367859,-5.052951,3.094085,4.082152,7.463076,-2.646573,0.351246,6.999452,-6.633145,-9.914323,-4.802479,-9.761069,-8.754610,7.870866,-9.488889,1.736951,1.814888,-6.363242,6.986040,-7.548928,-8.660726,2.474327,3.542471,1.964806,-4.354655,-9.774922,6.272994,-9.936715,-1.691780,-1.695402,4.295063,6.614594,4.911852,-2.180045,-3.673367,-2.233938,9.929546,-2.710397,-9.675616,-1.678431,9.652757,5.129118,-5.092426,-1.345991,6.973635,5.640930,-8.577542,0.212232,5.784585,-1.368792,-8.639045,-8.525909,4.276635,7.546433,-1.560004,-0.109306,-6.165085,2.894548,3.001879,4.872871,-4.442104,5.790080,-2.876832,2.481208,-0.601603,9.704793,-9.672891,-4.008619,-6.121655,2.840497,-3.457156,-9.095578,-7.822341,5.358372,4.024523,-3.156339,4.212456,-1.335654,4.896149,0.414291,6.670256,-0.328590,-5.916713,1.575955,-1.091707,-2.468264,-9.652856,-1.412081,-3.269071,-1.135224,-8.756004,3.408139,3.381488,5.970897,0.698697,-0.102287,5.141964,-2.146617,-6.914966,-0.716185,9.139828,8.814776,2.508887,-8.298151,7.947263,2.280662,4.221691,7.141860,-7.623316,8.040928,-5.569916,4.796645,2.358530,3.406127,0.596407,-7.673919,-2.856953,8.722091,1.643770,6.425132,-9.800564,0.338078,-8.365036,-8.596613,5.454381,-9.889720,-3.407422,-9.758101,-8.669115,0.621276,8.741074,-5.731647,2.246327,-9.219752,0.504463,9.409001,-9.061620,5.709223,3.627359,-4.554473,-7.085543,-3.775625,-2.800180,-8.562968,4.981864,-3.398603,2.933762,-2.338390,-6.000060,-5.707579,6.070984,-5.975035,-1.046785,-9.308747,9.664892,-8.854083,6.182582,-6.576184,9.834358,-8.795298,-1.907346,-1.537567,8.609258,-2.240671,6.825247,2.383506,-3.523116,-2.828086,-9.158421,5.011602,3.047487,7.884909,-7.847584,-1.261052,-1.716243,-0.657661,-1.911031,-0.070641,-1.745244,1.275812,8.662345,-7.107044,-0.594419,-8.426437,8.462598,1.087204,-8.479190,3.796100,-2.283891,-3.722462,6.660552,-6.483496,8.270507,7.116507,6.765819,8.677804,-8.106368,7.705878,8.602197,8.747235,7.922175,6.179848,4.301909,-3.486192,6.365700,-2.989199,-5.384138,-5.680131,5.446061,5.000162,-1.748471,-9.542501,-5.522144,-2.645465,5.466881,-7.596695,-6.945190,-9.567441,-1.680693,3.134563,-3.397027,-7.791117,-5.254968,-0.367705,6.004864,1.333097,3.225650,-7.324588,8.777153,8.119760,-2.231273,6.566608,5.124154,-1.036431,-1.909364,2.556948,1.359585,8.620095,-0.419702,4.207191,1.379389,-3.770676,-5.176892,-3.095474,5.938361,4.286845,1.949525,-7.382487,-7.387358,8.713527,-1.155657,0.787058,-4.713379,-8.763021,6.916912,-8.516331,-0.960791,3.898862,2.595201,-1.331578,8.662167,-0.423292,-7.087363,2.731678,5.978981,4.632920,-4.825932,2.472080,-4.467877,3.409134,-2.723119,-8.767561,-0.531952,3.924100,-7.920298,-7.912897,1.326046,-0.731646,1.190389,0.986701,-1.654766,7.845356,2.898368,-4.376668,-2.315635,4.975415,0.986507,6.160964,5.784307,-4.195944,-8.237133,0.611425,0.703672,0.788448,-4.632644,-7.559208,9.248017,4.396332,-9.415202,-3.880903,9.220725,2.010925,-5.158214,4.022573,-6.248766,2.171963,-5.441490,-1.723499,-8.674773,5.165630,-0.248682,-7.635607,0.746421,7.455072,6.182230,-0.066749,2.222480,1.051680,-4.965371,-8.731301,-9.294653,7.387236,-9.515740,9.308122,1.288302,3.401572,-2.081755,9.312927,4.219801,6.133073,5.106586,-5.325782,-4.790572,-3.906815,-8.484935,9.956399,-8.196443,4.116823,-4.466875,4.278652,5.452954,-3.451045,-7.885281,5.033948,-0.234569,-1.309383,-5.801502,-4.067404,2.370164,5.703173,3.870381,-5.628128,7.279016,6.167122,-0.484503,4.851082,1.106902,0.498303,-8.671781,-1.925833,-8.672736,-0.624133,6.571613,6.726599,3.029671,-9.299395,9.680765,-0.413241,-0.360204,-9.164513,-9.605536,0.414894,0.337024,-1.923760,6.561148,-8.895429,2.857470,2.068783,-1.791857,4.253085,0.768034,-4.454416,2.341024,-9.305949,-6.413540,-5.446682,-1.111203,1.146446,0.699508,0.383463,-2.104396,-6.481488,-8.389437,-4.326134,-2.383177,-8.833502,0.641074,-8.413095,7.061795,-2.232659,7.774828,2.329799,-6.354364,-5.906705,-9.679102,8.789869,9.212270,-9.962845,4.146197,-9.528455,5.116503,4.434296,-4.199591,6.272771,-2.500885,8.352136,-2.825971,-8.237058,4.143874,-2.092397,-6.114951,-9.174571,1.685716,-0.752952,1.334976,-2.558778,0.702325,1.434642,0.844932,-4.839711,8.648167,-1.285532,-6.614279,-1.933792,8.951459,1.101359,-5.819370,5.770692,-1.262477,-0.686541,9.713832,-5.252286,3.671104,-3.841382,-4.534471,-9.105224,-7.453655,-1.370809,3.285080,3.110986,8.548628,0.815071,-7.061987,-8.909765,-7.845414,5.803979,4.359425,-2.410501,8.990745,-2.752156,6.577481,5.632491,6.902380,-9.508605,1.942388,3.075488,-5.885816,-0.920033,3.555699,-9.919796,-1.040220,2.608293,5.240749,-3.492620,-2.009353,0.642414,1.403068,-1.669803,-7.957342,-5.797175,-7.191419,-3.545913,-4.384737,4.049272,9.199056,1.834232,4.863771,-1.448184,-9.938017,-7.031921,0.021716,5.978233,-9.713090,8.328172,-6.656749,-2.134419,6.104890,-3.604799,-2.572234,9.664778,5.967259,5.521049,-1.424457,2.686917,-4.221435,6.625619,4.343266,-5.537131,-2.351607,-3.539034,6.339266,2.801224,-3.040065,-5.042064,-4.275806,-3.162928,-6.657813,-0.203029,3.905059,-6.499909,3.681598,7.098957,-9.980815,1.624030,1.231291,1.927654,-5.054567], dtype = "float32")#candidate|336|(1664,)|const|float32
bop_337 = relay.logical_and(bop_308.astype('bool'), relay.reshape(const_336.astype('bool'), relay.shape_of(bop_308))) # shape=(1664,)
output = relay.Tuple([call_298,bop_305,bop_315,bop_321,bop_326,call_329,bop_331,uop_334,bop_337,])
output2 = relay.Tuple([call_300,bop_305,bop_315,bop_321,bop_326,call_330,bop_331,uop_334,bop_337,])
func_347 = relay.Function([var_295,var_325,], output)
mod['func_347'] = func_347
mod = relay.transform.InferType()(mod)
var_348 = relay.var("var_348", dtype = "float32", shape = ())#candidate|348|()|var|float32
var_349 = relay.var("var_349", dtype = "float32", shape = (16,))#candidate|349|(16,)|var|float32
output = func_347(var_348,var_349,)
func_350 = relay.Function([var_348,var_349,], output)
mutated_mod['func_350'] = func_350
mutated_mod = relay.transform.InferType()(mutated_mod)
func_51_call = mod.get_global_var('func_51')
func_52_call = mutated_mod.get_global_var('func_52')
call_357 = relay.TupleGetItem(func_51_call(), 1)
call_358 = relay.TupleGetItem(func_52_call(), 1)
output = call_357
output2 = call_358
func_370 = relay.Function([], output)
mod['func_370'] = func_370
mod = relay.transform.InferType()(mod)
output = func_370()
func_371 = relay.Function([], output)
mutated_mod['func_371'] = func_371
mutated_mod = relay.transform.InferType()(mutated_mod)
var_375 = relay.var("var_375", dtype = "uint16", shape = (10, 11))#candidate|375|(10, 11)|var|uint16
var_376 = relay.var("var_376", dtype = "uint16", shape = (10, 11))#candidate|376|(10, 11)|var|uint16
bop_377 = relay.less(var_375.astype('bool'), relay.reshape(var_376.astype('bool'), relay.shape_of(var_375))) # shape=(10, 11)
func_94_call = mod.get_global_var('func_94')
func_97_call = mutated_mod.get_global_var('func_97')
const_385 = relay.const([-4,9,-4,-3,-2,-2,6,9,10,4,-2,1,9,10,-10,8,-1,7,8,8,4,6,-10,4,8,5,8,3,-7,-1,-3,-10,-4,2,8,-3,2,4,6,-1,6,4,1,9,10,8,9,-10,4,6,-3,-6,-10,-6,-6,1,-4,-6,-2,-4,5,8,9,-6,1,7,-4,-9,-3,3,2,1,-10,-1,-2,-7,-9,10,6,-3,1,-10,-4,9,6,7,5,3,7,-8,-1,7,-1,-9,6,-3,-5,9,-4,7,10,7,3,1,-4,-10,-5,6,-5,-2,-9,7,-9,-3,7,-2,-3,-4,-9,-8,-7,9,-7,-9,-1,3,-7,-4,-7,9,9,2,-2,-10,-5,-7,9,4,4,10,4,5,-6,-8,-8,-8,2,-8,-10,9,-9,8,4,-7,5,2,-3,-3,-8,3,-9,2,4,-6,-10,-10,1,10,1,-4,5,8,-6,8,-3,1,-3,-3,-5,-3,-8,-8,2,6,3,10,7,5,-10,-7,-5,6,3,7,2,5,-3,-9,-8,8,5,1,-7,-3,-1,-1,1,4,-9,-2,-3,1,9,-2,-4,-10,10,9,8,-6,4,-5,7,9,-10,-8,-5,10,-8,-2,-3,-9,4,10,-4,2,6,-3,7,-10,2,-2,7,-2,4,-9,-6,8,8,5,6,2,-5,4,8,2,4,-6,8,7,-1,7,-7,-9,-4,-9,-2,-2,-5,-2,2,2,10,6,5,9,2,-3,-2,-5,7,-7,-4,-7,-5,1,-4,3,10,-3,-5,-9,8,-7,4,-9,6,9,4,9,6,-9,3,-6,3,8,-2,6,-8,-2,-5,-3,-6,-2,-10,-2,-3,7,-2,8,2,5,2,-4,4,-1,7,-1,6,-5,-4,-3,7,4,-4,-5,8,-2,1,1,4,-6,7,5,-3,-2,-7,-6,6,6,-2,-8,-2,3,8,1,-9,2,6,-1,-10,-8,7,-3,-3,7,-1,8,-7,7,8,-5,4,-2,7,-9,-8,5,-10,10,-9,-9,-4,-4,-9,-6,10,3,-3,6,10,-8,-4,-4,5,-10,-3,-7,-7,7,5,-2,-9,8,-1,1,-10,10,3,-10,9,5,8,-8,4,-2,3,3,-10,1,5,-3,-2,-1,-8,-3,3,-9,-9,-8,6,-1,4,10,-5,5,2,7,2,9,10,-7,10,-4,2,-4,-1,-7,1,9,8,-7,6,6,-3,8,-7,-6,10,7,-1,-2,10,-7,7,-8,-2,7,1,5,-8,-9,9,-3,-5,-5,-3,-9,8,-5,-2,2,-10,-3,4,-6,3,7,-1,5,3,4,-6,-9,1,-1,-7,-6,-2,7,-8,-8,8,-5,8,-7,-1,-6,-6,-1,-1,9,-5,-6,-5,-5,-7,4,-10,6,-10,-8,-8,7,-1,2,-3,1,-7,9,9,-6,8,-4,10,8,-5,-10,5,8,10,-10,-10,-2,-6,-2,4,-3,-8,5,-7,8,1,6,9,-2,5,-9,2,3,-2,-7,2,1,5,8,10,5,-5,-7,-6,-1,-2,-5,4,6,-4,6,-1,4,2,-9,7,4,-6,8,4,4,-2,4,-8,5,1,7,-8,-9,2,-5,-3,-5,-3,-2,2,5,-4,3,-9,-5,-2,2,3,2,-1,-6,-9,-5,2,1,5,10,-5,3,-3,-4,-1,5,-8,-9,6,-3,-4,7,-8,-2,4,-2,6,5,-4,-6,-5,-8,8,4,-1,-10,9,-5,-6,10,10,3,7,-9,6,7,4,8,3,7,3,2,-5,-7,-3,-4,-8,1,4,-8,3,6,3,9,-8,-1,-4,-10,-10,-3,-3,6,-4,7,-6,10,2,-9,2,2,-6,8,8,10,-7,2,8,3,6,-1,7,-2,-9,-6,8,-8,3,-4,-8,-10,7,-4,10,8,7,8,1,5,-2,-1,-8,-7,-9,-5,-7,-1,-7,-1,2,4,-1,5,4,-3,10,-9,5,1,-6,10,-1,10,-5,8,-2,-9,7,-4,4,9,1,2,1,9,-8,-3,-7,-9,-3,10,-9,8,-10,9,2,-8,4,-9,1,-4,-7,2,-9,-6,7,-8,4,-4,-10,10,9,-5,8,-1,1,10,4,4,2,-8,6,7,5,6,-4,-7,4,9,-5,-1,-8,8,4,7,-10,6,2,7,5,-3,10,4,-2,-6,-3,-7,1,-3,5,-2,5,-4,1,4,-5,-7,-9,-10,3,-9,-6,-5,4,-1,-8,-6,9,1,1,8,-4,-10,-3,3,-8,-2,1,-9,-7,-3,-3,9,-1,4,6,8,4,-5,10,-4,-2,-1,6,-7,-2,8,-1,9,-7,-4,2,3,9,4,-5,8,-7,-10,2,-5,-2,-2,-10,-5,-2,10,-2,-2,2,-2,6,-6,-10,-5,-8,9,-3,-10,-1,-2,7,-9,-8,10,10,-8,-4,9,-3,-8,-5,8,7,-5,-7,3,2,1,-6,-9,-4,3,1,10,8,-4,5,5,10,-2,8,10,-9,1,1,10,-8,1,-6,-3,1,9,9,-1,3,-7,9,2,-6,3,-2,-5,7,10,-1,10,-2,1,1,2,5,7,-5,-4,-2,10,-10,-6,5,2,1,-7,1,4,-1,-7,6,-2,5,-1,3,-4,-10,-3,6,-10,-7,10,6,9,-2,4,10,-8,2,-3,3,-9,6,8,7,-9,-5,-10,4,-8,6,6,-6,1,4,-4,-1,-1,-4,1,7,6,2,4,-5,-4,-4,7,3,-9,-3,-5,5,5,5,1,-9,-7,-2,7,-5,10,-1,1,-4,2,-3,-6,-3,8,-7,3,7,-5,2,10,-2,7,5,9,8,1,-8,-10,5,10,-10,-10,-4,-9,8,2,-10,-5,-4,-6,-4,4,3,-5,-5,-2,10,1,6,8,1,-4,-6,-6,3,-5,-1,1,6,-2,-10,3,4,-2,5,-4,8,7,-9,8,-5,9,5,-7,5,-9,4,3,-7,-10,-2,1,4,-8,9,5,1,9,5,5,7,-2,-8,-9,-7,9,3,1,-6,-10,-5,10,-10,-1,8,2,-2,6,-9,-4,6,-8,-3,-8,-10,-5,-3,10,-5,8,-9,-9,-5,10,2,2,9,-8,-1,-1,-5,7,-1,-1,9,10,-10,-8,3,-10,-6,-4,-2,-7,-9,5,3,1,-8,8,4,5,6,10,3,-6,-2,-4,-5,9,-7,9,4,-4,6,10,-10,5,-8,7,5,-10,6,-1,-5,8,-3,-2,6,-1,-9,-2,4,7,2,-3,9,-6,-7,9,-7,4,1,9,5,2,1,-3,3,6,5,-2,3,1,-5,4,7,-4,-5,8,2,-3,5,-7,7,-4,3,1,4,-7,-4,2,8,-10,8,-4,9,3,-5,-10,4,-7,10,4,-1,4,2,7,-2,5,-4,-10,6,6,-4,6,-10,6,2,-5,-2,8,-5,-4,-1,-4,-7,9,8,7,-2,1,-5,-2,-8,1,6,-4,6,7,-6,-4,7,-6,-9,-8,-5,2,5,-8,3,-5,-9,-1,6,2,-10,4,-2,-4,-5,-1,-9,-2,-9,9,10,-10,-2,5,8,9,6,7,6,-8,-4,-3,3,1,-6,1,-4,-6,-1,-4,8,7,9,-1,-7,-7,-1,-6,-6,6,7,7,-10,10,3,8,-9,5,-1,4,7,-9,-2,3,-9,-9,6,-8,10,-6,1,-2,3,10,-4,-1,4,1,2,3,3,-10,9,-5,-5,9,9,8,-9,-3,3,-7,-4,2,-2,-9,-6,-4,-6,-1,2,-9,-1,10,-7,4,8,4,10,8,-2,7,-6,2,-9,-3,5,9,-10,6,3,5,3,-5,-7,3,10,7,10,-7,2,-2,-1,3,-2,-9,2,8,5,-6,-6,2,-10,3,-10,-1,-10,1,3,-5,4,-2,9,-10,5,7,-7,-9,-1,1,3,-4,-6,-6,-9,-6,6,1,-1,-10,-9,8,-9,6,-1,1,-8,9,-2,-5,-8,5,-10,-9,-7,5,-5,3,2,-4,-4,-7,10,8,-10,4,-3,-2,-5,-2,-10,-8,4,1,-1,-8,-1,-1,2,-4,2,2,5,8,5,-2,-1,-1,4,-10,6,3,-7,-8,-4,3,10,-3,1,5,-5,2,1,-10,5,1,-10,-9,-9,-7,-1,10,8,-6,-9,7,-10,-10,2,6,-2,9,3,8,-6,6,-5,-7,-2,-4,-4,4,1,4,4,1,7,7,-9,-2,9,-2,-4,9,-4,6,-3,-1,-4,8,-5,5,10,-1,-6,1,3,-2,-4,5,-2,-5,3,1,-3,7,-7,-1,2,-3,-7,6,10,8,-8,2,-6,-7,7,6,5,9,4,1,3,8,10,1,1,6,2,9,8,-7,-4,-4,-6,2,-2,8,7,-7,-10,-9,-8,2,4,10,-7,-7,-1,1,4,7,-6,-3,-1,-10,-1,-3,5,-2,5,8,-10,5], dtype = "uint32")#candidate|385|(1664,)|const|uint32
call_384 = func_94_call(relay.reshape(const_385.astype('uint32'), [8, 16, 13]), relay.reshape(const_385.astype('uint32'), [8, 16, 13]), )
call_386 = func_94_call(relay.reshape(const_385.astype('uint32'), [8, 16, 13]), relay.reshape(const_385.astype('uint32'), [8, 16, 13]), )
uop_398 = relay.sqrt(bop_377.astype('float32')) # shape=(10, 11)
bop_400 = relay.maximum(uop_398.astype('int8'), relay.reshape(var_376.astype('int8'), relay.shape_of(uop_398))) # shape=(10, 11)
bop_403 = relay.logical_or(uop_398.astype('bool'), relay.reshape(var_376.astype('bool'), relay.shape_of(uop_398))) # shape=(10, 11)
uop_410 = relay.log10(uop_398.astype('float64')) # shape=(10, 11)
uop_412 = relay.sinh(uop_410.astype('float32')) # shape=(10, 11)
bop_414 = relay.floor_divide(uop_410.astype('float32'), relay.reshape(bop_377.astype('float32'), relay.shape_of(uop_410))) # shape=(10, 11)
output = relay.Tuple([call_384,const_385,bop_400,bop_403,uop_412,bop_414,])
output2 = relay.Tuple([call_386,const_385,bop_400,bop_403,uop_412,bop_414,])
func_418 = relay.Function([var_375,var_376,], output)
mod['func_418'] = func_418
mod = relay.transform.InferType()(mod)
mutated_mod['func_418'] = func_418
mutated_mod = relay.transform.InferType()(mutated_mod)
func_418_call = mutated_mod.get_global_var('func_418')
var_420 = relay.var("var_420", dtype = "uint16", shape = (10, 11))#candidate|420|(10, 11)|var|uint16
var_421 = relay.var("var_421", dtype = "uint16", shape = (10, 11))#candidate|421|(10, 11)|var|uint16
call_419 = func_418_call(var_420,var_421,)
output = call_419
func_422 = relay.Function([var_420,var_421,], output)
mutated_mod['func_422'] = func_422
mutated_mod = relay.transform.InferType()(mutated_mod)
func_51_call = mod.get_global_var('func_51')
func_52_call = mutated_mod.get_global_var('func_52')
call_429 = relay.TupleGetItem(func_51_call(), 1)
call_430 = relay.TupleGetItem(func_52_call(), 1)
output = call_429
output2 = call_430
func_432 = relay.Function([], output)
mod['func_432'] = func_432
mod = relay.transform.InferType()(mod)
mutated_mod['func_432'] = func_432
mutated_mod = relay.transform.InferType()(mutated_mod)
func_432_call = mutated_mod.get_global_var('func_432')
call_433 = func_432_call()
output = call_433
func_434 = relay.Function([], output)
mutated_mod['func_434'] = func_434
mutated_mod = relay.transform.InferType()(mutated_mod)
var_444 = relay.var("var_444", dtype = "float64", shape = (3,))#candidate|444|(3,)|var|float64
var_445 = relay.var("var_445", dtype = "float64", shape = (3,))#candidate|445|(3,)|var|float64
bop_446 = relay.floor_mod(var_444.astype('float64'), relay.reshape(var_445.astype('float64'), relay.shape_of(var_444))) # shape=(3,)
func_432_call = mod.get_global_var('func_432')
func_434_call = mutated_mod.get_global_var('func_434')
call_450 = func_432_call()
call_451 = func_432_call()
uop_458 = relay.atan(var_445.astype('float64')) # shape=(3,)
var_460 = relay.var("var_460", dtype = "bool", shape = (3, 9))#candidate|460|(3, 9)|var|bool
bop_461 = relay.minimum(call_450.astype('uint8'), relay.reshape(var_460.astype('uint8'), relay.shape_of(call_450))) # shape=(3, 9)
bop_464 = relay.minimum(call_451.astype('uint8'), relay.reshape(var_460.astype('uint8'), relay.shape_of(call_451))) # shape=(3, 9)
bop_465 = relay.power(uop_458.astype('float64'), relay.reshape(bop_446.astype('float64'), relay.shape_of(uop_458))) # shape=(3,)
uop_469 = relay.sin(bop_465.astype('float64')) # shape=(3,)
uop_471 = relay.rsqrt(uop_469.astype('float32')) # shape=(3,)
uop_473 = relay.erf(uop_469.astype('float32')) # shape=(3,)
var_477 = relay.var("var_477", dtype = "float64", shape = (3,))#candidate|477|(3,)|var|float64
bop_478 = relay.floor_divide(uop_469.astype('float32'), relay.reshape(var_477.astype('float32'), relay.shape_of(uop_469))) # shape=(3,)
var_481 = relay.var("var_481", dtype = "float64", shape = (3,))#candidate|481|(3,)|var|float64
bop_482 = relay.less_equal(uop_469.astype('bool'), relay.reshape(var_481.astype('bool'), relay.shape_of(uop_469))) # shape=(3,)
bop_486 = relay.greater(bop_482.astype('bool'), relay.reshape(var_481.astype('bool'), relay.shape_of(bop_482))) # shape=(3,)
output = relay.Tuple([bop_461,uop_471,uop_473,bop_478,bop_486,])
output2 = relay.Tuple([bop_464,uop_471,uop_473,bop_478,bop_486,])
func_490 = relay.Function([var_444,var_445,var_460,var_477,var_481,], output)
mod['func_490'] = func_490
mod = relay.transform.InferType()(mod)
var_491 = relay.var("var_491", dtype = "float64", shape = (3,))#candidate|491|(3,)|var|float64
var_492 = relay.var("var_492", dtype = "float64", shape = (3,))#candidate|492|(3,)|var|float64
var_493 = relay.var("var_493", dtype = "bool", shape = (3, 9))#candidate|493|(3, 9)|var|bool
var_494 = relay.var("var_494", dtype = "float64", shape = (3,))#candidate|494|(3,)|var|float64
var_495 = relay.var("var_495", dtype = "float64", shape = (3,))#candidate|495|(3,)|var|float64
output = func_490(var_491,var_492,var_493,var_494,var_495,)
func_496 = relay.Function([var_491,var_492,var_493,var_494,var_495,], output)
mutated_mod['func_496'] = func_496
mutated_mod = relay.transform.InferType()(mutated_mod)
func_432_call = mod.get_global_var('func_432')
func_434_call = mutated_mod.get_global_var('func_434')
call_517 = func_432_call()
call_518 = func_432_call()
output = relay.Tuple([call_517,])
output2 = relay.Tuple([call_518,])
func_519 = relay.Function([], output)
mod['func_519'] = func_519
mod = relay.transform.InferType()(mod)
output = func_519()
func_520 = relay.Function([], output)
mutated_mod['func_520'] = func_520
mutated_mod = relay.transform.InferType()(mutated_mod)
var_521 = relay.var("var_521", dtype = "float64", shape = (14, 12))#candidate|521|(14, 12)|var|float64
var_522 = relay.var("var_522", dtype = "float64", shape = (14, 12))#candidate|522|(14, 12)|var|float64
bop_523 = relay.power(var_521.astype('float64'), relay.reshape(var_522.astype('float64'), relay.shape_of(var_521))) # shape=(14, 12)
output = relay.Tuple([bop_523,])
output2 = relay.Tuple([bop_523,])
func_529 = relay.Function([var_521,var_522,], output)
mod['func_529'] = func_529
mod = relay.transform.InferType()(mod)
var_530 = relay.var("var_530", dtype = "float64", shape = (14, 12))#candidate|530|(14, 12)|var|float64
var_531 = relay.var("var_531", dtype = "float64", shape = (14, 12))#candidate|531|(14, 12)|var|float64
output = func_529(var_530,var_531,)
func_532 = relay.Function([var_530,var_531,], output)
mutated_mod['func_532'] = func_532
mutated_mod = relay.transform.InferType()(mutated_mod)
var_534 = relay.var("var_534", dtype = "int8", shape = (7, 16))#candidate|534|(7, 16)|var|int8
var_535 = relay.var("var_535", dtype = "int8", shape = (7, 16))#candidate|535|(7, 16)|var|int8
bop_536 = relay.bitwise_xor(var_534.astype('int8'), relay.reshape(var_535.astype('int8'), relay.shape_of(var_534))) # shape=(7, 16)
bop_539 = relay.subtract(bop_536.astype('uint8'), relay.reshape(var_535.astype('uint8'), relay.shape_of(bop_536))) # shape=(7, 16)
const_542 = relay.const([[-5,-3,1,10,4,-4,-3,-1,-8,9,4,-5,-5,7,1,-8],[-6,3,-4,-5,-6,-7,10,6,-1,-1,2,-7,-1,3,-10,10],[1,-5,6,-5,-9,-3,-10,-8,-3,7,-6,-2,-9,-1,-9,6],[4,-7,1,3,2,-10,7,5,-8,-5,9,1,6,8,3,-5],[3,-7,4,6,-8,-10,6,-4,2,-1,9,-10,6,-10,1,-7],[-7,-1,-8,7,-3,10,-4,6,-6,-6,10,9,3,-6,3,9],[10,1,6,4,8,-3,-10,8,-7,-10,10,3,-7,8,-2,1]], dtype = "int8")#candidate|542|(7, 16)|const|int8
bop_543 = relay.bitwise_xor(var_535.astype('uint32'), relay.reshape(const_542.astype('uint32'), relay.shape_of(var_535))) # shape=(7, 16)
uop_551 = relay.acosh(bop_539.astype('float32')) # shape=(7, 16)
uop_553 = relay.asinh(uop_551.astype('float32')) # shape=(7, 16)
func_370_call = mod.get_global_var('func_370')
func_371_call = mutated_mod.get_global_var('func_371')
call_555 = func_370_call()
call_556 = func_370_call()
func_370_call = mod.get_global_var('func_370')
func_371_call = mutated_mod.get_global_var('func_371')
call_558 = func_370_call()
call_559 = func_370_call()
uop_560 = relay.sqrt(uop_553.astype('float64')) # shape=(7, 16)
bop_564 = relay.divide(uop_553.astype('float32'), relay.reshape(bop_539.astype('float32'), relay.shape_of(uop_553))) # shape=(7, 16)
uop_567 = relay.sinh(uop_551.astype('float32')) # shape=(7, 16)
var_569 = relay.var("var_569", dtype = "float32", shape = (7, 16))#candidate|569|(7, 16)|var|float32
bop_570 = relay.equal(uop_567.astype('bool'), relay.reshape(var_569.astype('bool'), relay.shape_of(uop_567))) # shape=(7, 16)
uop_573 = relay.log2(uop_560.astype('float32')) # shape=(7, 16)
bop_575 = relay.right_shift(uop_573.astype('uint8'), relay.reshape(const_542.astype('uint8'), relay.shape_of(uop_573))) # shape=(7, 16)
uop_578 = relay.asin(bop_575.astype('float32')) # shape=(7, 16)
var_580 = relay.var("var_580", dtype = "float32", shape = (7, 16))#candidate|580|(7, 16)|var|float32
bop_581 = relay.floor_mod(uop_567.astype('float64'), relay.reshape(var_580.astype('float64'), relay.shape_of(uop_567))) # shape=(7, 16)
bop_585 = relay.less(uop_578.astype('bool'), relay.reshape(uop_567.astype('bool'), relay.shape_of(uop_578))) # shape=(7, 16)
uop_589 = relay.atanh(bop_575.astype('float64')) # shape=(7, 16)
output = relay.Tuple([bop_543,call_555,call_558,bop_564,bop_570,bop_581,bop_585,uop_589,])
output2 = relay.Tuple([bop_543,call_556,call_559,bop_564,bop_570,bop_581,bop_585,uop_589,])
func_592 = relay.Function([var_534,var_535,var_569,var_580,], output)
mod['func_592'] = func_592
mod = relay.transform.InferType()(mod)
mutated_mod['func_592'] = func_592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_592_call = mutated_mod.get_global_var('func_592')
var_594 = relay.var("var_594", dtype = "int8", shape = (7, 16))#candidate|594|(7, 16)|var|int8
var_595 = relay.var("var_595", dtype = "int8", shape = (7, 16))#candidate|595|(7, 16)|var|int8
var_596 = relay.var("var_596", dtype = "float32", shape = (7, 16))#candidate|596|(7, 16)|var|float32
var_597 = relay.var("var_597", dtype = "float32", shape = (7, 16))#candidate|597|(7, 16)|var|float32
call_593 = func_592_call(var_594,var_595,var_596,var_597,)
output = call_593
func_598 = relay.Function([var_594,var_595,var_596,var_597,], output)
mutated_mod['func_598'] = func_598
mutated_mod = relay.transform.InferType()(mutated_mod)
var_600 = relay.var("var_600", dtype = "float64", shape = (7,))#candidate|600|(7,)|var|float64
uop_601 = relay.cosh(var_600.astype('float64')) # shape=(7,)
bop_606 = relay.logical_xor(uop_601.astype('int32'), relay.reshape(var_600.astype('int32'), relay.shape_of(uop_601))) # shape=(7,)
var_609 = relay.var("var_609", dtype = "float64", shape = (7,))#candidate|609|(7,)|var|float64
bop_610 = relay.mod(uop_601.astype('float64'), relay.reshape(var_609.astype('float64'), relay.shape_of(uop_601))) # shape=(7,)
bop_613 = relay.less(var_609.astype('bool'), relay.reshape(uop_601.astype('bool'), relay.shape_of(var_609))) # shape=(7,)
uop_616 = relay.erf(bop_606.astype('float64')) # shape=(7,)
bop_622 = relay.logical_or(bop_606.astype('bool'), relay.reshape(var_600.astype('bool'), relay.shape_of(bop_606))) # shape=(7,)
uop_626 = relay.atanh(bop_610.astype('float64')) # shape=(7,)
uop_630 = relay.acosh(bop_606.astype('float64')) # shape=(7,)
var_632 = relay.var("var_632", dtype = "float64", shape = (7,))#candidate|632|(7,)|var|float64
bop_633 = relay.divide(uop_630.astype('float32'), relay.reshape(var_632.astype('float32'), relay.shape_of(uop_630))) # shape=(7,)
uop_636 = relay.log10(uop_616.astype('float32')) # shape=(7,)
uop_638 = relay.tan(uop_636.astype('float32')) # shape=(7,)
bop_640 = relay.right_shift(uop_638.astype('uint64'), relay.reshape(bop_622.astype('uint64'), relay.shape_of(uop_638))) # shape=(7,)
var_646 = relay.var("var_646", dtype = "float32", shape = (7,))#candidate|646|(7,)|var|float32
bop_647 = relay.not_equal(uop_636.astype('bool'), relay.reshape(var_646.astype('bool'), relay.shape_of(uop_636))) # shape=(7,)
var_653 = relay.var("var_653", dtype = "uint64", shape = (7,))#candidate|653|(7,)|var|uint64
bop_654 = relay.right_shift(bop_640.astype('uint16'), relay.reshape(var_653.astype('uint16'), relay.shape_of(bop_640))) # shape=(7,)
bop_657 = relay.right_shift(bop_640.astype('int8'), relay.reshape(bop_613.astype('int8'), relay.shape_of(bop_640))) # shape=(7,)
bop_660 = relay.power(bop_647.astype('float32'), relay.reshape(bop_622.astype('float32'), relay.shape_of(bop_647))) # shape=(7,)
bop_665 = relay.less_equal(uop_636.astype('bool'), relay.reshape(var_646.astype('bool'), relay.shape_of(uop_636))) # shape=(7,)
uop_668 = relay.atan(uop_626.astype('float64')) # shape=(7,)
output = relay.Tuple([bop_633,bop_654,bop_657,bop_660,bop_665,uop_668,])
output2 = relay.Tuple([bop_633,bop_654,bop_657,bop_660,bop_665,uop_668,])
func_672 = relay.Function([var_600,var_609,var_632,var_646,var_653,], output)
mod['func_672'] = func_672
mod = relay.transform.InferType()(mod)
var_673 = relay.var("var_673", dtype = "float64", shape = (7,))#candidate|673|(7,)|var|float64
var_674 = relay.var("var_674", dtype = "float64", shape = (7,))#candidate|674|(7,)|var|float64
var_675 = relay.var("var_675", dtype = "float64", shape = (7,))#candidate|675|(7,)|var|float64
var_676 = relay.var("var_676", dtype = "float32", shape = (7,))#candidate|676|(7,)|var|float32
var_677 = relay.var("var_677", dtype = "uint64", shape = (7,))#candidate|677|(7,)|var|uint64
output = func_672(var_673,var_674,var_675,var_676,var_677,)
func_678 = relay.Function([var_673,var_674,var_675,var_676,var_677,], output)
mutated_mod['func_678'] = func_678
mutated_mod = relay.transform.InferType()(mutated_mod)
var_699 = relay.var("var_699", dtype = "float32", shape = (14, 12))#candidate|699|(14, 12)|var|float32
uop_700 = relay.cosh(var_699.astype('float32')) # shape=(14, 12)
output = relay.Tuple([uop_700,])
output2 = relay.Tuple([uop_700,])
F = relay.Function([var_699,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_699,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_699= np.array([[8.179938,-8.990311,-8.827993,-5.098887,9.598384,-4.884690,-5.903162,-5.510461,-4.608635,4.942946,-0.078109,-8.320053],[-5.918332,-2.581428,3.987772,-2.370865,4.480903,0.104994,2.655064,7.075110,-6.919645,5.551658,-5.579843,-8.794113],[5.389528,8.459279,4.637395,4.146778,8.537229,0.478198,-2.061021,8.899974,-4.072183,9.377081,6.262711,4.981158],[-3.195951,-9.678993,-4.343195,-0.952751,-3.429673,3.826012,0.381026,5.488551,-3.429823,9.975584,-5.340293,-6.517950],[7.936493,6.112242,6.599425,2.563265,3.101968,-6.984663,-1.998815,-7.154521,-2.446903,-6.340839,-9.587260,-3.134927],[-2.344994,5.417085,2.365282,-4.387095,4.121755,9.056239,-6.854526,4.718746,-5.061024,5.222718,-3.020212,3.888039],[7.244930,-7.963715,-7.166378,-2.200410,-7.818166,6.601323,1.350719,8.414090,0.200660,5.488282,1.324130,-7.236004],[-1.091464,-7.278849,2.617633,9.851697,3.237417,-0.504391,3.643966,7.889296,5.547360,9.651926,-9.859933,8.120634],[9.461274,8.239324,7.426237,-5.418723,1.384490,-4.424910,-4.144486,6.882634,7.415629,1.566483,-1.200235,4.648745],[-7.029506,-2.288691,0.765469,-3.111611,3.639759,9.327756,3.485266,-7.287407,-4.267784,5.128282,1.691841,-4.919106],[7.103296,6.349223,-9.924604,0.156712,0.052504,4.629981,1.262419,7.902064,6.728751,-2.614055,-0.303783,6.080129],[8.408676,9.878379,0.327339,-1.978103,-5.329756,-9.828280,-5.058336,6.129830,-3.050915,-2.121550,-2.046032,-6.391291],[-9.221428,8.139974,5.373892,5.176755,7.550754,8.900092,-7.938477,8.400866,9.582147,-4.869044,3.743421,1.635692],[-0.578492,-0.007473,8.861667,7.568798,1.063028,-2.767012,3.907669,9.848385,3.216941,-1.437290,-6.071535,-5.491408]], dtype='float32')
module1.set_input('var_699', input_699)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_699, )
res3 = intrp3.evaluate()(input_699, )
res4 = intrp4.evaluate()(input_699, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_699', input_699)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_699, )
res7 = intrp7.evaluate()(input_699, )
res8 = intrp8.evaluate()(input_699, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_699', input_699)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_699, )
res11 = intrp11.evaluate()(input_699, )
res12 = intrp12.evaluate()(input_699, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_699', input_699)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_699, )
res15 = intrp15.evaluate()(input_699, )
res16 = intrp16.evaluate()(input_699, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_699', input_699)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_699, )
res19 = intrp19.evaluate()(input_699, )
res20 = intrp20.evaluate()(input_699, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_699', input_699)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_699, )
res23 = intrp23.evaluate()(input_699, )
res24 = intrp24.evaluate()(input_699, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''45: TVMFuncCall
44: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
43: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
42: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
41: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
40: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
39: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
38: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
37: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
36: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
34: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
32: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
31: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
30: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
29: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
28: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
27: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
26: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
25: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
24: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
23: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
22: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
21: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
19: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
15: tvm::relay::ExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
13: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
12: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
11: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
10: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
9: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
8: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
7: _ZNSt17_Function_handlerIFvPKN3tvm5relay7LetNodeEEZNS1_15TypeVarEVis
6: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
5: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.533]
4: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9RelayEx
1: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
0: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const

'''