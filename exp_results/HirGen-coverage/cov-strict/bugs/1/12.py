import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (1,))#candidate|0|(1,)|var|float64
uop_1 = relay.sigmoid(var_0.astype('float64')) # shape=(1,)
uop_3 = relay.atanh(uop_1.astype('float64')) # shape=(1,)
uop_5 = relay.asin(var_0.astype('float32')) # shape=(1,)
uop_7 = relay.log2(uop_3.astype('float64')) # shape=(1,)
bop_9 = relay.bitwise_or(uop_3.astype('int32'), relay.reshape(var_0.astype('int32'), relay.shape_of(uop_3))) # shape=(1,)
var_12 = relay.var("var_12", dtype = "float64", shape = (7,))#candidate|12|(7,)|var|float64
bop_13 = relay.floor_mod(uop_7.astype('float32'), var_12.astype('float32')) # shape=(7,)
const_16 = relay.const([-1.017871,8.141248,6.121053,5.204824,-0.064384,-1.900738,3.695833,-8.809016], dtype = "float64")#candidate|16|(8,)|const|float64
bop_17 = relay.floor_divide(uop_7.astype('float32'), const_16.astype('float32')) # shape=(8,)
uop_20 = relay.sinh(uop_3.astype('float64')) # shape=(1,)
output = relay.Tuple([uop_5,bop_9,bop_13,bop_17,uop_20,])
output2 = relay.Tuple([uop_5,bop_9,bop_13,bop_17,uop_20,])
func_22 = relay.Function([var_0,var_12,], output)
mod['func_22'] = func_22
mod = relay.transform.InferType()(mod)
mutated_mod['func_22'] = func_22
mutated_mod = relay.transform.InferType()(mutated_mod)
func_22_call = mutated_mod.get_global_var('func_22')
var_24 = relay.var("var_24", dtype = "float64", shape = (1,))#candidate|24|(1,)|var|float64
var_25 = relay.var("var_25", dtype = "float64", shape = (7,))#candidate|25|(7,)|var|float64
call_23 = func_22_call(var_24,var_25,)
output = call_23
func_26 = relay.Function([var_24,var_25,], output)
mutated_mod['func_26'] = func_26
mutated_mod = relay.transform.InferType()(mutated_mod)
var_28 = relay.var("var_28", dtype = "bool", shape = (5, 10))#candidate|28|(5, 10)|var|bool
const_29 = relay.const([[True,True,False,False,True,True,True,True,False,True],[True,True,True,True,False,False,False,False,True,False],[False,False,True,True,False,True,True,False,False,False],[False,True,True,True,True,True,False,False,False,True],[True,False,False,False,True,False,False,False,False,False]], dtype = "bool")#candidate|29|(5, 10)|const|bool
bop_30 = relay.logical_or(var_28.astype('bool'), relay.reshape(const_29.astype('bool'), relay.shape_of(var_28))) # shape=(5, 10)
uop_33 = relay.acos(var_28.astype('float32')) # shape=(5, 10)
uop_35 = relay.log10(bop_30.astype('float64')) # shape=(5, 10)
output = relay.Tuple([uop_33,uop_35,])
output2 = relay.Tuple([uop_33,uop_35,])
func_37 = relay.Function([var_28,], output)
mod['func_37'] = func_37
mod = relay.transform.InferType()(mod)
var_38 = relay.var("var_38", dtype = "bool", shape = (5, 10))#candidate|38|(5, 10)|var|bool
output = func_37(var_38)
func_39 = relay.Function([var_38], output)
mutated_mod['func_39'] = func_39
mutated_mod = relay.transform.InferType()(mutated_mod)
var_41 = relay.var("var_41", dtype = "float32", shape = ())#candidate|41|()|var|float32
uop_42 = relay.sigmoid(var_41.astype('float32')) # shape=()
uop_44 = relay.sqrt(uop_42.astype('float32')) # shape=()
uop_46 = relay.exp(uop_44.astype('float64')) # shape=()
bop_48 = relay.maximum(uop_46.astype('float64'), uop_42.astype('float64')) # shape=()
uop_51 = relay.atanh(uop_46.astype('float64')) # shape=()
uop_53 = relay.exp(uop_46.astype('float64')) # shape=()
uop_55 = relay.sigmoid(uop_51.astype('float32')) # shape=()
uop_57 = relay.atanh(uop_55.astype('float32')) # shape=()
uop_59 = relay.atanh(uop_46.astype('float64')) # shape=()
uop_61 = relay.asinh(uop_57.astype('float64')) # shape=()
func_37_call = mod.get_global_var('func_37')
func_39_call = mutated_mod.get_global_var('func_39')
var_64 = relay.var("var_64", dtype = "bool", shape = (50,))#candidate|64|(50,)|var|bool
call_63 = relay.TupleGetItem(func_37_call(relay.reshape(var_64.astype('bool'), [5, 10])), 1)
call_65 = relay.TupleGetItem(func_39_call(relay.reshape(var_64.astype('bool'), [5, 10])), 1)
uop_66 = relay.log(uop_61.astype('float64')) # shape=()
bop_68 = relay.logical_xor(uop_61.astype('int32'), uop_66.astype('int32')) # shape=()
var_71 = relay.var("var_71", dtype = "float64", shape = (4, 12, 6))#candidate|71|(4, 12, 6)|var|float64
bop_72 = relay.not_equal(uop_66.astype('bool'), var_71.astype('bool')) # shape=(4, 12, 6)
var_75 = relay.var("var_75", dtype = "bool", shape = (4, 12, 6))#candidate|75|(4, 12, 6)|var|bool
bop_76 = relay.subtract(bop_72.astype('float32'), relay.reshape(var_75.astype('float32'), relay.shape_of(bop_72))) # shape=(4, 12, 6)
uop_79 = relay.log10(bop_68.astype('float64')) # shape=()
uop_81 = relay.exp(bop_72.astype('float32')) # shape=(4, 12, 6)
uop_83 = relay.atanh(uop_55.astype('float64')) # shape=()
uop_85 = relay.atan(uop_55.astype('float32')) # shape=()
var_87 = relay.var("var_87", dtype = "float64", shape = ())#candidate|87|()|var|float64
bop_88 = relay.not_equal(uop_66.astype('bool'), var_87.astype('bool')) # shape=()
uop_91 = relay.asin(uop_79.astype('float32')) # shape=()
uop_93 = relay.cosh(uop_81.astype('float64')) # shape=(4, 12, 6)
uop_95 = relay.rsqrt(uop_93.astype('float64')) # shape=(4, 12, 6)
bop_97 = relay.multiply(uop_95.astype('float64'), bop_68.astype('float64')) # shape=(4, 12, 6)
uop_100 = relay.acos(uop_95.astype('float32')) # shape=(4, 12, 6)
uop_102 = relay.sigmoid(uop_100.astype('float64')) # shape=(4, 12, 6)
func_37_call = mod.get_global_var('func_37')
func_39_call = mutated_mod.get_global_var('func_39')
call_104 = relay.TupleGetItem(func_37_call(relay.reshape(var_64.astype('bool'), [5, 10])), 1)
call_105 = relay.TupleGetItem(func_39_call(relay.reshape(var_64.astype('bool'), [5, 10])), 1)
bop_106 = relay.bitwise_and(uop_100.astype('uint16'), relay.reshape(var_75.astype('uint16'), relay.shape_of(uop_100))) # shape=(4, 12, 6)
bop_109 = relay.multiply(uop_102.astype('int64'), relay.reshape(bop_76.astype('int64'), relay.shape_of(uop_102))) # shape=(4, 12, 6)
uop_112 = relay.sinh(uop_102.astype('float32')) # shape=(4, 12, 6)
uop_114 = relay.sigmoid(uop_112.astype('float32')) # shape=(4, 12, 6)
bop_116 = relay.subtract(uop_112.astype('int8'), uop_55.astype('int8')) # shape=(4, 12, 6)
bop_119 = relay.power(uop_114.astype('float64'), uop_83.astype('float64')) # shape=(4, 12, 6)
uop_122 = relay.sigmoid(bop_116.astype('float64')) # shape=(4, 12, 6)
func_22_call = mod.get_global_var('func_22')
func_26_call = mutated_mod.get_global_var('func_26')
var_125 = relay.var("var_125", dtype = "float64", shape = (7,))#candidate|125|(7,)|var|float64
call_124 = relay.TupleGetItem(func_22_call(relay.reshape(uop_57.astype('float64'), [1,]), relay.reshape(var_125.astype('float64'), [7,]), ), 3)
call_126 = relay.TupleGetItem(func_26_call(relay.reshape(uop_57.astype('float64'), [1,]), relay.reshape(var_125.astype('float64'), [7,]), ), 3)
uop_127 = relay.sinh(uop_114.astype('float64')) # shape=(4, 12, 6)
var_129 = relay.var("var_129", dtype = "float64", shape = (4, 12, 6))#candidate|129|(4, 12, 6)|var|float64
bop_130 = relay.bitwise_and(uop_127.astype('int64'), relay.reshape(var_129.astype('int64'), relay.shape_of(uop_127))) # shape=(4, 12, 6)
bop_133 = relay.power(bop_119.astype('float32'), uop_85.astype('float32')) # shape=(4, 12, 6)
uop_136 = relay.sin(uop_112.astype('float64')) # shape=(4, 12, 6)
output = relay.Tuple([bop_48,uop_53,uop_59,call_63,var_64,bop_88,uop_91,bop_97,call_104,bop_106,bop_109,uop_122,call_124,var_125,bop_130,bop_133,uop_136,])
output2 = relay.Tuple([bop_48,uop_53,uop_59,call_65,var_64,bop_88,uop_91,bop_97,call_105,bop_106,bop_109,uop_122,call_126,var_125,bop_130,bop_133,uop_136,])
func_138 = relay.Function([var_41,var_64,var_71,var_75,var_87,var_125,var_129,], output)
mod['func_138'] = func_138
mod = relay.transform.InferType()(mod)
var_139 = relay.var("var_139", dtype = "float32", shape = ())#candidate|139|()|var|float32
var_140 = relay.var("var_140", dtype = "bool", shape = (50,))#candidate|140|(50,)|var|bool
var_141 = relay.var("var_141", dtype = "float64", shape = (4, 12, 6))#candidate|141|(4, 12, 6)|var|float64
var_142 = relay.var("var_142", dtype = "bool", shape = (4, 12, 6))#candidate|142|(4, 12, 6)|var|bool
var_143 = relay.var("var_143", dtype = "float64", shape = ())#candidate|143|()|var|float64
var_144 = relay.var("var_144", dtype = "float64", shape = (7,))#candidate|144|(7,)|var|float64
var_145 = relay.var("var_145", dtype = "float64", shape = (4, 12, 6))#candidate|145|(4, 12, 6)|var|float64
output = func_138(var_139,var_140,var_141,var_142,var_143,var_144,var_145,)
func_146 = relay.Function([var_139,var_140,var_141,var_142,var_143,var_144,var_145,], output)
mutated_mod['func_146'] = func_146
mutated_mod = relay.transform.InferType()(mutated_mod)
var_148 = relay.var("var_148", dtype = "float64", shape = ())#candidate|148|()|var|float64
var_149 = relay.var("var_149", dtype = "float64", shape = ())#candidate|149|()|var|float64
bop_150 = relay.floor_mod(var_148.astype('float64'), var_149.astype('float64')) # shape=()
bop_153 = relay.multiply(var_148.astype('float32'), var_149.astype('float32')) # shape=()
uop_156 = relay.acos(bop_150.astype('float32')) # shape=()
bop_158 = relay.not_equal(uop_156.astype('bool'), bop_150.astype('bool')) # shape=()
uop_161 = relay.sqrt(bop_150.astype('float64')) # shape=()
bop_163 = relay.multiply(uop_161.astype('float64'), uop_156.astype('float64')) # shape=()
bop_166 = relay.bitwise_and(bop_163.astype('uint16'), uop_161.astype('uint16')) # shape=()
output = relay.Tuple([bop_153,bop_158,bop_166,])
output2 = relay.Tuple([bop_153,bop_158,bop_166,])
func_169 = relay.Function([var_148,var_149,], output)
mod['func_169'] = func_169
mod = relay.transform.InferType()(mod)
var_170 = relay.var("var_170", dtype = "float64", shape = ())#candidate|170|()|var|float64
var_171 = relay.var("var_171", dtype = "float64", shape = ())#candidate|171|()|var|float64
output = func_169(var_170,var_171,)
func_172 = relay.Function([var_170,var_171,], output)
mutated_mod['func_172'] = func_172
mutated_mod = relay.transform.InferType()(mutated_mod)
var_174 = relay.var("var_174", dtype = "int32", shape = (1,))#candidate|174|(1,)|var|int32
var_175 = relay.var("var_175", dtype = "int32", shape = (4,))#candidate|175|(4,)|var|int32
bop_176 = relay.subtract(var_174.astype('int32'), var_175.astype('int32')) # shape=(4,)
func_138_call = mod.get_global_var('func_138')
func_146_call = mutated_mod.get_global_var('func_146')
const_180 = relay.const([True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True], dtype = "bool")#candidate|180|(50,)|const|bool
var_181 = relay.var("var_181", dtype = "float64", shape = (288,))#candidate|181|(288,)|var|float64
var_182 = relay.var("var_182", dtype = "float64", shape = (7, 1))#candidate|182|(7, 1)|var|float64
call_179 = relay.TupleGetItem(func_138_call(relay.reshape(var_174.astype('float32'), []), relay.reshape(const_180.astype('bool'), [50,]), relay.reshape(var_181.astype('float64'), [4, 12, 6]), relay.reshape(var_181.astype('bool'), [4, 12, 6]), relay.reshape(var_174.astype('float64'), []), relay.reshape(var_182.astype('float64'), [7,]), relay.reshape(var_181.astype('float64'), [4, 12, 6]), ), 11)
call_183 = relay.TupleGetItem(func_146_call(relay.reshape(var_174.astype('float32'), []), relay.reshape(const_180.astype('bool'), [50,]), relay.reshape(var_181.astype('float64'), [4, 12, 6]), relay.reshape(var_181.astype('bool'), [4, 12, 6]), relay.reshape(var_174.astype('float64'), []), relay.reshape(var_182.astype('float64'), [7,]), relay.reshape(var_181.astype('float64'), [4, 12, 6]), ), 11)
uop_184 = relay.asinh(var_175.astype('float64')) # shape=(4,)
bop_186 = relay.floor_divide(uop_184.astype('float32'), var_182.astype('float32')) # shape=(7, 4)
const_189 = relay.const([[-3.365352,3.739443,-9.534791,9.843434],[1.803477,5.152354,-7.927107,-5.175549],[-2.977510,-6.893378,-5.227578,-0.887359],[-5.617903,-9.248407,-2.620860,-4.069419],[4.537356,-5.735994,1.912740,-8.882339],[4.489182,-1.686308,3.881406,-0.019739],[-2.959477,-9.979655,2.392264,-6.480235]], dtype = "float32")#candidate|189|(7, 4)|const|float32
bop_190 = relay.bitwise_xor(bop_186.astype('uint32'), relay.reshape(const_189.astype('uint32'), relay.shape_of(bop_186))) # shape=(7, 4)
uop_193 = relay.cosh(var_174.astype('float32')) # shape=(1,)
bop_195 = relay.add(bop_190.astype('int16'), relay.reshape(bop_186.astype('int16'), relay.shape_of(bop_190))) # shape=(7, 4)
var_198 = relay.var("var_198", dtype = "uint32", shape = (7, 4))#candidate|198|(7, 4)|var|uint32
bop_199 = relay.less(bop_190.astype('bool'), relay.reshape(var_198.astype('bool'), relay.shape_of(bop_190))) # shape=(7, 4)
bop_202 = relay.bitwise_xor(const_189.astype('uint32'), var_174.astype('uint32')) # shape=(7, 4)
uop_205 = relay.tan(bop_186.astype('float64')) # shape=(7, 4)
const_207 = relay.const([[-5.859189,1.141120,-0.737901,-2.517922],[0.283876,0.138938,3.495078,6.355356],[1.294692,-4.861433,5.275295,4.272569],[-7.890601,4.469073,8.016024,2.774461],[-7.045522,8.392074,8.332568,4.507100],[3.003329,0.425281,-0.574570,2.874347],[5.126121,-6.165448,1.641949,-5.077395]], dtype = "float64")#candidate|207|(7, 4)|const|float64
bop_208 = relay.mod(uop_205.astype('float64'), relay.reshape(const_207.astype('float64'), relay.shape_of(uop_205))) # shape=(7, 4)
const_211 = relay.const([0.717972,-1.013480,-7.889475,0.852207,-3.481403,9.465508,6.475497,-6.232916,6.043459,7.171390,7.178563,3.434956,7.335045,1.470241,6.132089,5.991979], dtype = "float32")#candidate|211|(16,)|const|float32
bop_212 = relay.right_shift(uop_193.astype('uint64'), const_211.astype('uint64')) # shape=(16,)
bop_215 = relay.less_equal(const_189.astype('bool'), relay.reshape(var_198.astype('bool'), relay.shape_of(const_189))) # shape=(7, 4)
bop_218 = relay.logical_or(bop_190.astype('bool'), uop_184.astype('bool')) # shape=(7, 4)
var_221 = relay.var("var_221", dtype = "bool", shape = (7, 4))#candidate|221|(7, 4)|var|bool
bop_222 = relay.not_equal(bop_218.astype('bool'), relay.reshape(var_221.astype('bool'), relay.shape_of(bop_218))) # shape=(7, 4)
var_225 = relay.var("var_225", dtype = "float64", shape = (7, 4))#candidate|225|(7, 4)|var|float64
bop_226 = relay.equal(uop_205.astype('bool'), relay.reshape(var_225.astype('bool'), relay.shape_of(uop_205))) # shape=(7, 4)
uop_229 = relay.exp(uop_205.astype('float64')) # shape=(7, 4)
bop_231 = relay.bitwise_xor(uop_229.astype('uint8'), relay.reshape(bop_190.astype('uint8'), relay.shape_of(uop_229))) # shape=(7, 4)
output = relay.Tuple([bop_176,call_179,const_180,var_181,bop_195,bop_199,bop_202,bop_208,bop_212,bop_215,bop_222,bop_226,bop_231,])
output2 = relay.Tuple([bop_176,call_183,const_180,var_181,bop_195,bop_199,bop_202,bop_208,bop_212,bop_215,bop_222,bop_226,bop_231,])
func_234 = relay.Function([var_174,var_175,var_181,var_182,var_198,var_221,var_225,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
func_234_call = mutated_mod.get_global_var('func_234')
var_236 = relay.var("var_236", dtype = "int32", shape = (1,))#candidate|236|(1,)|var|int32
var_237 = relay.var("var_237", dtype = "int32", shape = (4,))#candidate|237|(4,)|var|int32
var_238 = relay.var("var_238", dtype = "float64", shape = (288,))#candidate|238|(288,)|var|float64
var_239 = relay.var("var_239", dtype = "float64", shape = (7, 1))#candidate|239|(7, 1)|var|float64
var_240 = relay.var("var_240", dtype = "uint32", shape = (7, 4))#candidate|240|(7, 4)|var|uint32
var_241 = relay.var("var_241", dtype = "bool", shape = (7, 4))#candidate|241|(7, 4)|var|bool
var_242 = relay.var("var_242", dtype = "float64", shape = (7, 4))#candidate|242|(7, 4)|var|float64
call_235 = func_234_call(var_236,var_237,var_238,var_239,var_240,var_241,var_242,)
output = call_235
func_243 = relay.Function([var_236,var_237,var_238,var_239,var_240,var_241,var_242,], output)
mutated_mod['func_243'] = func_243
mutated_mod = relay.transform.InferType()(mutated_mod)
var_245 = relay.var("var_245", dtype = "float32", shape = (4,))#candidate|245|(4,)|var|float32
uop_246 = relay.tan(var_245.astype('float32')) # shape=(4,)
uop_248 = relay.sqrt(var_245.astype('float32')) # shape=(4,)
bop_250 = relay.bitwise_xor(uop_246.astype('int32'), relay.reshape(uop_248.astype('int32'), relay.shape_of(uop_246))) # shape=(4,)
uop_253 = relay.asin(bop_250.astype('float64')) # shape=(4,)
output = relay.Tuple([uop_253,])
output2 = relay.Tuple([uop_253,])
func_255 = relay.Function([var_245,], output)
mod['func_255'] = func_255
mod = relay.transform.InferType()(mod)
mutated_mod['func_255'] = func_255
mutated_mod = relay.transform.InferType()(mutated_mod)
var_256 = relay.var("var_256", dtype = "float32", shape = (4,))#candidate|256|(4,)|var|float32
func_255_call = mutated_mod.get_global_var('func_255')
call_257 = func_255_call(var_256)
output = call_257
func_258 = relay.Function([var_256], output)
mutated_mod['func_258'] = func_258
mutated_mod = relay.transform.InferType()(mutated_mod)
var_260 = relay.var("var_260", dtype = "float64", shape = ())#candidate|260|()|var|float64
uop_261 = relay.log10(var_260.astype('float64')) # shape=()
uop_263 = relay.acosh(uop_261.astype('float64')) # shape=()
var_265 = relay.var("var_265", dtype = "float64", shape = (10, 2, 1))#candidate|265|(10, 2, 1)|var|float64
bop_266 = relay.maximum(uop_263.astype('uint64'), var_265.astype('uint64')) # shape=(10, 2, 1)
uop_269 = relay.log2(uop_261.astype('float64')) # shape=()
var_271 = relay.var("var_271", dtype = "float64", shape = (10,))#candidate|271|(10,)|var|float64
bop_272 = relay.less(uop_269.astype('bool'), var_271.astype('bool')) # shape=(10,)
uop_275 = relay.log2(uop_261.astype('float32')) # shape=()
uop_277 = relay.atan(var_260.astype('float64')) # shape=()
uop_279 = relay.log2(var_260.astype('float32')) # shape=()
uop_281 = relay.erf(uop_269.astype('float32')) # shape=()
var_283 = relay.var("var_283", dtype = "float64", shape = (3,))#candidate|283|(3,)|var|float64
bop_284 = relay.bitwise_or(uop_269.astype('uint64'), var_283.astype('uint64')) # shape=(3,)
bop_287 = relay.bitwise_xor(uop_281.astype('int8'), uop_263.astype('int8')) # shape=()
uop_290 = relay.asin(bop_287.astype('float32')) # shape=()
uop_292 = relay.sin(uop_290.astype('float32')) # shape=()
uop_294 = relay.sin(uop_292.astype('float32')) # shape=()
bop_296 = relay.multiply(uop_292.astype('int8'), var_271.astype('int8')) # shape=(10,)
bop_299 = relay.logical_and(uop_294.astype('bool'), uop_275.astype('bool')) # shape=()
uop_302 = relay.sqrt(uop_281.astype('float32')) # shape=()
bop_304 = relay.less(uop_281.astype('bool'), uop_292.astype('bool')) # shape=()
bop_307 = relay.floor_divide(uop_281.astype('float64'), uop_294.astype('float64')) # shape=()
uop_310 = relay.log10(bop_304.astype('float64')) # shape=()
uop_312 = relay.asin(uop_294.astype('float32')) # shape=()
bop_314 = relay.floor_divide(bop_304.astype('float64'), bop_272.astype('float64')) # shape=(10,)
uop_317 = relay.acos(uop_312.astype('float32')) # shape=()
const_319 = relay.const([[[-6.062185,8.610481,-5.243930,-8.683572,-6.297730,-2.685187,-8.161449,1.393689,-4.367293,-1.108063,7.182787,7.027952,0.598848,-3.302446,-6.959239,2.231318],[7.123500,9.048724,-1.469102,5.900731,5.572854,4.800343,-4.598907,2.349689,-9.491271,-7.736615,-9.867050,-9.107928,1.836729,4.574678,-7.098900,-4.612989]],[[-2.333526,9.371816,-8.589952,7.457261,0.520441,8.420921,7.157943,-7.201135,-8.844728,4.501082,-3.240813,-9.863526,5.156895,-0.735561,-2.257737,9.345744],[-1.279788,8.605769,-4.928784,-1.759831,1.320891,0.425270,9.959826,-9.825799,-5.510363,-5.377289,1.971994,-9.959673,4.966529,9.985109,-7.472031,-9.360186]],[[2.993080,2.568376,-2.305061,3.567203,6.831616,-9.045312,-8.095625,-9.021302,-6.893700,-6.032835,-6.901081,-8.987698,4.151789,1.409376,9.798465,-2.125668],[-8.792483,-5.493150,4.032992,-4.433581,-5.218397,9.667883,-2.015963,-5.734953,7.701814,-1.601192,7.550509,5.651620,-7.462192,-0.987736,-8.709253,9.146881]],[[-1.899826,8.035156,7.626446,-3.985531,-3.730538,3.127458,-0.471360,6.060416,-0.756123,4.483873,3.039665,-9.476042,6.489915,1.838941,8.317063,-6.938219],[-5.881206,0.143838,-5.444709,3.707705,-9.723313,5.044697,-2.016497,-3.692694,-1.466834,7.750778,-9.987701,-5.686756,-0.746245,2.624738,-0.488569,-8.168751]],[[2.423058,-7.129253,5.988487,-2.274734,-8.541849,-0.419871,-2.555532,0.010354,-7.898121,-1.592920,-8.181119,8.444903,-1.996813,-5.929555,-9.732114,8.778750],[6.832654,7.407905,-1.572334,-5.910435,3.159931,2.440736,9.026186,0.354065,8.403992,-8.606858,-5.740636,2.287766,-9.558801,2.163646,-2.844609,-2.771560]],[[-9.610432,-5.397661,4.374475,-6.082636,-9.530972,-8.544092,-5.142762,4.847202,-2.204660,-4.452935,6.339488,9.195126,5.184318,3.535053,-0.460772,3.823563],[7.170149,7.403267,-0.246897,-0.438089,6.921975,-8.280162,-6.425623,-9.162983,2.167106,8.619930,-4.450301,-2.908851,0.672080,2.633874,5.188748,-0.700294]],[[-8.288803,4.486052,9.081048,1.306859,4.952480,5.975131,-9.981222,-2.010654,-0.738087,-4.381016,-7.764378,-0.085042,-0.655829,4.073408,1.365000,2.267513],[1.354592,-6.072098,-1.326485,-8.736850,-3.530442,8.555715,4.446465,-6.155379,7.508753,-5.818375,-8.766099,4.914857,-1.369762,-1.804511,-5.394993,7.567005]],[[8.748484,6.120797,-9.606208,0.851241,0.455453,8.851726,-1.244632,-4.694849,-4.980739,5.964159,7.615648,-5.702993,-6.097864,0.848230,-9.907841,-7.463294],[8.736704,4.929098,9.042234,-6.575043,6.935623,7.035469,0.115835,3.068051,-7.034190,-5.261009,6.860200,0.841381,-9.205817,-0.883008,-3.137929,-0.799250]],[[-6.186723,8.716962,-8.364916,-1.532792,6.006227,6.367833,4.933269,-7.157534,3.578621,-1.009365,2.768966,-2.785403,-7.378320,-1.476321,-5.002148,-6.382658],[-8.927734,-4.773921,8.333630,-6.321939,2.966092,-6.258491,-6.133767,-2.175704,7.082254,-4.715924,9.897755,-8.164200,-7.785218,-0.143917,0.120053,9.481902]],[[-6.502164,-5.335493,8.150759,-7.905424,-2.071610,7.070351,2.306007,6.254034,-0.304645,-6.521937,-3.402275,-0.173514,6.549616,0.646001,7.666464,7.508292],[6.599752,-6.576788,-0.199220,0.013416,8.612004,-9.098373,-9.695823,8.782735,3.512434,-3.065184,8.216442,-7.613215,5.923864,0.121626,8.666225,-6.598892]],[[7.117001,6.051299,5.446032,-4.375740,8.783862,-1.398486,-2.222956,9.179805,2.996628,-3.387869,-4.375515,3.253829,-2.754333,-3.769160,9.012042,-9.564409],[6.577891,0.810726,-6.322672,3.871806,-4.536168,-3.209386,-1.827256,-7.403268,1.550232,-2.431302,-0.622319,-0.205090,-0.824440,-2.046633,4.456549,-0.461865]],[[-8.543488,-4.627534,-5.735637,-3.027598,3.391767,1.398514,-7.917091,8.825588,-8.148806,1.822775,0.926539,-9.354867,7.935550,-5.098895,0.355486,2.840923],[-8.809808,6.530289,-7.738904,8.035136,-9.464090,0.969794,-7.859187,-1.294621,-0.373668,0.146258,8.444318,2.299857,-5.935578,-9.546553,2.624190,0.892374]],[[1.041574,-1.218804,2.752263,2.895419,-7.162900,-6.779918,1.255033,-3.505931,3.401342,1.242634,5.767270,9.163761,-5.585605,9.286287,7.298163,2.940548],[1.085419,-0.420434,9.003033,-2.933765,-2.939494,5.558850,-9.502730,2.570500,7.381836,-7.165594,-0.230015,2.631426,3.775830,-5.730432,8.117201,1.450532]]], dtype = "float32")#candidate|319|(13, 2, 16)|const|float32
bop_320 = relay.bitwise_or(uop_317.astype('uint16'), const_319.astype('uint16')) # shape=(13, 2, 16)
const_323 = relay.const([[2.939613,4.106599,-4.374122,2.453123,-7.343925,-9.657633,7.339926,-4.426100],[-4.443864,-9.556252,-4.080654,1.353612,9.179078,9.698069,-3.269203,-4.333944],[5.274397,6.836869,1.930959,8.086901,4.098171,2.551591,-2.292130,-9.528894],[-4.482080,-5.545879,-5.999938,7.871172,-4.074556,3.123452,0.347901,-6.283776],[-1.217640,-9.502422,-3.621162,5.324297,-1.686657,-4.002854,-5.340091,3.206205],[-9.124831,-4.438284,0.879268,-1.371618,-5.292220,-7.783075,0.204068,-0.263854],[-3.272420,7.420830,-6.419683,3.120098,9.019261,7.659112,-9.043541,-9.938733],[-7.005175,3.590553,-7.608261,0.426714,-4.303045,9.237001,-6.259140,8.873496],[-0.206316,-1.544156,3.305045,6.048509,0.707298,-6.919406,6.647233,-7.092847],[5.112203,4.945690,9.544511,-0.336891,3.930711,0.444453,1.100419,-0.059820],[0.822800,1.008796,-3.943088,7.497775,5.465343,1.592230,9.299724,1.650861]], dtype = "float32")#candidate|323|(11, 8)|const|float32
bop_324 = relay.less(uop_294.astype('bool'), const_323.astype('bool')) # shape=(11, 8)
output = relay.Tuple([bop_266,uop_277,uop_279,bop_284,bop_296,bop_299,uop_302,bop_307,uop_310,bop_314,bop_320,bop_324,])
output2 = relay.Tuple([bop_266,uop_277,uop_279,bop_284,bop_296,bop_299,uop_302,bop_307,uop_310,bop_314,bop_320,bop_324,])
F = relay.Function([var_260,var_265,var_271,var_283,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_260,var_265,var_271,var_283,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_260= np.array(-1.625501, dtype='float64')
module1.set_input('var_260', input_260)
input_265= np.array([[[9.962107],[7.049041]],[[-2.791367],[7.933534]],[[5.664402],[-2.944371]],[[-7.693660],[0.111102]],[[-7.516708],[-1.235260]],[[-4.460569],[0.544407]],[[-3.270263],[1.048665]],[[4.061683],[-0.244532]],[[-4.418094],[5.847491]],[[3.344572],[8.697848]]], dtype='float64')
module1.set_input('var_265', input_265)
input_271= np.array([5.265224,8.306152,7.943635,-2.356455,-7.114627,2.158607,8.366198,-1.985328,5.468275,-7.675596], dtype='float64')
module1.set_input('var_271', input_271)
input_283= np.array([8.416526,-1.166414,-2.889461], dtype='float64')
module1.set_input('var_283', input_283)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_260, input_265, input_271, input_283, )
res3 = intrp3.evaluate()(input_260, input_265, input_271, input_283, )
res4 = intrp4.evaluate()(input_260, input_265, input_271, input_283, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
module5.set_input('var_260', input_260)
module5.set_input('var_265', input_265)
module5.set_input('var_271', input_271)
module5.set_input('var_283', input_283)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_260, input_265, input_271, input_283, )
res7 = intrp7.evaluate()(input_260, input_265, input_271, input_283, )
res8 = intrp8.evaluate()(input_260, input_265, input_271, input_283, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
module9.set_input('var_260', input_260)
module9.set_input('var_265', input_265)
module9.set_input('var_271', input_271)
module9.set_input('var_283', input_283)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_260, input_265, input_271, input_283, )
res11 = intrp11.evaluate()(input_260, input_265, input_271, input_283, )
res12 = intrp12.evaluate()(input_260, input_265, input_271, input_283, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
module13.set_input('var_260', input_260)
module13.set_input('var_265', input_265)
module13.set_input('var_271', input_271)
module13.set_input('var_283', input_283)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_260, input_265, input_271, input_283, )
res15 = intrp15.evaluate()(input_260, input_265, input_271, input_283, )
res16 = intrp16.evaluate()(input_260, input_265, input_271, input_283, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
module17.set_input('var_260', input_260)
module17.set_input('var_265', input_265)
module17.set_input('var_271', input_271)
module17.set_input('var_283', input_283)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_260, input_265, input_271, input_283, )
res19 = intrp19.evaluate()(input_260, input_265, input_271, input_283, )
res20 = intrp20.evaluate()(input_260, input_265, input_271, input_283, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
module21.set_input('var_260', input_260)
module21.set_input('var_265', input_265)
module21.set_input('var_271', input_271)
module21.set_input('var_283', input_283)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_260, input_265, input_271, input_283, )
res23 = intrp23.evaluate()(input_260, input_265, input_271, input_283, )
res24 = intrp24.evaluate()(input_260, input_265, input_271, input_283, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()

'''65535,     7,     7,     1, 65533, 65531,     3],

'''