import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "uint8", shape = (16, 12))#candidate|0|(16, 12)|var|uint8
var_1 = relay.var("var_1", dtype = "uint8", shape = (16, 12))#candidate|1|(16, 12)|var|uint8
bop_2 = relay.right_shift(var_0.astype('uint8'), relay.reshape(var_1.astype('uint8'), relay.shape_of(var_0))) # shape=(16, 12)
var_5 = relay.var("var_5", dtype = "uint8", shape = (16, 12))#candidate|5|(16, 12)|var|uint8
bop_6 = relay.bitwise_and(bop_2.astype('int8'), relay.reshape(var_5.astype('int8'), relay.shape_of(bop_2))) # shape=(16, 12)
var_9 = relay.var("var_9", dtype = "uint8", shape = (16, 12))#candidate|9|(16, 12)|var|uint8
bop_10 = relay.minimum(var_5.astype('float32'), relay.reshape(var_9.astype('float32'), relay.shape_of(var_5))) # shape=(16, 12)
var_13 = relay.var("var_13", dtype = "float32", shape = (16, 12))#candidate|13|(16, 12)|var|float32
bop_14 = relay.power(bop_10.astype('float32'), relay.reshape(var_13.astype('float32'), relay.shape_of(bop_10))) # shape=(16, 12)
bop_19 = relay.greater_equal(bop_10.astype('bool'), relay.reshape(bop_2.astype('bool'), relay.shape_of(bop_10))) # shape=(16, 12)
bop_24 = relay.less_equal(var_0.astype('bool'), relay.reshape(var_13.astype('bool'), relay.shape_of(var_0))) # shape=(16, 12)
bop_29 = relay.maximum(var_0.astype('float32'), relay.reshape(bop_10.astype('float32'), relay.shape_of(var_0))) # shape=(16, 12)
bop_32 = relay.power(var_13.astype('float64'), relay.reshape(bop_29.astype('float64'), relay.shape_of(var_13))) # shape=(16, 12)
bop_35 = relay.greater(bop_32.astype('bool'), relay.reshape(bop_19.astype('bool'), relay.shape_of(bop_32))) # shape=(16, 12)
uop_38 = relay.sigmoid(bop_29.astype('float64')) # shape=(16, 12)
bop_40 = relay.floor_mod(uop_38.astype('float32'), relay.reshape(bop_10.astype('float32'), relay.shape_of(uop_38))) # shape=(16, 12)
uop_43 = relay.atanh(uop_38.astype('float32')) # shape=(16, 12)
bop_45 = relay.maximum(uop_38.astype('int64'), relay.reshape(bop_32.astype('int64'), relay.shape_of(uop_38))) # shape=(16, 12)
uop_48 = relay.erf(uop_43.astype('float64')) # shape=(16, 12)
var_50 = relay.var("var_50", dtype = "float64", shape = (16, 12))#candidate|50|(16, 12)|var|float64
bop_51 = relay.logical_or(uop_48.astype('bool'), relay.reshape(var_50.astype('bool'), relay.shape_of(uop_48))) # shape=(16, 12)
bop_54 = relay.add(uop_43.astype('uint64'), relay.reshape(bop_14.astype('uint64'), relay.shape_of(uop_43))) # shape=(16, 12)
output = relay.Tuple([bop_6,bop_24,bop_35,bop_40,bop_45,bop_51,bop_54,])
output2 = relay.Tuple([bop_6,bop_24,bop_35,bop_40,bop_45,bop_51,bop_54,])
func_57 = relay.Function([var_0,var_1,var_5,var_9,var_13,var_50,], output)
mod['func_57'] = func_57
mod = relay.transform.InferType()(mod)
var_58 = relay.var("var_58", dtype = "uint8", shape = (16, 12))#candidate|58|(16, 12)|var|uint8
var_59 = relay.var("var_59", dtype = "uint8", shape = (16, 12))#candidate|59|(16, 12)|var|uint8
var_60 = relay.var("var_60", dtype = "uint8", shape = (16, 12))#candidate|60|(16, 12)|var|uint8
var_61 = relay.var("var_61", dtype = "uint8", shape = (16, 12))#candidate|61|(16, 12)|var|uint8
var_62 = relay.var("var_62", dtype = "float32", shape = (16, 12))#candidate|62|(16, 12)|var|float32
var_63 = relay.var("var_63", dtype = "float64", shape = (16, 12))#candidate|63|(16, 12)|var|float64
output = func_57(var_58,var_59,var_60,var_61,var_62,var_63,)
func_64 = relay.Function([var_58,var_59,var_60,var_61,var_62,var_63,], output)
mutated_mod['func_64'] = func_64
mutated_mod = relay.transform.InferType()(mutated_mod)
var_83 = relay.var("var_83", dtype = "uint64", shape = (13, 15))#candidate|83|(13, 15)|var|uint64
var_84 = relay.var("var_84", dtype = "uint64", shape = (13, 15))#candidate|84|(13, 15)|var|uint64
bop_85 = relay.subtract(var_83.astype('uint64'), relay.reshape(var_84.astype('uint64'), relay.shape_of(var_83))) # shape=(13, 15)
bop_88 = relay.add(var_83.astype('int32'), relay.reshape(bop_85.astype('int32'), relay.shape_of(var_83))) # shape=(13, 15)
var_91 = relay.var("var_91", dtype = "int32", shape = (13, 15))#candidate|91|(13, 15)|var|int32
bop_92 = relay.bitwise_xor(bop_88.astype('uint64'), relay.reshape(var_91.astype('uint64'), relay.shape_of(bop_88))) # shape=(13, 15)
var_97 = relay.var("var_97", dtype = "int32", shape = (13, 15))#candidate|97|(13, 15)|var|int32
bop_98 = relay.floor_divide(bop_88.astype('float64'), relay.reshape(var_97.astype('float64'), relay.shape_of(bop_88))) # shape=(13, 15)
uop_102 = relay.tan(var_91.astype('float64')) # shape=(13, 15)
bop_104 = relay.less(var_84.astype('bool'), relay.reshape(var_83.astype('bool'), relay.shape_of(var_84))) # shape=(13, 15)
bop_107 = relay.floor_divide(uop_102.astype('float32'), relay.reshape(bop_85.astype('float32'), relay.shape_of(uop_102))) # shape=(13, 15)
output = relay.Tuple([bop_92,bop_98,bop_104,bop_107,])
output2 = relay.Tuple([bop_92,bop_98,bop_104,bop_107,])
func_110 = relay.Function([var_83,var_84,var_91,var_97,], output)
mod['func_110'] = func_110
mod = relay.transform.InferType()(mod)
var_111 = relay.var("var_111", dtype = "uint64", shape = (13, 15))#candidate|111|(13, 15)|var|uint64
var_112 = relay.var("var_112", dtype = "uint64", shape = (13, 15))#candidate|112|(13, 15)|var|uint64
var_113 = relay.var("var_113", dtype = "int32", shape = (13, 15))#candidate|113|(13, 15)|var|int32
var_114 = relay.var("var_114", dtype = "int32", shape = (13, 15))#candidate|114|(13, 15)|var|int32
output = func_110(var_111,var_112,var_113,var_114,)
func_115 = relay.Function([var_111,var_112,var_113,var_114,], output)
mutated_mod['func_115'] = func_115
mutated_mod = relay.transform.InferType()(mutated_mod)
var_123 = relay.var("var_123", dtype = "float32", shape = (2, 7))#candidate|123|(2, 7)|var|float32
var_124 = relay.var("var_124", dtype = "float32", shape = (2, 7))#candidate|124|(2, 7)|var|float32
bop_125 = relay.floor_mod(var_123.astype('float32'), relay.reshape(var_124.astype('float32'), relay.shape_of(var_123))) # shape=(2, 7)
output = bop_125
output2 = bop_125
func_128 = relay.Function([var_123,var_124,], output)
mod['func_128'] = func_128
mod = relay.transform.InferType()(mod)
mutated_mod['func_128'] = func_128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_128_call = mutated_mod.get_global_var('func_128')
var_130 = relay.var("var_130", dtype = "float32", shape = (2, 7))#candidate|130|(2, 7)|var|float32
var_131 = relay.var("var_131", dtype = "float32", shape = (2, 7))#candidate|131|(2, 7)|var|float32
call_129 = func_128_call(var_130,var_131,)
output = call_129
func_132 = relay.Function([var_130,var_131,], output)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_134 = relay.var("var_134", dtype = "uint8", shape = (9, 6))#candidate|134|(9, 6)|var|uint8
var_135 = relay.var("var_135", dtype = "uint8", shape = (9, 6))#candidate|135|(9, 6)|var|uint8
bop_136 = relay.right_shift(var_134.astype('uint8'), relay.reshape(var_135.astype('uint8'), relay.shape_of(var_134))) # shape=(9, 6)
var_139 = relay.var("var_139", dtype = "uint8", shape = (9, 6))#candidate|139|(9, 6)|var|uint8
bop_140 = relay.minimum(bop_136.astype('uint32'), relay.reshape(var_139.astype('uint32'), relay.shape_of(bop_136))) # shape=(9, 6)
bop_143 = relay.divide(bop_140.astype('float32'), relay.reshape(var_139.astype('float32'), relay.shape_of(bop_140))) # shape=(9, 6)
bop_146 = relay.add(var_139.astype('float64'), relay.reshape(bop_136.astype('float64'), relay.shape_of(var_139))) # shape=(9, 6)
func_128_call = mod.get_global_var('func_128')
func_132_call = mutated_mod.get_global_var('func_132')
var_150 = relay.var("var_150", dtype = "float32", shape = (14,))#candidate|150|(14,)|var|float32
call_149 = func_128_call(relay.reshape(var_150.astype('float32'), [2, 7]), relay.reshape(var_150.astype('float32'), [2, 7]), )
call_151 = func_128_call(relay.reshape(var_150.astype('float32'), [2, 7]), relay.reshape(var_150.astype('float32'), [2, 7]), )
uop_152 = relay.asinh(bop_143.astype('float32')) # shape=(9, 6)
output = relay.Tuple([bop_146,call_149,var_150,uop_152,])
output2 = relay.Tuple([bop_146,call_151,var_150,uop_152,])
func_154 = relay.Function([var_134,var_135,var_139,var_150,], output)
mod['func_154'] = func_154
mod = relay.transform.InferType()(mod)
mutated_mod['func_154'] = func_154
mutated_mod = relay.transform.InferType()(mutated_mod)
func_154_call = mutated_mod.get_global_var('func_154')
var_156 = relay.var("var_156", dtype = "uint8", shape = (9, 6))#candidate|156|(9, 6)|var|uint8
var_157 = relay.var("var_157", dtype = "uint8", shape = (9, 6))#candidate|157|(9, 6)|var|uint8
var_158 = relay.var("var_158", dtype = "uint8", shape = (9, 6))#candidate|158|(9, 6)|var|uint8
var_159 = relay.var("var_159", dtype = "float32", shape = (14,))#candidate|159|(14,)|var|float32
call_155 = func_154_call(var_156,var_157,var_158,var_159,)
output = call_155
func_160 = relay.Function([var_156,var_157,var_158,var_159,], output)
mutated_mod['func_160'] = func_160
mutated_mod = relay.transform.InferType()(mutated_mod)
var_175 = relay.var("var_175", dtype = "float64", shape = ())#candidate|175|()|var|float64
var_176 = relay.var("var_176", dtype = "float64", shape = (6, 16, 10))#candidate|176|(6, 16, 10)|var|float64
bop_177 = relay.divide(var_175.astype('float64'), var_176.astype('float64')) # shape=(6, 16, 10)
uop_180 = relay.acos(bop_177.astype('float32')) # shape=(6, 16, 10)
bop_182 = relay.floor_divide(bop_177.astype('float64'), relay.reshape(uop_180.astype('float64'), relay.shape_of(bop_177))) # shape=(6, 16, 10)
bop_186 = relay.logical_xor(var_175.astype('int16'), uop_180.astype('int16')) # shape=(6, 16, 10)
uop_189 = relay.sqrt(bop_182.astype('float64')) # shape=(6, 16, 10)
var_193 = relay.var("var_193", dtype = "float32", shape = (6, 16, 10))#candidate|193|(6, 16, 10)|var|float32
bop_194 = relay.multiply(uop_180.astype('uint32'), relay.reshape(var_193.astype('uint32'), relay.shape_of(uop_180))) # shape=(6, 16, 10)
uop_197 = relay.exp(bop_194.astype('float64')) # shape=(6, 16, 10)
var_199 = relay.var("var_199", dtype = "float64", shape = (6, 16, 10))#candidate|199|(6, 16, 10)|var|float64
bop_200 = relay.minimum(uop_189.astype('int8'), relay.reshape(var_199.astype('int8'), relay.shape_of(uop_189))) # shape=(6, 16, 10)
bop_203 = relay.minimum(uop_189.astype('uint16'), relay.reshape(bop_200.astype('uint16'), relay.shape_of(uop_189))) # shape=(6, 16, 10)
output = relay.Tuple([bop_186,uop_197,bop_203,])
output2 = relay.Tuple([bop_186,uop_197,bop_203,])
func_206 = relay.Function([var_175,var_176,var_193,var_199,], output)
mod['func_206'] = func_206
mod = relay.transform.InferType()(mod)
mutated_mod['func_206'] = func_206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_206_call = mutated_mod.get_global_var('func_206')
var_208 = relay.var("var_208", dtype = "float64", shape = ())#candidate|208|()|var|float64
var_209 = relay.var("var_209", dtype = "float64", shape = (6, 16, 10))#candidate|209|(6, 16, 10)|var|float64
var_210 = relay.var("var_210", dtype = "float32", shape = (6, 16, 10))#candidate|210|(6, 16, 10)|var|float32
var_211 = relay.var("var_211", dtype = "float64", shape = (6, 16, 10))#candidate|211|(6, 16, 10)|var|float64
call_207 = func_206_call(var_208,var_209,var_210,var_211,)
output = call_207
func_212 = relay.Function([var_208,var_209,var_210,var_211,], output)
mutated_mod['func_212'] = func_212
mutated_mod = relay.transform.InferType()(mutated_mod)
var_222 = relay.var("var_222", dtype = "float32", shape = (6, 9))#candidate|222|(6, 9)|var|float32
uop_223 = relay.log(var_222.astype('float32')) # shape=(6, 9)
var_228 = relay.var("var_228", dtype = "float32", shape = (6, 9))#candidate|228|(6, 9)|var|float32
bop_229 = relay.logical_xor(var_222.astype('uint32'), relay.reshape(var_228.astype('uint32'), relay.shape_of(var_222))) # shape=(6, 9)
bop_234 = relay.subtract(uop_223.astype('float64'), relay.reshape(bop_229.astype('float64'), relay.shape_of(uop_223))) # shape=(6, 9)
bop_238 = relay.logical_and(uop_223.astype('bool'), relay.reshape(bop_229.astype('bool'), relay.shape_of(uop_223))) # shape=(6, 9)
bop_241 = relay.less_equal(bop_234.astype('bool'), relay.reshape(var_228.astype('bool'), relay.shape_of(bop_234))) # shape=(6, 9)
bop_244 = relay.greater(bop_234.astype('bool'), relay.reshape(var_222.astype('bool'), relay.shape_of(bop_234))) # shape=(6, 9)
uop_247 = relay.sinh(bop_244.astype('float32')) # shape=(6, 9)
bop_249 = relay.equal(bop_241.astype('bool'), relay.reshape(uop_247.astype('bool'), relay.shape_of(bop_241))) # shape=(6, 9)
bop_252 = relay.logical_or(uop_247.astype('bool'), relay.reshape(var_228.astype('bool'), relay.shape_of(uop_247))) # shape=(6, 9)
bop_260 = relay.right_shift(bop_229.astype('int8'), relay.reshape(bop_234.astype('int8'), relay.shape_of(bop_229))) # shape=(6, 9)
var_263 = relay.var("var_263", dtype = "bool", shape = (6, 9))#candidate|263|(6, 9)|var|bool
bop_264 = relay.divide(bop_249.astype('float64'), relay.reshape(var_263.astype('float64'), relay.shape_of(bop_249))) # shape=(6, 9)
bop_269 = relay.left_shift(var_222.astype('uint32'), relay.reshape(bop_260.astype('uint32'), relay.shape_of(var_222))) # shape=(6, 9)
uop_272 = relay.cosh(bop_252.astype('float64')) # shape=(6, 9)
uop_274 = relay.rsqrt(uop_272.astype('float64')) # shape=(6, 9)
bop_278 = relay.maximum(uop_274.astype('uint64'), relay.reshape(bop_264.astype('uint64'), relay.shape_of(uop_274))) # shape=(6, 9)
const_282 = relay.const([[True,False,False,True,True,False,False,True,True],[True,False,True,False,True,True,False,False,True],[True,True,True,False,True,False,True,True,True],[False,False,True,False,True,True,True,False,True],[True,True,False,False,False,False,False,True,True],[True,True,True,False,False,False,True,False,False]], dtype = "bool")#candidate|282|(6, 9)|const|bool
bop_283 = relay.less_equal(bop_241.astype('bool'), relay.reshape(const_282.astype('bool'), relay.shape_of(bop_241))) # shape=(6, 9)
uop_286 = relay.sqrt(uop_274.astype('float32')) # shape=(6, 9)
var_289 = relay.var("var_289", dtype = "float32", shape = (6, 9))#candidate|289|(6, 9)|var|float32
bop_290 = relay.greater_equal(uop_286.astype('bool'), relay.reshape(var_289.astype('bool'), relay.shape_of(uop_286))) # shape=(6, 9)
bop_293 = relay.add(uop_286.astype('uint32'), relay.reshape(bop_260.astype('uint32'), relay.shape_of(uop_286))) # shape=(6, 9)
uop_297 = relay.asin(uop_274.astype('float64')) # shape=(6, 9)
uop_300 = relay.log(uop_272.astype('float64')) # shape=(6, 9)
output = relay.Tuple([bop_238,bop_269,bop_278,bop_283,bop_290,bop_293,uop_297,uop_300,])
output2 = relay.Tuple([bop_238,bop_269,bop_278,bop_283,bop_290,bop_293,uop_297,uop_300,])
func_302 = relay.Function([var_222,var_228,var_263,var_289,], output)
mod['func_302'] = func_302
mod = relay.transform.InferType()(mod)
var_303 = relay.var("var_303", dtype = "float32", shape = (6, 9))#candidate|303|(6, 9)|var|float32
var_304 = relay.var("var_304", dtype = "float32", shape = (6, 9))#candidate|304|(6, 9)|var|float32
var_305 = relay.var("var_305", dtype = "bool", shape = (6, 9))#candidate|305|(6, 9)|var|bool
var_306 = relay.var("var_306", dtype = "float32", shape = (6, 9))#candidate|306|(6, 9)|var|float32
output = func_302(var_303,var_304,var_305,var_306,)
func_307 = relay.Function([var_303,var_304,var_305,var_306,], output)
mutated_mod['func_307'] = func_307
mutated_mod = relay.transform.InferType()(mutated_mod)
const_309 = relay.const([[[-4.408172,-1.617361,-6.693037,9.279423,-5.292897,-1.473767,3.207033,1.058926],[1.540898,6.922572,-4.493322,-4.863584,-1.801081,-0.365149,-7.460714,1.402469],[-6.812038,0.435956,5.966100,3.581173,-4.558846,9.880568,9.463994,9.412655],[-7.312764,-6.775337,6.981192,0.649810,1.696544,-8.407834,1.502555,-5.007538],[4.197649,4.976461,1.959713,-9.671572,-7.186960,1.384402,-3.276175,-6.551980],[6.585300,2.237167,2.938201,1.056732,-9.358003,-0.296810,1.439641,9.777316],[-4.107985,-2.488831,-8.947074,-6.592362,-5.543673,-3.231085,-8.657950,5.864850],[7.477632,-2.364617,-3.217166,-8.696328,5.283767,-2.564208,0.860234,3.175976],[-3.407453,3.777043,8.508577,6.900202,0.940243,-0.632133,-4.129086,-2.649878],[2.538616,-2.311209,-9.067223,-0.833884,-3.611040,-6.028654,0.007790,8.297206],[2.773859,-5.291546,-1.430439,-5.701001,9.925982,-9.141948,3.828482,4.033162],[4.890686,-0.736089,-4.076165,-4.205681,5.322416,3.882139,-1.823127,6.651630]],[[2.120158,-7.961395,1.082149,-7.645833,-4.157716,6.586606,6.747296,-9.064226],[-3.749137,-0.782130,4.552451,5.425294,7.461202,4.755934,-0.649376,-1.673874],[-8.504232,1.616122,4.340658,-2.811676,-6.132914,0.318206,4.612372,8.977812],[-8.404900,-9.608382,-3.243652,4.383080,-8.044316,2.954430,2.592889,4.142286],[0.076561,5.204421,-1.355344,-9.101282,5.321658,-8.614108,8.956006,3.503609],[9.511314,7.177197,2.954028,0.035528,-7.292930,-6.539279,-8.729226,7.611259],[5.888353,2.512473,1.631351,-5.469458,8.410137,8.922071,-4.397435,7.399443],[-1.784415,9.355303,9.777202,-9.819646,-0.746727,8.080347,-0.148897,-3.281587],[7.910723,9.864967,7.710354,-9.567861,-7.447297,4.733536,-1.144240,-2.738404],[1.454688,-7.747593,-4.943102,-2.222924,-1.361722,-6.838366,4.265033,-2.558648],[-1.782392,1.606958,4.154899,-0.132485,8.400543,9.370594,-1.826762,-6.706053],[0.321646,-7.200918,8.576436,-0.863135,-3.511851,-5.291352,3.628001,0.206725]],[[-3.823150,7.480706,-5.749718,6.851885,7.176742,6.161214,-7.329993,-1.411987],[-9.763128,-5.922531,6.129253,9.256285,0.449004,5.303613,-8.679266,-9.435364],[2.823825,0.850901,9.327675,8.327279,3.169826,1.424007,5.335165,3.934703],[-9.438548,7.762724,5.071658,-4.305065,5.434301,6.637289,-2.052387,-5.984755],[-2.143391,3.574083,9.532897,-6.711822,2.888822,-4.459431,7.318992,-9.416505],[8.935226,-8.002226,5.976014,8.742559,-0.389709,-7.264058,-1.493762,2.278072],[-4.450504,4.877385,1.332112,-3.080223,6.496894,5.862281,9.158350,-1.008726],[-4.988195,0.426455,9.773455,-4.343484,8.622766,-5.985759,1.523951,-3.844774],[-4.445350,4.903995,-9.355601,-6.626108,0.953556,-9.436451,-0.118650,7.918045],[3.272168,-3.933283,-4.175898,8.904234,5.865583,8.813100,3.905340,2.382973],[3.711722,4.398171,-5.011538,5.606408,-3.090002,-9.887076,1.057973,9.620619],[-8.397018,8.253992,-1.254692,6.548758,7.044641,-4.162545,-6.026132,-9.545156]],[[1.715640,4.582309,-3.654069,4.648062,3.344272,4.894690,5.562459,6.317436],[-5.138341,-3.973219,1.925933,-1.528613,0.654356,8.859789,-9.055566,7.553364],[-6.221770,-2.080209,-0.258405,8.970047,1.074842,-9.741319,7.688882,9.765166],[-9.554292,-6.135892,4.142422,-7.017929,6.269917,-2.350503,-5.183831,5.365365],[6.710066,9.138660,5.919600,1.339067,7.983392,-7.051336,6.917479,-1.371347],[1.464427,-4.850265,0.547344,4.047396,-3.639921,7.099689,-2.970307,1.940989],[-5.379455,0.101009,0.037516,-5.608409,-8.958967,1.354204,-0.170724,9.835946],[-5.717056,-4.935608,6.441270,5.316957,-3.593698,-2.738682,0.599051,-6.334362],[-3.904970,-5.045539,-1.089312,-3.958116,3.616209,-1.815659,6.250034,7.768991],[7.795219,6.215735,-0.907894,9.623615,8.917400,9.639017,0.145469,-8.589110],[5.872402,-5.053056,-5.508192,-1.445885,-8.215522,4.791281,-8.919520,-3.412984],[0.663914,-4.076575,-9.301348,-2.191241,7.880590,-8.136894,9.400161,-3.011085]],[[2.592935,-1.761207,7.198128,7.980615,4.926055,8.301128,-8.551872,-2.568531],[-6.293710,3.581350,-5.272982,-0.518607,6.558393,-0.899772,-5.413883,5.611876],[7.128760,3.591426,-8.764929,8.606842,8.694408,3.375688,-4.229349,6.433871],[2.626219,7.093277,-4.580046,8.119882,-8.823735,-2.443108,8.333232,6.864407],[9.143788,9.548585,1.891645,-0.678927,-4.894903,-3.152278,7.549688,1.210157],[-4.284662,-1.619640,-1.184891,-3.211501,3.605306,5.852858,-0.305965,-5.108241],[6.682568,6.551247,-6.503475,-4.045632,-9.130395,7.258120,-0.654471,-4.660268],[7.813346,-3.566946,-8.683760,-9.719264,4.008660,-0.151328,-1.127037,-3.892159],[3.998459,8.654502,5.248999,-0.841540,-3.591170,6.078532,-0.373848,-6.935966],[-3.929021,6.973995,9.134805,-2.526766,-7.873016,5.580991,5.427708,-5.002667],[4.694711,-4.932295,2.419710,-2.255602,-6.501512,9.449581,8.093362,-5.043983],[-0.365356,9.604221,-1.825637,-8.689519,-1.069228,9.632006,0.201147,-4.804496]],[[1.061044,3.684312,8.043663,9.421841,3.956557,-4.372682,-9.605991,-1.070243],[1.810974,-4.660734,-2.913776,-8.313710,-9.761899,-5.347821,0.134863,7.487932],[-5.242327,-5.903958,-2.177173,7.747592,-8.244132,6.670521,9.058762,9.649098],[3.019484,-6.474857,-6.144651,-2.741241,-8.858634,1.100489,-7.009369,3.926396],[4.515980,-2.528531,7.250002,-9.893849,-1.629452,-7.649307,4.371199,-6.128167],[3.366495,-2.040537,6.110450,6.084065,-1.416211,8.050746,1.559016,5.405424],[-3.339898,-6.360304,1.848816,9.764107,-0.052255,8.213224,0.966109,-1.218107],[-4.699333,8.164556,-4.798594,-4.327194,2.512976,5.939189,-8.543633,0.651664],[-5.438298,-3.293203,-5.831154,2.331524,7.077367,9.054967,-4.840309,3.395316],[-6.867675,-8.392234,2.020518,3.909032,0.515949,6.087085,8.845825,-7.985983],[2.517343,-2.335817,1.669850,-2.941027,-9.304138,4.016171,-8.374439,-2.328638],[4.473563,3.309426,9.321908,4.927469,0.342742,-8.129068,-4.132507,-8.505952]],[[8.845644,0.881582,5.304865,3.567108,0.910666,-2.878232,1.941003,6.365493],[-1.518218,-7.600812,5.467707,-7.204076,-4.031424,-8.757391,1.900895,-6.716016],[9.414582,7.733058,-0.735470,-2.227445,-3.754603,2.394083,3.735206,-7.082815],[1.633302,5.753151,0.348907,6.635416,-6.911628,-4.382987,-7.924530,-3.300675],[-0.168663,-5.551210,-5.855976,9.023003,-1.790100,0.663464,2.455535,6.535151],[-9.768399,9.050387,-8.093948,4.333658,-2.107943,-6.423326,2.083984,-4.593109],[2.105883,-0.655309,-7.235317,-9.482383,-4.286396,-5.000244,6.218121,-9.626008],[1.044550,5.333801,-4.210634,-7.585230,-2.054132,0.212786,-9.372990,-0.469105],[4.645393,2.087993,-6.249593,-9.399187,7.544909,-3.470744,-8.013343,-5.528642],[-8.342272,1.094723,8.272231,-7.304685,-1.618337,5.393842,0.698113,-0.903207],[-5.055037,-4.824400,9.772822,0.179254,-6.691603,-0.032231,-3.429917,-3.040647],[-1.369417,6.969838,8.052898,-7.107796,8.729634,-2.641912,3.920274,5.373429]],[[7.289939,-6.283434,-3.931783,2.068241,0.180976,5.076025,9.537882,-1.656045],[4.125131,4.732975,5.576615,2.795470,6.479234,-8.275479,-3.670648,-1.154326],[4.407798,9.387609,-9.006892,-4.722125,-0.029540,0.215355,7.245526,0.098831],[2.430490,-6.106586,-2.299038,5.553994,0.633117,-1.724278,-9.524235,7.633898],[0.351773,8.686891,-0.922130,4.121396,-8.130496,-0.564571,2.127119,-7.527953],[-7.850168,1.374281,-1.728021,-2.228017,-7.481537,-6.208268,0.532834,4.335924],[-8.467307,-5.908277,-4.061353,6.363138,-0.355759,7.739115,7.173777,-9.625871],[-0.873229,2.306796,-3.271465,-0.640367,-4.729544,4.842307,0.307487,3.890448],[-3.227482,-8.133491,1.372479,4.134724,4.570196,5.011064,-0.708119,-1.125412],[-8.017720,-7.702797,7.108964,2.543261,2.398974,2.644263,0.490438,-1.455444],[-7.033268,3.071970,-3.632276,7.144117,1.892826,-1.134470,-4.110654,-3.591532],[-6.231678,2.815729,6.138138,-7.143193,-6.886224,1.117450,-1.674949,3.632975]],[[-1.359692,-9.932680,8.711143,-1.639589,4.732755,-1.944793,5.044599,-9.718900],[7.401279,1.680307,-8.161322,9.632465,2.359566,2.423840,-5.721984,-9.685715],[4.276436,0.991208,-8.890636,7.295258,7.824017,9.292286,-0.545900,-4.338619],[-9.767659,-9.043940,4.731592,0.555814,8.546919,-8.701212,1.205004,-8.625427],[-7.276354,9.561711,-2.021063,-1.738681,-3.688213,-3.993749,5.705957,7.463683],[4.786164,-0.008023,3.197227,0.300798,-6.171854,8.675084,6.617552,-7.128159],[7.647475,-1.778186,-6.390092,7.678782,3.727789,7.774308,7.739787,-9.358570],[1.850748,4.625409,-3.204522,3.888628,0.074317,-3.048744,-7.210260,-9.700026],[-7.442829,9.593661,9.372997,7.701277,4.010789,4.721421,3.679403,3.118788],[-1.152942,-0.403356,9.188947,-9.385682,-0.245164,8.263675,9.157653,-6.614218],[3.538862,8.533647,4.398212,4.823136,7.276896,0.221558,-6.742732,1.783804],[3.708347,8.402964,5.676580,2.452432,-3.823730,4.860777,-5.771454,9.599279]],[[0.236970,-3.571228,8.007847,7.961216,-2.383101,-2.988712,3.524804,-2.447211],[3.383018,-0.099279,2.258908,-3.390465,-1.100488,5.591560,2.196860,-2.266947],[4.521129,2.596434,-7.592592,-7.335931,0.160435,1.745160,-2.668881,-4.669753],[0.454833,6.277965,-5.831125,-8.606822,0.547848,-6.612083,-6.893247,7.243377],[8.181439,3.102903,-7.033386,0.209708,-2.721270,-2.939835,-7.729541,-6.334325],[1.534311,-5.278325,7.020700,5.573160,-8.196862,9.134548,-3.570861,6.272289],[-8.374623,-6.201372,-9.216146,-1.904689,-3.557731,8.966868,6.652664,8.196807],[3.002808,6.029407,-2.823480,0.305567,-7.382217,-2.721092,-6.804692,-2.534043],[-7.011899,3.869221,-0.553602,1.643667,-3.831353,3.439301,-3.205075,0.522776],[-2.360914,-0.980119,5.558338,-2.893421,-3.306969,-6.034286,-8.499296,9.678149],[6.164913,8.504239,1.999615,2.904318,0.129305,4.804825,9.419034,-6.814034],[1.590543,-4.417197,-7.814357,-2.674244,4.731802,2.233398,-7.737656,-5.223176]],[[3.482302,5.167996,-6.082953,0.376815,-8.239523,5.687778,7.196565,5.415101],[-0.690958,3.433985,-1.265981,-5.188798,-8.476852,2.622348,-3.435560,8.471941],[1.924020,-8.449556,6.253804,-3.294900,7.178757,9.720896,3.718836,3.244624],[-5.247420,-1.346609,3.971210,3.402063,3.922146,-2.266639,-5.200344,4.889442],[-7.984760,-9.502130,5.418201,8.785362,-8.552226,5.000138,-8.693415,-4.748081],[8.124450,3.890102,8.522832,2.843180,-0.575393,-2.622981,6.117923,-0.492217],[-2.441274,0.584132,2.056227,-9.829099,8.443684,4.760998,-4.430803,-0.859441],[4.149961,-1.452374,-3.571883,4.146659,5.518619,-1.907050,4.894600,2.310069],[2.389156,-9.443957,5.864828,-1.383554,-0.943819,-1.872769,2.000714,0.457372],[8.550310,8.088372,6.228485,-5.277862,2.185033,1.525235,4.387473,-7.199798],[3.270051,-8.220793,7.290424,2.654178,-0.792414,-3.073841,-5.314262,-7.740775],[-9.994941,-4.821552,-7.844835,-1.871044,6.066646,6.697943,-4.396159,2.137859]],[[-5.789245,1.038501,-7.861560,8.592543,-2.349404,3.795559,5.200137,-9.657883],[1.075722,2.426238,8.098105,9.891219,4.430308,-6.332807,-2.313260,3.965594],[5.448612,-6.204768,1.146583,-2.291177,-6.299517,0.986499,-0.399144,7.828330],[-7.993776,3.723784,-4.711554,-1.476568,7.956361,-2.823261,-0.423940,-6.720991],[-4.530611,1.586322,1.079354,5.623226,8.562579,1.489286,5.475951,-1.871667],[-7.267789,1.766851,-0.568664,-7.339774,-2.793522,-4.569996,2.344327,-3.325953],[6.893573,9.476104,-4.768141,-1.546265,4.769792,9.503083,-8.284872,-6.943718],[7.396284,-7.097087,1.374612,-2.292812,9.579149,-4.124429,7.034627,-0.652014],[1.332594,9.729935,-7.373877,6.381592,-7.193170,-8.548279,-9.209373,8.993584],[0.554466,-2.317278,-9.860762,-1.930174,4.051886,-2.081467,-5.865556,4.973228],[5.213964,9.464055,8.842580,8.153721,0.611816,-1.062907,3.415780,2.446813],[7.524993,3.161374,-1.914394,7.850794,6.043698,9.346316,-4.569888,7.197998]],[[8.332014,-6.089923,4.104694,-0.054033,9.939178,4.913413,-2.260457,7.455908],[-0.800370,-1.934361,2.381238,-1.156857,3.722274,-4.054184,-6.802092,6.630701],[-0.202596,-4.521407,-8.403694,-6.886672,-6.724751,-3.395974,-0.020010,-6.624049],[-5.471404,-0.357698,1.867274,-5.563682,-2.028795,-5.551464,-6.481434,-3.771671],[2.907601,1.833166,-1.381375,-9.112469,2.862945,6.478397,-2.718904,-6.779939],[-5.773276,-1.232329,0.262746,2.946960,8.998308,-1.385572,9.728794,-8.865154],[-4.602843,-2.042306,7.533616,1.144555,7.191464,9.359928,-8.327281,1.817690],[-8.475610,-3.187279,-9.482407,7.595282,-7.629003,-7.977353,-0.270601,-3.859828],[-2.879270,1.931861,7.322717,-1.503463,-0.616970,8.131185,8.862527,6.618845],[-0.475331,7.280323,3.593829,4.475346,-6.433537,-0.561272,-0.987774,4.274289],[0.516395,1.695092,4.958899,-4.477254,0.689460,3.826335,-2.514086,-0.725658],[-4.924563,0.113286,-2.632203,4.789718,-5.278458,5.449711,2.201428,3.872272]],[[-1.419547,2.874831,-0.424598,5.377583,0.771584,-8.069469,8.250724,4.464126],[-1.950598,-7.603915,1.543345,-4.607145,9.274337,-1.064952,-3.249985,2.891567],[-9.407535,1.038527,-7.803629,-6.169365,9.325287,8.217964,0.782335,-0.221770],[-6.858297,-6.214921,1.493196,7.917649,8.960148,9.816737,-2.380190,-2.281396],[0.822671,3.423143,-8.697128,-1.591812,2.522020,-7.964817,-7.280365,-8.454647],[9.396101,-3.749891,1.738897,7.406899,1.154497,5.387651,-1.747993,0.971826],[2.779480,0.651110,-9.999459,8.298417,-2.866312,1.716332,-0.214887,7.497897],[-4.088208,-7.721224,7.114320,-7.509555,-3.797216,-1.372234,7.600669,6.078626],[2.142581,-8.660987,-0.818491,2.859287,-0.080721,9.223705,-6.372179,-7.098887],[-4.720280,9.148849,6.059068,-2.414007,9.757437,-0.213105,-5.744963,2.827243],[-0.515252,-1.931937,8.775375,8.102674,-6.212994,-4.260148,7.364279,8.731429],[-6.342574,-2.147946,5.029765,9.634898,6.894484,1.036472,4.441924,8.696612]]], dtype = "float32")#candidate|309|(14, 12, 8)|const|float32
uop_310 = relay.rsqrt(const_309.astype('float32')) # shape=(14, 12, 8)
uop_312 = relay.exp(uop_310.astype('float64')) # shape=(14, 12, 8)
func_110_call = mod.get_global_var('func_110')
func_115_call = mutated_mod.get_global_var('func_115')
const_317 = relay.const([-9,-1,6,10,-9,-9,7,-1,9,2,9,-7,4,7,3,9,4,-2,-4,-2,-1,6,-9,10,6,-6,-4,5,-1,9,-4,-5,8,9,-2,-5,-1,8,-9,-8,10,10,-10,-5,-7,4,1,-10,-9,-1,7,1,-6,-10,7,9,-3,-5,-4,-4,3,2,9,4,-10,-6,-8,7,-6,-10,4,-2,10,1,-6,-7,-5,2,3,-10,1,-2,-3,-5,-3,-1,6,-5,9,-2,-1,3,-10,-7,-10,-5,-5,2,-5,6,-1,6,-10,-6,7,3,5,-3,10,-7,9,3,-9,1,-1,-4,5,2,3,4,5,9,3,4,-3,8,-5,7,6,-9,-8,1,-3,7,-2,7,6,7,7,5,-4,-6,-3,-2,5,-8,-6,-4,-6,4,-2,7,-6,-9,6,7,-6,1,-7,10,6,-5,-9,-1,2,4,8,-1,-6,9,4,-3,10,2,7,-1,2,-5,-9,-7,-4,2,-10,6,3,7,-3,10,4,-1,5,-4,-2,-9,5], dtype = "uint64")#candidate|317|(195,)|const|uint64
call_316 = relay.TupleGetItem(func_110_call(relay.reshape(const_317.astype('uint64'), [13, 15]), relay.reshape(const_317.astype('uint64'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), ), 3)
call_318 = relay.TupleGetItem(func_115_call(relay.reshape(const_317.astype('uint64'), [13, 15]), relay.reshape(const_317.astype('uint64'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), ), 3)
bop_319 = relay.greater_equal(uop_310.astype('bool'), relay.reshape(const_309.astype('bool'), relay.shape_of(uop_310))) # shape=(14, 12, 8)
bop_322 = relay.subtract(uop_312.astype('int32'), relay.reshape(const_309.astype('int32'), relay.shape_of(uop_312))) # shape=(14, 12, 8)
const_325 = relay.const([[[2.502822,4.362193,-5.186889,2.149442,-8.443470,-7.210975,1.504281,3.811812],[-2.284340,-1.052810,4.849793,-4.873323,-8.308005,-3.975891,-4.866464,3.832784],[0.635153,1.174011,8.061780,-5.238195,7.137843,-9.767264,3.103616,3.035501],[9.615843,9.739472,0.896038,-0.561221,4.057451,2.869886,5.207392,8.048648],[7.045415,-6.088834,3.836860,1.256447,8.057653,-8.041021,2.589093,3.902408],[2.792795,-1.625328,-1.756936,-3.271209,0.762950,9.738351,-7.205388,4.945075],[8.293509,6.624323,-4.925851,4.354088,-1.510652,-5.268275,0.242334,-6.212152],[-4.080709,7.241613,-1.857069,-2.908199,6.421641,-2.085048,6.440463,-2.122287],[7.771839,9.841966,-1.554169,-7.394302,-1.948027,-4.484530,-1.143804,-1.558879],[2.208898,3.124846,3.682230,-2.296731,9.227977,4.049035,-2.473120,6.412310],[3.176575,-9.615634,-4.252416,-3.140666,4.249583,-7.487655,7.756026,8.422558],[6.331862,-0.459006,-2.594122,9.521589,2.521704,-0.450515,-7.765929,-6.010278]],[[4.737151,1.672505,3.455084,-5.847341,4.961382,-1.294018,-0.090105,1.113568],[-3.429171,-7.999029,-1.023838,-2.944343,-0.476738,-4.781710,-5.983205,-2.249526],[4.377540,9.131526,3.610992,2.587039,7.724547,-0.994401,1.950784,9.243319],[5.387316,3.581913,2.177959,-6.360807,-0.334180,4.694891,9.035567,-2.233666],[0.410793,3.582802,-4.058872,8.312972,-5.798119,6.639491,-9.675127,5.487902],[-1.481210,5.437090,-8.244912,-6.062227,-8.526697,7.720894,3.572409,-1.858767],[-0.397314,-4.594841,2.313956,-8.785042,7.492644,2.472782,-8.708992,5.201434],[7.047367,-3.340916,-3.552270,2.586773,-4.033963,-9.303627,-4.481590,0.565165],[-1.522274,6.153599,5.157732,9.389078,5.981037,-5.547603,0.676107,7.384506],[7.548697,-8.389625,-0.409799,-7.359708,1.692087,-0.413893,-5.741396,-2.055075],[9.335308,-8.139173,5.310689,3.641964,-0.817820,-4.951565,-9.216304,5.736815],[3.244752,1.727696,3.487067,7.825576,1.632274,-4.053140,3.674475,-3.914903]],[[1.993067,1.436012,2.014609,4.222021,3.801692,2.474801,3.525684,3.479847],[6.874690,-9.581520,-3.678444,8.976293,-4.256107,6.456592,-5.805105,-3.635550],[-8.772515,-5.354434,1.216319,-3.937708,9.839372,-1.269889,-1.937377,0.947258],[-8.386497,-2.460956,6.099449,-3.838595,1.124034,5.156214,-3.372741,8.611418],[-7.485094,-9.353780,-0.181275,-3.781906,-8.407262,-5.353783,-5.967994,-5.943978],[-3.047255,0.885432,-9.459102,1.813389,-8.199691,7.913940,-5.482197,4.513843],[-6.097089,-9.895470,-9.342444,-1.463818,9.649443,8.006955,7.583829,3.375545],[-4.756726,5.549865,-5.768371,1.450337,-4.893470,5.061118,5.906403,2.182893],[-6.138875,-5.617515,-4.286837,-3.538582,-7.776493,2.078383,4.828930,7.070767],[1.996503,7.888062,7.139853,-8.337677,4.942566,-8.716363,2.863561,4.700830],[-0.755848,-6.284873,-3.410118,-8.986603,7.356314,-5.196944,-4.578399,-5.901948],[4.232712,-9.024701,-1.858626,-9.754308,-3.234505,8.188912,-1.530404,-5.942365]],[[-5.038753,3.868942,1.172725,7.319907,8.154051,2.946677,8.971961,8.505544],[1.003505,3.210960,2.528733,-6.528436,0.167171,8.574861,-4.789491,-7.832704],[-9.653390,3.324792,5.309038,-5.363025,9.672714,2.564650,-5.832225,7.486442],[-6.740425,5.812384,-2.310207,9.316718,7.318140,3.861323,-3.049936,1.361583],[2.275849,-6.545023,0.232074,1.538577,9.146231,-1.979662,9.548454,0.766539],[-6.894064,6.048181,-2.064749,-9.138870,4.444698,7.626756,4.884230,4.192402],[-8.806134,-7.568020,-6.650997,-2.244783,-2.169412,0.246552,-8.858312,7.796168],[-5.521773,8.393251,9.176131,-6.439679,3.744853,2.534078,-9.774086,0.214974],[-5.621508,6.398654,5.657509,-2.371007,-5.592320,7.669417,2.745194,0.063295],[-3.419059,-6.680360,8.264227,-3.793101,3.219855,8.413273,-9.365833,-2.843689],[-5.177418,-4.012830,2.393321,7.145475,-7.418771,-2.240473,2.311815,1.768732],[-8.068647,-5.992360,2.624840,-2.844433,-6.133147,-5.342630,-5.166346,0.772520]],[[-5.568232,-6.620521,3.284725,5.714693,-7.820533,3.500620,-1.740258,0.293686],[-4.510990,-8.819275,9.901319,-6.261830,-5.867103,-2.332628,5.687423,-0.791328],[0.650594,2.965798,-3.761988,5.894306,-2.363865,6.220705,6.966103,2.234633],[-9.141968,7.936100,-2.310337,0.828121,2.174284,2.770035,1.719775,-6.872409],[-2.789190,2.723777,6.484003,-3.739194,9.205453,-7.443987,-9.865685,7.455932],[8.632134,-5.987446,-0.821900,-2.915219,-8.723094,7.979055,1.680085,-3.951112],[7.168475,8.098187,-4.759348,9.405768,0.737657,1.789158,6.493258,-3.353467],[2.543517,3.054967,-7.657960,8.232324,7.174509,-1.884510,7.795444,8.442369],[2.359617,1.100339,-2.051923,7.050114,-6.044992,0.213003,2.869455,-6.679765],[3.302885,6.386058,1.947401,-4.863585,2.869106,-2.284914,6.527045,2.888638],[-6.366694,2.381661,0.920015,-5.543281,9.744364,-4.859015,7.644817,4.672610],[-7.586516,-7.719864,-5.504249,-2.473914,9.452279,-3.156008,-7.620252,8.697525]],[[-3.191903,5.510010,-9.129178,5.727079,-1.790629,-0.835784,-7.834623,-0.049326],[-1.699745,-0.922853,7.579907,-4.563752,3.065162,4.005072,8.674745,-1.398322],[9.119417,5.233214,0.095020,7.937529,-6.879366,3.229885,-2.686124,2.701097],[-9.847050,8.435571,6.899853,3.035623,-4.427675,-8.001639,9.158683,9.587489],[6.007166,-1.267576,3.500679,-4.382570,-5.651393,-0.542623,6.623590,6.663977],[0.264699,8.365679,7.284445,-3.878585,1.921464,7.023031,8.984223,-2.077874],[3.613566,-2.146145,-2.453476,2.558811,-9.993781,1.740019,2.618980,-7.372656],[7.010663,2.485725,-4.773961,-6.489014,7.878194,-8.148314,-2.090758,7.489926],[-8.815466,-4.007203,-3.296507,6.434685,2.807089,-3.904273,3.520249,-6.665284],[-0.806881,2.474390,6.088184,-8.656574,4.343633,6.755424,8.216727,-2.029854],[-1.217105,7.083214,-0.729690,-8.135774,5.825208,-0.223767,8.196022,-8.030283],[7.106692,-9.182600,3.524230,8.657243,1.484697,9.276325,2.223384,-2.940550]],[[-3.727179,-7.077960,-2.231199,5.949655,5.592308,3.448284,-4.852573,-7.129484],[1.363889,-1.257628,7.420079,-5.684246,-2.408147,-2.046927,4.811677,-1.668231],[-2.969658,-5.270805,4.472102,-3.265903,8.689810,4.515467,0.946271,5.662018],[-0.230853,-9.387652,9.470123,-9.441846,-2.495418,3.550985,-4.690397,3.668740],[-8.397078,2.565582,9.468922,-3.389927,3.276662,-8.756125,2.238485,-8.246307],[0.958684,-7.520584,4.380467,1.085672,1.433059,4.718486,-8.706813,-5.382803],[-9.796431,-7.141638,6.984660,-2.342219,-9.055737,-0.600206,3.746116,7.336177],[8.094056,7.563383,-1.791924,-1.770575,-7.199807,4.857586,-5.912030,4.347038],[-3.868388,4.331725,9.160277,-8.409559,-8.230168,6.760569,3.375946,1.373656],[-1.504924,4.557639,5.695158,-7.562620,3.464500,-4.632181,0.810151,-5.515600],[7.132032,-6.987408,-2.352407,-4.437588,9.681243,-3.679760,-7.818608,0.195061],[-7.083811,0.159695,-4.427191,5.106016,-4.796914,2.061822,-4.520829,2.081779]],[[7.465198,-2.317699,-5.455980,8.481318,-6.840296,8.709218,6.221726,-7.786750],[2.595329,8.000969,5.655874,-8.670026,-7.886078,-7.696694,8.151788,-2.570237],[7.694436,-8.265960,3.608030,8.118468,2.789414,-2.487243,6.858696,5.406919],[-9.936096,-5.772858,1.942140,8.518967,-1.563735,-0.639631,6.611821,9.157295],[9.077385,6.748144,8.042368,7.198997,1.133942,9.453808,-1.332805,4.860556],[0.686776,-0.793435,-9.098654,-7.183789,2.404592,3.075626,6.159851,8.912539],[-5.626199,2.818111,5.714769,2.438953,-7.394261,0.580872,3.912716,1.567063],[-0.540210,5.691197,-5.958500,-2.065378,1.250272,-4.123736,-3.890361,5.337790],[-8.797607,-7.431593,4.976330,-0.117443,-7.416459,-7.942317,5.982914,-2.899180],[-3.457793,-0.121779,9.593358,-4.434496,-8.996329,7.018400,7.073225,-0.985417],[8.510240,4.892782,-7.275450,-3.729622,-7.139548,-9.683766,-5.778511,8.976439],[-5.607480,6.112424,-2.696038,-0.170448,2.655170,5.114410,2.003161,-8.864022]],[[-9.031215,4.919620,-6.627325,5.063284,0.503382,-3.266006,-6.859870,-9.058813],[6.912120,-1.965336,2.911770,6.900388,-1.516617,1.679959,-9.978606,-9.022191],[-0.359731,7.368774,3.703194,7.776653,-7.765675,6.596326,7.281494,3.795806],[7.360357,4.484136,6.744044,7.726702,9.348654,7.096039,4.606508,9.963992],[8.221094,-5.867646,8.854713,9.753786,1.668503,2.078400,-6.439825,1.090286],[-2.792814,9.301243,5.030381,-3.913308,1.259230,-0.336453,6.491090,-1.197008],[-9.009747,-8.977176,-1.360541,1.999001,-8.757825,4.609325,-1.720505,-7.046674],[7.672521,-6.632691,4.962104,8.045262,-3.206794,5.552377,3.099296,-5.443985],[-1.859984,-0.696328,5.102651,-4.472259,-6.262904,-0.168949,-2.267298,1.112760],[-7.951108,5.089027,-6.235255,6.102752,-8.568163,1.351268,-0.926685,-4.612855],[-6.981312,-8.729791,-2.429595,4.465767,-2.095089,2.868218,-7.824291,-2.845873],[-9.335411,-0.469669,-3.939705,6.589125,-2.362996,3.354008,1.585296,6.144466]],[[-8.678600,8.123083,-6.667045,2.776318,-5.301724,-3.377381,6.524525,-6.843160],[-2.483464,7.410329,-9.327830,1.610197,1.412419,1.635394,-4.771382,-3.477181],[-5.826022,-7.891734,-6.376623,1.582953,-2.776699,3.341639,-1.572569,-7.458692],[7.359695,-5.265864,-3.147232,-6.935857,-4.533890,-8.127378,3.115652,7.950306],[-1.995505,-2.755261,9.937956,-6.291229,8.687531,6.692691,8.067818,-9.091550],[6.897416,-8.071604,2.028260,3.219978,-8.834227,-7.757246,-4.076860,-3.030606],[3.436818,4.381146,-6.192405,7.358365,-8.868665,-5.059077,-4.231436,-9.129138],[7.476769,8.349558,3.654238,-3.624489,5.885529,3.608176,-6.469260,-1.881311],[6.971080,-0.509541,5.497227,9.248215,-0.726195,4.948624,0.407291,3.242119],[-7.418328,5.020750,6.741826,-3.268967,-7.897860,2.031300,3.767411,9.898445],[1.730257,-8.423692,1.766471,-7.410159,3.963816,-3.075175,2.806641,0.783022],[-5.389222,-3.474676,-3.262252,-0.598888,-9.181962,5.092931,-2.762149,-2.018094]],[[-7.469287,-2.492658,8.532348,-8.201275,3.333609,3.444575,-9.670737,-0.487480],[7.890487,-9.907931,1.550964,-0.846628,-1.747130,0.621191,-8.800562,6.897092],[5.411884,-0.089074,-0.143590,3.277761,3.036822,0.594058,-1.179975,9.590931],[-9.459876,2.437919,-3.280988,6.101337,-0.578506,9.307713,4.726076,9.452222],[2.196529,4.501163,-6.436013,2.720600,3.715839,8.862299,-5.690313,1.587525],[1.457856,7.892879,-7.047335,-8.580866,6.356687,-3.891094,-4.164192,6.409745],[2.018751,-7.642908,-4.663213,-1.633334,-5.986128,8.541797,-4.683926,7.702380],[8.405879,8.566194,0.510788,-5.341726,-1.602703,8.123604,5.199687,-1.705531],[3.664644,-7.631140,-7.702081,6.452700,2.323513,9.872442,5.175871,8.415849],[1.058825,8.921798,-3.098321,-3.233165,-1.045503,-7.023542,-5.988507,-5.249565],[9.752967,1.813455,0.581337,-1.980755,9.810620,-0.295596,-2.943398,-4.522661],[1.265299,-1.184576,5.695276,-5.494272,8.547387,5.969968,2.658528,1.222465]],[[3.230013,-0.173690,-7.282552,7.924937,-2.813068,-7.589208,6.215390,0.498606],[-0.441911,-4.122955,-5.649612,2.717539,2.394579,7.307397,8.754202,6.252213],[-2.967385,2.973244,-8.252452,-8.228427,8.077534,5.005193,4.867080,5.281310],[9.838933,-7.874556,-5.561399,1.839151,-1.352075,-8.177430,2.194472,-8.585129],[5.561246,-4.380692,-6.012509,-9.712687,-6.406846,-6.787411,-4.143788,6.740716],[-7.138767,2.512730,-1.043188,-8.400467,-7.250061,-0.428357,7.592955,6.554721],[-3.073524,-3.380440,-2.523807,-0.652442,2.166585,7.010010,-0.867606,0.166226],[-6.917274,0.468195,5.959940,3.653357,-2.019674,6.668913,8.492652,-8.856078],[5.269888,-0.472247,-2.659958,-2.229200,-7.120038,8.356218,-8.008903,8.314672],[-2.473002,0.339941,-8.899037,7.639411,-8.647042,-8.419587,3.499892,-4.846755],[-0.423918,-1.050775,7.868784,-4.375483,-4.796300,4.088195,-8.438792,2.108948],[1.258419,-3.966162,-5.826139,8.813535,-8.415730,-5.686784,-4.221751,-0.830433]],[[5.192792,3.004519,7.412135,-4.519114,-5.767294,7.976974,-3.312668,1.579540],[5.966846,-8.298640,5.666017,6.310393,9.668047,1.439015,-4.947356,-1.404215],[-3.844709,-9.651754,0.261462,-1.576802,-2.068588,-9.333772,-2.011257,3.882955],[2.656170,1.755023,6.612894,2.467709,-8.664681,-0.050953,-8.826407,1.772866],[6.889251,0.611204,-3.435204,-0.486215,7.211000,-5.229689,-9.602606,2.093264],[5.419139,-7.122579,2.949634,5.379020,-3.161102,-8.432991,6.764607,9.933648],[-2.378493,1.873778,-4.539878,0.133668,7.447606,-9.873524,2.103892,4.430506],[-3.025169,0.790786,6.298694,-0.436719,9.440610,8.316317,-4.116364,5.958518],[6.765739,1.599050,-3.980148,3.872475,-3.856038,8.691572,3.058741,-6.242555],[-4.849607,-1.758517,7.558780,1.903671,4.362975,2.091710,9.044013,-3.372783],[3.883050,3.921941,5.766336,6.300871,-4.062953,2.292399,-6.700108,5.899023],[-4.218797,-6.531968,-9.523082,-4.230832,-2.570583,0.701748,-6.028745,-3.076276]],[[-9.572631,9.836536,-3.728841,8.673761,2.026953,5.490664,6.834301,-0.347207],[-2.021176,3.859988,-7.896441,-7.030837,3.609280,-2.956754,-4.078187,1.892762],[-9.356231,-3.880648,-4.056429,7.455646,-1.496953,8.649897,-5.079336,3.683929],[-9.772468,4.561646,-7.128639,-5.630840,-1.867450,9.725205,9.245619,8.447277],[5.410585,8.681236,7.875183,2.258312,7.941623,5.335653,-9.698035,-3.397416],[5.613292,4.931556,4.006270,7.085360,9.917364,-1.473636,-1.897107,-9.418594],[2.945983,4.618193,2.833461,2.132506,5.172547,-9.014242,8.650186,-6.646302],[-9.130016,5.173406,4.954616,0.021218,9.791722,-1.329609,8.384996,-5.741771],[-2.074092,-5.665672,-2.028361,-8.371490,-2.491250,-2.210585,3.928253,7.074545],[-1.392937,2.963735,2.651538,-6.777811,0.932713,-5.922744,-9.268802,5.752082],[-4.456100,-5.551201,4.313331,-0.338697,4.050901,-1.388758,-9.644379,-6.645176],[-1.617554,-2.041433,3.891714,-8.761385,1.779377,1.711037,5.244913,-6.244926]]], dtype = "float64")#candidate|325|(14, 12, 8)|const|float64
bop_326 = relay.left_shift(uop_312.astype('int64'), relay.reshape(const_325.astype('int64'), relay.shape_of(uop_312))) # shape=(14, 12, 8)
bop_329 = relay.left_shift(const_317.astype('int16'), relay.reshape(call_316.astype('int16'), relay.shape_of(const_317))) # shape=(195,)
bop_332 = relay.left_shift(const_317.astype('int16'), relay.reshape(call_318.astype('int16'), relay.shape_of(const_317))) # shape=(195,)
var_333 = relay.var("var_333", dtype = "int32", shape = (14, 12, 8))#candidate|333|(14, 12, 8)|var|int32
bop_334 = relay.power(bop_322.astype('float32'), relay.reshape(var_333.astype('float32'), relay.shape_of(bop_322))) # shape=(14, 12, 8)
uop_337 = relay.sinh(bop_326.astype('float64')) # shape=(14, 12, 8)
uop_339 = relay.log2(bop_334.astype('float64')) # shape=(14, 12, 8)
bop_341 = relay.mod(bop_319.astype('float64'), relay.reshape(bop_322.astype('float64'), relay.shape_of(bop_319))) # shape=(14, 12, 8)
bop_344 = relay.add(uop_339.astype('float64'), relay.reshape(uop_310.astype('float64'), relay.shape_of(uop_339))) # shape=(14, 12, 8)
bop_347 = relay.bitwise_and(bop_334.astype('uint8'), relay.reshape(bop_319.astype('uint8'), relay.shape_of(bop_334))) # shape=(14, 12, 8)
uop_351 = relay.log(uop_337.astype('float64')) # shape=(14, 12, 8)
uop_353 = relay.acosh(uop_351.astype('float64')) # shape=(14, 12, 8)
func_154_call = mod.get_global_var('func_154')
func_160_call = mutated_mod.get_global_var('func_160')
var_356 = relay.var("var_356", dtype = "uint8", shape = (1, 54))#candidate|356|(1, 54)|var|uint8
const_357 = relay.const([-7.164159,2.036026,2.397856,4.019482,-7.737837,6.769804,7.862995,0.437568,-2.195869,8.955108,8.354207,0.379687,-0.643666,-7.042044], dtype = "float32")#candidate|357|(14,)|const|float32
call_355 = relay.TupleGetItem(func_154_call(relay.reshape(var_356.astype('uint8'), [9, 6]), relay.reshape(var_356.astype('uint8'), [9, 6]), relay.reshape(var_356.astype('uint8'), [9, 6]), relay.reshape(const_357.astype('float32'), [14,]), ), 1)
call_358 = relay.TupleGetItem(func_160_call(relay.reshape(var_356.astype('uint8'), [9, 6]), relay.reshape(var_356.astype('uint8'), [9, 6]), relay.reshape(var_356.astype('uint8'), [9, 6]), relay.reshape(const_357.astype('float32'), [14,]), ), 1)
var_359 = relay.var("var_359", dtype = "float64", shape = (14, 12, 8))#candidate|359|(14, 12, 8)|var|float64
bop_360 = relay.logical_or(uop_351.astype('bool'), relay.reshape(var_359.astype('bool'), relay.shape_of(uop_351))) # shape=(14, 12, 8)
bop_363 = relay.logical_and(uop_353.astype('bool'), relay.reshape(bop_322.astype('bool'), relay.shape_of(uop_353))) # shape=(14, 12, 8)
bop_366 = relay.logical_xor(bop_363.astype('uint64'), relay.reshape(uop_353.astype('uint64'), relay.shape_of(bop_363))) # shape=(14, 12, 8)
const_375 = relay.const([[[-2.888326,1.597587,-0.253990,4.839883,1.069035,0.534785,9.602395,-0.497429],[-8.021996,8.796535,8.965871,2.729834,-0.069662,1.482966,-1.515423,2.452893],[5.113599,-0.911326,8.391218,-9.656533,8.208107,-4.156086,0.177089,0.151523],[-7.226440,1.844401,-9.732508,9.221238,-6.880266,4.647106,-7.899372,-1.162551],[6.238061,9.881679,-3.564877,3.532450,-7.818300,-5.151247,-1.603786,5.592830],[-0.141495,-8.286800,4.807823,-8.617346,-2.283300,7.519681,-2.825428,7.424667],[-9.200635,-7.486738,-0.316457,1.461715,0.913959,-4.141879,0.329906,-0.209993],[-9.460655,-7.039902,3.894307,-4.566941,-9.911535,-7.565895,5.012576,-4.557503],[-9.397731,-1.426751,-0.465692,4.033879,-4.335894,6.278826,-1.742682,5.109222],[9.710740,-6.761100,-8.929438,-2.800582,-0.123672,6.038007,-6.375918,-1.038133],[-8.850844,-1.014342,-8.350500,2.435604,3.410880,-3.892216,-4.947438,1.097041],[-4.626974,-5.065057,-2.676606,8.245605,8.127197,-0.970454,6.893979,9.150164]],[[3.193598,-1.261306,8.024099,-2.507430,8.802155,-7.895187,4.696198,9.654218],[-5.988328,-1.661926,-4.806990,4.639466,0.110727,-5.410444,-3.716587,-1.628517],[1.653905,0.400860,-5.305094,8.100152,5.081898,-6.496629,1.019007,-8.244219],[9.516294,-7.417248,-9.866778,-8.640290,4.703607,-8.481573,-5.557674,-0.785481],[-0.612001,-7.038171,5.240976,-4.949527,-0.537559,7.930085,-0.301551,8.293676],[1.600014,8.474227,2.307700,2.899193,-9.050410,9.486829,-7.762250,-3.304481],[3.328283,-5.496889,4.543521,6.496605,3.153258,2.726603,-3.324836,6.510480],[5.573428,-6.208277,-6.803723,4.097415,1.541082,1.772854,-3.717570,-6.288159],[9.033161,6.989794,7.134649,-1.792190,9.074161,-6.083557,-9.064685,0.172958],[0.897971,-2.490768,6.200453,-3.005513,-7.847068,2.610914,-9.127547,7.656830],[-6.013787,-0.747007,1.432040,-9.941060,-3.425169,8.761483,-6.282595,-2.002390],[-2.282995,-2.449331,4.724747,-7.547738,-4.408319,-4.127555,-9.009289,-5.686027]],[[-8.222160,-5.658324,7.007027,4.964445,-7.820642,-9.473016,8.794867,-6.557389],[-4.710345,-6.585384,3.407477,8.080522,-1.557846,-9.602143,2.033235,0.979483],[6.738360,-4.589852,-5.367551,6.322670,-9.921630,9.879060,-3.836106,5.459758],[-1.085151,-9.818846,-2.466016,-4.372384,-3.397261,8.554104,3.558416,5.925518],[4.108472,-4.882179,9.585736,-0.365824,2.135243,-0.589085,5.952623,-1.875488],[8.870439,8.035630,3.975401,-1.419127,2.860957,3.018914,-0.515696,2.374445],[-5.931781,5.673365,8.469559,4.025343,6.375154,1.326988,4.549580,2.938659],[-6.346393,5.731917,-1.357386,8.806916,3.885777,-4.139361,-5.751089,0.726485],[2.956096,-0.406893,-4.129544,-7.667636,7.829115,-8.518815,8.327924,6.195972],[6.808501,8.272670,-2.554250,6.156058,-7.349272,6.639986,2.825758,2.820493],[6.784162,-5.228398,-5.119351,-5.860173,-2.613250,-0.079601,-5.486967,6.453029],[-8.471040,1.074764,-8.819745,7.245183,-3.299571,7.560763,0.909521,2.402102]],[[-1.911684,6.775511,-8.975697,7.651267,-9.974170,-2.656300,1.257658,-1.142383],[3.699198,9.831121,-1.837625,-3.902867,5.151915,9.254901,-7.297562,-5.998397],[-9.475418,0.243331,2.483812,7.931298,8.241049,-6.493174,8.149636,-6.652987],[-9.909438,-6.776455,-9.330573,9.784732,-3.272136,7.244683,7.494647,-0.226348],[0.956921,-0.215519,-0.854760,-8.730148,-7.454097,-3.077131,-5.063871,-3.897285],[-7.765184,9.476814,8.064735,6.163313,0.588686,-2.561501,-9.981412,-6.624009],[8.738638,-3.797694,-3.461699,8.751756,5.010249,6.501533,-3.595529,-9.966492],[-9.866893,-7.115899,-5.300135,-0.394304,-4.512481,9.712860,4.745125,-6.723332],[-6.386312,-6.580355,6.455609,1.077326,0.257466,-2.433419,-1.043356,8.062073],[8.720908,-1.278788,4.085597,5.514108,-9.237375,-6.092546,2.849885,-5.943063],[9.438545,-2.214709,-5.680170,3.406825,-9.290383,9.419318,-2.469054,-8.089553],[-5.161265,5.547879,5.423572,5.954656,1.667166,1.407602,-1.388241,7.622315]],[[-7.157489,6.176744,9.792280,-3.933601,-0.695227,6.976705,-3.927941,-3.061027],[-9.463681,-1.843047,6.913812,0.126368,3.349831,9.275478,-2.690348,2.773010],[-0.136437,0.936118,8.087408,-0.596649,-3.767791,-0.504450,5.262225,7.832265],[6.313891,2.983739,-0.802233,1.673686,2.712003,8.037313,3.937060,-9.996426],[9.331506,-8.172281,0.050822,6.501898,-9.011150,3.740644,-8.470356,3.147182],[-8.454761,-7.797877,-5.240434,9.037723,-4.279615,1.082943,9.624515,-2.309033],[-7.060295,-4.495117,4.661004,8.026403,1.903803,6.301825,7.826938,6.611725],[4.558970,-7.259586,-0.032707,6.798247,8.369170,-2.949905,-5.469628,8.602120],[2.108157,-9.247099,7.942569,-3.975795,-6.063715,4.248157,7.160792,-6.392813],[-0.794204,-5.899831,-6.684753,-5.803573,-0.709726,-8.276629,4.770458,1.377011],[3.956484,0.234510,3.453397,-7.419987,6.539840,-5.829623,-9.782354,9.565972],[0.224302,1.901728,7.828060,4.196581,5.194769,-1.679985,-3.184743,4.021132]],[[4.259466,-7.192255,8.660255,9.059289,-0.593456,1.626366,-4.018825,-8.062599],[-5.152731,8.435066,7.850564,4.850870,-6.462888,8.665973,-3.767899,7.852053],[4.723796,-5.819458,-3.760206,2.991398,6.321696,0.766311,5.070557,-7.928585],[-1.419670,2.487860,-2.425738,-1.804056,-0.952457,9.626487,-7.757691,-7.046263],[6.581602,-1.214612,-5.053776,-1.320177,-5.831681,7.991108,2.917220,0.933319],[9.136779,7.986810,-6.103365,3.200510,9.738660,0.709266,6.496775,7.548897],[-9.114925,-7.960605,2.751401,0.443534,-6.614550,2.817220,-7.810197,0.344932],[7.622668,3.597430,-9.495022,-1.607588,-2.565387,-7.553576,-9.614719,-1.361740],[5.723323,7.978723,3.179407,2.113789,-8.612427,-1.728651,2.114472,-4.068046],[-7.777281,-2.539154,-5.212425,3.243691,-6.406443,-3.918602,6.352280,-8.581400],[6.138996,-2.302480,-6.965202,3.307900,-9.193950,1.283228,2.009763,6.702819],[1.587446,3.215916,-0.678724,-6.427836,-6.979452,6.365926,4.734397,-9.678296]],[[-3.936779,-7.950009,-4.884359,8.075748,4.178244,2.630764,-1.989610,-8.213362],[-4.387515,-3.796472,-4.289805,-9.340459,1.659172,0.666828,3.431731,-5.464182],[-1.893386,-3.127661,-6.001852,9.504536,-3.509365,-8.543589,6.528800,-9.518201],[-6.483456,9.847485,-3.042504,0.709989,7.606016,-5.716807,0.360963,-9.679424],[3.534584,-7.200602,-3.285772,2.092099,-8.343834,-9.304877,5.015971,-2.251181],[4.109317,-9.861452,3.755371,0.117788,-1.246132,6.338512,-8.986907,1.654656],[-8.101575,9.939292,-0.069737,1.884101,8.743318,-5.751728,-9.853719,-3.856756],[-5.646201,4.468981,7.199963,5.609611,4.591146,5.048489,-0.863140,1.525515],[-6.791717,-0.817162,-6.830499,-1.091548,9.403116,-0.398603,9.215778,9.127227],[6.255501,8.388896,7.771134,7.235045,5.446616,3.652932,5.093149,-5.973081],[7.305801,-5.148655,-9.824725,1.431734,-9.736942,3.802113,6.552169,7.272397],[-6.060787,7.093292,0.230037,-9.049151,2.761313,7.574637,-9.345766,-5.861861]],[[-5.473852,3.535661,6.963411,-4.190410,-3.273280,4.328323,-2.874815,9.522379],[7.917931,-2.117831,5.685895,5.979826,-5.254792,4.628009,-0.534415,7.748221],[1.639517,5.289960,6.135511,-3.786166,-5.015543,6.920596,-9.084799,7.557902],[3.436842,0.877242,-2.404679,0.592283,6.831142,8.460537,6.169170,-5.859398],[-1.194167,3.781418,4.643078,2.859391,-9.960725,-8.383166,9.980892,-9.569088],[3.976991,6.186531,9.902880,3.656301,-9.110137,-3.238602,9.139536,-2.615075],[3.747233,0.116519,0.911061,-5.508767,-0.430920,-3.890651,-0.954789,-5.244548],[-6.672979,7.786754,4.599758,-6.402487,8.993355,1.508951,8.584237,-7.613791],[8.584939,3.123412,8.509391,-2.188425,-6.133667,6.071926,-2.826500,0.264196],[-9.150483,-1.530532,4.571746,0.422730,2.353752,5.932788,-1.370565,4.869593],[7.496714,-3.218119,-2.658154,-0.517433,0.457273,3.551508,-2.385601,2.841705],[3.504490,-9.740545,-7.887619,-7.658786,-9.344397,6.590778,3.098635,-9.589364]],[[9.733102,8.475620,-5.609072,5.136020,-0.725685,1.658077,6.606785,7.251916],[-7.559983,0.260058,5.950554,-2.409057,4.515555,-5.666323,9.773146,7.498327],[6.064037,-9.097510,9.879925,2.632823,0.864441,-7.677547,0.694991,4.521986],[2.936455,5.454349,-0.644749,-0.708536,5.169048,9.850487,4.328445,2.992752],[6.084509,-1.148421,1.130350,-8.880395,-2.372039,4.148477,-2.345312,7.560625],[9.172857,-9.187625,8.011175,2.800443,1.771641,6.638237,-8.596365,2.535725],[-9.128843,-3.405453,-1.943246,-8.207789,1.627950,-4.513312,0.815844,6.148641],[-8.757281,-8.561037,-8.100325,-4.185289,-8.536076,-7.780628,7.427442,7.430669],[-3.889285,4.289178,-1.451271,1.751407,-8.967001,-0.459998,-5.345084,-7.104980],[7.967197,-7.635816,2.318693,-0.634074,-3.091476,-6.046548,-0.808162,3.471075],[3.953234,3.366129,0.056038,3.880334,6.748054,4.719579,0.703069,-9.316696],[-7.044463,-3.987510,-4.994834,-6.479430,0.031155,-6.470867,-5.251715,-5.293555]],[[-4.944624,2.146034,4.342386,8.516685,-2.423899,-3.675641,1.204868,0.946442],[0.871848,1.219591,-1.212253,-7.282469,-6.178125,7.069483,-1.034591,-3.237369],[-0.131103,-9.751191,-8.410593,-2.385191,-8.022519,-3.487078,1.830994,-3.748586],[1.807504,-1.352947,1.380004,8.162617,2.283532,-2.033269,0.970553,7.288281],[-9.348224,8.325096,2.463788,-6.261951,-3.513596,9.242113,-6.209934,-4.460328],[4.200481,9.480122,6.518198,-4.371611,8.009065,-1.786782,9.197421,-9.401521],[-7.772969,-1.200625,7.832612,5.599229,7.601046,-3.631294,-7.363581,4.920045],[0.921549,-1.858138,-9.981277,-3.724379,8.104995,-5.791119,-1.007614,9.498573],[-6.091141,-9.808640,-5.978161,4.170018,2.218759,0.513263,-7.176887,9.535313],[4.330810,-5.279428,6.814762,3.855780,6.338061,7.287586,5.950656,-4.057019],[4.622750,6.978871,7.834329,1.122654,-1.247387,-5.477698,-6.138452,0.991793],[-9.356366,6.336692,-7.556219,-5.034670,-2.910492,0.472713,-8.058804,8.415978]],[[-0.182015,0.881851,2.728225,-1.761276,1.847039,-5.601381,7.391886,8.437331],[5.652314,1.443020,-3.606488,5.236779,7.495050,-3.003204,9.020802,4.370219],[-1.603874,6.375655,-8.210462,-6.378833,-8.710122,8.714127,-4.975196,4.634665],[7.106078,6.021702,2.397298,-1.373394,2.460434,-9.375825,-2.725852,-6.007774],[1.254912,-9.406171,-0.087000,3.070948,0.187777,-6.986902,-3.883182,3.939036],[-4.680007,7.199128,9.397340,-8.515194,-0.946948,8.786632,9.453392,0.093376],[6.300476,-4.280893,-0.987064,8.524393,-6.645874,8.487808,5.321218,-3.709183],[8.109786,9.629076,5.459714,2.505307,4.422241,-1.627093,1.276324,6.250954],[3.117594,-3.883148,7.839676,0.702753,0.169604,-0.346446,0.764136,-1.914760],[-4.051058,6.020564,0.285463,8.354376,-8.149986,0.212466,-3.634910,-7.978765],[-8.207670,5.419867,-0.189875,1.179215,-4.485741,0.607393,-8.819945,-4.406973],[0.457432,-0.590301,6.188185,8.974224,7.367559,8.494224,4.242622,3.890939]],[[-4.070940,-0.765238,0.035353,-7.048885,1.835547,4.159255,8.946047,3.548657],[-9.649072,1.422609,6.762065,4.564514,-1.738504,-7.133049,-9.636181,2.912395],[1.297011,-4.184101,-9.472277,-0.235507,-0.506623,9.855728,8.569178,-7.870507],[9.503750,6.509265,2.820823,6.568577,2.210736,8.042813,-1.281444,-1.766137],[-6.265505,-9.483690,9.644019,1.920737,6.335555,8.471276,7.505056,-7.536855],[-8.533097,8.691084,-3.235999,9.512964,8.918480,2.329234,4.911527,4.032130],[-4.289955,-9.234497,-1.765393,7.668597,6.997830,-1.890407,1.806888,4.258054],[1.918063,3.998982,1.382084,5.225378,2.943023,-1.731906,2.378645,5.252496],[-6.750387,6.176431,9.530988,-4.737672,-2.558754,5.132328,1.850198,0.441999],[4.132988,-2.116723,9.088464,2.828107,-6.284655,8.538907,4.589640,-2.793707],[0.578031,-9.830623,-8.655137,4.418399,-1.047918,-6.729076,3.104971,-0.832969],[-7.351820,1.270835,-8.169927,2.537659,6.890976,-8.781243,1.488201,-6.400605]],[[2.729925,8.191902,2.880159,-4.113841,9.885758,0.841585,-5.022737,9.873477],[-1.267438,-1.381454,-7.499877,6.115701,-6.926420,-5.678552,-3.128078,-5.367328],[-5.035931,-5.578685,-7.757709,8.972025,3.476585,-6.489323,-8.855302,9.118553],[9.473629,2.100882,4.427449,2.755766,8.469095,5.097972,-6.690654,2.201936],[0.897914,-2.012331,-0.695650,4.485922,-1.292798,1.616881,1.049099,4.523487],[-5.317013,-3.588383,3.621830,2.528507,-7.062921,8.813977,4.337873,4.501598],[-8.451024,-4.451572,8.344704,-2.185868,-1.213823,-9.875669,-5.964861,-2.966441],[-7.089175,-4.070415,-7.314846,-4.799286,-5.723544,4.691068,-4.037007,-0.147763],[-3.206750,5.522487,-3.579366,0.427970,7.949980,8.930864,6.350859,-1.845587],[-7.039491,1.483051,8.375108,6.493008,8.625282,9.075684,7.898130,-0.453054],[-9.446969,8.926735,-1.606036,0.993198,-3.881379,7.691345,-6.285981,-6.000304],[7.423842,8.915738,4.983478,-4.501127,6.221596,6.097641,-2.003751,-2.801869]],[[4.340988,6.161385,-5.532966,-7.244922,9.894796,-6.861649,8.543233,3.114203],[1.116375,6.327068,7.381628,6.481034,1.217555,-3.919832,4.332067,4.712458],[-8.835363,-2.682973,5.831210,-2.788777,-7.640235,3.931264,3.080356,-1.559656],[3.527148,0.546686,-8.556841,-8.067103,5.942383,3.052506,0.272502,-5.428189],[4.441594,9.258831,7.468850,-1.836463,-8.096112,9.522418,-3.976199,-9.095222],[-9.616727,-6.304068,8.792840,-0.811659,3.229390,9.177922,-4.324714,6.163411],[-3.161279,6.660808,-1.686737,1.433366,9.531194,-9.807666,9.686770,6.414097],[-6.795246,-9.828240,-6.611506,9.624795,-3.742191,0.406840,-8.495198,-0.165785],[8.994490,-1.201664,6.936346,-8.998159,-6.562486,-2.685398,-4.276856,2.588839],[-0.790552,-5.077794,5.313223,-4.653600,-8.277390,-7.813727,-0.043673,1.625675],[-0.686237,4.584626,5.349628,-2.725123,-8.213439,8.487113,2.695529,-0.491144],[-4.810701,-4.098252,-9.391783,9.523660,-4.625304,9.551322,2.276435,-2.149189]]], dtype = "float64")#candidate|375|(14, 12, 8)|const|float64
bop_376 = relay.maximum(uop_353.astype('int8'), relay.reshape(const_375.astype('int8'), relay.shape_of(uop_353))) # shape=(14, 12, 8)
uop_379 = relay.tan(uop_337.astype('float64')) # shape=(14, 12, 8)
bop_382 = relay.bitwise_xor(bop_344.astype('int16'), relay.reshape(bop_319.astype('int16'), relay.shape_of(bop_344))) # shape=(14, 12, 8)
uop_385 = relay.erf(uop_353.astype('float32')) # shape=(14, 12, 8)
func_302_call = mod.get_global_var('func_302')
func_307_call = mutated_mod.get_global_var('func_307')
call_389 = relay.TupleGetItem(func_302_call(relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('bool'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), ), 7)
call_390 = relay.TupleGetItem(func_307_call(relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('bool'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), ), 7)
func_57_call = mod.get_global_var('func_57')
func_64_call = mutated_mod.get_global_var('func_64')
var_392 = relay.var("var_392", dtype = "uint8", shape = (192,))#candidate|392|(192,)|var|uint8
call_391 = relay.TupleGetItem(func_57_call(relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('float32'), [16, 12]), relay.reshape(var_392.astype('float64'), [16, 12]), ), 5)
call_393 = relay.TupleGetItem(func_64_call(relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('uint8'), [16, 12]), relay.reshape(var_392.astype('float32'), [16, 12]), relay.reshape(var_392.astype('float64'), [16, 12]), ), 5)
bop_394 = relay.floor_mod(uop_385.astype('float32'), relay.reshape(bop_322.astype('float32'), relay.shape_of(uop_385))) # shape=(14, 12, 8)
var_397 = relay.var("var_397", dtype = "float64", shape = (14, 12, 8))#candidate|397|(14, 12, 8)|var|float64
bop_398 = relay.bitwise_or(uop_353.astype('int8'), relay.reshape(var_397.astype('int8'), relay.shape_of(uop_353))) # shape=(14, 12, 8)
uop_401 = relay.log(uop_379.astype('float32')) # shape=(14, 12, 8)
var_403 = relay.var("var_403", dtype = "float32", shape = (14, 12, 8))#candidate|403|(14, 12, 8)|var|float32
bop_404 = relay.logical_xor(uop_385.astype('int32'), relay.reshape(var_403.astype('int32'), relay.shape_of(uop_385))) # shape=(14, 12, 8)
uop_408 = relay.log10(bop_363.astype('float64')) # shape=(14, 12, 8)
func_302_call = mod.get_global_var('func_302')
func_307_call = mutated_mod.get_global_var('func_307')
call_411 = relay.TupleGetItem(func_302_call(relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('bool'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), ), 4)
call_412 = relay.TupleGetItem(func_307_call(relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), relay.reshape(var_356.astype('bool'), [6, 9]), relay.reshape(var_356.astype('float32'), [6, 9]), ), 4)
func_110_call = mod.get_global_var('func_110')
func_115_call = mutated_mod.get_global_var('func_115')
call_413 = relay.TupleGetItem(func_110_call(relay.reshape(call_316.astype('uint64'), [13, 15]), relay.reshape(bop_329.astype('uint64'), [13, 15]), relay.reshape(bop_329.astype('int32'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), ), 1)
call_414 = relay.TupleGetItem(func_115_call(relay.reshape(call_316.astype('uint64'), [13, 15]), relay.reshape(bop_329.astype('uint64'), [13, 15]), relay.reshape(bop_329.astype('int32'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), ), 1)
var_415 = relay.var("var_415", dtype = "float64", shape = (14, 12, 8))#candidate|415|(14, 12, 8)|var|float64
bop_416 = relay.logical_xor(uop_379.astype('uint64'), relay.reshape(var_415.astype('uint64'), relay.shape_of(uop_379))) # shape=(14, 12, 8)
uop_420 = relay.sin(uop_353.astype('float32')) # shape=(14, 12, 8)
func_110_call = mod.get_global_var('func_110')
func_115_call = mutated_mod.get_global_var('func_115')
call_422 = relay.TupleGetItem(func_110_call(relay.reshape(call_316.astype('uint64'), [13, 15]), relay.reshape(call_413.astype('uint64'), [13, 15]), relay.reshape(call_316.astype('int32'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), ), 0)
call_423 = relay.TupleGetItem(func_115_call(relay.reshape(call_316.astype('uint64'), [13, 15]), relay.reshape(call_413.astype('uint64'), [13, 15]), relay.reshape(call_316.astype('int32'), [13, 15]), relay.reshape(const_317.astype('int32'), [13, 15]), ), 0)
bop_424 = relay.bitwise_or(uop_420.astype('uint8'), relay.reshape(uop_379.astype('uint8'), relay.shape_of(uop_420))) # shape=(14, 12, 8)
bop_427 = relay.divide(bop_398.astype('float32'), relay.reshape(uop_401.astype('float32'), relay.shape_of(bop_398))) # shape=(14, 12, 8)
bop_431 = relay.subtract(bop_398.astype('uint32'), relay.reshape(var_403.astype('uint32'), relay.shape_of(bop_398))) # shape=(14, 12, 8)
uop_435 = relay.asin(uop_420.astype('float64')) # shape=(14, 12, 8)
output = relay.Tuple([bop_329,bop_341,bop_347,call_355,var_356,const_357,bop_360,bop_366,bop_376,bop_382,call_389,call_391,var_392,bop_394,bop_404,uop_408,call_411,call_413,bop_416,call_422,bop_424,bop_427,bop_431,uop_435,])
output2 = relay.Tuple([bop_332,bop_341,bop_347,call_358,var_356,const_357,bop_360,bop_366,bop_376,bop_382,call_390,call_393,var_392,bop_394,bop_404,uop_408,call_412,call_414,bop_416,call_423,bop_424,bop_427,bop_431,uop_435,])
func_438 = relay.Function([var_333,var_356,var_359,var_392,var_397,var_403,var_415,], output)
mod['func_438'] = func_438
mod = relay.transform.InferType()(mod)
mutated_mod['func_438'] = func_438
mutated_mod = relay.transform.InferType()(mutated_mod)
func_438_call = mutated_mod.get_global_var('func_438')
var_440 = relay.var("var_440", dtype = "int32", shape = (14, 12, 8))#candidate|440|(14, 12, 8)|var|int32
var_441 = relay.var("var_441", dtype = "uint8", shape = (1, 54))#candidate|441|(1, 54)|var|uint8
var_442 = relay.var("var_442", dtype = "float64", shape = (14, 12, 8))#candidate|442|(14, 12, 8)|var|float64
var_443 = relay.var("var_443", dtype = "uint8", shape = (192,))#candidate|443|(192,)|var|uint8
var_444 = relay.var("var_444", dtype = "float64", shape = (14, 12, 8))#candidate|444|(14, 12, 8)|var|float64
var_445 = relay.var("var_445", dtype = "float32", shape = (14, 12, 8))#candidate|445|(14, 12, 8)|var|float32
var_446 = relay.var("var_446", dtype = "float64", shape = (14, 12, 8))#candidate|446|(14, 12, 8)|var|float64
call_439 = func_438_call(var_440,var_441,var_442,var_443,var_444,var_445,var_446,)
output = call_439
func_447 = relay.Function([var_440,var_441,var_442,var_443,var_444,var_445,var_446,], output)
mutated_mod['func_447'] = func_447
mutated_mod = relay.transform.InferType()(mutated_mod)
var_454 = relay.var("var_454", dtype = "float32", shape = (10, 14, 13))#candidate|454|(10, 14, 13)|var|float32
uop_455 = relay.tan(var_454.astype('float32')) # shape=(10, 14, 13)
bop_458 = relay.not_equal(var_454.astype('bool'), relay.reshape(uop_455.astype('bool'), relay.shape_of(var_454))) # shape=(10, 14, 13)
func_438_call = mod.get_global_var('func_438')
func_447_call = mutated_mod.get_global_var('func_447')
const_462 = relay.const([-10,5,6,-6,-2,2,6,-3,5,3,-7,-4,8,-3,5,-9,-8,-2,6,-7,-8,-2,-2,-7,7,3,-6,-4,-2,-9,9,-9,-4,-3,1,-9,-8,5,8,-9,1,8,8,-4,-1,7,-10,-6,9,5,9,1,6,9,8,-8,1,8,8,-2,-4,-10,7,-1,5,-8,-9,-4,-5,-1,-5,1,3,-7,-1,1,-10,-2,-6,3,8,-8,10,-3,6,-7,-3,9,8,-6,-7,-4,7,-3,-10,4,10,6,3,7,5,2,-4,1,-7,1,-5,10,-3,-3,-3,-1,-9,5,6,5,7,9,-8,-5,9,-10,5,6,-5,10,-8,-1,8,10,7,7,-3,-7,-9,8,2,-2,-8,-4,-9,-2,-7,-3,8,-3,1,1,8,-6,4,-5,-2,3,5,-4,4,-1,-7,-8,-10,-2,-2,-4,2,-7,2,3,1,3,-3,-2,10,-8,8,4,8,8,10,2,9,-8,-3,6,-9,10,5,1,-5,-4,6,10,5,-5,9,-7,-7,1,10,-2,6,2,-3,-7,-1,-1,1,2,1,-3,5,1,6,1,-9,4,-6,5,9,-10,-4,-7,4,3,7,8,-7,-3,10,1,-7,-5,3,-2,3,-3,5,-4,-1,6,4,-9,2,-5,4,-2,-1,3,6,-6,-9,7,-1,3,-7,-8,-3,-1,-9,-7,-2,-3,5,-7,-5,-1,-4,-10,-7,-6,4,-7,-1,1,-7,-2,-7,-2,-4,5,-5,-6,5,3,9,-8,5,9,6,-7,-6,1,-7,8,-3,-1,-1,7,-2,-2,2,-3,7,-3,10,5,-1,1,-1,-7,4,-5,4,-3,-4,7,-4,3,2,6,5,10,-10,-2,-2,9,1,-2,-8,3,-1,6,-3,-9,-4,-7,-6,5,-7,-1,9,8,-4,5,7,-3,-8,-6,-9,-4,-9,2,-7,3,5,7,-4,4,-5,-9,4,-3,-3,3,-3,3,-9,7,-5,2,-2,5,-5,-3,7,5,6,-6,-6,-8,-6,-10,9,1,-6,3,-3,4,-7,-8,-1,-6,10,5,-10,4,-4,-1,10,7,6,-5,-8,8,-10,-10,1,7,9,-7,4,5,6,3,9,-3,9,5,-9,-3,-3,-9,10,-6,-7,-9,6,9,1,9,1,6,-10,-7,6,-9,6,3,-5,6,4,2,-9,-2,-6,-2,-1,-7,9,-3,8,6,-9,10,10,5,-3,-1,-2,5,-2,-3,3,-7,5,-1,-1,5,-8,3,4,1,6,10,-5,-6,-1,-3,10,-9,1,8,-9,-3,1,-4,-3,-10,6,-7,-6,9,1,-4,-3,7,-4,-7,7,9,-3,3,-9,5,5,-8,6,-10,1,-9,6,-10,9,3,-5,-6,-9,-6,-3,6,6,1,-3,-8,-3,-1,-1,9,-10,9,-9,6,3,-8,5,-4,-6,-3,-6,-3,6,-7,-7,-8,-3,4,2,-1,4,-3,1,-1,4,6,-5,-8,5,9,-4,-2,-5,-10,-6,4,-10,10,6,-10,5,2,-9,10,-6,9,-7,-8,5,9,-10,-3,4,6,7,2,-6,-4,3,-10,-5,10,9,-6,9,-10,-10,1,-8,-4,5,-9,-10,-7,-10,-5,-7,9,-4,-2,10,-2,-5,-4,4,-8,-4,1,1,-1,6,-6,-1,-10,-9,8,4,-8,4,4,10,6,-10,-9,6,3,-6,-6,-3,-1,-9,-10,10,-6,9,-4,-1,-4,9,1,5,-9,3,7,-10,-8,9,5,-7,-4,8,-9,10,9,9,7,6,-3,9,-6,-8,1,-6,7,-5,4,-10,-2,4,-10,-3,-7,10,9,9,10,2,7,8,-1,-6,6,-6,6,10,-5,2,-4,-1,6,8,1,7,-8,-3,-8,4,5,-10,1,7,-5,-9,5,-1,4,-7,1,-3,1,-8,5,2,-1,10,-4,-10,-10,-9,-1,-6,-2,-9,10,-10,10,-1,9,4,6,1,-3,-1,2,-7,-2,9,9,7,-2,10,4,-6,5,-2,-5,2,-6,2,5,-2,-6,3,8,5,-6,1,-6,-2,8,3,6,3,2,-1,-7,-6,-5,6,-8,3,-6,3,-1,7,10,3,7,2,-1,8,8,-1,-2,8,8,1,8,-9,2,8,-8,-10,9,6,-4,8,-6,-7,-5,-8,6,10,5,3,-5,-1,-4,-10,2,-10,10,-10,-6,5,-2,4,-2,2,-4,-7,5,-6,9,-1,1,9,1,8,-6,9,-7,6,9,-9,2,-6,5,8,-7,7,4,9,-7,3,9,-3,-8,8,-6,2,4,-7,-1,5,5,6,-7,-5,2,-2,-3,-9,-4,8,-5,-10,-2,8,-3,1,-4,-9,4,9,-3,8,4,7,-4,9,-9,10,7,3,2,2,-3,-9,5,4,7,-6,-9,10,-9,-5,-10,-8,-3,-9,-8,-1,1,9,-7,6,5,4,6,-9,3,-3,-9,1,5,8,-2,4,8,1,-8,-9,8,7,9,1,10,-4,5,2,7,3,1,-3,3,-6,1,-4,-1,5,6,2,9,4,1,-6,-8,-8,-8,-7,6,-4,9,8,-8,9,-8,-10,7,3,-2,8,9,8,-8,-2,10,-1,-5,-8,1,-7,-8,-8,-2,5,-1,5,-3,-1,8,7,-9,-7,-7,-7,6,-9,-2,-1,9,8,1,4,-6,6,6,4,-2,-10,-7,9,-3,-10,-7,-9,9,8,9,-5,-7,-9,-2,10,3,3,1,7,-8,6,8,-4,3,6,-4,-6,-1,5,9,7,7,6,-10,1,10,7,-5,4,3,-9,-2,-7,4,-6,9,-9,-3,-6,7,-5,7,4,3,9,7,-2,-4,10,2,3,1,-10,6,-1,3,2,10,-1,2,-6,7,6,6,1,3,-1,-7,-3,7,10,2,2,-5,-4,1,6,9,-1,-7,4,8,8,-6,-2,3,-5,-1,-6,7,3,-1,8,-10,-4,1,9,-3,7,-6,-2,-1,5,-1,-8,2,-8,10,-10,5,7,1,-9,5,-4,5,1,1,7,8,2,-7,-10,6,-9,-5,9,4,-2,4,-9,2,-6,-7,-8,-8,-4,1,-4,-5,8,-9,8,4,2,8,8,1,-6,7,-1,2,-10,9,-10,8,6,6,3,-8,10,6,7,-2,-4,-4,-3,-2,1,-10,-10,10,8,-2,8,5,5,7,-9,-2,1,-9,4,9,7,-6,-10,2,4,8,-5,1,-4,-1,-1,-7,-1,-7,10,-10,-9,-3,-3,-6,1,1,9,-6,-2,8,-10,-8,-1,-5,4,9,10,-2,-7,1,6,-3,-4,10,6,3,-10,6,-7,4,4,5,-3,10,9,9,-3,-10,1,-7,7,2,1,1,-7,-1,6,7,-5,3,-8,9,7,10,-9,-5,-7,6,-7,7,-1,6,-6,-9,10,7,4,-9,5,-9,8,-3,-2,-4,7,2,-4,5,3,-3,8,1,7,-3,3,9,7,-6,-2,-10,6,6,2,7,9,-8,-1,-9,1,1,1,5,3,-6,4,5,-10,7,6,7,8,-2,-4,-7,10,-9,9,10,-7,-10,-4,2,-10,4,-5,-1], dtype = "int32")#candidate|462|(1344,)|const|int32
var_463 = relay.var("var_463", dtype = "uint8", shape = (54,))#candidate|463|(54,)|var|uint8
var_464 = relay.var("var_464", dtype = "uint8", shape = (192, 1))#candidate|464|(192, 1)|var|uint8
call_461 = relay.TupleGetItem(func_438_call(relay.reshape(const_462.astype('int32'), [14, 12, 8]), relay.reshape(var_463.astype('uint8'), [1, 54]), relay.reshape(const_462.astype('float64'), [14, 12, 8]), relay.reshape(var_464.astype('uint8'), [192,]), relay.reshape(const_462.astype('float64'), [14, 12, 8]), relay.reshape(const_462.astype('float32'), [14, 12, 8]), relay.reshape(const_462.astype('float64'), [14, 12, 8]), ), 14)
call_465 = relay.TupleGetItem(func_447_call(relay.reshape(const_462.astype('int32'), [14, 12, 8]), relay.reshape(var_463.astype('uint8'), [1, 54]), relay.reshape(const_462.astype('float64'), [14, 12, 8]), relay.reshape(var_464.astype('uint8'), [192,]), relay.reshape(const_462.astype('float64'), [14, 12, 8]), relay.reshape(const_462.astype('float32'), [14, 12, 8]), relay.reshape(const_462.astype('float64'), [14, 12, 8]), ), 14)
bop_466 = relay.bitwise_xor(bop_458.astype('int8'), relay.reshape(var_454.astype('int8'), relay.shape_of(bop_458))) # shape=(10, 14, 13)
bop_471 = relay.subtract(uop_455.astype('int8'), relay.reshape(bop_466.astype('int8'), relay.shape_of(uop_455))) # shape=(10, 14, 13)
uop_476 = relay.log2(bop_466.astype('float64')) # shape=(10, 14, 13)
output = relay.Tuple([call_461,const_462,var_463,var_464,bop_471,uop_476,])
output2 = relay.Tuple([call_465,const_462,var_463,var_464,bop_471,uop_476,])
func_478 = relay.Function([var_454,var_463,var_464,], output)
mod['func_478'] = func_478
mod = relay.transform.InferType()(mod)
var_479 = relay.var("var_479", dtype = "float32", shape = (10, 14, 13))#candidate|479|(10, 14, 13)|var|float32
var_480 = relay.var("var_480", dtype = "uint8", shape = (54,))#candidate|480|(54,)|var|uint8
var_481 = relay.var("var_481", dtype = "uint8", shape = (192, 1))#candidate|481|(192, 1)|var|uint8
output = func_478(var_479,var_480,var_481,)
func_482 = relay.Function([var_479,var_480,var_481,], output)
mutated_mod['func_482'] = func_482
mutated_mod = relay.transform.InferType()(mutated_mod)
var_484 = relay.var("var_484", dtype = "float64", shape = (7, 3))#candidate|484|(7, 3)|var|float64
var_485 = relay.var("var_485", dtype = "float64", shape = (7, 3))#candidate|485|(7, 3)|var|float64
bop_486 = relay.equal(var_484.astype('bool'), relay.reshape(var_485.astype('bool'), relay.shape_of(var_484))) # shape=(7, 3)
bop_489 = relay.not_equal(var_485.astype('bool'), relay.reshape(bop_486.astype('bool'), relay.shape_of(var_485))) # shape=(7, 3)
var_492 = relay.var("var_492", dtype = "float64", shape = (7, 3))#candidate|492|(7, 3)|var|float64
bop_493 = relay.bitwise_or(var_485.astype('uint32'), relay.reshape(var_492.astype('uint32'), relay.shape_of(var_485))) # shape=(7, 3)
var_496 = relay.var("var_496", dtype = "bool", shape = (7, 3))#candidate|496|(7, 3)|var|bool
bop_497 = relay.bitwise_and(bop_489.astype('uint16'), relay.reshape(var_496.astype('uint16'), relay.shape_of(bop_489))) # shape=(7, 3)
output = relay.Tuple([bop_493,bop_497,])
output2 = relay.Tuple([bop_493,bop_497,])
F = relay.Function([var_484,var_485,var_492,var_496,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_484,var_485,var_492,var_496,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_484= np.array([[9.265396,6.408259,4.558925],[1.430939,-6.704897,-1.454671],[1.279275,-1.839863,5.903033],[-3.065567,-3.064282,-6.840863],[8.673516,-4.606818,7.172015],[0.789132,1.420305,5.654081],[0.614388,9.973776,-8.977141]], dtype='float64')
module1.set_input('var_484', input_484)
input_485= np.array([[-4.576000,3.951298,-7.336015],[-3.959656,-0.641503,-5.835728],[9.402756,-9.506421,-6.534030],[-6.954014,0.703992,1.397316],[4.409734,3.533619,-7.706068],[-0.613950,4.275478,1.937230],[-1.611216,-7.509828,-1.490705]], dtype='float64')
module1.set_input('var_485', input_485)
input_492= np.array([[6.365158,-1.417624,5.652105],[1.392356,-8.650236,8.146894],[1.239561,-0.225135,-3.833697],[-3.828444,-5.341454,-1.116431],[-2.308006,1.878241,1.660934],[9.814456,-3.960502,4.802695],[3.743268,8.661795,9.639345]], dtype='float64')
module1.set_input('var_492', input_492)
input_496= np.array([[False,False,False],[True,True,False],[True,False,True],[False,False,False],[True,False,True],[True,False,True],[False,False,False]], dtype='bool')
module1.set_input('var_496', input_496)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_484, input_485, input_492, input_496, )
res3 = intrp3.evaluate()(input_484, input_485, input_492, input_496, )
res4 = intrp4.evaluate()(input_484, input_485, input_492, input_496, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_484', input_484)
module5.set_input('var_485', input_485)
module5.set_input('var_492', input_492)
module5.set_input('var_496', input_496)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_484, input_485, input_492, input_496, )
res7 = intrp7.evaluate()(input_484, input_485, input_492, input_496, )
res8 = intrp8.evaluate()(input_484, input_485, input_492, input_496, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_484', input_484)
module9.set_input('var_485', input_485)
module9.set_input('var_492', input_492)
module9.set_input('var_496', input_496)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_484, input_485, input_492, input_496, )
res11 = intrp11.evaluate()(input_484, input_485, input_492, input_496, )
res12 = intrp12.evaluate()(input_484, input_485, input_492, input_496, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_484', input_484)
module13.set_input('var_485', input_485)
module13.set_input('var_492', input_492)
module13.set_input('var_496', input_496)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_484, input_485, input_492, input_496, )
res15 = intrp15.evaluate()(input_484, input_485, input_492, input_496, )
res16 = intrp16.evaluate()(input_484, input_485, input_492, input_496, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_484', input_484)
module17.set_input('var_485', input_485)
module17.set_input('var_492', input_492)
module17.set_input('var_496', input_496)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_484, input_485, input_492, input_496, )
res19 = intrp19.evaluate()(input_484, input_485, input_492, input_496, )
res20 = intrp20.evaluate()(input_484, input_485, input_492, input_496, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_484', input_484)
module21.set_input('var_485', input_485)
module21.set_input('var_492', input_492)
module21.set_input('var_496', input_496)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_484, input_485, input_492, input_496, )
res23 = intrp23.evaluate()(input_484, input_485, input_492, input_496, )
res24 = intrp24.evaluate()(input_484, input_485, input_492, input_496, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''22: TVMFuncCall
21: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
16: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
15: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
14: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const [clone .isra.405]
13: tvm::relay::transform::FirstOrderGradient()::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}::operator()(tvm::IRModule, tvm::transform::PassContext) const::{lambda(tvm::relay::LetList*)#1}::operator()(tvm::relay::LetList) const [clone .constprop.436]
12: _ZNSt17_Function_handlerIFSt10sha
11: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::FunctionNode const*)::{lambda(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&)#1}::operator()(std::vector<std::shared_ptr<tvm::relay::ADValueNode>, std::allocator<std::shared_ptr<tvm::relay::ADValueNode> > > const&, tvm::relay::Call const&) const
10: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
9: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
8: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::TupleNode const*)
7: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
5: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::FirstOrderReverseAD::VisitExpr(tvm::RelayExpr const&)
3: _ZZN3tvm5relay11ExprFunctorIFSt10shared_
2: tvm::relay::FirstOrderReverseAD::VisitExpr_(tvm::OpNode const*)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''