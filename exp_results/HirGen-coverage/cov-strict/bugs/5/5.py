import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_13 = relay.var("var_13", dtype = "uint32", shape = (10, 13, 15))#candidate|13|(10, 13, 15)|var|uint32
var_14 = relay.var("var_14", dtype = "uint32", shape = (10, 13, 15))#candidate|14|(10, 13, 15)|var|uint32
bop_15 = relay.bitwise_xor(var_13.astype('uint32'), relay.reshape(var_14.astype('uint32'), relay.shape_of(var_13))) # shape=(10, 13, 15)
const_18 = relay.const([[[-7,8,6,8,3,1,5,-2,8,-3,3,1,-6,10,4],[-9,4,4,7,1,1,1,6,2,3,-2,7,-6,8,5],[7,-2,-1,-1,8,10,4,5,7,5,1,8,3,-5,10],[-4,3,-6,-2,-5,-8,10,-8,-3,-2,-5,-8,-5,7,-1],[-9,1,-10,-4,-3,5,-6,5,-1,7,9,-10,-4,-9,4],[-5,-4,5,-5,-6,-10,2,-5,-7,9,10,7,6,-5,-2],[2,4,-6,-10,7,-9,-7,2,10,-8,3,-7,-10,-2,6],[5,-3,-6,5,-8,-1,1,8,10,3,6,-8,8,6,2],[-4,-3,-6,-6,6,5,-10,7,-8,-9,7,-6,-10,4,4],[9,-4,7,-3,1,6,9,2,6,-7,10,-10,-10,1,-6],[1,-5,10,-5,4,4,-1,5,-1,3,6,3,-10,-6,-8],[-7,8,5,5,-10,-7,-8,9,4,-4,7,10,8,2,4],[4,8,5,-9,3,-9,6,-9,-1,-5,9,7,-4,3,6]],[[-8,9,6,9,-4,7,-5,1,7,8,-8,-8,8,9,7],[-9,10,3,1,1,6,-9,10,4,3,-3,-9,-6,-2,10],[-4,6,-6,8,-1,-3,7,-8,3,8,4,-8,2,-3,1],[-4,10,-9,-7,4,-7,4,10,-5,-4,10,4,-2,-4,-9],[-8,-1,2,-5,-8,8,-5,-9,2,9,-7,-3,-8,9,2],[6,2,-8,-7,5,1,1,4,4,-6,-4,-3,5,-4,3],[4,-7,9,1,10,3,9,-1,4,1,-8,2,-3,-5,3],[4,9,4,-1,-6,-2,4,3,-6,-1,-6,1,-2,-8,1],[5,9,-9,2,9,-10,-8,-2,-2,-7,-3,-3,2,-1,2],[-10,-9,1,-1,9,4,10,-4,1,9,8,-9,-10,-6,-1],[-3,3,9,10,-10,1,6,4,-4,-7,-10,-6,-6,2,-5],[8,4,-8,9,7,6,-1,-9,-6,9,5,8,2,8,-8],[9,-3,-9,-7,10,8,-2,-10,-6,-4,-10,6,-2,4,2]],[[-3,7,-3,-8,9,-4,1,7,-7,-8,8,9,5,-4,-1],[10,9,-1,-6,-5,-4,1,5,9,-3,-2,-4,-6,-2,8],[7,9,-5,-10,-9,7,4,-1,8,-10,8,1,-2,-10,9],[10,-6,-2,9,-4,-7,-2,-9,-9,-4,5,10,3,-4,6],[1,-9,-5,9,-5,2,4,-2,-6,9,1,-1,1,-10,-7],[10,2,-4,-4,-1,-8,10,7,-6,-4,-5,10,-5,10,-9],[4,4,1,-5,4,4,8,-3,-8,10,-3,-9,2,5,-9],[-10,4,-9,3,9,-1,-9,-7,-6,3,-8,-4,1,-1,8],[1,-3,4,-9,7,6,9,8,8,-10,3,-7,-3,3,-5],[3,10,10,-9,3,-6,-3,4,10,7,-5,8,-7,2,-6],[-2,-2,5,6,-2,-10,-10,5,6,8,-7,-6,-4,-7,-3],[-5,2,-7,1,8,6,6,-3,-10,10,6,10,4,5,2],[4,4,5,2,-7,-1,-10,-9,-10,6,4,9,2,-7,5]],[[-6,5,7,-1,7,-9,1,7,-4,6,9,2,3,1,10],[9,7,3,-5,-2,4,-1,3,-4,7,9,-1,3,-4,4],[-10,-9,9,10,-8,-6,-6,-7,7,9,3,-9,8,8,4],[-7,7,3,10,1,8,10,4,-4,-9,4,-3,-4,-3,-5],[6,-3,-6,10,10,3,9,-3,-9,6,1,9,1,5,6],[2,9,-7,-2,2,8,-1,7,4,2,-5,7,7,7,-3],[1,9,1,-7,-2,-6,-4,-1,-10,10,-2,6,-1,9,-6],[-5,8,-9,7,-5,-6,-3,-7,-3,9,10,10,-1,1,-1],[4,4,-7,4,-8,6,7,6,4,-2,5,-4,-10,-8,-7],[-7,-2,-5,-5,-4,6,-9,-9,-9,-4,-6,5,-6,5,7],[2,2,-7,4,4,5,7,-2,-8,-9,-4,-1,-3,3,2],[9,-5,7,-6,6,-8,1,-4,2,-6,4,4,-6,-4,-6],[-2,-10,5,-1,-8,-2,-9,-10,6,6,-2,9,-8,4,7]],[[-10,-2,5,8,10,-2,-10,5,-5,3,2,-2,1,7,3],[5,10,2,7,-1,5,9,-6,7,-7,3,-6,-2,4,-4],[3,8,7,1,9,-10,7,10,-4,-5,9,-10,-2,4,2],[-2,-7,2,-2,7,7,6,7,-9,6,3,3,-2,6,2],[-4,-4,-5,-5,9,8,9,2,-1,6,5,3,-3,-5,-1],[-6,9,7,6,1,-6,-3,-5,1,-4,-3,6,-8,-9,7],[-8,-6,-5,-3,7,-8,4,-7,4,5,3,-6,-4,-10,-7],[-4,4,-2,-4,-9,8,3,-9,-3,8,-1,-5,-2,1,-1],[-2,3,-6,-4,9,-3,-1,1,9,-2,-1,8,10,-5,3],[-1,-1,-1,-9,-9,-10,-7,9,2,-3,4,7,-10,-1,10],[-8,-1,7,-8,-8,-5,9,9,2,-5,6,-9,-1,-2,1],[-10,-4,10,4,-8,-6,1,6,3,-1,-3,10,-2,8,-7],[3,-9,-8,-8,6,-5,8,-8,-3,-4,-1,-3,-8,4,-6]],[[-6,8,-8,4,-9,2,5,-7,8,-3,-8,9,7,-6,-5],[4,5,-7,-10,-1,-3,2,-6,-10,1,-7,2,-2,-5,-2],[5,2,-9,3,1,-8,-8,4,-9,6,-10,1,-9,10,1],[4,9,-6,-6,8,2,6,4,3,4,3,2,-5,7,5],[-9,-4,5,-9,-8,10,10,-1,4,10,-3,4,-9,6,-8],[3,-8,-8,-6,5,1,-3,1,-9,-8,-5,-4,-4,-9,8],[-1,-5,-8,5,-9,8,-6,-4,5,-4,-2,3,9,8,10],[-5,7,-4,-2,-6,9,-2,-5,2,10,4,-8,-10,4,6],[4,-7,-1,3,-9,-8,-5,3,-7,-9,-4,8,7,8,-6],[7,6,-10,-4,2,-3,4,-1,7,4,4,8,10,10,1],[2,7,-2,5,-1,1,-9,2,-2,7,-7,-5,-5,-2,-3],[-4,-1,-1,7,10,2,9,-8,1,-2,-7,-1,5,7,4],[10,-3,6,-5,9,-8,9,-2,10,7,2,-2,8,1,-5]],[[-3,3,-8,-1,10,10,-3,-7,6,-8,3,10,-5,3,2],[-2,-2,5,4,5,-8,-3,-6,5,10,-6,5,8,-2,9],[8,-1,6,2,-3,-3,-6,1,-9,-3,-2,-3,4,-1,2],[-2,-1,3,-10,9,-6,4,3,1,4,2,-2,6,-8,-2],[-7,3,9,7,-2,3,-1,9,4,5,-5,-5,3,5,-8],[-2,-3,-3,2,2,-8,-4,-3,4,-5,5,-7,-1,4,4],[2,7,2,10,1,7,-6,-2,-4,-4,7,-10,-2,7,-4],[-7,8,6,3,-3,5,-4,1,-9,2,5,-5,-6,-4,4],[-3,-8,5,10,-9,2,2,-4,4,9,7,7,-9,-10,5],[2,-4,-10,6,7,-4,-7,7,-1,-5,6,4,-5,-6,7],[6,3,2,1,5,3,-6,-6,-4,-5,9,4,-7,-8,1],[-6,5,-8,-3,6,6,-7,-2,7,-10,-6,4,-2,-8,-5],[6,-7,-3,1,-6,3,-8,4,3,-5,-6,4,2,2,-8]],[[8,-8,-8,-2,6,8,9,2,-6,-7,-2,4,2,3,6],[10,-7,1,-9,4,10,-9,-8,4,-7,-4,3,-4,6,8],[-9,7,9,1,2,5,9,-3,-4,10,-8,-2,-4,8,6],[-3,-6,-10,10,-3,1,6,-2,9,-8,9,3,8,8,9],[-6,8,3,-7,3,7,9,-4,-4,7,1,-7,7,-4,-5],[-8,5,3,8,-3,3,7,-3,3,5,9,-5,-2,6,-7],[9,10,-5,-2,-4,-6,-4,8,-3,7,2,1,4,8,-9],[1,-2,4,5,-10,2,7,-6,-5,8,6,10,5,-1,6],[-10,2,7,9,3,-10,-5,10,3,-2,-1,-1,6,-7,-1],[-8,7,4,5,5,-5,2,-3,1,2,-7,2,2,-3,4],[1,6,-4,-3,6,-9,-4,-10,5,-4,-7,-8,10,6,10],[-1,3,-8,-10,8,-8,6,7,-10,1,9,-9,-6,8,6],[1,-8,5,-3,-6,10,9,-7,-3,-1,3,2,-9,-2,-2]],[[7,-4,-10,-1,-3,-6,-1,2,-1,5,1,4,-1,-4,3],[3,-1,-5,7,6,2,-4,8,9,3,3,-3,7,-1,-8],[7,4,-8,3,-4,-5,2,9,7,9,-1,4,-9,-7,10],[-5,-7,-8,-10,10,1,-2,7,3,9,-6,6,6,8,8],[-1,8,-3,-2,-9,-9,-8,-3,10,10,2,10,7,5,-1],[5,7,-7,4,-5,10,3,-3,-4,6,2,2,-6,-10,-4],[6,-1,7,-3,-9,-3,-2,-8,3,-8,6,7,-4,4,-5],[-6,-10,-4,-7,7,7,5,-6,-4,5,-8,-2,6,9,1],[-10,7,-6,-8,-9,-10,-5,-6,10,-10,10,3,-4,-9,10],[-8,-10,2,-5,-8,-5,1,-5,-3,-6,7,4,9,10,-2],[1,1,-5,7,3,-4,-6,-2,-3,6,-1,-7,-5,-2,6],[5,6,-1,1,2,-5,-4,-3,-4,3,-6,-4,-9,9,4],[-7,-7,5,3,5,-9,2,-5,-2,-1,-10,-1,-2,-3,-2]],[[-8,-6,-2,-2,6,-2,10,-10,1,6,1,1,-10,2,3],[10,5,-6,-8,5,8,1,-3,4,5,8,-6,7,3,1],[5,9,9,6,6,1,9,1,-1,6,5,-3,4,-8,9],[-2,3,2,-7,-7,-2,-6,-10,-4,1,8,-3,-8,-1,3],[6,-2,-5,10,5,-4,8,9,-8,-9,-3,7,-10,-5,3],[-8,-1,9,5,9,-9,-8,-4,4,-7,3,2,6,-6,2],[8,10,10,-7,-7,6,3,2,10,1,9,-7,-3,4,3],[1,-5,1,8,-4,-8,2,6,-9,10,-4,-6,-3,-2,-10],[-2,-6,-10,6,-9,-5,-1,-8,-3,-3,-9,-3,8,3,4],[6,-4,4,-1,2,-1,7,-5,10,2,-10,-2,3,10,9],[9,9,6,-7,-6,-7,7,-10,6,10,-3,8,-3,3,-7],[7,-8,9,-10,2,-7,-2,2,-9,-1,-8,-9,-2,-7,8],[-9,-10,-9,-2,-5,-6,3,9,9,-8,6,7,-4,10,3]]], dtype = "uint32")#candidate|18|(10, 13, 15)|const|uint32
bop_19 = relay.divide(bop_15.astype('float32'), relay.reshape(const_18.astype('float32'), relay.shape_of(bop_15))) # shape=(10, 13, 15)
var_24 = relay.var("var_24", dtype = "uint32", shape = (10, 13, 15))#candidate|24|(10, 13, 15)|var|uint32
bop_25 = relay.bitwise_or(bop_15.astype('uint64'), relay.reshape(var_24.astype('uint64'), relay.shape_of(bop_15))) # shape=(10, 13, 15)
var_29 = relay.var("var_29", dtype = "uint32", shape = (10, 13, 15))#candidate|29|(10, 13, 15)|var|uint32
bop_30 = relay.logical_xor(var_24.astype('int16'), relay.reshape(var_29.astype('int16'), relay.shape_of(var_24))) # shape=(10, 13, 15)
const_36 = relay.const([[[-1,-7,5,3,2,6,8,4,-5,10,2,2,9,4,-5],[1,-10,-3,8,-3,-1,4,2,3,-5,-3,5,5,-9,3],[7,-1,2,-2,-3,-3,-3,-4,-5,4,9,8,-7,7,1],[-9,6,5,-6,-10,-1,3,-2,-1,-3,-6,4,-8,7,6],[-7,-6,5,-3,-8,1,-8,3,1,-6,1,-9,-9,8,2],[6,9,4,-3,6,-10,3,1,-7,-2,-7,8,-9,-2,-3],[-1,4,10,3,-5,-7,7,-2,-5,-1,3,-1,-5,-7,7],[9,-10,-5,3,6,-10,10,2,-6,-10,-6,-6,-3,7,-5],[-4,10,1,4,7,1,-4,3,-2,5,-7,-6,-7,-3,1],[-1,-4,8,-8,9,-6,-3,1,6,-6,-7,3,-7,2,-7],[7,7,8,-9,2,4,-10,8,-4,5,7,-4,-5,3,10],[-10,7,-10,-7,-3,-9,-6,-5,-8,-1,10,7,10,-4,7],[4,-3,-7,6,-2,-10,8,-7,2,-2,10,-3,-6,7,8]],[[6,-1,3,-9,-1,-9,-1,-7,-10,6,4,-5,-3,1,-3],[-5,-3,7,6,4,-9,6,-2,10,4,5,2,-6,-9,4],[-8,-10,-5,8,2,-7,-6,1,-10,9,7,-3,-2,-3,-7],[-2,5,-7,-8,4,-6,-1,7,-10,2,-2,-1,-7,5,-3],[-6,7,-8,6,9,8,-2,-8,2,8,7,-5,5,1,-2],[2,1,3,-6,-7,-8,10,5,-1,-8,-1,8,-1,-5,-1],[-9,9,2,1,-1,-3,-5,-1,5,-5,2,7,-9,-1,3],[5,6,-9,-6,-8,-9,5,6,-4,9,-3,5,-1,8,-1],[5,-10,10,1,2,-2,-2,4,-7,6,-8,-9,7,-9,3],[6,8,10,5,-5,-3,-9,7,1,-4,2,-8,-6,10,-1],[-7,-2,3,4,-3,7,9,-1,9,-10,2,6,-2,8,10],[-6,6,-2,8,-1,7,1,3,-2,-7,-9,4,-1,-8,10],[-8,-4,4,7,4,-7,5,-8,-9,5,3,-4,-7,-7,4]],[[4,-6,8,4,4,-1,-2,-6,-7,1,10,3,-2,9,-7],[7,-4,-10,2,10,-4,4,9,6,-4,5,-2,-8,-1,6],[-9,-1,-5,-7,-5,-5,-8,-6,-1,-3,9,1,-8,-8,5],[1,6,-8,1,9,4,6,3,1,4,8,-1,7,-7,2],[-8,7,3,6,-3,-1,-9,1,6,-7,-5,6,-4,-9,9],[-3,4,-10,5,10,-10,-7,7,2,-9,6,4,3,-6,-8],[-4,3,-1,3,-8,4,-6,-9,-8,-8,10,2,-5,-1,-7],[-7,10,-7,4,6,4,2,-10,5,-3,-6,5,8,-5,5],[8,3,4,8,1,-10,4,7,4,-6,2,-2,2,-1,7],[-10,-7,-2,6,-1,-3,-2,-4,3,-10,4,10,1,4,-10],[-7,7,-7,9,8,-8,10,8,-10,9,-9,-4,-9,-1,-8],[-7,3,-2,-2,2,8,2,4,1,2,-4,5,2,-4,8],[-5,-8,8,9,-1,-3,-4,9,7,-2,10,-2,5,-8,6]],[[-2,2,9,1,1,2,-3,8,-4,3,-4,3,9,-9,-8],[4,5,-1,-5,4,-6,-9,5,-4,4,7,10,3,8,6],[-6,8,-4,6,3,5,-8,-10,-4,2,-2,6,-8,9,3],[-4,6,10,10,1,-8,3,-5,-9,-9,-6,9,-1,3,5],[-7,-4,-10,5,4,3,6,-8,-3,9,9,3,7,6,-5],[-7,1,-7,10,3,10,6,6,-7,2,-10,-9,-10,6,8],[9,8,-9,-1,9,-10,1,-4,-1,-3,5,3,-8,-4,-9],[8,8,-5,10,-5,-3,-7,1,9,-2,-5,10,3,-9,2],[9,-3,5,5,8,-4,5,5,-5,-7,9,-6,-10,-4,-7],[-6,-8,5,-10,1,-2,-9,10,-2,8,-2,3,-5,6,-1],[-10,9,-7,3,5,-5,3,-4,10,6,9,-7,3,-5,-5],[-1,-3,-3,5,8,-10,-8,9,-5,-10,-6,-8,-9,-7,1],[-1,5,5,6,3,-1,-1,7,-1,-8,3,7,-9,4,1]],[[5,2,-9,9,-6,-1,7,-5,3,-7,4,7,3,10,-3],[7,-4,-10,-5,-8,1,-7,3,-5,8,9,3,-5,-3,8],[-7,-4,1,6,2,6,-5,-4,-6,7,8,-8,-2,-9,-10],[-9,-1,10,8,7,-1,-3,-7,7,5,-7,-7,-6,-8,2],[-4,-6,7,-7,3,-4,1,1,6,1,-1,4,1,-5,-7],[-8,-1,5,2,10,8,-10,-3,6,8,-9,-6,-6,-3,8],[9,10,-2,-7,-7,-10,3,5,-2,5,10,8,7,5,-5],[9,-10,-6,-3,9,-2,-4,-10,2,2,1,-1,6,-4,-9],[3,-5,-8,7,5,-1,4,3,6,5,3,8,6,-4,-6],[-9,1,-3,-6,10,6,-10,7,-4,7,1,-7,3,-4,4],[-8,-8,-1,-9,1,10,-1,8,2,-2,-3,-8,-1,-6,8],[4,6,-6,-3,6,4,-1,-6,6,-1,8,1,-6,7,-9],[5,10,7,10,10,-4,-2,3,2,-8,6,-8,-2,-1,-10]],[[5,-6,-9,-10,3,-5,-6,1,-4,9,-7,8,3,-4,10],[-7,-1,7,-5,9,8,-4,10,4,-8,8,7,5,-7,-6],[-2,9,5,-3,2,8,-7,-4,8,3,-2,-3,8,-1,-6],[-9,10,-2,-3,-3,1,6,-4,5,2,-7,-2,5,8,-4],[-5,-3,-2,-9,-3,1,-6,10,-9,1,4,6,-8,-5,-1],[3,5,-10,-4,-1,1,-1,-10,6,-7,-1,-7,-6,-9,3],[1,5,-3,-2,-4,-4,-6,2,5,7,7,2,6,8,8],[-7,-9,-4,7,-1,-8,6,7,1,-9,3,-8,-9,2,10],[-1,10,9,-6,1,-5,-10,4,10,3,-6,5,-1,6,4],[-7,5,8,-3,-8,10,5,8,-1,-7,-8,-1,4,-9,-9],[-10,-9,6,-9,-2,5,-2,-5,-10,-1,-3,9,-3,-9,-5],[5,-5,-10,-4,9,-6,9,5,-10,-10,-3,9,-8,4,5],[4,-7,-6,1,8,7,4,-3,8,5,4,3,-9,8,-6]],[[7,4,-10,-2,2,1,-3,-3,-6,-10,1,9,9,-4,-1],[9,10,-3,6,3,5,-7,-1,-5,-3,5,10,7,2,-6],[10,5,1,-4,1,-4,3,5,10,-8,6,7,9,-3,5],[-8,-7,9,-8,2,10,8,-5,-5,4,10,-9,3,-2,1],[-8,-4,-1,-10,6,10,7,-9,-2,1,-2,-5,-9,8,-5],[-1,-9,5,-8,1,-6,-9,-1,-7,-7,-7,1,-9,-10,-6],[-8,-7,1,-9,6,4,10,-9,4,-4,-6,9,4,-10,4],[9,-2,-1,10,-4,9,-2,-3,-2,5,-9,8,10,5,6],[5,-1,4,10,9,2,-3,-9,-3,5,-6,1,-10,5,9],[5,7,-1,-8,-4,-6,-7,9,7,-6,10,-7,-7,1,2],[-1,6,-5,-8,-7,-9,9,5,-3,-9,-5,2,-1,-8,-9],[2,9,10,4,-6,2,-5,-3,-8,1,7,6,7,-8,-10],[7,-9,-2,10,-8,-5,2,-1,10,-3,-5,-8,-10,10,4]],[[-7,4,9,6,9,6,4,6,4,3,9,-8,2,-4,7],[4,8,1,-3,-7,-1,-10,2,10,-4,-3,-4,-9,-10,9],[-2,-3,-1,8,-9,8,-7,-7,-4,4,2,10,10,-4,-4],[-10,-6,-7,-5,-2,-9,6,-7,-4,2,9,-5,1,10,-8],[8,3,10,2,-4,-4,3,10,3,-2,-9,-10,-2,10,6],[-6,-5,-10,-8,2,5,6,6,-9,-9,-5,-4,3,-7,5],[2,-10,10,-1,10,-2,-1,-4,-6,7,4,4,-8,1,1],[-1,-9,9,2,-2,7,-9,4,-5,-4,4,4,-5,6,-10],[-4,-9,3,-6,9,-9,-2,5,2,4,2,-6,-7,-1,-9],[-1,1,7,7,-2,9,-5,2,7,-9,1,-1,10,-10,-3],[9,3,4,-7,-3,-9,10,5,5,-7,-3,8,7,-3,6],[-7,10,6,-8,-4,1,5,-9,-3,-2,-1,-9,10,4,3],[1,-6,8,4,-6,-8,4,-8,4,7,2,-1,-6,6,-6]],[[1,-1,-8,-10,6,1,-3,-7,-7,-2,7,4,-4,-8,-10],[3,2,2,-2,2,-8,-4,-9,-10,4,-1,-6,6,5,2],[10,1,-7,4,3,9,-1,2,4,4,-4,6,2,-1,9],[2,-9,3,-4,-7,-3,10,-9,-1,6,10,2,1,-1,-9],[-6,-2,-6,2,10,-10,-8,-4,-5,-2,2,-1,2,-6,-4],[5,-8,4,-2,5,-8,4,5,2,6,-1,8,3,-5,2],[6,9,4,9,10,9,-8,3,-4,-3,1,-7,7,-8,8],[10,-9,7,2,1,-9,1,3,3,1,8,-2,-8,4,9],[-7,-8,-10,10,-3,6,-1,-1,1,2,2,1,-6,10,6],[-3,-10,9,-6,-2,10,-2,4,-5,-9,-4,-8,2,-5,-3],[-6,4,-7,-8,2,3,7,-2,1,6,6,-9,-5,8,7],[-9,-8,-9,-7,-8,-6,-10,-6,-5,-10,7,9,2,-10,1],[4,10,-6,6,3,-2,-7,-3,-7,-2,-7,4,-6,9,-9]],[[-3,4,-4,2,4,6,-6,10,-9,-8,-5,1,-1,10,-5],[4,-9,-3,9,-4,5,-8,-4,2,7,-4,5,4,4,-7],[2,-1,10,-5,-1,9,-7,-7,-7,-4,-7,9,-4,9,6],[9,7,-8,-3,-5,1,10,-5,1,-6,-8,-3,-4,-9,-7],[8,2,5,4,4,4,-7,5,9,-4,1,7,-7,3,5],[1,-5,3,-5,-9,10,4,6,-7,-7,2,-3,2,-4,-7],[4,-6,-3,10,-8,6,-10,3,-4,-5,-1,7,-9,-5,-3],[-4,8,-5,-9,-8,-1,4,9,-1,8,-1,4,5,6,-6],[10,-7,10,-1,4,5,-6,-1,4,7,10,3,6,7,7],[5,5,-8,-2,3,8,3,5,-10,-6,3,5,-9,-5,4],[-2,-9,-9,-2,-8,8,1,2,5,-4,-9,6,2,-4,10],[9,7,8,7,-8,3,10,7,-9,-6,-1,10,8,3,-7],[1,6,5,5,-4,-4,-9,2,-8,6,3,-8,7,5,9]]], dtype = "uint32")#candidate|36|(10, 13, 15)|const|uint32
bop_37 = relay.subtract(var_14.astype('int8'), relay.reshape(const_36.astype('int8'), relay.shape_of(var_14))) # shape=(10, 13, 15)
uop_43 = relay.cosh(bop_19.astype('float32')) # shape=(10, 13, 15)
const_45 = relay.constdtype = "float32")#candidate|45|(10, 13, 15)|const|float32
bop_46 = relay.less(uop_43.astype('bool'), relay.reshape(const_45.astype('bool'), relay.shape_of(uop_43))) # shape=(10, 13, 15)
bop_49 = relay.left_shift(bop_19.astype('uint32'), relay.reshape(var_29.astype('uint32'), relay.shape_of(bop_19))) # shape=(10, 13, 15)
bop_53 = relay.floor_mod(uop_43.astype('float64'), relay.reshape(var_14.astype('float64'), relay.shape_of(uop_43))) # shape=(10, 13, 15)
uop_59 = relay.tan(var_14.astype('float32')) # shape=(10, 13, 15)
bop_66 = relay.greater(uop_59.astype('bool'), relay.reshape(var_24.astype('bool'), relay.shape_of(uop_59))) # shape=(10, 13, 15)
uop_69 = relay.atan(bop_53.astype('float32')) # shape=(10, 13, 15)
bop_73 = relay.maximum(bop_46.astype('uint32'), relay.reshape(bop_53.astype('uint32'), relay.shape_of(bop_46))) # shape=(10, 13, 15)
output = relay.Tuple([bop_25,bop_30,bop_37,bop_49,bop_66,uop_69,bop_73,])
output2 = relay.Tuple([bop_25,bop_30,bop_37,bop_49,bop_66,uop_69,bop_73,])
func_85 = relay.Function([var_13,var_14,var_24,var_29,], output)
mod['func_85'] = func_85
mod = relay.transform.InferType()(mod)
mutated_mod['func_85'] = func_85
mutated_mod = relay.transform.InferType()(mutated_mod)
func_85_call = mutated_mod.get_global_var('func_85')
var_87 = relay.var("var_87", dtype = "uint32", shape = (10, 13, 15))#candidate|87|(10, 13, 15)|var|uint32
var_88 = relay.var("var_88", dtype = "uint32", shape = (10, 13, 15))#candidate|88|(10, 13, 15)|var|uint32
var_89 = relay.var("var_89", dtype = "uint32", shape = (10, 13, 15))#candidate|89|(10, 13, 15)|var|uint32
var_90 = relay.var("var_90", dtype = "uint32", shape = (10, 13, 15))#candidate|90|(10, 13, 15)|var|uint32
call_86 = func_85_call(var_87,var_88,var_89,var_90,)
output = call_86
func_91 = relay.Function([var_87,var_88,var_89,var_90,], output)
mutated_mod['func_91'] = func_91
mutated_mod = relay.transform.InferType()(mutated_mod)
var_100 = relay.var("var_100", dtype = "float32", shape = (13, 13))#candidate|100|(13, 13)|var|float32
uop_101 = relay.cos(var_100.astype('float32')) # shape=(13, 13)
bop_112 = relay.greater(uop_101.astype('bool'), relay.reshape(var_100.astype('bool'), relay.shape_of(uop_101))) # shape=(13, 13)
output = bop_112
output2 = bop_112
func_116 = relay.Function([var_100,], output)
mod['func_116'] = func_116
mod = relay.transform.InferType()(mod)
mutated_mod['func_116'] = func_116
mutated_mod = relay.transform.InferType()(mutated_mod)
var_117 = relay.var("var_117", dtype = "float32", shape = (13, 13))#candidate|117|(13, 13)|var|float32
func_116_call = mutated_mod.get_global_var('func_116')
call_118 = func_116_call(var_117)
output = call_118
func_119 = relay.Function([var_117], output)
mutated_mod['func_119'] = func_119
mutated_mod = relay.transform.InferType()(mutated_mod)
var_130 = relay.var("var_130", dtype = "uint8", shape = (5,))#candidate|130|(5,)|var|uint8
var_131 = relay.var("var_131", dtype = "uint8", shape = (5,))#candidate|131|(5,)|var|uint8
bop_132 = relay.bitwise_or(var_130.astype('uint8'), relay.reshape(var_131.astype('uint8'), relay.shape_of(var_130))) # shape=(5,)
func_85_call = mod.get_global_var('func_85')
func_91_call = mutated_mod.get_global_var('func_91')
const_146 = relay.const([-9,7,-7,-4,-5,10,9,-9,3,9,-4,7,5,-8,-7,-4,-1,6,6,-2,6,-2,-9,7,10,-10,-2,4,8,4,10,-4,9,-10,10,5,3,3,8,-7,-10,3,-4,9,-10,9,-1,10,3,-4,-3,10,-8,-9,5,-5,3,-6,6,8,10,-5,-10,-10,6,-7,5,-4,-10,-7,8,-1,9,-7,5,-10,-5,-8,1,-8,-4,-3,-2,-9,-9,9,-8,10,10,-2,-5,3,-1,-2,9,-9,-5,-1,1,-1,-6,-10,3,-4,9,9,10,1,3,4,-7,6,-7,-1,6,-9,-2,-9,-8,7,8,-1,-8,-10,10,-2,8,9,2,2,-1,2,-9,-8,3,6,1,-10,2,9,-5,-6,-8,8,6,10,10,-3,-3,8,6,7,-1,-8,8,-2,-8,-6,7,8,4,1,10,-5,-4,-10,4,10,4,-8,-7,5,-3,4,7,-1,10,6,-7,4,3,4,1,3,-3,-10,-3,10,8,-6,-7,-7,-1,8,4,-1,-4,-6,-8,2,2,-6,7,-3,-1,9,5,7,-8,6,-5,-1,-10,5,8,3,-9,6,-6,-8,-5,-5,2,-8,6,-4,-9,-9,-4,10,4,-3,-2,-7,-6,-5,2,3,3,6,-3,10,7,-4,-6,4,-8,2,-6,8,4,4,5,-1,9,8,10,-8,9,-2,6,4,-3,-6,5,-2,9,-6,5,5,-5,-10,10,3,-9,6,-1,9,-7,4,1,3,-3,-4,-4,-2,1,5,-9,-3,-1,4,-9,7,-10,-2,-6,10,-1,8,3,-6,4,-8,-10,-1,-9,-5,10,8,3,-10,2,10,6,1,-10,4,10,6,2,-3,4,1,9,3,-7,3,-5,-5,3,-10,4,-6,7,-4,-1,2,-4,9,-10,9,7,1,7,5,-1,-2,3,9,1,-1,-10,-8,-5,2,-1,-5,5,2,-3,3,-6,-10,2,-8,-3,-5,-1,-1,-10,-4,-6,-9,6,-6,-10,2,1,-4,-1,5,-3,-1,3,-3,-9,-4,-7,-7,-6,-1,-9,4,-6,4,-1,5,1,-8,-10,-7,-9,3,6,8,-2,-2,-3,4,3,7,8,7,8,2,-8,8,-2,3,10,1,10,6,8,-1,7,-8,-1,-4,2,-8,7,-10,-6,6,-6,-9,-10,10,-4,-2,10,-6,5,-2,8,-9,-8,3,-4,2,-7,4,6,7,6,1,-7,7,-8,9,10,2,-7,-2,5,-10,-4,2,-10,-2,-8,2,-1,-7,9,7,-4,-7,-6,-1,-2,-7,-7,8,8,2,4,-1,-3,6,-4,1,-5,-6,-7,4,-10,-8,10,2,6,5,-8,-5,-3,-2,5,3,-2,-1,-10,10,7,-6,-2,6,4,7,8,-4,-4,-7,2,9,3,-4,-8,-2,10,4,6,-3,-3,-4,-4,-1,-5,-7,2,-10,9,-7,-8,-2,7,-4,7,-5,8,1,-8,-10,3,-1,-5,-10,-6,-1,-6,-5,-8,7,-6,6,-4,6,9,6,-3,-9,-1,-3,5,-3,7,-3,-9,-10,5,-1,-5,10,2,8,-4,-4,-5,1,-10,-1,4,-4,4,-2,-2,-5,-9,-2,2,6,8,-2,4,-3,10,3,-7,1,-1,-2,5,1,-4,-4,-3,-4,-10,-6,-10,1,4,-5,9,6,-8,-4,-6,6,-9,6,-3,-5,-5,-7,1,-6,-2,-7,7,-2,2,10,4,-5,8,-5,2,-6,-10,-1,-3,-7,7,5,-7,-3,-4,4,8,-10,-3,-1,-4,1,10,-6,-10,-7,7,3,8,3,-8,1,-10,-6,4,5,4,4,9,-8,-1,6,-6,3,6,9,5,-3,1,-8,-7,-4,1,7,-8,-9,-10,8,-5,-4,-7,8,-5,8,8,-10,1,6,-2,3,9,-8,6,-9,-6,-5,-5,6,-2,5,-2,-7,-1,-6,7,2,1,5,7,-10,6,-6,8,3,6,-2,-5,1,3,8,7,7,9,5,7,-8,3,-6,-4,3,-8,-8,5,6,7,9,3,1,-8,-7,6,-8,7,-9,4,3,-6,-3,-10,-8,-5,10,3,-10,-10,7,-2,4,-10,2,-7,-4,-6,4,7,3,-1,10,6,8,-6,-9,-10,10,8,-4,9,-7,-6,-2,-7,9,-8,3,-8,10,-5,-2,4,7,-4,-6,-10,9,-6,-10,-4,10,-7,-7,-3,9,-8,5,5,-5,-2,3,3,-7,-10,1,-6,-9,-3,10,-5,-6,-9,6,-2,2,-1,-3,6,-5,-8,2,9,-9,-8,-10,7,6,8,10,5,3,9,-4,7,1,8,-1,3,-9,8,-3,-9,1,-3,9,-2,-5,10,6,-9,-5,10,-3,-6,5,-6,-9,7,2,10,9,-2,3,-2,-3,7,7,6,2,6,7,6,-5,-5,-5,6,7,6,4,-10,-10,-5,-6,-9,-4,-6,7,7,6,-6,-9,5,-2,5,-1,-3,1,10,-10,8,5,2,-7,-1,3,6,-4,5,1,2,-6,-5,-4,6,5,5,-7,10,-8,-7,-2,10,-3,2,6,10,-10,10,-9,7,8,3,-10,9,6,8,8,-4,4,7,-9,-1,1,2,-8,5,2,3,-1,-10,8,-6,6,9,3,10,-4,-10,4,6,-10,8,-9,4,3,8,1,-8,-4,-7,-5,-9,-7,4,1,-1,-1,5,-2,-1,-4,-6,4,4,-3,5,5,6,4,-3,-10,-8,-7,-2,-1,-4,1,-9,-6,-3,3,4,5,-10,-10,6,9,-4,6,-5,-8,-1,1,-5,5,3,-7,4,8,1,-10,1,-10,8,-10,4,-4,-8,6,-1,3,-9,-2,4,-10,8,-3,-9,-4,10,10,4,10,-8,-5,-9,4,1,-10,5,-2,-10,-4,8,6,1,-4,9,-7,2,7,-2,-9,6,-10,9,-4,6,8,5,2,9,1,1,6,-1,3,5,-8,1,-9,-1,1,-2,-1,-2,-3,10,10,3,3,10,-7,9,-5,-5,-3,9,4,-3,-6,-8,6,4,-9,4,1,1,-9,5,-3,8,9,-1,7,-7,-1,-6,5,4,7,8,-2,-7,-1,2,-5,3,-8,-6,-2,-1,-8,-1,7,8,3,-5,7,3,6,-6,-8,6,5,2,-7,-2,10,-9,-9,2,-3,7,8,-9,-7,-5,4,-10,5,8,-5,-6,-4,-1,-10,-4,-9,-4,-3,9,-8,5,-8,-4,-9,5,-5,-6,-8,1,-9,10,8,-4,6,10,-10,7,2,-4,-6,-4,2,9,6,-7,-6,4,2,6,-1,-4,-5,-2,-4,7,-5,-10,-10,6,-8,-4,1,-10,-4,-3,-5,8,9,7,4,5,7,-8,-2,-7,-9,-7,-9,-5,3,9,-4,8,-7,-9,2,-2,-9,8,-5,4,-3,4,7,-4,7,8,10,-7,2,-8,9,-1,-8,-2,3,-9,-6,-8,-2,1,8,1,5,5,-5,2,-10,-4,4,-3,1,-3,5,-10,-8,6,-2,3,8,-7,-10,-7,-3,-1,7,2,-8,-7,-8,9,9,1,-6,-1,4,-5,8,-7,5,8,3,-1,6,-3,-4,2,10,9,8,8,9,-6,-7,7,-2,3,-6,-6,2,-9,-2,4,-4,7,2,-4,1,7,5,-2,-1,-2,-1,1,10,2,1,-3,8,7,-7,10,-2,-10,2,-6,8,10,-10,3,-3,9,2,6,-4,-1,-5,1,-9,-6,2,4,4,9,6,-2,-8,10,-5,-3,1,-1,4,-4,2,4,6,4,-1,-1,-7,-6,6,-9,6,3,6,4,8,5,-1,-4,6,-4,2,-5,-2,6,-1,-2,-6,4,9,-4,-7,-6,7,-3,9,1,7,-2,9,9,-2,-6,-4,-10,8,1,-2,-2,-7,3,4,-9,10,-2,-9,10,9,-2,4,-9,8,6,5,1,4,-9,-6,1,-10,-6,3,-2,9,9,-8,6,8,-7,3,-4,2,7,-2,5,-3,-10,-6,-1,6,10,8,-9,-1,9,6,3,9,-7,10,10,4,2,-2,-7,-2,-2,5,7,10,2,-9,6,-6,-8,5,-2,10,1,6,10,-4,-8,-6,7,-1,1,-3,-8,10,-5,-4,5,8,5,1,4,10,6,-9,9,1,7,-9,-3,1,-5,3,-10,-6,-9,-10,6,-4,-5,5,-2,6,-10,-6,-5,1,1,-1,-6,-6,6,7,8,-2,6,-7,-4,8,9,7,9,3,3,-3,-1,-6,-8,6,-6,-9,8,9,-10,-7,10,-10,-3,3,6,-5,-6,3,3,2,-10,2,-6,9,1,-4,10,-10,-8,7,10,3,4,-1,-5,-8,1,-2,-2,-4,5,-4,3,-7,8,7,7,-3,7,-8,7,7,6,9,-10,-3,-3,1,-2,7,4,9,5,4,7,4,8,4,-3,-5,5,2,-6,4,-3,9,8,-1,-9,-4,-9,-10,2,-2,-6,1,-7,-1,-6,-1,9,-8,-8,-9,6,-5,2,3,-1,10,-3,1,6,3,9,2,-5,-5,1,-2,-7,-3,6,4,2,7,9,-5,1,6,1,-10,-10,9,-8,10,10,8,-3,3,10,-1,7,-1,-2,-8,7,-9,-2,-10,-1,-10,6,-9,10,-4,-4,-9,-1,-9,9,7,-7,3,-5,4,3,-7,3,10,7,-6,-1,2,-5,-8,-2,2,-1,1,-10,-2,-2,-6,2,-8,1,2,9,5,-4,-10,-8,-6,-1,-5,-5,-6,3,-1,5,7,-3,8,-10,-8,6,3,-2,10,-7,2,1,8,-9,10,8,10,4,-3,-2,1,9,-1,2,-4,-8,2,6,3,10,-9,-1,-2,-8,-1,6,-10,7,-7,3,-9,-10,10,2,-1,-7,1,-1,4,7,-2,9,-1,-3,7,-2,9,-9,9,-2,-6,-1,8,-1,1,-10,-5,5,7,-4,6,-5,1,-3,7,-1,8,-1,5,-1,-10,-9,1,-10,-4,5,4,6,-3,-4,-8,-5,-8,-3,6,9,-6,-2,-6,7,9,-1,-1,-8,6,7,8,10,-8,-9,8,2,-10,-1,1,6,10,-2,-4,9,2,-6,8,6,-1,-10,-7,-5,1,1,3,-1,-5,-6,-5,1,-1,-10,2,-6,-3,2,-3,6,2,-5,7,10,2,2,-10,-5,-9,1,10,-4,6,-4,-4,10,-8,-3,-4,8,10,1,3,3,2,-5,3], dtype = "uint32")#candidate|146|(1950,)|const|uint32
call_145 = relay.TupleGetItem(func_85_call(relay.reshape(const_146.astype('uint32'), [10, 13, 15]), relay.reshape(const_146.astype('uint32'), [10, 13, 15]), relay.reshape(const_146.astype('uint32'), [10, 13, 15]), relay.reshape(const_146.astype('uint32'), [10, 13, 15]), ), 4)
call_147 = relay.TupleGetItem(func_91_call(relay.reshape(const_146.astype('uint32'), [10, 13, 15]), relay.reshape(const_146.astype('uint32'), [10, 13, 15]), relay.reshape(const_146.astype('uint32'), [10, 13, 15]), relay.reshape(const_146.astype('uint32'), [10, 13, 15]), ), 4)
func_116_call = mod.get_global_var('func_116')
func_119_call = mutated_mod.get_global_var('func_119')
const_155 = relay.const([6.512102,6.418097,-5.658307,-6.856274,5.947931,2.280078,0.528033,-7.654044,-3.953523,-2.534912,8.217446,-5.699399,0.464103,-8.391507,-1.966959,0.467972,-4.668605,-8.356630,4.590036,-6.832449,-5.066754,2.169844,-8.664502,6.026603,-7.769757,-5.008475,-5.858549,-1.892589,7.614698,-8.804219,-0.154427,-0.903222,-8.559592,2.888950,8.959897,-1.051394,3.596318,2.353845,6.297527,-0.566617,-3.935162,7.358455,-9.348017,-0.001845,8.890977,4.046372,0.913437,-0.911705,-8.978349,2.039274,8.999196,6.510742,1.978019,-5.636901,8.407912,-2.794759,1.679119,-4.946107,-1.160260,-3.376598,0.100696,4.089950,5.776823,-7.327896,6.943085,1.322494,6.939692,-0.191917,6.290597,-0.249142,1.963471,-1.640997,-9.553296,-9.799719,5.243319,-4.281431,-5.574061,8.153597,9.168524,6.354835,3.549525,6.199407,2.388264,9.493479,-3.062998,6.918259,5.303502,9.802392,-4.428539,-2.371420,-7.996033,-0.484422,-4.031225,-1.254801,6.324860,-4.460229,-3.257607,-9.919342,2.042891,-5.279643,0.736732,-8.600073,2.347163,-2.905240,2.157760,9.291728,-7.051288,0.764923,-8.668806,-3.242023,6.885175,-2.846920,2.763822,-6.193713,1.999530,-3.124931,-5.613594,8.744057,-3.488278,-9.353387,-2.095249,6.894492,8.899245,9.555359,-6.021769,-5.114964,-5.429680,9.205558,0.750180,7.517738,-4.737007,9.971182,-9.390738,-5.089662,-1.533676,-6.839940,4.403009,8.201442,-0.014390,-6.490517,3.693441,1.341077,1.589715,9.008827,-2.143114,9.407423,-6.489757,0.307577,6.249008,-3.273277,-3.350496,-6.356727,-1.630499,2.568030,-6.294816,-2.918886,-8.775893,-8.868155,-9.850084,-1.822661,-3.742630,-3.613164,-6.106460,3.379244,4.722634,5.647360,-6.066629,0.819102,-6.394336], dtype = "float32")#candidate|155|(169,)|const|float32
call_154 = func_116_call(relay.reshape(const_155.astype('float32'), [13, 13]))
call_156 = func_116_call(relay.reshape(const_155.astype('float32'), [13, 13]))
output = relay.Tuple([bop_132,call_145,const_146,call_154,const_155,])
output2 = relay.Tuple([bop_132,call_147,const_146,call_156,const_155,])
func_160 = relay.Function([var_130,var_131,], output)
mod['func_160'] = func_160
mod = relay.transform.InferType()(mod)
mutated_mod['func_160'] = func_160
mutated_mod = relay.transform.InferType()(mutated_mod)
func_160_call = mutated_mod.get_global_var('func_160')
var_162 = relay.var("var_162", dtype = "uint8", shape = (5,))#candidate|162|(5,)|var|uint8
var_163 = relay.var("var_163", dtype = "uint8", shape = (5,))#candidate|163|(5,)|var|uint8
call_161 = func_160_call(var_162,var_163,)
output = call_161
func_164 = relay.Function([var_162,var_163,], output)
mutated_mod['func_164'] = func_164
mutated_mod = relay.transform.InferType()(mutated_mod)
var_174 = relay.var("var_174", dtype = "int16", shape = (3, 5))#candidate|174|(3, 5)|var|int16
var_175 = relay.var("var_175", dtype = "int16", shape = (3, 5))#candidate|175|(3, 5)|var|int16
bop_176 = relay.right_shift(var_174.astype('int16'), relay.reshape(var_175.astype('int16'), relay.shape_of(var_174))) # shape=(3, 5)
bop_182 = relay.logical_and(bop_176.astype('bool'), relay.reshape(var_174.astype('bool'), relay.shape_of(bop_176))) # shape=(3, 5)
bop_185 = relay.equal(bop_182.astype('bool'), relay.reshape(bop_176.astype('bool'), relay.shape_of(bop_182))) # shape=(3, 5)
bop_194 = relay.logical_and(bop_182.astype('bool'), relay.reshape(bop_185.astype('bool'), relay.shape_of(bop_182))) # shape=(3, 5)
uop_200 = relay.log(bop_176.astype('float64')) # shape=(3, 5)
bop_204 = relay.floor_mod(uop_200.astype('float32'), relay.reshape(bop_182.astype('float32'), relay.shape_of(uop_200))) # shape=(3, 5)
uop_207 = relay.erf(bop_204.astype('float32')) # shape=(3, 5)
output = relay.Tuple([bop_194,uop_207,])
output2 = relay.Tuple([bop_194,uop_207,])
func_210 = relay.Function([var_174,var_175,], output)
mod['func_210'] = func_210
mod = relay.transform.InferType()(mod)
mutated_mod['func_210'] = func_210
mutated_mod = relay.transform.InferType()(mutated_mod)
func_210_call = mutated_mod.get_global_var('func_210')
var_212 = relay.var("var_212", dtype = "int16", shape = (3, 5))#candidate|212|(3, 5)|var|int16
var_213 = relay.var("var_213", dtype = "int16", shape = (3, 5))#candidate|213|(3, 5)|var|int16
call_211 = func_210_call(var_212,var_213,)
output = call_211
func_214 = relay.Function([var_212,var_213,], output)
mutated_mod['func_214'] = func_214
mutated_mod = relay.transform.InferType()(mutated_mod)
const_240 = relay.const([-2,-2,1,-2,-8,-1,-6], dtype = "int32")#candidate|240|(7,)|const|int32
var_241 = relay.var("var_241", dtype = "int32", shape = (7,))#candidate|241|(7,)|var|int32
bop_242 = relay.bitwise_or(const_240.astype('int32'), relay.reshape(var_241.astype('int32'), relay.shape_of(const_240))) # shape=(7,)
uop_245 = relay.cosh(const_240.astype('float32')) # shape=(7,)
func_210_call = mod.get_global_var('func_210')
func_214_call = mutated_mod.get_global_var('func_214')
var_249 = relay.var("var_249", dtype = "int16", shape = (15,))#candidate|249|(15,)|var|int16
call_248 = relay.TupleGetItem(func_210_call(relay.reshape(var_249.astype('int16'), [3, 5]), relay.reshape(var_249.astype('int16'), [3, 5]), ), 0)
call_250 = relay.TupleGetItem(func_214_call(relay.reshape(var_249.astype('int16'), [3, 5]), relay.reshape(var_249.astype('int16'), [3, 5]), ), 0)
var_258 = relay.var("var_258", dtype = "float32", shape = (7,))#candidate|258|(7,)|var|float32
bop_259 = relay.power(uop_245.astype('float64'), relay.reshape(var_258.astype('float64'), relay.shape_of(uop_245))) # shape=(7,)
func_160_call = mod.get_global_var('func_160')
func_164_call = mutated_mod.get_global_var('func_164')
const_271 = relay.const([-2,10,10,7,-4], dtype = "uint8")#candidate|271|(5,)|const|uint8
call_270 = relay.TupleGetItem(func_160_call(relay.reshape(const_271.astype('uint8'), [5,]), relay.reshape(const_271.astype('uint8'), [5,]), ), 3)
call_272 = relay.TupleGetItem(func_164_call(relay.reshape(const_271.astype('uint8'), [5,]), relay.reshape(const_271.astype('uint8'), [5,]), ), 3)
uop_273 = relay.exp(uop_245.astype('float32')) # shape=(7,)
const_276 = relay.const([-8.509566,8.343567,-1.741215,8.050435,4.409175,-1.660054,-3.803968], dtype = "float64")#candidate|276|(7,)|const|float64
bop_277 = relay.multiply(bop_259.astype('int64'), relay.reshape(const_276.astype('int64'), relay.shape_of(bop_259))) # shape=(7,)
bop_287 = relay.logical_or(uop_273.astype('bool'), relay.reshape(bop_277.astype('bool'), relay.shape_of(uop_273))) # shape=(7,)
uop_297 = relay.erf(bop_287.astype('float64')) # shape=(7,)
bop_302 = relay.less_equal(bop_287.astype('bool'), relay.reshape(bop_259.astype('bool'), relay.shape_of(bop_287))) # shape=(7,)
output = relay.Tuple([bop_242,call_248,var_249,call_270,const_271,uop_297,bop_302,])
output2 = relay.Tuple([bop_242,call_250,var_249,call_272,const_271,uop_297,bop_302,])
func_306 = relay.Function([var_241,var_249,var_258,], output)
mod['func_306'] = func_306
mod = relay.transform.InferType()(mod)
mutated_mod['func_306'] = func_306
mutated_mod = relay.transform.InferType()(mutated_mod)
func_306_call = mutated_mod.get_global_var('func_306')
var_308 = relay.var("var_308", dtype = "int32", shape = (7,))#candidate|308|(7,)|var|int32
var_309 = relay.var("var_309", dtype = "int16", shape = (15,))#candidate|309|(15,)|var|int16
var_310 = relay.var("var_310", dtype = "float32", shape = (7,))#candidate|310|(7,)|var|float32
call_307 = func_306_call(var_308,var_309,var_310,)
output = call_307
func_311 = relay.Function([var_308,var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_328 = relay.var("var_328", dtype = "int64", shape = (4, 7))#candidate|328|(4, 7)|var|int64
const_329 = relay.const([[10,-2,2,4,-8,-2,5],[-10,2,-8,-6,1,-4,9],[-2,2,6,4,9,-9,4],[-4,9,4,3,6,8,-7]], dtype = "int64")#candidate|329|(4, 7)|const|int64
bop_330 = relay.right_shift(var_328.astype('int64'), relay.reshape(const_329.astype('int64'), relay.shape_of(var_328))) # shape=(4, 7)
uop_333 = relay.acos(const_329.astype('float32')) # shape=(4, 7)
const_337 = relay.const([[9.279304,-8.004636,-1.588420,3.738428,8.964600,-6.932901,3.600905],[1.568620,8.258669,6.640731,2.777723,-5.169006,-9.616190,0.699251],[-6.618354,-2.149594,8.945229,-5.760632,9.409570,-1.578937,5.230288],[-9.066115,0.818549,-2.641512,0.040447,5.958066,-8.634513,8.618554]], dtype = "float32")#candidate|337|(4, 7)|const|float32
bop_338 = relay.mod(uop_333.astype('float64'), relay.reshape(const_337.astype('float64'), relay.shape_of(uop_333))) # shape=(4, 7)
bop_343 = relay.not_equal(bop_338.astype('bool'), relay.reshape(uop_333.astype('bool'), relay.shape_of(bop_338))) # shape=(4, 7)
func_210_call = mod.get_global_var('func_210')
func_214_call = mutated_mod.get_global_var('func_214')
const_347 = relay.const([[3,-10,5],[-6,6,8],[7,6,-3],[-1,-1,6],[-9,-2,2]], dtype = "int16")#candidate|347|(5, 3)|const|int16
call_346 = relay.TupleGetItem(func_210_call(relay.reshape(const_347.astype('int16'), [3, 5]), relay.reshape(const_347.astype('int16'), [3, 5]), ), 1)
call_348 = relay.TupleGetItem(func_214_call(relay.reshape(const_347.astype('int16'), [3, 5]), relay.reshape(const_347.astype('int16'), [3, 5]), ), 1)
bop_349 = relay.bitwise_and(bop_338.astype('int64'), relay.reshape(uop_333.astype('int64'), relay.shape_of(bop_338))) # shape=(4, 7)
uop_354 = relay.log10(const_347.astype('float64')) # shape=(5, 3)
bop_356 = relay.less(bop_343.astype('bool'), relay.reshape(uop_333.astype('bool'), relay.shape_of(bop_343))) # shape=(4, 7)
output = relay.Tuple([bop_330,call_346,bop_349,uop_354,bop_356,])
output2 = relay.Tuple([bop_330,call_348,bop_349,uop_354,bop_356,])
func_360 = relay.Function([var_328,], output)
mod['func_360'] = func_360
mod = relay.transform.InferType()(mod)
mutated_mod['func_360'] = func_360
mutated_mod = relay.transform.InferType()(mutated_mod)
var_361 = relay.var("var_361", dtype = "int64", shape = (4, 7))#candidate|361|(4, 7)|var|int64
func_360_call = mutated_mod.get_global_var('func_360')
call_362 = func_360_call(var_361)
output = call_362
func_363 = relay.Function([var_361], output)
mutated_mod['func_363'] = func_363
mutated_mod = relay.transform.InferType()(mutated_mod)
var_368 = relay.var("var_368", dtype = "float32", shape = (14, 10))#candidate|368|(14, 10)|var|float32
uop_369 = relay.cos(var_368.astype('float32')) # shape=(14, 10)
var_372 = relay.var("var_372", dtype = "float32", shape = (14, 10))#candidate|372|(14, 10)|var|float32
bop_373 = relay.equal(uop_369.astype('bool'), relay.reshape(var_372.astype('bool'), relay.shape_of(uop_369))) # shape=(14, 10)
bop_377 = relay.logical_or(bop_373.astype('bool'), relay.reshape(var_368.astype('bool'), relay.shape_of(bop_373))) # shape=(14, 10)
output = bop_377
output2 = bop_377
func_382 = relay.Function([var_368,var_372,], output)
mod['func_382'] = func_382
mod = relay.transform.InferType()(mod)
var_383 = relay.var("var_383", dtype = "float32", shape = (14, 10))#candidate|383|(14, 10)|var|float32
var_384 = relay.var("var_384", dtype = "float32", shape = (14, 10))#candidate|384|(14, 10)|var|float32
output = func_382(var_383,var_384,)
func_385 = relay.Function([var_383,var_384,], output)
mutated_mod['func_385'] = func_385
mutated_mod = relay.transform.InferType()(mutated_mod)
var_426 = relay.var("var_426", dtype = "float32", shape = (14, 5))#candidate|426|(14, 5)|var|float32
uop_427 = relay.sin(var_426.astype('float32')) # shape=(14, 5)
uop_429 = relay.atanh(uop_427.astype('float32')) # shape=(14, 5)
var_432 = relay.var("var_432", dtype = "float32", shape = (14, 5))#candidate|432|(14, 5)|var|float32
bop_433 = relay.maximum(uop_429.astype('float64'), relay.reshape(var_432.astype('float64'), relay.shape_of(uop_429))) # shape=(14, 5)
output = relay.Tuple([bop_433,])
output2 = relay.Tuple([bop_433,])
func_438 = relay.Function([var_426,var_432,], output)
mod['func_438'] = func_438
mod = relay.transform.InferType()(mod)
mutated_mod['func_438'] = func_438
mutated_mod = relay.transform.InferType()(mutated_mod)
func_438_call = mutated_mod.get_global_var('func_438')
var_440 = relay.var("var_440", dtype = "float32", shape = (14, 5))#candidate|440|(14, 5)|var|float32
var_441 = relay.var("var_441", dtype = "float32", shape = (14, 5))#candidate|441|(14, 5)|var|float32
call_439 = func_438_call(var_440,var_441,)
output = call_439
func_442 = relay.Function([var_440,var_441,], output)
mutated_mod['func_442'] = func_442
mutated_mod = relay.transform.InferType()(mutated_mod)
var_454 = relay.var("var_454", dtype = "float32", shape = (2, 12))#candidate|454|(2, 12)|var|float32
uop_455 = relay.cosh(var_454.astype('float32')) # shape=(2, 12)
bop_459 = relay.add(uop_455.astype('uint16'), relay.reshape(var_454.astype('uint16'), relay.shape_of(uop_455))) # shape=(2, 12)
uop_463 = relay.sin(bop_459.astype('float64')) # shape=(2, 12)
bop_467 = relay.subtract(bop_459.astype('int8'), relay.reshape(uop_455.astype('int8'), relay.shape_of(bop_459))) # shape=(2, 12)
output = relay.Tuple([uop_463,bop_467,])
output2 = relay.Tuple([uop_463,bop_467,])
func_471 = relay.Function([var_454,], output)
mod['func_471'] = func_471
mod = relay.transform.InferType()(mod)
mutated_mod['func_471'] = func_471
mutated_mod = relay.transform.InferType()(mutated_mod)
var_472 = relay.var("var_472", dtype = "float32", shape = (2, 12))#candidate|472|(2, 12)|var|float32
func_471_call = mutated_mod.get_global_var('func_471')
call_473 = func_471_call(var_472)
output = call_473
func_474 = relay.Function([var_472], output)
mutated_mod['func_474'] = func_474
mutated_mod = relay.transform.InferType()(mutated_mod)
var_596 = relay.var("var_596", dtype = "int64", shape = (13, 16, 14))#candidate|596|(13, 16, 14)|var|int64
var_597 = relay.var("var_597", dtype = "int64", shape = (13, 16, 14))#candidate|597|(13, 16, 14)|var|int64
bop_598 = relay.minimum(var_596.astype('int64'), relay.reshape(var_597.astype('int64'), relay.shape_of(var_596))) # shape=(13, 16, 14)
output = relay.Tuple([bop_598,])
output2 = relay.Tuple([bop_598,])
func_613 = relay.Function([var_596,var_597,], output)
mod['func_613'] = func_613
mod = relay.transform.InferType()(mod)
mutated_mod['func_613'] = func_613
mutated_mod = relay.transform.InferType()(mutated_mod)
func_613_call = mutated_mod.get_global_var('func_613')
var_615 = relay.var("var_615", dtype = "int64", shape = (13, 16, 14))#candidate|615|(13, 16, 14)|var|int64
var_616 = relay.var("var_616", dtype = "int64", shape = (13, 16, 14))#candidate|616|(13, 16, 14)|var|int64
call_614 = func_613_call(var_615,var_616,)
output = call_614
func_617 = relay.Function([var_615,var_616,], output)
mutated_mod['func_617'] = func_617
mutated_mod = relay.transform.InferType()(mutated_mod)
var_645 = relay.var("var_645", dtype = "float64", shape = (9,))#candidate|645|(9,)|var|float64
uop_646 = relay.log10(var_645.astype('float64')) # shape=(9,)
output = uop_646
output2 = uop_646
func_649 = relay.Function([var_645,], output)
mod['func_649'] = func_649
mod = relay.transform.InferType()(mod)
mutated_mod['func_649'] = func_649
mutated_mod = relay.transform.InferType()(mutated_mod)
var_650 = relay.var("var_650", dtype = "float64", shape = (9,))#candidate|650|(9,)|var|float64
func_649_call = mutated_mod.get_global_var('func_649')
call_651 = func_649_call(var_650)
output = call_651
func_652 = relay.Function([var_650], output)
mutated_mod['func_652'] = func_652
mutated_mod = relay.transform.InferType()(mutated_mod)
var_661 = relay.var("var_661", dtype = "float32", shape = (14,))#candidate|661|(14,)|var|float32
const_662 = relay.const([4.002095,2.315131,3.811634,-3.237541,0.169664,-0.263361,-0.158821,-6.422725,6.561927,1.297461,4.804423,7.805425,-3.549014,6.557483], dtype = "float32")#candidate|662|(14,)|const|float32
bop_663 = relay.floor_divide(var_661.astype('float32'), relay.reshape(const_662.astype('float32'), relay.shape_of(var_661))) # shape=(14,)
func_160_call = mod.get_global_var('func_160')
func_164_call = mutated_mod.get_global_var('func_164')
var_670 = relay.var("var_670", dtype = "uint8", shape = (5, 1))#candidate|670|(5, 1)|var|uint8
call_669 = relay.TupleGetItem(func_160_call(relay.reshape(var_670.astype('uint8'), [5,]), relay.reshape(var_670.astype('uint8'), [5,]), ), 0)
call_671 = relay.TupleGetItem(func_164_call(relay.reshape(var_670.astype('uint8'), [5,]), relay.reshape(var_670.astype('uint8'), [5,]), ), 0)
uop_674 = relay.sinh(var_661.astype('float64')) # shape=(14,)
uop_676 = relay.atanh(uop_674.astype('float64')) # shape=(14,)
const_680 = relay.const([-5.073585,8.013103,4.119440,-2.919578,4.894739,-5.023253,1.343785,6.900661,-0.782591,7.904305,-3.305406,5.592139,-7.346477,-6.405403], dtype = "float64")#candidate|680|(14,)|const|float64
bop_681 = relay.subtract(uop_676.astype('int16'), relay.reshape(const_680.astype('int16'), relay.shape_of(uop_676))) # shape=(14,)
bop_688 = relay.bitwise_or(bop_681.astype('int64'), relay.reshape(const_662.astype('int64'), relay.shape_of(bop_681))) # shape=(14,)
uop_691 = relay.rsqrt(uop_674.astype('float32')) # shape=(14,)
bop_695 = relay.greater(uop_676.astype('bool'), relay.reshape(bop_681.astype('bool'), relay.shape_of(uop_676))) # shape=(14,)
bop_702 = relay.logical_or(uop_674.astype('bool'), relay.reshape(bop_681.astype('bool'), relay.shape_of(uop_674))) # shape=(14,)
var_706 = relay.var("var_706", dtype = "float64", shape = (14,))#candidate|706|(14,)|var|float64
bop_707 = relay.minimum(uop_674.astype('uint8'), relay.reshape(var_706.astype('uint8'), relay.shape_of(uop_674))) # shape=(14,)
bop_713 = relay.logical_or(bop_688.astype('bool'), relay.reshape(var_661.astype('bool'), relay.shape_of(bop_688))) # shape=(14,)
bop_721 = relay.greater(bop_695.astype('bool'), relay.reshape(uop_691.astype('bool'), relay.shape_of(bop_695))) # shape=(14,)
bop_724 = relay.equal(bop_713.astype('bool'), relay.reshape(bop_702.astype('bool'), relay.shape_of(bop_713))) # shape=(14,)
uop_728 = relay.log10(call_669.astype('float64')) # shape=(5,)
uop_730 = relay.log10(call_671.astype('float64')) # shape=(5,)
var_731 = relay.var("var_731", dtype = "float64", shape = (14,))#candidate|731|(14,)|var|float64
bop_732 = relay.logical_xor(uop_676.astype('uint32'), relay.reshape(var_731.astype('uint32'), relay.shape_of(uop_676))) # shape=(14,)
bop_738 = relay.divide(uop_676.astype('float64'), relay.reshape(bop_724.astype('float64'), relay.shape_of(uop_676))) # shape=(14,)
uop_743 = relay.exp(bop_738.astype('float32')) # shape=(14,)
func_438_call = mod.get_global_var('func_438')
func_442_call = mutated_mod.get_global_var('func_442')
const_746 = relay.const([-1.621821,-4.061501,-2.521402,0.851646,-7.102603,-1.887338,-9.927233,6.063139,-0.936630,-2.273331,-2.425822,7.939304,-3.453679,3.235210,6.060277,9.265964,-8.062903,2.560447,9.559538,1.555425,-8.475704,3.246748,-1.859714,-8.170409,6.022861,-6.873361,-4.363166,0.928628,2.295766,4.602104,6.307728,-0.843576,-7.141821,-0.881750,8.920099,9.789837,-4.072860,-8.500522,3.311626,6.128052,3.302940,-8.814483,2.871067,5.477661,7.931126,7.603499,3.885665,-3.016718,7.265698,5.430537,-1.064230,-6.111052,3.463017,6.129644,-3.820457,-5.407494,-1.833507,0.018200,-7.291634,-2.632666,5.001572,-0.228142,-9.257371,-6.535090,-6.268579,-1.678313,-8.751888,9.027385,7.748356,-8.205248], dtype = "float32")#candidate|746|(70,)|const|float32
call_745 = relay.TupleGetItem(func_438_call(relay.reshape(const_746.astype('float32'), [14, 5]), relay.reshape(const_746.astype('float32'), [14, 5]), ), 0)
call_747 = relay.TupleGetItem(func_442_call(relay.reshape(const_746.astype('float32'), [14, 5]), relay.reshape(const_746.astype('float32'), [14, 5]), ), 0)
func_85_call = mod.get_global_var('func_85')
func_91_call = mutated_mod.get_global_var('func_91')
const_755 = relay.const([9,1,7,-9,8,-5,7,-8,-2,2,10,-2,-8,9,10,10,-7,7,6,3,6,-4,3,-1,6,-8,-1,-5,1,10,9,3,3,-1,6,3,-9,6,-9,-7,-10,-3,7,-3,3,2,-5,9,-4,7,4,3,-8,-7,8,4,-3,9,9,8,5,-6,-4,-8,-7,10,8,-7,4,5,-10,-10,-8,-10,-2,8,10,-10,9,7,-5,-9,4,-9,-10,10,3,-2,10,-5,2,-2,7,1,7,4,-6,-5,1,-9,-8,2,1,-10,5,5,-1,4,-6,4,4,9,2,-2,-10,3,-2,-9,6,5,-7,1,-9,5,-1,-1,6,-6,-6,9,-9,-3,-7,5,-4,-7,3,8,-4,-7,2,1,-10,6,5,-1,10,-7,-6,10,-3,10,6,7,-3,-6,-4,4,-4,-9,8,5,-4,2,-5,10,9,5,2,-5,6,-1,-8,4,5,-3,3,-10,-10,-9,-7,6,-10,3,-3,-6,-10,1,2,-2,-9,10,10,-3,4,-9,10,7,6,-10,10,10,-1,-10,4,-9,-6,9,1,-8,1,-6,-3,-10,4,-6,6,-4,6,-1,5,-5,1,7,-5,6,2,-8,-4,-2,10,3,-5,-4,-9,1,-5,5,2,7,-6,-5,7,-3,-4,1,4,-10,9,10,-7,3,7,9,9,7,10,-6,-7,-10,-6,5,-3,9,-6,-1,9,-6,-4,-6,-10,-10,4,7,-5,-2,-8,-10,-1,6,-7,-2,-2,5,-3,9,-3,-6,-5,10,-2,2,1,-4,1,2,6,6,-4,2,-3,5,-1,7,-5,-9,-1,-8,3,7,-1,-3,4,-3,-2,8,-9,3,3,8,-7,7,-8,-2,-9,4,-1,5,6,-6,6,-4,-6,-4,7,6,-9,-1,10,-9,-6,6,-7,3,-2,4,2,2,-6,-6,6,-6,7,-5,5,-5,-4,6,-6,7,-7,-6,10,6,2,-9,-6,-7,-4,-3,6,-8,10,4,-5,4,3,-1,-9,8,-1,-2,-4,3,3,7,-1,-10,10,-7,-2,-9,2,-7,-10,-2,4,9,7,3,5,9,-6,-1,10,3,10,8,-5,2,-10,6,2,-1,7,-9,6,2,-5,-8,10,9,-3,-1,2,4,10,7,5,-9,1,-7,-5,9,-10,5,6,10,-10,10,4,3,5,-6,-7,-5,4,-5,10,9,9,-2,9,-8,4,-1,3,-2,4,-3,4,9,-1,-5,8,-3,-9,2,8,6,-8,-2,-1,-3,4,-7,-3,6,-3,-7,4,-6,6,10,-9,-7,1,10,-4,10,9,6,-6,-8,-3,7,-6,2,-4,5,9,10,3,-6,5,7,-3,-7,-7,-7,-1,-2,9,8,-8,-7,-7,1,-9,9,2,9,2,6,5,4,10,-3,-1,4,-6,-8,-10,-4,-5,4,-2,-5,-2,-4,6,3,3,5,-8,3,2,6,-2,2,5,7,10,2,4,-9,5,6,-7,-3,-2,9,-10,3,-7,-9,2,10,1,3,9,8,3,3,5,-7,2,10,-2,4,-9,-2,3,2,-5,9,-9,1,9,4,-9,2,8,3,-8,-9,-2,-7,-2,-8,3,2,-2,-4,6,8,2,9,3,-9,-1,-7,7,9,-2,8,-2,-7,-5,7,2,9,5,-1,-9,9,-9,2,-10,-7,8,8,-10,-4,8,8,-7,2,-2,10,5,1,6,2,-6,10,6,4,3,-1,-1,8,6,8,7,1,-9,-8,8,3,-10,-2,1,4,-5,-4,6,4,6,-9,-2,-2,3,-6,-1,8,1,10,5,-5,-1,-7,-3,-6,-3,-1,-5,3,-3,10,-7,-5,-8,2,9,6,-8,-6,3,1,8,2,5,1,6,3,-2,4,3,5,-3,3,-3,-6,2,-4,-9,2,-4,3,-8,3,-5,4,-3,4,-10,-9,6,1,3,6,2,8,-5,-5,-5,5,-5,10,7,-4,-10,2,-10,-4,6,7,-2,-5,-5,-9,7,2,4,10,7,8,8,-5,-1,-3,1,-9,6,9,2,-2,6,5,-8,-9,10,4,7,8,8,-7,5,3,9,1,-2,4,-8,7,-3,-3,-6,-1,-8,-3,2,7,-5,9,2,7,4,5,-10,10,-9,-6,-3,9,8,8,-1,9,5,2,-9,-5,-2,-7,-3,6,1,8,-9,-5,-7,6,8,-6,5,-2,8,-7,10,-3,-10,-4,2,-5,8,-7,3,-5,-1,5,10,10,7,-8,-9,9,-1,10,-4,4,7,7,9,10,-4,7,2,-1,5,5,4,3,6,1,-10,-2,-8,-6,4,8,1,-1,3,4,-5,1,-5,-5,10,1,-10,-7,-3,-7,1,4,-1,8,8,1,3,3,6,8,-3,-4,-1,3,-7,10,8,-1,8,-4,-3,2,-6,-3,10,-6,10,5,-4,7,1,-9,-1,7,-2,-8,5,-1,2,1,5,6,-9,9,3,5,3,-2,-4,6,9,1,3,-5,5,-8,5,-10,-8,10,-4,5,6,-4,6,8,-3,1,8,10,4,-6,3,-7,-4,2,9,9,-3,-8,4,-6,5,-4,7,-8,3,2,-1,-9,-6,-5,6,-10,9,-2,6,-2,7,-3,10,-5,-7,-3,8,3,2,-6,-4,-9,-8,3,-9,4,1,-10,3,7,4,8,9,5,1,-10,-10,7,-2,-4,7,8,-7,10,6,10,5,-4,-1,-6,2,9,-8,2,9,10,-3,-2,9,-8,9,-8,8,-1,-3,-5,-6,7,-3,4,4,-5,-4,-5,1,9,3,-6,-9,2,-5,-7,1,3,-4,5,-10,-4,9,7,-7,2,4,-3,-5,7,9,-9,1,-6,8,4,4,-2,1,3,-6,8,-4,-4,-5,9,6,-6,-1,-3,-6,6,-7,2,-10,4,1,7,-4,-4,-4,2,-2,-1,5,-1,9,10,8,3,-1,3,2,9,2,4,-8,-10,-7,3,-2,-4,4,8,7,9,10,-2,-1,-8,-4,-1,-9,5,9,-9,-4,4,8,-1,3,3,-1,6,3,5,4,-2,-6,-2,-6,-5,-5,-8,1,8,-9,-9,-5,2,-9,-7,-2,8,7,4,3,4,8,-1,-3,-5,9,3,-9,3,-2,10,3,-4,10,-4,7,2,-1,-6,-3,7,7,7,-2,5,-5,10,7,-8,1,-1,-1,-6,8,-7,5,5,3,-9,4,-9,-10,-9,-4,-3,1,5,-7,-4,-3,5,6,-9,2,4,-3,-7,3,-10,-2,-1,-9,7,-7,2,-4,7,7,-9,-3,8,-3,1,-10,-2,-5,7,1,-1,-7,-6,10,-2,-9,-7,-1,10,-2,1,-3,-6,8,-4,9,5,8,8,-7,6,-9,-10,-10,4,1,-3,8,3,-5,5,2,-2,3,8,-8,6,7,-8,6,8,7,4,-1,3,3,9,-10,-8,9,-5,-10,6,8,-6,-6,-4,4,-10,4,-10,-1,-4,10,-4,-8,7,1,-9,7,-3,-8,8,2,8,3,-3,-6,5,-1,-4,9,8,3,9,3,-5,-9,-4,10,9,7,-8,-10,-9,-6,-9,2,-7,5,7,9,8,4,1,3,7,-3,-4,-8,2,-4,10,-10,-3,2,2,1,-1,1,8,3,3,10,9,-10,3,3,10,-8,-8,-4,-4,-10,9,-7,7,-2,-8,-10,10,7,2,7,-3,8,7,-2,6,-6,-5,-1,4,5,-6,6,-4,9,5,9,-1,9,-8,9,-5,10,7,-4,-7,-3,-5,8,6,-5,-3,10,3,2,-2,-7,5,9,-1,4,-4,-2,10,8,7,-8,8,-6,9,4,8,-8,-3,4,-10,3,-9,-2,-4,6,2,6,2,-2,-8,2,-2,-9,-5,-8,-3,-6,-5,-3,9,-4,1,-2,2,6,4,7,6,10,1,6,-8,-8,3,6,9,2,10,7,-9,1,8,-7,4,-8,5,10,-6,-8,8,-8,4,10,-3,-5,7,4,-3,-2,10,3,3,9,-2,10,-3,-8,10,10,-5,6,10,-9,-4,-4,-2,10,-2,9,-7,5,-9,4,3,3,-10,9,-2,7,-1,10,7,3,8,5,-10,5,5,7,5,5,-2,5,3,9,2,1,9,1,3,3,4,1,7,-7,-1,-6,-7,4,-3,-5,-10,4,-8,7,1,-5,7,-6,7,7,-6,-8,5,2,-4,-5,-5,6,-6,-7,4,-3,1,7,3,-3,-8,9,-4,5,9,-4,3,-8,-4,7,8,-1,9,4,-4,8,-9,-7,-9,-10,-4,-3,-4,-5,7,-8,-2,-1,-7,-3,-5,2,2,-6,4,9,10,-3,4,-7,-10,5,4,-2,-2,-1,-8,10,4,10,2,4,-3,8,-6,10,10,9,1,4,-10,10,-9,9,6,1,-1,10,5,5,3,-9,-9,6,4,5,6,-2,-6,10,10,-10,8,7,9,7,5,6,6,6,-3,-4,6,4,6,-4,5,7,5,7,4,-8,9,5,-8,-7,-9,10,6,-7,-5,-9,6,-4,-10,7,-4,-4,-10,10,9,-1,-6,-4,-4,-5,4,1,-7,-1,7,-10,-4,4,3,-4,-1,1,-7,-10,-7,-1,-8,-3,9,-4,1,-7,-10,8,7,6,-8,-5,-3,5,-9,-3,1,6,9,8,5,6,8,-9,-6,3,1,9,3,5,2,-1,-5,5,-8,-7,-10,-8,-7,-5,1,8,-6,-7,-1,-2,-4,8,-1,-5,-9,2,5,10,-7,6,-7,-10,-3,3,-1,9,-10,-5,3,10,4,1,-1,5,8,-6,8,-9,2,5,6,9,2,-7,-5,4,10,-3,8,1,-1,-2,-2,8,-2,-7,8,4,-1,-2,9,-10,-1,4,-10,7,1,-10,8,-6,2,9,-1,-9,-6,-1,-9,6,5,-1,-2,-8,-6,5,-8,-6,-4,2,8,10,-4,-8,3,3,3,-2,-10,9,9,-2,5,-9,5,-6,3,-8,8,-8,-10,-6,-4,-10,-7,4,3,2,6,-10,-3,5,-4,-2,8,1,2,-3,-6,-5,-3,10,5,-7,5,3,4,3,10,8,7,8,-7,-10,-7,7,-3,8,-10,10,-10,3,-10,10,4,-8,7,2,10,-8,-6,4,1,7,7,-7,10,-9,-6,2,6,1,-7,-9,7,-1,10,2,9,3,9,-3,9], dtype = "uint32")#candidate|755|(1950,)|const|uint32
call_754 = relay.TupleGetItem(func_85_call(relay.reshape(const_755.astype('uint32'), [10, 13, 15]), relay.reshape(const_755.astype('uint32'), [10, 13, 15]), relay.reshape(const_755.astype('uint32'), [10, 13, 15]), relay.reshape(const_755.astype('uint32'), [10, 13, 15]), ), 1)
call_756 = relay.TupleGetItem(func_91_call(relay.reshape(const_755.astype('uint32'), [10, 13, 15]), relay.reshape(const_755.astype('uint32'), [10, 13, 15]), relay.reshape(const_755.astype('uint32'), [10, 13, 15]), relay.reshape(const_755.astype('uint32'), [10, 13, 15]), ), 1)
bop_757 = relay.maximum(bop_732.astype('uint32'), relay.reshape(var_706.astype('uint32'), relay.shape_of(bop_732))) # shape=(14,)
output = relay.Tuple([bop_663,var_670,bop_707,bop_721,uop_728,uop_743,call_745,const_746,call_754,const_755,bop_757,])
output2 = relay.Tuple([bop_663,var_670,bop_707,bop_721,uop_730,uop_743,call_747,const_746,call_756,const_755,bop_757,])
func_760 = relay.Function([var_661,var_670,var_706,var_731,], output)
mod['func_760'] = func_760
mod = relay.transform.InferType()(mod)
var_761 = relay.var("var_761", dtype = "float32", shape = (14,))#candidate|761|(14,)|var|float32
var_762 = relay.var("var_762", dtype = "uint8", shape = (5, 1))#candidate|762|(5, 1)|var|uint8
var_763 = relay.var("var_763", dtype = "float64", shape = (14,))#candidate|763|(14,)|var|float64
var_764 = relay.var("var_764", dtype = "float64", shape = (14,))#candidate|764|(14,)|var|float64
output = func_760(var_761,var_762,var_763,var_764,)
func_765 = relay.Function([var_761,var_762,var_763,var_764,], output)
mutated_mod['func_765'] = func_765
mutated_mod = relay.transform.InferType()(mutated_mod)
var_911 = relay.var("var_911", dtype = "float64", shape = (9, 3))#candidate|911|(9, 3)|var|float64
uop_912 = relay.log10(var_911.astype('float64')) # shape=(9, 3)
bop_914 = relay.subtract(uop_912.astype('int64'), relay.reshape(var_911.astype('int64'), relay.shape_of(uop_912))) # shape=(9, 3)
bop_918 = relay.equal(uop_912.astype('bool'), relay.reshape(bop_914.astype('bool'), relay.shape_of(uop_912))) # shape=(9, 3)
output = bop_918
output2 = bop_918
func_921 = relay.Function([var_911,], output)
mod['func_921'] = func_921
mod = relay.transform.InferType()(mod)
var_922 = relay.var("var_922", dtype = "float64", shape = (9, 3))#candidate|922|(9, 3)|var|float64
output = func_921(var_922)
func_923 = relay.Function([var_922], output)
mutated_mod['func_923'] = func_923
mutated_mod = relay.transform.InferType()(mutated_mod)
var_936 = relay.var("var_936", dtype = "uint64", shape = (4, 14, 8))#candidate|936|(4, 14, 8)|var|uint64
var_937 = relay.var("var_937", dtype = "uint64", shape = (4, 14, 8))#candidate|937|(4, 14, 8)|var|uint64
bop_938 = relay.bitwise_xor(var_936.astype('uint64'), relay.reshape(var_937.astype('uint64'), relay.shape_of(var_936))) # shape=(4, 14, 8)
bop_941 = relay.subtract(var_937.astype('uint32'), relay.reshape(var_936.astype('uint32'), relay.shape_of(var_937))) # shape=(4, 14, 8)
bop_946 = relay.logical_and(var_937.astype('bool'), relay.reshape(bop_938.astype('bool'), relay.shape_of(var_937))) # shape=(4, 14, 8)
uop_950 = relay.atanh(var_936.astype('float32')) # shape=(4, 14, 8)
func_210_call = mod.get_global_var('func_210')
func_214_call = mutated_mod.get_global_var('func_214')
const_961 = relay.const([-1,-2,1,8,-1,-9,2,9,-4,-1,6,-7,5,-1,3], dtype = "int16")#candidate|961|(15,)|const|int16
call_960 = relay.TupleGetItem(func_210_call(relay.reshape(const_961.astype('int16'), [3, 5]), relay.reshape(const_961.astype('int16'), [3, 5]), ), 0)
call_962 = relay.TupleGetItem(func_214_call(relay.reshape(const_961.astype('int16'), [3, 5]), relay.reshape(const_961.astype('int16'), [3, 5]), ), 0)
bop_963 = relay.logical_or(bop_946.astype('bool'), relay.reshape(uop_950.astype('bool'), relay.shape_of(bop_946))) # shape=(4, 14, 8)
uop_968 = relay.tan(bop_963.astype('float32')) # shape=(4, 14, 8)
var_970 = relay.var("var_970", dtype = "bool", shape = (4, 14, 8))#candidate|970|(4, 14, 8)|var|bool
bop_971 = relay.floor_mod(bop_963.astype('float32'), relay.reshape(var_970.astype('float32'), relay.shape_of(bop_963))) # shape=(4, 14, 8)
uop_975 = relay.cos(uop_968.astype('float64')) # shape=(4, 14, 8)
func_85_call = mod.get_global_var('func_85')
func_91_call = mutated_mod.get_global_var('func_91')
var_978 = relay.var("var_978", dtype = "uint32", shape = (1950,))#candidate|978|(1950,)|var|uint32
call_977 = relay.TupleGetItem(func_85_call(relay.reshape(var_978.astype('uint32'), [10, 13, 15]), relay.reshape(var_978.astype('uint32'), [10, 13, 15]), relay.reshape(var_978.astype('uint32'), [10, 13, 15]), relay.reshape(var_978.astype('uint32'), [10, 13, 15]), ), 3)
call_979 = relay.TupleGetItem(func_91_call(relay.reshape(var_978.astype('uint32'), [10, 13, 15]), relay.reshape(var_978.astype('uint32'), [10, 13, 15]), relay.reshape(var_978.astype('uint32'), [10, 13, 15]), relay.reshape(var_978.astype('uint32'), [10, 13, 15]), ), 3)
var_980 = relay.var("var_980", dtype = "float64", shape = (4, 14, 8))#candidate|980|(4, 14, 8)|var|float64
bop_981 = relay.power(uop_975.astype('float32'), relay.reshape(var_980.astype('float32'), relay.shape_of(uop_975))) # shape=(4, 14, 8)
output = relay.Tuple([bop_941,call_960,const_961,bop_971,call_977,var_978,bop_981,])
output2 = relay.Tuple([bop_941,call_962,const_961,bop_971,call_979,var_978,bop_981,])
func_984 = relay.Function([var_936,var_937,var_970,var_978,var_980,], output)
mod['func_984'] = func_984
mod = relay.transform.InferType()(mod)
mutated_mod['func_984'] = func_984
mutated_mod = relay.transform.InferType()(mutated_mod)
func_984_call = mutated_mod.get_global_var('func_984')
var_986 = relay.var("var_986", dtype = "uint64", shape = (4, 14, 8))#candidate|986|(4, 14, 8)|var|uint64
var_987 = relay.var("var_987", dtype = "uint64", shape = (4, 14, 8))#candidate|987|(4, 14, 8)|var|uint64
var_988 = relay.var("var_988", dtype = "bool", shape = (4, 14, 8))#candidate|988|(4, 14, 8)|var|bool
var_989 = relay.var("var_989", dtype = "uint32", shape = (1950,))#candidate|989|(1950,)|var|uint32
var_990 = relay.var("var_990", dtype = "float64", shape = (4, 14, 8))#candidate|990|(4, 14, 8)|var|float64
call_985 = func_984_call(var_986,var_987,var_988,var_989,var_990,)
output = call_985
func_991 = relay.Function([var_986,var_987,var_988,var_989,var_990,], output)
mutated_mod['func_991'] = func_991
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1016 = relay.var("var_1016", dtype = "float64", shape = (3, 16))#candidate|1016|(3, 16)|var|float64
uop_1017 = relay.log10(var_1016.astype('float64')) # shape=(3, 16)
bop_1019 = relay.minimum(var_1016.astype('uint64'), relay.reshape(uop_1017.astype('uint64'), relay.shape_of(var_1016))) # shape=(3, 16)
uop_1022 = relay.cosh(uop_1017.astype('float32')) # shape=(3, 16)
output = relay.Tuple([bop_1019,uop_1022,])
output2 = relay.Tuple([bop_1019,uop_1022,])
func_1028 = relay.Function([var_1016,], output)
mod['func_1028'] = func_1028
mod = relay.transform.InferType()(mod)
var_1029 = relay.var("var_1029", dtype = "float64", shape = (3, 16))#candidate|1029|(3, 16)|var|float64
output = func_1028(var_1029)
func_1030 = relay.Function([var_1029], output)
mutated_mod['func_1030'] = func_1030
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1069 = relay.var("var_1069", dtype = "float64", shape = (12, 11))#candidate|1069|(12, 11)|var|float64
uop_1070 = relay.cos(var_1069.astype('float64')) # shape=(12, 11)
uop_1080 = relay.exp(uop_1070.astype('float32')) # shape=(12, 11)
uop_1084 = relay.sqrt(uop_1080.astype('float64')) # shape=(12, 11)
func_760_call = mod.get_global_var('func_760')
func_765_call = mutated_mod.get_global_var('func_765')
var_1087 = relay.var("var_1087", dtype = "float32", shape = (1, 14))#candidate|1087|(1, 14)|var|float32
var_1088 = relay.var("var_1088", dtype = "uint8", shape = (1, 5))#candidate|1088|(1, 5)|var|uint8
call_1086 = relay.TupleGetItem(func_760_call(relay.reshape(var_1087.astype('float32'), [14,]), relay.reshape(var_1088.astype('uint8'), [5, 1]), relay.reshape(var_1087.astype('float64'), [14,]), relay.reshape(var_1087.astype('float64'), [14,]), ), 6)
call_1089 = relay.TupleGetItem(func_765_call(relay.reshape(var_1087.astype('float32'), [14,]), relay.reshape(var_1088.astype('uint8'), [5, 1]), relay.reshape(var_1087.astype('float64'), [14,]), relay.reshape(var_1087.astype('float64'), [14,]), ), 6)
uop_1091 = relay.acosh(uop_1080.astype('float32')) # shape=(12, 11)
output = relay.Tuple([uop_1084,call_1086,var_1087,var_1088,uop_1091,])
output2 = relay.Tuple([uop_1084,call_1089,var_1087,var_1088,uop_1091,])
func_1094 = relay.Function([var_1069,var_1087,var_1088,], output)
mod['func_1094'] = func_1094
mod = relay.transform.InferType()(mod)
var_1095 = relay.var("var_1095", dtype = "float64", shape = (12, 11))#candidate|1095|(12, 11)|var|float64
var_1096 = relay.var("var_1096", dtype = "float32", shape = (1, 14))#candidate|1096|(1, 14)|var|float32
var_1097 = relay.var("var_1097", dtype = "uint8", shape = (1, 5))#candidate|1097|(1, 5)|var|uint8
output = func_1094(var_1095,var_1096,var_1097,)
func_1098 = relay.Function([var_1095,var_1096,var_1097,], output)
mutated_mod['func_1098'] = func_1098
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1229 = relay.const([[6.150994,2.125945,3.589326,-3.047888,1.055674,-7.277680,-7.007543,-6.946381,-6.795379,4.633076,9.873851,-4.024123,7.998426,-2.961806],[-5.165888,1.754797,-4.501207,6.889781,-0.889848,1.057348,-3.551500,7.808450,8.896855,-2.799439,4.424271,-7.534067,-2.739784,9.214530],[-7.585172,0.431775,-2.643340,-6.830858,-5.407924,-6.466947,-1.005820,-5.901170,9.301782,6.225532,4.212993,0.276243,9.031041,3.141570],[-0.807369,9.709118,-4.709084,2.274997,5.170306,7.888499,-6.051940,-1.818380,-6.547512,1.393939,-2.224620,-1.004426,-6.221923,-6.329815],[2.743186,2.484516,0.175907,-3.556756,-1.436370,-9.683352,8.111289,3.561563,2.416671,-0.152953,-9.195716,5.608936,-6.507251,-2.206899],[1.260372,-7.314344,-6.467485,-7.700360,7.378303,0.503620,9.345597,0.644757,5.211131,-5.571759,9.641089,-7.555915,-9.491894,-6.559622],[0.871506,8.997657,-5.651139,7.720448,6.488706,-1.726694,-9.689887,-0.325956,8.844912,9.471591,-6.158436,5.852043,-7.074135,4.182010],[8.641204,-6.031343,-6.661569,-3.194081,1.105007,7.085995,2.273227,2.517276,0.378936,4.178155,-5.779658,-3.410203,-5.818267,-6.686978],[3.382140,6.103251,1.052664,-3.520996,3.698622,-1.116282,-5.700113,-5.589598,2.325613,-2.657752,3.404142,6.237109,-4.373003,2.905021]], dtype = "float64")#candidate|1229|(9, 14)|const|float64
uop_1230 = relay.acos(const_1229.astype('float64')) # shape=(9, 14)
output = uop_1230
output2 = uop_1230
func_1232 = relay.Function([], output)
mod['func_1232'] = func_1232
mod = relay.transform.InferType()(mod)
output = func_1232()
func_1233 = relay.Function([], output)
mutated_mod['func_1233'] = func_1233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1232_call = mod.get_global_var('func_1232')
func_1233_call = mutated_mod.get_global_var('func_1233')
call_1239 = func_1232_call()
call_1240 = func_1232_call()
output = call_1239
output2 = call_1240
func_1247 = relay.Function([], output)
mod['func_1247'] = func_1247
mod = relay.transform.InferType()(mod)
output = func_1247()
func_1248 = relay.Function([], output)
mutated_mod['func_1248'] = func_1248
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1247_call = mod.get_global_var('func_1247')
func_1248_call = mutated_mod.get_global_var('func_1248')
call_1253 = func_1247_call()
call_1254 = func_1247_call()
output = call_1253
output2 = call_1254
func_1264 = relay.Function([], output)
mod['func_1264'] = func_1264
mod = relay.transform.InferType()(mod)
mutated_mod['func_1264'] = func_1264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1264_call = mutated_mod.get_global_var('func_1264')
call_1265 = func_1264_call()
output = call_1265
func_1266 = relay.Function([], output)
mutated_mod['func_1266'] = func_1266
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1274 = relay.var("var_1274", dtype = "uint64", shape = (8, 11, 13))#candidate|1274|(8, 11, 13)|var|uint64
var_1275 = relay.var("var_1275", dtype = "uint64", shape = (8, 11, 13))#candidate|1275|(8, 11, 13)|var|uint64
bop_1276 = relay.multiply(var_1274.astype('uint64'), relay.reshape(var_1275.astype('uint64'), relay.shape_of(var_1274))) # shape=(8, 11, 13)
output = bop_1276
output2 = bop_1276
func_1280 = relay.Function([var_1274,var_1275,], output)
mod['func_1280'] = func_1280
mod = relay.transform.InferType()(mod)
mutated_mod['func_1280'] = func_1280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1280_call = mutated_mod.get_global_var('func_1280')
var_1282 = relay.var("var_1282", dtype = "uint64", shape = (8, 11, 13))#candidate|1282|(8, 11, 13)|var|uint64
var_1283 = relay.var("var_1283", dtype = "uint64", shape = (8, 11, 13))#candidate|1283|(8, 11, 13)|var|uint64
call_1281 = func_1280_call(var_1282,var_1283,)
output = call_1281
func_1284 = relay.Function([var_1282,var_1283,], output)
mutated_mod['func_1284'] = func_1284
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1232_call = mod.get_global_var('func_1232')
func_1233_call = mutated_mod.get_global_var('func_1233')
call_1288 = func_1232_call()
call_1289 = func_1232_call()
uop_1293 = relay.cosh(call_1288.astype('float32')) # shape=(9, 14)
uop_1295 = relay.cosh(call_1289.astype('float32')) # shape=(9, 14)
uop_1300 = relay.asin(uop_1293.astype('float32')) # shape=(9, 14)
uop_1302 = relay.asin(uop_1295.astype('float32')) # shape=(9, 14)
func_116_call = mod.get_global_var('func_116')
func_119_call = mutated_mod.get_global_var('func_119')
var_1306 = relay.var("var_1306", dtype = "float32", shape = (13, 13))#candidate|1306|(13, 13)|var|float32
call_1305 = func_116_call(relay.reshape(var_1306.astype('float32'), [13, 13]))
call_1307 = func_116_call(relay.reshape(var_1306.astype('float32'), [13, 13]))
bop_1310 = relay.equal(uop_1300.astype('bool'), relay.reshape(uop_1293.astype('bool'), relay.shape_of(uop_1300))) # shape=(9, 14)
bop_1313 = relay.equal(uop_1302.astype('bool'), relay.reshape(uop_1295.astype('bool'), relay.shape_of(uop_1302))) # shape=(9, 14)
bop_1319 = relay.right_shift(bop_1310.astype('int8'), relay.reshape(uop_1300.astype('int8'), relay.shape_of(bop_1310))) # shape=(9, 14)
bop_1322 = relay.right_shift(bop_1313.astype('int8'), relay.reshape(uop_1302.astype('int8'), relay.shape_of(bop_1313))) # shape=(9, 14)
output = relay.Tuple([call_1305,var_1306,bop_1319,])
output2 = relay.Tuple([call_1307,var_1306,bop_1322,])
func_1326 = relay.Function([var_1306,], output)
mod['func_1326'] = func_1326
mod = relay.transform.InferType()(mod)
mutated_mod['func_1326'] = func_1326
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1327 = relay.var("var_1327", dtype = "float32", shape = (13, 13))#candidate|1327|(13, 13)|var|float32
func_1326_call = mutated_mod.get_global_var('func_1326')
call_1328 = func_1326_call(var_1327)
output = call_1328
func_1329 = relay.Function([var_1327], output)
mutated_mod['func_1329'] = func_1329
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1264_call = mod.get_global_var('func_1264')
func_1266_call = mutated_mod.get_global_var('func_1266')
call_1394 = func_1264_call()
call_1395 = func_1264_call()
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
const_1433 = relay.const([-1.132589,3.227680,1.201739,1.046798,0.034148,3.812506,4.480849,8.916329,-7.836835,-9.173274,3.170323,1.645968,2.725155,5.089382,-5.761433,-8.713703,-2.793461,2.722826,-0.953432,-6.861649,5.248343,1.998484,-8.290142,5.494039,3.299859,6.624538,-6.597608], dtype = "float64")#candidate|1433|(27,)|const|float64
call_1432 = func_921_call(relay.reshape(const_1433.astype('float64'), [9, 3]))
call_1434 = func_921_call(relay.reshape(const_1433.astype('float64'), [9, 3]))
output = relay.Tuple([call_1394,call_1432,const_1433,])
output2 = relay.Tuple([call_1395,call_1434,const_1433,])
func_1443 = relay.Function([], output)
mod['func_1443'] = func_1443
mod = relay.transform.InferType()(mod)
output = func_1443()
func_1444 = relay.Function([], output)
mutated_mod['func_1444'] = func_1444
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1462 = relay.var("var_1462", dtype = "float32", shape = (8,))#candidate|1462|(8,)|var|float32
uop_1463 = relay.sqrt(var_1462.astype('float32')) # shape=(8,)
func_210_call = mod.get_global_var('func_210')
func_214_call = mutated_mod.get_global_var('func_214')
const_1466 = relay.const([-1,-1,7,5,3,5,3,-6,2,-8,9,-7,5,2,-5], dtype = "int16")#candidate|1466|(15,)|const|int16
call_1465 = relay.TupleGetItem(func_210_call(relay.reshape(const_1466.astype('int16'), [3, 5]), relay.reshape(const_1466.astype('int16'), [3, 5]), ), 1)
call_1467 = relay.TupleGetItem(func_214_call(relay.reshape(const_1466.astype('int16'), [3, 5]), relay.reshape(const_1466.astype('int16'), [3, 5]), ), 1)
func_613_call = mod.get_global_var('func_613')
func_617_call = mutated_mod.get_global_var('func_617')
var_1472 = relay.var("var_1472", dtype = "int64", shape = (728, 4))#candidate|1472|(728, 4)|var|int64
call_1471 = relay.TupleGetItem(func_613_call(relay.reshape(var_1472.astype('int64'), [13, 16, 14]), relay.reshape(var_1472.astype('int64'), [13, 16, 14]), ), 0)
call_1473 = relay.TupleGetItem(func_617_call(relay.reshape(var_1472.astype('int64'), [13, 16, 14]), relay.reshape(var_1472.astype('int64'), [13, 16, 14]), ), 0)
uop_1474 = relay.tan(uop_1463.astype('float64')) # shape=(8,)
bop_1481 = relay.logical_xor(uop_1474.astype('int8'), relay.reshape(uop_1463.astype('int8'), relay.shape_of(uop_1474))) # shape=(8,)
bop_1486 = relay.power(call_1471.astype('float64'), relay.reshape(var_1472.astype('float64'), relay.shape_of(call_1471))) # shape=(13, 16, 14)
bop_1489 = relay.power(call_1473.astype('float64'), relay.reshape(var_1472.astype('float64'), relay.shape_of(call_1473))) # shape=(13, 16, 14)
var_1490 = relay.var("var_1490", dtype = "float32", shape = (8,))#candidate|1490|(8,)|var|float32
bop_1491 = relay.logical_or(uop_1463.astype('bool'), relay.reshape(var_1490.astype('bool'), relay.shape_of(uop_1463))) # shape=(8,)
func_382_call = mod.get_global_var('func_382')
func_385_call = mutated_mod.get_global_var('func_385')
var_1497 = relay.var("var_1497", dtype = "float32", shape = (140,))#candidate|1497|(140,)|var|float32
call_1496 = func_382_call(relay.reshape(var_1497.astype('float32'), [14, 10]), relay.reshape(var_1497.astype('float32'), [14, 10]), )
call_1498 = func_382_call(relay.reshape(var_1497.astype('float32'), [14, 10]), relay.reshape(var_1497.astype('float32'), [14, 10]), )
var_1499 = relay.var("var_1499", dtype = "bool", shape = (8,))#candidate|1499|(8,)|var|bool
bop_1500 = relay.less(bop_1491.astype('bool'), relay.reshape(var_1499.astype('bool'), relay.shape_of(bop_1491))) # shape=(8,)
bop_1503 = relay.add(uop_1463.astype('uint32'), relay.reshape(var_1499.astype('uint32'), relay.shape_of(uop_1463))) # shape=(8,)
uop_1506 = relay.log10(bop_1503.astype('float32')) # shape=(8,)
output = relay.Tuple([call_1465,const_1466,bop_1481,bop_1486,call_1496,var_1497,bop_1500,uop_1506,])
output2 = relay.Tuple([call_1467,const_1466,bop_1481,bop_1489,call_1498,var_1497,bop_1500,uop_1506,])
F = relay.Function([var_1462,var_1472,var_1490,var_1497,var_1499,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1462,var_1472,var_1490,var_1497,var_1499,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1462= np.array([8.883688,7.692379,-4.490403,-9.970807,0.861090,-2.330113,9.862785,2.038639], dtype='float32')
module1.set_input('var_1462', input_1462)
input_1472= np.array([[3,5,5,-6],[-5,-8,5,7],[9,2,8,-2],[2,-1,4,10],[-6,-3,-3,8],[10,-8,5,3],[-1,-4,1,-1],[-3,-9,-8,4],[-3,5,-4,4],[8,-8,-7,7],[-8,-8,8,-3],[2,5,10,-4],[-6,1,-3,-5],[8,3,4,3],[10,2,-1,-8],[8,2,5,-3],[6,-3,10,9],[-1,3,-4,-9],[10,-4,-8,-3],[-8,-4,-3,-7],[2,10,-8,-4],[-1,6,5,-10],[9,-5,6,3],[5,10,8,-10],[7,-4,7,6],[5,3,-7,5],[7,-3,8,-1],[-7,2,10,6],[10,-4,10,-6],[2,-6,-2,-7],[1,-6,-7,-3],[-9,10,6,7],[-7,-4,-3,-3],[10,5,2,-5],[-3,-1,9,5],[-6,-7,10,-10],[-7,8,-7,-6],[-2,-10,-5,5],[-7,8,-10,-6],[-7,-1,-9,8],[7,7,-8,-10],[-5,5,7,-10],[8,-10,3,5],[9,9,-6,5],[4,7,6,-2],[-10,-3,-9,-9],[2,-3,5,5],[3,1,2,3],[7,-7,1,-4],[-6,-8,-1,-2],[-8,8,-5,5],[-8,7,10,7],[4,-10,3,4],[2,-6,10,-8],[5,2,-10,9],[-3,9,8,3],[-9,-5,-9,-4],[2,6,10,-2],[1,-6,-3,10],[-1,1,6,-1],[1,7,-6,2],[1,-2,1,5],[-10,-4,5,-10],[4,8,-7,5],[5,-9,1,1],[-9,-4,-8,4],[-1,2,-2,-4],[4,-8,-1,1],[3,6,-3,-9],[-1,3,-1,9],[5,7,4,6],[5,10,-5,1],[3,5,8,8],[-4,-1,8,-6],[-3,-10,6,6],[-8,-9,-9,2],[-10,8,10,7],[7,-8,10,-7],[6,-2,3,-6],[-4,5,-5,-5],[-5,-5,9,8],[2,10,-9,6],[4,10,6,10],[10,3,-6,2],[-9,8,-1,-3],[-2,4,10,9],[-8,1,6,1],[-1,-5,3,8],[-6,-2,-3,-9],[-8,8,-5,-1],[-7,-6,-8,-1],[3,3,5,10],[10,-8,8,7],[4,-3,-2,1],[-9,-4,-4,-5],[3,3,-1,-9],[8,1,-7,-2],[-4,10,-1,7],[8,8,-8,-10],[-3,7,7,-5],[3,1,-6,1],[-9,-8,-1,-4],[-8,-2,-7,7],[7,-4,-2,-1],[4,-7,6,2],[10,-8,7,-2],[8,1,-8,5],[-4,2,-7,1],[5,-2,5,-6],[6,-5,-8,1],[-5,-1,-3,-8],[5,-1,1,2],[9,4,-1,-8],[-4,1,-2,-10],[-7,9,7,-4],[-7,3,-6,-3],[2,-8,10,2],[-9,-10,7,7],[10,1,3,-10],[-10,-10,9,-1],[3,-5,-3,8],[10,-4,-7,1],[9,3,-7,4],[-5,6,-8,-6],[-4,5,-8,1],[3,4,-8,-5],[7,1,-2,-1],[-9,-10,4,1],[7,-7,-1,2],[6,3,-1,1],[8,-1,-6,7],[1,-6,3,3],[5,6,10,1],[-4,-10,-3,-4],[-4,1,-9,-7],[6,-5,3,3],[-10,6,-7,-8],[1,7,-2,7],[5,-5,-8,5],[10,-7,10,2],[8,-1,-5,7],[8,2,-4,5],[-8,-4,-5,-10],[-8,9,-8,-7],[-9,1,-9,1],[-2,-7,-3,4],[5,8,6,4],[-7,-4,-5,1],[-1,-9,-1,-10],[-5,-9,-1,10],[2,5,-5,4],[3,-7,10,2],[10,-4,4,-6],[-10,1,-10,9],[-8,4,5,-7],[7,-9,-2,8],[4,5,-5,1],[7,-1,3,-3],[-4,4,2,-10],[-5,-5,1,1],[7,-5,6,-2],[-8,-2,-2,-9],[9,-6,7,1],[4,-1,1,-10],[7,-5,-1,-5],[-9,-7,-9,5],[-4,-10,-6,4],[-7,5,-8,-8],[-10,5,-7,10],[7,-7,6,6],[-5,-2,5,3],[3,-10,4,-4],[-9,8,1,-4],[-7,-7,-4,-4],[9,-10,-4,-8],[10,7,-6,-10],[2,-2,8,-3],[8,-10,3,1],[-2,8,-3,-2],[-4,9,-10,4],[-7,-8,6,-9],[-1,7,5,-8],[9,2,10,-5],[2,4,-10,-7],[9,-3,-5,9],[1,2,6,-2],[5,6,-7,2],[2,-5,-6,-3],[-8,-10,-9,10],[7,-8,1,-7],[-6,-4,4,4],[1,10,4,2],[8,-4,1,8],[8,-4,-8,7],[-3,-6,-6,3],[-2,5,-6,7],[-7,2,-4,9],[-6,1,3,5],[1,-5,4,4],[-2,-1,4,-2],[-8,2,-5,-4],[-3,5,4,-1],[5,-2,5,6],[-3,-6,4,9],[-4,-6,1,2],[-6,9,8,5],[-8,-2,-10,-10],[5,1,6,5],[-4,-1,-10,8],[-9,-6,-7,-2],[-5,-9,5,10],[-5,-1,-5,-3],[7,2,4,-5],[-7,1,9,10],[-10,-1,-8,4],[3,8,-4,-5],[-4,10,10,-2],[6,2,9,-1],[3,-5,-2,8],[-6,1,7,5],[-6,-9,10,-3],[7,2,-9,6],[-5,-7,-1,10],[1,-9,9,10],[-9,-2,-2,-5],[-10,6,10,-5],[2,1,5,3],[5,4,8,-1],[-3,-7,-8,6],[1,-1,-2,5],[-6,-9,8,-9],[-6,6,7,10],[-2,6,9,-10],[-4,3,-7,1],[-5,-8,-4,7],[-10,-3,-2,-8],[10,-4,8,1],[-7,7,3,1],[10,-2,-6,4],[1,6,10,8],[10,1,8,-9],[6,-2,3,6],[3,-10,4,7],[-3,1,-9,-7],[10,6,-10,6],[-2,-5,-10,-10],[9,-3,8,-10],[-5,6,9,10],[3,-9,2,1],[2,10,-6,-6],[-2,8,9,1],[-9,5,-2,5],[-2,10,-10,9],[-4,-5,-1,5],[-9,3,1,1],[3,-5,-2,4],[-7,-1,3,2],[-1,8,-9,3],[-6,-8,-2,-4],[-5,-4,1,3],[10,8,6,-1],[-8,-6,3,-7],[-10,5,-3,7],[-2,-7,8,-3],[-5,-2,-3,-7],[5,10,-7,-9],[1,6,-5,-4],[-5,9,2,-4],[5,10,-2,-2],[2,-4,-10,-3],[7,7,-6,8],[-1,-7,-1,3],[-8,5,-2,4],[9,-3,3,10],[-7,3,-7,5],[7,2,-2,3],[10,9,-5,5],[4,-4,4,-6],[-10,-6,-9,-6],[4,4,3,-7],[5,4,-10,-5],[7,-9,5,3],[8,4,-2,-4],[8,-2,5,-5],[-5,2,8,-10],[-9,5,6,-1],[9,2,6,8],[5,-5,1,-3],[-9,-4,4,-1],[2,-9,5,-5],[-5,-6,4,-5],[5,-1,1,5],[-9,-6,-10,6],[-2,2,-4,4],[3,-2,-5,8],[-6,8,-3,9],[9,-4,4,-3],[-4,-4,2,-2],[7,6,9,-3],[2,-6,2,8],[-1,-2,-2,-1],[-10,7,-4,-8],[2,-4,5,8],[9,-6,-9,4],[-5,-5,3,-5],[3,-4,-10,-8],[4,3,-9,1],[-5,1,-9,6],[-5,-3,8,-1],[10,8,8,4],[7,-3,10,-6],[-9,1,-4,-6],[-7,-7,-6,6],[4,8,9,1],[-1,4,-8,-10],[-7,-7,-7,10],[-1,-3,-5,-3],[-4,-8,6,10],[-6,1,-3,3],[2,-1,-2,-7],[9,-7,10,3],[4,-6,3,-8],[-8,-4,-9,-3],[6,4,-6,-10],[2,1,-9,5],[-6,-4,4,-1],[-10,-5,2,4],[1,-8,10,4],[-5,-3,9,-10],[6,5,3,-6],[3,-3,-9,-4],[4,9,-8,-5],[8,-9,-3,-2],[-10,-3,-5,7],[-8,4,9,10],[-10,5,-2,4],[8,6,2,-4],[-9,7,-4,3],[-7,1,-4,9],[-10,5,7,-1],[-1,-8,-7,5],[-9,-1,9,9],[10,3,-1,-10],[-7,2,-2,-10],[-1,8,-1,3],[7,5,7,-3],[-3,1,-7,6],[5,9,-2,2],[7,1,-3,10],[-8,6,-8,-2],[-5,7,-5,-9],[3,-2,7,8],[6,-4,4,10],[10,9,5,2],[-8,4,-2,-6],[1,9,3,-3],[-5,-9,2,4],[5,1,7,-2],[2,8,8,-8],[3,-6,5,7],[-6,-2,8,-10],[9,5,-5,-3],[-4,1,-7,1],[-8,-8,6,-6],[6,1,-4,-6],[-2,-1,9,-2],[-4,-3,3,3],[-2,-6,-8,3],[10,7,6,-7],[6,5,-3,-8],[-3,-10,-6,-8],[3,9,8,-9],[-9,-2,-2,5],[-8,-5,1,-10],[4,-9,-2,-9],[4,-10,1,1],[-6,6,4,5],[-2,-5,-2,7],[2,6,-6,-10],[-2,-3,8,2],[-10,1,10,6],[-6,6,5,-6],[9,2,7,-6],[-10,2,6,1],[4,8,10,7],[6,-6,7,7],[-1,1,-10,-7],[-7,-10,6,-9],[-5,-6,2,1],[-7,8,-6,-9],[-5,-7,9,-5],[6,1,7,2],[-6,7,2,-5],[-4,4,-9,10],[-5,-7,2,3],[7,10,4,8],[-10,8,-4,2],[8,-9,-1,1],[6,10,-9,-6],[7,-2,7,10],[4,1,1,-7],[1,5,3,-8],[3,-6,1,3],[-9,-10,5,-6],[-10,-9,2,9],[2,-5,-2,-3],[-1,1,5,3],[-9,10,4,4],[-3,-4,-9,-10],[9,-5,10,-7],[-10,-6,-2,-9],[-1,4,-7,9],[1,6,-6,-10],[-4,7,-2,-7],[-5,-7,2,-8],[7,10,10,5],[-1,-9,7,-4],[-4,-7,5,1],[8,7,-6,-5],[-6,-8,-4,-6],[-3,-6,6,-5],[8,9,5,3],[9,-5,4,-9],[-7,-7,-9,-10],[9,7,3,-8],[-2,-8,6,-2],[1,10,-7,8],[-6,-5,-7,9],[8,-3,-8,5],[5,-6,-5,6],[6,-3,-4,5],[3,7,4,8],[-4,4,-10,-9],[-10,-8,5,-1],[1,-6,-3,5],[10,10,9,-7],[-8,2,-7,5],[-10,-2,-10,-8],[7,5,4,9],[-3,-1,4,-5],[6,-2,-2,2],[-3,-9,-9,1],[-2,7,-6,3],[3,4,-9,-2],[10,-1,3,4],[-10,-7,1,-5],[4,-8,-8,2],[4,-9,-6,-9],[-6,-9,-6,5],[6,-4,-1,8],[3,-8,9,-10],[-7,-6,-3,9],[7,-10,-1,-8],[-8,3,-3,7],[-9,7,-6,-10],[10,-5,-3,4],[-2,-1,-9,9],[-3,-1,3,6],[-4,1,2,4],[-7,6,-5,8],[-5,10,1,-3],[2,-3,-3,-9],[2,6,1,-9],[-9,8,5,1],[8,4,-3,-4],[-3,1,7,-3],[-2,-6,-1,3],[8,-5,-9,3],[-10,-7,-7,9],[1,8,-2,1],[-1,6,10,1],[-1,2,-5,-7],[5,-9,6,-4],[7,-7,2,2],[-2,5,-6,-3],[5,6,4,4],[-7,2,10,-2],[-8,8,6,-3],[-6,2,7,8],[-3,-1,-8,-6],[9,-10,-4,7],[-3,9,-5,-8],[1,5,-7,9],[9,-7,-6,-4],[1,-5,8,4],[-9,1,-5,4],[-10,5,2,-1],[5,-8,1,5],[7,6,2,-7],[2,2,8,7],[-7,-7,-8,9],[-6,-2,2,10],[7,-5,5,9],[-9,-7,9,6],[8,-4,-4,8],[4,9,-9,-5],[5,7,-1,9],[9,8,-2,5],[-8,6,6,1],[8,-5,-9,5],[-2,5,-3,5],[4,2,-8,8],[8,7,10,3],[8,-4,10,-2],[-4,-6,-5,8],[6,5,-9,-9],[7,-2,-4,2],[4,-10,5,-9],[-10,3,7,5],[3,7,-1,10],[10,2,6,-7],[-9,-7,8,-3],[-10,-4,-10,-2],[8,-5,-4,6],[5,-10,-3,-3],[4,7,3,-2],[6,2,6,-9],[3,-3,8,-3],[-1,-8,-1,-9],[9,9,-5,7],[-9,-9,4,9],[-3,4,-4,-6],[1,-9,3,1],[3,-5,1,2],[-2,-4,9,4],[8,3,9,6],[5,4,5,-1],[-5,9,-8,-7],[3,9,-7,-4],[-4,-8,10,3],[-1,-3,-2,7],[1,-7,-8,-1],[8,-3,-4,-1],[-7,1,2,3],[1,-2,-10,-2],[8,10,-4,6],[-3,-6,-9,-5],[-3,-6,-8,-8],[4,-2,10,3],[-3,-3,6,-6],[10,5,-8,-8],[7,-6,10,6],[6,8,3,-6],[-6,3,10,-10],[1,2,6,-10],[3,-9,-10,8],[-2,1,-10,2],[-8,8,4,10],[1,-5,-3,9],[-1,-2,-1,4],[-7,-1,-6,2],[7,1,8,-7],[5,-6,-6,-6],[-1,-7,-9,10],[-10,4,3,7],[8,1,1,-4],[9,7,-7,4],[3,2,4,9],[-2,-7,1,-3],[6,-4,2,-5],[10,-10,-7,4],[-6,6,-8,-4],[-10,-5,7,-9],[-4,9,-2,8],[-6,-6,-3,-5],[-9,-8,7,-9],[-3,9,2,2],[-10,-3,5,4],[-10,-4,-1,3],[-9,-8,5,5],[-10,9,-10,-10],[-3,-5,-6,8],[9,10,-1,1],[8,-8,7,-10],[-6,10,3,10],[-7,-2,4,-1],[-2,-3,6,4],[-5,6,6,8],[-8,-9,10,-4],[-2,10,-6,9],[3,-10,-7,-2],[7,-4,-5,-4],[-3,-1,10,-2],[2,10,-2,-6],[10,4,2,-2],[6,-1,-8,-4],[-8,6,2,2],[-9,-2,1,5],[-5,1,-7,-6],[8,-5,-4,9],[-6,2,10,-2],[8,9,-5,3],[5,9,6,6],[5,-4,2,1],[-8,-6,6,-9],[-3,6,-5,7],[-2,4,2,-5],[1,5,5,-1],[-8,-3,-4,-3],[-1,4,7,-5],[-10,8,-9,10],[-4,-3,-1,-2],[-1,5,9,4],[-6,-5,-4,1],[-1,5,-4,10],[-7,9,-9,-9],[7,-6,2,6],[10,1,4,-7],[3,-5,-4,6],[-9,-3,7,-9],[-6,1,-6,-7],[8,2,2,-9],[1,3,-10,-9],[6,-9,6,7],[4,-1,5,-9],[-10,7,10,8],[-1,-7,1,-1],[-9,-2,-8,-6],[-9,3,9,-6],[-2,-10,10,-4],[-8,-1,-8,-6],[3,-4,6,-3],[9,8,-7,8],[7,2,5,-8],[6,1,-10,-10],[2,-3,-6,-3],[2,4,6,-9],[-9,2,-6,6],[-8,3,-4,4],[-1,-4,5,1],[-9,-9,8,-7],[8,10,10,3],[4,9,-2,-4],[9,-7,7,4],[-4,10,8,8],[1,-9,5,10],[-9,-9,-3,2],[-3,8,9,-8],[2,5,-7,9],[3,8,9,9],[-8,-7,-3,3],[-9,8,3,-1],[3,-9,10,-10],[-6,-1,8,-1],[10,9,8,-9],[-5,3,2,4],[-1,-8,3,-4],[-10,-1,8,-7],[1,-2,-10,-4],[-8,4,4,-5],[-3,5,-3,-2],[-7,1,7,4],[6,7,-6,10],[1,-2,-1,9],[2,-1,-7,7],[-8,-9,-8,4],[-8,-9,-3,6],[2,8,-7,-9],[-3,5,5,-3],[-10,-9,5,2],[4,8,10,-3],[4,-8,-8,-1],[1,-2,5,9],[-10,-4,10,10],[7,3,-2,2],[8,8,-10,9],[-2,-6,-8,4],[3,-7,-6,-9],[7,-10,10,4],[3,4,-10,5],[-5,8,-7,-5],[10,5,9,7],[-8,4,3,6],[1,-1,2,-10],[8,4,10,-6],[-1,4,-7,-5],[-10,-2,10,-10],[7,-1,-7,8],[1,-1,-1,-9],[9,4,4,10],[-2,-8,-2,3],[-10,-8,7,2],[-10,-9,9,-7],[1,4,-3,-3],[7,-5,-10,8],[-3,6,-6,8],[-1,-9,4,1],[-7,3,7,5],[7,-5,-8,-6],[-1,3,-3,3],[9,-6,-2,-10],[-10,-1,9,5],[5,3,-4,6],[-5,5,1,2],[4,3,-5,-4],[-6,-3,8,10],[-1,7,-4,-3],[2,-7,-7,-3],[6,-6,-10,7],[-5,2,-10,9],[7,-7,8,2],[-9,3,9,-9],[-3,-8,-7,-9],[-5,8,-3,-7],[2,3,-5,10],[-5,1,8,-1],[-9,3,3,-8],[3,8,-2,8],[10,-2,8,10],[-4,9,5,4],[-8,9,9,2],[5,9,4,1],[-1,-8,6,4],[10,-3,-3,8],[2,-3,-7,2],[-4,9,-10,-1],[-5,2,8,3],[-9,-5,-5,-2],[-10,-9,-9,-7],[2,8,-8,3],[-9,-7,10,4],[-10,10,2,2],[8,-9,4,7],[-5,8,-5,9],[5,-10,7,4],[5,-3,-7,-10],[-10,-9,8,10],[4,-7,10,-2]], dtype='int64')
module1.set_input('var_1472', input_1472)
input_1490= np.array([4.090000,6.517432,-6.579393,7.323625,-0.181890,1.984905,3.308846,-8.607872], dtype='float32')
module1.set_input('var_1490', input_1490)
input_1497= np.array([-9.125784,9.356389,2.949597,-5.379173,5.032087,-8.182795,-1.085254,-7.996139,-9.464362,-1.533135,0.753697,0.507853,6.591369,4.008620,0.089897,-4.780268,0.608171,3.194697,-8.184925,7.167364,2.813522,1.598262,-6.458425,6.260897,-4.399468,5.653341,-7.378829,2.315592,-0.032648,-6.709746,-9.566645,7.382626,1.652023,-2.651161,-8.845065,6.275521,7.976072,5.507184,-3.058683,-7.480919,6.442499,9.682915,0.170196,9.178381,6.657828,0.461455,-8.667472,6.892030,-1.067449,3.439628,9.351283,-1.898909,-7.704001,5.348856,6.615828,3.101572,1.169891,-5.413281,5.553976,-4.808624,6.203907,-3.807648,-5.650074,7.075405,5.917070,-0.069696,4.425596,2.805281,-8.775248,9.088417,5.864807,-8.021227,4.302141,2.627497,-2.347825,2.198490,2.403097,-7.986993,0.108599,-9.273540,-5.839998,-0.349649,-5.974155,9.208309,-4.924550,-7.826185,9.987150,-3.803711,3.911210,7.797169,-9.376458,5.157760,-8.635641,4.527496,-7.196298,-9.975881,-2.528013,-1.417476,1.454668,-3.807035,-0.164087,7.642221,5.675669,-9.908883,6.103434,9.338732,-6.813261,2.005207,-3.270940,0.497679,7.015521,7.884313,-5.811328,-4.637873,-5.480202,7.790838,0.171675,-7.775195,-9.153514,9.937266,0.491469,2.933406,7.526028,-8.699389,-3.025821,-2.987068,-1.566178,3.313598,-4.395348,-1.605405,-7.077304,7.161152,-0.561192,3.689963,6.756942,-8.382063,5.639209,-1.297926,-7.325134,-6.560190], dtype='float32')
module1.set_input('var_1497', input_1497)
input_1499= np.array([True,True,True,False,False,False,False,False], dtype='bool')
module1.set_input('var_1499', input_1499)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res3 = intrp3.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res4 = intrp4.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_1462', input_1462)
module5.set_input('var_1472', input_1472)
module5.set_input('var_1490', input_1490)
module5.set_input('var_1497', input_1497)
module5.set_input('var_1499', input_1499)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res7 = intrp7.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res8 = intrp8.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_1462', input_1462)
module9.set_input('var_1472', input_1472)
module9.set_input('var_1490', input_1490)
module9.set_input('var_1497', input_1497)
module9.set_input('var_1499', input_1499)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res11 = intrp11.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res12 = intrp12.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_1462', input_1462)
module13.set_input('var_1472', input_1472)
module13.set_input('var_1490', input_1490)
module13.set_input('var_1497', input_1497)
module13.set_input('var_1499', input_1499)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res15 = intrp15.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res16 = intrp16.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_1462', input_1462)
module17.set_input('var_1472', input_1472)
module17.set_input('var_1490', input_1490)
module17.set_input('var_1497', input_1497)
module17.set_input('var_1499', input_1499)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res19 = intrp19.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res20 = intrp20.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_1462', input_1462)
module21.set_input('var_1472', input_1472)
module21.set_input('var_1490', input_1490)
module21.set_input('var_1497', input_1497)
module21.set_input('var_1499', input_1499)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res23 = intrp23.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res24 = intrp24.evaluate()(input_1462, input_1472, input_1490, input_1497, input_1499, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''