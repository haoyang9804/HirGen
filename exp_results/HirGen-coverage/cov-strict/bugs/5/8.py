import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_51 = relay.var("var_51", dtype = "float32", shape = (16, 7, 1))#candidate|51|(16, 7, 1)|var|float32
uop_52 = relay.exp(var_51.astype('float32')) # shape=(16, 7, 1)
bop_62 = relay.less(uop_52.astype('bool'), relay.reshape(var_51.astype('bool'), relay.shape_of(uop_52))) # shape=(16, 7, 1)
bop_65 = relay.divide(var_51.astype('float64'), relay.reshape(bop_62.astype('float64'), relay.shape_of(var_51))) # shape=(16, 7, 1)
uop_68 = relay.sinh(uop_52.astype('float64')) # shape=(16, 7, 1)
output = relay.Tuple([bop_65,uop_68,])
output2 = relay.Tuple([bop_65,uop_68,])
func_71 = relay.Function([var_51,], output)
mod['func_71'] = func_71
mod = relay.transform.InferType()(mod)
var_72 = relay.var("var_72", dtype = "float32", shape = (16, 7, 1))#candidate|72|(16, 7, 1)|var|float32
output = func_71(var_72)
func_73 = relay.Function([var_72], output)
mutated_mod['func_73'] = func_73
mutated_mod = relay.transform.InferType()(mutated_mod)
var_136 = relay.var("var_136", dtype = "int8", shape = (6, 12, 11))#candidate|136|(6, 12, 11)|var|int8
var_137 = relay.var("var_137", dtype = "int8", shape = (6, 12, 11))#candidate|137|(6, 12, 11)|var|int8
bop_138 = relay.bitwise_xor(var_136.astype('int8'), relay.reshape(var_137.astype('int8'), relay.shape_of(var_136))) # shape=(6, 12, 11)
func_71_call = mod.get_global_var('func_71')
func_73_call = mutated_mod.get_global_var('func_73')
const_144 = relay.const([-9.267654,-9.723259,-4.814196,-1.852564,-0.054323,2.661691,-2.732357,3.381812,3.110401,-3.495288,8.004132,9.114259,-4.265292,9.154543,-8.653449,5.362620,6.496766,-4.271530,6.695358,-7.609194,-0.918690,2.906557,5.649105,4.504250,-5.001813,-0.474110,0.813161,8.599753,0.854977,3.779869,-7.162601,-6.737099,0.290853,2.841514,-3.552576,-6.872366,-2.325768,6.696577,-5.920513,-9.788105,-8.189775,-5.271699,-7.634437,8.802510,9.737472,5.159949,-5.792490,7.700256,-2.523490,-1.789052,1.148626,1.407519,-0.392315,4.231563,4.068566,-5.158450,8.801389,-4.277694,-0.050490,7.760730,-0.848118,-4.717635,4.960818,-7.323762,-4.410012,-1.021520,0.089902,4.999410,-1.305025,-6.859275,-9.362133,-5.319825,-5.155660,5.664256,-9.991959,-5.112516,9.240235,7.719252,-2.656085,-2.287309,-8.488939,-4.341132,2.841514,-5.798912,2.611771,4.655613,5.319210,2.215925,-5.226084,-4.677123,7.970231,-7.779941,9.651376,3.965976,4.038950,1.343471,-4.197786,-5.283185,2.157366,-0.442311,8.741017,7.444883,8.393584,-5.659498,7.109980,-4.182849,3.714899,-0.225261,6.563558,1.773744,3.442203,-9.493432], dtype = "float32")#candidate|144|(112,)|const|float32
call_143 = relay.TupleGetItem(func_71_call(relay.reshape(const_144.astype('float32'), [16, 7, 1])), 1)
call_145 = relay.TupleGetItem(func_73_call(relay.reshape(const_144.astype('float32'), [16, 7, 1])), 1)
bop_149 = relay.divide(bop_138.astype('float64'), relay.reshape(var_137.astype('float64'), relay.shape_of(bop_138))) # shape=(6, 12, 11)
var_161 = relay.var("var_161", dtype = "int8", shape = (6, 12, 11))#candidate|161|(6, 12, 11)|var|int8
bop_162 = relay.right_shift(bop_138.astype('int32'), relay.reshape(var_161.astype('int32'), relay.shape_of(bop_138))) # shape=(6, 12, 11)
uop_173 = relay.sinh(bop_162.astype('float64')) # shape=(6, 12, 11)
output = relay.Tuple([call_143,const_144,bop_149,uop_173,])
output2 = relay.Tuple([call_145,const_144,bop_149,uop_173,])
func_178 = relay.Function([var_136,var_137,var_161,], output)
mod['func_178'] = func_178
mod = relay.transform.InferType()(mod)
var_179 = relay.var("var_179", dtype = "int8", shape = (6, 12, 11))#candidate|179|(6, 12, 11)|var|int8
var_180 = relay.var("var_180", dtype = "int8", shape = (6, 12, 11))#candidate|180|(6, 12, 11)|var|int8
var_181 = relay.var("var_181", dtype = "int8", shape = (6, 12, 11))#candidate|181|(6, 12, 11)|var|int8
output = func_178(var_179,var_180,var_181,)
func_182 = relay.Function([var_179,var_180,var_181,], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_227 = relay.var("var_227", dtype = "int32", shape = (4, 2, 13))#candidate|227|(4, 2, 13)|var|int32
var_228 = relay.var("var_228", dtype = "int32", shape = (4, 2, 13))#candidate|228|(4, 2, 13)|var|int32
bop_229 = relay.logical_xor(var_227.astype('int32'), relay.reshape(var_228.astype('int32'), relay.shape_of(var_227))) # shape=(4, 2, 13)
uop_232 = relay.sigmoid(bop_229.astype('float32')) # shape=(4, 2, 13)
output = uop_232
output2 = uop_232
func_237 = relay.Function([var_227,var_228,], output)
mod['func_237'] = func_237
mod = relay.transform.InferType()(mod)
var_238 = relay.var("var_238", dtype = "int32", shape = (4, 2, 13))#candidate|238|(4, 2, 13)|var|int32
var_239 = relay.var("var_239", dtype = "int32", shape = (4, 2, 13))#candidate|239|(4, 2, 13)|var|int32
output = func_237(var_238,var_239,)
func_240 = relay.Function([var_238,var_239,], output)
mutated_mod['func_240'] = func_240
mutated_mod = relay.transform.InferType()(mutated_mod)
const_271 = relay.const([[[8,-2],[-7,1],[5,-8],[-3,-10],[-5,2],[7,8],[9,-4],[-10,10],[-2,1],[9,9],[-1,-6],[-4,-3],[-7,8],[10,1]]], dtype = "uint16")#candidate|271|(1, 14, 2)|const|uint16
const_272 = relay.const([[[-2,8],[9,4],[1,-3],[9,7],[-8,-4],[-7,-8],[4,2],[-9,-5],[-10,-5],[-2,10],[-6,4],[-8,-1],[-2,-7],[-7,-6]],[[3,10],[-7,-7],[9,5],[-2,-5],[-9,-4],[-9,-3],[-1,2],[5,10],[-9,4],[-7,-2],[-2,6],[-1,4],[1,7],[2,-5]],[[-10,2],[-6,-5],[-5,1],[-9,-6],[10,-7],[-6,-3],[9,-1],[9,8],[10,7],[4,-10],[-3,1],[-4,7],[3,-6],[-6,-8]],[[-10,8],[2,1],[5,9],[-3,8],[-2,2],[-10,-3],[-2,3],[-10,5],[-9,-9],[6,-6],[-9,-10],[-6,10],[1,-5],[8,5]],[[-6,10],[-9,-6],[-7,-3],[7,5],[2,10],[-6,-7],[2,-8],[-9,2],[9,-1],[-8,-1],[2,-9],[-1,6],[-10,3],[-7,-10]],[[2,9],[9,9],[7,10],[-9,-2],[5,9],[-8,1],[-1,1],[-5,-7],[9,10],[-1,-7],[1,6],[8,-2],[-1,-9],[7,-6]],[[-4,-6],[-8,-8],[1,4],[-9,8],[8,-1],[-4,-1],[5,4],[10,10],[-7,-3],[-9,1],[-8,-10],[5,8],[-4,4],[-3,2]]], dtype = "uint16")#candidate|272|(7, 14, 2)|const|uint16
bop_273 = relay.greater(const_271.astype('bool'), const_272.astype('bool')) # shape=(7, 14, 2)
func_237_call = mod.get_global_var('func_237')
func_240_call = mutated_mod.get_global_var('func_240')
var_277 = relay.var("var_277", dtype = "int32", shape = (104,))#candidate|277|(104,)|var|int32
call_276 = func_237_call(relay.reshape(var_277.astype('int32'), [4, 2, 13]), relay.reshape(var_277.astype('int32'), [4, 2, 13]), )
call_278 = func_237_call(relay.reshape(var_277.astype('int32'), [4, 2, 13]), relay.reshape(var_277.astype('int32'), [4, 2, 13]), )
bop_284 = relay.mod(const_271.astype('float32'), bop_273.astype('float32')) # shape=(7, 14, 2)
output = relay.Tuple([call_276,var_277,bop_284,])
output2 = relay.Tuple([call_278,var_277,bop_284,])
func_306 = relay.Function([var_277,], output)
mod['func_306'] = func_306
mod = relay.transform.InferType()(mod)
mutated_mod['func_306'] = func_306
mutated_mod = relay.transform.InferType()(mutated_mod)
var_307 = relay.var("var_307", dtype = "int32", shape = (104,))#candidate|307|(104,)|var|int32
func_306_call = mutated_mod.get_global_var('func_306')
call_308 = func_306_call(var_307)
output = call_308
func_309 = relay.Function([var_307], output)
mutated_mod['func_309'] = func_309
mutated_mod = relay.transform.InferType()(mutated_mod)
const_513 = relay.const([[1,9,5,-1,-6,3,-10,5],[-2,5,-2,3,-2,-1,9,8],[5,3,1,-1,2,6,2,-7]], dtype = "int32")#candidate|513|(3, 8)|const|int32
var_514 = relay.var("var_514", dtype = "int32", shape = (3, 8))#candidate|514|(3, 8)|var|int32
bop_515 = relay.logical_xor(const_513.astype('int32'), relay.reshape(var_514.astype('int32'), relay.shape_of(const_513))) # shape=(3, 8)
func_178_call = mod.get_global_var('func_178')
func_182_call = mutated_mod.get_global_var('func_182')
const_521 = relay.const([[-7,8,1,2,1,1,-8,-9,5,-4,3,1,7,-3,-3,4,10,-8,4,-10,-1,5,4,-10,5,-1,9,8,-7,5,-8,10,4,10,-5,5,3,-7,-5,-5,10,9,-10,-5,10,5,-10,-7,-4,-2,-7,-6,8,7,-10,-4,-10,10,-1,-5,5,-10,-8,9,4,-10,2,-1,-1,4,1,-4,10,-1,10,-4,7,-2,-3,-6,4,-9,-1,-7,-9,4,8,10,-1,-2,6,-8,2,-9,-10,-3,8,9,2,-2,6,10,-3,3,-3,6,1,-4,1,7,8,-4,-9,8,8,2,-7,7,5,5,-4,-5,3,7,5,-5,-1,-9,-3,-4,6,-4,-8,-4,-2,-1,10,-1,-7,6,10,3,2,6,9,-6,-5,10,3,8,-3,-2,-5,5,-1,4,-2,-7,-8,-8,2,-4,6,4,-7,5,-1,2,-9,-10,8,6,-10,6,5,-5,-10,3,2,-5,10,-1,-6,9,-2,10,2,1,8,-9,1,-7,2,7,7,-3,2,10,-6,5,-7,-9,-10,10,-8,-8,-3,-2,-7,9,2,3,-5,-4,-1,1,6,8,10,4,6,-9,-1,6,-1,-3,8,-7,-8,-5,1,-6,6,3,-1,6,-2,-10,7,10,2,10,-7,6,9,-4,-9,-7,6,3,-8,-9,-3,3,5,-7,-7,9,-4,-9,6,3,-8,10,-10,-5,1,1,1,3,7,2,-7,-8,-6,3,-4,7,5,-10,-2,5,9,9,-10,-7,-4,-1,-2,1,-7,9,-1,5,-8,4,10,-7,-5,-10,-1,-2,-5,-6,-3,4,3,3,-4,3,3,-3,-5,1,-7,5,-7,-4,3,9,9,7,-7,-8,-9,2,-8,-7,5,3,9,1,8,-8,7,6,-9,10,3,8,10,-4,-6,1,10,-5,-3,-7,-6,-1,-2,-1,-8,-8,2,3,-7,10,9,-7,5,-10,-2,1,-1,1,9,-4,-4,10,-10,5,1,3,7,10,3,4,6,3,8,-1,-5,-4,9,2,6,-7,5,8,9,7,10,9,-7,-5],[4,1,-1,8,-10,9,10,-2,7,10,-10,2,-8,-5,-1,9,-6,-7,-9,7,7,-5,6,-3,-9,-3,-10,8,3,-3,4,2,-4,9,5,-1,3,-1,-3,-2,-9,-1,9,7,5,-6,1,10,-6,9,4,6,-5,-6,5,-3,4,-5,5,3,-1,-8,-7,-10,-5,8,8,-7,-3,5,1,-2,2,-6,-9,-5,-9,5,-1,-3,-3,-8,-5,7,-7,5,10,5,-7,9,1,6,-8,8,-7,10,1,2,4,-3,-2,9,8,-4,-4,-8,-8,4,7,-7,-2,6,-6,9,-8,9,1,-3,-3,-3,-9,-3,-7,-5,1,-1,-9,-8,5,-5,10,-6,3,1,8,4,-6,6,-3,2,-1,9,-1,-6,-4,3,6,-8,-9,-4,4,-4,-4,6,1,3,2,-3,9,-1,-2,-9,-4,-5,8,9,9,2,6,-3,7,-9,8,-4,-3,1,9,-2,-9,-5,-10,6,-2,5,10,6,-1,-8,9,5,-7,7,-6,-9,8,1,10,9,8,9,9,-5,10,-9,-5,1,1,-8,-9,-4,-10,-6,2,2,7,-10,-9,-9,6,8,-4,-3,-10,-4,5,7,4,-6,9,8,1,2,-1,-9,-9,-10,9,-10,4,6,-3,-7,-6,-3,2,1,-9,3,4,-1,-8,-7,-4,-4,10,-10,-4,-10,-9,-5,8,4,7,-9,7,5,3,-4,9,-7,-9,4,3,6,-8,-3,-5,4,-4,4,-5,9,-4,-6,3,4,10,7,-3,-5,4,-7,-7,-2,6,-4,-8,10,8,-5,-1,2,8,-7,4,1,-4,-8,9,-1,7,-9,-8,5,7,6,-10,1,10,8,-2,6,5,-4,-4,-3,-10,-6,-1,4,-2,8,-9,-1,-7,-6,5,-2,6,7,10,-2,4,1,-10,5,-5,5,2,-6,-4,5,-6,2,-2,3,10,-4,-5,10,-10,-7,-10,1,-8,-8,-9,4,9,-9,-6,2,-10,-2,1,-8,1,-6,-8,10,3,-10,2,-10,-3,-1,-1,-9,-1,-6,5,5,-9,-4,9,-3]], dtype = "int8")#candidate|521|(2, 396)|const|int8
call_520 = relay.TupleGetItem(func_178_call(relay.reshape(const_521.astype('int8'), [6, 12, 11]), relay.reshape(const_521.astype('int8'), [6, 12, 11]), relay.reshape(const_521.astype('int8'), [6, 12, 11]), ), 3)
call_522 = relay.TupleGetItem(func_182_call(relay.reshape(const_521.astype('int8'), [6, 12, 11]), relay.reshape(const_521.astype('int8'), [6, 12, 11]), relay.reshape(const_521.astype('int8'), [6, 12, 11]), ), 3)
output = relay.Tuple([bop_515,call_520,const_521,])
output2 = relay.Tuple([bop_515,call_522,const_521,])
func_523 = relay.Function([var_514,], output)
mod['func_523'] = func_523
mod = relay.transform.InferType()(mod)
var_524 = relay.var("var_524", dtype = "int32", shape = (3, 8))#candidate|524|(3, 8)|var|int32
output = func_523(var_524)
func_525 = relay.Function([var_524], output)
mutated_mod['func_525'] = func_525
mutated_mod = relay.transform.InferType()(mutated_mod)
var_565 = relay.var("var_565", dtype = "float64", shape = (12, 10))#candidate|565|(12, 10)|var|float64
var_566 = relay.var("var_566", dtype = "float64", shape = (12, 10))#candidate|566|(12, 10)|var|float64
bop_567 = relay.power(var_565.astype('float64'), relay.reshape(var_566.astype('float64'), relay.shape_of(var_565))) # shape=(12, 10)
func_523_call = mod.get_global_var('func_523')
func_525_call = mutated_mod.get_global_var('func_525')
var_576 = relay.var("var_576", dtype = "int32", shape = (24,))#candidate|576|(24,)|var|int32
call_575 = relay.TupleGetItem(func_523_call(relay.reshape(var_576.astype('int32'), [3, 8])), 1)
call_577 = relay.TupleGetItem(func_525_call(relay.reshape(var_576.astype('int32'), [3, 8])), 1)
output = relay.Tuple([bop_567,call_575,var_576,])
output2 = relay.Tuple([bop_567,call_577,var_576,])
func_593 = relay.Function([var_565,var_566,var_576,], output)
mod['func_593'] = func_593
mod = relay.transform.InferType()(mod)
mutated_mod['func_593'] = func_593
mutated_mod = relay.transform.InferType()(mutated_mod)
func_593_call = mutated_mod.get_global_var('func_593')
var_595 = relay.var("var_595", dtype = "float64", shape = (12, 10))#candidate|595|(12, 10)|var|float64
var_596 = relay.var("var_596", dtype = "float64", shape = (12, 10))#candidate|596|(12, 10)|var|float64
var_597 = relay.var("var_597", dtype = "int32", shape = (24,))#candidate|597|(24,)|var|int32
call_594 = func_593_call(var_595,var_596,var_597,)
output = call_594
func_598 = relay.Function([var_595,var_596,var_597,], output)
mutated_mod['func_598'] = func_598
mutated_mod = relay.transform.InferType()(mutated_mod)
const_648 = relay.constdtype = "float32")#candidate|648|(15, 10, 12)|const|float32
uop_649 = relay.exp(const_648.astype('float32')) # shape=(15, 10, 12)
func_593_call = mod.get_global_var('func_593')
func_598_call = mutated_mod.get_global_var('func_598')
const_652 = relay.const([-3.751948,9.128209,8.501011,0.115124,0.218939,-1.116106,-7.378296,-9.402638,5.987722,-1.513813,9.752194,9.603856,-3.010286,1.978991,-7.998205,-8.259607,-6.712287,-9.898995,6.594151,-4.622564,4.608306,-9.764937,5.701197,-7.240567,-2.601088,-9.092319,-2.402184,2.928507,-2.986905,4.678181,-0.592043,9.105524,5.696740,-5.558100,-5.841659,7.167914,1.317785,7.275359,-4.666999,-8.527107,-4.459508,-2.965808,-3.229819,-6.574286,-6.929826,-2.177085,5.017562,6.400386,6.911367,3.670503,-2.027390,0.024912,-3.623025,-2.029655,2.297535,1.248100,0.818563,-4.540426,2.105346,-1.666584,-9.495751,1.726472,2.819615,-0.968408,-4.818521,-4.896137,-6.627949,1.044146,-6.941651,4.307567,-0.758932,9.428898,-6.096444,6.853233,-5.499473,3.384865,-0.200532,-0.899928,-4.609616,-3.492966,-1.840693,0.171794,2.093842,-1.163093,2.850001,6.653481,-1.424101,6.530764,-9.296466,2.813813,3.187365,-1.631393,7.974140,0.997261,5.221838,-6.841321,-6.442476,7.258807,-6.845619,1.033550,8.539542,7.887058,9.109366,9.726650,-3.594290,2.517411,0.870191,4.444810,-3.885624,-4.455057,6.694300,-9.345177,9.474166,8.760246,5.076491,7.024307,5.173307,-0.011546,1.437748,-5.508614], dtype = "float64")#candidate|652|(120,)|const|float64
const_653 = relay.const([6,-8,-10,-1,-8,-9,5,9,-2,3,8,-5,7,3,6,-5,-10,3,7,7,2,-8,-5,-1], dtype = "int32")#candidate|653|(24,)|const|int32
call_651 = relay.TupleGetItem(func_593_call(relay.reshape(const_652.astype('float64'), [12, 10]), relay.reshape(const_652.astype('float64'), [12, 10]), relay.reshape(const_653.astype('int32'), [24,]), ), 1)
call_654 = relay.TupleGetItem(func_598_call(relay.reshape(const_652.astype('float64'), [12, 10]), relay.reshape(const_652.astype('float64'), [12, 10]), relay.reshape(const_653.astype('int32'), [24,]), ), 1)
func_237_call = mod.get_global_var('func_237')
func_240_call = mutated_mod.get_global_var('func_240')
var_669 = relay.var("var_669", dtype = "int32", shape = (104, 1))#candidate|669|(104, 1)|var|int32
call_668 = func_237_call(relay.reshape(var_669.astype('int32'), [4, 2, 13]), relay.reshape(var_669.astype('int32'), [4, 2, 13]), )
call_670 = func_237_call(relay.reshape(var_669.astype('int32'), [4, 2, 13]), relay.reshape(var_669.astype('int32'), [4, 2, 13]), )
output = relay.Tuple([uop_649,call_651,const_652,const_653,call_668,var_669,])
output2 = relay.Tuple([uop_649,call_654,const_652,const_653,call_670,var_669,])
func_672 = relay.Function([var_669,], output)
mod['func_672'] = func_672
mod = relay.transform.InferType()(mod)
var_673 = relay.var("var_673", dtype = "int32", shape = (104, 1))#candidate|673|(104, 1)|var|int32
output = func_672(var_673)
func_674 = relay.Function([var_673], output)
mutated_mod['func_674'] = func_674
mutated_mod = relay.transform.InferType()(mutated_mod)
var_835 = relay.var("var_835", dtype = "float32", shape = (3, 12, 8))#candidate|835|(3, 12, 8)|var|float32
uop_836 = relay.sqrt(var_835.astype('float32')) # shape=(3, 12, 8)
bop_838 = relay.multiply(var_835.astype('uint64'), relay.reshape(uop_836.astype('uint64'), relay.shape_of(var_835))) # shape=(3, 12, 8)
bop_844 = relay.less_equal(var_835.astype('bool'), relay.reshape(bop_838.astype('bool'), relay.shape_of(var_835))) # shape=(3, 12, 8)
bop_850 = relay.greater(uop_836.astype('bool'), relay.reshape(bop_844.astype('bool'), relay.shape_of(uop_836))) # shape=(3, 12, 8)
uop_854 = relay.atan(bop_850.astype('float32')) # shape=(3, 12, 8)
uop_860 = relay.asin(uop_854.astype('float64')) # shape=(3, 12, 8)
uop_867 = relay.exp(uop_860.astype('float32')) # shape=(3, 12, 8)
bop_869 = relay.add(uop_867.astype('float64'), relay.reshape(uop_854.astype('float64'), relay.shape_of(uop_867))) # shape=(3, 12, 8)
func_593_call = mod.get_global_var('func_593')
func_598_call = mutated_mod.get_global_var('func_598')
var_873 = relay.var("var_873", dtype = "float64", shape = (120,))#candidate|873|(120,)|var|float64
const_874 = relay.const([-3,-9,-9,10,1,10,2,-7,-8,7,8,-5,10,-5,-10,-2,-5,10,1,1,1,3,-9,-8], dtype = "int32")#candidate|874|(24,)|const|int32
call_872 = relay.TupleGetItem(func_593_call(relay.reshape(var_873.astype('float64'), [12, 10]), relay.reshape(var_873.astype('float64'), [12, 10]), relay.reshape(const_874.astype('int32'), [24,]), ), 0)
call_875 = relay.TupleGetItem(func_598_call(relay.reshape(var_873.astype('float64'), [12, 10]), relay.reshape(var_873.astype('float64'), [12, 10]), relay.reshape(const_874.astype('int32'), [24,]), ), 0)
bop_876 = relay.floor_divide(bop_869.astype('float32'), relay.reshape(uop_854.astype('float32'), relay.shape_of(bop_869))) # shape=(3, 12, 8)
uop_882 = relay.atanh(uop_867.astype('float64')) # shape=(3, 12, 8)
func_306_call = mod.get_global_var('func_306')
func_309_call = mutated_mod.get_global_var('func_309')
var_892 = relay.var("var_892", dtype = "int32", shape = (2, 52))#candidate|892|(2, 52)|var|int32
call_891 = relay.TupleGetItem(func_306_call(relay.reshape(var_892.astype('int32'), [104,])), 0)
call_893 = relay.TupleGetItem(func_309_call(relay.reshape(var_892.astype('int32'), [104,])), 0)
uop_895 = relay.erf(uop_882.astype('float32')) # shape=(3, 12, 8)
output = relay.Tuple([call_872,var_873,const_874,bop_876,call_891,var_892,uop_895,])
output2 = relay.Tuple([call_875,var_873,const_874,bop_876,call_893,var_892,uop_895,])
func_899 = relay.Function([var_835,var_873,var_892,], output)
mod['func_899'] = func_899
mod = relay.transform.InferType()(mod)
var_900 = relay.var("var_900", dtype = "float32", shape = (3, 12, 8))#candidate|900|(3, 12, 8)|var|float32
var_901 = relay.var("var_901", dtype = "float64", shape = (120,))#candidate|901|(120,)|var|float64
var_902 = relay.var("var_902", dtype = "int32", shape = (2, 52))#candidate|902|(2, 52)|var|int32
output = func_899(var_900,var_901,var_902,)
func_903 = relay.Function([var_900,var_901,var_902,], output)
mutated_mod['func_903'] = func_903
mutated_mod = relay.transform.InferType()(mutated_mod)
var_924 = relay.var("var_924", dtype = "bool", shape = ())#candidate|924|()|var|bool
var_925 = relay.var("var_925", dtype = "bool", shape = (10, 8))#candidate|925|(10, 8)|var|bool
bop_926 = relay.logical_and(var_924.astype('bool'), var_925.astype('bool')) # shape=(10, 8)
uop_931 = relay.sin(bop_926.astype('float32')) # shape=(10, 8)
output = relay.Tuple([uop_931,])
output2 = relay.Tuple([uop_931,])
func_937 = relay.Function([var_924,var_925,], output)
mod['func_937'] = func_937
mod = relay.transform.InferType()(mod)
mutated_mod['func_937'] = func_937
mutated_mod = relay.transform.InferType()(mutated_mod)
func_937_call = mutated_mod.get_global_var('func_937')
var_939 = relay.var("var_939", dtype = "bool", shape = ())#candidate|939|()|var|bool
var_940 = relay.var("var_940", dtype = "bool", shape = (10, 8))#candidate|940|(10, 8)|var|bool
call_938 = func_937_call(var_939,var_940,)
output = call_938
func_941 = relay.Function([var_939,var_940,], output)
mutated_mod['func_941'] = func_941
mutated_mod = relay.transform.InferType()(mutated_mod)
var_943 = relay.var("var_943", dtype = "int32", shape = (11, 8, 1))#candidate|943|(11, 8, 1)|var|int32
var_944 = relay.var("var_944", dtype = "int32", shape = (11, 8, 12))#candidate|944|(11, 8, 12)|var|int32
bop_945 = relay.less_equal(var_943.astype('bool'), var_944.astype('bool')) # shape=(11, 8, 12)
var_953 = relay.var("var_953", dtype = "bool", shape = (11, 8, 12))#candidate|953|(11, 8, 12)|var|bool
bop_954 = relay.minimum(bop_945.astype('uint8'), relay.reshape(var_953.astype('uint8'), relay.shape_of(bop_945))) # shape=(11, 8, 12)
func_237_call = mod.get_global_var('func_237')
func_240_call = mutated_mod.get_global_var('func_240')
var_961 = relay.var("var_961", dtype = "int32", shape = (104,))#candidate|961|(104,)|var|int32
call_960 = func_237_call(relay.reshape(var_961.astype('int32'), [4, 2, 13]), relay.reshape(var_961.astype('int32'), [4, 2, 13]), )
call_962 = func_237_call(relay.reshape(var_961.astype('int32'), [4, 2, 13]), relay.reshape(var_961.astype('int32'), [4, 2, 13]), )
bop_963 = relay.logical_and(bop_945.astype('bool'), relay.reshape(var_953.astype('bool'), relay.shape_of(bop_945))) # shape=(11, 8, 12)
bop_966 = relay.multiply(var_944.astype('int64'), relay.reshape(bop_954.astype('int64'), relay.shape_of(var_944))) # shape=(11, 8, 12)
uop_970 = relay.log(bop_945.astype('float64')) # shape=(11, 8, 12)
output = relay.Tuple([call_960,var_961,bop_963,bop_966,uop_970,])
output2 = relay.Tuple([call_962,var_961,bop_963,bop_966,uop_970,])
func_973 = relay.Function([var_943,var_944,var_953,var_961,], output)
mod['func_973'] = func_973
mod = relay.transform.InferType()(mod)
var_974 = relay.var("var_974", dtype = "int32", shape = (11, 8, 1))#candidate|974|(11, 8, 1)|var|int32
var_975 = relay.var("var_975", dtype = "int32", shape = (11, 8, 12))#candidate|975|(11, 8, 12)|var|int32
var_976 = relay.var("var_976", dtype = "bool", shape = (11, 8, 12))#candidate|976|(11, 8, 12)|var|bool
var_977 = relay.var("var_977", dtype = "int32", shape = (104,))#candidate|977|(104,)|var|int32
output = func_973(var_974,var_975,var_976,var_977,)
func_978 = relay.Function([var_974,var_975,var_976,var_977,], output)
mutated_mod['func_978'] = func_978
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1011 = relay.var("var_1011", dtype = "int16", shape = ())#candidate|1011|()|var|int16
const_1012 = relay.const([[-1,-10,-9,-3,-2,1,-7,1,3,-6,6,5,4],[-9,10,-10,3,9,5,-6,-10,-2,1,3,-5,2],[-3,-9,-9,-3,8,-9,5,2,9,-9,-6,-8,-6],[2,9,3,1,8,2,-8,-7,1,4,-6,-3,3],[-5,8,-1,-3,6,-2,-9,6,2,-2,-10,4,6],[6,4,1,-8,1,9,2,1,2,-4,3,-4,-8],[-8,8,-2,-5,2,6,-3,3,-2,-9,9,-4,4],[9,-2,2,-9,6,-3,-8,7,8,10,5,-6,-8],[8,8,-9,9,3,-5,-10,-4,4,-9,-5,-4,-10]], dtype = "int16")#candidate|1012|(9, 13)|const|int16
bop_1013 = relay.logical_xor(var_1011.astype('int16'), const_1012.astype('int16')) # shape=(9, 13)
bop_1019 = relay.less(const_1012.astype('bool'), var_1011.astype('bool')) # shape=(9, 13)
output = relay.Tuple([bop_1013,bop_1019,])
output2 = relay.Tuple([bop_1013,bop_1019,])
func_1029 = relay.Function([var_1011,], output)
mod['func_1029'] = func_1029
mod = relay.transform.InferType()(mod)
var_1030 = relay.var("var_1030", dtype = "int16", shape = ())#candidate|1030|()|var|int16
output = func_1029(var_1030)
func_1031 = relay.Function([var_1030], output)
mutated_mod['func_1031'] = func_1031
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1058 = relay.var("var_1058", dtype = "float32", shape = (7, 3, 7))#candidate|1058|(7, 3, 7)|var|float32
uop_1059 = relay.atan(var_1058.astype('float32')) # shape=(7, 3, 7)
output = uop_1059
output2 = uop_1059
func_1061 = relay.Function([var_1058,], output)
mod['func_1061'] = func_1061
mod = relay.transform.InferType()(mod)
var_1062 = relay.var("var_1062", dtype = "float32", shape = (7, 3, 7))#candidate|1062|(7, 3, 7)|var|float32
output = func_1061(var_1062)
func_1063 = relay.Function([var_1062], output)
mutated_mod['func_1063'] = func_1063
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1078 = relay.var("var_1078", dtype = "float64", shape = (11, 11, 6))#candidate|1078|(11, 11, 6)|var|float64
uop_1079 = relay.sqrt(var_1078.astype('float64')) # shape=(11, 11, 6)
uop_1083 = relay.atanh(uop_1079.astype('float64')) # shape=(11, 11, 6)
func_237_call = mod.get_global_var('func_237')
func_240_call = mutated_mod.get_global_var('func_240')
const_1087 = relay.const([[-5,6,-9,-9,2,-10,-7,-6,-1,-2,-1,-9,6,-3,-10,-2,-9,10,7,8,-3,4,7,6,8,-8,-1,-10,-9,-4,4,-5,-6,9,-4,-5,-5,8,-8,1,-2,-3,-6,-10,5,-7,9,2,-6,-9,9,-9],[2,8,2,5,8,7,-10,2,-10,-4,10,-4,-8,9,8,2,5,-1,-7,3,2,-3,6,8,2,-4,-10,1,3,3,-7,-3,-5,3,1,-9,-5,-5,-8,8,-5,-4,-1,2,4,7,-10,-8,-7,7,7,8]], dtype = "int32")#candidate|1087|(2, 52)|const|int32
call_1086 = func_237_call(relay.reshape(const_1087.astype('int32'), [4, 2, 13]), relay.reshape(const_1087.astype('int32'), [4, 2, 13]), )
call_1088 = func_237_call(relay.reshape(const_1087.astype('int32'), [4, 2, 13]), relay.reshape(const_1087.astype('int32'), [4, 2, 13]), )
bop_1089 = relay.multiply(uop_1083.astype('uint32'), relay.reshape(uop_1079.astype('uint32'), relay.shape_of(uop_1083))) # shape=(11, 11, 6)
output = relay.Tuple([call_1086,const_1087,bop_1089,])
output2 = relay.Tuple([call_1088,const_1087,bop_1089,])
func_1097 = relay.Function([var_1078,], output)
mod['func_1097'] = func_1097
mod = relay.transform.InferType()(mod)
var_1098 = relay.var("var_1098", dtype = "float64", shape = (11, 11, 6))#candidate|1098|(11, 11, 6)|var|float64
output = func_1097(var_1098)
func_1099 = relay.Function([var_1098], output)
mutated_mod['func_1099'] = func_1099
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1101 = relay.var("var_1101", dtype = "float64", shape = (2, 15, 15))#candidate|1101|(2, 15, 15)|var|float64
uop_1102 = relay.sinh(var_1101.astype('float64')) # shape=(2, 15, 15)
bop_1105 = relay.minimum(uop_1102.astype('uint64'), relay.reshape(var_1101.astype('uint64'), relay.shape_of(uop_1102))) # shape=(2, 15, 15)
func_1097_call = mod.get_global_var('func_1097')
func_1099_call = mutated_mod.get_global_var('func_1099')
var_1109 = relay.var("var_1109", dtype = "float64", shape = (726,))#candidate|1109|(726,)|var|float64
call_1108 = relay.TupleGetItem(func_1097_call(relay.reshape(var_1109.astype('float64'), [11, 11, 6])), 0)
call_1110 = relay.TupleGetItem(func_1099_call(relay.reshape(var_1109.astype('float64'), [11, 11, 6])), 0)
func_937_call = mod.get_global_var('func_937')
func_941_call = mutated_mod.get_global_var('func_941')
var_1112 = relay.var("var_1112", dtype = "bool", shape = ())#candidate|1112|()|var|bool
var_1113 = relay.var("var_1113", dtype = "bool", shape = (80,))#candidate|1113|(80,)|var|bool
call_1111 = relay.TupleGetItem(func_937_call(relay.reshape(var_1112.astype('bool'), []), relay.reshape(var_1113.astype('bool'), [10, 8]), ), 0)
call_1114 = relay.TupleGetItem(func_941_call(relay.reshape(var_1112.astype('bool'), []), relay.reshape(var_1113.astype('bool'), [10, 8]), ), 0)
output = relay.Tuple([bop_1105,call_1108,var_1109,call_1111,var_1112,var_1113,])
output2 = relay.Tuple([bop_1105,call_1110,var_1109,call_1114,var_1112,var_1113,])
func_1122 = relay.Function([var_1101,var_1109,var_1112,var_1113,], output)
mod['func_1122'] = func_1122
mod = relay.transform.InferType()(mod)
var_1123 = relay.var("var_1123", dtype = "float64", shape = (2, 15, 15))#candidate|1123|(2, 15, 15)|var|float64
var_1124 = relay.var("var_1124", dtype = "float64", shape = (726,))#candidate|1124|(726,)|var|float64
var_1125 = relay.var("var_1125", dtype = "bool", shape = ())#candidate|1125|()|var|bool
var_1126 = relay.var("var_1126", dtype = "bool", shape = (80,))#candidate|1126|(80,)|var|bool
output = func_1122(var_1123,var_1124,var_1125,var_1126,)
func_1127 = relay.Function([var_1123,var_1124,var_1125,var_1126,], output)
mutated_mod['func_1127'] = func_1127
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1132 = relay.var("var_1132", dtype = "float32", shape = (10, 16, 16))#candidate|1132|(10, 16, 16)|var|float32
uop_1133 = relay.acosh(var_1132.astype('float32')) # shape=(10, 16, 16)
uop_1138 = relay.erf(var_1132.astype('float64')) # shape=(10, 16, 16)
bop_1140 = relay.power(var_1132.astype('float64'), relay.reshape(uop_1138.astype('float64'), relay.shape_of(var_1132))) # shape=(10, 16, 16)
uop_1145 = relay.log(var_1132.astype('float32')) # shape=(10, 16, 16)
bop_1159 = relay.bitwise_or(uop_1133.astype('int32'), relay.reshape(uop_1138.astype('int32'), relay.shape_of(uop_1133))) # shape=(10, 16, 16)
var_1170 = relay.var("var_1170", dtype = "int32", shape = (10, 16, 16))#candidate|1170|(10, 16, 16)|var|int32
bop_1171 = relay.add(bop_1159.astype('int16'), relay.reshape(var_1170.astype('int16'), relay.shape_of(bop_1159))) # shape=(10, 16, 16)
uop_1176 = relay.asinh(bop_1159.astype('float64')) # shape=(10, 16, 16)
var_1182 = relay.var("var_1182", dtype = "float64", shape = (10, 16, 16))#candidate|1182|(10, 16, 16)|var|float64
bop_1183 = relay.logical_and(uop_1176.astype('bool'), relay.reshape(var_1182.astype('bool'), relay.shape_of(uop_1176))) # shape=(10, 16, 16)
output = relay.Tuple([bop_1140,uop_1145,bop_1171,bop_1183,])
output2 = relay.Tuple([bop_1140,uop_1145,bop_1171,bop_1183,])
func_1186 = relay.Function([var_1132,var_1170,var_1182,], output)
mod['func_1186'] = func_1186
mod = relay.transform.InferType()(mod)
var_1187 = relay.var("var_1187", dtype = "float32", shape = (10, 16, 16))#candidate|1187|(10, 16, 16)|var|float32
var_1188 = relay.var("var_1188", dtype = "int32", shape = (10, 16, 16))#candidate|1188|(10, 16, 16)|var|int32
var_1189 = relay.var("var_1189", dtype = "float64", shape = (10, 16, 16))#candidate|1189|(10, 16, 16)|var|float64
output = func_1186(var_1187,var_1188,var_1189,)
func_1190 = relay.Function([var_1187,var_1188,var_1189,], output)
mutated_mod['func_1190'] = func_1190
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1211 = relay.var("var_1211", dtype = "uint64", shape = (14, 2))#candidate|1211|(14, 2)|var|uint64
var_1212 = relay.var("var_1212", dtype = "uint64", shape = (14, 2))#candidate|1212|(14, 2)|var|uint64
bop_1213 = relay.bitwise_xor(var_1211.astype('uint64'), relay.reshape(var_1212.astype('uint64'), relay.shape_of(var_1211))) # shape=(14, 2)
const_1222 = relay.const([[-9,-8],[9,5],[2,-9],[-10,-9],[-6,-6],[-3,5],[-4,1],[10,-7],[9,5],[3,-5],[-5,6],[-1,-10],[1,1],[4,7]], dtype = "uint64")#candidate|1222|(14, 2)|const|uint64
bop_1223 = relay.minimum(var_1211.astype('int8'), relay.reshape(const_1222.astype('int8'), relay.shape_of(var_1211))) # shape=(14, 2)
bop_1228 = relay.subtract(bop_1223.astype('int16'), relay.reshape(bop_1213.astype('int16'), relay.shape_of(bop_1223))) # shape=(14, 2)
func_71_call = mod.get_global_var('func_71')
func_73_call = mutated_mod.get_global_var('func_73')
const_1239 = relay.const([-7.374107,-1.170599,-0.097256,-7.041063,7.343311,-6.073213,-9.354767,6.427007,3.923939,4.971437,5.571050,-7.599219,-3.852753,-7.357430,-3.585467,4.236247,-6.754971,6.818134,-8.772836,5.206322,0.888138,-1.127408,0.178172,2.987436,-2.230257,-2.077526,2.237127,-5.562058,6.874019,6.208828,-2.466544,-2.931736,-2.585508,9.348153,7.979404,-7.137244,5.030025,-6.130881,2.724541,7.925728,-1.195325,3.890830,-0.664215,-2.780868,-6.066996,-5.376963,-4.628880,5.102442,-9.822515,2.752904,3.811398,-1.576391,8.333632,6.458495,-2.710139,-5.846132,0.590649,-8.278136,5.455014,4.559242,-2.207731,-4.936682,-2.782359,3.833557,3.779388,-5.837446,8.573692,9.762606,-3.166790,3.769600,3.906331,0.897616,1.686201,-6.600796,-7.981763,-1.964841,8.651271,0.445288,8.091900,6.451448,-3.675347,9.343087,-7.700799,-1.696116,-1.754560,-7.594884,1.342622,-8.482981,2.892927,-8.036797,-4.748270,6.922248,5.115629,7.187428,1.597757,6.253802,-4.618673,6.739910,2.680959,5.601800,7.645689,4.614525,-5.585044,7.144079,2.470329,5.945427,9.667229,9.868523,-1.884334,1.066818,2.406367,6.072190], dtype = "float32")#candidate|1239|(112,)|const|float32
call_1238 = relay.TupleGetItem(func_71_call(relay.reshape(const_1239.astype('float32'), [16, 7, 1])), 0)
call_1240 = relay.TupleGetItem(func_73_call(relay.reshape(const_1239.astype('float32'), [16, 7, 1])), 0)
func_1029_call = mod.get_global_var('func_1029')
func_1031_call = mutated_mod.get_global_var('func_1031')
var_1245 = relay.var("var_1245", dtype = "int16", shape = ())#candidate|1245|()|var|int16
call_1244 = relay.TupleGetItem(func_1029_call(relay.reshape(var_1245.astype('int16'), [])), 0)
call_1246 = relay.TupleGetItem(func_1031_call(relay.reshape(var_1245.astype('int16'), [])), 0)
var_1254 = relay.var("var_1254", dtype = "int8", shape = (14, 2))#candidate|1254|(14, 2)|var|int8
bop_1255 = relay.logical_and(bop_1223.astype('bool'), relay.reshape(var_1254.astype('bool'), relay.shape_of(bop_1223))) # shape=(14, 2)
uop_1258 = relay.cos(const_1239.astype('float32')) # shape=(112,)
output = relay.Tuple([bop_1228,call_1238,call_1244,var_1245,bop_1255,uop_1258,])
output2 = relay.Tuple([bop_1228,call_1240,call_1246,var_1245,bop_1255,uop_1258,])
func_1262 = relay.Function([var_1211,var_1212,var_1245,var_1254,], output)
mod['func_1262'] = func_1262
mod = relay.transform.InferType()(mod)
var_1263 = relay.var("var_1263", dtype = "uint64", shape = (14, 2))#candidate|1263|(14, 2)|var|uint64
var_1264 = relay.var("var_1264", dtype = "uint64", shape = (14, 2))#candidate|1264|(14, 2)|var|uint64
var_1265 = relay.var("var_1265", dtype = "int16", shape = ())#candidate|1265|()|var|int16
var_1266 = relay.var("var_1266", dtype = "int8", shape = (14, 2))#candidate|1266|(14, 2)|var|int8
output = func_1262(var_1263,var_1264,var_1265,var_1266,)
func_1267 = relay.Function([var_1263,var_1264,var_1265,var_1266,], output)
mutated_mod['func_1267'] = func_1267
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1283 = relay.const([[6.701762,1.669308,-9.663215,-0.264618,-5.070828,8.259359,8.453891,-4.243490,9.781422,-0.851431,-6.363742,5.542275,-5.599918,-2.942734]], dtype = "float64")#candidate|1283|(1, 14)|const|float64
uop_1284 = relay.acosh(const_1283.astype('float64')) # shape=(1, 14)
uop_1289 = relay.log(uop_1284.astype('float32')) # shape=(1, 14)
output = uop_1289
output2 = uop_1289
func_1291 = relay.Function([], output)
mod['func_1291'] = func_1291
mod = relay.transform.InferType()(mod)
mutated_mod['func_1291'] = func_1291
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1291_call = mutated_mod.get_global_var('func_1291')
call_1292 = func_1291_call()
output = call_1292
func_1293 = relay.Function([], output)
mutated_mod['func_1293'] = func_1293
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1299 = relay.var("var_1299", dtype = "float32", shape = (9, 13, 14))#candidate|1299|(9, 13, 14)|var|float32
uop_1300 = relay.log(var_1299.astype('float32')) # shape=(9, 13, 14)
uop_1308 = relay.sinh(uop_1300.astype('float64')) # shape=(9, 13, 14)
uop_1310 = relay.cos(uop_1308.astype('float64')) # shape=(9, 13, 14)
output = relay.Tuple([uop_1310,])
output2 = relay.Tuple([uop_1310,])
func_1312 = relay.Function([var_1299,], output)
mod['func_1312'] = func_1312
mod = relay.transform.InferType()(mod)
var_1313 = relay.var("var_1313", dtype = "float32", shape = (9, 13, 14))#candidate|1313|(9, 13, 14)|var|float32
output = func_1312(var_1313)
func_1314 = relay.Function([var_1313], output)
mutated_mod['func_1314'] = func_1314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1291_call = mod.get_global_var('func_1291')
func_1293_call = mutated_mod.get_global_var('func_1293')
call_1344 = func_1291_call()
call_1345 = func_1291_call()
output = call_1344
output2 = call_1345
func_1348 = relay.Function([], output)
mod['func_1348'] = func_1348
mod = relay.transform.InferType()(mod)
mutated_mod['func_1348'] = func_1348
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1348_call = mutated_mod.get_global_var('func_1348')
call_1349 = func_1348_call()
output = call_1349
func_1350 = relay.Function([], output)
mutated_mod['func_1350'] = func_1350
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1388 = relay.var("var_1388", dtype = "int16", shape = ())#candidate|1388|()|var|int16
var_1389 = relay.var("var_1389", dtype = "int16", shape = (2, 4, 9))#candidate|1389|(2, 4, 9)|var|int16
bop_1390 = relay.minimum(var_1388.astype('int16'), var_1389.astype('int16')) # shape=(2, 4, 9)
output = bop_1390
output2 = bop_1390
func_1394 = relay.Function([var_1388,var_1389,], output)
mod['func_1394'] = func_1394
mod = relay.transform.InferType()(mod)
var_1395 = relay.var("var_1395", dtype = "int16", shape = ())#candidate|1395|()|var|int16
var_1396 = relay.var("var_1396", dtype = "int16", shape = (2, 4, 9))#candidate|1396|(2, 4, 9)|var|int16
output = func_1394(var_1395,var_1396,)
func_1397 = relay.Function([var_1395,var_1396,], output)
mutated_mod['func_1397'] = func_1397
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1291_call = mod.get_global_var('func_1291')
func_1293_call = mutated_mod.get_global_var('func_1293')
call_1423 = func_1291_call()
call_1424 = func_1291_call()
func_899_call = mod.get_global_var('func_899')
func_903_call = mutated_mod.get_global_var('func_903')
const_1430 = relay.const([[5.923008,9.929715,4.779355,7.523336,-4.118299,-2.956096,-3.216313,4.309931,3.199207,-5.177550,4.974474,1.334171],[-0.171025,-1.680338,3.862973,5.849265,-1.419317,-2.858090,8.943930,2.615027,1.035786,0.073321,1.523278,-6.232068],[-0.336261,1.627133,3.051033,-5.329890,-2.959736,7.572778,-7.392657,-8.243569,2.973554,-4.579131,1.232194,-4.257025],[6.817288,-2.089425,-8.795547,7.087346,-9.558448,-2.191815,1.085300,3.598477,-2.409867,3.355336,7.681766,1.214746],[-4.403585,2.248051,6.262573,7.834506,9.833818,1.654344,-6.500367,-5.628630,-6.338180,-3.069988,7.882928,8.836439],[-9.780526,-3.988585,-4.576705,-9.250048,3.016554,-5.164232,1.414608,7.782770,-9.397482,-2.988554,4.644127,7.356118],[-7.991910,-3.662393,3.241117,4.734804,-7.489532,5.453014,1.579196,-9.496689,1.914474,5.057048,-7.666784,6.679543],[1.441545,8.975933,6.978658,-7.932466,-0.347453,8.435396,-2.549178,-6.539039,6.354005,-8.156311,0.078758,3.214400],[2.194346,-1.417354,-9.921451,-0.036496,8.109555,-6.587495,-5.658853,-6.373804,9.163167,-3.012753,-5.592448,7.691016],[-4.115140,-5.781553,-3.993188,-4.907493,-6.684970,1.863558,5.659804,9.739658,0.728693,9.968783,-1.475103,-7.221511],[4.725182,-8.702470,3.308483,7.224855,2.245448,-8.682341,-3.101555,2.426994,4.366164,0.966059,7.333922,8.491248],[-4.243465,-7.397434,2.396529,4.315350,-6.406104,-1.724866,8.948313,3.594183,-3.039755,-3.558080,0.846849,1.819050],[-3.772936,5.216224,6.412624,-9.559284,5.551051,8.494114,9.724625,8.789023,-2.261457,-6.897254,-2.835789,-5.793027],[3.712508,4.349425,-3.437809,3.454255,9.175642,-3.078320,5.461559,-4.093043,-4.480740,6.771536,-6.462805,1.721779],[8.320428,-1.183318,5.946892,-0.063834,8.320417,6.073475,-1.947068,-3.128779,7.053396,7.645724,9.773404,4.185350],[4.645515,-3.180291,-7.806889,-5.724269,8.034490,2.332620,9.375120,4.991858,3.418223,-1.442584,3.274476,7.748866],[-4.367494,6.334890,-9.089327,1.838742,-4.443328,-4.703817,7.691502,-6.726768,0.407040,5.406498,5.912786,-4.849489],[-4.225911,-4.095779,6.190295,-7.301579,-3.285459,-5.261603,5.436635,-9.250318,2.731558,-5.432172,5.089746,2.250979],[-4.824486,2.005915,1.960906,-0.962938,7.831337,8.546296,-9.908017,-5.993027,1.925719,6.155795,-1.528341,-7.160136],[-5.137962,-9.185962,6.247866,8.545881,-3.337588,1.726958,-5.842872,0.806419,0.003943,-6.466002,1.278696,-9.499349],[2.073625,0.994505,-4.062092,3.747859,-2.771712,-9.222503,6.009225,4.970066,4.929001,1.788746,-6.831930,7.359849],[9.556355,8.502191,-4.445613,-3.008897,0.700493,6.747034,5.527965,2.119838,-4.573175,-3.172494,4.697060,7.730497],[-4.040914,-6.288969,-1.015655,-5.906688,2.831633,-8.380870,-5.577235,-6.709133,-0.870709,4.981921,-1.668347,0.637266],[-2.536767,5.790752,5.358531,-0.503990,7.545345,-1.082634,-8.181143,-0.047803,-8.975200,5.293346,2.705589,-0.319302]], dtype = "float32")#candidate|1430|(24, 12)|const|float32
const_1431 = relay.const([-8.458041,-9.599856,-5.102432,-0.995977,7.775200,-3.709478,8.920272,-3.923319,4.555230,-5.526573,4.336143,-5.213012,6.468211,-9.147421,-0.194472,-8.765659,-3.518813,-6.242719,-5.004609,-2.796492,3.621937,4.904830,9.660418,4.224073,-5.183744,-8.843819,2.328428,-3.813389,5.555362,-4.487575,-9.682249,9.918121,4.293025,-2.053970,-8.540118,5.170107,6.479166,0.114409,-0.274854,2.238944,-6.196674,-6.788024,2.898277,-1.695219,0.339140,-3.024047,8.395642,-6.696567,6.226414,7.493539,3.709716,-1.829715,9.940977,1.555148,-8.618696,-2.889796,-9.008996,-6.177918,6.840433,8.562101,2.842520,-1.731366,9.257073,-6.118463,4.493161,-1.894060,-6.694843,5.202543,-1.414964,-6.835822,-8.239380,5.846467,0.463131,-0.471281,-4.184148,-0.991925,8.995726,4.532849,4.096006,-2.634084,0.515336,-7.804355,8.175309,2.354245,-2.289113,-5.202605,-0.717892,-4.984203,5.212295,-4.906460,-4.907734,-4.336411,9.157553,-3.056007,6.519587,-0.731771,0.162228,-3.414125,-4.752570,8.368957,7.066023,8.317125,2.486559,-5.693065,-7.888828,0.079386,1.613486,0.794468,0.649727,5.622953,-7.385411,2.063178,-7.872799,-9.880651,8.913223,-1.225553,3.203214,-8.566483,4.845731,5.804475], dtype = "float64")#candidate|1431|(120,)|const|float64
const_1432 = relay.const([6,-9,6,-4,-1,-8,-1,4,-4,6,10,-10,-6,-3,4,-7,9,5,-8,-6,2,-3,-6,3,-7,-1,-4,-1,1,5,-3,-6,-10,8,4,7,1,8,-7,9,-1,3,3,-8,-10,-10,7,5,-10,5,10,1,2,-7,10,4,-6,9,-3,-6,1,-5,-3,-6,-5,9,3,-5,9,7,-9,3,10,-7,-8,-5,8,-7,-10,5,4,-1,6,-3,9,6,-2,3,10,4,-2,7,9,-2,5,-6,-3,-7,2,-6,9,-1,1,-3], dtype = "int32")#candidate|1432|(104,)|const|int32
call_1429 = relay.TupleGetItem(func_899_call(relay.reshape(const_1430.astype('float32'), [3, 12, 8]), relay.reshape(const_1431.astype('float64'), [120,]), relay.reshape(const_1432.astype('int32'), [2, 52]), ), 2)
call_1433 = relay.TupleGetItem(func_903_call(relay.reshape(const_1430.astype('float32'), [3, 12, 8]), relay.reshape(const_1431.astype('float64'), [120,]), relay.reshape(const_1432.astype('int32'), [2, 52]), ), 2)
output = relay.Tuple([call_1423,call_1429,const_1430,const_1431,const_1432,])
output2 = relay.Tuple([call_1424,call_1433,const_1430,const_1431,const_1432,])
func_1435 = relay.Function([], output)
mod['func_1435'] = func_1435
mod = relay.transform.InferType()(mod)
output = func_1435()
func_1436 = relay.Function([], output)
mutated_mod['func_1436'] = func_1436
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1435_call = mod.get_global_var('func_1435')
func_1436_call = mutated_mod.get_global_var('func_1436')
call_1439 = relay.TupleGetItem(func_1435_call(), 4)
call_1440 = relay.TupleGetItem(func_1436_call(), 4)
output = relay.Tuple([call_1439,])
output2 = relay.Tuple([call_1440,])
func_1441 = relay.Function([], output)
mod['func_1441'] = func_1441
mod = relay.transform.InferType()(mod)
mutated_mod['func_1441'] = func_1441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1441_call = mutated_mod.get_global_var('func_1441')
call_1442 = func_1441_call()
output = call_1442
func_1443 = relay.Function([], output)
mutated_mod['func_1443'] = func_1443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1291_call = mod.get_global_var('func_1291')
func_1293_call = mutated_mod.get_global_var('func_1293')
call_1482 = func_1291_call()
call_1483 = func_1291_call()
uop_1487 = relay.atanh(call_1482.astype('float64')) # shape=(1, 14)
uop_1489 = relay.atanh(call_1483.astype('float64')) # shape=(1, 14)
output = uop_1487
output2 = uop_1489
func_1502 = relay.Function([], output)
mod['func_1502'] = func_1502
mod = relay.transform.InferType()(mod)
mutated_mod['func_1502'] = func_1502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1502_call = mutated_mod.get_global_var('func_1502')
call_1503 = func_1502_call()
output = call_1503
func_1504 = relay.Function([], output)
mutated_mod['func_1504'] = func_1504
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1435_call = mod.get_global_var('func_1435')
func_1436_call = mutated_mod.get_global_var('func_1436')
call_1505 = relay.TupleGetItem(func_1435_call(), 0)
call_1506 = relay.TupleGetItem(func_1436_call(), 0)
output = call_1505
output2 = call_1506
func_1509 = relay.Function([], output)
mod['func_1509'] = func_1509
mod = relay.transform.InferType()(mod)
output = func_1509()
func_1510 = relay.Function([], output)
mutated_mod['func_1510'] = func_1510
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1511 = relay.constdtype = "float64")#candidate|1511|(10, 16, 15)|const|float64
uop_1512 = relay.sinh(const_1511.astype('float64')) # shape=(10, 16, 15)
bop_1518 = relay.logical_or(const_1511.astype('bool'), relay.reshape(uop_1512.astype('bool'), relay.shape_of(const_1511))) # shape=(10, 16, 15)
var_1532 = relay.var("var_1532", dtype = "bool", shape = (10, 16, 15))#candidate|1532|(10, 16, 15)|var|bool
bop_1533 = relay.less_equal(bop_1518.astype('bool'), relay.reshape(var_1532.astype('bool'), relay.shape_of(bop_1518))) # shape=(10, 16, 15)
func_937_call = mod.get_global_var('func_937')
func_941_call = mutated_mod.get_global_var('func_941')
const_1539 = relay.const(True, dtype = "bool")#candidate|1539|()|const|bool
const_1540 = relay.const([[False,True,True,False],[False,True,True,True],[False,True,False,False],[True,False,False,False],[True,True,False,True],[False,False,False,False],[False,True,True,False],[True,False,True,False],[True,True,False,False],[False,False,True,True],[True,True,True,False],[True,True,False,False],[False,False,True,False],[True,False,True,True],[True,False,True,True],[False,True,True,False],[False,True,False,False],[True,True,True,False],[False,False,False,True],[True,True,True,False]], dtype = "bool")#candidate|1540|(20, 4)|const|bool
call_1538 = relay.TupleGetItem(func_937_call(relay.reshape(const_1539.astype('bool'), []), relay.reshape(const_1540.astype('bool'), [10, 8]), ), 0)
call_1541 = relay.TupleGetItem(func_941_call(relay.reshape(const_1539.astype('bool'), []), relay.reshape(const_1540.astype('bool'), [10, 8]), ), 0)
bop_1542 = relay.greater(bop_1533.astype('bool'), relay.reshape(uop_1512.astype('bool'), relay.shape_of(bop_1533))) # shape=(10, 16, 15)
func_306_call = mod.get_global_var('func_306')
func_309_call = mutated_mod.get_global_var('func_309')
var_1548 = relay.var("var_1548", dtype = "int32", shape = (104,))#candidate|1548|(104,)|var|int32
call_1547 = relay.TupleGetItem(func_306_call(relay.reshape(var_1548.astype('int32'), [104,])), 0)
call_1549 = relay.TupleGetItem(func_309_call(relay.reshape(var_1548.astype('int32'), [104,])), 0)
uop_1550 = relay.acos(const_1540.astype('float32')) # shape=(20, 4)
const_1554 = relay.const([[-1.010985,-6.396771,4.504188,-9.062429],[5.984961,4.270404,8.303718,-2.163747],[-0.694706,-2.592638,-4.757185,9.227637],[9.678498,-1.754759,6.442519,0.076755],[3.665027,-4.216069,-2.269541,5.844597],[7.009522,2.845155,-0.249005,7.066779],[1.522156,6.857979,4.796508,0.354513],[-9.351310,-8.022699,9.369668,5.484017],[5.998526,8.996331,-4.207792,-6.550096],[7.946514,2.761174,6.650887,-5.296217],[-9.069209,-9.289041,-3.211058,-6.911888],[1.371041,-3.095565,-7.458694,7.876171],[6.258159,1.144068,-2.238992,-2.601131],[8.019255,1.863758,-9.688270,-1.580267],[-1.825476,5.961957,-4.600304,3.809318],[-1.658774,4.583585,6.239865,3.524512],[1.729738,-6.319438,-0.113051,-9.409491],[-4.136566,-7.422531,8.701211,0.719388],[-4.858094,5.871238,-0.654276,-0.790025],[-8.846563,-6.004135,4.105995,5.150108]], dtype = "float32")#candidate|1554|(20, 4)|const|float32
bop_1555 = relay.bitwise_xor(uop_1550.astype('int16'), relay.reshape(const_1554.astype('int16'), relay.shape_of(uop_1550))) # shape=(20, 4)
output = relay.Tuple([call_1538,const_1539,bop_1542,call_1547,var_1548,bop_1555,])
output2 = relay.Tuple([call_1541,const_1539,bop_1542,call_1549,var_1548,bop_1555,])
func_1562 = relay.Function([var_1532,var_1548,], output)
mod['func_1562'] = func_1562
mod = relay.transform.InferType()(mod)
var_1563 = relay.var("var_1563", dtype = "bool", shape = (10, 16, 15))#candidate|1563|(10, 16, 15)|var|bool
var_1564 = relay.var("var_1564", dtype = "int32", shape = (104,))#candidate|1564|(104,)|var|int32
output = func_1562(var_1563,var_1564,)
func_1565 = relay.Function([var_1563,var_1564,], output)
mutated_mod['func_1565'] = func_1565
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1441_call = mod.get_global_var('func_1441')
func_1443_call = mutated_mod.get_global_var('func_1443')
call_1576 = relay.TupleGetItem(func_1441_call(), 0)
call_1577 = relay.TupleGetItem(func_1443_call(), 0)
var_1593 = relay.var("var_1593", dtype = "int32", shape = (104,))#candidate|1593|(104,)|var|int32
bop_1594 = relay.greater(call_1576.astype('bool'), relay.reshape(var_1593.astype('bool'), relay.shape_of(call_1576))) # shape=(104,)
bop_1597 = relay.greater(call_1577.astype('bool'), relay.reshape(var_1593.astype('bool'), relay.shape_of(call_1577))) # shape=(104,)
func_1348_call = mod.get_global_var('func_1348')
func_1350_call = mutated_mod.get_global_var('func_1350')
call_1608 = func_1348_call()
call_1609 = func_1348_call()
uop_1610 = relay.atanh(var_1593.astype('float64')) # shape=(104,)
uop_1616 = relay.log2(uop_1610.astype('float64')) # shape=(104,)
uop_1618 = relay.atanh(uop_1610.astype('float64')) # shape=(104,)
uop_1620 = relay.sqrt(uop_1618.astype('float64')) # shape=(104,)
bop_1624 = relay.floor_divide(uop_1620.astype('float64'), relay.reshape(bop_1594.astype('float64'), relay.shape_of(uop_1620))) # shape=(104,)
bop_1627 = relay.floor_divide(uop_1620.astype('float64'), relay.reshape(bop_1597.astype('float64'), relay.shape_of(uop_1620))) # shape=(104,)
bop_1628 = relay.minimum(uop_1620.astype('uint32'), relay.reshape(bop_1594.astype('uint32'), relay.shape_of(uop_1620))) # shape=(104,)
bop_1631 = relay.minimum(uop_1620.astype('uint32'), relay.reshape(bop_1597.astype('uint32'), relay.shape_of(uop_1620))) # shape=(104,)
bop_1634 = relay.logical_xor(uop_1610.astype('uint32'), relay.reshape(uop_1620.astype('uint32'), relay.shape_of(uop_1610))) # shape=(104,)
bop_1639 = relay.bitwise_and(bop_1628.astype('uint16'), relay.reshape(uop_1620.astype('uint16'), relay.shape_of(bop_1628))) # shape=(104,)
bop_1642 = relay.bitwise_and(bop_1631.astype('uint16'), relay.reshape(uop_1620.astype('uint16'), relay.shape_of(bop_1631))) # shape=(104,)
output = relay.Tuple([call_1608,uop_1616,bop_1624,bop_1634,bop_1639,])
output2 = relay.Tuple([call_1609,uop_1616,bop_1627,bop_1634,bop_1642,])
func_1645 = relay.Function([var_1593,], output)
mod['func_1645'] = func_1645
mod = relay.transform.InferType()(mod)
var_1646 = relay.var("var_1646", dtype = "int32", shape = (104,))#candidate|1646|(104,)|var|int32
output = func_1645(var_1646)
func_1647 = relay.Function([var_1646], output)
mutated_mod['func_1647'] = func_1647
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1675 = relay.var("var_1675", dtype = "float32", shape = (13, 10))#candidate|1675|(13, 10)|var|float32
uop_1676 = relay.erf(var_1675.astype('float32')) # shape=(13, 10)
func_973_call = mod.get_global_var('func_973')
func_978_call = mutated_mod.get_global_var('func_978')
var_1690 = relay.var("var_1690", dtype = "int32", shape = (88,))#candidate|1690|(88,)|var|int32
const_1691 = relay.const([[-10,5,8,9,9,-1,8,-6,-10,-8,9,8,10,10,10,5,10,5,7,1,-8,1,-4,-10,5,7,-10,10,3,-5,8,2,-2,-6,-1,-5,1,2,2,-2,-3,-2,3,1,2,10,8,7,-9,6,-10,-8,8,6,3,6,-6,9,2,5,7,-5,-7,2,-5,-9,-1,6,6,-9,10,7,6,3,-5,2,-6,-5,-9,-1,9,-9,-7,-10,-9,-4,-6,6,6,-10,10,2,-10,8,-8,-4,-1,7,-2,-2,8,1,-8,6,6,6,-1,-1,7,-2,2,-2,-3,-2,-6,5,10,-7,-2,-4,-10,-4,9,4,9,-1,-2,-4,1,-9,10,-2,9,-1,-4,-7,5,7,-9,2,-7,-8,5,5,8,7,-7,10,-10,-6,8,-1,7,7,-9,5,-1,6,-5,-3,6,-4,-9,-10,7,-1,1,8,-10,-7,5,6,7,1,6,6,4,-6,6,1,-3,-8,6,4,2,-6,5,2,-7,-3,-9,-4,1,-5,7,-10,-10,-7,-8,-4,-4,7,4,9,-2,-6,-3,3,2,1,-6,2,-3,2,-9,2,-9,-3,6,-6,-4,9,-3,-1,8,6,5,10,6,9,-10,-9,8,2,3,2,8,-5,4,6,8,-8,10,10,1,1,8,10,1,-10,10,2,-5,-9,-2,1,-8,2,-6,-4,-2,10,-5,8],[4,2,1,-2,-2,-7,7,-4,-8,3,-3,-3,-1,6,5,4,1,-3,-2,3,7,8,-10,1,3,2,-2,-10,9,-9,-8,-4,-10,3,2,-6,4,7,6,-1,-3,-4,9,-7,8,5,-10,-6,7,-4,5,-2,-4,2,4,-1,-8,1,9,-10,-4,4,7,4,-9,-5,-8,3,5,-2,-3,-7,7,10,3,-2,6,-1,-6,-9,5,1,-2,-5,-2,-5,9,-5,7,2,-9,9,2,10,-6,5,2,7,2,8,-9,10,4,-8,-5,5,7,-9,5,-7,8,-4,-9,4,-3,7,7,3,3,4,-2,-1,-2,-7,10,8,7,-8,-5,10,-7,1,4,-7,5,-6,2,-5,-6,1,-6,3,3,10,4,-7,6,-6,9,-9,7,-1,-3,-5,-9,-6,-7,8,10,9,1,4,-3,-10,-4,-9,4,-1,-6,-7,-5,2,4,4,-10,-8,9,8,2,6,-7,-10,5,-10,-8,-8,4,4,9,-9,-3,10,9,-5,8,-9,-6,-9,-10,2,8,2,-7,9,6,-7,-7,10,6,8,-7,-2,8,2,10,8,5,1,8,-9,2,-3,2,-6,7,4,-3,-6,8,8,3,6,-8,1,-9,-10,6,-1,-5,9,-2,-7,-1,-7,1,5,-3,-4,-9,7,-3,8,-10,-8,-5,10,-9,-4,10,-7,9,6,4,5],[3,1,8,-7,-8,5,1,-3,-2,1,10,-2,-4,3,8,-1,-9,-9,4,5,-1,7,8,4,-9,-2,5,-10,-4,-8,10,-3,4,5,-8,-9,-5,-2,-6,-2,1,4,10,6,-6,6,4,6,-3,-5,5,1,10,-2,-10,-1,-8,1,-10,2,3,-3,-9,-6,-2,-3,-5,-9,-10,3,-3,2,-1,1,-10,-7,-5,10,1,-6,7,2,-6,6,1,-5,-6,-8,-10,6,6,-2,6,-4,-8,-4,2,6,8,-3,3,-3,-4,6,4,3,7,-8,7,-4,2,9,-3,-1,9,9,-3,1,-5,-3,-8,6,2,-10,6,4,-1,2,-10,-4,9,2,-4,-1,-9,8,1,-5,-10,1,-1,5,-10,4,2,-8,1,-4,3,6,2,-1,7,-5,3,2,1,-5,-4,2,9,8,-9,5,-8,6,-4,-2,-5,8,2,-3,7,7,-7,9,6,5,8,9,-10,7,-2,-7,-7,-4,-6,4,-4,-7,10,6,1,-3,-1,6,-7,-9,3,5,-10,-1,-7,10,-7,-2,-2,3,2,-2,-8,6,5,-4,1,10,-10,10,7,-9,-8,9,1,-3,8,6,8,-9,9,-3,3,-4,4,10,-3,-6,-10,-10,7,-2,9,-2,1,-9,-7,3,-6,2,-10,-1,-9,-3,-2,-8,6,-7,-9,3,-10,-2,-5,-6,-1,-10],[1,5,10,9,-3,-4,-10,-6,-8,8,-1,5,-7,-8,-7,1,-2,10,-6,-6,7,-8,1,-5,-2,8,-5,-3,4,-3,10,1,-2,-5,-9,7,-3,4,-8,-4,3,-8,-7,-3,2,3,1,5,-4,-2,-5,8,2,3,-2,2,1,6,-3,-8,-6,-9,5,-10,6,10,9,-9,-2,4,-1,9,-8,-7,-3,-6,-6,-6,8,-9,-8,-8,-1,-9,-1,-6,1,2,10,10,6,4,10,-6,6,5,-6,-10,-9,-1,1,-3,-3,-4,6,-10,-2,8,-4,10,-10,1,-9,-3,1,-1,1,7,-10,-9,-4,1,-3,8,3,-5,-5,7,1,-2,-5,-5,6,-10,-2,3,10,-2,4,8,9,8,-2,-8,6,5,5,-6,1,-7,7,-1,-5,9,4,-5,-3,-9,-10,7,-8,-7,-4,2,-1,10,-3,6,-5,-9,2,-6,-9,-9,-1,-4,3,-10,4,-10,-4,-4,3,-5,7,-9,-10,-4,-9,5,-3,9,-8,-1,-2,7,3,-3,3,5,3,-9,-1,9,7,-8,-3,-6,-5,-5,-2,-4,-8,-1,6,1,2,-2,2,-2,7,3,6,-3,8,1,4,5,2,-3,6,8,1,-10,1,-5,-4,8,-10,3,3,-8,-7,9,2,10,3,5,-7,-8,-9,-9,-3,-2,-10,-1,-9,9,5,-7,-7,3,4,5]], dtype = "int32")#candidate|1691|(4, 264)|const|int32
var_1692 = relay.var("var_1692", dtype = "int32", shape = (104,))#candidate|1692|(104,)|var|int32
call_1689 = relay.TupleGetItem(func_973_call(relay.reshape(var_1690.astype('int32'), [11, 8, 1]), relay.reshape(const_1691.astype('int32'), [11, 8, 12]), relay.reshape(const_1691.astype('bool'), [11, 8, 12]), relay.reshape(var_1692.astype('int32'), [104,]), ), 4)
call_1693 = relay.TupleGetItem(func_978_call(relay.reshape(var_1690.astype('int32'), [11, 8, 1]), relay.reshape(const_1691.astype('int32'), [11, 8, 12]), relay.reshape(const_1691.astype('bool'), [11, 8, 12]), relay.reshape(var_1692.astype('int32'), [104,]), ), 4)
uop_1709 = relay.asinh(uop_1676.astype('float32')) # shape=(13, 10)
const_1721 = relay.const([[7.213634,-4.656599,8.198932,-8.687614,1.457377,-4.638626,-3.309516,7.483811,-0.089694,-0.831841],[-2.788999,-6.338428,6.342071,-9.212055,-0.680196,-1.233964,-6.630246,-8.809461,-1.738377,4.969658],[6.043057,-7.482202,-3.435855,-9.141942,-1.957302,-1.621870,-8.525548,3.524934,-7.198141,-8.110736],[6.230644,-2.580948,5.911916,4.243917,9.868746,-6.343974,-9.457592,-4.685673,-8.671902,8.798785],[-8.578069,-7.638761,6.036005,-8.202988,0.552647,-3.698139,7.603702,-9.764925,7.434820,8.007319],[8.654850,7.844660,-9.548994,-9.493003,-4.391777,4.677493,3.924744,1.890619,1.953852,5.289317],[3.156045,6.755403,-4.019374,1.115621,6.573600,2.443615,-1.522737,-4.139219,-6.145543,-5.218639],[5.493491,2.826320,2.984543,0.020198,-7.728640,9.941910,-2.596281,1.418708,6.923217,-1.846098],[4.254084,0.860527,-8.220528,-9.880560,-1.133577,-9.896979,1.173170,-5.521079,-7.901452,0.437075],[-0.253808,-2.054977,-2.718793,-4.680337,0.564546,-9.313849,-9.485650,-6.741122,-9.587273,2.767695],[8.216694,-1.350884,-4.542000,0.655616,-0.361077,7.740475,-9.510698,6.828273,1.498753,-9.684429],[-2.469269,0.251672,-8.188607,7.969965,0.163957,3.575314,-8.017158,5.024386,-1.965324,-2.616634],[9.253219,-3.586279,1.465472,-2.192591,8.267142,8.642291,-6.670663,-7.549500,4.146111,4.031898]], dtype = "float32")#candidate|1721|(13, 10)|const|float32
bop_1722 = relay.mod(uop_1676.astype('float64'), relay.reshape(const_1721.astype('float64'), relay.shape_of(uop_1676))) # shape=(13, 10)
output = relay.Tuple([call_1689,var_1690,const_1691,var_1692,uop_1709,bop_1722,])
output2 = relay.Tuple([call_1693,var_1690,const_1691,var_1692,uop_1709,bop_1722,])
func_1730 = relay.Function([var_1675,var_1690,var_1692,], output)
mod['func_1730'] = func_1730
mod = relay.transform.InferType()(mod)
mutated_mod['func_1730'] = func_1730
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1730_call = mutated_mod.get_global_var('func_1730')
var_1732 = relay.var("var_1732", dtype = "float32", shape = (13, 10))#candidate|1732|(13, 10)|var|float32
var_1733 = relay.var("var_1733", dtype = "int32", shape = (88,))#candidate|1733|(88,)|var|int32
var_1734 = relay.var("var_1734", dtype = "int32", shape = (104,))#candidate|1734|(104,)|var|int32
call_1731 = func_1730_call(var_1732,var_1733,var_1734,)
output = call_1731
func_1735 = relay.Function([var_1732,var_1733,var_1734,], output)
mutated_mod['func_1735'] = func_1735
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1348_call = mod.get_global_var('func_1348')
func_1350_call = mutated_mod.get_global_var('func_1350')
call_1764 = func_1348_call()
call_1765 = func_1348_call()
output = call_1764
output2 = call_1765
func_1780 = relay.Function([], output)
mod['func_1780'] = func_1780
mod = relay.transform.InferType()(mod)
output = func_1780()
func_1781 = relay.Function([], output)
mutated_mod['func_1781'] = func_1781
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1435_call = mod.get_global_var('func_1435')
func_1436_call = mutated_mod.get_global_var('func_1436')
call_1796 = relay.TupleGetItem(func_1435_call(), 1)
call_1797 = relay.TupleGetItem(func_1436_call(), 1)
func_178_call = mod.get_global_var('func_178')
func_182_call = mutated_mod.get_global_var('func_182')
var_1810 = relay.var("var_1810", dtype = "int8", shape = (792,))#candidate|1810|(792,)|var|int8
call_1809 = relay.TupleGetItem(func_178_call(relay.reshape(var_1810.astype('int8'), [6, 12, 11]), relay.reshape(var_1810.astype('int8'), [6, 12, 11]), relay.reshape(var_1810.astype('int8'), [6, 12, 11]), ), 2)
call_1811 = relay.TupleGetItem(func_182_call(relay.reshape(var_1810.astype('int8'), [6, 12, 11]), relay.reshape(var_1810.astype('int8'), [6, 12, 11]), relay.reshape(var_1810.astype('int8'), [6, 12, 11]), ), 2)
output = relay.Tuple([call_1796,call_1809,var_1810,])
output2 = relay.Tuple([call_1797,call_1811,var_1810,])
func_1813 = relay.Function([var_1810,], output)
mod['func_1813'] = func_1813
mod = relay.transform.InferType()(mod)
var_1814 = relay.var("var_1814", dtype = "int8", shape = (792,))#candidate|1814|(792,)|var|int8
output = func_1813(var_1814)
func_1815 = relay.Function([var_1814], output)
mutated_mod['func_1815'] = func_1815
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1831 = relay.var("var_1831", dtype = "uint64", shape = (16, 15, 10))#candidate|1831|(16, 15, 10)|var|uint64
var_1832 = relay.var("var_1832", dtype = "uint64", shape = (16, 15, 10))#candidate|1832|(16, 15, 10)|var|uint64
bop_1833 = relay.logical_xor(var_1831.astype('uint64'), relay.reshape(var_1832.astype('uint64'), relay.shape_of(var_1831))) # shape=(16, 15, 10)
func_899_call = mod.get_global_var('func_899')
func_903_call = mutated_mod.get_global_var('func_903')
var_1855 = relay.var("var_1855", dtype = "float32", shape = (288,))#candidate|1855|(288,)|var|float32
var_1856 = relay.var("var_1856", dtype = "float64", shape = (120,))#candidate|1856|(120,)|var|float64
var_1857 = relay.var("var_1857", dtype = "int32", shape = (104,))#candidate|1857|(104,)|var|int32
call_1854 = relay.TupleGetItem(func_899_call(relay.reshape(var_1855.astype('float32'), [3, 12, 8]), relay.reshape(var_1856.astype('float64'), [120,]), relay.reshape(var_1857.astype('int32'), [2, 52]), ), 4)
call_1858 = relay.TupleGetItem(func_903_call(relay.reshape(var_1855.astype('float32'), [3, 12, 8]), relay.reshape(var_1856.astype('float64'), [120,]), relay.reshape(var_1857.astype('int32'), [2, 52]), ), 4)
func_1291_call = mod.get_global_var('func_1291')
func_1293_call = mutated_mod.get_global_var('func_1293')
call_1859 = func_1291_call()
call_1860 = func_1291_call()
uop_1866 = relay.atan(var_1857.astype('float32')) # shape=(104,)
bop_1875 = relay.left_shift(uop_1866.astype('uint64'), relay.reshape(call_1854.astype('uint64'), relay.shape_of(uop_1866))) # shape=(104,)
bop_1878 = relay.left_shift(uop_1866.astype('uint64'), relay.reshape(call_1858.astype('uint64'), relay.shape_of(uop_1866))) # shape=(104,)
var_1881 = relay.var("var_1881", dtype = "uint64", shape = (104,))#candidate|1881|(104,)|var|uint64
bop_1882 = relay.equal(bop_1875.astype('bool'), relay.reshape(var_1881.astype('bool'), relay.shape_of(bop_1875))) # shape=(104,)
bop_1885 = relay.equal(bop_1878.astype('bool'), relay.reshape(var_1881.astype('bool'), relay.shape_of(bop_1878))) # shape=(104,)
uop_1886 = relay.sinh(bop_1882.astype('float64')) # shape=(104,)
uop_1888 = relay.sinh(bop_1885.astype('float64')) # shape=(104,)
output = relay.Tuple([bop_1833,var_1855,var_1856,call_1859,uop_1886,])
output2 = relay.Tuple([bop_1833,var_1855,var_1856,call_1860,uop_1888,])
func_1895 = relay.Function([var_1831,var_1832,var_1855,var_1856,var_1857,var_1881,], output)
mod['func_1895'] = func_1895
mod = relay.transform.InferType()(mod)
mutated_mod['func_1895'] = func_1895
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1895_call = mutated_mod.get_global_var('func_1895')
var_1897 = relay.var("var_1897", dtype = "uint64", shape = (16, 15, 10))#candidate|1897|(16, 15, 10)|var|uint64
var_1898 = relay.var("var_1898", dtype = "uint64", shape = (16, 15, 10))#candidate|1898|(16, 15, 10)|var|uint64
var_1899 = relay.var("var_1899", dtype = "float32", shape = (288,))#candidate|1899|(288,)|var|float32
var_1900 = relay.var("var_1900", dtype = "float64", shape = (120,))#candidate|1900|(120,)|var|float64
var_1901 = relay.var("var_1901", dtype = "int32", shape = (104,))#candidate|1901|(104,)|var|int32
var_1902 = relay.var("var_1902", dtype = "uint64", shape = (104,))#candidate|1902|(104,)|var|uint64
call_1896 = func_1895_call(var_1897,var_1898,var_1899,var_1900,var_1901,var_1902,)
output = call_1896
func_1903 = relay.Function([var_1897,var_1898,var_1899,var_1900,var_1901,var_1902,], output)
mutated_mod['func_1903'] = func_1903
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1509_call = mod.get_global_var('func_1509')
func_1510_call = mutated_mod.get_global_var('func_1510')
call_1910 = func_1509_call()
call_1911 = func_1509_call()
uop_1914 = relay.rsqrt(call_1910.astype('float64')) # shape=(1, 14)
uop_1916 = relay.rsqrt(call_1911.astype('float64')) # shape=(1, 14)
uop_1930 = relay.sin(call_1910.astype('float32')) # shape=(1, 14)
uop_1932 = relay.sin(call_1911.astype('float32')) # shape=(1, 14)
bop_1941 = relay.power(uop_1930.astype('float32'), relay.reshape(uop_1914.astype('float32'), relay.shape_of(uop_1930))) # shape=(1, 14)
bop_1944 = relay.power(uop_1932.astype('float32'), relay.reshape(uop_1916.astype('float32'), relay.shape_of(uop_1932))) # shape=(1, 14)
func_1562_call = mod.get_global_var('func_1562')
func_1565_call = mutated_mod.get_global_var('func_1565')
const_1949 = relay.const([False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,False], dtype = "bool")#candidate|1949|(2400,)|const|bool
var_1950 = relay.var("var_1950", dtype = "int32", shape = (104,))#candidate|1950|(104,)|var|int32
call_1948 = relay.TupleGetItem(func_1562_call(relay.reshape(const_1949.astype('bool'), [10, 16, 15]), relay.reshape(var_1950.astype('int32'), [104,]), ), 0)
call_1951 = relay.TupleGetItem(func_1565_call(relay.reshape(const_1949.astype('bool'), [10, 16, 15]), relay.reshape(var_1950.astype('int32'), [104,]), ), 0)
func_1097_call = mod.get_global_var('func_1097')
func_1099_call = mutated_mod.get_global_var('func_1099')
var_1953 = relay.var("var_1953", dtype = "float64", shape = (726,))#candidate|1953|(726,)|var|float64
call_1952 = relay.TupleGetItem(func_1097_call(relay.reshape(var_1953.astype('float64'), [11, 11, 6])), 2)
call_1954 = relay.TupleGetItem(func_1099_call(relay.reshape(var_1953.astype('float64'), [11, 11, 6])), 2)
output = relay.Tuple([bop_1941,call_1948,const_1949,var_1950,call_1952,var_1953,])
output2 = relay.Tuple([bop_1944,call_1951,const_1949,var_1950,call_1954,var_1953,])
func_1956 = relay.Function([var_1950,var_1953,], output)
mod['func_1956'] = func_1956
mod = relay.transform.InferType()(mod)
mutated_mod['func_1956'] = func_1956
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1956_call = mutated_mod.get_global_var('func_1956')
var_1958 = relay.var("var_1958", dtype = "int32", shape = (104,))#candidate|1958|(104,)|var|int32
var_1959 = relay.var("var_1959", dtype = "float64", shape = (726,))#candidate|1959|(726,)|var|float64
call_1957 = func_1956_call(var_1958,var_1959,)
output = call_1957
func_1960 = relay.Function([var_1958,var_1959,], output)
mutated_mod['func_1960'] = func_1960
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1291_call = mod.get_global_var('func_1291')
func_1293_call = mutated_mod.get_global_var('func_1293')
call_1979 = func_1291_call()
call_1980 = func_1291_call()
var_2001 = relay.var("var_2001", dtype = "float32", shape = (15, 14))#candidate|2001|(15, 14)|var|float32
bop_2002 = relay.logical_xor(call_1979.astype('int8'), var_2001.astype('int8')) # shape=(15, 14)
bop_2005 = relay.logical_xor(call_1980.astype('int8'), var_2001.astype('int8')) # shape=(15, 14)
func_1061_call = mod.get_global_var('func_1061')
func_1063_call = mutated_mod.get_global_var('func_1063')
var_2017 = relay.var("var_2017", dtype = "float32", shape = (147,))#candidate|2017|(147,)|var|float32
call_2016 = func_1061_call(relay.reshape(var_2017.astype('float32'), [7, 3, 7]))
call_2018 = func_1061_call(relay.reshape(var_2017.astype('float32'), [7, 3, 7]))
output = relay.Tuple([bop_2002,call_2016,var_2017,])
output2 = relay.Tuple([bop_2005,call_2018,var_2017,])
func_2019 = relay.Function([var_2001,var_2017,], output)
mod['func_2019'] = func_2019
mod = relay.transform.InferType()(mod)
mutated_mod['func_2019'] = func_2019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2019_call = mutated_mod.get_global_var('func_2019')
var_2021 = relay.var("var_2021", dtype = "float32", shape = (15, 14))#candidate|2021|(15, 14)|var|float32
var_2022 = relay.var("var_2022", dtype = "float32", shape = (147,))#candidate|2022|(147,)|var|float32
call_2020 = func_2019_call(var_2021,var_2022,)
output = call_2020
func_2023 = relay.Function([var_2021,var_2022,], output)
mutated_mod['func_2023'] = func_2023
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2065 = relay.var("var_2065", dtype = "float32", shape = (11,))#candidate|2065|(11,)|var|float32
uop_2066 = relay.log10(var_2065.astype('float32')) # shape=(11,)
func_1813_call = mod.get_global_var('func_1813')
func_1815_call = mutated_mod.get_global_var('func_1815')
const_2079 = relay.const([[-8,-6,-7,-4,-6,-6,3,2,-3,2,6,4,-9,6,8,-5,-1,5,-3,3,-5,10,-2,-6,5,4,1,7,-3,-2,-7,7,-8,-9,5,-8,-2,8,3,1,-2,-3,-3,3,-5,6,9,-3,-8,-10,4,-1,8,-2,-3,-1,8,-8,-6,8,3,7,-7,-1,-3,-8],[-8,-5,10,9,2,8,4,2,4,-1,-4,-1,9,10,2,10,6,-8,7,-2,7,-9,-4,1,3,-5,2,-1,-9,-4,-6,-2,-4,-1,-10,-7,2,10,-9,6,-6,-8,-8,-1,10,7,-2,10,-3,-6,-5,2,1,5,-6,1,-1,-10,9,-5,9,-5,-5,8,10,-1],[-6,-4,8,6,-10,5,7,-10,9,3,9,2,7,-2,-3,-1,9,-8,5,-10,-3,6,-10,-4,6,-6,9,1,-7,10,7,3,-9,2,6,-10,-6,-7,-7,-3,2,7,9,-7,10,-8,-1,4,1,7,-9,4,-5,2,-4,2,8,7,-7,4,2,-8,-3,4,-10,9],[7,-7,-6,2,-3,8,-6,-9,-9,-4,-4,-7,-7,-9,3,-6,-3,5,-1,-1,-3,-8,-4,-4,9,-8,-10,-8,-6,-4,6,1,5,1,3,2,1,-5,-8,-1,-6,-8,4,3,-4,2,9,9,9,9,4,-10,-3,1,5,-8,3,-7,-3,-8,9,7,3,-1,-8,4],[4,-6,-8,-10,-8,-4,-4,7,-3,-2,-7,2,5,-4,-4,4,2,-6,-6,5,-5,-7,2,-4,-1,1,5,9,5,-4,2,8,9,-6,2,-1,2,4,3,3,6,3,-7,3,4,2,5,-9,6,9,1,-5,-9,-9,6,-6,7,-6,-2,6,-6,1,8,6,-9,2],[-7,5,5,-8,-7,5,-4,8,-10,1,1,-7,-3,-5,-10,-4,-3,2,-2,-10,5,-3,-6,4,-3,2,-6,-5,2,5,6,-10,6,-8,4,-7,3,9,-1,5,-7,-2,-6,6,-6,1,-8,-2,2,-5,7,-7,-4,-2,-9,-10,6,1,-8,1,6,9,-10,2,-2,10],[9,-10,4,-7,-10,9,-9,-7,7,-3,7,-1,-3,-3,-8,-4,2,7,5,1,10,-1,-2,8,-6,4,-2,-2,-8,10,8,2,-8,-6,-4,10,8,-5,-10,10,5,-9,1,-4,6,4,7,-4,4,2,8,3,5,-8,10,-1,4,-4,3,5,-1,3,-4,5,-8,7],[10,4,8,10,-2,5,-3,2,-4,-7,-5,-2,-9,6,-5,5,-10,1,-3,-6,-4,-10,7,-4,8,-5,-2,-1,-4,-8,7,-4,-4,-5,-8,1,-1,10,4,10,-7,-6,-1,-2,1,4,5,7,5,-6,2,-6,8,-4,1,-4,-6,-1,-5,-2,5,6,-5,1,4,4],[3,-10,5,-3,5,-7,10,-10,3,3,9,9,-10,-4,8,-10,-8,-3,-6,9,6,4,4,-10,9,6,-3,-2,7,-9,5,-5,-2,4,-5,-9,9,-4,9,-1,-7,6,3,-5,3,-5,-3,-1,-7,1,8,-10,3,-3,9,-1,-2,-8,-5,5,-7,8,9,3,6,9],[-3,-2,-4,-9,8,1,8,-5,4,-3,-8,-9,2,-6,-5,2,-5,-4,-9,4,-6,-7,8,-9,10,1,3,-9,-1,1,2,-6,10,-8,7,-6,10,-9,-5,-9,10,-5,10,-8,-10,7,-4,1,-2,-3,-2,2,-4,10,-7,4,-9,-2,4,-7,1,-10,-6,-1,1,-7],[-4,-5,-10,-8,4,-6,-3,-1,6,-5,2,6,-6,8,2,10,-4,6,2,1,-6,-10,-3,7,-10,10,8,2,10,1,3,10,8,1,8,5,-9,4,-7,3,3,-9,-9,7,9,3,-1,1,-7,-7,-4,-2,1,-7,6,6,-5,-2,-6,-4,-7,10,10,-7,-4,5],[-9,3,10,10,9,-7,9,-9,-10,-1,-1,-5,2,9,6,-6,-10,7,-8,-8,-1,3,6,-6,-6,3,9,10,8,7,-3,1,1,-3,-4,-10,-8,8,7,-10,2,2,-1,-3,2,-5,3,8,5,-5,-2,6,7,4,10,9,-7,-5,1,-7,8,-8,9,6,-9,3]], dtype = "int8")#candidate|2079|(12, 66)|const|int8
call_2078 = relay.TupleGetItem(func_1813_call(relay.reshape(const_2079.astype('int8'), [792,])), 0)
call_2080 = relay.TupleGetItem(func_1815_call(relay.reshape(const_2079.astype('int8'), [792,])), 0)
var_2083 = relay.var("var_2083", dtype = "int32", shape = (24,))#candidate|2083|(24,)|var|int32
bop_2084 = relay.floor_divide(call_2078.astype('float64'), relay.reshape(var_2083.astype('float64'), relay.shape_of(call_2078))) # shape=(24,)
bop_2087 = relay.floor_divide(call_2080.astype('float64'), relay.reshape(var_2083.astype('float64'), relay.shape_of(call_2080))) # shape=(24,)
func_937_call = mod.get_global_var('func_937')
func_941_call = mutated_mod.get_global_var('func_941')
var_2099 = relay.var("var_2099", dtype = "bool", shape = ())#candidate|2099|()|var|bool
var_2100 = relay.var("var_2100", dtype = "bool", shape = (80,))#candidate|2100|(80,)|var|bool
call_2098 = relay.TupleGetItem(func_937_call(relay.reshape(var_2099.astype('bool'), []), relay.reshape(var_2100.astype('bool'), [10, 8]), ), 0)
call_2101 = relay.TupleGetItem(func_941_call(relay.reshape(var_2099.astype('bool'), []), relay.reshape(var_2100.astype('bool'), [10, 8]), ), 0)
func_1186_call = mod.get_global_var('func_1186')
func_1190_call = mutated_mod.get_global_var('func_1190')
const_2106 = relay.const([-4.286842,-2.102268,2.232125,5.784296,-1.767782,1.267071,1.764709,-7.281903,-6.680290,0.640234,9.434672,-0.350335,7.041736,-8.038932,-8.267639,3.132360,5.981754,-5.091991,-8.456131,6.851865,-6.305945,-3.671618,7.297859,-2.076513,-4.326568,4.419178,-2.830765,-5.091517,-8.994220,-6.256301,-2.410353,9.024667,5.938670,5.162525,4.783042,-8.775631,7.259140,-9.035425,-8.096864,9.274120,-8.915465,-1.458679,-6.468534,-6.027819,5.423564,-2.176581,1.242099,0.682648,4.685413,-1.046181,0.431421,-3.732374,9.168516,-0.130150,9.527155,5.296036,-6.886256,-8.799954,-7.822730,-8.104995,-3.307398,-1.619965,-7.179283,-6.382620,-0.549005,8.792548,-2.421966,-6.217132,-6.955438,9.860066,-7.558845,4.004093,-6.112099,-0.524354,-2.035754,-2.423002,1.876667,-2.586691,6.035389,9.325444,4.956911,4.609297,4.744946,-2.292344,-4.082199,7.232761,-8.849585,-4.297080,9.670045,8.921814,3.062914,-4.581988,-0.352419,-3.922699,9.763494,3.578011,-6.244733,-5.643966,1.426191,3.209644,-7.961494,-3.177639,7.706726,7.498793,5.249001,7.016588,7.356153,3.085258,-2.134240,1.984898,-0.869909,2.587774,6.538243,-9.465730,-0.993816,4.919905,-3.060998,7.166309,-1.308736,-0.379440,1.906230,-7.510615,0.450174,6.723958,8.777223,-6.850146,7.685148,4.624414,4.958722,1.657308,6.335818,8.934548,5.577014,-8.727186,1.866959,8.050976,-9.000799,8.391496,-7.654312,2.672163,9.022556,4.086841,3.053191,-4.236355,-9.008047,-2.771791,-8.373606,8.449927,-6.448851,6.624623,4.447748,7.818738,-3.329208,1.277122,0.477459,-7.410136,-8.663591,9.858802,-5.539711,3.192371,-0.395462,5.017283,5.674021,-5.940397,-0.715059,3.515580,-3.500454,9.622351,-9.740702,8.603382,4.287204,-3.407347,5.691611,-8.793043,1.922135,-1.135630,8.713638,-9.615122,5.649567,1.520632,-2.927853,6.296664,9.986036,8.836392,8.193956,4.393177,5.192897,3.311697,4.803840,-5.776056,2.556962,-7.471782,-1.057224,2.737442,9.480833,3.250390,4.729893,7.166020,5.916667,-9.171925,7.863665,-0.935469,-3.870146,-4.206676,0.493194,-7.765192,5.658889,5.804316,-6.464223,4.503536,9.677261,4.505933,3.790012,3.226742,-4.275440,-1.457606,4.007000,-1.448979,-1.038453,-8.855543,3.592328,-3.038841,1.973963,3.683184,-0.173311,-2.826577,9.395814,-2.545786,-6.537376,-8.513975,-0.748232,-3.112390,2.499394,7.130696,5.152860,2.554706,-5.197833,-3.159319,4.118185,9.375665,-6.534251,-6.007736,-7.971546,2.720925,-0.572307,8.591355,-6.941379,8.908226,-1.563644,6.663263,-0.861489,-7.125354,-4.056263,-9.701409,-1.338338,0.438457,5.973326,3.602307,-6.207353,-5.133899,-0.487288,8.829865,-5.087511,-3.850230,7.394327,-2.207383,-2.669858,3.546921,6.924029,-1.129952,8.393488,6.698546,9.664086,-5.175133,5.537797,8.333784,-4.930581,-7.296887,7.137028,7.766643,-8.373835,-6.795982,9.101630,0.161639,9.397281,-5.984979,2.936411,-5.286927,-6.240817,-5.222758,9.079496,6.845181,8.815386,-2.372237,-3.107695,2.298489,-7.162330,6.162344,9.293847,-3.462667,5.994716,-8.472615,-8.785172,8.294627,7.722541,-6.810301,2.740815,8.004712,7.980418,6.133224,1.320029,-8.794098,-7.724188,1.598395,-5.471415,6.027115,3.543978,-9.767062,-6.189922,-8.912541,-8.084811,-8.383683,5.944799,-8.432762,-7.506569,-5.388167,-9.765590,2.624729,0.842012,4.309131,-7.099112,1.524830,-6.764805,-9.759540,2.810056,-0.978714,4.003693,-4.509598,-3.272699,-0.166479,-3.071395,5.055139,3.701841,-1.882916,3.128271,6.976247,-2.234818,7.711361,-4.341345,8.583455,2.094044,5.848462,-8.867919,4.130689,-5.470698,4.541143,-1.571253,-7.835254,4.768637,-7.945670,-4.008497,8.477109,-9.130147,2.735727,-4.178891,6.922928,-3.483962,-1.157504,-5.158457,-4.965070,4.888859,7.826589,-2.204803,-7.190074,-3.594751,-2.378638,-2.017956,7.596820,0.220764,3.581263,7.579309,8.915287,-6.623860,6.377295,0.528496,5.726053,2.374556,-9.273931,-5.883426,-5.369934,-9.870564,7.885451,-2.711175,3.356046,5.380905,4.005062,2.650599,5.958317,-1.432166,-0.332303,-9.751193,4.565407,5.480305,8.032572,-1.458447,-9.417130,-9.772586,7.604666,0.949490,-8.905386,1.487696,1.737110,-6.537568,-4.691198,5.715810,-6.053304,8.009682,-1.476183,-5.204777,-8.115050,0.562684,5.833231,2.528108,-6.936652,4.918741,7.338849,-3.614669,-0.236979,1.308596,6.150940,8.262946,-2.208963,5.714368,0.764276,-3.487032,-8.529244,9.809534,-8.417174,-7.582993,7.414820,8.351349,0.401218,9.067847,6.093595,-9.354534,-9.596202,-9.765499,-9.499577,8.013198,0.005470,-1.526059,3.081620,3.975471,-9.944051,-0.022937,-1.486035,-8.174583,6.230360,8.564268,5.795492,3.383055,1.913765,-2.871426,-4.461920,-4.584601,-3.487986,3.568470,-3.831735,7.323048,5.231507,-3.671561,9.873857,6.173072,-4.160971,1.556708,-2.571168,7.807014,7.098618,-6.791153,9.109298,5.507966,0.708794,6.433660,-7.249090,-0.178654,-8.168839,4.474099,7.018080,-5.961036,7.604643,7.129988,9.455201,4.575499,3.364492,-2.227755,-1.032324,-4.508826,-7.343853,9.507745,-6.669850,-2.133801,-0.455620,-1.052260,-0.766875,-9.749710,3.572732,-4.823420,-3.812006,3.191091,1.601391,1.606930,7.553202,7.396676,9.153508,-6.032876,-1.575658,3.462673,-9.127718,-1.244416,-5.179047,-3.766288,0.919615,-5.318977,6.286832,6.701220,0.235046,-7.145750,-0.186580,8.599777,8.812646,0.027949,-1.252774,-5.200317,-3.979122,-9.064216,2.487723,-6.405994,1.626144,1.746170,-0.554985,2.735263,0.642376,8.260518,5.467347,2.724250,-8.399644,-6.253717,5.372628,-4.732049,1.879857,0.835367,9.164648,4.793642,-6.164599,2.417881,8.433250,1.482542,2.510767,-1.137063,4.394015,6.794649,-3.669780,-4.631125,-2.611936,-8.390759,4.485287,1.305149,8.324884,0.697440,5.983766,3.307142,0.288720,1.413060,0.686338,9.168336,1.792791,-1.640305,-7.085315,-9.418167,6.707149,9.329427,-3.437367,-8.913642,7.259726,6.300235,-1.967534,-3.860417,9.796088,-7.920230,1.973288,6.103988,-2.979757,7.828042,4.367884,-7.927107,-6.500552,1.359762,-6.915017,-2.716734,-1.579894,-3.795500,-1.449768,-1.509637,-6.708793,-0.338627,7.436612,-2.663585,-9.847892,-0.316686,6.556389,-4.471619,-2.898688,-9.483001,9.686513,8.076347,5.607263,2.178427,-6.763844,7.541534,-9.409746,-0.384030,-3.215037,-2.541307,-4.737949,-4.818393,0.513279,8.281086,-6.696894,-4.237084,3.027440,7.094321,1.732177,-9.973646,8.596358,-7.209123,-2.400368,1.918736,0.230802,2.973372,-8.359927,-1.292495,-2.786607,-9.607557,8.738859,3.861846,-7.319414,5.513351,6.217256,2.011699,-1.976664,-0.396560,-0.950623,2.960804,4.783973,-0.116676,-0.673093,2.795362,-7.432780,5.107865,-0.639625,-9.613948,-9.515592,-9.411218,-6.366106,-1.569375,5.468935,7.531180,-9.080476,-3.200672,8.819983,1.856414,1.062843,-1.218588,-4.542309,3.205050,-9.820797,1.226410,-5.254353,-3.150218,3.624733,3.740622,-4.061764,8.330640,2.404125,-1.877615,-6.983381,-5.277252,7.738215,6.754428,-6.579898,-4.748832,1.376961,7.859557,-0.386557,-2.991217,-7.785934,-8.482870,-3.918828,2.675967,2.016972,-6.301821,-3.875424,3.296148,1.358485,0.081923,-7.124755,5.382500,-5.557707,6.256519,-9.603219,-6.132089,7.931610,6.680736,-6.195002,5.432393,3.643788,3.591990,-3.392893,4.160044,-0.610580,3.186379,-6.424561,-4.579559,-4.247842,2.073643,2.084150,5.246628,6.134166,-1.117932,-9.206639,8.852263,9.714559,6.070996,-2.878424,1.293119,2.816231,0.103108,6.718220,-8.606713,8.397297,5.554871,-9.996790,3.835962,3.488600,1.838413,8.595298,7.548129,-9.015520,-0.882013,1.425780,7.301568,-0.102011,8.634919,-9.831932,5.028745,3.291904,-2.738146,-0.570708,5.811142,7.711948,3.552770,-9.943871,1.099177,9.620515,4.265492,3.130511,3.072958,4.330646,-3.698426,2.785589,5.883894,-4.405593,-2.373132,0.010510,-1.146290,-8.656017,9.682999,4.319583,0.973737,-3.060726,9.345024,3.603049,4.327729,7.507210,-4.223275,-5.845867,-4.826396,6.092611,9.808657,-2.670783,0.598671,7.108578,2.613800,7.498413,4.886614,6.301359,-5.108491,4.712391,5.055263,9.609572,0.145402,5.174714,-5.475944,-1.912186,7.231098,7.222797,-1.045099,2.938168,4.733593,-6.117474,-1.728539,-0.228084,9.362124,4.668735,-1.386830,-2.335085,-5.109467,6.812239,7.446733,-6.665935,1.029889,4.103536,-6.864560,9.809110,-1.293300,-0.156007,-7.716952,0.393790,-6.641503,-2.276804,6.634512,3.983201,5.574927,-6.012719,-3.478140,0.002727,-2.591961,9.742231,-1.081874,0.772836,8.906303,2.973975,-8.798499,9.666054,0.243492,9.536236,-8.205725,-5.009768,-5.203978,-7.320026,1.402969,-7.065541,1.050502,-9.295756,-2.675118,-3.007313,5.594633,9.993971,-9.019332,2.847641,0.740584,-6.250887,9.894317,5.435473,6.676247,-9.192398,7.236292,-6.238153,3.543571,-7.293987,-6.486442,7.989763,4.194043,0.404920,8.574983,1.506666,-9.431131,-6.417019,4.988458,7.353303,-6.378280,9.964759,-8.652164,-3.940461,5.254297,9.852571,2.327479,4.422702,-8.785447,-2.674924,8.962027,-9.225683,1.867490,7.893125,-8.565974,9.101513,9.075907,-7.046818,-1.294503,4.398563,-2.134982,-0.379268,0.322099,-6.627887,-3.736070,4.318039,-4.583882,1.821571,-8.937125,-6.009132,2.824480,5.017202,0.890380,-3.394359,-6.185664,2.101408,3.096284,-6.582057,0.986092,-4.062303,0.676279,-2.100501,9.158195,7.992688,-6.300163,-6.593487,9.781486,-0.255784,8.699714,1.483742,-5.006142,-8.585956,-9.291876,-9.223609,1.077286,9.060877,-7.332267,0.152426,-1.146340,-0.405339,-0.204245,-1.680823,-8.437283,-5.934428,-4.724758,-7.408054,-4.953795,-3.856354,8.421792,8.061218,6.626222,-3.401365,-5.775148,9.378399,-6.176889,0.899438,-5.099687,6.917317,9.267278,-1.902093,1.121999,-1.441358,-3.781700,-3.852306,-4.508476,-1.056500,-1.031072,6.740118,-7.618007,7.344446,-8.790861,-6.367784,8.564731,-7.654258,4.078201,-9.997682,9.074019,5.161958,5.471618,2.970729,3.801940,0.435883,-3.049614,-3.966892,2.417693,-9.991000,-1.746580,-9.682113,-4.244134,-3.100947,2.747756,-2.184211,-7.363288,-5.882181,6.643737,4.918111,-7.915533,-1.310782,8.605527,2.573440,7.620191,5.702207,-3.425466,2.198150,-7.610134,5.712834,-5.577243,-2.933807,8.409301,-0.368595,-2.371962,5.226290,-1.122687,-4.961805,-8.298025,-8.190418,7.566897,7.157555,8.383075,-2.353274,5.704907,2.467019,9.693146,-1.297636,4.875031,2.125171,-0.658950,-5.508111,-8.069487,-5.321979,-7.204080,-1.462312,-6.632627,-6.185810,-7.764007,7.256333,-7.191213,2.716414,-7.881728,-8.920757,-2.235356,-8.344793,-6.441386,1.690881,8.303137,7.528762,-9.717578,4.855572,7.977586,-2.023236,-2.057501,5.310398,8.346107,-7.569228,-1.369288,6.697203,-7.882956,4.689043,-2.714299,0.857924,5.558500,1.623283,7.871149,-1.726416,-6.797152,-8.375357,4.114161,6.507595,4.613005,-2.340744,-2.952755,-0.642829,9.876801,5.272309,9.250342,1.976600,4.354756,-8.602497,8.548833,-8.286327,-4.305134,-6.916865,-5.882821,-6.098150,2.757877,-2.458740,-8.617564,-7.414117,-3.058979,9.312623,2.544143,-0.714068,9.834184,3.301834,-2.134602,4.785787,-8.016446,-8.319613,7.573676,-1.142255,4.161911,0.584401,-8.003085,-6.304040,1.887149,-6.668977,-6.894280,-0.696462,7.537596,9.363520,0.272835,-2.585125,-3.004965,-8.671279,6.980913,2.440313,7.227738,-7.353599,-3.543506,7.623383,-3.571294,-1.981775,-9.296378,8.549839,-9.953109,6.347552,7.917499,-3.168417,-3.655400,5.006965,8.601170,7.004310,6.721144,-9.306919,-1.298566,-1.755048,5.210456,1.729179,0.368490,-1.501205,4.480021,2.716346,3.974313,3.334969,-0.189765,-8.777239,5.372668,1.491636,9.484470,-5.291146,1.021875,2.180354,-4.372349,-7.310199,7.653153,5.829008,8.776090,5.281651,-6.919549,-5.028862,1.050777,8.210269,-0.491683,-1.326664,-0.877901,1.260849,8.775445,4.256526,-7.511664,1.734620,-9.495708,-0.062497,5.437912,-9.268509,-4.077345,-5.485199,8.844060,-5.607200,-0.986763,-6.094416,-0.931859,-7.618598,-7.646205,3.178235,-3.708273,-3.262692,7.109850,-2.097743,-0.275899,0.175583,9.627493,-6.739068,4.286193,9.712068,2.265484,-6.004541,2.836087,6.176556,-9.982651,-9.375839,0.901473,0.077989,-5.126814,0.963775,6.537349,9.741644,8.124437,1.305653,9.077752,-5.496684,-3.369838,-4.852271,-5.315805,2.696825,-3.924387,3.102908,-9.369640,-8.455165,-2.484574,5.927547,-2.602017,-0.242402,4.958435,-3.673107,-3.570362,0.210004,-2.741071,7.580482,-0.095641,5.872922,-7.173153,-5.600865,-2.413181,4.990336,4.742632,-2.265379,-3.714692,4.834269,-4.256191,-0.188018,-8.638779,-9.477401,3.670264,2.368145,-6.909157,-8.333426,3.818115,-4.180578,7.348348,-1.034186,-5.017564,8.370782,-0.682379,-9.840823,-8.221695,4.425733,3.702248,9.304139,9.707926,-9.149373,-0.999075,9.424936,9.317831,7.895742,7.189241,3.973613,-6.385621,-7.697755,3.989064,4.958587,8.076314,9.630826,-8.404123,6.684762,8.814230,-2.502018,-5.585788,-5.030211,2.569147,3.773409,2.457452,-1.251635,8.185324,-3.765287,-8.098575,-6.511781,0.602886,-1.216595,0.463592,2.514111,4.944534,-5.156681,2.290358,1.629178,-0.714390,-9.846195,-9.773676,2.741180,7.137786,-3.094545,5.773488,-4.064898,-4.258003,8.524249,-5.786333,8.218945,-3.743303,-4.870382,-9.067270,-5.871271,-9.873130,-7.376960,7.801231,-6.535202,-3.105494,-4.073186,1.916921,-8.833452,7.433450,0.696180,-9.321722,4.995847,-5.774068,5.235767,-5.243559,1.517910,-6.843690,3.053052,9.778242,-9.637564,-4.100740,-5.254663,5.686555,-0.668845,-5.110931,9.158032,-2.680498,6.000267,-5.048696,5.397638,-3.617648,5.992310,-5.408417,-3.462628,-8.245752,1.666538,-4.697413,-7.653661,-0.659713,-7.773101,4.967014,-6.363865,9.704634,-3.702319,-8.538976,-3.268704,7.615642,4.172425,-8.783662,3.885076,-6.293198,0.114432,-3.024501,4.668396,-7.747111,7.012618,5.231874,2.004626,8.279219,-8.292383,3.094482,-4.534424,-1.005756,1.910542,-5.752077,7.377035,2.742992,1.430533,-4.435305,1.861362,-7.622044,-3.802175,-4.459297,-8.463026,-4.183531,7.060085,1.379360,-0.829572,8.371928,-2.984298,-8.121538,-3.569435,7.727696,-6.481367,-8.109651,-5.113223,-2.959711,-3.959966,1.647414,7.224615,7.336681,6.230626,-4.128409,-4.768851,9.366721,9.930561,-0.781132,-5.063756,3.894783,-0.496607,-1.909027,4.726521,5.389303,1.455874,-8.378542,-8.206784,9.873121,1.869260,5.196232,5.215530,-7.545003,0.466694,-5.455650,-9.151868,-5.082795,-1.086632,-7.768646,1.458700,1.564474,-3.818394,0.110732,-7.761294,-2.177461,0.307028,5.184044,6.426260,9.899357,1.772838,-8.146971,-7.932321,-1.977042,3.263496,-5.117952,-5.400994,1.125377,0.027001,-4.491013,8.870874,9.118252,-3.674823,7.480989,3.116761,-1.316742,-5.309152,-2.517267,4.363817,3.447430,1.834875,-2.944846,-2.459176,-4.396166,-9.714206,4.972780,-1.863741,-3.313889,0.321796,-4.540522,8.232180,9.821189,8.630790,-9.891784,-5.663626,0.023061,9.939821,-4.276451,8.011902,3.837625,3.943288,2.306414,-0.351905,-5.495441,3.383682,-6.709659,-9.666043,-9.754010,5.223605,-7.737604,4.397135,-4.933880,4.943195,-7.638024,1.504470,3.177327,-1.690998,-9.986539,-7.145192,-4.661377,5.913005,-6.954223,1.552663,0.752984,3.540891,-0.700043,0.078694,5.086941,5.037408,1.384765,-1.415303,5.812375,8.208826,9.520436,9.413981,2.093154,-8.156822,-1.174441,1.529136,-5.349758,0.502085,4.240686,5.828457,-3.720431,-8.987054,-3.725806,-6.458424,8.034457,1.952013,6.811364,-9.458280,-8.142593,9.892803,-8.097757,-6.188389,9.927873,-3.772407,4.454703,-7.295211,-8.981989,4.612242,4.113109,1.348701,-9.881095,1.915662,8.647967,-3.835937,-6.554828,-8.077056,-7.082869,8.940343,-4.969737,-0.278462,-6.514410,8.884349,1.427152,2.569332,-7.410701,5.207014,9.883785,0.144924,9.303342,-8.545314,7.807702,-2.554271,-7.564902,0.227113,0.987256,-7.858769,-1.465624,0.440086,-3.286537,-5.534700,6.640583,8.988236,-8.024843,3.782537,1.176044,6.710658,-1.891743,-3.961270,-5.117862,9.471808,-3.501936,3.874589,-3.755324,-8.946993,6.961404,8.366610,6.154678,9.331420,6.944522,2.900555,2.329906,0.597951,-4.930811,-0.863255,-8.984719,5.891499,2.328335,3.726449,0.170419,-6.868914,5.190603,4.794824,3.032426,-7.746539,3.117998,2.687001,7.399079,-4.129082,-0.356674,-4.181202,-3.474111,9.542056,-0.332797,9.096903,3.968783,-0.599254,-7.019455,3.499423,-2.102340,-4.588616,6.867569,-2.603717,8.127276,-1.961197,2.999490,-7.052646,-3.270099,1.273610,-4.135688,-1.823222,4.247522,-8.730186,-7.520619,1.398992,-4.264835,-1.083736,3.490864,-3.150488,2.255613,-5.466400,0.554429,5.702149,8.308977,-3.829257,7.477138,8.660494,7.604678,-6.979746,5.101339,-5.489369,-0.858442,4.286502,-0.014919,-3.522452,-7.283340,-5.542748,3.707873,-1.800798,5.700612,-0.568857,9.303377,0.052100,-8.169634,4.784177,0.936655,5.047187,-6.891305,0.824444,-8.882432,9.923431,-9.320921,-8.729345,0.144899,-8.632454,7.735585,1.130306,-2.939792,9.183534,7.605230,-6.573763,-3.700598,-9.035074,-1.137434,9.221900,1.102418,-7.384194,2.713913,3.534316,1.522992,6.789866,-3.476320,8.839208,6.323276,7.949323,2.510595,0.583106,3.861661,9.852023,2.496216,-1.455619,5.527289,-8.967479,1.016334,4.310818,-6.165734,7.131747,8.213914,2.547893,1.667762,4.706948,2.340252,2.833763,-4.546060,-2.242275,4.235548,-3.436547,3.854517,4.034893,-3.399378,7.276518,7.850999,-6.568043,-9.742208,5.869239,-2.410256,-3.914049,1.744504,0.052864,-4.793016,6.063592,-3.375464,-1.644331,2.663559,3.401207,-8.554219,-8.382798,2.672456,7.809880,-4.658439,-7.878563,3.597102,-3.611662,-8.293109,1.246567,-1.460974,-4.783061,-6.894841,-3.800484,2.030621,-9.242030,6.087398,9.264690,5.209142,-7.132491,-7.025792,-0.405414,5.089010,-6.333118,-9.646874,3.380695,4.135534,-3.011201,-3.144289,1.761955,-8.273405,-2.278928,-5.050026,-5.544091,-6.933334,4.850930,2.292895,-3.842522,4.848367,-0.690102,-1.242750,-7.711606,-5.816876,-4.659226,1.190822,-9.874394,2.597026,2.061702,-7.095590,3.292605,-6.460460,5.147522,-5.608643,2.249311,0.271381,-4.656435,7.266075,2.756196,4.770019,-4.774226,5.169483,-6.947558,2.797228,-1.823014,1.692393,-6.589272,-3.364113,-6.444462,-8.457202,-7.849845,3.104604,8.791085,7.428746,-3.977902,-1.241354,-2.031954,7.049072,-8.617541,-5.560754,7.292274,-7.131393,-1.233515,5.351126,-3.792916,-1.042483,7.311930,2.206643,-6.051253,9.523592,4.829788,9.189784,7.029307,-1.161617,-8.947736,-5.051854,-6.068022,9.427091,-8.337588,6.035883,-2.517865,0.821717,-0.778567,6.027439,-5.626532,7.309763,-4.082832,1.930875,-0.794746,-2.389141,-1.972995,-6.164011,2.424278,5.816792,-2.752787,-7.932194,-0.389824,1.804564,-3.356587,6.688761,8.764524,-1.375910,-3.722657,-6.832996,9.896783,5.208457,4.960540,6.766264,8.401317,-7.876220,5.892557,3.723490,5.563213,-1.246412,3.460576,-1.315585,9.299229,-0.454826,-2.344383,-0.826658,8.728361,6.808735,8.852542,-6.779294,-2.960507,-5.426217,3.592971,7.207269,-6.562269,9.874673,-1.859112,8.929526,-7.278114,9.935656,-3.019100,2.907632,3.043650,-1.135135,3.524137,1.569281,-3.467225,6.316137,3.667868,-0.452029,7.951199,7.577932,5.433141,3.778675,2.449616,-0.460467,-6.653057,1.422989,-6.771539,-4.645070,-4.048934,1.383442,2.242321,0.757898,-7.673470,3.321694,0.084412,4.599204,0.915884,-3.887021,6.268964,-1.181797,-3.315891,1.630923,8.960991,-0.357205,3.679637,-7.054436,6.904420,-3.044676,9.375480,1.253740,-3.207294,2.643659,5.085953,-5.378086,-7.070447,-2.920739,5.273303,-5.070814,6.875747,-0.162511,-5.936600,6.128934,-9.114258,1.605135,1.601853,-3.564816,2.382723,7.211571,-7.969784,3.726948,-3.991241,4.104129,5.947294,5.355353,9.093331,-6.398676,-1.125614,1.025764,8.243117,6.333900,7.618588,-2.861135,1.009565,0.087506,-6.747211,3.968342,-3.761527,-1.054478,-4.820335,-9.958080,1.269795,9.626865,-6.742434,3.473587,-2.710683,8.795748,-5.474390,-4.149641,1.858666,9.256651,5.986111,3.269976,-5.740662,6.638764,9.506563,-1.232658,-8.756400,-4.009512,-9.964741,-6.862268,-8.380015,-8.751163,-0.744265,7.553628,-5.692502,2.924162,3.732653,5.078528,-8.115423,-7.216860,-5.201600,-7.300088,-8.209052,6.454794,-7.451512,7.042338,1.426241,-2.048544,9.283129,-1.491242,-2.392571,3.663374,-9.381331,0.051773,2.337829,-9.266056,-1.420168,0.025501,6.466277,6.171756,-4.845375,5.066184,-9.280899,1.306842,8.101316,1.732041,0.247379,2.320264,9.474548,-7.177838,-4.156092,-3.396468,-2.292670,2.490132,3.115784,5.146755,-7.946085,0.750436,-7.897309,-7.837619,-4.642227,-7.941732,-2.247370,1.801333,-5.688755,-2.453032,-7.693255,-3.713993,-2.400866,7.748840,-5.035194,-2.296408,8.401564,-8.067746,-8.147737,5.567177,-0.459062,7.586551,7.459153,8.889320,-1.231568,-6.923708,-7.781100,4.302199,-7.409932,-9.775200,-3.689140,9.597007,4.198780,5.936718,-7.333880,-8.844529,-7.555469,6.010684,3.635109,-4.069570,2.535178,-9.152360,6.471284,-7.777972,-4.214624,-4.057659,0.206465,-6.853680,1.697260,2.644413,-3.805690,3.152482,8.427243,-5.701714,7.081727,-0.708147,7.663402,-3.811720,8.943610,8.579971,-5.842263,-3.059442,4.677300,-4.121813,-9.198916,5.500182,3.675375,-0.491598,7.109855,0.484742,1.252138,4.169196,3.246018,8.723731,0.907574,-7.291540,-6.268318,1.939488,-9.268422,3.815614,9.197768,8.083446,1.081291,7.694962,4.208902,0.206823,7.733717,3.001355,-7.943097,5.398784,1.059923,2.052667,-1.008597,-7.987657,-0.326506,2.924987,-2.638396,5.906109,-3.544074,-6.003616,5.195775,-1.853113,9.768402,5.892356,-9.196158,5.476641,8.781956,-7.095075,3.300224,-5.443681,-0.999380,-7.622430,-6.765452,-7.331027,-8.490082,-9.780493,-7.014682,-2.068440,8.110070,2.499204,-7.431359,7.920432,-3.216975,2.883948,-6.495937,7.030512,-6.398179,1.573222,0.748472,8.544723,4.313456,-6.916814,2.697737,7.746010,-3.496608,-4.328984,7.840705,-7.915724,5.390117,8.010206,5.271099,-9.558488,-0.997727,6.532790,3.678441,-1.735599,-6.693052,-2.882144,5.937987,-5.953939,7.501367,1.188901,5.473789,-4.890575,0.921163,-1.676845,-5.900451,-4.605603,0.135501,6.083849,4.028037,6.639276,-9.841385,9.185238,2.344975,5.410094,-8.420642,4.049489,8.020435,2.133465,0.864171,3.972951,-0.528663,3.321986,2.330075,7.110354,-0.107056,3.445033,-7.130296,-6.870464,-9.149551,-5.287594,-0.867317,-4.333285,4.397657,5.004931,-2.094355,3.560950,-7.118045,-8.269241,1.629206,-7.766468,-7.151785,-1.945605,-7.803081,-2.876039,-0.609216,-8.373039,-6.021844,-4.764246,-6.773982,-6.511072,2.398997,6.425929,-7.230507,7.055844,4.536784,0.266639,1.326080,8.675208,0.531941,9.243475,-8.944904,-0.978605,-4.472109,4.803680,-6.150328,7.281681,2.061284,-2.650609,-2.764434,2.095037,8.455865,8.908611,-3.829047,2.365905,-2.113464,5.090782,-0.171469,8.804695,4.131286,9.264151,3.591835,1.248706,7.164405,-7.254990,9.180069,-3.837667,0.104210,-8.857474,-4.585492,0.399244,-4.751436,0.988463,-6.406064,5.520638,7.293757,-9.893920,-0.426253,3.638383,4.633864,0.884122,9.257810,8.580976,-7.815687,-0.614571,3.048575,8.458480,4.189140,-0.269165,-6.826006,5.919280,-4.886212,-6.425169,1.628509,9.585803,2.490848,4.541312,-3.292381,9.888664,-8.056796,6.622222,0.081684,9.100705,8.215901,3.781833,-0.047453,-9.395642,-3.873967,4.317082,-7.144583,-7.833226,3.534784,5.556359,-8.635886,-0.221380,-3.604923,0.247231,6.084618,-0.611977,-1.567417,-7.925187,-8.974775,-1.095094,3.341691,-8.374407,-5.919492,3.488897,7.932442,9.827566,-7.528815,-7.118119,3.552732,-8.342460,6.091512,9.726804,-2.728490,-9.860244,-2.369138,7.366034,-4.089530,-2.652636,-9.519128,-2.858199,-6.719050,-2.292797,-8.042371,9.710545,-4.717228,-9.646845,5.631359,3.849305,0.439630,-4.687757,-8.031751,1.147939,-4.207173,0.789153,7.076936,-5.439341,7.082645,-4.152577,0.497614,5.786828,-2.811587,1.464727,-8.825077,4.258968,-0.622948,3.950837,-7.066800,8.478374,-7.405995,5.875382,1.167425,3.475317,-5.274403,-6.097518,-5.790362,3.913280,5.251336,-8.027689,-4.520400,4.595728,7.014252,4.386746,5.517983,-5.475513,-0.750304,8.533865,5.742674,-5.349095,9.338131,-8.368663,6.938575,-9.480843,-0.999247,-2.532134,-4.769145,-3.474863,-4.997252,2.880115,-0.315647,-3.968068,-6.701957,-8.389248,-3.475277,4.217080,5.764100,9.781144,-1.744170,9.093075,-4.045296,2.424065,1.413908,2.963833,0.068328,4.999281,-8.044961,-5.090239,-5.561214,9.731281,-6.662322,-5.841191,-6.205821,-2.870286,7.555413,5.106608,6.089910,-1.466697,-3.791073,-0.386987,7.064215,-2.986811,2.928636,-1.779978,0.679902,0.465509,-1.188035,-6.704146,7.513048,6.078306,-4.097011,0.619203,6.332861,3.664266,7.363528,-0.995149,7.718382,-9.365243,3.296225,-7.422024,-2.830140,-2.432129,1.729013,3.488416,0.525487,7.305806,-4.069674,1.665904,6.746882,5.132176,7.256562,1.550644,-2.964934,2.175643,-6.614658,5.762968,1.105149,7.048905,-3.511421,-4.176408,-9.328652,5.901867,-3.146207,-5.561914,9.414535,-0.700444,0.851888,-5.106395,6.226970,-6.727810,8.328073,9.689333,6.389882,-5.219496,6.891941,-5.148112,-0.542793,-7.496868,-3.543547,-3.342730,3.221152,-3.863247,-9.167842,-4.635815,3.683287,3.469447,-8.828167,8.172429,-6.771503,6.153417,-2.028518,8.922287,-7.005916,4.362944,-9.909158,-4.397903,-4.765052,7.660381,8.615284,2.888334,-2.959598,-7.498366,6.242646,-2.028165,8.486710,5.525268,5.571013,-5.955160,4.152817,1.154743,-7.452687,6.781855,-9.027234,1.512017,-3.241791,-4.760517,-9.490490,-1.206560,6.941253,9.114689,-5.686892,-8.428722,0.114204,3.204619,6.531675,-9.423735,0.478138,-3.119377,-0.219625,3.320852,-0.834810,8.237518,-4.608483,-8.943488,5.605400,-5.446479,2.764056,6.611262,-6.587854,2.554408,4.482874,5.750576,0.491436], dtype = "float32")#candidate|2106|(2560,)|const|float32
call_2105 = relay.TupleGetItem(func_1186_call(relay.reshape(const_2106.astype('float32'), [10, 16, 16]), relay.reshape(const_2106.astype('int32'), [10, 16, 16]), relay.reshape(const_2106.astype('float64'), [10, 16, 16]), ), 1)
call_2107 = relay.TupleGetItem(func_1190_call(relay.reshape(const_2106.astype('float32'), [10, 16, 16]), relay.reshape(const_2106.astype('int32'), [10, 16, 16]), relay.reshape(const_2106.astype('float64'), [10, 16, 16]), ), 1)
output = relay.Tuple([uop_2066,const_2079,bop_2084,call_2098,var_2099,var_2100,call_2105,const_2106,])
output2 = relay.Tuple([uop_2066,const_2079,bop_2087,call_2101,var_2099,var_2100,call_2107,const_2106,])
func_2108 = relay.Function([var_2065,var_2083,var_2099,var_2100,], output)
mod['func_2108'] = func_2108
mod = relay.transform.InferType()(mod)
var_2109 = relay.var("var_2109", dtype = "float32", shape = (11,))#candidate|2109|(11,)|var|float32
var_2110 = relay.var("var_2110", dtype = "int32", shape = (24,))#candidate|2110|(24,)|var|int32
var_2111 = relay.var("var_2111", dtype = "bool", shape = ())#candidate|2111|()|var|bool
var_2112 = relay.var("var_2112", dtype = "bool", shape = (80,))#candidate|2112|(80,)|var|bool
output = func_2108(var_2109,var_2110,var_2111,var_2112,)
func_2113 = relay.Function([var_2109,var_2110,var_2111,var_2112,], output)
mutated_mod['func_2113'] = func_2113
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2152 = relay.var("var_2152", dtype = "float64", shape = (11, 8, 15))#candidate|2152|(11, 8, 15)|var|float64
var_2153 = relay.var("var_2153", dtype = "float64", shape = (11, 8, 15))#candidate|2153|(11, 8, 15)|var|float64
bop_2154 = relay.floor_divide(var_2152.astype('float64'), relay.reshape(var_2153.astype('float64'), relay.shape_of(var_2152))) # shape=(11, 8, 15)
uop_2157 = relay.exp(var_2152.astype('float64')) # shape=(11, 8, 15)
var_2171 = relay.var("var_2171", dtype = "float64", shape = (11, 8, 15))#candidate|2171|(11, 8, 15)|var|float64
bop_2172 = relay.floor_mod(var_2153.astype('float64'), relay.reshape(var_2171.astype('float64'), relay.shape_of(var_2153))) # shape=(11, 8, 15)
func_178_call = mod.get_global_var('func_178')
func_182_call = mutated_mod.get_global_var('func_182')
const_2181 = relay.const([-1,8,-4,-5,6,7,-9,-1,-9,-7,5,9,-3,1,9,2,6,7,10,-5,3,2,-7,2,-3,2,-10,5,4,-7,7,4,-9,3,2,-8,10,-8,2,-4,2,-2,-9,-6,-4,-7,-2,4,1,-3,-5,-9,-10,3,-10,6,7,4,6,8,-3,-10,-7,10,-2,-2,-5,-4,-1,-6,6,-2,-3,-8,8,-8,-2,-8,3,-8,3,3,-2,-3,-4,5,-5,4,5,7,-7,-6,3,7,-4,-2,4,4,-2,2,-6,-7,-3,-8,-4,-6,10,-1,8,1,-2,10,8,-3,-9,-6,9,-5,-8,-5,-6,3,-2,10,-2,-3,-6,10,5,6,-8,10,-8,2,-5,-8,9,-8,-6,1,1,-10,-7,5,-6,9,-3,-1,-1,9,-1,9,-8,1,7,-2,7,9,4,9,3,2,-4,-9,8,-3,4,-7,10,8,1,10,-2,2,-3,6,7,-3,2,6,-1,7,2,10,5,1,-8,1,-10,-5,-4,-8,-10,-3,-5,10,-1,-3,-4,-5,1,-2,7,-8,-8,1,-4,6,1,4,-10,2,-5,4,-8,-10,-5,9,-8,2,-7,-10,3,5,-5,10,7,-9,-4,4,10,-2,-8,8,5,-4,2,-5,9,-6,3,4,-7,2,3,-5,10,9,-8,4,8,8,-1,2,-7,6,6,9,2,5,7,-10,9,5,-8,-1,-6,-6,-5,8,-9,-9,-6,-10,-10,-4,7,4,-7,3,9,-4,6,3,-8,-1,-5,6,1,-10,1,9,-9,-3,-3,4,2,-8,-7,10,-2,-4,3,8,4,-6,5,-4,-8,3,-5,5,2,-8,4,4,-8,3,-8,7,1,8,1,-10,-1,2,9,-7,-1,-10,4,-1,4,-6,-4,-6,-10,-3,-8,-10,8,-7,9,8,9,-5,3,7,-9,-2,8,10,-2,-7,-7,-9,8,10,2,-7,7,5,-9,9,-3,-1,-9,-9,5,5,-4,5,-2,9,-4,-4,8,2,10,-5,4,-6,-8,-6,-2,5,7,7,-6,1,3,-10,5,-8,3,9,-1,10,1,-2,-9,10,6,3,-6,-1,-2,-9,1,1,3,1,7,5,9,3,-6,-2,-4,4,1,-6,6,-9,5,3,10,-5,-7,-4,-10,4,4,8,-3,6,8,9,1,1,10,5,-7,-8,1,-1,-1,-6,-1,10,7,-1,2,-8,-10,9,2,3,-4,-6,-2,-5,1,7,6,-9,-5,-7,-2,8,-4,3,10,-7,-6,-9,-9,-1,-8,2,6,-8,-2,8,1,-6,-2,3,7,-8,3,1,-4,10,-9,-7,-6,7,-1,1,-10,1,10,-6,3,9,-3,-8,1,10,-2,6,-3,5,-8,10,-5,-2,2,-1,-3,-3,-9,3,8,-9,-2,6,9,-1,-8,-7,-9,-8,-8,-10,-7,7,-1,-5,4,7,2,1,-7,-10,-3,-9,-5,-7,-6,-4,-7,9,3,-7,10,3,9,5,6,10,10,4,-6,8,6,-5,5,1,9,-5,3,-3,3,8,-1,1,-8,7,-5,-6,-9,6,-4,-1,6,-4,-5,-9,4,8,-6,7,5,9,-2,-3,-5,-6,7,-4,5,-9,-4,9,-8,5,7,9,7,1,3,2,-4,-9,-6,-3,-2,3,3,-5,-8,-6,-2,6,6,-9,-3,9,9,-8,10,8,-4,-7,1,-7,-2,-6,1,-4,-9,-6,-3,-2,2,7,-9,-3,4,-9,3,5,-2,-2,5,10,8,-8,2,3,-8,-5,5,-2,-1,5,-9,-3,-3,4,8,2,1,-7,2,6,-2,8,10,-6,1,8,4,-10,4,-7,-7,10,-2,8,1,-3,4,8,-1,8,-8,3,8,2,-5,-6,-9,8,-7,3,-2,-9,-8,-2,-5,-3,7,-6,-9,-6,-9,-7,-1,10,-3,6,-1,-2,3,-10,-4,-1,10,5,8,-2,-8,-7,-5,-8,2,-4,8,2,1,2,-8,8,4,7,-7,-1,9,-5,-5,-3,-7,-9,-4,-8,6,10,-5,-2,-4,-1,8,-7,9,9,4,-2,10,6,4,-7,-6,-2,7,-7,1,-1,1,-5,-9,6,-8,-4,10,10,-6,4,-6,-10], dtype = "int8")#candidate|2181|(792,)|const|int8
call_2180 = relay.TupleGetItem(func_178_call(relay.reshape(const_2181.astype('int8'), [6, 12, 11]), relay.reshape(const_2181.astype('int8'), [6, 12, 11]), relay.reshape(const_2181.astype('int8'), [6, 12, 11]), ), 0)
call_2182 = relay.TupleGetItem(func_182_call(relay.reshape(const_2181.astype('int8'), [6, 12, 11]), relay.reshape(const_2181.astype('int8'), [6, 12, 11]), relay.reshape(const_2181.astype('int8'), [6, 12, 11]), ), 0)
bop_2183 = relay.bitwise_or(uop_2157.astype('uint64'), relay.reshape(var_2152.astype('uint64'), relay.shape_of(uop_2157))) # shape=(11, 8, 15)
bop_2186 = relay.less(call_2180.astype('bool'), const_2181.astype('bool')) # shape=(16, 7, 792)
bop_2189 = relay.less(call_2182.astype('bool'), const_2181.astype('bool')) # shape=(16, 7, 792)
uop_2197 = relay.cos(uop_2157.astype('float64')) # shape=(11, 8, 15)
func_899_call = mod.get_global_var('func_899')
func_903_call = mutated_mod.get_global_var('func_903')
const_2209 = relay.const([[6.712423,-9.941334,-6.507656,8.008309,4.367033,0.005747,8.299278,2.937354,-9.460043,-3.328661,3.452905,4.470976],[9.358741,2.157265,-4.493331,2.097861,-4.371129,-3.997755,-5.728353,-6.168192,5.685706,4.961092,-1.720885,9.702533],[5.707819,3.170534,4.052276,6.917459,7.005087,-5.015263,5.241900,5.921895,2.512337,-5.075684,2.995271,6.496480],[-5.983548,-4.448626,-5.621458,-4.874842,3.320943,-1.937860,-6.782239,4.635405,-7.409530,-1.806134,-8.097317,-3.614303],[6.986621,5.515196,4.016777,1.841428,7.668735,-1.345740,8.079228,6.717660,-5.258704,1.436873,3.059728,5.731437],[1.046706,-7.788487,6.205392,6.956721,8.801996,-1.173385,-0.033262,9.744316,9.414290,5.297749,-0.317729,1.003769],[-3.604293,1.345763,1.537943,-9.194527,-0.680798,-0.479834,0.510087,-7.478012,7.240037,6.681061,-9.058462,4.635607],[-9.693454,-0.165284,-0.878135,-9.800864,3.070844,-7.727313,-0.169494,8.520642,7.248144,-9.519793,7.860720,-6.622720],[1.654391,-6.939847,-3.952816,8.178704,-0.732176,3.179964,2.064236,-5.038846,5.672997,-0.412854,5.388544,6.110630],[7.694369,6.962979,-1.957359,7.397423,0.444044,-6.878167,-1.915252,-2.658505,4.682079,0.190370,4.767904,9.243821],[-7.783955,-7.254624,3.187184,1.502598,-2.338159,-1.040188,-4.701188,-2.275431,2.130869,9.230774,6.706172,1.137883],[6.711416,0.247294,-0.848720,4.615371,-8.117576,-6.219287,0.855753,9.267917,-0.789014,0.714450,6.666921,-9.592285],[-5.224065,-2.192430,8.421268,-9.220817,-7.300842,-7.460595,1.889533,-3.046304,4.360433,1.867589,-8.961457,-9.826485],[-5.609959,8.229804,-2.407027,9.882124,5.823433,-4.169759,6.087321,3.089232,-8.369190,-3.830985,3.695081,-2.483337],[7.888952,-8.037638,-1.174500,-8.174583,-3.118772,-4.224868,0.641437,6.109448,-6.250411,4.658091,-6.234842,7.441691],[-6.777268,-3.142375,-0.953352,1.721083,0.930806,8.356314,-2.387251,-7.468499,7.989216,0.234355,-0.211905,9.344686],[-5.584409,-4.657169,9.989748,-2.768486,8.197643,-2.179974,1.564701,0.899020,1.649221,-3.965856,-6.812452,-7.489359],[2.981180,-6.237549,-0.704157,-7.441068,2.752128,2.793418,0.043046,-4.486476,1.415546,-7.057538,-9.906864,9.658073],[2.609545,-2.484258,-5.507268,3.190038,-7.861082,-3.398052,-8.451105,-2.408486,9.407947,-7.310229,2.564400,-6.830044],[2.562901,6.593591,-8.099688,6.166727,-4.167052,-7.680390,-2.529197,-0.211340,1.596735,9.993237,-4.302380,0.933123],[-1.628082,-6.256896,4.710707,-7.221828,2.804950,-6.861630,-2.427261,5.468220,8.572107,9.109851,-5.587636,2.691251],[-0.065699,6.301146,-3.441517,8.555020,-4.291163,-4.669995,-0.470444,8.626811,-3.461475,2.936276,1.196864,3.594152],[-2.200687,4.827498,-3.473154,8.237300,1.274239,6.961581,9.359218,-0.832675,-5.645121,3.570810,0.980494,4.987894],[4.352938,-5.727387,4.603088,2.812617,2.314159,-3.026285,5.871486,-1.697113,-1.939174,-4.638276,-8.935933,-3.006923]], dtype = "float32")#candidate|2209|(24, 12)|const|float32
const_2210 = relay.const([-8.652243,-5.188119,-3.904235,-4.370043,-3.250505,9.919834,-4.760710,-9.397942,7.179957,5.628932,-6.419614,-5.872668,-3.798444,-3.721479,-4.802745,2.847380,-5.895053,-9.017906,-9.171436,-7.792979,4.946533,-1.486302,-0.062705,3.231677,-3.041050,9.304401,5.641168,1.937497,-7.682569,1.128516,-3.430050,3.852102,5.364551,9.223958,6.929323,-7.048628,8.082469,-7.940057,5.625015,-5.146109,-3.862314,6.680178,6.413007,-1.740333,-0.958427,-7.769923,-7.482956,2.304377,-8.082036,9.954625,-9.618658,-7.889496,0.604978,7.720631,-6.108175,-7.388280,-7.014755,-0.260564,-5.672330,2.500074,9.352712,0.686990,-8.527350,6.242311,8.897047,-6.481091,-4.782338,-7.647754,6.621158,4.868167,2.009179,1.343549,3.882837,1.256877,-5.214386,-2.145889,-0.405187,4.493697,-9.611568,1.807236,1.247797,5.913128,-4.838359,4.787990,-5.705794,-1.802577,-4.562011,7.053361,3.142922,-5.367555,2.131357,4.741360,-3.851747,-5.746290,7.298538,0.298357,0.351492,7.066641,-0.099195,-8.203103,8.561357,-8.843323,-4.405464,1.036611,-5.584447,5.203146,-6.866036,3.541118,8.465372,7.621794,-8.581925,3.224354,4.752982,5.295706,-1.819991,-5.910899,-0.953709,6.897173,-7.935027,3.255554], dtype = "float64")#candidate|2210|(120,)|const|float64
var_2211 = relay.var("var_2211", dtype = "int32", shape = (104,))#candidate|2211|(104,)|var|int32
call_2208 = relay.TupleGetItem(func_899_call(relay.reshape(const_2209.astype('float32'), [3, 12, 8]), relay.reshape(const_2210.astype('float64'), [120,]), relay.reshape(var_2211.astype('int32'), [2, 52]), ), 2)
call_2212 = relay.TupleGetItem(func_903_call(relay.reshape(const_2209.astype('float32'), [3, 12, 8]), relay.reshape(const_2210.astype('float64'), [120,]), relay.reshape(var_2211.astype('int32'), [2, 52]), ), 2)
bop_2214 = relay.not_equal(uop_2197.astype('bool'), relay.reshape(bop_2183.astype('bool'), relay.shape_of(uop_2197))) # shape=(11, 8, 15)
uop_2222 = relay.sigmoid(uop_2197.astype('float64')) # shape=(11, 8, 15)
bop_2227 = relay.multiply(bop_2183.astype('uint16'), relay.reshape(uop_2197.astype('uint16'), relay.shape_of(bop_2183))) # shape=(11, 8, 15)
output = relay.Tuple([bop_2154,bop_2172,bop_2186,call_2208,const_2209,const_2210,var_2211,bop_2214,uop_2222,bop_2227,])
output2 = relay.Tuple([bop_2154,bop_2172,bop_2189,call_2212,const_2209,const_2210,var_2211,bop_2214,uop_2222,bop_2227,])
func_2233 = relay.Function([var_2152,var_2153,var_2171,var_2211,], output)
mod['func_2233'] = func_2233
mod = relay.transform.InferType()(mod)
mutated_mod['func_2233'] = func_2233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2233_call = mutated_mod.get_global_var('func_2233')
var_2235 = relay.var("var_2235", dtype = "float64", shape = (11, 8, 15))#candidate|2235|(11, 8, 15)|var|float64
var_2236 = relay.var("var_2236", dtype = "float64", shape = (11, 8, 15))#candidate|2236|(11, 8, 15)|var|float64
var_2237 = relay.var("var_2237", dtype = "float64", shape = (11, 8, 15))#candidate|2237|(11, 8, 15)|var|float64
var_2238 = relay.var("var_2238", dtype = "int32", shape = (104,))#candidate|2238|(104,)|var|int32
call_2234 = func_2233_call(var_2235,var_2236,var_2237,var_2238,)
output = call_2234
func_2239 = relay.Function([var_2235,var_2236,var_2237,var_2238,], output)
mutated_mod['func_2239'] = func_2239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1435_call = mod.get_global_var('func_1435')
func_1436_call = mutated_mod.get_global_var('func_1436')
call_2278 = relay.TupleGetItem(func_1435_call(), 4)
call_2279 = relay.TupleGetItem(func_1436_call(), 4)
output = relay.Tuple([call_2278,])
output2 = relay.Tuple([call_2279,])
func_2290 = relay.Function([], output)
mod['func_2290'] = func_2290
mod = relay.transform.InferType()(mod)
output = func_2290()
func_2291 = relay.Function([], output)
mutated_mod['func_2291'] = func_2291
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2295 = relay.var("var_2295", dtype = "float64", shape = (4, 5))#candidate|2295|(4, 5)|var|float64
uop_2296 = relay.tan(var_2295.astype('float64')) # shape=(4, 5)
output = relay.Tuple([uop_2296,])
output2 = relay.Tuple([uop_2296,])
F = relay.Function([var_2295,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_2295,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_2295= np.array([[2.328485,-7.858317,-0.756063,-3.881133,4.981795],[9.705691,-9.688361,-4.272798,-1.826327,-5.436824],[-9.809564,-2.555175,-7.762173,-0.084895,-1.133809],[3.791435,6.284509,9.266321,-3.462208,-4.055924]], dtype='float64')
module1.set_input('var_2295', input_2295)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_2295, )
res3 = intrp3.evaluate()(input_2295, )
res4 = intrp4.evaluate()(input_2295, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_2295', input_2295)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_2295, )
res7 = intrp7.evaluate()(input_2295, )
res8 = intrp8.evaluate()(input_2295, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_2295', input_2295)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_2295, )
res11 = intrp11.evaluate()(input_2295, )
res12 = intrp12.evaluate()(input_2295, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_2295', input_2295)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_2295, )
res15 = intrp15.evaluate()(input_2295, )
res16 = intrp16.evaluate()(input_2295, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_2295', input_2295)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_2295, )
res19 = intrp19.evaluate()(input_2295, )
res20 = intrp20.evaluate()(input_2295, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_2295', input_2295)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_2295, )
res23 = intrp23.evaluate()(input_2295, )
res24 = intrp24.evaluate()(input_2295, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''47: TVMFuncCall
46: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
45: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
44: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
43: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
42: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
41: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
40: tvm::transform::Pass::operator()(tvm::IRModule) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
36: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
34: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
33: tvm::transform::Pass::operator()(tvm::IRModule) const
32: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
29: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
28: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
27: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
26: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
25: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
24: _ZN3tvm5relay9transform22Devic
23: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
22: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
21: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
20: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''