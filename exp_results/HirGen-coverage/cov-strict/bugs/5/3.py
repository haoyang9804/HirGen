import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_61 = relay.const([[2.203661,3.686164,8.765113,-1.477259,9.577636,-6.154569,0.835646,5.573320,8.474118,9.315239,-0.206333,2.630405,9.007523,-3.492693],[2.891651,5.313323,6.978329,3.190221,7.566912,9.560898,5.297386,-0.418864,-9.826640,-2.423449,5.352942,3.229807,-7.665488,4.164359],[6.117855,2.403240,3.437197,8.709147,0.279659,5.108729,-0.908694,-5.744446,-0.728179,-4.453433,-5.537029,7.188289,-9.039825,6.106481],[2.332391,-5.580042,0.247409,8.816024,1.743090,0.572321,-9.875861,4.860315,3.228722,-6.224987,4.919557,0.406102,5.464180,0.012165],[0.386156,-5.303205,4.676745,6.333366,-6.660651,7.260322,2.182246,4.944869,4.056145,-7.753613,-4.765980,9.159011,5.738789,8.532445],[9.806276,1.612912,4.686100,2.937939,-1.797518,2.782706,-4.437528,-6.735991,-3.947651,8.993736,0.303885,-0.657124,-6.832692,1.590201],[-6.601206,-8.066434,7.346171,5.326407,5.967663,6.611222,9.893629,-9.036629,1.316010,-8.411765,-4.438679,4.037745,0.433113,4.477399],[7.703011,-8.753885,4.812437,6.192862,-1.252879,-9.514694,-8.977743,7.032403,-7.861262,7.367478,6.978498,8.607173,9.113455,1.510468]], dtype = "float64")#candidate|61|(8, 14)|const|float64
uop_62 = relay.sin(const_61.astype('float64')) # shape=(8, 14)
bop_66 = relay.logical_and(uop_62.astype('bool'), relay.reshape(const_61.astype('bool'), relay.shape_of(uop_62))) # shape=(8, 14)
output = bop_66
output2 = bop_66
func_69 = relay.Function([], output)
mod['func_69'] = func_69
mod = relay.transform.InferType()(mod)
mutated_mod['func_69'] = func_69
mutated_mod = relay.transform.InferType()(mutated_mod)
func_69_call = mutated_mod.get_global_var('func_69')
call_70 = func_69_call()
output = call_70
func_71 = relay.Function([], output)
mutated_mod['func_71'] = func_71
mutated_mod = relay.transform.InferType()(mutated_mod)
func_69_call = mod.get_global_var('func_69')
func_71_call = mutated_mod.get_global_var('func_71')
call_74 = func_69_call()
call_75 = func_69_call()
output = relay.Tuple([call_74,])
output2 = relay.Tuple([call_75,])
func_83 = relay.Function([], output)
mod['func_83'] = func_83
mod = relay.transform.InferType()(mod)
mutated_mod['func_83'] = func_83
mutated_mod = relay.transform.InferType()(mutated_mod)
func_83_call = mutated_mod.get_global_var('func_83')
call_84 = func_83_call()
output = call_84
func_85 = relay.Function([], output)
mutated_mod['func_85'] = func_85
mutated_mod = relay.transform.InferType()(mutated_mod)
var_117 = relay.var("var_117", dtype = "uint8", shape = (5, 12))#candidate|117|(5, 12)|var|uint8
var_118 = relay.var("var_118", dtype = "uint8", shape = (5, 12))#candidate|118|(5, 12)|var|uint8
bop_119 = relay.left_shift(var_117.astype('uint8'), relay.reshape(var_118.astype('uint8'), relay.shape_of(var_117))) # shape=(5, 12)
func_69_call = mod.get_global_var('func_69')
func_71_call = mutated_mod.get_global_var('func_71')
call_125 = func_69_call()
call_126 = func_69_call()
uop_133 = relay.log2(bop_119.astype('float64')) # shape=(5, 12)
uop_135 = relay.sqrt(uop_133.astype('float64')) # shape=(5, 12)
bop_150 = relay.bitwise_xor(uop_133.astype('uint64'), relay.reshape(var_118.astype('uint64'), relay.shape_of(uop_133))) # shape=(5, 12)
func_69_call = mod.get_global_var('func_69')
func_71_call = mutated_mod.get_global_var('func_71')
call_155 = func_69_call()
call_156 = func_69_call()
bop_157 = relay.less_equal(bop_150.astype('bool'), relay.reshape(uop_135.astype('bool'), relay.shape_of(bop_150))) # shape=(5, 12)
bop_161 = relay.greater_equal(uop_133.astype('bool'), relay.reshape(var_118.astype('bool'), relay.shape_of(uop_133))) # shape=(5, 12)
bop_164 = relay.logical_xor(uop_133.astype('uint8'), relay.reshape(uop_135.astype('uint8'), relay.shape_of(uop_133))) # shape=(5, 12)
output = relay.Tuple([call_125,call_155,bop_157,bop_161,bop_164,])
output2 = relay.Tuple([call_126,call_156,bop_157,bop_161,bop_164,])
func_167 = relay.Function([var_117,var_118,], output)
mod['func_167'] = func_167
mod = relay.transform.InferType()(mod)
var_168 = relay.var("var_168", dtype = "uint8", shape = (5, 12))#candidate|168|(5, 12)|var|uint8
var_169 = relay.var("var_169", dtype = "uint8", shape = (5, 12))#candidate|169|(5, 12)|var|uint8
output = func_167(var_168,var_169,)
func_170 = relay.Function([var_168,var_169,], output)
mutated_mod['func_170'] = func_170
mutated_mod = relay.transform.InferType()(mutated_mod)
const_172 = relay.const([6.691454,-2.373408,-2.784759,-1.797323,-1.650775,-1.038660,3.600171,-8.793644,0.629333,-1.091524,-1.397584,3.257389,-3.680557,-7.797959], dtype = "float32")#candidate|172|(14,)|const|float32
var_173 = relay.var("var_173", dtype = "float32", shape = (14,))#candidate|173|(14,)|var|float32
bop_174 = relay.add(const_172.astype('float32'), relay.reshape(var_173.astype('float32'), relay.shape_of(const_172))) # shape=(14,)
uop_177 = relay.asinh(bop_174.astype('float64')) # shape=(14,)
bop_179 = relay.mod(uop_177.astype('float32'), relay.reshape(const_172.astype('float32'), relay.shape_of(uop_177))) # shape=(14,)
bop_182 = relay.power(bop_179.astype('float32'), relay.reshape(const_172.astype('float32'), relay.shape_of(bop_179))) # shape=(14,)
uop_193 = relay.cos(bop_174.astype('float64')) # shape=(14,)
bop_195 = relay.greater(bop_182.astype('bool'), relay.reshape(uop_193.astype('bool'), relay.shape_of(bop_182))) # shape=(14,)
bop_198 = relay.less(uop_177.astype('bool'), relay.reshape(bop_174.astype('bool'), relay.shape_of(uop_177))) # shape=(14,)
output = relay.Tuple([bop_195,bop_198,])
output2 = relay.Tuple([bop_195,bop_198,])
func_201 = relay.Function([var_173,], output)
mod['func_201'] = func_201
mod = relay.transform.InferType()(mod)
mutated_mod['func_201'] = func_201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_202 = relay.var("var_202", dtype = "float32", shape = (14,))#candidate|202|(14,)|var|float32
func_201_call = mutated_mod.get_global_var('func_201')
call_203 = func_201_call(var_202)
output = call_203
func_204 = relay.Function([var_202], output)
mutated_mod['func_204'] = func_204
mutated_mod = relay.transform.InferType()(mutated_mod)
const_209 = relay.const(-9, dtype = "int64")#candidate|209|()|const|int64
var_210 = relay.var("var_210", dtype = "int64", shape = (11, 10, 3))#candidate|210|(11, 10, 3)|var|int64
bop_211 = relay.bitwise_xor(const_209.astype('int64'), var_210.astype('int64')) # shape=(11, 10, 3)
func_167_call = mod.get_global_var('func_167')
func_170_call = mutated_mod.get_global_var('func_170')
var_215 = relay.var("var_215", dtype = "uint8", shape = (60,))#candidate|215|(60,)|var|uint8
call_214 = relay.TupleGetItem(func_167_call(relay.reshape(var_215.astype('uint8'), [5, 12]), relay.reshape(var_215.astype('uint8'), [5, 12]), ), 4)
call_216 = relay.TupleGetItem(func_170_call(relay.reshape(var_215.astype('uint8'), [5, 12]), relay.reshape(var_215.astype('uint8'), [5, 12]), ), 4)
uop_218 = relay.sin(var_210.astype('float32')) # shape=(11, 10, 3)
uop_220 = relay.acosh(var_210.astype('float32')) # shape=(11, 10, 3)
bop_222 = relay.not_equal(uop_218.astype('bool'), relay.reshape(bop_211.astype('bool'), relay.shape_of(uop_218))) # shape=(11, 10, 3)
bop_226 = relay.floor_mod(var_215.astype('float32'), relay.reshape(call_214.astype('float32'), relay.shape_of(var_215))) # shape=(60,)
bop_229 = relay.floor_mod(var_215.astype('float32'), relay.reshape(call_216.astype('float32'), relay.shape_of(var_215))) # shape=(60,)
var_230 = relay.var("var_230", dtype = "float32", shape = (11, 10, 3))#candidate|230|(11, 10, 3)|var|float32
bop_231 = relay.logical_or(uop_218.astype('bool'), relay.reshape(var_230.astype('bool'), relay.shape_of(uop_218))) # shape=(11, 10, 3)
output = relay.Tuple([uop_220,bop_222,bop_226,bop_231,])
output2 = relay.Tuple([uop_220,bop_222,bop_229,bop_231,])
func_234 = relay.Function([var_210,var_215,var_230,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
mutated_mod['func_234'] = func_234
mutated_mod = relay.transform.InferType()(mutated_mod)
func_234_call = mutated_mod.get_global_var('func_234')
var_236 = relay.var("var_236", dtype = "int64", shape = (11, 10, 3))#candidate|236|(11, 10, 3)|var|int64
var_237 = relay.var("var_237", dtype = "uint8", shape = (60,))#candidate|237|(60,)|var|uint8
var_238 = relay.var("var_238", dtype = "float32", shape = (11, 10, 3))#candidate|238|(11, 10, 3)|var|float32
call_235 = func_234_call(var_236,var_237,var_238,)
output = call_235
func_239 = relay.Function([var_236,var_237,var_238,], output)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_83_call = mod.get_global_var('func_83')
func_85_call = mutated_mod.get_global_var('func_85')
call_266 = relay.TupleGetItem(func_83_call(), 0)
call_267 = relay.TupleGetItem(func_85_call(), 0)
output = relay.Tuple([call_266,])
output2 = relay.Tuple([call_267,])
func_268 = relay.Function([], output)
mod['func_268'] = func_268
mod = relay.transform.InferType()(mod)
output = func_268()
func_269 = relay.Function([], output)
mutated_mod['func_269'] = func_269
mutated_mod = relay.transform.InferType()(mutated_mod)
func_268_call = mod.get_global_var('func_268')
func_269_call = mutated_mod.get_global_var('func_269')
call_270 = relay.TupleGetItem(func_268_call(), 0)
call_271 = relay.TupleGetItem(func_269_call(), 0)
uop_293 = relay.sinh(call_270.astype('float64')) # shape=(8, 14)
uop_295 = relay.sinh(call_271.astype('float64')) # shape=(8, 14)
bop_296 = relay.logical_or(uop_293.astype('bool'), relay.reshape(call_270.astype('bool'), relay.shape_of(uop_293))) # shape=(8, 14)
bop_299 = relay.logical_or(uop_295.astype('bool'), relay.reshape(call_271.astype('bool'), relay.shape_of(uop_295))) # shape=(8, 14)
output = relay.Tuple([bop_296,])
output2 = relay.Tuple([bop_299,])
func_300 = relay.Function([], output)
mod['func_300'] = func_300
mod = relay.transform.InferType()(mod)
mutated_mod['func_300'] = func_300
mutated_mod = relay.transform.InferType()(mutated_mod)
func_300_call = mutated_mod.get_global_var('func_300')
call_301 = func_300_call()
output = call_301
func_302 = relay.Function([], output)
mutated_mod['func_302'] = func_302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_268_call = mod.get_global_var('func_268')
func_269_call = mutated_mod.get_global_var('func_269')
call_318 = relay.TupleGetItem(func_268_call(), 0)
call_319 = relay.TupleGetItem(func_269_call(), 0)
func_201_call = mod.get_global_var('func_201')
func_204_call = mutated_mod.get_global_var('func_204')
var_321 = relay.var("var_321", dtype = "float32", shape = (14,))#candidate|321|(14,)|var|float32
call_320 = relay.TupleGetItem(func_201_call(relay.reshape(var_321.astype('float32'), [14,])), 1)
call_322 = relay.TupleGetItem(func_204_call(relay.reshape(var_321.astype('float32'), [14,])), 1)
output = relay.Tuple([call_318,call_320,var_321,])
output2 = relay.Tuple([call_319,call_322,var_321,])
func_324 = relay.Function([var_321,], output)
mod['func_324'] = func_324
mod = relay.transform.InferType()(mod)
mutated_mod['func_324'] = func_324
mutated_mod = relay.transform.InferType()(mutated_mod)
var_325 = relay.var("var_325", dtype = "float32", shape = (14,))#candidate|325|(14,)|var|float32
func_324_call = mutated_mod.get_global_var('func_324')
call_326 = func_324_call(var_325)
output = call_326
func_327 = relay.Function([var_325], output)
mutated_mod['func_327'] = func_327
mutated_mod = relay.transform.InferType()(mutated_mod)
func_300_call = mod.get_global_var('func_300')
func_302_call = mutated_mod.get_global_var('func_302')
call_353 = relay.TupleGetItem(func_300_call(), 0)
call_354 = relay.TupleGetItem(func_302_call(), 0)
uop_355 = relay.erf(call_353.astype('float64')) # shape=(8, 14)
uop_357 = relay.erf(call_354.astype('float64')) # shape=(8, 14)
output = uop_355
output2 = uop_357
func_360 = relay.Function([], output)
mod['func_360'] = func_360
mod = relay.transform.InferType()(mod)
output = func_360()
func_361 = relay.Function([], output)
mutated_mod['func_361'] = func_361
mutated_mod = relay.transform.InferType()(mutated_mod)
func_300_call = mod.get_global_var('func_300')
func_302_call = mutated_mod.get_global_var('func_302')
call_365 = relay.TupleGetItem(func_300_call(), 0)
call_366 = relay.TupleGetItem(func_302_call(), 0)
func_300_call = mod.get_global_var('func_300')
func_302_call = mutated_mod.get_global_var('func_302')
call_373 = relay.TupleGetItem(func_300_call(), 0)
call_374 = relay.TupleGetItem(func_302_call(), 0)
var_379 = relay.var("var_379", dtype = "bool", shape = (8, 14))#candidate|379|(8, 14)|var|bool
bop_380 = relay.multiply(call_365.astype('uint64'), relay.reshape(var_379.astype('uint64'), relay.shape_of(call_365))) # shape=(8, 14)
bop_383 = relay.multiply(call_366.astype('uint64'), relay.reshape(var_379.astype('uint64'), relay.shape_of(call_366))) # shape=(8, 14)
uop_384 = relay.asinh(bop_380.astype('float64')) # shape=(8, 14)
uop_386 = relay.asinh(bop_383.astype('float64')) # shape=(8, 14)
bop_388 = relay.maximum(uop_384.astype('int32'), relay.reshape(call_365.astype('int32'), relay.shape_of(uop_384))) # shape=(8, 14)
bop_391 = relay.maximum(uop_386.astype('int32'), relay.reshape(call_366.astype('int32'), relay.shape_of(uop_386))) # shape=(8, 14)
bop_396 = relay.bitwise_and(uop_384.astype('uint64'), relay.reshape(var_379.astype('uint64'), relay.shape_of(uop_384))) # shape=(8, 14)
bop_399 = relay.bitwise_and(uop_386.astype('uint64'), relay.reshape(var_379.astype('uint64'), relay.shape_of(uop_386))) # shape=(8, 14)
func_167_call = mod.get_global_var('func_167')
func_170_call = mutated_mod.get_global_var('func_170')
const_401 = relay.const([4,-7,9,-1,-2,10,-5,-10,2,-8,-6,10,-10,-2,3,7,-7,4,-10,8,1,1,-1,-7,-8,-7,-3,4,-1,-2,6,-2,6,9,-8,-10,-7,4,-4,10,-8,-6,-3,4,-1,-8,8,9,7,-9,-7,3,2,1,-10,7,7,7,-8,-3], dtype = "uint8")#candidate|401|(60,)|const|uint8
call_400 = relay.TupleGetItem(func_167_call(relay.reshape(const_401.astype('uint8'), [5, 12]), relay.reshape(const_401.astype('uint8'), [5, 12]), ), 0)
call_402 = relay.TupleGetItem(func_170_call(relay.reshape(const_401.astype('uint8'), [5, 12]), relay.reshape(const_401.astype('uint8'), [5, 12]), ), 0)
uop_405 = relay.acos(bop_388.astype('float32')) # shape=(8, 14)
uop_407 = relay.acos(bop_391.astype('float32')) # shape=(8, 14)
func_360_call = mod.get_global_var('func_360')
func_361_call = mutated_mod.get_global_var('func_361')
call_408 = func_360_call()
call_409 = func_360_call()
bop_411 = relay.subtract(bop_388.astype('uint32'), relay.reshape(call_408.astype('uint32'), relay.shape_of(bop_388))) # shape=(8, 14)
bop_414 = relay.subtract(bop_391.astype('uint32'), relay.reshape(call_409.astype('uint32'), relay.shape_of(bop_391))) # shape=(8, 14)
bop_415 = relay.subtract(uop_405.astype('int32'), relay.reshape(uop_384.astype('int32'), relay.shape_of(uop_405))) # shape=(8, 14)
bop_418 = relay.subtract(uop_407.astype('int32'), relay.reshape(uop_386.astype('int32'), relay.shape_of(uop_407))) # shape=(8, 14)
func_69_call = mod.get_global_var('func_69')
func_71_call = mutated_mod.get_global_var('func_71')
call_427 = func_69_call()
call_428 = func_69_call()
bop_431 = relay.multiply(call_408.astype('int32'), relay.reshape(bop_380.astype('int32'), relay.shape_of(call_408))) # shape=(8, 14)
bop_434 = relay.multiply(call_409.astype('int32'), relay.reshape(bop_383.astype('int32'), relay.shape_of(call_409))) # shape=(8, 14)
uop_436 = relay.log(bop_411.astype('float64')) # shape=(8, 14)
uop_438 = relay.log(bop_414.astype('float64')) # shape=(8, 14)
uop_441 = relay.exp(bop_415.astype('float64')) # shape=(8, 14)
uop_443 = relay.exp(bop_418.astype('float64')) # shape=(8, 14)
bop_446 = relay.power(uop_441.astype('float64'), relay.reshape(uop_384.astype('float64'), relay.shape_of(uop_441))) # shape=(8, 14)
bop_449 = relay.power(uop_443.astype('float64'), relay.reshape(uop_386.astype('float64'), relay.shape_of(uop_443))) # shape=(8, 14)
output = relay.Tuple([call_373,bop_396,call_400,const_401,call_427,bop_431,uop_436,bop_446,])
output2 = relay.Tuple([call_374,bop_399,call_402,const_401,call_428,bop_434,uop_438,bop_449,])
func_450 = relay.Function([var_379,], output)
mod['func_450'] = func_450
mod = relay.transform.InferType()(mod)
var_451 = relay.var("var_451", dtype = "bool", shape = (8, 14))#candidate|451|(8, 14)|var|bool
output = func_450(var_451)
func_452 = relay.Function([var_451], output)
mutated_mod['func_452'] = func_452
mutated_mod = relay.transform.InferType()(mutated_mod)
func_83_call = mod.get_global_var('func_83')
func_85_call = mutated_mod.get_global_var('func_85')
call_468 = relay.TupleGetItem(func_83_call(), 0)
call_469 = relay.TupleGetItem(func_85_call(), 0)
func_268_call = mod.get_global_var('func_268')
func_269_call = mutated_mod.get_global_var('func_269')
call_474 = relay.TupleGetItem(func_268_call(), 0)
call_475 = relay.TupleGetItem(func_269_call(), 0)
output = relay.Tuple([call_468,call_474,])
output2 = relay.Tuple([call_469,call_475,])
func_478 = relay.Function([], output)
mod['func_478'] = func_478
mod = relay.transform.InferType()(mod)
mutated_mod['func_478'] = func_478
mutated_mod = relay.transform.InferType()(mutated_mod)
func_478_call = mutated_mod.get_global_var('func_478')
call_479 = func_478_call()
output = call_479
func_480 = relay.Function([], output)
mutated_mod['func_480'] = func_480
mutated_mod = relay.transform.InferType()(mutated_mod)
func_83_call = mod.get_global_var('func_83')
func_85_call = mutated_mod.get_global_var('func_85')
call_487 = relay.TupleGetItem(func_83_call(), 0)
call_488 = relay.TupleGetItem(func_85_call(), 0)
func_450_call = mod.get_global_var('func_450')
func_452_call = mutated_mod.get_global_var('func_452')
call_496 = relay.TupleGetItem(func_450_call(relay.reshape(call_487.astype('bool'), [8, 14])), 6)
call_497 = relay.TupleGetItem(func_452_call(relay.reshape(call_487.astype('bool'), [8, 14])), 6)
output = relay.Tuple([call_487,call_496,])
output2 = relay.Tuple([call_488,call_497,])
func_510 = relay.Function([], output)
mod['func_510'] = func_510
mod = relay.transform.InferType()(mod)
output = func_510()
func_511 = relay.Function([], output)
mutated_mod['func_511'] = func_511
mutated_mod = relay.transform.InferType()(mutated_mod)
const_544 = relay.const([4.771934,-4.864360,7.472678,-8.175294,0.475856,0.250536,8.433585,-8.729607,0.279892,-1.456200,-2.916219,0.971288,-4.763775,-9.933869,-7.680279], dtype = "float64")#candidate|544|(15,)|const|float64
var_545 = relay.var("var_545", dtype = "float64", shape = (15,))#candidate|545|(15,)|var|float64
bop_546 = relay.add(const_544.astype('float64'), relay.reshape(var_545.astype('float64'), relay.shape_of(const_544))) # shape=(15,)
uop_555 = relay.erf(var_545.astype('float32')) # shape=(15,)
var_557 = relay.var("var_557", dtype = "float32", shape = (15,))#candidate|557|(15,)|var|float32
bop_558 = relay.right_shift(uop_555.astype('uint8'), relay.reshape(var_557.astype('uint8'), relay.shape_of(uop_555))) # shape=(15,)
output = relay.Tuple([bop_546,bop_558,])
output2 = relay.Tuple([bop_546,bop_558,])
func_564 = relay.Function([var_545,var_557,], output)
mod['func_564'] = func_564
mod = relay.transform.InferType()(mod)
mutated_mod['func_564'] = func_564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_564_call = mutated_mod.get_global_var('func_564')
var_566 = relay.var("var_566", dtype = "float64", shape = (15,))#candidate|566|(15,)|var|float64
var_567 = relay.var("var_567", dtype = "float32", shape = (15,))#candidate|567|(15,)|var|float32
call_565 = func_564_call(var_566,var_567,)
output = call_565
func_568 = relay.Function([var_566,var_567,], output)
mutated_mod['func_568'] = func_568
mutated_mod = relay.transform.InferType()(mutated_mod)
var_642 = relay.var("var_642", dtype = "float64", shape = (2, 3))#candidate|642|(2, 3)|var|float64
uop_643 = relay.cos(var_642.astype('float64')) # shape=(2, 3)
const_649 = relay.const([[-1.669017,7.255350,4.184398],[9.762886,-7.206065,5.802258]], dtype = "float64")#candidate|649|(2, 3)|const|float64
bop_650 = relay.less(uop_643.astype('bool'), relay.reshape(const_649.astype('bool'), relay.shape_of(uop_643))) # shape=(2, 3)
bop_657 = relay.floor_mod(bop_650.astype('float64'), relay.reshape(var_642.astype('float64'), relay.shape_of(bop_650))) # shape=(2, 3)
func_324_call = mod.get_global_var('func_324')
func_327_call = mutated_mod.get_global_var('func_327')
const_663 = relay.const([[-0.287926,-0.187862,-2.133491,-7.053103,-0.809351,5.197771,5.881269,9.973258,9.982537,7.479210,-3.527681,4.848628,-6.516387,8.516464]], dtype = "float32")#candidate|663|(1, 14)|const|float32
call_662 = relay.TupleGetItem(func_324_call(relay.reshape(const_663.astype('float32'), [14,])), 1)
call_664 = relay.TupleGetItem(func_327_call(relay.reshape(const_663.astype('float32'), [14,])), 1)
bop_665 = relay.greater_equal(bop_657.astype('bool'), relay.reshape(const_649.astype('bool'), relay.shape_of(bop_657))) # shape=(2, 3)
output = relay.Tuple([call_662,const_663,bop_665,])
output2 = relay.Tuple([call_664,const_663,bop_665,])
func_672 = relay.Function([var_642,], output)
mod['func_672'] = func_672
mod = relay.transform.InferType()(mod)
mutated_mod['func_672'] = func_672
mutated_mod = relay.transform.InferType()(mutated_mod)
var_673 = relay.var("var_673", dtype = "float64", shape = (2, 3))#candidate|673|(2, 3)|var|float64
func_672_call = mutated_mod.get_global_var('func_672')
call_674 = func_672_call(var_673)
output = call_674
func_675 = relay.Function([var_673], output)
mutated_mod['func_675'] = func_675
mutated_mod = relay.transform.InferType()(mutated_mod)
const_684 = relay.const([[-9,-3,4,-2,-1,-5,3,-3,8,-3,5,-9,-10,-5,-9],[9,5,3,-5,6,-1,4,2,-3,5,3,3,-2,-8,7],[1,-3,5,-6,2,-8,-4,7,10,-6,-7,6,5,-4,-4],[10,5,4,1,2,-3,-4,-3,-2,-10,-9,-1,8,2,9],[-3,3,-2,9,6,-5,-4,-5,2,9,10,-1,-2,9,1],[1,-6,-3,1,4,-5,-8,9,-5,3,-5,1,-5,4,-8],[1,10,-6,-8,7,6,-2,-1,10,-4,-2,-7,4,10,6],[-3,-9,-4,6,-2,5,-6,-2,8,5,-4,-10,3,-3,-9]], dtype = "int32")#candidate|684|(8, 15)|const|int32
const_685 = relay.const([[1,9,9,2,4,-6,10,-4,-10,-4,10,9,5,3,-2],[-7,5,10,1,-5,-7,8,3,-8,8,4,-7,6,-7,-9],[10,-5,4,-10,-7,-10,6,-4,9,-3,-7,5,-2,-3,-1],[-1,10,5,-1,-7,-10,5,-6,-6,-2,-3,8,2,-8,10],[-9,10,6,3,2,6,-8,9,-9,-10,6,1,-1,3,-1],[-9,-5,-10,-6,-10,5,-10,8,-9,-6,9,2,3,6,3],[10,-8,2,-10,2,-7,-8,2,-8,-3,9,4,4,7,5],[7,-3,-2,4,-3,2,5,-9,-3,9,-1,8,10,-5,3]], dtype = "int32")#candidate|685|(8, 15)|const|int32
bop_686 = relay.equal(const_684.astype('bool'), relay.reshape(const_685.astype('bool'), relay.shape_of(const_684))) # shape=(8, 15)
output = bop_686
output2 = bop_686
func_689 = relay.Function([], output)
mod['func_689'] = func_689
mod = relay.transform.InferType()(mod)
output = func_689()
func_690 = relay.Function([], output)
mutated_mod['func_690'] = func_690
mutated_mod = relay.transform.InferType()(mutated_mod)
var_708 = relay.var("var_708", dtype = "float32", shape = (8,))#candidate|708|(8,)|var|float32
const_709 = relay.const([8.600465,8.529964,2.645734,-5.538555,-5.917283,-7.400709,-5.449460,7.996562], dtype = "float32")#candidate|709|(8,)|const|float32
bop_710 = relay.power(var_708.astype('float32'), relay.reshape(const_709.astype('float32'), relay.shape_of(var_708))) # shape=(8,)
func_478_call = mod.get_global_var('func_478')
func_480_call = mutated_mod.get_global_var('func_480')
call_713 = relay.TupleGetItem(func_478_call(), 1)
call_714 = relay.TupleGetItem(func_480_call(), 1)
func_689_call = mod.get_global_var('func_689')
func_690_call = mutated_mod.get_global_var('func_690')
call_715 = func_689_call()
call_716 = func_689_call()
uop_718 = relay.log10(var_708.astype('float64')) # shape=(8,)
bop_722 = relay.less(uop_718.astype('bool'), relay.reshape(const_709.astype('bool'), relay.shape_of(uop_718))) # shape=(8,)
uop_727 = relay.log2(uop_718.astype('float32')) # shape=(8,)
output = relay.Tuple([bop_710,call_713,call_715,bop_722,uop_727,])
output2 = relay.Tuple([bop_710,call_714,call_716,bop_722,uop_727,])
func_730 = relay.Function([var_708,], output)
mod['func_730'] = func_730
mod = relay.transform.InferType()(mod)
mutated_mod['func_730'] = func_730
mutated_mod = relay.transform.InferType()(mutated_mod)
var_731 = relay.var("var_731", dtype = "float32", shape = (8,))#candidate|731|(8,)|var|float32
func_730_call = mutated_mod.get_global_var('func_730')
call_732 = func_730_call(var_731)
output = call_732
func_733 = relay.Function([var_731], output)
mutated_mod['func_733'] = func_733
mutated_mod = relay.transform.InferType()(mutated_mod)
func_689_call = mod.get_global_var('func_689')
func_690_call = mutated_mod.get_global_var('func_690')
call_750 = func_689_call()
call_751 = func_689_call()
uop_752 = relay.log10(call_750.astype('float64')) # shape=(8, 15)
uop_754 = relay.log10(call_751.astype('float64')) # shape=(8, 15)
func_360_call = mod.get_global_var('func_360')
func_361_call = mutated_mod.get_global_var('func_361')
call_756 = func_360_call()
call_757 = func_360_call()
bop_758 = relay.logical_or(uop_752.astype('bool'), relay.reshape(call_750.astype('bool'), relay.shape_of(uop_752))) # shape=(8, 15)
bop_761 = relay.logical_or(uop_754.astype('bool'), relay.reshape(call_751.astype('bool'), relay.shape_of(uop_754))) # shape=(8, 15)
output = relay.Tuple([call_756,bop_758,])
output2 = relay.Tuple([call_757,bop_761,])
func_764 = relay.Function([], output)
mod['func_764'] = func_764
mod = relay.transform.InferType()(mod)
mutated_mod['func_764'] = func_764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_764_call = mutated_mod.get_global_var('func_764')
call_765 = func_764_call()
output = call_765
func_766 = relay.Function([], output)
mutated_mod['func_766'] = func_766
mutated_mod = relay.transform.InferType()(mutated_mod)
func_360_call = mod.get_global_var('func_360')
func_361_call = mutated_mod.get_global_var('func_361')
call_790 = func_360_call()
call_791 = func_360_call()
var_792 = relay.var("var_792", dtype = "float64", shape = (8, 14))#candidate|792|(8, 14)|var|float64
bop_793 = relay.add(call_790.astype('int16'), relay.reshape(var_792.astype('int16'), relay.shape_of(call_790))) # shape=(8, 14)
bop_796 = relay.add(call_791.astype('int16'), relay.reshape(var_792.astype('int16'), relay.shape_of(call_791))) # shape=(8, 14)
bop_803 = relay.bitwise_xor(bop_793.astype('int16'), relay.reshape(var_792.astype('int16'), relay.shape_of(bop_793))) # shape=(8, 14)
bop_806 = relay.bitwise_xor(bop_796.astype('int16'), relay.reshape(var_792.astype('int16'), relay.shape_of(bop_796))) # shape=(8, 14)
uop_807 = relay.atan(bop_793.astype('float32')) # shape=(8, 14)
uop_809 = relay.atan(bop_796.astype('float32')) # shape=(8, 14)
bop_810 = relay.left_shift(uop_807.astype('uint16'), relay.reshape(bop_793.astype('uint16'), relay.shape_of(uop_807))) # shape=(8, 14)
bop_813 = relay.left_shift(uop_809.astype('uint16'), relay.reshape(bop_796.astype('uint16'), relay.shape_of(uop_809))) # shape=(8, 14)
func_268_call = mod.get_global_var('func_268')
func_269_call = mutated_mod.get_global_var('func_269')
call_814 = relay.TupleGetItem(func_268_call(), 0)
call_815 = relay.TupleGetItem(func_269_call(), 0)
func_672_call = mod.get_global_var('func_672')
func_675_call = mutated_mod.get_global_var('func_675')
var_825 = relay.var("var_825", dtype = "float64", shape = (6,))#candidate|825|(6,)|var|float64
call_824 = relay.TupleGetItem(func_672_call(relay.reshape(var_825.astype('float64'), [2, 3])), 2)
call_826 = relay.TupleGetItem(func_675_call(relay.reshape(var_825.astype('float64'), [2, 3])), 2)
func_268_call = mod.get_global_var('func_268')
func_269_call = mutated_mod.get_global_var('func_269')
call_830 = relay.TupleGetItem(func_268_call(), 0)
call_831 = relay.TupleGetItem(func_269_call(), 0)
func_450_call = mod.get_global_var('func_450')
func_452_call = mutated_mod.get_global_var('func_452')
call_834 = relay.TupleGetItem(func_450_call(relay.reshape(call_830.astype('bool'), [8, 14])), 2)
call_835 = relay.TupleGetItem(func_452_call(relay.reshape(call_830.astype('bool'), [8, 14])), 2)
output = relay.Tuple([bop_803,bop_810,call_814,call_824,var_825,call_830,call_834,])
output2 = relay.Tuple([bop_806,bop_813,call_815,call_826,var_825,call_831,call_835,])
func_837 = relay.Function([var_792,var_825,], output)
mod['func_837'] = func_837
mod = relay.transform.InferType()(mod)
mutated_mod['func_837'] = func_837
mutated_mod = relay.transform.InferType()(mutated_mod)
func_837_call = mutated_mod.get_global_var('func_837')
var_839 = relay.var("var_839", dtype = "float64", shape = (8, 14))#candidate|839|(8, 14)|var|float64
var_840 = relay.var("var_840", dtype = "float64", shape = (6,))#candidate|840|(6,)|var|float64
call_838 = func_837_call(var_839,var_840,)
output = call_838
func_841 = relay.Function([var_839,var_840,], output)
mutated_mod['func_841'] = func_841
mutated_mod = relay.transform.InferType()(mutated_mod)
func_360_call = mod.get_global_var('func_360')
func_361_call = mutated_mod.get_global_var('func_361')
call_843 = func_360_call()
call_844 = func_360_call()
output = relay.Tuple([call_843,])
output2 = relay.Tuple([call_844,])
func_845 = relay.Function([], output)
mod['func_845'] = func_845
mod = relay.transform.InferType()(mod)
mutated_mod['func_845'] = func_845
mutated_mod = relay.transform.InferType()(mutated_mod)
func_845_call = mutated_mod.get_global_var('func_845')
call_846 = func_845_call()
output = call_846
func_847 = relay.Function([], output)
mutated_mod['func_847'] = func_847
mutated_mod = relay.transform.InferType()(mutated_mod)
const_850 = relay.const([[[-9.004739,-2.177054,0.048064,-2.976791,-6.641035,-0.952444,7.678617,-3.003749,9.162693,-6.558645,-0.510208,4.277549],[-2.077547,4.819336,-2.856906,1.377971,7.589775,-7.195424,-0.590805,2.432156,7.358673,-3.224215,5.798592,9.233213],[-3.578767,-1.099045,-6.730832,7.390867,-1.320288,-7.162563,7.427963,4.731825,5.960885,-2.457581,-8.174525,-5.912758],[0.151531,-0.437485,1.742141,8.093005,-7.235748,7.346772,-9.856357,5.146033,2.100670,7.019456,7.390106,9.612782],[7.334594,-9.216754,-5.925969,6.590860,4.606649,-4.071298,-0.342193,-2.173478,7.647439,3.986471,1.705144,-8.141494],[-7.178735,8.880791,0.891316,-1.172105,-0.183562,-0.784671,-6.000077,0.523556,-7.398202,-1.540996,2.370265,0.051939],[-9.503146,-1.650210,0.117230,-1.753669,9.572286,0.383326,0.927345,5.642672,9.426659,-9.538739,9.139677,2.502388],[2.525256,-0.492792,4.594630,5.043054,1.911540,1.286723,-9.364876,-8.003626,7.004872,-9.956074,-6.633813,1.273494],[-9.767006,7.252951,2.813482,7.027218,-1.516468,4.899151,4.805268,-0.608861,1.169842,0.646534,0.711615,1.460026],[2.473487,2.713128,1.953109,5.216288,-2.134633,0.230398,-2.969152,-1.526834,8.123217,-6.877532,-2.551953,2.122715],[-8.236408,-1.839728,-0.552050,-1.445039,1.893267,4.432360,-5.929715,-4.407868,5.643740,-4.025838,-1.798819,3.630888],[0.283295,-5.470381,-0.252304,9.474521,-9.375541,-1.420453,4.184428,5.247647,6.597376,3.580771,6.665021,-4.216480],[3.073845,-5.424617,-7.042212,5.608253,2.826465,9.893421,4.717558,-8.485930,-5.533034,3.193513,-6.978614,8.547456],[5.760402,5.403592,-5.420053,-1.973956,4.353496,-8.446191,-7.757999,5.774675,4.986378,4.752972,6.305173,9.711430],[-1.203550,8.212180,8.776958,-3.286170,0.862792,9.069136,-1.117847,0.453386,1.296937,2.805901,-4.526982,1.275343]],[[4.946829,-5.949275,9.256845,2.510770,-0.533730,-3.721632,3.515380,9.313081,-1.802739,-0.072990,-4.695312,-8.384732],[1.072870,4.163936,-7.227939,-7.022013,6.509041,-2.127565,-9.291416,-6.123819,-9.107891,-3.914688,-9.400914,-5.694039],[-2.672917,9.067854,6.491675,-6.582156,8.432340,-3.040041,1.355730,1.193250,4.877548,9.668824,8.788740,7.936039],[-2.110205,9.524560,1.801981,2.019557,8.874822,-6.982215,8.747676,7.108508,-5.266128,-5.859464,-8.976641,-7.679532],[-4.272059,0.054396,0.364164,1.130719,-0.747370,-4.866541,9.166957,-1.207857,-6.289124,9.643733,0.722844,-7.478640],[-8.364676,8.300285,3.550426,-6.186334,3.982894,9.488983,-9.192118,-8.831071,-4.503559,-1.282431,8.603270,-3.013116],[0.695705,1.293183,-6.764580,-1.429282,-2.607859,-7.315197,6.410577,6.256384,-9.628007,-2.016019,-8.169573,-2.755076],[5.070491,-2.380247,1.419489,6.100910,-7.683279,1.892223,-9.930542,6.083527,-9.193320,-7.258561,-5.018016,-0.168842],[2.247289,-5.876519,-1.538684,-2.797604,8.776946,-8.805088,6.486222,-8.645453,-6.560651,-9.000739,5.114897,7.533940],[3.548472,-9.298464,-8.797660,5.140591,8.271397,4.302089,-9.117056,6.664652,-0.671337,-3.756243,0.677701,7.538972],[-8.088100,6.144555,0.419789,5.873814,-2.710771,-8.215851,6.188523,-2.480321,5.832706,-7.858852,6.714468,-8.950843],[8.196800,6.333065,5.456455,-6.580873,2.012923,8.109909,-6.168753,5.133684,-1.503556,1.662695,5.902401,-7.339064],[0.765730,-0.027444,0.753835,-8.655414,5.858462,6.381825,-9.783800,9.355259,0.130026,-0.035646,9.060570,1.122509],[-0.422755,8.155555,-6.424384,-7.951256,-8.513118,0.578086,0.458894,-5.432185,9.094278,8.913505,9.838921,0.832207],[-2.850542,7.850377,-0.386216,2.157414,5.396446,-4.532500,7.831321,-9.644235,-9.270504,1.607432,5.646793,-6.369803]],[[7.197061,5.048616,-2.400270,-4.815027,-2.708976,8.988799,-1.442425,8.815506,9.265974,0.936674,0.620070,0.509455],[7.090384,7.424532,-7.303044,-5.742193,-7.883617,5.859365,-8.956443,1.861917,2.402915,2.346975,1.635108,1.276177],[6.987612,6.701732,-4.973838,-3.816385,0.642899,0.487804,0.114882,-4.422974,1.335180,0.575411,1.421461,-1.373056],[6.736267,-4.043292,6.746394,9.836162,-4.120983,1.681843,4.143581,1.708536,3.533791,7.859470,-7.000279,-4.646683],[5.704882,3.159826,-3.117543,2.840216,-9.858063,2.783425,6.255055,-9.645269,3.641153,6.629092,3.407327,-3.651531],[6.928234,9.669815,6.279396,6.707587,5.381714,9.589129,-5.719546,2.454749,-8.123775,-2.068752,-7.571606,8.795715],[-3.566535,-6.264739,8.634141,2.293651,-1.982683,-0.020403,-4.880730,-8.267771,1.954340,-0.730542,-8.514173,-0.806170],[-4.911386,0.260207,5.022034,-4.691692,9.947287,2.511902,4.923040,4.630784,3.246861,3.844226,2.297131,-9.572095],[3.082956,-6.124840,-0.812630,-3.113036,-3.715465,4.617077,6.912505,1.786549,2.375228,5.852212,7.312119,-7.290102],[9.307092,1.014027,-9.627837,8.310295,-8.154440,4.703065,-3.458230,2.519740,5.479719,-2.747079,-1.461725,4.374413],[-3.133346,1.496598,2.172148,-1.718796,1.689897,0.815206,7.446127,-9.612738,4.647070,3.557037,2.072832,-6.110377],[1.520841,5.760391,-5.137393,2.061304,-4.929352,9.990031,4.147890,-4.864295,8.550893,-3.441234,-6.407895,-0.414894],[-1.945830,7.763973,-8.677336,0.378278,-5.961202,9.149096,0.583572,9.347936,8.917967,-3.263425,-4.345267,-6.394843],[-8.274407,4.504572,4.452970,-2.114933,4.835019,9.437783,0.659456,5.398729,-8.489401,5.530630,-2.350799,2.323507],[2.732347,-5.931255,-8.496841,7.598839,5.539924,2.601445,-7.306120,-8.544549,2.326278,0.802438,-2.986242,-7.573327]],[[5.888698,8.940742,-0.525794,-1.673592,-4.240265,3.167851,2.878795,6.197082,8.761408,6.164933,1.556438,0.979420],[8.062352,9.478289,-0.804095,-9.355701,8.354089,2.529618,-1.361440,1.890585,-9.380791,8.815621,5.056387,-4.435173],[1.889915,-1.848022,6.890401,7.257178,-1.059911,8.529218,-3.813361,2.257999,2.251204,5.360470,-1.214296,-5.740706],[-9.716097,-1.122843,-6.928795,-3.254813,-3.858319,-6.116247,7.384182,-7.329781,8.089712,-7.890648,-2.316936,2.010835],[-6.593713,6.139367,-5.027741,6.980942,-4.722937,-9.061299,-1.023676,-0.408657,-0.712673,-3.486337,5.591480,5.410617],[-9.004915,-5.654487,7.913321,-9.603461,9.551491,-8.852121,1.025450,-3.277005,6.519261,9.059872,1.058684,-6.353206],[-8.533465,2.692343,-9.535577,-6.898469,-4.594229,1.149507,5.004828,6.821389,8.179591,-2.316487,9.983192,-4.593749],[6.719575,-5.865205,-0.947733,-3.036271,-7.607784,-9.478562,1.924309,3.542188,4.528657,4.740330,4.967906,8.753878],[3.525617,0.168018,-5.323902,1.901621,0.804745,0.059769,9.230686,8.113767,5.389773,-1.310963,-2.238511,6.623768],[-6.984721,-7.215425,6.452923,-9.014273,1.473369,-4.867934,-2.369795,-8.527115,3.740251,6.146921,4.279178,-9.618429],[-8.686080,1.673603,5.431895,-9.030995,-9.787291,6.674830,6.319792,-0.139089,4.260435,-6.529636,-0.158444,-2.907445],[-0.110485,-8.369164,-3.330684,9.611418,8.536758,8.780680,0.242146,-1.294454,4.939390,2.432851,-4.881861,1.635171],[-2.161359,3.484043,-6.767071,7.540225,0.918385,7.545840,-9.006152,-2.538977,2.210106,-9.905712,4.155068,-3.737034],[-5.644725,5.745124,9.410626,4.043728,7.762969,0.459467,-1.013898,-5.117523,-7.914445,3.463818,-7.130549,5.227228],[4.492483,-9.169896,-1.583523,3.036108,3.107593,4.499375,-8.770330,-6.655769,9.623085,5.298869,-0.253121,5.707295]],[[2.580099,-9.675505,-6.050899,-7.493638,4.948147,8.577618,0.364247,3.865920,0.331349,-8.092835,2.414853,5.048402],[-7.956628,-0.686795,2.202885,4.409706,-1.849543,-6.559721,4.800660,-7.853915,-8.393660,1.508989,6.274366,-0.857953],[8.127394,-0.868333,6.904588,-4.938170,-5.011851,9.443550,-0.705693,7.890476,-8.316281,-9.719337,-3.966988,-7.045226],[-7.832432,-3.332265,-4.379134,-4.929642,2.882792,-3.827593,3.712748,-3.818481,2.184587,1.925483,1.978460,-8.738459],[-5.772308,5.670198,-9.223109,2.378404,7.611792,-4.203829,-9.019165,-3.578592,6.183504,3.058026,1.273301,-9.721681],[0.661675,-2.474597,-5.110813,-9.447116,0.348531,9.342654,0.369887,-2.606413,4.156002,8.414423,-5.673511,6.460554],[-7.098301,-6.501946,5.821539,5.868411,-1.873843,2.533334,-5.735441,2.872700,5.667110,4.463223,-2.858253,-1.518283],[-5.744931,6.530928,4.402018,-5.406719,5.216779,9.147775,-9.616738,7.556966,-5.554409,9.326275,-5.916662,7.061524],[-9.566233,4.776739,-0.561752,-4.149462,7.965768,1.394253,-1.584963,-2.826882,-0.861265,-0.644585,-2.549279,7.269166],[-9.773889,-1.305226,-0.960186,1.202257,-7.768461,0.643497,-5.157818,-8.443135,9.639597,-1.553922,4.020958,-6.661955],[-3.946735,-1.147266,-1.604107,3.789537,0.234835,-2.332794,0.567512,-4.058903,-1.891044,3.687680,1.864052,-1.713536],[0.710160,-2.022788,7.428173,5.426143,-2.017875,1.816177,8.136488,6.224440,-4.230237,-9.186123,7.202509,9.038221],[-5.382924,-8.476714,-6.598078,1.669760,4.195269,4.449193,-6.194829,-5.930576,-2.092312,7.088300,5.324304,-5.544574],[-5.965765,9.865934,7.771191,0.204763,1.575588,4.612488,-8.867184,-4.409395,9.349657,1.024367,-0.093377,-2.338872],[8.558434,-7.888022,-4.762996,-1.446259,-4.875476,0.064438,-2.234445,6.248675,-5.399151,-4.979496,9.548413,6.253599]],[[-4.840464,-1.748691,-4.600796,5.312814,2.856463,-9.627223,0.216480,-7.586224,8.742818,2.091487,3.837525,9.309508],[-2.570040,-4.423704,-2.218099,-4.247065,-7.123522,0.491287,3.313409,-9.176967,2.011780,-5.908549,6.809663,-2.595710],[-8.381667,1.099065,-3.516780,-7.269820,-7.817402,8.222616,-2.522636,8.759405,-2.761722,9.738153,1.022016,-5.968526],[6.833854,6.409469,-3.732134,5.921187,-8.220114,-2.545851,7.842963,5.677371,6.950556,4.584982,-0.922460,5.726127],[2.092184,-0.704007,-3.985957,3.170312,7.659037,8.495548,-6.872784,4.251317,8.627131,-4.329090,-5.563700,-9.053318],[-3.633689,1.549967,-9.172408,9.465198,8.001201,-3.830686,1.153827,8.350209,6.010410,-0.936038,4.822569,-4.191250],[1.063645,-3.105086,-6.211947,7.927518,-8.734049,5.501055,5.390085,-0.504426,-2.807561,9.374768,0.006985,-3.336124],[8.315811,-6.259658,-0.541989,7.170866,7.197114,3.866373,-8.695905,-3.639500,8.628096,5.456552,1.482442,-6.980363],[-8.834786,7.664171,-9.361449,-0.454049,-7.390746,0.722312,6.080584,-0.546021,-7.217786,-0.240124,-4.906695,5.297348],[-0.783180,2.850606,-4.759224,2.258947,7.095287,-3.808283,6.412761,6.298135,-4.295577,-4.589963,3.389778,-3.453427],[6.592843,-9.904609,-3.587184,0.872926,-4.599197,-0.857148,-2.583999,9.406006,-8.160502,-4.591703,6.651404,6.479613],[-7.249647,8.351653,-8.107575,6.177659,4.366014,4.675502,9.690309,-5.685767,5.002428,-9.868051,8.994210,1.774146],[-2.414304,7.247304,9.648524,5.290166,-8.452880,2.338178,-0.583383,-7.280568,-0.350921,8.320597,1.159685,3.237099],[-8.580103,-1.604487,-7.793228,9.855241,1.623657,-9.352025,1.295434,-1.560857,-6.455836,-5.264039,-5.954543,-4.243962],[8.518772,-0.626719,-0.436869,5.609811,-6.844160,-7.354525,-1.665604,2.140436,-1.413749,-8.262881,8.201993,2.156854]],[[5.805446,-4.898984,8.465482,-4.534922,1.351981,2.962370,9.377679,-6.412586,-9.883388,-4.669611,1.556925,6.938069],[3.034530,7.510656,-0.928834,-5.689069,6.812436,-2.883367,-4.625403,9.273095,9.321536,8.458333,0.448409,-1.054868],[-7.676839,-6.394897,-2.201853,3.985621,-9.218872,-6.967163,2.541238,-9.438954,-7.260779,2.452187,5.374256,-0.072451],[7.738177,8.378147,7.527603,4.728348,-6.943252,0.517154,2.024826,-8.779040,-5.225681,-7.266846,-1.804831,-8.595157],[7.336035,2.941646,-9.695903,-2.077763,2.816859,-4.297638,2.390415,-8.653925,-0.875021,8.076051,-0.342587,6.192327],[-9.228901,-2.244483,-1.731167,1.205234,2.281456,-4.502692,-8.208140,3.980155,5.806334,8.340551,2.247285,-1.329758],[8.819814,1.689778,-0.208876,-6.062936,9.393050,4.554634,2.245744,0.179515,9.129096,-0.718995,-7.262800,6.769996],[-0.380481,5.201990,-2.157195,7.145809,1.473152,0.246074,8.599484,-2.260532,-7.982371,-1.620613,6.771817,-9.297560],[4.855590,-6.263156,7.750402,5.984530,-6.165614,7.695384,9.899388,9.196568,-1.171229,-8.643285,-6.812829,-7.411595],[-9.408282,1.140399,-2.125449,-7.560144,-8.868808,-9.000481,-5.782012,3.301816,-1.592049,4.867496,1.076290,-6.058489],[9.644727,2.443902,4.217878,-9.554459,-3.541389,8.532961,-1.138427,5.853119,0.624649,-8.997938,0.509770,-2.686065],[-0.875034,7.891437,-5.929383,9.150040,-6.262528,-4.546216,-9.734720,8.282556,-3.859336,-9.194998,-2.275685,5.692597],[1.813385,0.611200,-9.936982,-1.606759,7.545722,-7.529147,3.600095,2.352474,4.500891,0.043360,0.293000,-5.175407],[-8.046432,-8.397062,-1.320901,-4.602847,3.594371,4.512300,8.885088,-8.930153,1.605259,9.751977,8.405623,2.156207],[-0.667931,-4.886972,6.706736,1.434189,8.340854,8.567123,3.343872,5.453111,3.032842,-6.646315,-8.441508,-9.507140]],[[-9.228983,-4.466898,-4.903065,-9.080809,5.895880,-4.455039,8.912658,-6.913962,4.922919,4.429814,6.336994,4.619209],[7.028069,3.877505,9.349509,6.269829,2.335415,7.502254,1.847134,-7.367455,-4.315042,-8.075231,-8.685310,9.510053],[-7.140116,2.488353,2.160074,-8.105061,-5.564505,6.494570,0.562922,5.802886,-8.799425,4.224706,-2.547180,-9.252895],[-7.369312,7.856094,0.629983,4.660487,6.201147,2.848300,2.011253,7.921364,-7.989052,5.171829,8.686703,-5.593322],[0.498500,-2.621829,-4.628608,4.287563,3.040444,6.942089,7.966509,-9.217043,5.343379,3.608516,8.562650,0.330884],[3.113466,-2.512595,8.953683,5.186165,-9.886548,0.726282,-8.682978,6.631669,2.805993,8.151061,7.233329,2.585172],[5.574376,-1.075483,2.012129,-7.871860,-7.109163,4.615710,-8.053085,6.716393,-1.578592,1.562968,8.798214,-8.910273],[4.235466,3.506697,4.204051,-4.221432,4.952420,-0.697699,-1.406508,-4.765909,1.693433,-9.580801,-7.911141,-8.570994],[-6.559111,8.426067,-9.600587,-0.093443,9.453814,5.401397,-9.091516,-7.584190,-8.969837,-8.808892,1.186926,6.712222],[3.519667,-0.974844,9.297650,-2.710663,-8.061952,8.212434,-1.870621,6.546517,4.016480,-2.785698,-6.020085,-0.691801],[6.623247,1.349065,4.242156,8.825262,-3.451622,-6.194671,-4.206671,-2.943847,-5.539812,-8.428890,8.034907,6.603503],[-8.577133,1.183397,-5.443865,8.722869,-9.685015,-9.340776,3.216224,-7.350260,-8.390513,-3.407558,-1.518465,4.698478],[-6.238390,9.722488,1.027747,4.059414,-1.704145,-7.039976,-1.486168,8.666014,-0.818429,-6.445260,8.756240,-7.286837],[4.099340,5.744785,7.353925,-2.628009,-6.240326,9.149362,-7.284505,2.686156,1.502592,2.355153,6.125206,4.471712],[9.772565,1.957872,-1.077304,-6.815611,-2.562122,4.345010,-3.826839,-9.664346,8.899108,3.762606,-4.820246,3.637491]]], dtype = "float32")#candidate|850|(8, 15, 12)|const|float32
uop_851 = relay.asin(const_850.astype('float32')) # shape=(8, 15, 12)
bop_854 = relay.equal(uop_851.astype('bool'), relay.reshape(const_850.astype('bool'), relay.shape_of(uop_851))) # shape=(8, 15, 12)
bop_859 = relay.add(const_850.astype('int8'), relay.reshape(uop_851.astype('int8'), relay.shape_of(const_850))) # shape=(8, 15, 12)
func_764_call = mod.get_global_var('func_764')
func_766_call = mutated_mod.get_global_var('func_766')
call_863 = relay.TupleGetItem(func_764_call(), 1)
call_864 = relay.TupleGetItem(func_766_call(), 1)
output = relay.Tuple([bop_854,bop_859,call_863,])
output2 = relay.Tuple([bop_854,bop_859,call_864,])
func_865 = relay.Function([], output)
mod['func_865'] = func_865
mod = relay.transform.InferType()(mod)
output = func_865()
func_866 = relay.Function([], output)
mutated_mod['func_866'] = func_866
mutated_mod = relay.transform.InferType()(mutated_mod)
var_871 = relay.var("var_871", dtype = "uint32", shape = (8, 16, 3))#candidate|871|(8, 16, 3)|var|uint32
var_872 = relay.var("var_872", dtype = "uint32", shape = (8, 16, 3))#candidate|872|(8, 16, 3)|var|uint32
bop_873 = relay.equal(var_871.astype('bool'), relay.reshape(var_872.astype('bool'), relay.shape_of(var_871))) # shape=(8, 16, 3)
uop_879 = relay.sinh(bop_873.astype('float64')) # shape=(8, 16, 3)
bop_883 = relay.bitwise_and(uop_879.astype('int32'), relay.reshape(var_872.astype('int32'), relay.shape_of(uop_879))) # shape=(8, 16, 3)
bop_887 = relay.floor_divide(bop_883.astype('float32'), relay.reshape(var_872.astype('float32'), relay.shape_of(bop_883))) # shape=(8, 16, 3)
output = relay.Tuple([bop_887,])
output2 = relay.Tuple([bop_887,])
func_890 = relay.Function([var_871,var_872,], output)
mod['func_890'] = func_890
mod = relay.transform.InferType()(mod)
mutated_mod['func_890'] = func_890
mutated_mod = relay.transform.InferType()(mutated_mod)
func_890_call = mutated_mod.get_global_var('func_890')
var_892 = relay.var("var_892", dtype = "uint32", shape = (8, 16, 3))#candidate|892|(8, 16, 3)|var|uint32
var_893 = relay.var("var_893", dtype = "uint32", shape = (8, 16, 3))#candidate|893|(8, 16, 3)|var|uint32
call_891 = func_890_call(var_892,var_893,)
output = call_891
func_894 = relay.Function([var_892,var_893,], output)
mutated_mod['func_894'] = func_894
mutated_mod = relay.transform.InferType()(mutated_mod)
var_906 = relay.var("var_906", dtype = "uint64", shape = (7, 14))#candidate|906|(7, 14)|var|uint64
const_907 = relay.const([[3,6,7,3,5,-4,-9,1,6,1,-8,9,-6,-1],[-3,-1,-4,-4,9,8,1,2,-6,6,-10,7,3,-8],[-8,3,9,-10,3,3,-3,-5,-4,-6,2,2,8,-10],[7,9,-4,9,-8,-6,2,4,-10,-2,6,7,-8,9],[-10,5,6,-5,8,-6,2,9,1,1,-2,10,-9,-7],[-7,2,-5,7,3,-2,3,-7,-9,-8,2,6,2,-4],[-4,-7,7,-10,-6,-6,6,-10,-5,5,5,-8,3,-1]], dtype = "uint64")#candidate|907|(7, 14)|const|uint64
bop_908 = relay.less(var_906.astype('bool'), relay.reshape(const_907.astype('bool'), relay.shape_of(var_906))) # shape=(7, 14)
var_913 = relay.var("var_913", dtype = "uint64", shape = (7, 14))#candidate|913|(7, 14)|var|uint64
bop_914 = relay.mod(const_907.astype('float64'), relay.reshape(var_913.astype('float64'), relay.shape_of(const_907))) # shape=(7, 14)
uop_920 = relay.cosh(const_907.astype('float64')) # shape=(7, 14)
bop_924 = relay.bitwise_xor(uop_920.astype('uint64'), relay.reshape(var_906.astype('uint64'), relay.shape_of(uop_920))) # shape=(7, 14)
output = relay.Tuple([bop_908,bop_914,bop_924,])
output2 = relay.Tuple([bop_908,bop_914,bop_924,])
func_927 = relay.Function([var_906,var_913,], output)
mod['func_927'] = func_927
mod = relay.transform.InferType()(mod)
mutated_mod['func_927'] = func_927
mutated_mod = relay.transform.InferType()(mutated_mod)
func_927_call = mutated_mod.get_global_var('func_927')
var_929 = relay.var("var_929", dtype = "uint64", shape = (7, 14))#candidate|929|(7, 14)|var|uint64
var_930 = relay.var("var_930", dtype = "uint64", shape = (7, 14))#candidate|930|(7, 14)|var|uint64
call_928 = func_927_call(var_929,var_930,)
output = call_928
func_931 = relay.Function([var_929,var_930,], output)
mutated_mod['func_931'] = func_931
mutated_mod = relay.transform.InferType()(mutated_mod)
func_689_call = mod.get_global_var('func_689')
func_690_call = mutated_mod.get_global_var('func_690')
call_936 = func_689_call()
call_937 = func_689_call()
uop_938 = relay.sqrt(call_936.astype('float32')) # shape=(8, 15)
uop_940 = relay.sqrt(call_937.astype('float32')) # shape=(8, 15)
uop_945 = relay.cosh(uop_938.astype('float64')) # shape=(8, 15)
uop_947 = relay.cosh(uop_940.astype('float64')) # shape=(8, 15)
output = relay.Tuple([uop_945,])
output2 = relay.Tuple([uop_947,])
func_949 = relay.Function([], output)
mod['func_949'] = func_949
mod = relay.transform.InferType()(mod)
mutated_mod['func_949'] = func_949
mutated_mod = relay.transform.InferType()(mutated_mod)
func_949_call = mutated_mod.get_global_var('func_949')
call_950 = func_949_call()
output = call_950
func_951 = relay.Function([], output)
mutated_mod['func_951'] = func_951
mutated_mod = relay.transform.InferType()(mutated_mod)
func_845_call = mod.get_global_var('func_845')
func_847_call = mutated_mod.get_global_var('func_847')
call_957 = relay.TupleGetItem(func_845_call(), 0)
call_958 = relay.TupleGetItem(func_847_call(), 0)
func_672_call = mod.get_global_var('func_672')
func_675_call = mutated_mod.get_global_var('func_675')
const_973 = relay.const([4.769220,-7.202884,8.177495,5.781735,-6.187352,-5.453138], dtype = "float64")#candidate|973|(6,)|const|float64
call_972 = relay.TupleGetItem(func_672_call(relay.reshape(const_973.astype('float64'), [2, 3])), 2)
call_974 = relay.TupleGetItem(func_675_call(relay.reshape(const_973.astype('float64'), [2, 3])), 2)
func_510_call = mod.get_global_var('func_510')
func_511_call = mutated_mod.get_global_var('func_511')
call_976 = relay.TupleGetItem(func_510_call(), 0)
call_977 = relay.TupleGetItem(func_511_call(), 0)
uop_984 = relay.cos(call_957.astype('float64')) # shape=(8, 14)
uop_986 = relay.cos(call_958.astype('float64')) # shape=(8, 14)
uop_995 = relay.tan(uop_984.astype('float32')) # shape=(8, 14)
uop_997 = relay.tan(uop_986.astype('float32')) # shape=(8, 14)
output = relay.Tuple([call_972,const_973,call_976,uop_995,])
output2 = relay.Tuple([call_974,const_973,call_977,uop_997,])
func_999 = relay.Function([], output)
mod['func_999'] = func_999
mod = relay.transform.InferType()(mod)
mutated_mod['func_999'] = func_999
mutated_mod = relay.transform.InferType()(mutated_mod)
func_999_call = mutated_mod.get_global_var('func_999')
call_1000 = func_999_call()
output = call_1000
func_1001 = relay.Function([], output)
mutated_mod['func_1001'] = func_1001
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1013 = relay.var("var_1013", dtype = "float32", shape = (4,))#candidate|1013|(4,)|var|float32
var_1014 = relay.var("var_1014", dtype = "float32", shape = (4,))#candidate|1014|(4,)|var|float32
bop_1015 = relay.minimum(var_1013.astype('float32'), relay.reshape(var_1014.astype('float32'), relay.shape_of(var_1013))) # shape=(4,)
func_672_call = mod.get_global_var('func_672')
func_675_call = mutated_mod.get_global_var('func_675')
const_1021 = relay.const([-3.600080,5.693321,0.513061,-9.044729,7.519666,9.281958], dtype = "float64")#candidate|1021|(6,)|const|float64
call_1020 = relay.TupleGetItem(func_672_call(relay.reshape(const_1021.astype('float64'), [2, 3])), 2)
call_1022 = relay.TupleGetItem(func_675_call(relay.reshape(const_1021.astype('float64'), [2, 3])), 2)
func_865_call = mod.get_global_var('func_865')
func_866_call = mutated_mod.get_global_var('func_866')
call_1024 = relay.TupleGetItem(func_865_call(), 2)
call_1025 = relay.TupleGetItem(func_866_call(), 2)
output = relay.Tuple([bop_1015,call_1020,const_1021,call_1024,])
output2 = relay.Tuple([bop_1015,call_1022,const_1021,call_1025,])
func_1026 = relay.Function([var_1013,var_1014,], output)
mod['func_1026'] = func_1026
mod = relay.transform.InferType()(mod)
mutated_mod['func_1026'] = func_1026
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1026_call = mutated_mod.get_global_var('func_1026')
var_1028 = relay.var("var_1028", dtype = "float32", shape = (4,))#candidate|1028|(4,)|var|float32
var_1029 = relay.var("var_1029", dtype = "float32", shape = (4,))#candidate|1029|(4,)|var|float32
call_1027 = func_1026_call(var_1028,var_1029,)
output = call_1027
func_1030 = relay.Function([var_1028,var_1029,], output)
mutated_mod['func_1030'] = func_1030
mutated_mod = relay.transform.InferType()(mutated_mod)
func_949_call = mod.get_global_var('func_949')
func_951_call = mutated_mod.get_global_var('func_951')
call_1035 = relay.TupleGetItem(func_949_call(), 0)
call_1036 = relay.TupleGetItem(func_951_call(), 0)
uop_1041 = relay.tan(call_1035.astype('float32')) # shape=(8, 15)
uop_1043 = relay.tan(call_1036.astype('float32')) # shape=(8, 15)
var_1052 = relay.var("var_1052", dtype = "float64", shape = (8, 15))#candidate|1052|(8, 15)|var|float64
bop_1053 = relay.greater(call_1035.astype('bool'), relay.reshape(var_1052.astype('bool'), relay.shape_of(call_1035))) # shape=(8, 15)
bop_1056 = relay.greater(call_1036.astype('bool'), relay.reshape(var_1052.astype('bool'), relay.shape_of(call_1036))) # shape=(8, 15)
uop_1059 = relay.asin(uop_1041.astype('float32')) # shape=(8, 15)
uop_1061 = relay.asin(uop_1043.astype('float32')) # shape=(8, 15)
bop_1062 = relay.power(uop_1059.astype('float32'), relay.reshape(uop_1041.astype('float32'), relay.shape_of(uop_1059))) # shape=(8, 15)
bop_1065 = relay.power(uop_1061.astype('float32'), relay.reshape(uop_1043.astype('float32'), relay.shape_of(uop_1061))) # shape=(8, 15)
func_268_call = mod.get_global_var('func_268')
func_269_call = mutated_mod.get_global_var('func_269')
call_1070 = relay.TupleGetItem(func_268_call(), 0)
call_1071 = relay.TupleGetItem(func_269_call(), 0)
bop_1072 = relay.right_shift(uop_1041.astype('uint8'), relay.reshape(bop_1053.astype('uint8'), relay.shape_of(uop_1041))) # shape=(8, 15)
bop_1075 = relay.right_shift(uop_1043.astype('uint8'), relay.reshape(bop_1056.astype('uint8'), relay.shape_of(uop_1043))) # shape=(8, 15)
bop_1078 = relay.floor_divide(bop_1072.astype('float64'), relay.reshape(uop_1059.astype('float64'), relay.shape_of(bop_1072))) # shape=(8, 15)
bop_1081 = relay.floor_divide(bop_1075.astype('float64'), relay.reshape(uop_1061.astype('float64'), relay.shape_of(bop_1075))) # shape=(8, 15)
bop_1082 = relay.greater_equal(uop_1059.astype('bool'), relay.reshape(bop_1072.astype('bool'), relay.shape_of(uop_1059))) # shape=(8, 15)
bop_1085 = relay.greater_equal(uop_1061.astype('bool'), relay.reshape(bop_1075.astype('bool'), relay.shape_of(uop_1061))) # shape=(8, 15)
uop_1087 = relay.sigmoid(uop_1059.astype('float32')) # shape=(8, 15)
uop_1089 = relay.sigmoid(uop_1061.astype('float32')) # shape=(8, 15)
func_83_call = mod.get_global_var('func_83')
func_85_call = mutated_mod.get_global_var('func_85')
call_1090 = relay.TupleGetItem(func_83_call(), 0)
call_1091 = relay.TupleGetItem(func_85_call(), 0)
var_1092 = relay.var("var_1092", dtype = "float32", shape = (8, 15))#candidate|1092|(8, 15)|var|float32
bop_1093 = relay.mod(uop_1087.astype('float64'), relay.reshape(var_1092.astype('float64'), relay.shape_of(uop_1087))) # shape=(8, 15)
bop_1096 = relay.mod(uop_1089.astype('float64'), relay.reshape(var_1092.astype('float64'), relay.shape_of(uop_1089))) # shape=(8, 15)
uop_1097 = relay.log(bop_1082.astype('float32')) # shape=(8, 15)
uop_1099 = relay.log(bop_1085.astype('float32')) # shape=(8, 15)
bop_1102 = relay.right_shift(uop_1097.astype('int16'), relay.reshape(bop_1062.astype('int16'), relay.shape_of(uop_1097))) # shape=(8, 15)
bop_1105 = relay.right_shift(uop_1099.astype('int16'), relay.reshape(bop_1065.astype('int16'), relay.shape_of(uop_1099))) # shape=(8, 15)
func_234_call = mod.get_global_var('func_234')
func_239_call = mutated_mod.get_global_var('func_239')
var_1109 = relay.var("var_1109", dtype = "int64", shape = (330,))#candidate|1109|(330,)|var|int64
const_1110 = relay.const([[5,1,-1,-7,5,5,-2,-3,-2,-8,6,4,-7,4,2,3,9,5,2,-4,8,10,-6,4,-8,2,6,-7,-6,-8,-2,-8,-4,1,-4,2,4,3,7,-7,-2,10,2,-10,8,-9,-9,-1,9,-9,-9,-7,3,3,9,-4,9,-8,1,1]], dtype = "uint8")#candidate|1110|(1, 60)|const|uint8
call_1108 = relay.TupleGetItem(func_234_call(relay.reshape(var_1109.astype('int64'), [11, 10, 3]), relay.reshape(const_1110.astype('uint8'), [60,]), relay.reshape(var_1109.astype('float32'), [11, 10, 3]), ), 2)
call_1111 = relay.TupleGetItem(func_239_call(relay.reshape(var_1109.astype('int64'), [11, 10, 3]), relay.reshape(const_1110.astype('uint8'), [60,]), relay.reshape(var_1109.astype('float32'), [11, 10, 3]), ), 2)
bop_1113 = relay.bitwise_xor(uop_1097.astype('uint16'), relay.reshape(var_1092.astype('uint16'), relay.shape_of(uop_1097))) # shape=(8, 15)
bop_1116 = relay.bitwise_xor(uop_1099.astype('uint16'), relay.reshape(var_1092.astype('uint16'), relay.shape_of(uop_1099))) # shape=(8, 15)
const_1118 = relay.const([[-0.554889,-7.628570,-8.667129,4.561408,-3.785219,7.520062,9.274997,0.683810,3.720207,-4.592084,-3.789334,7.342968,2.435446,2.409947,-4.200738],[4.181686,7.642217,1.451110,6.795781,2.532180,-4.638592,3.079453,3.680543,-1.483930,-3.087310,5.252209,-1.749607,-0.837759,-2.088762,8.415706],[-5.183211,-9.203658,-3.922605,-7.727560,-9.374104,-7.401412,-0.490094,-4.249973,-7.840447,-1.524037,8.042491,-9.830614,-8.313925,7.627451,-1.134484],[-5.637196,-7.558196,-7.305586,-3.496477,-6.765110,7.558519,-1.846974,-6.971343,1.846501,8.611735,-3.086518,-4.422553,-8.056219,2.967701,5.416195],[-3.827493,4.716704,-6.488719,-6.828830,-3.395041,4.815542,2.831602,2.847431,-2.587862,-6.732038,-6.100042,-5.578138,0.637546,-1.204963,4.488530],[-8.297532,0.178146,-6.899628,-8.303301,-4.568216,7.704009,-2.334334,3.033373,7.249866,-9.448076,1.710955,-7.049135,5.866254,-2.461963,-6.865088],[-7.721451,-0.428290,-9.834033,6.987607,5.626315,5.322994,-4.648333,8.752579,5.640480,8.798100,-9.945072,8.696919,1.898426,7.069251,-2.860912],[5.960393,-5.095390,-8.552053,-9.192269,3.572944,5.560186,-8.733335,-3.797125,-6.783275,-1.773652,-1.944381,-0.713017,9.076751,-1.993634,-2.211793]], dtype = "float32")#candidate|1118|(8, 15)|const|float32
bop_1119 = relay.not_equal(uop_1087.astype('bool'), relay.reshape(const_1118.astype('bool'), relay.shape_of(uop_1087))) # shape=(8, 15)
bop_1122 = relay.not_equal(uop_1089.astype('bool'), relay.reshape(const_1118.astype('bool'), relay.shape_of(uop_1089))) # shape=(8, 15)
bop_1129 = relay.subtract(bop_1072.astype('uint16'), relay.reshape(bop_1113.astype('uint16'), relay.shape_of(bop_1072))) # shape=(8, 15)
bop_1132 = relay.subtract(bop_1075.astype('uint16'), relay.reshape(bop_1116.astype('uint16'), relay.shape_of(bop_1075))) # shape=(8, 15)
uop_1134 = relay.sigmoid(bop_1062.astype('float64')) # shape=(8, 15)
uop_1136 = relay.sigmoid(bop_1065.astype('float64')) # shape=(8, 15)
const_1138 = relay.const([[2.196022,-3.754771,1.161822,9.745680,-7.645314,4.694729,-0.981868,7.666469,3.917283,6.560168,-5.796254,9.987536,1.306492,7.461417,-7.616340],[-4.671615,3.737535,-5.584990,2.511437,1.245184,-1.015881,2.710256,-5.261934,-8.231002,-9.448475,3.080948,-0.625099,1.873869,-9.436942,-7.181156],[-2.400984,-8.904422,-1.238492,-9.890489,-7.504458,5.417429,-9.240644,-4.633995,7.451316,-5.709745,-9.228167,-8.654314,7.211863,-0.204439,-5.983498],[-7.560488,7.603767,7.758355,3.410599,2.154573,6.544094,9.682273,4.463175,-6.365886,-1.154407,-6.910877,-2.276040,0.409744,8.813581,-2.159802],[-1.053583,-3.036328,6.092918,1.330318,7.750921,6.564924,7.752208,-8.718577,-3.169919,5.678344,3.517094,3.229001,0.892123,7.976731,-2.529016],[-5.794768,5.119214,-7.719222,-3.026366,1.707794,-4.797524,6.896320,9.947733,-9.726250,-7.690929,-8.928942,-5.245921,-4.079194,-6.802135,-5.961439],[4.206310,-6.735656,6.458573,3.690072,-4.098625,2.467328,7.590741,1.946528,-4.432245,-8.494861,8.629779,-4.113155,-2.923361,7.377637,8.366144],[4.856026,2.861919,1.067043,-0.031614,-1.076936,0.213948,6.992311,-4.319892,-6.025331,2.875847,-2.308635,2.709814,-5.253678,9.935720,1.737711]], dtype = "float32")#candidate|1138|(8, 15)|const|float32
bop_1139 = relay.divide(bop_1062.astype('float64'), relay.reshape(const_1138.astype('float64'), relay.shape_of(bop_1062))) # shape=(8, 15)
bop_1142 = relay.divide(bop_1065.astype('float64'), relay.reshape(const_1138.astype('float64'), relay.shape_of(bop_1065))) # shape=(8, 15)
uop_1145 = relay.sin(bop_1119.astype('float32')) # shape=(8, 15)
uop_1147 = relay.sin(bop_1122.astype('float32')) # shape=(8, 15)
uop_1149 = relay.acos(bop_1072.astype('float64')) # shape=(8, 15)
uop_1151 = relay.acos(bop_1075.astype('float64')) # shape=(8, 15)
var_1152 = relay.var("var_1152", dtype = "float32", shape = (8, 15))#candidate|1152|(8, 15)|var|float32
bop_1153 = relay.bitwise_xor(uop_1145.astype('int16'), relay.reshape(var_1152.astype('int16'), relay.shape_of(uop_1145))) # shape=(8, 15)
bop_1156 = relay.bitwise_xor(uop_1147.astype('int16'), relay.reshape(var_1152.astype('int16'), relay.shape_of(uop_1147))) # shape=(8, 15)
bop_1164 = relay.maximum(bop_1078.astype('uint64'), relay.reshape(bop_1082.astype('uint64'), relay.shape_of(bop_1078))) # shape=(8, 15)
bop_1167 = relay.maximum(bop_1081.astype('uint64'), relay.reshape(bop_1085.astype('uint64'), relay.shape_of(bop_1081))) # shape=(8, 15)
bop_1168 = relay.right_shift(bop_1093.astype('uint64'), relay.reshape(bop_1062.astype('uint64'), relay.shape_of(bop_1093))) # shape=(8, 15)
bop_1171 = relay.right_shift(bop_1096.astype('uint64'), relay.reshape(bop_1065.astype('uint64'), relay.shape_of(bop_1096))) # shape=(8, 15)
uop_1176 = relay.atanh(uop_1041.astype('float64')) # shape=(8, 15)
uop_1178 = relay.atanh(uop_1043.astype('float64')) # shape=(8, 15)
bop_1183 = relay.floor_mod(bop_1113.astype('float64'), relay.reshape(uop_1145.astype('float64'), relay.shape_of(bop_1113))) # shape=(8, 15)
bop_1186 = relay.floor_mod(bop_1116.astype('float64'), relay.reshape(uop_1147.astype('float64'), relay.shape_of(bop_1116))) # shape=(8, 15)
var_1188 = relay.var("var_1188", dtype = "bool", shape = (8, 15))#candidate|1188|(8, 15)|var|bool
bop_1189 = relay.minimum(bop_1119.astype('uint8'), relay.reshape(var_1188.astype('uint8'), relay.shape_of(bop_1119))) # shape=(8, 15)
bop_1192 = relay.minimum(bop_1122.astype('uint8'), relay.reshape(var_1188.astype('uint8'), relay.shape_of(bop_1122))) # shape=(8, 15)
bop_1204 = relay.add(bop_1183.astype('uint64'), relay.reshape(var_1092.astype('uint64'), relay.shape_of(bop_1183))) # shape=(8, 15)
bop_1207 = relay.add(bop_1186.astype('uint64'), relay.reshape(var_1092.astype('uint64'), relay.shape_of(bop_1186))) # shape=(8, 15)
bop_1210 = relay.left_shift(bop_1153.astype('int64'), relay.reshape(bop_1189.astype('int64'), relay.shape_of(bop_1153))) # shape=(8, 15)
bop_1213 = relay.left_shift(bop_1156.astype('int64'), relay.reshape(bop_1192.astype('int64'), relay.shape_of(bop_1156))) # shape=(8, 15)
func_324_call = mod.get_global_var('func_324')
func_327_call = mutated_mod.get_global_var('func_327')
var_1220 = relay.var("var_1220", dtype = "float32", shape = (14,))#candidate|1220|(14,)|var|float32
call_1219 = relay.TupleGetItem(func_324_call(relay.reshape(var_1220.astype('float32'), [14,])), 1)
call_1221 = relay.TupleGetItem(func_327_call(relay.reshape(var_1220.astype('float32'), [14,])), 1)
bop_1224 = relay.subtract(bop_1183.astype('uint16'), relay.reshape(bop_1189.astype('uint16'), relay.shape_of(bop_1183))) # shape=(8, 15)
bop_1227 = relay.subtract(bop_1186.astype('uint16'), relay.reshape(bop_1192.astype('uint16'), relay.shape_of(bop_1186))) # shape=(8, 15)
func_999_call = mod.get_global_var('func_999')
func_1001_call = mutated_mod.get_global_var('func_1001')
call_1229 = relay.TupleGetItem(func_999_call(), 0)
call_1230 = relay.TupleGetItem(func_1001_call(), 0)
uop_1236 = relay.erf(bop_1153.astype('float32')) # shape=(8, 15)
uop_1238 = relay.erf(bop_1156.astype('float32')) # shape=(8, 15)
bop_1249 = relay.logical_xor(bop_1210.astype('int32'), relay.reshape(bop_1189.astype('int32'), relay.shape_of(bop_1210))) # shape=(8, 15)
bop_1252 = relay.logical_xor(bop_1213.astype('int32'), relay.reshape(bop_1192.astype('int32'), relay.shape_of(bop_1213))) # shape=(8, 15)
bop_1253 = relay.less_equal(uop_1236.astype('bool'), relay.reshape(bop_1249.astype('bool'), relay.shape_of(uop_1236))) # shape=(8, 15)
bop_1256 = relay.less_equal(uop_1238.astype('bool'), relay.reshape(bop_1252.astype('bool'), relay.shape_of(uop_1238))) # shape=(8, 15)
output = relay.Tuple([call_1070,call_1090,bop_1102,call_1108,var_1109,const_1110,bop_1129,uop_1134,bop_1139,uop_1149,bop_1164,bop_1168,uop_1176,bop_1204,call_1219,var_1220,bop_1224,call_1229,bop_1253,])
output2 = relay.Tuple([call_1071,call_1091,bop_1105,call_1111,var_1109,const_1110,bop_1132,uop_1136,bop_1142,uop_1151,bop_1167,bop_1171,uop_1178,bop_1207,call_1221,var_1220,bop_1227,call_1230,bop_1256,])
F = relay.Function([var_1052,var_1092,var_1109,var_1152,var_1188,var_1220,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1052,var_1092,var_1109,var_1152,var_1188,var_1220,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1052= np.array([[4.848767,-1.804221,-1.727678,-4.347962,8.372634,-6.108347,3.561907,-5.842681,-2.923946,-6.676082,-0.820813,-7.565095,2.375172,-4.941940,-5.182300],[5.964535,4.941270,4.943599,4.891402,-7.360365,-5.734680,6.279399,-8.778647,-0.264155,-7.093808,6.516443,-5.062871,7.971812,-1.818948,-9.919196],[3.409313,-9.710120,9.987933,0.070471,-8.735777,1.304522,-7.014192,-2.133268,-1.274703,0.265781,5.478208,1.812955,-6.592522,-2.990935,-3.122829],[-0.518533,-7.181403,4.535492,-4.677702,2.883556,-2.438534,1.523098,9.704225,7.257893,7.701140,6.300276,9.652265,-3.230511,4.394657,-4.899126],[7.931487,0.403063,-7.886786,3.284499,9.756392,2.317179,8.667788,-5.293371,-8.961476,-9.171090,6.688830,0.935035,-6.062370,-7.484283,-3.953804],[0.381905,0.813087,1.464216,3.533367,-1.079752,4.739241,-4.835817,0.356237,-6.432456,-4.125512,0.446763,-0.970795,0.053898,-9.292861,-1.830321],[-0.514861,-0.499001,-5.430152,0.823289,-8.303323,9.583061,6.231969,-8.534890,-3.682505,0.551084,3.082353,-3.037879,5.438587,-9.883483,-0.220611],[-8.838247,-9.385824,-5.722034,-8.498190,0.645865,-0.403275,9.862111,-6.626771,-6.327186,-8.052583,-4.768646,-3.266700,1.414459,-7.000927,3.409408]], dtype='float64')
module1.set_input('var_1052', input_1052)
input_1092= np.array([[-5.326741,4.920897,-1.479461,2.859125,-8.534631,3.316761,7.960314,-5.012150,-7.953996,6.598309,-3.676421,-5.994184,-3.052534,-7.163083,1.201181],[1.055284,1.438377,-3.803622,0.672906,8.406911,-2.640127,-5.295596,3.504909,-4.182344,5.295979,-4.141434,2.810649,-9.764272,-8.672988,-8.454689],[-2.569052,4.064588,-5.368668,9.017188,5.475191,8.068176,8.894207,-7.626842,2.267138,-4.457791,-5.408067,-6.596609,4.139767,8.749020,-1.198853],[9.920540,-6.106088,-8.710783,-7.122186,-8.277621,-2.317385,-0.555237,3.525804,-2.128315,0.872643,3.094702,3.769510,7.158016,-5.941271,-0.991517],[-5.252332,2.237010,-8.096820,5.677402,3.086093,8.889788,-7.560290,4.195028,-0.488435,-1.738352,-5.707065,6.376766,2.774921,-3.253116,0.300352],[-1.592088,-9.372806,-8.041297,-1.058656,7.339018,0.427470,0.878817,-1.343594,1.727486,1.979449,-8.102903,1.576749,5.771068,-4.557155,-9.071336],[2.074198,6.259837,-1.316766,-9.204277,-0.996026,-0.384353,-6.148901,5.097288,-7.438307,1.668924,-3.347392,2.822651,2.498504,-8.573844,-3.310779],[-9.259155,-1.357890,0.430556,1.060774,4.297152,-0.522335,-3.665281,1.106376,1.570249,-2.801121,4.536061,5.749028,2.359100,-1.650508,-0.505163]], dtype='float32')
module1.set_input('var_1092', input_1092)
input_1109= np.array([-4,-3,-5,1,6,9,-5,2,1,9,-1,-6,-3,8,2,8,-4,6,7,-1,7,2,-2,-3,-6,1,-9,6,3,-1,2,3,-2,7,8,-2,-2,7,1,-7,4,6,4,5,-6,4,-6,5,-6,9,2,1,8,-8,-9,7,4,5,5,-7,8,2,8,6,-2,10,-8,10,10,-6,2,10,-7,5,-7,-7,-4,1,-6,6,1,4,8,5,9,-6,-5,10,-3,7,7,-7,5,-3,-4,-1,-8,6,6,-5,-5,7,-9,-3,1,-4,-6,-9,10,1,4,1,-4,7,10,-4,-5,4,-7,-6,-7,-5,3,3,10,1,4,8,-1,-8,9,4,3,5,5,6,-4,-4,-9,-4,10,4,9,4,7,3,-3,9,4,-6,7,-2,5,2,4,-4,3,-8,2,-4,-3,-4,-3,2,8,10,-2,-10,10,-2,10,-9,-7,-7,9,7,-10,8,-5,5,-10,1,-5,10,5,-10,-9,-9,-5,3,-10,8,3,-3,8,-6,-3,10,-9,5,-2,8,3,-8,-4,2,3,-1,-6,7,-4,-2,-9,5,5,-2,5,10,7,-6,-9,2,10,8,-10,2,9,3,8,-6,9,2,7,-2,10,-5,8,-10,-3,-6,5,-10,-10,2,10,3,-7,-3,-6,1,5,-4,-5,3,5,4,-5,-6,-5,7,6,5,4,10,-5,8,4,4,8,-9,9,3,-6,-3,7,8,-9,-9,-3,4,7,-9,-6,4,4,-7,5,-7,8,3,9,3,8,-10,10,-10,-8,1,4,7,7,9,3,4,-5,1,2,-1,-5,-1,8,1,8,1,-7,10,-4,7,-4,-3,10,4,-7,2,9,-6,-3,-5,10,5], dtype='int64')
module1.set_input('var_1109', input_1109)
input_1152= np.array([[-5.518802,-7.356995,0.948989,-9.253310,0.700093,-8.024397,-3.078740,-1.948884,4.045748,-0.159828,0.387163,-0.693029,-4.819664,-0.165117,2.723964],[-4.543078,3.248308,-1.231763,-8.620808,7.437552,-0.863644,8.703829,-6.609039,-1.898463,-6.344036,-5.578316,-2.051159,8.667752,5.749799,-9.250542],[8.884961,-7.438718,5.568275,-5.827761,5.951661,2.553795,3.948477,-9.594255,-7.121390,7.955985,1.733162,-2.320449,6.090289,-5.862349,1.371251],[0.815009,8.410592,5.462426,-5.493878,-9.603603,7.068372,-6.960694,-2.935932,-3.762451,3.530758,7.025132,-6.975407,-7.003533,-5.092420,-8.872811],[0.839808,-1.320687,9.410923,1.054569,3.914722,-9.212030,1.102914,8.030750,5.053664,-8.451436,-6.199499,-9.373338,1.051493,-4.191156,6.436158],[3.808524,-4.353590,-4.918348,1.539358,5.561809,9.424858,6.456558,-0.308175,8.448525,3.813561,2.004389,2.517885,-4.448075,-7.903007,-6.157809],[2.641538,7.100048,-3.433284,2.693921,0.606758,-3.360124,-9.225292,-1.742905,8.217218,8.351950,7.929521,-9.714496,-2.475718,-7.337036,3.739424],[-5.384320,-4.884193,-6.658864,9.028617,9.335444,-4.390128,-1.407134,5.467830,-2.906750,-1.446853,2.364880,-3.321952,-3.011573,-5.895693,0.973342]], dtype='float32')
module1.set_input('var_1152', input_1152)
input_1188= np.array([[True,True,False,False,False,True,True,True,False,True,True,False,False,False,True],[False,False,True,True,False,True,True,True,True,False,False,False,True,False,True],[True,True,True,False,True,True,True,False,False,True,False,False,True,False,False],[True,True,False,False,False,True,True,True,False,False,True,True,False,False,True],[False,False,False,True,False,True,False,True,True,False,False,True,False,True,False],[True,False,True,True,False,True,False,True,True,True,False,False,False,False,True],[True,False,True,True,True,True,False,True,False,True,False,False,True,False,True],[True,True,False,False,True,False,True,True,False,False,False,False,True,False,False]], dtype='bool')
module1.set_input('var_1188', input_1188)
input_1220= np.array([8.776530,-4.509120,-0.952822,-7.085812,6.647860,8.558999,9.333344,4.003723,0.220672,8.141836,5.842434,7.234919,2.518246,-0.070447], dtype='float32')
module1.set_input('var_1220', input_1220)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res3 = intrp3.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res4 = intrp4.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
module5.set_input('var_1052', input_1052)
module5.set_input('var_1092', input_1092)
module5.set_input('var_1109', input_1109)
module5.set_input('var_1152', input_1152)
module5.set_input('var_1188', input_1188)
module5.set_input('var_1220', input_1220)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res7 = intrp7.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res8 = intrp8.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
module9.set_input('var_1052', input_1052)
module9.set_input('var_1092', input_1092)
module9.set_input('var_1109', input_1109)
module9.set_input('var_1152', input_1152)
module9.set_input('var_1188', input_1188)
module9.set_input('var_1220', input_1220)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res11 = intrp11.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res12 = intrp12.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
module13.set_input('var_1052', input_1052)
module13.set_input('var_1092', input_1092)
module13.set_input('var_1109', input_1109)
module13.set_input('var_1152', input_1152)
module13.set_input('var_1188', input_1188)
module13.set_input('var_1220', input_1220)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res15 = intrp15.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res16 = intrp16.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
module17.set_input('var_1052', input_1052)
module17.set_input('var_1092', input_1092)
module17.set_input('var_1109', input_1109)
module17.set_input('var_1152', input_1152)
module17.set_input('var_1188', input_1188)
module17.set_input('var_1220', input_1220)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res19 = intrp19.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res20 = intrp20.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
module21.set_input('var_1052', input_1052)
module21.set_input('var_1092', input_1092)
module21.set_input('var_1109', input_1109)
module21.set_input('var_1152', input_1152)
module21.set_input('var_1188', input_1188)
module21.set_input('var_1220', input_1220)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res23 = intrp23.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res24 = intrp24.evaluate()(input_1052, input_1092, input_1109, input_1152, input_1188, input_1220, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''