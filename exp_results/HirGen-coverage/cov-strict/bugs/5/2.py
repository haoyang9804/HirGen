import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_17 = relay.var("var_17", dtype = "uint32", shape = (9,))#candidate|17|(9,)|var|uint32
var_18 = relay.var("var_18", dtype = "uint32", shape = (9,))#candidate|18|(9,)|var|uint32
bop_19 = relay.bitwise_or(var_17.astype('uint32'), relay.reshape(var_18.astype('uint32'), relay.shape_of(var_17))) # shape=(9,)
output = relay.Tuple([bop_19,])
output2 = relay.Tuple([bop_19,])
func_22 = relay.Function([var_17,var_18,], output)
mod['func_22'] = func_22
mod = relay.transform.InferType()(mod)
var_23 = relay.var("var_23", dtype = "uint32", shape = (9,))#candidate|23|(9,)|var|uint32
var_24 = relay.var("var_24", dtype = "uint32", shape = (9,))#candidate|24|(9,)|var|uint32
output = func_22(var_23,var_24,)
func_25 = relay.Function([var_23,var_24,], output)
mutated_mod['func_25'] = func_25
mutated_mod = relay.transform.InferType()(mutated_mod)
var_27 = relay.var("var_27", dtype = "float32", shape = (12, 7, 6))#candidate|27|(12, 7, 6)|var|float32
uop_28 = relay.asin(var_27.astype('float32')) # shape=(12, 7, 6)
func_22_call = mod.get_global_var('func_22')
func_25_call = mutated_mod.get_global_var('func_25')
const_31 = relay.const([3,4,7,4,4,2,-9,-10,1], dtype = "uint32")#candidate|31|(9,)|const|uint32
call_30 = relay.TupleGetItem(func_22_call(relay.reshape(const_31.astype('uint32'), [9,]), relay.reshape(const_31.astype('uint32'), [9,]), ), 0)
call_32 = relay.TupleGetItem(func_25_call(relay.reshape(const_31.astype('uint32'), [9,]), relay.reshape(const_31.astype('uint32'), [9,]), ), 0)
uop_33 = relay.tan(uop_28.astype('float64')) # shape=(12, 7, 6)
bop_35 = relay.bitwise_xor(uop_33.astype('int64'), relay.reshape(var_27.astype('int64'), relay.shape_of(uop_33))) # shape=(12, 7, 6)
func_22_call = mod.get_global_var('func_22')
func_25_call = mutated_mod.get_global_var('func_25')
call_38 = relay.TupleGetItem(func_22_call(relay.reshape(const_31.astype('uint32'), [9,]), relay.reshape(const_31.astype('uint32'), [9,]), ), 0)
call_39 = relay.TupleGetItem(func_25_call(relay.reshape(const_31.astype('uint32'), [9,]), relay.reshape(const_31.astype('uint32'), [9,]), ), 0)
bop_40 = relay.bitwise_and(call_38.astype('int16'), relay.reshape(const_31.astype('int16'), relay.shape_of(call_38))) # shape=(9,)
bop_43 = relay.bitwise_and(call_39.astype('int16'), relay.reshape(const_31.astype('int16'), relay.shape_of(call_39))) # shape=(9,)
bop_44 = relay.greater(call_38.astype('bool'), relay.reshape(bop_40.astype('bool'), relay.shape_of(call_38))) # shape=(9,)
bop_47 = relay.greater(call_39.astype('bool'), relay.reshape(bop_43.astype('bool'), relay.shape_of(call_39))) # shape=(9,)
uop_48 = relay.acosh(bop_35.astype('float32')) # shape=(12, 7, 6)
uop_50 = relay.exp(uop_28.astype('float64')) # shape=(12, 7, 6)
bop_52 = relay.logical_and(uop_48.astype('bool'), relay.reshape(uop_28.astype('bool'), relay.shape_of(uop_48))) # shape=(12, 7, 6)
uop_58 = relay.sinh(uop_48.astype('float32')) # shape=(12, 7, 6)
bop_60 = relay.greater_equal(uop_58.astype('bool'), relay.reshape(bop_52.astype('bool'), relay.shape_of(uop_58))) # shape=(12, 7, 6)
bop_63 = relay.maximum(uop_48.astype('float32'), relay.reshape(uop_28.astype('float32'), relay.shape_of(uop_48))) # shape=(12, 7, 6)
var_66 = relay.var("var_66", dtype = "float32", shape = (12, 7, 6))#candidate|66|(12, 7, 6)|var|float32
bop_67 = relay.less(uop_58.astype('bool'), relay.reshape(var_66.astype('bool'), relay.shape_of(uop_58))) # shape=(12, 7, 6)
output = relay.Tuple([call_30,bop_44,uop_50,bop_60,bop_63,bop_67,])
output2 = relay.Tuple([call_32,bop_47,uop_50,bop_60,bop_63,bop_67,])
func_70 = relay.Function([var_27,var_66,], output)
mod['func_70'] = func_70
mod = relay.transform.InferType()(mod)
var_71 = relay.var("var_71", dtype = "float32", shape = (12, 7, 6))#candidate|71|(12, 7, 6)|var|float32
var_72 = relay.var("var_72", dtype = "float32", shape = (12, 7, 6))#candidate|72|(12, 7, 6)|var|float32
output = func_70(var_71,var_72,)
func_73 = relay.Function([var_71,var_72,], output)
mutated_mod['func_73'] = func_73
mutated_mod = relay.transform.InferType()(mutated_mod)
const_104 = relay.const([-0.971594,-4.411951,-7.443683,-2.394635,-7.082718,-8.949772,-1.450005], dtype = "float32")#candidate|104|(7,)|const|float32
var_105 = relay.var("var_105", dtype = "float32", shape = (7,))#candidate|105|(7,)|var|float32
bop_106 = relay.not_equal(const_104.astype('bool'), relay.reshape(var_105.astype('bool'), relay.shape_of(const_104))) # shape=(7,)
bop_109 = relay.floor_mod(bop_106.astype('float64'), relay.reshape(var_105.astype('float64'), relay.shape_of(bop_106))) # shape=(7,)
bop_112 = relay.greater_equal(bop_106.astype('bool'), relay.reshape(const_104.astype('bool'), relay.shape_of(bop_106))) # shape=(7,)
const_116 = relay.const([False,False,False,True,True,True,True], dtype = "bool")#candidate|116|(7,)|const|bool
bop_117 = relay.multiply(bop_112.astype('int8'), relay.reshape(const_116.astype('int8'), relay.shape_of(bop_112))) # shape=(7,)
uop_121 = relay.sinh(bop_117.astype('float32')) # shape=(7,)
bop_123 = relay.equal(bop_112.astype('bool'), relay.reshape(uop_121.astype('bool'), relay.shape_of(bop_112))) # shape=(7,)
uop_126 = relay.asin(bop_117.astype('float64')) # shape=(7,)
bop_131 = relay.subtract(bop_112.astype('uint32'), relay.reshape(bop_117.astype('uint32'), relay.shape_of(bop_112))) # shape=(7,)
func_70_call = mod.get_global_var('func_70')
func_73_call = mutated_mod.get_global_var('func_73')
var_137 = relay.var("var_137", dtype = "float32", shape = (504,))#candidate|137|(504,)|var|float32
call_136 = relay.TupleGetItem(func_70_call(relay.reshape(var_137.astype('float32'), [12, 7, 6]), relay.reshape(var_137.astype('float32'), [12, 7, 6]), ), 2)
call_138 = relay.TupleGetItem(func_73_call(relay.reshape(var_137.astype('float32'), [12, 7, 6]), relay.reshape(var_137.astype('float32'), [12, 7, 6]), ), 2)
bop_139 = relay.greater(bop_123.astype('bool'), relay.reshape(bop_131.astype('bool'), relay.shape_of(bop_123))) # shape=(7,)
uop_144 = relay.atan(bop_139.astype('float32')) # shape=(7,)
output = relay.Tuple([bop_109,uop_126,call_136,var_137,uop_144,])
output2 = relay.Tuple([bop_109,uop_126,call_138,var_137,uop_144,])
func_148 = relay.Function([var_105,var_137,], output)
mod['func_148'] = func_148
mod = relay.transform.InferType()(mod)
mutated_mod['func_148'] = func_148
mutated_mod = relay.transform.InferType()(mutated_mod)
func_148_call = mutated_mod.get_global_var('func_148')
var_150 = relay.var("var_150", dtype = "float32", shape = (7,))#candidate|150|(7,)|var|float32
var_151 = relay.var("var_151", dtype = "float32", shape = (504,))#candidate|151|(504,)|var|float32
call_149 = func_148_call(var_150,var_151,)
output = call_149
func_152 = relay.Function([var_150,var_151,], output)
mutated_mod['func_152'] = func_152
mutated_mod = relay.transform.InferType()(mutated_mod)
var_163 = relay.var("var_163", dtype = "float64", shape = ())#candidate|163|()|var|float64
var_164 = relay.var("var_164", dtype = "float64", shape = (16, 16, 6))#candidate|164|(16, 16, 6)|var|float64
bop_165 = relay.divide(var_163.astype('float64'), var_164.astype('float64')) # shape=(16, 16, 6)
bop_168 = relay.logical_xor(bop_165.astype('uint32'), var_163.astype('uint32')) # shape=(16, 16, 6)
bop_171 = relay.equal(bop_168.astype('bool'), relay.reshape(bop_165.astype('bool'), relay.shape_of(bop_168))) # shape=(16, 16, 6)
bop_177 = relay.maximum(bop_171.astype('uint16'), relay.reshape(bop_165.astype('uint16'), relay.shape_of(bop_171))) # shape=(16, 16, 6)
bop_180 = relay.bitwise_or(var_164.astype('int16'), var_163.astype('int16')) # shape=(16, 16, 6)
bop_183 = relay.floor_mod(bop_165.astype('float32'), relay.reshape(bop_180.astype('float32'), relay.shape_of(bop_165))) # shape=(16, 16, 6)
bop_186 = relay.maximum(bop_171.astype('float64'), relay.reshape(bop_165.astype('float64'), relay.shape_of(bop_171))) # shape=(16, 16, 6)
const_189 = relay.const([[[-4.307255,-4.658189,1.419117,-2.136010,-2.935725,-9.290716],[3.615901,1.184129,-5.449195,-3.593257,-8.313792,-4.363582],[0.076689,1.256137,9.140572,-8.033878,-2.120784,4.187559],[-9.342756,-0.926556,3.581912,4.598154,-4.605525,-0.937560],[-7.126304,-1.786644,-5.578867,-0.533732,6.018539,-7.090245],[-8.434840,5.001999,3.211962,-0.865580,-3.250634,-8.782666],[6.950976,-5.796217,-4.546336,6.815905,0.700965,9.103484],[-8.730810,-7.342913,4.749463,-5.347319,0.541322,-7.214250],[-8.420501,-5.798245,6.851989,3.232020,5.661148,-9.789598],[-6.059353,-1.549046,7.834312,5.714679,-1.559911,-0.309740],[-8.005428,4.145198,-8.338028,-6.877049,1.040586,1.715795],[0.605342,6.233891,8.160761,-4.535331,4.978645,4.163339],[-3.424330,-1.548867,-6.879176,-0.243721,6.009943,-7.936285],[7.929520,5.220083,-1.244950,7.712028,4.828068,-9.015472],[6.437397,-8.752802,1.208856,4.514022,-7.506462,-0.654184],[-6.086528,1.678277,6.502491,6.152983,-2.948541,3.979732]],[[-1.226033,-9.244037,3.244226,-9.095681,0.587106,-5.610307],[-8.408578,-7.588209,5.882511,-2.752386,9.930139,-5.691953],[9.924455,2.466268,-1.844849,-8.205570,7.788365,-6.712921],[7.162971,8.064152,6.258079,-8.791889,-4.305305,-9.705053],[6.219560,8.459701,-8.553360,8.010557,-8.452610,2.116010],[7.836478,9.717587,-1.548011,-8.778911,-7.583387,-8.946739],[5.959853,7.884906,2.817843,9.834929,-9.033687,5.300469],[-1.746703,7.165316,9.072733,8.251920,-2.436911,2.486072],[-5.977268,8.681015,-5.831155,-3.996157,-0.209546,8.511890],[8.682568,-4.706529,5.038354,-6.128307,7.931408,-0.630812],[-1.690128,6.156271,-5.825426,3.375881,-5.382137,1.663678],[-7.945003,-4.322539,-6.168768,-4.813939,8.058851,5.388802],[-0.758865,-5.720106,3.750522,-3.700752,6.273554,7.910394],[6.071957,-9.253856,6.220226,-3.698366,-8.326890,-3.109327],[-3.431972,-9.670000,0.230637,-6.067174,-5.481303,1.704386],[-5.837874,7.968630,-3.683752,9.841357,-2.784608,4.846066]],[[-3.961679,5.354757,1.688227,4.379103,6.071149,3.621025],[8.157753,-6.960401,-8.899533,-9.768862,-5.889866,-4.617595],[-0.434368,-3.413813,-7.177177,-5.469251,8.870640,5.681003],[3.119794,-0.708869,-9.279777,4.865208,2.581306,7.863524],[-1.496999,-0.514873,-9.696765,7.405892,2.854357,0.028991],[3.527916,-1.025506,8.410102,7.668423,-2.022955,5.788810],[9.211590,-7.973287,2.707597,6.084321,0.114114,-1.335084],[-9.898609,-0.636261,6.440196,1.605188,7.597542,3.287992],[4.769115,5.649599,-7.722416,4.685848,-7.488135,-7.731681],[5.956854,9.272437,-1.442249,-6.535327,9.732016,-7.944876],[-0.932763,9.457547,8.185206,0.112496,-2.544694,-1.853786],[9.866317,-0.815184,6.865199,0.415499,-5.414532,-5.416108],[-0.601128,-9.874299,9.838097,-7.786679,-6.512042,-0.305701],[-5.341822,7.659390,-8.855308,5.898852,5.947252,9.810650],[5.307240,1.365359,7.498409,-2.096688,6.457135,5.617731],[8.559863,-7.771439,-8.181026,8.282062,-4.870309,4.510546]],[[-3.055912,3.763356,-2.227843,-8.103745,9.821419,-0.425812],[8.036948,5.703714,9.730696,-5.212381,-0.449734,-6.471321],[9.808030,-2.630512,-9.931825,-5.920905,-0.927836,-9.252217],[0.696327,-9.156436,1.309715,3.353811,6.776335,8.175810],[-5.269540,0.062242,-8.156892,5.496081,8.503930,-0.121514],[6.951679,-5.942152,-4.211731,-0.650957,-0.409086,-2.515020],[5.950071,-1.012042,-3.772448,3.746729,5.063911,-9.144263],[6.255307,0.665340,0.123693,-6.022994,1.321689,-6.867203],[-5.907491,0.932984,-0.469873,-7.146605,3.982809,-3.950827],[-7.057686,-2.316621,6.813236,8.693313,-1.152138,4.010870],[-3.457271,-5.225879,0.718824,1.814211,-7.243680,-1.231674],[7.246218,-4.479941,2.032849,-6.635981,5.578100,-0.003778],[8.041243,2.934667,-5.775298,4.088246,-2.100900,-4.007281],[2.568838,2.075159,-0.521431,-0.514523,-4.159771,9.722628],[8.970000,1.774118,-3.186152,3.574306,-1.808541,-1.124715],[-1.717521,5.208289,9.505731,-1.861937,-3.490787,-4.134720]],[[4.963555,-9.673098,-1.439903,4.289941,3.046368,-0.583896],[-0.740656,-1.756281,-5.906705,-7.183809,-6.760973,2.278147],[2.726153,-4.125404,-4.737957,3.590252,1.464882,9.507155],[2.407395,-2.741804,-6.451444,-8.990968,-9.402124,4.229017],[2.885362,9.258892,5.640226,-8.765703,-6.273902,-1.434262],[6.935258,-0.484979,3.345147,-1.105198,9.241770,-0.325286],[9.380243,-7.119489,3.440210,-4.402309,6.955182,-1.492464],[5.547590,-0.550072,-6.659817,-4.605343,-3.702970,-2.461032],[-7.317186,-5.398816,6.775825,1.602007,7.804006,1.023360],[1.497428,-5.249265,5.814535,-9.353749,7.645945,4.039356],[1.782701,0.066839,-2.488697,-9.261616,5.562634,-2.454562],[0.821518,2.370972,-7.692626,1.245812,7.430867,-6.667740],[-6.602621,7.353558,0.282067,4.579807,-3.724056,-2.235959],[6.922652,8.037762,3.333605,5.065899,-7.168005,-2.272297],[9.094127,-0.840215,6.032292,-6.758512,1.965283,6.540907],[-4.832570,-1.594957,8.339086,8.070476,2.591595,9.846583]],[[5.652749,0.776391,-0.870216,-0.390851,5.003077,-4.694179],[2.255864,-8.495130,-7.962723,-2.977958,9.908671,6.560836],[6.228965,1.917848,9.339839,-9.719038,5.460905,-6.915099],[5.135562,-9.972404,-3.322632,5.723602,5.596053,-2.867446],[1.793477,-0.900096,4.257528,5.931209,-9.460198,3.938128],[-9.855051,-7.870814,7.237393,5.006431,6.950982,0.015852],[-2.243035,-7.529245,6.827906,6.388274,2.615302,2.279331],[9.286315,3.016870,0.737519,1.628977,-1.969539,1.125673],[4.641387,-3.114869,-0.763990,-6.295538,-5.677617,-9.717680],[5.090169,-2.959993,1.045039,-7.663864,7.930405,1.396557],[-3.117750,-3.512924,-7.023480,7.070531,-9.342400,5.757373],[0.688649,6.073806,-5.252471,9.338619,4.777047,-3.689036],[2.568203,2.364371,-1.395642,9.934174,9.153839,-4.372424],[-9.444504,7.833980,2.066545,3.087623,-6.878555,3.819154],[1.636460,7.393579,-8.148768,2.680206,-3.666924,-0.225528],[0.830887,1.828461,9.800990,5.537299,8.551124,-3.234803]],[[9.427647,-5.122524,-8.271669,-2.503706,-9.307144,-9.506138],[4.421768,0.528461,-1.523315,-2.956324,1.728958,4.283736],[7.091585,-1.039315,5.021812,-3.415559,0.201476,8.027505],[-6.003263,9.376671,7.664393,9.011334,8.758447,-7.058963],[7.142157,-2.134256,-8.134257,9.935136,-0.297296,6.976062],[8.648544,-2.936312,-3.218937,-5.991457,9.232456,2.902112],[-3.390459,3.122252,2.762864,5.134739,-0.420015,-4.843998],[1.056794,7.276246,6.217610,-8.029347,-8.898388,6.824245],[-5.809203,8.299693,0.217794,-1.258081,4.778751,-7.821018],[1.553401,8.563136,7.282789,-7.446013,-0.670294,-2.243179],[-9.124148,-8.662862,9.617896,6.760646,8.888813,2.092696],[-7.232916,-9.892957,5.607677,-1.816975,9.753033,-6.737052],[3.946289,6.372995,-8.202121,-1.540424,-1.019753,7.329995],[-7.438105,7.483666,8.309197,3.128015,-8.171828,-4.184560],[-7.384631,-5.846574,-5.562594,-2.796055,-6.012009,4.602412],[5.520880,4.732154,-8.176986,2.212046,-3.283345,6.354292]],[[3.948379,7.545258,-5.421957,0.615865,-0.354984,-9.406189],[-4.282076,7.972398,2.385953,-7.832460,-6.157468,-6.212448],[-4.961624,8.319382,0.398367,6.508889,0.447689,-9.571017],[-1.554052,-6.471002,-8.995247,7.732099,5.963644,7.195483],[-2.591216,2.475406,4.513704,0.573931,6.714477,-7.739617],[5.257831,1.397962,-5.742298,5.088386,7.543244,-7.295021],[-3.363608,4.106587,-8.305712,-8.240142,-4.553552,4.899146],[-1.297735,0.116605,7.618536,-8.626838,2.261909,-3.022955],[1.754935,-1.536899,5.432689,-4.814403,0.931018,-4.245136],[-8.882065,-1.108993,-7.527326,4.026682,-2.594930,3.605242],[-7.760464,2.024085,7.761190,-4.602370,2.874698,-7.474990],[2.359178,-9.081853,-4.655859,-2.332037,-8.462796,3.605091],[-1.270407,7.889636,1.820634,-6.833483,-1.617880,-7.881042],[7.899568,-6.475307,3.647050,-5.834090,-6.866557,3.900389],[5.815152,9.669723,-8.103953,-8.017685,0.735353,-7.938605],[-0.054743,4.962565,-5.840337,6.323668,-8.122990,-2.698777]],[[-0.638821,-3.814456,8.594786,4.234729,2.829111,-7.594309],[1.943806,-5.962817,-8.360427,6.818740,0.311916,5.052448],[-9.450160,-7.490977,2.088021,0.434622,6.150529,-6.576600],[2.681426,2.161295,-7.241437,3.329405,-1.528597,6.422511],[-1.978122,-0.471044,8.008538,8.312948,-5.960393,-6.064239],[-7.061641,5.092312,5.263410,-5.767961,7.104465,0.759358],[-9.563455,5.282183,-4.826278,1.675196,6.275346,-1.253671],[-5.360413,5.361266,6.497438,-1.429109,7.480703,1.226237],[8.433810,5.986014,3.022445,-0.620763,1.915294,6.969716],[-2.968510,-6.668858,-0.242000,-7.397033,-5.774582,4.426849],[5.110985,5.217529,7.141130,1.852638,5.227798,2.223833],[7.619249,-6.712590,5.751380,-8.281016,-7.425655,9.587754],[-9.218668,0.988201,5.766672,-9.202572,-5.290312,5.772866],[5.013235,-5.980094,-6.194353,3.051304,-2.259835,-8.173951],[8.598123,8.738928,-7.727561,-3.444867,8.430752,8.119281],[-4.348870,1.734691,-9.287351,-8.076469,-9.490559,-6.643906]],[[-7.927073,-0.737176,3.183748,-7.239972,-1.898262,-6.668844],[3.582947,8.189952,0.325974,2.570970,-3.540167,-6.731175],[-1.275490,-7.669821,-9.068196,9.618389,8.643508,0.127436],[-7.302535,9.059374,5.927466,1.871816,3.926262,2.620360],[-8.713154,-4.204480,-2.836854,5.408372,-7.183271,2.873207],[-5.076926,3.493735,-0.544168,-7.166113,9.117452,4.492695],[3.872984,7.208658,0.990530,3.393312,1.162990,4.928746],[7.012767,-7.577828,-9.007448,-0.492544,-8.599071,-4.056255],[-8.334162,-7.808934,9.150007,-6.670415,-9.244233,8.435664],[7.747771,0.709456,-6.374423,-8.714634,6.260991,2.225321],[-8.758282,-7.145115,-5.085423,9.869725,9.405896,-1.817705],[-1.931878,-2.714988,-9.628671,-4.275072,-8.558001,-0.617588],[-6.186317,-8.813889,-9.876782,-4.168789,5.274777,8.485607],[1.733430,-6.927258,-0.149648,1.430422,-3.077968,-9.707990],[7.502366,-4.718040,-0.658386,4.065457,5.381768,6.649612],[6.384150,-7.670724,-7.308583,-6.093797,-8.972233,8.860397]],[[5.244753,8.032620,-9.585637,-2.650275,8.708389,6.732047],[-3.971469,-5.824955,9.151348,8.622783,7.925628,9.511600],[4.453618,-1.955102,5.857652,2.105594,-2.967153,-5.949460],[-2.439825,3.705061,3.259254,1.463061,6.837446,6.243253],[3.378440,4.410147,-2.323074,2.428094,4.826218,0.728699],[8.825265,4.115271,-4.757823,-1.919616,2.577992,-2.126893],[-6.594410,-0.931137,5.568268,-8.215571,-9.230663,-7.347422],[9.330110,-7.296295,3.481679,2.574061,-0.696559,-0.563017],[-8.880610,7.184838,-7.840014,-4.398643,-2.566713,-6.196536],[-5.457301,-3.724569,8.795334,8.845106,-7.694080,8.006653],[7.863843,-2.278413,3.493034,-4.572333,2.459283,1.564487],[5.121193,9.594426,-3.671824,-3.362414,-5.980121,8.003989],[8.631281,-8.326943,1.958735,7.291515,-9.526754,-1.087169],[-9.726679,1.924359,1.455391,-9.084030,-1.645021,-5.764945],[1.374484,3.019171,4.193502,5.887371,9.522211,9.365052],[9.328457,-8.991267,-8.574573,-0.884832,2.243436,9.811394]],[[-6.700458,-6.325302,5.126232,-8.675479,0.022529,-3.084947],[-3.081332,2.611611,-1.035459,-4.884851,4.822758,5.590182],[-3.468288,-7.124896,-5.273888,-7.042520,3.573902,6.232955],[7.233879,-0.766590,-1.333056,8.184803,-8.335264,-7.903725],[4.187811,6.793568,8.258294,3.192150,-8.951381,-5.692386],[9.797406,6.351755,4.201211,2.988262,-3.701999,0.755669],[-6.058048,-0.599837,2.991328,9.514737,1.772320,9.371617],[-9.968221,-0.046702,-5.063252,6.791503,3.909858,2.003497],[1.443285,4.381104,-8.495785,-7.189757,-0.148001,3.197726],[-0.048002,-2.037281,5.649460,-0.786894,-6.712581,-2.644898],[9.101027,-2.278732,3.170528,7.354276,-8.642988,-7.128269],[5.449226,-2.479182,2.879351,3.776330,-8.044981,-5.029225],[6.037531,7.703162,4.034086,5.482169,8.018731,-6.693199],[0.967187,-6.540882,-8.699945,-4.377285,5.380733,8.911073],[-8.954810,-5.402515,8.201193,7.156053,-6.489671,-4.866381],[-1.172287,-6.583535,-4.402399,-7.204083,2.807328,9.014936]],[[-2.296575,5.676189,-3.837588,-6.173473,-7.183591,-6.332039],[1.487987,-9.622484,-4.302469,-9.776855,-7.882775,7.151876],[4.029357,-4.430730,-3.461143,-8.916031,4.685847,-1.688058],[3.399563,5.399133,-3.341906,1.785362,8.257382,4.374212],[-3.594143,-9.042037,-1.423969,6.154482,-7.343019,-0.064763],[-4.871670,7.225759,6.604430,2.414270,-0.430221,-0.671590],[-6.583168,9.326635,4.526771,-5.169226,-7.443173,7.873189],[-8.346636,-3.182477,-2.892204,8.499848,1.072351,6.745984],[-6.726049,3.049179,3.391556,0.610536,9.262643,5.861898],[0.326759,9.560576,-4.479094,6.988369,0.635363,1.047755],[-7.246237,-2.609946,2.305443,-8.751049,0.239185,8.514352],[6.372150,-9.659630,2.330908,-3.112213,6.252040,-6.383955],[-0.499237,-5.175317,2.056344,9.062191,-7.138323,9.864622],[6.706992,-6.609759,-1.783275,9.971710,-0.271280,-9.642367],[1.664430,8.388969,-4.630617,0.526872,8.785495,6.209147],[7.216899,-2.405424,-3.745458,-5.148123,-3.743503,-5.864879]],[[-7.653775,-1.042760,-6.743499,-9.717728,1.437549,-5.234199],[2.868020,-3.247174,-0.720360,4.969964,5.646780,4.408106],[6.654891,2.453839,-0.568691,-9.893037,-8.585030,-6.302990],[-1.003508,-4.795731,-0.105891,3.794315,-2.120929,-4.221020],[5.103053,9.992649,3.451948,1.385340,-6.868046,-4.987233],[-5.937904,1.477818,-4.071740,4.246940,-1.533656,-1.821490],[4.250549,-0.113014,-8.975539,-1.601986,-9.223881,-0.830779],[-6.012418,-7.599905,-5.523858,-1.399502,-6.487856,3.731929],[6.100969,1.502674,5.534848,-8.759264,5.407350,-2.091907],[4.262387,-6.284995,-0.395040,4.650877,-4.252207,9.963285],[1.021021,9.762133,9.794746,-2.919438,-7.528879,-9.470452],[2.064024,-4.811351,2.598126,-1.164972,3.080760,-8.678150],[5.136526,-3.417445,-5.090704,1.777134,1.665618,7.321215],[8.580287,5.180271,9.008737,3.026724,-7.054140,4.041008],[9.912240,-3.278498,-2.221983,-2.013588,1.010173,5.709459],[5.921965,3.321876,-7.790704,8.880030,-5.786913,6.280891]],[[2.208913,-1.144683,-1.099759,9.134007,-7.326965,-4.291890],[9.153889,-5.120660,8.908845,-1.619118,-7.312321,-7.590824],[-0.065923,1.794861,-7.067454,-9.432537,4.649304,-2.691121],[-9.136470,9.949109,8.211884,-2.494871,4.363636,3.183645],[-8.543654,7.313747,2.862455,7.914585,7.835050,-9.944423],[4.917632,0.070470,-7.741588,-2.844309,-9.324091,5.514844],[9.589076,-8.643457,-5.540485,-0.380931,7.184702,-2.611214],[2.513049,-4.214253,-0.627702,-8.288110,1.632168,-3.563289],[7.218052,-8.305807,4.912183,-6.101296,9.003560,4.725599],[-0.481785,0.948297,7.207462,8.439842,1.734575,4.306328],[-0.198595,-5.624048,-4.815700,5.395969,4.309772,6.629428],[4.865264,-6.694292,-6.968817,7.617377,2.804992,-9.102090],[-8.356171,5.483277,5.048050,7.509552,-3.115214,3.584203],[-3.374583,9.652652,-0.219598,-9.645936,-9.108635,5.266729],[-4.981819,1.162643,5.040012,-2.249688,3.732221,7.387018],[8.930086,0.668779,-7.945923,-7.316621,2.683583,4.356467]],[[-0.085397,-0.763020,-1.337905,6.466723,-2.497162,-2.291996],[-0.726718,3.686281,-8.338013,-6.371040,6.046133,5.535638],[-4.045529,-6.173461,6.270164,5.875062,-3.446761,-2.953123],[6.608281,9.051143,3.318389,4.466895,9.641269,6.447255],[-5.344052,5.714319,2.280419,2.277613,-2.159612,-2.261510],[5.369497,3.752163,8.028874,-1.971488,3.428615,-0.677957],[4.671137,-0.429334,-3.289815,-3.910201,1.007880,-8.480028],[2.785922,-0.045301,7.672651,0.069122,-4.868548,-5.991690],[7.705073,9.829820,7.827994,2.092217,7.145531,0.906883],[6.536246,-5.756305,9.140881,-3.220790,6.578192,-9.019280],[9.297323,0.349025,-8.615141,3.035112,2.135741,-9.028506],[-6.404797,1.470389,3.399914,1.157366,1.619761,4.423141],[-8.214213,8.548788,-1.343067,-6.296713,4.163865,5.342650],[-4.763872,6.205257,1.195577,-4.972074,0.632367,-5.558035],[-7.361696,-5.086241,4.785163,-2.646123,8.452239,5.059103],[6.767892,6.876010,-6.853848,-9.334160,1.433732,-9.180976]]], dtype = "float64")#candidate|189|(16, 16, 6)|const|float64
bop_190 = relay.bitwise_or(bop_165.astype('int8'), relay.reshape(const_189.astype('int8'), relay.shape_of(bop_165))) # shape=(16, 16, 6)
output = relay.Tuple([bop_177,bop_183,bop_186,bop_190,])
output2 = relay.Tuple([bop_177,bop_183,bop_186,bop_190,])
func_193 = relay.Function([var_163,var_164,], output)
mod['func_193'] = func_193
mod = relay.transform.InferType()(mod)
var_194 = relay.var("var_194", dtype = "float64", shape = ())#candidate|194|()|var|float64
var_195 = relay.var("var_195", dtype = "float64", shape = (16, 16, 6))#candidate|195|(16, 16, 6)|var|float64
output = func_193(var_194,var_195,)
func_196 = relay.Function([var_194,var_195,], output)
mutated_mod['func_196'] = func_196
mutated_mod = relay.transform.InferType()(mutated_mod)
const_201 = relay.const([-3,-4,3,-2,1,10,10,3,-3], dtype = "int32")#candidate|201|(9,)|const|int32
var_202 = relay.var("var_202", dtype = "int32", shape = (9,))#candidate|202|(9,)|var|int32
bop_203 = relay.bitwise_xor(const_201.astype('int32'), relay.reshape(var_202.astype('int32'), relay.shape_of(const_201))) # shape=(9,)
uop_208 = relay.asinh(const_201.astype('float64')) # shape=(9,)
func_70_call = mod.get_global_var('func_70')
func_73_call = mutated_mod.get_global_var('func_73')
var_211 = relay.var("var_211", dtype = "float32", shape = (252, 2))#candidate|211|(252, 2)|var|float32
call_210 = relay.TupleGetItem(func_70_call(relay.reshape(var_211.astype('float32'), [12, 7, 6]), relay.reshape(var_211.astype('float32'), [12, 7, 6]), ), 0)
call_212 = relay.TupleGetItem(func_73_call(relay.reshape(var_211.astype('float32'), [12, 7, 6]), relay.reshape(var_211.astype('float32'), [12, 7, 6]), ), 0)
bop_213 = relay.logical_xor(var_202.astype('int16'), relay.reshape(uop_208.astype('int16'), relay.shape_of(var_202))) # shape=(9,)
uop_216 = relay.asinh(bop_213.astype('float32')) # shape=(9,)
uop_218 = relay.cosh(uop_216.astype('float64')) # shape=(9,)
bop_220 = relay.logical_xor(uop_218.astype('uint64'), relay.reshape(bop_213.astype('uint64'), relay.shape_of(uop_218))) # shape=(9,)
uop_223 = relay.cos(bop_220.astype('float64')) # shape=(9,)
bop_226 = relay.not_equal(var_202.astype('bool'), relay.reshape(bop_220.astype('bool'), relay.shape_of(var_202))) # shape=(9,)
output = relay.Tuple([bop_203,call_210,var_211,uop_223,bop_226,])
output2 = relay.Tuple([bop_203,call_212,var_211,uop_223,bop_226,])
func_229 = relay.Function([var_202,var_211,], output)
mod['func_229'] = func_229
mod = relay.transform.InferType()(mod)
mutated_mod['func_229'] = func_229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_229_call = mutated_mod.get_global_var('func_229')
var_231 = relay.var("var_231", dtype = "int32", shape = (9,))#candidate|231|(9,)|var|int32
var_232 = relay.var("var_232", dtype = "float32", shape = (252, 2))#candidate|232|(252, 2)|var|float32
call_230 = func_229_call(var_231,var_232,)
output = call_230
func_233 = relay.Function([var_231,var_232,], output)
mutated_mod['func_233'] = func_233
mutated_mod = relay.transform.InferType()(mutated_mod)
var_245 = relay.var("var_245", dtype = "int8", shape = ())#candidate|245|()|var|int8
var_246 = relay.var("var_246", dtype = "int8", shape = (11, 12, 9))#candidate|246|(11, 12, 9)|var|int8
bop_247 = relay.bitwise_and(var_245.astype('int8'), var_246.astype('int8')) # shape=(11, 12, 9)
bop_250 = relay.less(bop_247.astype('bool'), relay.reshape(var_246.astype('bool'), relay.shape_of(bop_247))) # shape=(11, 12, 9)
var_253 = relay.var("var_253", dtype = "int8", shape = (11, 12, 9))#candidate|253|(11, 12, 9)|var|int8
bop_254 = relay.bitwise_or(bop_247.astype('int16'), relay.reshape(var_253.astype('int16'), relay.shape_of(bop_247))) # shape=(11, 12, 9)
var_258 = relay.var("var_258", dtype = "bool", shape = (11, 12, 9))#candidate|258|(11, 12, 9)|var|bool
bop_259 = relay.power(bop_250.astype('float64'), relay.reshape(var_258.astype('float64'), relay.shape_of(bop_250))) # shape=(11, 12, 9)
bop_262 = relay.equal(bop_259.astype('bool'), relay.reshape(bop_254.astype('bool'), relay.shape_of(bop_259))) # shape=(11, 12, 9)
uop_265 = relay.sqrt(bop_254.astype('float32')) # shape=(11, 12, 9)
bop_268 = relay.logical_xor(uop_265.astype('int8'), relay.reshape(bop_247.astype('int8'), relay.shape_of(uop_265))) # shape=(11, 12, 9)
uop_271 = relay.cos(uop_265.astype('float64')) # shape=(11, 12, 9)
uop_273 = relay.tan(uop_271.astype('float64')) # shape=(11, 12, 9)
bop_275 = relay.subtract(uop_273.astype('uint16'), relay.reshape(var_246.astype('uint16'), relay.shape_of(uop_273))) # shape=(11, 12, 9)
output = relay.Tuple([bop_262,bop_268,bop_275,])
output2 = relay.Tuple([bop_262,bop_268,bop_275,])
func_278 = relay.Function([var_245,var_246,var_253,var_258,], output)
mod['func_278'] = func_278
mod = relay.transform.InferType()(mod)
var_279 = relay.var("var_279", dtype = "int8", shape = ())#candidate|279|()|var|int8
var_280 = relay.var("var_280", dtype = "int8", shape = (11, 12, 9))#candidate|280|(11, 12, 9)|var|int8
var_281 = relay.var("var_281", dtype = "int8", shape = (11, 12, 9))#candidate|281|(11, 12, 9)|var|int8
var_282 = relay.var("var_282", dtype = "bool", shape = (11, 12, 9))#candidate|282|(11, 12, 9)|var|bool
output = func_278(var_279,var_280,var_281,var_282,)
func_283 = relay.Function([var_279,var_280,var_281,var_282,], output)
mutated_mod['func_283'] = func_283
mutated_mod = relay.transform.InferType()(mutated_mod)
var_352 = relay.var("var_352", dtype = "float64", shape = ())#candidate|352|()|var|float64
var_353 = relay.var("var_353", dtype = "float64", shape = (11, 13, 14))#candidate|353|(11, 13, 14)|var|float64
bop_354 = relay.mod(var_352.astype('float64'), var_353.astype('float64')) # shape=(11, 13, 14)
func_70_call = mod.get_global_var('func_70')
func_73_call = mutated_mod.get_global_var('func_73')
const_362 = relay.const([[-0.253459],[9.895660],[5.469470],[-8.527469],[-6.934379],[-9.078625],[-1.441038],[1.762307],[-9.721543],[-6.254581],[8.009102],[9.746054],[8.486680],[-6.586476],[8.863221],[8.584013],[-3.790539],[8.235803],[-9.829108],[-6.996600],[-8.493219],[-8.067786],[8.189297],[6.532067],[-3.207956],[-5.325220],[-8.475401],[-4.161529],[-6.618396],[3.611482],[-0.562385],[-5.124138],[3.707269],[-6.051502],[1.674036],[4.223326],[-0.393606],[6.726542],[7.041808],[0.493263],[-9.286575],[-4.058756],[-9.411879],[-9.739788],[7.362875],[-3.590551],[-3.218780],[1.998036],[-5.322030],[1.520372],[-2.751737],[0.745031],[-2.313585],[-3.440840],[7.433532],[-5.902876],[3.656981],[-1.077666],[4.938206],[6.266978],[-8.138329],[-8.386533],[-7.068373],[3.504219],[8.356306],[-1.947908],[1.123613],[-5.097430],[-9.753688],[4.230774],[7.449997],[5.734508],[-2.172295],[-2.844026],[6.130984],[3.585652],[2.837922],[-7.892400],[3.126828],[-5.129538],[3.705639],[-7.303605],[-1.599725],[-9.505205],[-7.928033],[6.722979],[5.290041],[-2.381417],[-6.679612],[8.817124],[-7.825063],[-3.496110],[-0.220556],[0.145858],[-6.631212],[5.006253],[2.907828],[-2.101946],[-8.185894],[-8.647470],[-3.746522],[-5.392640],[5.611704],[-9.904648],[3.017060],[0.317304],[-4.480305],[8.966092],[-1.540547],[-7.610052],[-3.601966],[-5.780584],[5.614648],[-9.364341],[-8.577305],[-3.411045],[-1.996424],[-1.477927],[-5.008827],[0.986498],[5.440619],[0.157005],[-4.900605],[-0.060934],[-8.525672],[9.134405],[-7.419792],[-7.752555],[-8.011359],[-3.498677],[5.365984],[-1.230894],[2.153303],[4.733121],[2.482385],[-1.208985],[2.988711],[-4.398555],[-2.880591],[2.938247],[8.118812],[-8.738112],[-0.544910],[4.717495],[4.631268],[3.309196],[2.102625],[-5.625512],[5.321962],[-1.610512],[-5.801312],[0.800511],[-9.157412],[-2.587783],[-2.366002],[9.534679],[-7.032836],[-0.275243],[-9.662579],[-9.970672],[0.735381],[3.927523],[8.797590],[6.989502],[9.853259],[4.576155],[-1.523461],[-8.967853],[-1.503746],[-9.686889],[-4.656615],[-5.936344],[4.887932],[1.078290],[-2.172155],[8.650126],[-2.648800],[-3.406444],[-1.317714],[-7.073542],[3.889776],[1.778594],[-1.506216],[3.302505],[-1.583453],[6.101442],[8.731258],[-4.583197],[-1.442419],[0.712855],[5.341570],[-7.433748],[6.177893],[2.842763],[7.480783],[1.743256],[1.982449],[-7.616260],[-9.382172],[-6.345094],[5.637057],[6.772173],[0.167252],[6.614546],[-9.897274],[-2.425780],[9.130402],[2.007784],[-3.271298],[-8.208474],[-5.704076],[-3.935873],[8.868710],[0.841101],[-4.540183],[-9.761606],[8.324079],[2.015296],[1.113424],[6.510788],[9.688189],[4.028740],[-4.878957],[4.445491],[2.238540],[-1.210628],[0.452907],[6.634149],[-0.744133],[2.283827],[-8.351281],[-5.578205],[0.769406],[-8.204959],[1.121434],[-9.610346],[-8.706785],[2.588634],[-2.963502],[9.731260],[1.159591],[0.105799],[-4.475023],[5.104795],[2.407238],[-4.851052],[-2.278075],[-9.138811],[-3.931918],[9.769603],[-2.935632],[-1.538782],[4.767539],[5.864304],[-6.421013],[-7.538467],[5.618789],[-0.587783],[-6.277534],[-1.489330],[-0.467760],[-8.758131],[4.999082],[0.766635],[4.156566],[3.871273],[-7.476500],[-2.893995],[-9.639405],[-3.636699],[-4.510246],[-0.855537],[-7.471786],[-4.159749],[-1.712887],[3.652997],[5.571064],[1.711479],[-7.157016],[-5.794735],[1.285103],[8.619256],[0.734243],[-9.570751],[4.163287],[-0.741656],[8.283712],[1.477088],[8.413270],[-0.974078],[-8.051327],[7.539951],[1.419850],[6.203009],[0.458532],[-5.017559],[1.715591],[-8.220115],[7.439983],[-7.687297],[9.059323],[6.729773],[0.845940],[3.636261],[-1.070609],[-6.913150],[6.845933],[-6.603069],[2.353684],[-6.475892],[1.048374],[5.121097],[-8.439996],[1.827280],[-6.634391],[-7.650463],[-8.781631],[-7.186284],[7.300893],[-5.105502],[-8.476844],[-9.480993],[-2.694539],[-7.305162],[-7.414934],[-2.009602],[3.721899],[3.606701],[-8.921076],[-6.926840],[-9.663981],[-5.084089],[-1.839674],[2.690641],[-6.172391],[8.828429],[-4.469495],[-2.364205],[-0.757721],[-2.005599],[3.036341],[-3.719281],[1.806122],[-1.553982],[-5.772967],[-5.434344],[-9.620218],[8.023230],[-5.127671],[-4.545430],[-2.503625],[3.775687],[2.349015],[-2.561317],[-9.041697],[2.369321],[1.924829],[1.663326],[6.374888],[-0.794587],[-9.519273],[-5.763242],[-9.820740],[6.009256],[-4.297831],[5.775089],[6.790536],[-4.498637],[6.672651],[-7.083606],[1.436420],[0.819899],[8.811082],[3.828622],[4.472945],[-9.767297],[2.639499],[-5.859982],[-0.239318],[-4.171936],[3.648177],[3.311392],[-0.592995],[3.012070],[-2.281501],[3.373040],[6.459254],[5.561020],[2.675984],[3.961200],[-0.834334],[-0.100760],[8.443065],[5.295272],[-6.782223],[-9.013120],[-8.170823],[-4.891448],[0.907064],[-4.029022],[4.897311],[-5.676042],[-5.920577],[0.094741],[-5.080550],[-2.699860],[-0.409397],[-9.538372],[2.916890],[7.918000],[5.608118],[1.799228],[-8.774921],[-5.777189],[-4.436718],[3.511437],[4.354810],[-8.007367],[9.180846],[1.063391],[0.417729],[1.631717],[0.224015],[6.879833],[4.570148],[-3.544439],[-7.462793],[-9.865944],[-1.225234],[8.666304],[5.826872],[-6.189638],[-7.452216],[3.823551],[9.701971],[8.019155],[-1.031348],[-7.700695],[4.313108],[7.629394],[7.218721],[8.308202],[1.725263],[-6.171619],[4.701466],[-0.705912],[-9.613955],[9.505334],[-5.599470],[2.433655],[6.585416],[-5.134198],[1.013859],[8.500328],[-6.231866],[4.939084],[6.715561],[1.528724],[2.578033],[-3.897474],[8.498564],[6.791040],[2.829106],[-8.770181],[1.785179],[9.151799],[4.468023],[1.634321],[8.066032],[5.151678],[4.475513],[2.908942],[4.199840],[0.096015],[-3.409221],[8.456699],[7.624090],[5.179866],[2.590174],[-5.066173],[9.633938],[-4.173510],[8.646364],[0.451929],[-0.992892],[-2.350287],[-6.979423],[-7.393532],[-9.446322],[-6.083800],[4.014210],[7.897395],[-1.515338],[-9.180220],[-1.049968],[3.266052],[-6.171821],[-1.795032],[8.662272],[-5.041566],[-6.218829],[6.593694],[-0.919617],[8.570353]], dtype = "float32")#candidate|362|(504, 1)|const|float32
call_361 = relay.TupleGetItem(func_70_call(relay.reshape(const_362.astype('float32'), [12, 7, 6]), relay.reshape(const_362.astype('float32'), [12, 7, 6]), ), 3)
call_363 = relay.TupleGetItem(func_73_call(relay.reshape(const_362.astype('float32'), [12, 7, 6]), relay.reshape(const_362.astype('float32'), [12, 7, 6]), ), 3)
uop_364 = relay.exp(var_353.astype('float64')) # shape=(11, 13, 14)
uop_367 = relay.erf(uop_364.astype('float64')) # shape=(11, 13, 14)
bop_372 = relay.subtract(uop_367.astype('uint64'), relay.reshape(bop_354.astype('uint64'), relay.shape_of(uop_367))) # shape=(11, 13, 14)
var_380 = relay.var("var_380", dtype = "float64", shape = (11, 13, 14))#candidate|380|(11, 13, 14)|var|float64
bop_381 = relay.less(uop_364.astype('bool'), relay.reshape(var_380.astype('bool'), relay.shape_of(uop_364))) # shape=(11, 13, 14)
bop_385 = relay.add(uop_367.astype('int16'), relay.reshape(uop_364.astype('int16'), relay.shape_of(uop_367))) # shape=(11, 13, 14)
bop_388 = relay.bitwise_and(bop_385.astype('uint32'), relay.reshape(bop_372.astype('uint32'), relay.shape_of(bop_385))) # shape=(11, 13, 14)
bop_391 = relay.bitwise_or(bop_381.astype('uint64'), relay.reshape(var_380.astype('uint64'), relay.shape_of(bop_381))) # shape=(11, 13, 14)
const_394 = relay.const([[[3,-1,-4,-7,3,-8,2,7,4,9,-10,-9,10,10],[-2,-1,4,1,6,-8,-9,-5,6,5,2,5,2,9],[-6,7,9,-3,2,1,-4,-7,3,-4,-4,8,4,9],[9,-7,6,-5,3,-10,-3,-5,7,-2,3,-1,6,4],[7,5,3,1,5,6,3,5,6,5,-1,8,-4,3],[-2,-1,10,5,7,5,-1,3,9,-1,9,2,6,6],[-1,-1,3,2,-9,9,4,-1,-6,-10,-4,2,1,-3],[-4,-7,7,-9,-2,-6,-9,-9,2,9,-4,-5,-2,-2],[-2,9,6,-2,4,3,-4,6,-7,-8,7,-7,8,9],[-8,4,6,6,9,-4,1,10,-10,1,-3,6,-8,-1],[4,6,-1,-2,4,-8,7,-6,3,4,-2,1,-5,5],[2,8,6,-8,4,3,-9,1,-4,4,2,-3,4,4],[-2,3,-7,-10,6,-7,9,8,-10,5,5,5,1,4]],[[1,7,8,-7,-2,5,6,-8,-1,-6,3,-9,3,6],[2,-1,9,-6,1,-2,-2,-1,-9,3,3,-5,1,5],[-9,-1,-4,-6,2,1,-7,6,-10,-6,-4,-10,-10,-5],[2,6,2,4,2,10,2,-7,2,8,10,10,-7,-3],[9,8,8,3,-3,-8,7,-9,9,7,1,3,1,5],[6,-3,-6,6,-8,5,-6,-6,-1,1,1,1,-5,-1],[-10,2,-6,2,-9,7,-7,-7,-5,5,8,-8,-6,-10],[5,-5,10,4,-6,10,-5,1,9,-7,2,2,10,8],[-1,6,2,3,-1,-9,-5,2,-6,-4,-2,-7,4,4],[-9,1,3,-8,-9,8,-9,-8,-6,6,3,4,2,-2],[5,2,10,-6,1,9,-4,-1,-2,9,7,-1,-5,8],[8,-4,9,9,-1,4,6,3,8,4,1,1,7,10],[7,-9,-1,-10,-1,10,1,-6,-7,8,3,7,-7,3]],[[10,-8,-3,-2,10,-3,-8,-4,6,7,-9,9,8,5],[6,-9,-1,-3,-4,9,6,4,4,4,-8,-3,5,8],[-10,9,8,2,7,-4,-10,-4,4,2,-5,-7,-9,-1],[-2,8,-9,8,6,-1,-5,3,-7,-6,4,10,-6,6],[5,10,6,9,-8,5,7,9,2,-1,-9,-1,-5,-6],[-7,-8,10,10,-9,-1,8,-1,3,-8,3,5,8,-7],[-6,6,7,-6,4,-3,6,10,-10,-10,-2,-10,-10,9],[1,-3,-10,10,2,4,-3,9,-9,-5,9,-5,-6,7],[10,-5,1,7,6,-7,-5,-4,-6,-8,-3,5,10,4],[5,-3,-7,-5,8,-8,-1,-3,-7,-5,-2,-1,7,7],[-8,-7,-2,7,1,-8,5,-3,2,-3,3,-6,-2,-9],[3,-10,7,-1,8,-8,1,7,-1,-2,-8,-6,4,5],[-6,-7,-10,-9,2,4,1,8,8,-6,10,4,5,-7]],[[1,-5,6,-8,-6,-3,-9,10,-9,-2,6,7,-5,1],[2,-9,2,10,3,-6,4,-9,6,-5,-8,3,-4,-9],[3,1,10,8,3,1,5,6,7,-4,-5,-10,-5,-8],[-5,-8,-8,4,6,-1,-10,-4,2,-4,-5,3,-7,-4],[8,-9,-10,-1,-5,-8,7,-1,-6,1,7,8,-4,-4],[6,5,-10,6,1,-10,-2,-9,-10,7,-5,3,-6,4],[5,-2,7,-4,-2,-9,-8,1,-7,-1,1,2,-10,10],[9,-5,3,3,7,-7,8,3,-4,5,7,8,-8,5],[-9,-4,-10,-1,10,-5,3,-5,-9,-8,5,4,-1,-1],[7,9,-3,-2,-3,8,-1,2,6,-7,-8,-5,8,4],[-4,-10,-10,-6,-1,-6,3,2,8,8,-9,-6,-7,1],[-4,5,-9,10,-4,-2,5,1,-3,-10,7,4,2,-5],[5,-2,-1,9,-2,9,3,10,3,-6,6,-9,3,-1]],[[7,3,1,3,2,2,-10,9,6,3,-5,-4,-4,-4],[-8,1,-2,-7,10,5,-3,8,-9,9,10,-3,-1,-6],[1,4,-6,5,9,-10,-4,-5,-1,-8,-1,4,-9,6],[5,4,1,-5,3,4,-4,5,9,-2,-2,-1,-9,6],[-3,9,2,3,-1,2,-8,10,-3,7,2,4,-2,-6],[-1,1,5,-9,-5,-2,-1,-4,5,9,6,1,7,-1],[2,4,-2,-5,-6,3,9,10,2,-8,-8,4,-5,2],[-2,-5,-2,8,-3,-8,9,2,9,-9,6,7,-4,-7],[-9,3,4,8,6,-8,8,9,9,9,-5,-8,-4,6],[9,-9,4,10,1,-2,3,-7,7,-10,9,-4,-8,7],[7,-1,9,-5,-1,1,-2,-10,-4,-5,5,7,7,-10],[2,-6,-3,7,7,4,-6,10,9,-2,9,4,-3,9],[2,4,1,5,8,-5,-4,3,-8,-10,4,-10,9,8]],[[6,-3,-9,2,-8,-5,1,-1,10,6,6,-7,-10,-3],[2,1,9,6,-1,-9,7,7,-5,-4,-10,-5,8,9],[8,7,3,9,1,3,6,-3,7,3,-10,-7,9,9],[1,-7,9,-8,-9,-6,2,4,-1,-5,1,-8,-6,1],[6,-3,7,-7,-4,-9,-4,5,4,6,-10,-2,8,10],[-7,-9,3,2,-4,8,-6,2,2,5,-9,-1,-3,-8],[5,7,10,-6,10,3,-7,-3,-8,4,-2,-7,-2,-10],[1,10,-9,-7,4,2,-1,7,7,-2,5,-8,7,-10],[6,-5,-1,3,3,8,5,-1,-8,6,-8,-2,-6,-2],[8,3,-5,10,-5,-5,-5,6,-5,-8,-5,8,-7,-10],[1,-6,-5,2,7,-5,7,3,-5,3,7,-2,-8,-8],[1,7,-10,-2,4,-7,7,5,4,-7,-8,8,4,8],[10,-6,-5,-4,6,2,-3,-2,2,6,5,4,4,9]],[[-4,9,-4,-7,-7,-4,9,4,-6,4,-4,-4,4,2],[-2,7,7,-1,2,-8,1,4,1,-1,4,4,6,5],[-6,1,8,-3,3,-6,10,-3,-7,10,-5,-4,8,7],[6,7,10,7,3,5,-1,-2,4,-3,-4,-10,8,8],[-1,-2,-8,6,-7,8,-2,8,1,-8,7,7,-6,2],[10,-2,6,8,2,-4,9,-1,-2,-8,-10,9,8,3],[-2,8,5,-2,3,-7,-4,-8,-2,5,7,-10,-10,8],[-6,1,-4,-1,-10,-1,5,-2,10,3,6,-9,-1,-1],[9,-8,8,4,-10,-4,8,-5,-5,1,6,1,-3,-6],[1,-5,7,-5,1,-9,-4,3,-8,6,-5,3,2,1],[6,10,-5,8,-6,-8,-4,-10,-2,4,-1,-5,7,6],[-2,5,-6,-5,-9,4,-8,4,1,-2,-9,5,7,4],[10,5,7,-1,-6,6,9,-1,-2,1,-1,8,-1,7]],[[3,-4,-3,4,-1,-5,-1,-10,-10,-9,8,-8,5,8],[-9,4,10,6,6,-1,6,4,6,-8,-5,-9,-7,3],[-4,-5,-7,4,8,-9,1,3,-8,5,-1,2,-9,10],[-9,7,-3,6,-3,9,2,10,-10,9,10,-5,6,-6],[8,3,8,-1,-4,4,7,1,-1,-3,3,-2,7,-1],[-3,-9,4,8,-2,4,-6,-5,2,-2,-6,6,6,-2],[5,5,-2,-3,-8,10,-10,6,-3,-8,-7,-9,-3,6],[-5,2,4,10,-4,6,-3,-2,9,10,-10,-8,-1,2],[2,-5,8,6,7,-2,10,4,2,-8,-3,4,9,2],[9,-5,-4,9,-8,-4,3,-9,-3,6,-9,8,-7,7],[6,-7,3,-7,2,9,-1,8,-8,-6,-10,-6,-1,10],[9,-5,7,10,-3,7,3,5,8,9,-10,8,-9,6],[-1,7,6,-4,1,-4,-3,10,-6,9,8,-1,2,8]],[[-6,-1,-5,-6,10,5,-6,-8,2,4,-4,-4,-10,1],[-4,5,-5,6,5,-2,-6,8,6,8,5,5,-4,2],[-4,7,-3,-10,1,10,-10,2,-9,-7,-8,2,6,1],[-6,7,5,8,8,-8,-5,-4,-1,10,-9,-5,-3,-8],[-4,-2,-1,10,3,-6,7,-10,2,-7,10,-3,6,6],[4,-10,-3,9,-1,2,9,5,-1,8,8,-6,-5,-9],[-8,-2,-1,1,7,7,-8,-4,-6,5,-3,-1,-10,-3],[-8,8,9,10,-6,-3,-2,-3,-1,9,3,5,9,-10],[2,4,8,-10,3,9,1,-2,-4,3,-9,3,8,-9],[5,-4,5,-9,-1,1,8,-1,2,2,-6,1,1,9],[-3,6,8,-5,9,5,4,4,-6,1,-8,-5,-1,-2],[-2,2,9,-5,8,-1,5,-9,-4,1,7,9,8,-2],[10,-1,-4,10,-1,-2,7,9,9,-3,10,4,-9,-5]],[[-7,-5,-2,9,-1,3,6,-4,9,4,-1,3,-2,-1],[8,-7,-4,1,-9,3,-1,-4,2,-9,1,-8,-10,-6],[-8,3,-2,10,-3,1,3,-3,-10,1,-7,4,-4,4],[5,-8,6,8,4,-3,3,10,-10,10,2,-4,2,10],[-2,1,6,-10,-3,-2,8,-3,-1,-7,-7,-3,-10,9],[6,-9,-6,6,2,-4,-4,-1,4,-5,8,-8,-1,-4],[-9,-5,2,3,-8,10,5,-6,-10,3,-2,9,-2,-3],[-7,6,-1,10,8,-3,-4,-6,-5,-8,-1,9,9,3],[4,-6,4,6,4,-9,1,9,-3,4,9,-4,-3,4],[-8,5,5,-2,3,4,-4,-10,-5,10,-7,-7,-6,-7],[-4,3,9,4,9,-1,-4,2,8,-4,-4,-10,-1,-7],[7,-8,-6,5,-10,7,6,4,5,-1,9,-3,-2,-3],[-9,9,-6,-9,7,10,-4,9,-9,2,-8,-4,-8,1]],[[9,2,6,-7,10,7,-9,-7,5,3,-6,5,-7,4],[-7,7,8,-5,-1,-9,8,10,-4,-2,-10,3,9,-3],[-9,4,-1,2,-10,-6,-9,4,10,7,-9,-4,-2,-7],[7,1,-7,3,-6,7,-4,-9,-7,-10,-4,-2,-6,4],[-5,10,2,-9,-8,7,7,-10,-9,2,1,-5,-1,-8],[5,-4,4,2,7,5,2,-9,-9,10,7,4,-7,3],[-9,-4,4,5,-4,-3,10,8,3,-3,-6,10,4,-3],[6,9,-6,10,-3,-7,-3,1,10,5,7,-8,10,6],[4,7,5,3,-10,-1,-7,-3,-1,-6,-4,-8,9,-3],[2,3,1,5,-7,-7,-1,-2,-1,1,-1,-6,-7,7],[-8,5,10,-7,-7,6,1,10,6,-2,-1,10,9,-9],[8,-4,-4,8,6,-4,-8,-6,-8,10,-2,-10,5,-7],[5,3,-1,2,6,1,5,-3,-8,3,9,9,-4,-4]]], dtype = "uint64")#candidate|394|(11, 13, 14)|const|uint64
bop_395 = relay.not_equal(bop_372.astype('bool'), relay.reshape(const_394.astype('bool'), relay.shape_of(bop_372))) # shape=(11, 13, 14)
bop_398 = relay.logical_xor(bop_391.astype('uint16'), relay.reshape(bop_354.astype('uint16'), relay.shape_of(bop_391))) # shape=(11, 13, 14)
uop_403 = relay.acos(bop_388.astype('float32')) # shape=(11, 13, 14)
uop_406 = relay.atan(uop_403.astype('float32')) # shape=(11, 13, 14)
var_408 = relay.var("var_408", dtype = "float32", shape = (11, 13, 14))#candidate|408|(11, 13, 14)|var|float32
bop_409 = relay.less_equal(uop_403.astype('bool'), relay.reshape(var_408.astype('bool'), relay.shape_of(uop_403))) # shape=(11, 13, 14)
uop_413 = relay.log(uop_403.astype('float32')) # shape=(11, 13, 14)
bop_415 = relay.bitwise_xor(bop_409.astype('int64'), relay.reshape(uop_406.astype('int64'), relay.shape_of(bop_409))) # shape=(11, 13, 14)
uop_420 = relay.erf(uop_403.astype('float64')) # shape=(11, 13, 14)
func_193_call = mod.get_global_var('func_193')
func_196_call = mutated_mod.get_global_var('func_196')
const_423 = relay.const([-7.306646,1.985057,9.222835,9.494959,-6.993191,1.057904,-0.788058,-0.774317,2.293398,-8.796721,-4.851002,-4.558477,1.009689,6.686172,5.891749,1.968004,-3.062673,-4.475174,-9.955562,4.466777,-6.005900,-7.276298,2.802679,-0.999306,4.445093,8.569140,5.364606,5.696768,-3.202266,8.527802,-7.021625,4.351849,9.342431,-1.745374,-8.344377,8.063026,-6.414708,7.445157,-1.233757,-1.434246,4.657204,-0.299610,-6.035313,4.197008,-5.975770,-4.653801,5.644559,3.210378,5.325881,-2.991721,7.666248,-3.548565,-0.891179,-2.318131,9.681179,-9.440855,-1.707690,8.113190,8.260075,-8.333613,-0.601142,-3.594954,-5.313937,-9.556087,8.194517,4.009156,-9.981515,6.363154,-7.386698,-3.078498,-9.574999,-0.878249,0.599088,9.806151,-2.602161,-1.658889,-3.371341,-4.054171,-1.575576,-9.842884,-4.770800,5.066351,9.916905,9.183231,-5.788886,3.370152,-0.019374,8.858962,-7.014495,-8.340650,-5.901977,4.101405,2.283820,-6.006297,-6.928445,-4.689987,-4.128779,-4.852115,-9.800269,9.518281,0.878455,1.394831,-3.713813,3.067538,-5.065179,6.540264,-3.210030,5.635721,1.752934,9.179304,1.810096,-0.148323,6.085455,0.669811,-0.888366,-4.708906,-4.302032,1.021260,8.909399,1.029776,3.673754,-3.891122,2.442131,2.022711,8.329201,-0.630506,-7.540582,3.243325,1.250971,0.720600,5.391998,1.864939,-4.064339,9.368111,6.627045,2.872169,0.087822,-5.790360,8.816649,0.272757,9.841293,0.004307,-6.844787,2.200064,-7.430740,2.885536,6.551345,4.899475,-3.673039,2.688950,0.801161,-0.830463,-5.413974,9.400733,-0.718555,6.057679,-7.493822,-2.438829,0.522842,0.885557,-3.282740,6.257643,0.888309,3.820264,5.693025,-5.134710,6.807025,-5.499477,6.744523,-4.115132,-2.655037,3.759759,-9.553893,-5.277820,-8.182408,0.079167,-5.322686,-7.023655,7.048836,0.329799,-1.318539,9.635375,-0.373437,6.052456,9.666607,-0.033514,1.336159,9.750820,6.856489,9.426900,0.094394,-5.276490,-7.214260,0.564587,8.304948,-3.485801,-0.391922,9.820407,8.897557,5.675654,-5.676731,7.124882,3.695619,-1.993926,-2.645954,-1.646933,-7.981020,5.300107,5.940228,9.571546,-3.573682,-6.838908,6.842464,7.052397,4.012589,-0.783424,-3.799500,1.082109,-5.534872,-9.486911,-3.790006,-6.144951,-0.369161,8.522177,-7.008172,-4.334513,-9.380031,-0.466186,-5.848864,8.301211,-0.380338,-3.464379,0.908972,-9.038648,2.702257,-4.956590,-4.882488,-3.996164,-3.167208,-6.319420,-9.772555,9.343921,-3.002996,7.918055,-7.658115,-6.526195,-6.997195,6.419453,-3.601881,4.581081,1.677915,5.129531,-8.394065,-8.349564,2.734706,6.412820,7.939359,4.818611,-7.234799,-1.548396,8.898929,9.888649,8.716204,3.977946,5.149996,8.176715,-2.171803,-1.375186,8.941084,8.242469,5.414861,-0.320720,-3.993894,-5.479311,-5.042577,1.262249,3.384315,1.631557,9.681547,7.760115,1.802697,4.798821,3.645655,-0.262785,-6.350407,-5.355505,5.260750,-3.370638,-4.871632,-6.626087,-5.433683,-0.936111,3.926765,-4.622251,-8.801056,4.559646,2.284265,7.050143,-8.950536,0.551296,3.233803,-6.849689,-1.487794,-4.757827,-7.059140,-5.967004,-2.882171,-8.133461,-9.507982,0.740491,-8.821869,4.282337,0.459886,3.108361,-6.280406,2.365200,-5.158343,-6.304866,-0.210876,5.135345,-4.648628,4.857448,-4.743995,-0.148744,3.772061,1.903214,-3.792735,5.679799,9.574973,9.667863,2.167333,2.443881,-2.941868,-5.555975,8.359039,8.064465,4.508100,-0.140328,0.956628,0.674617,-9.947643,-6.288570,8.143424,4.871400,-5.782407,-3.399690,4.368009,2.383781,-6.902939,-5.873485,2.337785,0.055218,2.344048,-3.637660,-1.228685,3.233339,-7.225527,6.059784,4.040664,-5.064331,6.868953,1.010210,3.611803,-2.400339,-2.793997,0.890569,5.909197,4.273926,-8.799882,2.999071,0.164779,-9.093458,-2.383335,4.488346,-0.362245,-2.925966,-6.153031,-6.702084,-8.378605,7.560241,7.194785,5.506313,6.833618,0.197136,-7.908502,-0.297046,4.506752,-1.891712,-7.817000,3.278506,7.550841,-1.545570,9.232130,9.175207,-7.282501,4.119855,1.366287,-5.690320,1.054140,0.602310,-2.385493,4.162960,-3.106931,1.447922,3.614355,2.637114,-5.273823,-0.117311,-6.519402,-5.697899,5.713950,-0.736002,-2.364119,5.101404,9.100049,2.077689,8.980922,7.220390,-0.345780,-3.568351,-0.727016,3.538065,-3.399937,-3.018538,5.791178,5.365295,-3.359470,-0.556778,-5.671126,-2.153479,-6.839651,7.175543,-8.965274,5.288247,0.762605,-5.152039,4.785925,7.149989,-4.505329,-7.821634,-8.106674,-0.998148,9.373991,3.339481,-0.568662,8.259430,9.249717,-2.172436,-2.545334,2.434733,-2.720681,1.136263,7.103202,0.153179,-2.029938,6.825053,2.282601,-1.834795,-2.606658,-6.471367,6.869229,7.726438,-9.044421,1.706858,4.240867,-9.373502,-8.703582,1.344421,-8.090073,8.611894,-0.021694,6.323178,-3.008903,5.277684,1.006045,-2.537848,5.678364,-6.344959,2.774030,-5.993125,-6.215333,-8.533790,-4.606779,-8.394423,-7.171859,-6.473205,-6.851541,-8.820564,8.558269,-6.498936,4.714312,6.651708,-7.604771,-0.035042,4.479730,9.934083,-2.233546,8.076425,6.925045,1.798151,9.841917,4.619183,-1.368652,2.113648,2.869810,-2.294414,-3.555509,9.916603,4.832950,-6.071436,6.194263,-8.004164,-2.105235,-9.650446,9.437312,8.116382,1.460024,9.548819,6.106795,6.834584,-4.437451,9.106387,-4.263675,1.743675,6.530890,-7.426643,9.254816,-1.257210,-2.203618,-9.883386,-0.566464,6.215604,-9.767659,1.303216,5.260621,-2.409178,5.893518,-4.176001,-6.947153,5.937361,7.392416,-7.466967,0.776928,-1.583626,-8.052204,2.911057,4.002145,-5.925463,0.149134,4.390447,2.344525,-9.546719,2.801560,-6.170843,8.579403,9.071693,7.769761,0.598393,-5.473723,3.061147,-6.534818,-7.250097,4.050667,9.062591,-4.965413,3.116511,-1.226835,-2.009663,-0.028302,-8.142170,9.367609,-2.487610,5.192391,0.056637,-5.849377,-9.202904,2.883212,-3.239408,-9.967589,-6.811923,-5.783495,-7.552761,3.885674,-8.288798,0.526452,3.009954,3.469278,4.653736,-6.388307,-6.390967,3.272073,4.881085,9.564224,1.691324,-1.938182,3.877706,9.523794,5.459877,-6.839008,-7.513326,-4.384243,-9.508582,-2.342327,2.611600,-8.796902,4.620373,-0.496607,1.597019,-3.215554,8.551749,-1.589508,9.063266,-3.674747,-6.268894,-3.937036,-7.367254,9.704620,-6.832730,4.686564,-1.221358,-0.824147,6.498390,-5.334859,-4.589080,-2.463501,2.728232,-9.099508,-9.966272,-3.365231,-0.749059,-2.467214,1.702081,4.005422,1.403354,7.486661,3.937266,0.394759,1.938880,7.877069,-2.989764,1.757508,-8.940507,-7.380826,0.897701,0.251041,9.925210,-2.164926,8.400774,2.234332,-0.784686,-2.465712,-7.529516,2.577915,-5.849939,8.131386,-9.646063,-4.735395,5.791317,5.669186,8.595657,-8.283248,-5.990891,-8.289019,-4.047944,-0.410829,-3.198250,-8.032819,-3.004620,-5.908641,-7.007880,7.349779,0.940074,8.552360,-6.033647,3.976828,-3.880690,5.280711,-8.399671,-2.163073,8.360931,-0.369485,-5.788756,-4.686686,-5.311931,8.834641,-0.915556,1.184069,-7.911305,-0.177040,0.783328,1.305361,6.076399,0.711866,-6.563506,2.265036,-3.437021,7.037236,-4.281785,-5.056738,5.363659,-5.867120,-4.762841,2.742384,-9.587729,-8.891230,9.372467,9.113539,-5.486221,-8.949358,5.943493,-3.179297,6.469444,-6.359824,2.833635,-8.706987,-3.888131,-5.072813,-0.374678,8.026320,-1.641846,7.184526,8.392157,-9.043077,6.972290,-2.927611,-9.234473,-1.852442,5.659035,-9.893806,4.959998,5.686234,7.748414,9.099996,9.639089,-1.368703,-0.351802,9.514155,0.971480,1.475931,-9.212026,0.641304,-7.959277,2.523731,-0.039734,-0.747033,-9.634232,7.924221,2.010052,-4.156055,2.058300,-9.410187,-1.970864,-3.771834,-5.944929,-9.343282,5.470313,3.027741,2.806536,9.097903,-4.905702,-7.296201,2.940375,-2.835281,-1.410384,1.482040,-7.845896,0.577720,0.907095,-6.578489,0.443313,4.976141,-1.398675,-0.718860,0.863397,0.277055,8.668605,-6.041411,9.906875,3.733459,4.761950,9.347383,7.854448,-4.182863,-8.768858,-8.407969,1.569281,4.902116,-3.791801,-3.089464,1.248711,-8.170519,9.171111,-5.880384,9.187973,-7.290618,-9.902818,-2.542685,-8.622513,3.694180,1.143237,-0.688220,5.436852,-6.911008,7.824374,7.540962,-9.950682,5.906166,-0.582555,-9.925214,1.464225,7.106821,4.042360,7.849000,-7.037750,-9.237440,-2.340583,7.147599,-7.226171,-1.422383,-8.430147,6.152227,0.087237,-6.899597,-2.587418,9.349760,4.880046,3.467264,4.173619,-6.121209,6.045983,3.797894,8.392664,5.527200,1.429747,8.883708,8.023522,-0.111450,8.654302,6.010643,-1.702549,0.312118,7.829907,-2.222727,-9.662857,-5.956554,1.791341,9.819973,-9.723863,5.336358,-9.915791,0.309909,9.691942,-0.981165,-8.338129,-8.798235,5.122375,-3.842932,-2.092833,5.507842,6.073633,4.523324,4.542615,7.808443,1.666180,7.332981,1.496509,-4.574138,6.394465,5.783377,-4.635293,-4.430048,-3.508586,-8.663643,7.905577,8.094239,8.129722,3.231443,5.876441,9.679422,7.273323,0.953191,3.240660,6.650292,-2.164803,1.608784,-5.107126,-9.370409,-8.450058,-9.908696,-6.393009,1.951798,-7.595425,1.030869,5.116392,-3.166168,7.071984,-5.456491,0.222997,7.547491,-8.194913,-1.150861,-9.543517,4.601220,9.477097,-1.340964,5.623307,-6.500490,9.647993,-5.555201,-6.235635,4.888665,-6.918812,-7.718923,-2.163132,4.933560,-8.418963,8.239103,4.346932,-7.939192,-6.071410,-1.160987,-4.180493,6.570771,-4.905411,-8.494185,4.886140,5.794395,7.869779,7.909230,0.509668,1.064521,9.539093,3.750317,7.844935,0.458356,-5.535859,-7.789221,-5.687307,-3.323058,1.651388,8.284845,3.643432,-9.671027,7.557701,-1.394136,-5.146300,-7.744914,-4.733061,-2.508449,0.692234,-5.633334,-8.634670,-3.694370,-6.490368,6.590777,-5.937492,-7.125492,0.444341,-8.596095,3.477694,-2.292088,-9.791987,8.808446,-1.697082,2.929878,5.785797,7.181733,-1.217082,1.804559,6.073261,-2.611997,3.820714,8.486713,8.622819,8.437044,-6.413082,-2.799276,8.445022,6.184299,-8.041047,1.424155,-7.280706,7.901924,2.451893,-6.883538,4.899614,-7.960576,8.366852,-9.728735,7.909169,4.870279,4.951045,0.222983,5.622869,-5.749294,2.075154,-7.620018,-4.140828,-7.185625,-3.179626,-6.118422,1.934378,-4.459143,-6.768553,8.857598,9.151439,3.275772,-8.602002,4.034542,-2.282402,6.942486,4.103508,6.495819,5.321934,0.869658,-2.345874,-9.018150,-2.854781,5.119564,2.952773,3.184238,6.966214,6.871226,7.940004,-9.435008,-9.133196,7.924954,7.041020,1.812001,-7.236999,-0.729984,9.475242,-7.604529,1.926182,-1.364404,-8.298276,0.326850,2.904282,2.800883,3.462495,-4.659557,-4.670841,-5.108636,-4.736131,-1.012150,-8.111816,-8.387758,5.798261,-4.145888,-5.013915,4.771006,-2.174938,-7.035688,0.602280,-5.085308,8.997216,-6.855672,-2.078427,2.413602,5.521759,2.425501,-2.251805,8.976561,-1.841713,2.402898,-9.568397,2.714611,4.045271,-5.454589,7.387549,-6.335295,1.879147,-5.033283,1.201382,5.045859,-4.373699,-0.429872,-6.300977,-3.882175,2.877105,7.677176,1.193258,-1.752690,-5.098491,6.774446,4.077184,5.985016,6.264612,-1.462647,2.184943,1.138178,-2.426186,3.879953,6.769027,7.308094,3.457873,-8.986413,0.029631,4.041425,-4.451137,-2.022090,-7.030339,-1.738276,0.015801,-3.590754,-3.240623,-2.809565,-1.321415,0.275011,-0.090422,-4.782135,5.920005,-4.916722,-6.000314,9.750012,-8.049783,-1.051619,9.007348,-1.107687,-0.227586,4.456377,-6.825416,8.041690,7.464480,-8.083851,-1.200146,6.517191,-8.297057,-3.284204,-7.266950,6.094236,4.300668,7.994981,-5.445070,-4.535839,1.310553,-2.150220,7.785498,-9.701938,-4.411380,-4.786980,7.565137,3.715137,0.143552,-0.823661,3.810976,0.151735,-3.006610,7.036069,-7.063336,9.622311,6.445968,-2.725126,0.124725,-2.712680,5.596018,-1.857472,-7.931247,-0.566748,-7.509349,8.057013,-2.722340,-7.051227,-1.261805,-5.155374,5.807268,-0.588215,0.774357,-7.604721,6.964925,-0.204566,3.518300,3.648733,-4.580910,-7.203267,6.542211,-5.838692,-3.979075,-1.368321,-6.414343,0.787537,-0.725072,2.724768,-0.724531,-5.653105,-5.500006,0.744970,-4.850844,3.910438,-3.343386,6.722986,-6.878980,-4.864766,-1.933644,0.158270,2.086238,5.176608,-8.773495,5.330796,-6.048348,-4.816683,-3.244006,-9.022879,-8.600546,-0.835261,7.530573,-8.859315,5.048619,-8.900133,0.186196,0.821306,6.848489,-9.080904,8.094746,-8.518280,-6.296632,-0.085432,-9.861662,4.592573,-6.047903,-2.855438,8.518888,9.894237,6.862789,-2.762270,7.234983,3.211486,-7.111074,-5.771545,4.263641,3.275508,2.756469,-9.346321,9.173017,3.038043,4.061458,0.341434,-3.419919,-7.560579,0.720720,0.375557,-7.455535,9.887577,-1.491309,-6.519754,-8.873307,9.559381,6.625609,-7.949622,1.406960,-2.501217,2.008043,9.254213,9.963893,0.687620,1.752333,4.984997,9.198578,-1.104949,4.283151,5.671086,1.682640,6.243475,-6.652489,5.915813,1.148738,5.538312,1.064733,5.915543,-7.951881,8.487823,1.175332,3.685836,5.215768,-7.654322,-0.832677,1.595420,5.401147,-1.044197,-5.561015,6.064376,3.589855,-7.228961,-3.607020,1.417303,-1.540635,-2.501309,-8.343885,-6.506627,9.625539,-7.812503,-7.142534,0.947580,-1.034981,4.397727,3.287452,2.100573,0.038369,-4.167268,8.671536,-5.344194,-9.340445,8.821298,-3.846278,6.167927,-7.251330,1.822293,4.177693,-7.932567,-7.873660,-9.587335,7.597838,8.728082,8.530079,-6.912643,0.665920,-5.099821,5.212270,-0.632578,7.308436,5.030006,2.444336,-5.507006,-7.548785,9.531753,-2.290768,-4.417546,2.446352,1.808698,2.143565,7.899580,-3.080057,2.374640,0.081993,-6.908218,4.879113,-0.303844,-6.483366,0.908464,-8.670089,-3.034079,-8.228286,-3.340257,-7.948962,-8.275939,7.608052,-6.323955,7.045999,2.099544,-9.759404,9.175437,7.434116,-9.342082,-9.790947,-8.109013,-5.865055,5.036268,-9.441152,-5.408859,4.893025,-7.617982,-0.876810,5.117675,-5.259994,-2.272924,-4.667488,-0.873367,-6.582086,8.582193,-2.748279,3.996255,-7.503988,4.687690,-9.143182,3.965192,-4.883501,-8.046862,5.134760,-8.863569,-8.305610,-1.152798,-6.307022,-9.850416,7.686169,9.203979,-9.024543,4.088954,-5.199517,2.618564,-6.489586,-3.352573,-5.396253,-7.894541,-4.662793,-4.968626,0.716898,1.155699,3.088746,-3.396674,-2.317064,0.714941,-7.054403,5.570719,3.721218,9.014944,-5.596844,2.874585,-3.986362,-2.153362,-0.922695,5.406219,5.596718,-0.856440,8.524373,5.567989,-7.093615,-1.588637,7.230262,6.892005,-2.979407,5.312420,3.181758,9.536929,-1.787064,-5.515094,-6.910844,-8.330006,9.224131,6.949868,-5.781747,-3.184170,8.101220,1.262729,-1.095846,3.842130,-6.085913,4.327207,6.253496,8.011929,-7.185451,1.863142,-6.418229,-9.077953,-3.069551,-7.588387,3.196892,0.067407,0.739113,8.768757,-9.343408,-5.761327,6.011909,-2.640596,-9.550544,-5.328801,4.829993,-0.465963,-4.141211,0.346989,-0.857885,8.858676,-4.761895,-6.744709,4.016669,-6.391675,-9.177270,-7.003473,-8.536434,0.220756,4.284738,-5.913323,8.762255,-3.891816,4.853808,-1.050021,4.909518,4.826037,-6.999887,9.824147,-6.128443,2.609157,-7.863595,-7.048454,-3.829944,9.089079,-4.012937,9.615657,-9.541316,4.757865,4.200136,7.310615,4.205711,1.917601,-8.788909,7.802293,-5.552270,-9.562419,1.448625,7.718959,-0.001334,9.350896,-7.575696,-6.382528,-6.653828,1.267603,8.952362,-0.187106,5.966292,-4.170870,-2.062158,-7.601714,5.635725,1.156857,-4.284837,-1.032614,5.422877,0.869065,-9.102234,5.145265,2.911976,8.330897,2.381449,8.942547,8.508627,5.870565,7.642854,-4.675427,-0.002440,4.001306,-2.501163,0.341136,0.086083,-1.734722,-6.687393,-8.617489,-9.231098], dtype = "float64")#candidate|423|(1536,)|const|float64
call_422 = relay.TupleGetItem(func_193_call(relay.reshape(var_352.astype('float64'), []), relay.reshape(const_423.astype('float64'), [16, 16, 6]), ), 0)
call_424 = relay.TupleGetItem(func_196_call(relay.reshape(var_352.astype('float64'), []), relay.reshape(const_423.astype('float64'), [16, 16, 6]), ), 0)
bop_425 = relay.power(bop_391.astype('float64'), relay.reshape(var_408.astype('float64'), relay.shape_of(bop_391))) # shape=(11, 13, 14)
uop_429 = relay.log(bop_409.astype('float64')) # shape=(11, 13, 14)
uop_431 = relay.sqrt(bop_425.astype('float32')) # shape=(11, 13, 14)
uop_433 = relay.sin(uop_420.astype('float32')) # shape=(11, 13, 14)
bop_435 = relay.greater(uop_429.astype('bool'), relay.reshape(bop_415.astype('bool'), relay.shape_of(uop_429))) # shape=(11, 13, 14)
bop_438 = relay.right_shift(uop_406.astype('int16'), relay.reshape(bop_395.astype('int16'), relay.shape_of(uop_406))) # shape=(11, 13, 14)
bop_441 = relay.left_shift(uop_433.astype('int8'), relay.reshape(bop_354.astype('int8'), relay.shape_of(uop_433))) # shape=(11, 13, 14)
bop_445 = relay.logical_xor(uop_420.astype('uint8'), relay.reshape(uop_403.astype('uint8'), relay.shape_of(uop_420))) # shape=(11, 13, 14)
bop_448 = relay.logical_or(uop_433.astype('bool'), relay.reshape(uop_429.astype('bool'), relay.shape_of(uop_433))) # shape=(11, 13, 14)
uop_451 = relay.log2(uop_433.astype('float64')) # shape=(11, 13, 14)
var_453 = relay.var("var_453", dtype = "float64", shape = (11, 13, 14))#candidate|453|(11, 13, 14)|var|float64
bop_454 = relay.multiply(uop_451.astype('int32'), relay.reshape(var_453.astype('int32'), relay.shape_of(uop_451))) # shape=(11, 13, 14)
bop_461 = relay.logical_xor(bop_438.astype('int32'), relay.reshape(bop_454.astype('int32'), relay.shape_of(bop_438))) # shape=(11, 13, 14)
bop_464 = relay.maximum(bop_461.astype('int32'), relay.reshape(var_453.astype('int32'), relay.shape_of(bop_461))) # shape=(11, 13, 14)
output = relay.Tuple([call_361,const_362,bop_398,uop_413,call_422,const_423,uop_431,bop_435,bop_441,bop_445,bop_448,bop_464,])
output2 = relay.Tuple([call_363,const_362,bop_398,uop_413,call_424,const_423,uop_431,bop_435,bop_441,bop_445,bop_448,bop_464,])
func_467 = relay.Function([var_352,var_353,var_380,var_408,var_453,], output)
mod['func_467'] = func_467
mod = relay.transform.InferType()(mod)
mutated_mod['func_467'] = func_467
mutated_mod = relay.transform.InferType()(mutated_mod)
func_467_call = mutated_mod.get_global_var('func_467')
var_469 = relay.var("var_469", dtype = "float64", shape = ())#candidate|469|()|var|float64
var_470 = relay.var("var_470", dtype = "float64", shape = (11, 13, 14))#candidate|470|(11, 13, 14)|var|float64
var_471 = relay.var("var_471", dtype = "float64", shape = (11, 13, 14))#candidate|471|(11, 13, 14)|var|float64
var_472 = relay.var("var_472", dtype = "float32", shape = (11, 13, 14))#candidate|472|(11, 13, 14)|var|float32
var_473 = relay.var("var_473", dtype = "float64", shape = (11, 13, 14))#candidate|473|(11, 13, 14)|var|float64
call_468 = func_467_call(var_469,var_470,var_471,var_472,var_473,)
output = call_468
func_474 = relay.Function([var_469,var_470,var_471,var_472,var_473,], output)
mutated_mod['func_474'] = func_474
mutated_mod = relay.transform.InferType()(mutated_mod)
var_485 = relay.var("var_485", dtype = "uint64", shape = (15, 1))#candidate|485|(15, 1)|var|uint64
var_486 = relay.var("var_486", dtype = "uint64", shape = (15, 16))#candidate|486|(15, 16)|var|uint64
bop_487 = relay.greater(var_485.astype('bool'), var_486.astype('bool')) # shape=(15, 16)
bop_490 = relay.equal(bop_487.astype('bool'), var_485.astype('bool')) # shape=(15, 16)
output = relay.Tuple([bop_490,])
output2 = relay.Tuple([bop_490,])
func_493 = relay.Function([var_485,var_486,], output)
mod['func_493'] = func_493
mod = relay.transform.InferType()(mod)
mutated_mod['func_493'] = func_493
mutated_mod = relay.transform.InferType()(mutated_mod)
func_493_call = mutated_mod.get_global_var('func_493')
var_495 = relay.var("var_495", dtype = "uint64", shape = (15, 1))#candidate|495|(15, 1)|var|uint64
var_496 = relay.var("var_496", dtype = "uint64", shape = (15, 16))#candidate|496|(15, 16)|var|uint64
call_494 = func_493_call(var_495,var_496,)
output = call_494
func_497 = relay.Function([var_495,var_496,], output)
mutated_mod['func_497'] = func_497
mutated_mod = relay.transform.InferType()(mutated_mod)
var_505 = relay.var("var_505", dtype = "float64", shape = (7, 6, 4))#candidate|505|(7, 6, 4)|var|float64
uop_506 = relay.acos(var_505.astype('float64')) # shape=(7, 6, 4)
var_509 = relay.var("var_509", dtype = "float64", shape = (7, 6, 4))#candidate|509|(7, 6, 4)|var|float64
bop_510 = relay.greater(uop_506.astype('bool'), relay.reshape(var_509.astype('bool'), relay.shape_of(uop_506))) # shape=(7, 6, 4)
var_513 = relay.var("var_513", dtype = "bool", shape = (7, 6, 4))#candidate|513|(7, 6, 4)|var|bool
bop_514 = relay.not_equal(bop_510.astype('bool'), relay.reshape(var_513.astype('bool'), relay.shape_of(bop_510))) # shape=(7, 6, 4)
var_517 = relay.var("var_517", dtype = "bool", shape = (7, 6, 4))#candidate|517|(7, 6, 4)|var|bool
bop_518 = relay.right_shift(bop_510.astype('int16'), relay.reshape(var_517.astype('int16'), relay.shape_of(bop_510))) # shape=(7, 6, 4)
uop_521 = relay.log2(uop_506.astype('float64')) # shape=(7, 6, 4)
var_524 = relay.var("var_524", dtype = "float64", shape = (7, 6, 4))#candidate|524|(7, 6, 4)|var|float64
bop_525 = relay.divide(uop_521.astype('float32'), relay.reshape(var_524.astype('float32'), relay.shape_of(uop_521))) # shape=(7, 6, 4)
var_528 = relay.var("var_528", dtype = "int16", shape = (7, 6, 4))#candidate|528|(7, 6, 4)|var|int16
bop_529 = relay.bitwise_or(bop_518.astype('int8'), relay.reshape(var_528.astype('int8'), relay.shape_of(bop_518))) # shape=(7, 6, 4)
bop_532 = relay.right_shift(uop_506.astype('int32'), relay.reshape(uop_521.astype('int32'), relay.shape_of(uop_506))) # shape=(7, 6, 4)
func_278_call = mod.get_global_var('func_278')
func_283_call = mutated_mod.get_global_var('func_283')
var_536 = relay.var("var_536", dtype = "int8", shape = ())#candidate|536|()|var|int8
const_537 = relay.const([[-9,10,9,6,1,-5,2,-10,-10,-2,-1,-3,-9,5,-4,1,9,9,-3,7,-5,-3,-6,9,-6,-10,-6,-10,-3,4,5,1,7,1,-7,5,1,-2,5,-6,2,7,-10,-3,-3,10,-4,-1,-5,2,1,5,-7,2,8,-10,7,-8,-6,9,10,9,-2,-5,-3,8,-6,9,-10,5,10,-8,-7,-3,9,-4,1,3,2,-10,-6,-10,-1,-6,-1,-1,-8,-7,7,-8,3,-3,3,-8,5,1,-6,2,1,10,-8,-2,-10,-1,-10,3,-9,8,4,9,3,9,-1,9,-2,2,8,8,3,-4,6,-4,6,9,7,-9,7,2,-2,10,9,-4,7,6,-9,3,-10,4,-1,5,-10,10,2,-3,-6,6,6,2,-10,-3,9,-8,-5,4,-3,5,1,9,1,8,9,-1,-6,8,1,6,-9,8,5,1,-9,1,6,-5,-6,-4,-1,-9,10,-2,9,1,-2,-4,-1,7,3,-1,-2,6,1,2,-5,-6,8,-5,6,7,-7,7,5,-7,3,-7,-6,2,3,9,5,-4,-5,-2,-7,1,9,3,3,4,9,9,-4,-3,5,6,7,-2,9,5,2,-1,5,7,-3,4,-4,-7,5,7,10,-9,3,3,-7,9,6,4,-5,1,-2,10,-9,-4,5,-6,5,5,-1,10,-7,-9,1,6,4,4,2,2,10,-8,7,3,-1,10,9,10,-10,-10,-2,-9,-4,2,8,1,-10,-7,5,1,-10,-10,10,6,-8,-3,3,-9,-2,6,7,-9,8,-5,6,1,-6,5,-8,8,-7,10,-10,8,-2,-3,2,7,8,3,10,9,4,4,5,9,10,2,10,3,6,2,-7,-8,-3,-8,6,10,1,1,5,-8,3,6,-9,7,4,3,-8,-6,-5,-5,2,-2,-1,-9,-5,3,6,-1,-8,-10,8,4,6,9,2,4,-3,-7,9,1,2,4,-5,2,-5,-8,6,1,9,5,5,-7,4,-3,9,-1,-9,-8,-1,-2,3,-1,9,10,1,-1,-5,-7],[4,3,3,6,-8,10,5,6,-9,6,9,8,-1,8,-1,4,4,-9,-1,1,-1,9,-1,5,-3,10,7,2,10,4,7,-5,7,-6,-2,10,-7,1,-5,2,5,8,1,-10,1,10,-5,-9,-2,-3,-3,8,-1,10,5,-3,-3,4,2,4,-1,-3,1,9,6,-8,6,-1,-8,2,-4,-6,6,10,8,-3,-8,7,8,-5,-9,-5,2,1,-8,3,-8,8,3,-5,-2,1,-7,-3,4,1,-10,6,4,-2,-10,4,-6,-3,-10,7,7,6,-6,-10,7,-4,10,1,-7,6,-7,-7,-3,-9,9,7,-6,3,-9,2,4,5,6,-10,8,-10,6,-8,-8,-10,-5,-6,-9,4,-1,6,-4,1,-4,3,-7,-6,2,10,3,10,8,-10,4,6,2,-3,10,8,-5,7,6,4,9,10,5,-9,-4,1,5,-5,9,7,10,-5,-6,6,6,-2,4,-7,9,-4,-7,3,4,2,6,1,3,-2,8,3,-9,-9,4,-4,3,8,-4,-5,10,2,-7,3,-8,-10,-4,2,-7,-6,8,4,9,3,-4,4,6,-2,-8,4,10,4,-7,7,9,5,-3,-9,2,10,2,1,-1,-2,8,6,-10,-1,-9,2,-10,-5,7,-9,-10,6,4,-2,10,5,2,5,-4,-10,3,-2,9,9,-3,-5,-7,5,-8,-8,10,8,5,-3,-10,-3,-7,7,4,1,4,10,-9,-5,-1,7,6,-5,-1,-9,3,3,1,-5,-7,4,-4,-5,1,-10,-2,-8,-4,-9,-1,-5,2,-4,9,-8,6,10,-8,3,-4,4,1,6,4,10,6,2,5,-1,-3,-3,-2,-9,9,-2,6,-10,-9,-4,-4,10,2,-7,8,-3,8,-10,-2,-3,-4,3,10,-8,-4,3,7,-9,5,-7,-6,4,10,-8,-6,3,-5,-9,-2,5,-7,5,4,-6,1,-2,6,5,-1,-8,2,-6,-8,4,-9,-5,9,-2,-3,2,2,3,1,3,8,8,3,-1,-6,-10,-3,-3,4,-3,-6,2],[-8,-7,10,-10,3,2,-1,-6,7,-6,-10,3,6,2,-1,-1,9,10,8,-10,8,-9,-7,10,3,-4,-4,-9,-3,4,5,-4,1,-4,4,2,-9,4,7,10,1,3,1,8,2,7,-5,-4,7,-9,-5,6,3,-10,6,-10,-3,2,4,-7,2,-6,7,5,-7,6,9,-5,-1,-5,-6,2,8,5,-4,10,8,-2,5,10,4,-5,-7,-7,9,5,-7,-7,3,-8,-4,-2,4,7,3,-5,-3,-2,-3,1,1,7,7,2,8,8,8,-6,3,-4,-3,5,-9,8,-4,-4,-7,2,7,-3,-5,8,-10,-10,8,-9,-2,6,-1,-5,-5,1,-4,-5,8,5,-10,1,-7,-5,4,3,10,9,-6,-6,5,-1,10,-9,8,6,-9,8,-5,-1,6,-6,5,-6,2,-10,-1,8,-10,2,3,6,4,-7,6,9,-2,-8,2,8,8,-5,-2,2,1,8,1,-7,-7,-5,4,4,-9,-3,-6,7,2,5,-6,-3,-1,1,6,-7,4,-5,6,-4,-10,9,1,-2,-9,-4,3,2,-10,-6,-2,-9,-6,5,-2,8,8,-1,-3,-10,9,-7,-1,4,3,6,-2,-4,-9,-10,-9,-6,6,-6,10,3,-9,-2,1,-2,8,2,4,10,-4,-6,-3,-2,10,9,-3,9,-5,2,1,-10,3,10,-7,-3,-3,6,3,-4,-3,3,7,7,7,8,5,-4,10,-8,-6,-8,1,-4,1,7,3,9,4,-2,9,-6,7,-3,-5,6,3,10,-7,8,4,-3,7,-9,-1,-1,-2,-3,8,8,10,-7,-7,6,-1,5,2,-4,-9,10,-3,-10,-8,6,10,3,7,4,-7,9,7,-5,1,7,-10,1,6,8,4,-3,-7,6,-4,-9,1,1,1,6,-3,3,-8,7,-4,1,1,2,-8,-4,-9,5,1,5,-10,-4,-3,-6,-1,-6,-2,-3,-1,-2,5,3,-7,1,6,9,-8,9,-2,-2,-2,8,-7,8,7,-7,4,-4,10,-10,-3,2,-4,3,-10,8]], dtype = "int8")#candidate|537|(3, 396)|const|int8
call_535 = relay.TupleGetItem(func_278_call(relay.reshape(var_536.astype('int8'), []), relay.reshape(const_537.astype('int8'), [11, 12, 9]), relay.reshape(const_537.astype('int8'), [11, 12, 9]), relay.reshape(const_537.astype('bool'), [11, 12, 9]), ), 1)
call_538 = relay.TupleGetItem(func_283_call(relay.reshape(var_536.astype('int8'), []), relay.reshape(const_537.astype('int8'), [11, 12, 9]), relay.reshape(const_537.astype('int8'), [11, 12, 9]), relay.reshape(const_537.astype('bool'), [11, 12, 9]), ), 1)
bop_540 = relay.left_shift(bop_510.astype('uint16'), relay.reshape(uop_506.astype('uint16'), relay.shape_of(bop_510))) # shape=(7, 6, 4)
output = relay.Tuple([bop_514,bop_525,bop_529,bop_532,call_535,var_536,const_537,bop_540,])
output2 = relay.Tuple([bop_514,bop_525,bop_529,bop_532,call_538,var_536,const_537,bop_540,])
func_543 = relay.Function([var_505,var_509,var_513,var_517,var_524,var_528,var_536,], output)
mod['func_543'] = func_543
mod = relay.transform.InferType()(mod)
mutated_mod['func_543'] = func_543
mutated_mod = relay.transform.InferType()(mutated_mod)
func_543_call = mutated_mod.get_global_var('func_543')
var_545 = relay.var("var_545", dtype = "float64", shape = (7, 6, 4))#candidate|545|(7, 6, 4)|var|float64
var_546 = relay.var("var_546", dtype = "float64", shape = (7, 6, 4))#candidate|546|(7, 6, 4)|var|float64
var_547 = relay.var("var_547", dtype = "bool", shape = (7, 6, 4))#candidate|547|(7, 6, 4)|var|bool
var_548 = relay.var("var_548", dtype = "bool", shape = (7, 6, 4))#candidate|548|(7, 6, 4)|var|bool
var_549 = relay.var("var_549", dtype = "float64", shape = (7, 6, 4))#candidate|549|(7, 6, 4)|var|float64
var_550 = relay.var("var_550", dtype = "int16", shape = (7, 6, 4))#candidate|550|(7, 6, 4)|var|int16
var_551 = relay.var("var_551", dtype = "int8", shape = ())#candidate|551|()|var|int8
call_544 = func_543_call(var_545,var_546,var_547,var_548,var_549,var_550,var_551,)
output = call_544
func_552 = relay.Function([var_545,var_546,var_547,var_548,var_549,var_550,var_551,], output)
mutated_mod['func_552'] = func_552
mutated_mod = relay.transform.InferType()(mutated_mod)
var_578 = relay.var("var_578", dtype = "uint16", shape = (4,))#candidate|578|(4,)|var|uint16
var_579 = relay.var("var_579", dtype = "uint16", shape = (4,))#candidate|579|(4,)|var|uint16
bop_580 = relay.right_shift(var_578.astype('uint16'), relay.reshape(var_579.astype('uint16'), relay.shape_of(var_578))) # shape=(4,)
output = relay.Tuple([bop_580,])
output2 = relay.Tuple([bop_580,])
func_586 = relay.Function([var_578,var_579,], output)
mod['func_586'] = func_586
mod = relay.transform.InferType()(mod)
var_587 = relay.var("var_587", dtype = "uint16", shape = (4,))#candidate|587|(4,)|var|uint16
var_588 = relay.var("var_588", dtype = "uint16", shape = (4,))#candidate|588|(4,)|var|uint16
output = func_586(var_587,var_588,)
func_589 = relay.Function([var_587,var_588,], output)
mutated_mod['func_589'] = func_589
mutated_mod = relay.transform.InferType()(mutated_mod)
var_610 = relay.var("var_610", dtype = "int16", shape = (9, 11, 7))#candidate|610|(9, 11, 7)|var|int16
var_611 = relay.var("var_611", dtype = "int16", shape = (9, 11, 7))#candidate|611|(9, 11, 7)|var|int16
bop_612 = relay.bitwise_xor(var_610.astype('int16'), relay.reshape(var_611.astype('int16'), relay.shape_of(var_610))) # shape=(9, 11, 7)
bop_624 = relay.greater(bop_612.astype('bool'), relay.reshape(var_611.astype('bool'), relay.shape_of(bop_612))) # shape=(9, 11, 7)
func_193_call = mod.get_global_var('func_193')
func_196_call = mutated_mod.get_global_var('func_196')
var_629 = relay.var("var_629", dtype = "float64", shape = ())#candidate|629|()|var|float64
const_630 = relay.const([-2.704423,0.730693,-5.698281,5.860772,-3.133325,-5.891768,-4.126940,-2.358002,-5.308935,3.841067,-8.366089,-1.149454,2.243524,-4.678738,-8.881781,-6.802630,8.806520,0.788581,2.679428,-3.449364,8.529873,6.589797,-1.635633,-8.920616,4.478799,-9.501327,8.511840,3.177013,9.548016,0.058300,-5.766219,-6.500138,0.580339,2.146419,-5.552132,-8.495164,-7.712468,6.426591,8.565298,-9.340178,0.818731,-9.349157,0.357536,9.479742,8.002102,7.244344,1.324485,4.689094,1.240542,4.845923,5.270397,9.345121,8.178058,-0.668326,2.791298,-5.010292,2.649247,6.267363,-2.689921,0.315540,-4.195275,9.269187,3.568353,-1.903701,-0.382154,-1.197150,-5.953217,7.256069,9.997691,-1.093202,-2.200207,9.667961,-4.183259,9.010765,-2.628008,-4.027645,4.839043,-9.053189,9.594997,5.395015,-1.498991,0.027878,6.720306,1.355500,-1.538115,8.373899,-0.128730,0.865112,-7.757023,6.599312,1.277806,6.701341,-9.029349,1.644971,-4.627975,9.818899,3.477608,2.890205,5.621450,8.941467,8.181334,7.032019,5.661889,-1.062375,1.201064,-8.191698,5.336846,4.905727,4.639603,3.485915,4.946750,6.648949,3.576054,0.651811,2.486513,5.650670,-1.435877,-6.400649,0.902579,0.278582,-0.718977,2.938641,4.198294,3.309356,-1.858170,-2.321248,2.322752,-1.028424,2.775179,-4.017837,-0.708382,8.859479,-4.395100,-5.022888,-7.158464,-6.252659,-5.147165,-7.934752,-4.814429,-2.363733,7.203168,-1.581333,-0.923375,1.671333,-8.618194,-2.198960,1.491683,3.450147,1.964797,5.856992,7.777399,3.068997,-6.133773,8.402488,3.607639,3.640325,4.169962,-7.660824,-7.491579,3.781027,9.438002,1.532881,2.761761,-3.137208,-8.299690,-7.368805,3.399391,8.876059,8.836421,-2.290024,5.510680,0.746298,2.245050,-1.279730,-1.111048,-1.119478,-0.973437,-8.823192,0.361646,-5.750760,5.071944,6.573269,-2.680876,-7.158454,-9.937381,7.656706,-4.243538,-5.718942,-9.643631,2.982625,-3.553174,-1.090295,9.128870,-3.667524,7.947711,-2.333981,3.668668,9.992768,8.791256,2.809493,-0.186500,1.136879,-0.037549,-4.845161,-4.480185,8.147888,3.492262,4.010288,-7.691654,2.071720,0.378110,-4.919484,-4.407896,-2.004226,8.739455,1.841212,-9.471798,-2.034613,-6.488535,0.239316,-1.984891,9.597248,-7.779508,-7.361083,-0.068935,-0.487686,-8.549131,-3.964330,-1.774047,-9.586379,-2.821985,0.276385,-4.301051,3.803811,-4.569483,3.415496,9.423524,8.587473,-9.326898,5.406672,4.388993,-5.755746,-0.037345,-6.604375,5.422268,4.323199,-8.122466,9.867871,-2.254529,5.297897,3.838630,-2.760715,9.160812,5.149523,2.638808,-6.985524,-3.581266,-8.769026,4.127175,-3.488908,3.151168,2.165178,-8.253408,-5.876058,6.328157,-1.693420,1.901313,-5.133671,-9.762614,-5.064841,-5.658693,-2.532397,6.338790,8.689954,-0.681927,1.139065,6.678741,9.968481,2.346182,3.874222,-6.306517,-9.850983,-8.020400,-8.332847,-8.104197,-8.335834,-8.799695,6.955170,-2.758529,-6.124374,-3.100940,-0.418581,-6.420060,-5.225247,-3.384387,5.462635,6.573551,-5.605813,-3.165964,-7.986199,2.375501,7.778648,7.946841,0.572637,7.386427,-3.622151,1.265291,-1.985351,5.776922,-0.500130,-8.281554,-4.189427,1.048121,1.676701,0.672623,-3.866936,-2.661550,-4.344745,-0.885391,5.879956,-2.175257,-9.661255,3.908602,2.553368,4.651062,-5.665457,7.334221,9.711085,6.828440,-3.395714,-3.822143,4.953485,-3.633160,-1.950725,2.723606,1.976213,-4.027904,7.632770,-4.084377,-7.582654,-1.786333,2.799916,2.433161,-7.369511,0.858439,6.511375,4.260773,-2.602535,8.758770,6.371429,7.407108,-9.113590,-1.997497,9.633818,-4.621399,-6.615067,-0.157476,0.404375,-2.602594,-6.718048,-0.447518,3.115744,-8.043602,-3.528375,-6.833326,-4.865855,-8.596219,6.213502,-7.886180,6.751427,-2.534614,-9.512565,2.792756,-4.323856,6.631006,1.391396,6.758965,-3.906935,-9.705562,2.282796,-1.306097,-7.720624,-8.961254,1.926567,-1.116005,5.353199,-0.857124,5.729882,1.682495,6.426380,-0.606892,8.219008,4.707469,7.805574,-2.664541,-2.109052,-5.299646,5.359442,1.369104,-2.897891,3.079247,-0.888998,1.227038,9.705806,-8.925345,3.823940,8.727488,-4.118758,-6.835354,-2.223100,-0.927327,0.765171,-0.176325,6.346682,5.506022,4.395068,6.900281,-8.256321,-8.791576,-2.197942,-9.078737,9.191519,-4.517194,-1.786635,-7.125668,0.880213,-8.776747,9.587152,1.845254,-5.250948,-9.226078,0.223676,1.804043,-3.152578,9.942233,-0.736212,2.444265,1.772777,2.389138,-6.138765,-1.442736,-4.978978,7.355912,2.891860,-2.949719,4.593952,-1.711185,1.340161,6.273499,7.817181,-7.595967,-8.420181,2.992823,2.889361,-0.574545,-7.800855,9.752481,7.041695,8.060017,2.889557,-3.118017,-9.939220,7.433682,-9.069056,-6.095481,2.185047,-9.729817,-9.562128,7.139074,-6.174948,3.174823,-5.809423,-5.801272,1.642353,1.477651,2.140295,-7.906608,-7.170429,8.631171,-7.412723,-0.265354,-0.424437,4.023513,-0.230649,-5.794563,-4.541923,-9.995179,-6.169152,-4.813092,-1.731134,-1.085154,1.690771,6.095091,-2.241492,6.676659,-4.403948,-2.301772,-9.987988,2.503117,-6.743980,9.071742,-0.079573,-8.026024,-1.221657,-6.841457,-4.343259,5.741447,3.305751,2.438106,0.190617,-5.354447,-5.322610,0.537463,6.816285,5.418862,-7.976257,-1.297302,-5.940928,-2.849038,-7.063993,5.808236,5.773440,-2.852807,-4.221904,7.770834,-5.364450,5.171311,-8.942788,1.942490,-7.008584,-1.775103,-7.967431,4.480218,1.875501,8.664522,-7.452963,-4.529397,6.930178,1.413788,-0.821359,-8.229445,-2.409876,9.373249,-2.523177,-5.010278,8.170222,5.524465,-1.336997,7.505153,-7.208546,0.811204,3.762245,9.406276,-4.232871,-4.365254,7.859246,-9.924013,6.319214,-9.531226,-4.112390,-1.013552,9.152674,6.854098,-5.800014,1.368860,-1.148720,7.229064,-0.333220,-9.543021,4.911640,7.214827,4.749917,8.766830,7.362665,-9.715811,-4.999087,-6.901500,8.529245,3.516264,-1.401904,-3.124814,5.183104,-9.817629,-0.585956,6.942203,-5.937604,-0.008805,-7.166076,-7.621793,-9.849982,7.831294,0.364009,-7.065169,-1.455176,-7.866032,0.494978,0.137094,-6.194415,-1.144064,-3.009803,6.837192,1.184518,6.721458,5.240745,5.365978,-9.139954,-8.370287,-7.494863,-9.558224,0.465509,0.629901,-3.555529,2.297239,9.706759,3.600105,3.746495,-7.419730,2.536416,-3.981723,2.024236,-6.342442,7.768960,7.915459,9.992186,-8.963851,-1.612288,6.207381,-0.941039,3.546121,1.258225,9.275185,8.362587,9.188978,8.279213,3.611816,5.380767,4.677182,4.601113,1.038847,-4.476151,1.153231,3.723747,6.081848,5.937478,9.423155,-0.183090,-3.817178,-7.270123,-7.525882,2.967407,-8.594084,4.940748,5.587476,-2.840071,9.504273,-9.667042,1.144212,-5.348224,8.817332,-0.583043,-2.571694,-6.345901,-2.157930,-5.491385,-2.202005,4.485195,-9.703684,-3.898431,7.551647,-6.536835,-9.984385,4.199472,3.795088,-6.815065,9.544241,8.827315,4.012531,-9.124544,1.099900,-5.173063,4.844165,-0.262522,-4.918157,4.001630,-0.920748,0.401195,1.179798,-2.644592,-1.131814,2.975916,6.606587,2.626876,-2.474042,7.311735,-3.646339,-8.644368,6.810754,0.122290,3.821741,2.916482,8.873792,-1.725158,2.941392,9.575692,-2.508177,4.035294,1.829850,-1.465942,5.775055,7.825870,-3.135207,6.414740,0.303417,1.085522,8.285565,-7.789453,2.299479,3.793731,6.824972,-8.698492,-9.099297,-9.433890,-9.538057,5.609667,-6.447917,2.150976,-8.027443,-7.144059,-9.401072,2.266712,-7.206816,-6.801152,-8.236771,-4.352065,-9.978703,7.289373,-7.094101,-7.303487,5.060169,-3.007946,7.129951,-1.261453,-5.720002,1.873531,-0.090738,5.161660,-5.498075,8.917193,8.498605,-0.080622,-2.674056,-0.362632,6.489201,-7.090202,7.600593,-3.798762,-6.449061,-6.961060,9.665301,8.607570,-6.465312,-5.478771,-4.948320,-4.062333,4.554991,6.148308,-8.357107,6.976235,5.483944,-1.754473,-5.436533,5.732982,8.268856,-5.800800,8.685044,8.789260,-7.728652,-1.692678,9.630564,-9.746854,9.679909,-4.506208,-0.907469,-0.765794,0.384122,-4.948357,6.808919,8.870372,9.015727,-8.285773,4.088247,4.141306,7.748371,6.635360,-7.989742,-8.811149,8.989537,8.948030,-7.964050,9.017695,8.395062,1.277416,1.042319,3.439383,-5.171259,2.852930,8.449899,2.185369,-6.864990,9.681906,3.798973,2.163368,0.193131,-0.491116,-7.926171,8.989228,2.222805,-1.578717,2.771624,8.662069,6.504609,-8.395337,0.504640,-8.458637,-0.908887,-6.517583,3.331645,-0.173387,8.555275,-5.779783,6.731177,2.098483,-1.189779,1.729973,4.647536,-1.956182,-9.865542,-9.592603,-4.170584,1.553076,-5.214821,-8.066983,4.205766,-8.872149,5.348159,-7.192164,4.718709,1.752220,-5.606516,1.972775,-9.052567,-7.479519,-9.164287,-6.062845,2.696461,5.744791,-5.820832,9.344116,6.212062,-5.939683,-0.330116,7.443869,-3.706072,-9.365135,0.201554,-2.541124,8.057111,-1.970825,5.439535,-6.667676,9.774652,4.647639,-5.666960,2.736167,-1.682058,-8.577385,7.649726,-8.240921,1.565924,-4.192271,2.932753,-3.699954,7.043492,-1.750108,0.944226,-0.707611,5.690769,-1.114223,-5.524307,6.939776,7.327144,-6.506489,8.200023,-0.820029,0.555463,8.147929,-7.226662,3.395177,8.618539,-4.791718,-0.786432,7.204548,-0.351795,7.244197,1.042862,-7.285778,0.616440,3.032317,3.026664,9.972893,-8.230008,4.159316,-0.965195,7.267395,4.737202,-4.696087,-9.324068,8.076198,-4.791640,3.128510,4.663871,-7.789016,-1.561785,4.347961,-1.149825,-7.956701,4.109294,3.503212,-9.239125,6.929180,-5.127136,-4.563422,4.140848,-2.334793,-3.730887,-3.603035,3.834300,-5.368542,-3.854725,3.058044,-8.776761,-3.225109,-7.514680,0.145857,-8.141466,-8.627676,5.466046,5.877986,-4.826672,-9.755377,4.792251,-0.401394,1.434776,4.493853,-8.277157,-6.116900,-0.834867,-1.142121,-1.547706,-7.339247,6.826848,-8.231426,5.695211,5.037462,4.804982,-4.563391,-0.673989,7.672056,-1.086026,-1.483816,0.893294,9.355025,4.104156,-5.251378,-2.921632,-8.620256,2.177205,-7.702288,-3.020123,-2.239973,8.512689,-2.303264,8.360604,9.255955,-5.468275,-5.048747,6.866093,-6.048206,-7.513219,-1.863191,7.846043,-4.641155,3.012856,6.931871,-7.369347,9.131781,-2.867851,-5.171445,1.385589,6.166538,8.109338,-5.201650,-0.200366,9.529404,1.855864,5.073212,-0.371248,-5.596511,-9.267490,4.527527,5.180219,-3.850204,-9.353781,-7.893105,-3.946210,-8.330391,4.601664,-9.688941,7.899830,-9.720804,-7.223143,0.810890,1.698315,-7.018010,0.284725,7.663551,2.293576,-7.827821,-9.941550,9.983178,3.856046,-3.607434,-4.744676,-7.722554,-7.878964,7.895977,-5.513907,2.951809,-1.589855,9.953167,2.345249,-0.149766,-8.618809,-1.617412,1.385624,7.366045,4.663017,-4.347361,0.406810,2.168684,2.601036,-2.914584,4.674085,-1.012450,9.413049,8.589617,-4.183595,0.356335,4.625051,8.053255,-1.390050,8.307192,-7.821891,2.044668,-1.732140,1.157530,3.053275,6.582365,9.578066,-8.116561,9.284477,9.653363,-0.399658,-0.397060,-3.011254,-4.298139,-9.112996,7.128600,7.322300,-5.202597,0.363075,-3.839146,2.981548,-1.179209,7.658747,-2.023807,-1.274123,-8.757696,-0.751776,-0.884976,-2.829643,3.108423,-7.296160,3.334889,-8.150351,9.076321,8.950493,-4.077367,2.596556,0.952879,-8.641102,1.698698,1.763697,6.372232,-4.580873,-9.816900,-0.381267,-4.656913,-4.598637,1.602649,0.803164,2.725824,-7.669108,-8.400379,-5.924753,-5.849852,3.995323,9.519456,3.332417,-9.364204,0.567043,-1.147598,4.557384,-5.426946,-1.614226,-8.227750,3.449246,-6.919632,3.738532,4.700608,-6.244463,-8.263223,-5.731485,-9.494645,-6.658718,9.768393,8.026753,-5.492133,-6.028954,0.021285,-0.979060,6.471345,5.500028,0.224822,-2.351408,-1.282482,-8.120108,-2.798506,-0.206767,-2.602684,7.763999,-6.997740,5.686665,9.735960,-3.648442,-3.440040,-3.036289,-3.159311,8.685909,5.288187,-2.281226,-5.856325,-6.811637,6.349816,2.314737,-3.567848,-9.297867,2.609961,4.095434,4.331042,2.778854,-1.483209,9.597818,6.344224,-6.787143,-8.715774,-9.640701,1.837494,2.509353,-8.967386,-4.922299,-8.792755,3.928298,-4.707539,-1.749978,-7.750479,9.649472,-2.993552,9.822256,9.122500,-4.638174,5.680317,-7.764918,0.553083,1.015144,-8.527437,-0.867439,-4.799256,-3.191011,-8.014857,0.250505,0.333903,3.608393,8.259144,6.283643,-4.354748,0.935207,2.108076,-7.365913,8.856235,-3.246113,2.312953,-2.138509,-4.497192,-0.766777,-7.122691,-5.076079,-2.262038,8.269125,-6.168371,-8.550417,-1.114395,-1.061679,2.071520,-0.056997,4.761466,-9.268140,-7.646941,-0.832496,-5.442589,1.662847,-2.951418,-1.215920,-7.539724,5.208078,-1.590154,8.204748,6.490780,-0.777750,0.053389,7.969110,7.408471,2.406159,6.048541,5.382245,7.912664,-6.912775,-5.489349,-5.364972,-9.911432,7.760889,-9.322240,2.285115,8.484177,-2.192862,-9.721073,8.871851,-6.371043,9.260394,-0.880494,2.500976,-6.875009,-2.411107,-1.328771,9.772200,-6.384596,8.073995,2.239325,-7.534677,0.582018,6.561902,-6.406548,7.949106,-9.666185,-4.249595,5.320573,-5.647689,5.258185,-8.674605,3.588257,-3.661615,7.518009,-9.660574,-3.789694,9.368510,-9.122075,-7.764812,2.702037,0.226127,-1.351969,-7.538058,7.185967,1.126802,0.179572,-8.973705,1.382673,-9.036398,-1.234658,-3.181917,2.135723,-5.024515,-1.799784,6.601620,9.752596,6.670123,-8.076203,5.578276,-7.844638,7.960830,1.780142,2.601478,-4.364915,8.927235,-6.457889,-3.093842,0.224154,7.890132,3.609578,9.974821,9.665699,-2.565896,-9.415029,8.931796,4.050198,6.651469,-6.104139,8.070984,-2.696369,-1.986076,-5.857905,9.702002,9.047136,-3.565784,1.948412,1.200631,-1.358690,-2.769494,-9.670120,-5.064670,-3.987187,-2.211848,-9.296869,-0.378821,-5.952829,7.119898,6.072918,-5.978829,-4.912437,8.247328,-5.346475,-9.045507,-6.753598,4.057167,8.159245,-9.714733,5.745065,-1.476538,2.208241,3.905420,5.078560,-3.033556,3.493744,-4.935040,8.812148,8.209648,-7.600396,4.528965,-5.295186,4.611882,-6.336054,-3.205572,-6.688227,1.931258,7.541917,9.549687,7.382051,1.418812,-5.410827,-8.515698,4.506603,2.453574,-1.139396,-7.343011,-5.121612,-0.177817,-0.508754,-6.792123,3.439284,-0.794125,-6.706455,-2.738468,4.588555,-3.137564,8.592892,-7.730712,-0.741744,-1.901591,-0.895220,-8.772839,9.235589,0.259113,1.071522,-9.325532,8.287760,9.278796,2.639153,6.400431,1.050184,-0.636915,6.728230,6.521096,5.581756,-2.538942,-7.811483,-4.338786,0.554259,3.759938,3.395276,4.149371,-1.836094,0.466856,-5.360347,8.390675,-1.736050,-3.072400,-8.551655,-4.269216,-0.493557,6.025634,0.179100,-0.133744,0.594746,1.984520,2.158434,0.035275,8.633551,8.910513,7.872655,4.208842,2.160155,5.306754,5.561306,9.852476,-1.406255,-5.279381,-7.856677,-0.781039,6.648861,-8.671480,4.853259,-7.308944,-0.764453,-1.057424,-5.048477,-9.174479,-7.829828,2.497708,7.448263,8.991297,4.718812,4.050943,-7.558240,0.529754,2.528605,-9.458296,4.912468,0.925135,5.175434,-6.712462,7.511117,5.791435,-1.249842,7.949234,7.543373,-7.778888,-6.952783,-9.143625,4.072318,-3.012933,4.849742,7.686574,-7.671381,9.570250,2.014740,3.435466,-8.004885,-5.354422,-9.143819,-1.174850,-9.811246,-0.636790,-3.747136,6.711721,8.788648,-9.234923,-3.522865,3.042054,-3.316222,-9.834423,-6.420512,-1.941261,-6.209807,-5.651749,-1.364436,-4.396105,9.873952,9.024678,8.898767,5.551270,7.179803,-3.463097,-0.291050,-6.824578,-8.367491,-4.193748,-5.781306,1.395849,5.881680,0.004272,-6.026834,-7.861736,8.288452,5.551313,-1.097991,5.080944,-0.051106,8.785573,7.954769,1.708408,2.368552,6.203524,-7.846425,-2.101722,-8.756855,1.281894,-1.671506], dtype = "float64")#candidate|630|(1536,)|const|float64
call_628 = relay.TupleGetItem(func_193_call(relay.reshape(var_629.astype('float64'), []), relay.reshape(const_630.astype('float64'), [16, 16, 6]), ), 0)
call_631 = relay.TupleGetItem(func_196_call(relay.reshape(var_629.astype('float64'), []), relay.reshape(const_630.astype('float64'), [16, 16, 6]), ), 0)
uop_634 = relay.asinh(bop_624.astype('float32')) # shape=(9, 11, 7)
bop_636 = relay.bitwise_and(uop_634.astype('uint8'), var_629.astype('uint8')) # shape=(9, 11, 7)
bop_639 = relay.mod(bop_636.astype('float64'), relay.reshape(var_610.astype('float64'), relay.shape_of(bop_636))) # shape=(9, 11, 7)
uop_642 = relay.atan(bop_639.astype('float32')) # shape=(9, 11, 7)
bop_644 = relay.multiply(uop_642.astype('int8'), relay.reshape(bop_636.astype('int8'), relay.shape_of(uop_642))) # shape=(9, 11, 7)
uop_650 = relay.rsqrt(bop_644.astype('float32')) # shape=(9, 11, 7)
bop_652 = relay.less(uop_650.astype('bool'), relay.reshape(bop_639.astype('bool'), relay.shape_of(uop_650))) # shape=(9, 11, 7)
uop_655 = relay.cos(bop_644.astype('float64')) # shape=(9, 11, 7)
output = relay.Tuple([call_628,const_630,bop_652,uop_655,])
output2 = relay.Tuple([call_631,const_630,bop_652,uop_655,])
F = relay.Function([var_610,var_611,var_629,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_610,var_611,var_629,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_610= np.array([[[-8,-9,-1,-10,-2,3,8],[-4,-10,2,9,-9,-3,2],[-1,-10,7,8,2,2,-6],[1,8,-7,-4,-8,-6,-3],[-10,-2,5,2,1,-9,-9],[9,5,1,3,-2,10,1],[7,-6,9,7,-10,-6,-10],[4,-6,-7,10,6,8,2],[8,-2,9,1,6,10,7],[-6,2,8,-10,-1,-5,-6],[5,-8,3,-7,10,8,5]],[[3,-5,1,-7,-7,8,-9],[-5,5,-3,4,-5,-8,-8],[-2,-6,7,3,1,8,9],[6,-8,-3,2,6,-3,6],[7,-10,8,-3,9,4,-6],[-10,8,-2,-8,9,-2,5],[-5,9,-8,10,-6,3,-9],[-7,-1,1,-6,8,-8,3],[2,-9,2,7,-8,-8,-10],[-10,-7,-5,8,10,8,8],[-4,10,-3,-3,7,-5,-6]],[[7,-3,4,-6,10,4,-7],[-7,2,8,-7,9,7,9],[8,4,-9,4,7,-4,-3],[-7,3,-7,-5,-5,7,-2],[9,-6,-5,4,-5,9,8],[1,4,-4,-1,-1,8,-9],[-1,9,10,-1,-6,-1,1],[7,3,-1,-5,3,-5,-4],[-2,8,-4,7,6,1,1],[5,1,-3,9,1,-10,3],[1,-8,10,8,7,-10,-3]],[[5,4,-10,-3,1,-9,-7],[9,4,-7,2,-10,-1,-8],[-10,-3,-7,-8,-2,-9,4],[-7,5,-2,5,1,7,10],[8,1,10,-6,1,-5,-2],[7,-2,-6,-10,8,-8,-3],[-2,-2,-10,10,-7,9,10],[-4,-8,-8,-5,9,-5,-9],[6,7,-4,10,-4,-3,7],[-10,6,1,4,6,6,-3],[2,5,5,-8,10,2,-8]],[[-4,9,-6,-9,10,-4,1],[2,2,-9,4,8,-2,1],[4,-10,-8,4,5,9,-7],[2,5,-5,9,-6,7,-6],[6,-2,7,-1,-9,9,10],[-9,-10,-6,-6,6,2,-8],[-7,7,-2,-8,-9,5,5],[3,-9,4,-3,6,1,7],[-5,-4,9,-8,10,-1,-4],[-8,10,8,-4,-3,-5,8],[-1,9,10,-8,5,-4,-3]],[[-4,3,10,3,-7,2,-6],[6,-1,1,-5,-3,1,-3],[1,-2,-5,-8,8,-4,-8],[2,-1,10,-9,2,-1,9],[3,7,-9,10,3,10,-9],[6,-9,3,-1,4,1,6],[-2,-4,-8,-8,9,3,-8],[-3,5,6,10,-6,2,2],[7,-5,-4,4,1,1,2],[10,-6,8,-4,7,-4,6],[-4,-1,-8,-10,7,-6,-5]],[[-6,2,-10,-1,-10,-3,-9],[-2,4,5,7,-2,-6,10],[-5,1,-6,9,1,-4,-5],[10,5,8,9,7,-7,-6],[9,-4,-5,-8,-8,-6,-7],[2,7,-7,-7,4,-10,-4],[9,7,8,-2,8,1,-7],[5,-7,-7,10,-7,-8,-2],[1,3,-8,9,6,8,-3],[8,-7,-5,1,-9,5,5],[-6,-2,-5,-10,-7,-10,2]],[[5,-8,-7,-7,9,6,8],[-3,-5,-1,7,-1,-2,6],[1,9,-5,-2,-2,-9,-8],[7,6,-10,9,7,-9,3],[-9,3,-8,10,9,-10,-3],[-10,-1,9,-6,-10,2,1],[10,-5,4,2,10,7,-6],[-10,3,-1,8,-4,1,-1],[3,-4,-7,-3,7,-3,7],[-6,-7,3,-10,-6,6,-5],[6,-10,8,-4,-3,4,-2]],[[6,-6,-4,3,-5,-4,1],[3,-9,-10,9,-2,-2,2],[4,-4,-5,5,5,7,-10],[1,2,-7,-2,-9,6,-6],[8,-6,-1,-5,3,4,-9],[-10,-3,-10,4,6,-6,-6],[10,-1,-9,-3,9,5,-9],[10,1,8,-10,8,8,9],[-1,-6,-9,9,8,-8,-1],[9,-1,1,8,5,10,3],[7,3,10,-1,10,7,-6]]], dtype='int16')
module1.set_input('var_610', input_610)
input_611= np.array([[[-3,8,-9,2,1,9,-9],[9,-8,5,-8,-3,-4,-1],[-1,5,-3,5,-2,-10,-8],[-8,10,8,-6,9,7,-3],[5,1,-10,-9,1,-5,-2],[5,7,-6,3,-5,8,-2],[-8,-8,-10,10,-7,-5,4],[1,-8,-5,-2,-2,-4,5],[-10,6,4,2,3,6,-8],[8,2,9,8,4,4,8],[-2,-9,1,-2,-1,1,-4]],[[-4,7,-6,3,-8,9,2],[10,1,-4,4,-8,-2,-9],[-3,-9,7,2,4,9,8],[-4,3,-2,-5,9,-2,6],[-7,7,9,-8,-2,10,-6],[8,10,6,-7,10,-7,-3],[-7,4,-5,-4,9,-3,-2],[6,5,-4,5,10,2,-4],[-8,-9,6,-9,-6,-9,4],[-5,6,-6,3,-8,4,2],[6,5,5,-1,7,3,-4]],[[10,6,-6,-7,5,-4,10],[-9,-4,-10,-2,-2,7,-4],[3,-5,-8,8,-3,-6,-5],[-9,10,9,4,-2,-6,9],[4,-2,-3,-9,7,-5,-2],[-9,5,4,-8,9,2,-8],[6,10,3,6,-10,-7,2],[-9,4,3,-6,5,10,5],[5,-10,1,10,5,-7,1],[-4,-5,9,-9,-7,7,-8],[-5,-9,-6,-1,3,8,7]],[[3,-9,-1,9,4,-2,6],[2,-6,-9,-7,-8,-2,10],[-6,-5,-5,7,-1,-5,8],[-5,-7,-8,-3,-10,4,9],[-6,5,-7,3,7,7,-8],[-2,-10,-3,-3,9,-10,4],[-6,7,3,-6,-4,-4,10],[-8,4,7,8,-10,-2,7],[-10,3,6,-2,4,1,8],[9,-7,-8,-1,-6,6,-10],[-6,10,7,-4,5,-2,-3]],[[-9,8,-8,-6,-7,-1,6],[8,-6,10,-10,9,-10,1],[7,6,-4,-3,1,-9,8],[1,9,-9,-4,3,8,2],[-10,1,-7,-1,-5,-3,6],[5,2,-10,-5,-8,-8,5],[-6,-5,9,2,-4,5,9],[-8,-10,1,-10,4,9,-6],[-6,-6,-9,-7,-8,-2,-3],[-4,7,-9,6,10,2,1],[10,2,-2,8,-9,8,3]],[[-10,1,9,5,-6,10,6],[1,-7,9,-7,-8,-10,10],[-4,2,-1,9,10,10,6],[-3,3,-2,-5,10,9,8],[6,-9,-1,6,3,-2,1],[10,-3,10,7,8,2,-5],[-9,2,1,8,2,5,-1],[-10,-10,-2,3,1,-3,-1],[9,7,9,3,-1,-3,5],[10,-7,-10,3,10,-3,6],[-1,2,3,8,-9,3,2]],[[-2,-5,2,-5,9,-4,3],[-3,5,6,-4,9,2,-2],[7,-2,-10,-1,1,5,-3],[-2,-8,3,-8,5,9,-3],[1,7,-9,6,8,-4,-3],[-2,9,1,8,1,7,8],[-1,7,6,9,-3,-7,-2],[3,-9,2,-8,5,10,-1],[-3,1,10,5,1,3,1],[-6,-2,-8,3,-1,2,-6],[4,-9,6,3,7,-4,-4]],[[-4,-1,-7,9,-6,-5,5],[6,10,-1,-9,9,3,-9],[-6,-3,7,-1,7,-8,-4],[3,-2,3,9,1,10,-1],[9,1,-5,6,-10,-6,8],[-1,9,-4,-5,3,10,3],[5,5,3,9,-2,-10,1],[9,-10,-4,6,-9,6,6],[-5,7,10,6,-10,3,-2],[-4,9,-4,4,9,7,-3],[-8,-8,8,7,-9,-3,-9]],[[-1,-9,6,6,6,-2,-4],[-3,-10,5,-5,3,-3,4],[9,2,6,5,-9,4,3],[-2,-4,5,7,-10,-3,6],[-3,-1,4,4,-7,2,2],[-3,3,-3,2,9,-7,4],[3,-7,-8,3,-2,-2,8],[4,1,6,-5,-8,-4,-8],[9,-3,2,1,8,4,2],[10,-9,9,-4,-3,-3,-9],[2,-10,-9,-3,2,-1,-1]]], dtype='int16')
module1.set_input('var_611', input_611)
input_629= np.array(-2.418668, dtype='float64')
module1.set_input('var_629', input_629)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_610, input_611, input_629, )
res3 = intrp3.evaluate()(input_610, input_611, input_629, )
res4 = intrp4.evaluate()(input_610, input_611, input_629, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input('var_610', input_610)
module5.set_input('var_611', input_611)
module5.set_input('var_629', input_629)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_610, input_611, input_629, )
res7 = intrp7.evaluate()(input_610, input_611, input_629, )
res8 = intrp8.evaluate()(input_610, input_611, input_629, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input('var_610', input_610)
module9.set_input('var_611', input_611)
module9.set_input('var_629', input_629)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_610, input_611, input_629, )
res11 = intrp11.evaluate()(input_610, input_611, input_629, )
res12 = intrp12.evaluate()(input_610, input_611, input_629, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input('var_610', input_610)
module13.set_input('var_611', input_611)
module13.set_input('var_629', input_629)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_610, input_611, input_629, )
res15 = intrp15.evaluate()(input_610, input_611, input_629, )
res16 = intrp16.evaluate()(input_610, input_611, input_629, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input('var_610', input_610)
module17.set_input('var_611', input_611)
module17.set_input('var_629', input_629)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_610, input_611, input_629, )
res19 = intrp19.evaluate()(input_610, input_611, input_629, )
res20 = intrp20.evaluate()(input_610, input_611, input_629, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input('var_610', input_610)
module21.set_input('var_611', input_611)
module21.set_input('var_629', input_629)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_610, input_611, input_629, )
res23 = intrp23.evaluate()(input_610, input_611, input_629, )
res24 = intrp24.evaluate()(input_610, input_611, input_629, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''42: TVMFuncCall
41: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
40: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
39: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
38: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
37: tvm::transform::Pass::operator()(tvm::IRModule) const
36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
30: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
29: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
28: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
27: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
26: _ZN3tvm5relay16MixedModeMutato
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
19: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
17: _ZN3tvm5relay16MixedModeMutato
16: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
15: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
14: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
13: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
12: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
11: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
10: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''