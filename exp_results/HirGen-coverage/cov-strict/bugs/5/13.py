import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (14, 8, 13))#candidate|0|(14, 8, 13)|var|float64
uop_1 = relay.sinh(var_0.astype('float64')) # shape=(14, 8, 13)
bop_3 = relay.less(uop_1.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(uop_1))) # shape=(14, 8, 13)
bop_6 = relay.greater(var_0.astype('bool'), relay.reshape(bop_3.astype('bool'), relay.shape_of(var_0))) # shape=(14, 8, 13)
uop_9 = relay.atan(bop_3.astype('float32')) # shape=(14, 8, 13)
output = relay.Tuple([bop_6,uop_9,])
output2 = relay.Tuple([bop_6,uop_9,])
func_11 = relay.Function([var_0,], output)
mod['func_11'] = func_11
mod = relay.transform.InferType()(mod)
mutated_mod['func_11'] = func_11
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12 = relay.var("var_12", dtype = "float64", shape = (14, 8, 13))#candidate|12|(14, 8, 13)|var|float64
func_11_call = mutated_mod.get_global_var('func_11')
call_13 = func_11_call(var_12)
output = call_13
func_14 = relay.Function([var_12], output)
mutated_mod['func_14'] = func_14
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16 = relay.var("var_16", dtype = "bool", shape = (5, 8))#candidate|16|(5, 8)|var|bool
const_17 = relay.const([[False,False,False,False,False,False,False,False],[True,True,False,False,True,True,False,True],[False,True,True,True,False,False,True,False],[True,True,False,True,False,True,True,True],[True,False,True,True,False,True,True,True]], dtype = "bool")#candidate|17|(5, 8)|const|bool
bop_18 = relay.logical_and(var_16.astype('bool'), relay.reshape(const_17.astype('bool'), relay.shape_of(var_16))) # shape=(5, 8)
bop_21 = relay.logical_and(var_16.astype('bool'), relay.reshape(const_17.astype('bool'), relay.shape_of(var_16))) # shape=(5, 8)
uop_24 = relay.asinh(const_17.astype('float64')) # shape=(5, 8)
uop_26 = relay.sigmoid(uop_24.astype('float64')) # shape=(5, 8)
uop_28 = relay.erf(uop_24.astype('float32')) # shape=(5, 8)
var_30 = relay.var("var_30", dtype = "float32", shape = (5, 8))#candidate|30|(5, 8)|var|float32
bop_31 = relay.less_equal(uop_28.astype('bool'), relay.reshape(var_30.astype('bool'), relay.shape_of(uop_28))) # shape=(5, 8)
func_11_call = mod.get_global_var('func_11')
func_14_call = mutated_mod.get_global_var('func_14')
var_35 = relay.var("var_35", dtype = "float64", shape = (56, 26))#candidate|35|(56, 26)|var|float64
call_34 = relay.TupleGetItem(func_11_call(relay.reshape(var_35.astype('float64'), [14, 8, 13])), 1)
call_36 = relay.TupleGetItem(func_14_call(relay.reshape(var_35.astype('float64'), [14, 8, 13])), 1)
output = relay.Tuple([bop_18,bop_21,uop_26,bop_31,call_34,var_35,])
output2 = relay.Tuple([bop_18,bop_21,uop_26,bop_31,call_36,var_35,])
func_37 = relay.Function([var_16,var_30,var_35,], output)
mod['func_37'] = func_37
mod = relay.transform.InferType()(mod)
var_38 = relay.var("var_38", dtype = "bool", shape = (5, 8))#candidate|38|(5, 8)|var|bool
var_39 = relay.var("var_39", dtype = "float32", shape = (5, 8))#candidate|39|(5, 8)|var|float32
var_40 = relay.var("var_40", dtype = "float64", shape = (56, 26))#candidate|40|(56, 26)|var|float64
output = func_37(var_38,var_39,var_40,)
func_41 = relay.Function([var_38,var_39,var_40,], output)
mutated_mod['func_41'] = func_41
mutated_mod = relay.transform.InferType()(mutated_mod)
var_43 = relay.var("var_43", dtype = "float64", shape = ())#candidate|43|()|var|float64
var_44 = relay.var("var_44", dtype = "float64", shape = (13,))#candidate|44|(13,)|var|float64
bop_45 = relay.mod(var_43.astype('float64'), var_44.astype('float64')) # shape=(13,)
uop_48 = relay.acosh(var_44.astype('float32')) # shape=(13,)
uop_50 = relay.asinh(var_43.astype('float64')) # shape=()
uop_52 = relay.sqrt(uop_50.astype('float64')) # shape=()
var_54 = relay.var("var_54", dtype = "float64", shape = (7, 13))#candidate|54|(7, 13)|var|float64
bop_55 = relay.floor_mod(uop_50.astype('float32'), var_54.astype('float32')) # shape=(7, 13)
func_37_call = mod.get_global_var('func_37')
func_41_call = mutated_mod.get_global_var('func_41')
const_59 = relay.const([True,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True], dtype = "bool")#candidate|59|(40,)|const|bool
var_60 = relay.var("var_60", dtype = "float64", shape = (1456,))#candidate|60|(1456,)|var|float64
call_58 = relay.TupleGetItem(func_37_call(relay.reshape(const_59.astype('bool'), [5, 8]), relay.reshape(const_59.astype('float32'), [5, 8]), relay.reshape(var_60.astype('float64'), [56, 26]), ), 0)
call_61 = relay.TupleGetItem(func_41_call(relay.reshape(const_59.astype('bool'), [5, 8]), relay.reshape(const_59.astype('float32'), [5, 8]), relay.reshape(var_60.astype('float64'), [56, 26]), ), 0)
uop_62 = relay.atan(var_44.astype('float64')) # shape=(13,)
bop_64 = relay.power(uop_52.astype('float64'), uop_62.astype('float64')) # shape=(13,)
func_11_call = mod.get_global_var('func_11')
func_14_call = mutated_mod.get_global_var('func_14')
call_67 = relay.TupleGetItem(func_11_call(relay.reshape(var_60.astype('float64'), [14, 8, 13])), 0)
call_68 = relay.TupleGetItem(func_14_call(relay.reshape(var_60.astype('float64'), [14, 8, 13])), 0)
bop_69 = relay.add(uop_52.astype('int8'), bop_64.astype('int8')) # shape=(13,)
uop_72 = relay.log(uop_52.astype('float64')) # shape=()
var_74 = relay.var("var_74", dtype = "int8", shape = (13,))#candidate|74|(13,)|var|int8
bop_75 = relay.subtract(bop_69.astype('int16'), relay.reshape(var_74.astype('int16'), relay.shape_of(bop_69))) # shape=(13,)
bop_78 = relay.bitwise_or(uop_72.astype('uint64'), var_44.astype('uint64')) # shape=(13,)
uop_81 = relay.rsqrt(uop_72.astype('float64')) # shape=()
uop_83 = relay.log2(uop_81.astype('float64')) # shape=()
var_85 = relay.var("var_85", dtype = "float64", shape = (14, 10, 6))#candidate|85|(14, 10, 6)|var|float64
bop_86 = relay.right_shift(uop_81.astype('int16'), var_85.astype('int16')) # shape=(14, 10, 6)
uop_89 = relay.atan(uop_83.astype('float64')) # shape=()
uop_91 = relay.cosh(uop_83.astype('float64')) # shape=()
output = relay.Tuple([bop_45,uop_48,bop_55,call_58,const_59,var_60,call_67,bop_75,bop_78,bop_86,uop_89,uop_91,])
output2 = relay.Tuple([bop_45,uop_48,bop_55,call_61,const_59,var_60,call_68,bop_75,bop_78,bop_86,uop_89,uop_91,])
func_93 = relay.Function([var_43,var_44,var_54,var_60,var_74,var_85,], output)
mod['func_93'] = func_93
mod = relay.transform.InferType()(mod)
var_94 = relay.var("var_94", dtype = "float64", shape = ())#candidate|94|()|var|float64
var_95 = relay.var("var_95", dtype = "float64", shape = (13,))#candidate|95|(13,)|var|float64
var_96 = relay.var("var_96", dtype = "float64", shape = (7, 13))#candidate|96|(7, 13)|var|float64
var_97 = relay.var("var_97", dtype = "float64", shape = (1456,))#candidate|97|(1456,)|var|float64
var_98 = relay.var("var_98", dtype = "int8", shape = (13,))#candidate|98|(13,)|var|int8
var_99 = relay.var("var_99", dtype = "float64", shape = (14, 10, 6))#candidate|99|(14, 10, 6)|var|float64
output = func_93(var_94,var_95,var_96,var_97,var_98,var_99,)
func_100 = relay.Function([var_94,var_95,var_96,var_97,var_98,var_99,], output)
mutated_mod['func_100'] = func_100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_102 = relay.var("var_102", dtype = "float32", shape = (16,))#candidate|102|(16,)|var|float32
var_103 = relay.var("var_103", dtype = "float32", shape = (16,))#candidate|103|(16,)|var|float32
bop_104 = relay.subtract(var_102.astype('float32'), relay.reshape(var_103.astype('float32'), relay.shape_of(var_102))) # shape=(16,)
uop_107 = relay.sqrt(var_103.astype('float32')) # shape=(16,)
uop_109 = relay.sin(uop_107.astype('float64')) # shape=(16,)
bop_111 = relay.floor_divide(uop_107.astype('float64'), relay.reshape(uop_109.astype('float64'), relay.shape_of(uop_107))) # shape=(16,)
output = relay.Tuple([bop_104,bop_111,])
output2 = relay.Tuple([bop_104,bop_111,])
func_114 = relay.Function([var_102,var_103,], output)
mod['func_114'] = func_114
mod = relay.transform.InferType()(mod)
var_115 = relay.var("var_115", dtype = "float32", shape = (16,))#candidate|115|(16,)|var|float32
var_116 = relay.var("var_116", dtype = "float32", shape = (16,))#candidate|116|(16,)|var|float32
output = func_114(var_115,var_116,)
func_117 = relay.Function([var_115,var_116,], output)
mutated_mod['func_117'] = func_117
mutated_mod = relay.transform.InferType()(mutated_mod)
var_119 = relay.var("var_119", dtype = "int32", shape = ())#candidate|119|()|var|int32
var_120 = relay.var("var_120", dtype = "int32", shape = (15,))#candidate|120|(15,)|var|int32
bop_121 = relay.subtract(var_119.astype('int32'), var_120.astype('int32')) # shape=(15,)
uop_124 = relay.log(bop_121.astype('float64')) # shape=(15,)
output = relay.Tuple([uop_124,])
output2 = relay.Tuple([uop_124,])
func_126 = relay.Function([var_119,var_120,], output)
mod['func_126'] = func_126
mod = relay.transform.InferType()(mod)
var_127 = relay.var("var_127", dtype = "int32", shape = ())#candidate|127|()|var|int32
var_128 = relay.var("var_128", dtype = "int32", shape = (15,))#candidate|128|(15,)|var|int32
output = func_126(var_127,var_128,)
func_129 = relay.Function([var_127,var_128,], output)
mutated_mod['func_129'] = func_129
mutated_mod = relay.transform.InferType()(mutated_mod)
var_131 = relay.var("var_131", dtype = "float32", shape = (8,))#candidate|131|(8,)|var|float32
uop_132 = relay.sin(var_131.astype('float32')) # shape=(8,)
uop_134 = relay.sinh(uop_132.astype('float32')) # shape=(8,)
uop_136 = relay.log(uop_132.astype('float64')) # shape=(8,)
bop_138 = relay.left_shift(uop_134.astype('uint16'), relay.reshape(var_131.astype('uint16'), relay.shape_of(uop_134))) # shape=(8,)
bop_141 = relay.logical_xor(uop_136.astype('uint16'), relay.reshape(var_131.astype('uint16'), relay.shape_of(uop_136))) # shape=(8,)
const_144 = relay.const([10,4,-10,-6,-4,-2,2,9], dtype = "uint16")#candidate|144|(8,)|const|uint16
bop_145 = relay.minimum(bop_138.astype('uint8'), relay.reshape(const_144.astype('uint8'), relay.shape_of(bop_138))) # shape=(8,)
const_148 = relay.const([-7.972656,1.303455,6.940472,-6.083565,1.224535,-7.085612,-2.272539,-1.125293], dtype = "float32")#candidate|148|(8,)|const|float32
bop_149 = relay.floor_divide(uop_134.astype('float64'), relay.reshape(const_148.astype('float64'), relay.shape_of(uop_134))) # shape=(8,)
uop_152 = relay.exp(const_144.astype('float64')) # shape=(8,)
output = relay.Tuple([bop_141,bop_145,bop_149,uop_152,])
output2 = relay.Tuple([bop_141,bop_145,bop_149,uop_152,])
func_154 = relay.Function([var_131,], output)
mod['func_154'] = func_154
mod = relay.transform.InferType()(mod)
var_155 = relay.var("var_155", dtype = "float32", shape = (8,))#candidate|155|(8,)|var|float32
output = func_154(var_155)
func_156 = relay.Function([var_155], output)
mutated_mod['func_156'] = func_156
mutated_mod = relay.transform.InferType()(mutated_mod)
var_158 = relay.var("var_158", dtype = "float64", shape = (15, 12))#candidate|158|(15, 12)|var|float64
uop_159 = relay.tan(var_158.astype('float64')) # shape=(15, 12)
bop_161 = relay.bitwise_or(var_158.astype('uint8'), relay.reshape(uop_159.astype('uint8'), relay.shape_of(var_158))) # shape=(15, 12)
var_164 = relay.var("var_164", dtype = "float64", shape = (15, 12))#candidate|164|(15, 12)|var|float64
bop_165 = relay.logical_xor(uop_159.astype('int32'), relay.reshape(var_164.astype('int32'), relay.shape_of(uop_159))) # shape=(15, 12)
uop_168 = relay.log(var_164.astype('float64')) # shape=(15, 12)
var_170 = relay.var("var_170", dtype = "float64", shape = (15, 12))#candidate|170|(15, 12)|var|float64
bop_171 = relay.left_shift(var_158.astype('uint32'), relay.reshape(var_170.astype('uint32'), relay.shape_of(var_158))) # shape=(15, 12)
bop_174 = relay.maximum(bop_161.astype('int16'), relay.reshape(uop_159.astype('int16'), relay.shape_of(bop_161))) # shape=(15, 12)
bop_177 = relay.bitwise_xor(var_158.astype('int32'), relay.reshape(uop_168.astype('int32'), relay.shape_of(var_158))) # shape=(15, 12)
var_180 = relay.var("var_180", dtype = "float64", shape = (15, 12))#candidate|180|(15, 12)|var|float64
bop_181 = relay.floor_mod(var_164.astype('float64'), relay.reshape(var_180.astype('float64'), relay.shape_of(var_164))) # shape=(15, 12)
func_11_call = mod.get_global_var('func_11')
func_14_call = mutated_mod.get_global_var('func_14')
var_185 = relay.var("var_185", dtype = "float64", shape = (1456,))#candidate|185|(1456,)|var|float64
call_184 = relay.TupleGetItem(func_11_call(relay.reshape(var_185.astype('float64'), [14, 8, 13])), 1)
call_186 = relay.TupleGetItem(func_14_call(relay.reshape(var_185.astype('float64'), [14, 8, 13])), 1)
uop_187 = relay.sigmoid(bop_161.astype('float64')) # shape=(15, 12)
uop_189 = relay.atanh(uop_187.astype('float32')) # shape=(15, 12)
uop_191 = relay.acos(uop_187.astype('float32')) # shape=(15, 12)
func_37_call = mod.get_global_var('func_37')
func_41_call = mutated_mod.get_global_var('func_41')
const_194 = relay.const([True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,True], dtype = "bool")#candidate|194|(40,)|const|bool
call_193 = relay.TupleGetItem(func_37_call(relay.reshape(const_194.astype('bool'), [5, 8]), relay.reshape(const_194.astype('float32'), [5, 8]), relay.reshape(var_185.astype('float64'), [56, 26]), ), 3)
call_195 = relay.TupleGetItem(func_41_call(relay.reshape(const_194.astype('bool'), [5, 8]), relay.reshape(const_194.astype('float32'), [5, 8]), relay.reshape(var_185.astype('float64'), [56, 26]), ), 3)
bop_196 = relay.subtract(uop_189.astype('int32'), relay.reshape(var_170.astype('int32'), relay.shape_of(uop_189))) # shape=(15, 12)
bop_199 = relay.maximum(bop_196.astype('uint64'), relay.reshape(bop_177.astype('uint64'), relay.shape_of(bop_196))) # shape=(15, 12)
bop_202 = relay.subtract(bop_196.astype('float64'), relay.reshape(uop_168.astype('float64'), relay.shape_of(bop_196))) # shape=(15, 12)
output = relay.Tuple([bop_165,bop_171,bop_174,bop_181,call_184,var_185,uop_191,call_193,const_194,bop_199,bop_202,])
output2 = relay.Tuple([bop_165,bop_171,bop_174,bop_181,call_186,var_185,uop_191,call_195,const_194,bop_199,bop_202,])
func_205 = relay.Function([var_158,var_164,var_170,var_180,var_185,], output)
mod['func_205'] = func_205
mod = relay.transform.InferType()(mod)
var_206 = relay.var("var_206", dtype = "float64", shape = (15, 12))#candidate|206|(15, 12)|var|float64
var_207 = relay.var("var_207", dtype = "float64", shape = (15, 12))#candidate|207|(15, 12)|var|float64
var_208 = relay.var("var_208", dtype = "float64", shape = (15, 12))#candidate|208|(15, 12)|var|float64
var_209 = relay.var("var_209", dtype = "float64", shape = (15, 12))#candidate|209|(15, 12)|var|float64
var_210 = relay.var("var_210", dtype = "float64", shape = (1456,))#candidate|210|(1456,)|var|float64
output = func_205(var_206,var_207,var_208,var_209,var_210,)
func_211 = relay.Function([var_206,var_207,var_208,var_209,var_210,], output)
mutated_mod['func_211'] = func_211
mutated_mod = relay.transform.InferType()(mutated_mod)
var_213 = relay.var("var_213", dtype = "float64", shape = (1, 15, 12))#candidate|213|(1, 15, 12)|var|float64
var_214 = relay.var("var_214", dtype = "float64", shape = (15, 15, 12))#candidate|214|(15, 15, 12)|var|float64
bop_215 = relay.divide(var_213.astype('float64'), var_214.astype('float64')) # shape=(15, 15, 12)
uop_218 = relay.log(var_213.astype('float32')) # shape=(1, 15, 12)
bop_220 = relay.power(uop_218.astype('float64'), var_214.astype('float64')) # shape=(15, 15, 12)
bop_223 = relay.not_equal(var_214.astype('bool'), relay.reshape(bop_215.astype('bool'), relay.shape_of(var_214))) # shape=(15, 15, 12)
uop_226 = relay.acosh(bop_220.astype('float64')) # shape=(15, 15, 12)
bop_228 = relay.minimum(uop_226.astype('int16'), relay.reshape(var_214.astype('int16'), relay.shape_of(uop_226))) # shape=(15, 15, 12)
uop_231 = relay.sqrt(bop_228.astype('float32')) # shape=(15, 15, 12)
var_233 = relay.var("var_233", dtype = "float64", shape = (15, 15, 12))#candidate|233|(15, 15, 12)|var|float64
bop_234 = relay.logical_or(uop_226.astype('bool'), relay.reshape(var_233.astype('bool'), relay.shape_of(uop_226))) # shape=(15, 15, 12)
bop_237 = relay.less(uop_218.astype('bool'), var_214.astype('bool')) # shape=(15, 15, 12)
uop_240 = relay.erf(var_233.astype('float64')) # shape=(15, 15, 12)
uop_242 = relay.asinh(bop_237.astype('float32')) # shape=(15, 15, 12)
uop_244 = relay.rsqrt(uop_231.astype('float32')) # shape=(15, 15, 12)
var_246 = relay.var("var_246", dtype = "float32", shape = (15, 15, 12))#candidate|246|(15, 15, 12)|var|float32
bop_247 = relay.logical_and(uop_231.astype('bool'), relay.reshape(var_246.astype('bool'), relay.shape_of(uop_231))) # shape=(15, 15, 12)
bop_250 = relay.bitwise_xor(uop_240.astype('int16'), relay.reshape(bop_220.astype('int16'), relay.shape_of(uop_240))) # shape=(15, 15, 12)
uop_253 = relay.exp(uop_244.astype('float32')) # shape=(15, 15, 12)
output = relay.Tuple([bop_223,bop_234,uop_242,bop_247,bop_250,uop_253,])
output2 = relay.Tuple([bop_223,bop_234,uop_242,bop_247,bop_250,uop_253,])
func_255 = relay.Function([var_213,var_214,var_233,var_246,], output)
mod['func_255'] = func_255
mod = relay.transform.InferType()(mod)
var_256 = relay.var("var_256", dtype = "float64", shape = (1, 15, 12))#candidate|256|(1, 15, 12)|var|float64
var_257 = relay.var("var_257", dtype = "float64", shape = (15, 15, 12))#candidate|257|(15, 15, 12)|var|float64
var_258 = relay.var("var_258", dtype = "float64", shape = (15, 15, 12))#candidate|258|(15, 15, 12)|var|float64
var_259 = relay.var("var_259", dtype = "float32", shape = (15, 15, 12))#candidate|259|(15, 15, 12)|var|float32
output = func_255(var_256,var_257,var_258,var_259,)
func_260 = relay.Function([var_256,var_257,var_258,var_259,], output)
mutated_mod['func_260'] = func_260
mutated_mod = relay.transform.InferType()(mutated_mod)
var_262 = relay.var("var_262", dtype = "float32", shape = (10, 4))#candidate|262|(10, 4)|var|float32
uop_263 = relay.tan(var_262.astype('float32')) # shape=(10, 4)
func_126_call = mod.get_global_var('func_126')
func_129_call = mutated_mod.get_global_var('func_129')
const_266 = relay.const(-3, dtype = "int32")#candidate|266|()|const|int32
var_267 = relay.var("var_267", dtype = "int32", shape = (15,))#candidate|267|(15,)|var|int32
call_265 = relay.TupleGetItem(func_126_call(relay.reshape(const_266.astype('int32'), []), relay.reshape(var_267.astype('int32'), [15,]), ), 0)
call_268 = relay.TupleGetItem(func_129_call(relay.reshape(const_266.astype('int32'), []), relay.reshape(var_267.astype('int32'), [15,]), ), 0)
bop_269 = relay.logical_xor(uop_263.astype('int8'), relay.reshape(var_262.astype('int8'), relay.shape_of(uop_263))) # shape=(10, 4)
output = relay.Tuple([call_265,const_266,var_267,bop_269,])
output2 = relay.Tuple([call_268,const_266,var_267,bop_269,])
func_272 = relay.Function([var_262,var_267,], output)
mod['func_272'] = func_272
mod = relay.transform.InferType()(mod)
mutated_mod['func_272'] = func_272
mutated_mod = relay.transform.InferType()(mutated_mod)
func_272_call = mutated_mod.get_global_var('func_272')
var_274 = relay.var("var_274", dtype = "float32", shape = (10, 4))#candidate|274|(10, 4)|var|float32
var_275 = relay.var("var_275", dtype = "int32", shape = (15,))#candidate|275|(15,)|var|int32
call_273 = func_272_call(var_274,var_275,)
output = call_273
func_276 = relay.Function([var_274,var_275,], output)
mutated_mod['func_276'] = func_276
mutated_mod = relay.transform.InferType()(mutated_mod)
const_278 = relay.const([[7.247390,0.985258,-5.592399,-4.864174],[-0.946560,-5.184988,-9.269724,3.595305],[7.145665,3.869204,-1.665506,9.631064],[9.316199,-3.078435,-8.779947,-3.315553],[-5.135022,-9.967485,-4.468856,4.330429],[2.470886,-2.225167,-0.962565,-8.516310]], dtype = "float64")#candidate|278|(6, 4)|const|float64
const_279 = relay.const([[-7.312496,-9.359341,9.301357,0.632204],[1.784043,5.625219,7.644479,-1.312507],[-2.516938,3.006241,5.697892,1.043680],[-1.039619,-6.029178,2.596204,-1.590425],[1.441852,9.865128,-9.923137,-5.585406],[-4.918530,8.494884,-0.999490,-2.522312]], dtype = "float64")#candidate|279|(6, 4)|const|float64
bop_280 = relay.divide(const_278.astype('float64'), relay.reshape(const_279.astype('float64'), relay.shape_of(const_278))) # shape=(6, 4)
uop_283 = relay.tan(bop_280.astype('float32')) # shape=(6, 4)
bop_285 = relay.left_shift(const_278.astype('int8'), relay.reshape(uop_283.astype('int8'), relay.shape_of(const_278))) # shape=(6, 4)
bop_288 = relay.bitwise_and(uop_283.astype('int16'), relay.reshape(bop_280.astype('int16'), relay.shape_of(uop_283))) # shape=(6, 4)
func_126_call = mod.get_global_var('func_126')
func_129_call = mutated_mod.get_global_var('func_129')
var_292 = relay.var("var_292", dtype = "int32", shape = ())#candidate|292|()|var|int32
var_293 = relay.var("var_293", dtype = "int32", shape = (1, 15))#candidate|293|(1, 15)|var|int32
call_291 = relay.TupleGetItem(func_126_call(relay.reshape(var_292.astype('int32'), []), relay.reshape(var_293.astype('int32'), [15,]), ), 0)
call_294 = relay.TupleGetItem(func_129_call(relay.reshape(var_292.astype('int32'), []), relay.reshape(var_293.astype('int32'), [15,]), ), 0)
var_295 = relay.var("var_295", dtype = "int8", shape = (6, 4))#candidate|295|(6, 4)|var|int8
bop_296 = relay.bitwise_or(bop_285.astype('uint8'), relay.reshape(var_295.astype('uint8'), relay.shape_of(bop_285))) # shape=(6, 4)
bop_299 = relay.logical_xor(bop_285.astype('int8'), relay.reshape(uop_283.astype('int8'), relay.shape_of(bop_285))) # shape=(6, 4)
func_93_call = mod.get_global_var('func_93')
func_100_call = mutated_mod.get_global_var('func_100')
var_303 = relay.var("var_303", dtype = "float64", shape = (13,))#candidate|303|(13,)|var|float64
const_304 = relay.const([7.635520,-9.436494,6.845406,5.084737,-2.653564,-4.705759,-2.606981,7.487033,6.327131,-8.791929,-8.205161,-6.287863,2.128706,6.151724,1.644442,-9.970600,-6.884137,7.444840,1.602110,0.006471,-2.803561,-8.896615,3.863378,-1.415119,0.627808,-8.339462,3.877682,-3.064417,-8.941256,3.990947,9.086165,3.921643,8.130296,1.518007,0.109551,-5.768388,-2.992434,0.557363,2.384292,-2.993508,-8.624602,-2.723860,-7.623118,9.485123,-0.541779,-0.472618,-0.911503,-5.693782,0.361661,-5.305415,-8.715879,-8.544587,-5.076734,-8.408042,9.319706,-0.282632,8.177383,-7.115602,0.565512,0.479828,-9.464363,7.474415,6.393439,-3.698357,-5.849343,9.559859,-6.062848,6.251202,5.343053,-8.157285,8.331846,8.353682,0.542084,-0.958194,6.456352,1.927610,5.581254,-5.289466,-0.958281,0.934101,-3.537584,3.987913,2.535228,7.355930,1.849772,8.766114,-5.958390,9.323302,-3.136886,-3.407197,4.902830], dtype = "float64")#candidate|304|(91,)|const|float64
var_305 = relay.var("var_305", dtype = "float64", shape = (1456,))#candidate|305|(1456,)|var|float64
const_306 = relay.const([-4.125961,-7.596663,-3.545533,-6.126552,7.121992,-7.053671,-2.775275,-7.370444,1.617373,-6.569641,-0.755788,-6.085413,-7.820393,8.915245,-6.806479,7.474584,8.256272,-9.757791,9.035345,0.715244,9.524972,-7.558237,-5.432878,-3.827529,1.116584,-9.475403,0.965677,7.756057,0.994937,-8.175696,-4.333808,-8.791477,5.112324,-6.584683,7.423682,-5.049515,0.803789,8.764689,1.893547,-2.059153,-0.654770,-5.822120,4.059259,0.059563,-7.746124,-5.704754,6.884978,-9.689805,-4.658363,2.932767,8.065627,-1.623186,-6.988489,-9.053530,7.088902,7.409648,0.545921,-8.066794,5.301263,4.573289,5.807702,0.554707,-2.099979,5.639614,-3.880028,1.849417,-0.303484,-1.566905,4.596622,-7.735657,5.135767,-5.082767,8.073748,4.956946,6.539928,-1.469550,2.252492,0.441036,-7.083075,-4.073091,-9.015558,-2.348791,3.428124,9.428580,5.954781,7.407829,1.040931,2.018085,-0.653973,-6.121593,-1.660742,-7.933021,-0.935397,5.645934,4.412760,5.703318,0.040601,-9.764725,-9.538309,7.119289,-5.134898,3.628219,4.572293,-2.745065,9.494516,9.944559,-4.244354,3.195364,4.277226,7.100718,-2.232414,-5.157467,-2.464067,-7.232067,2.587017,-3.487926,0.951689,1.282154,-5.525419,-6.421079,-9.535774,2.425879,-8.730215,0.620663,-0.678294,-7.596013,0.105475,-9.048512,4.349930,1.319541,2.255988,-2.133143,6.738368,7.730131,-4.827554,6.976833,1.008027,2.219817,-4.115852,2.732698,2.546210,1.357461,0.447832,-0.254802,6.373863,5.524934,6.223502,0.264335,4.948840,-7.304588,-5.400491,8.271892,3.555245,8.118096,6.015940,-2.229842,-4.122003,-0.686742,5.146790,7.467089,-5.557488,4.497204,-3.946050,-8.894709,2.364810,3.875017,-7.070693,6.526148,9.694462,3.423961,-5.458213,0.484542,-9.449230,-6.800884,-6.756039,-5.415542,-3.414077,-9.041386,-4.421947,-0.315902,-7.734563,9.194868,-6.209257,-5.642188,-6.426273,0.356565,8.300176,3.247642,-4.569505,6.102545,2.813734,5.098434,-9.566136,3.911101,-4.416472,-1.964178,8.632291,0.740725,4.412552,-2.124333,-8.198195,-7.138261,-4.471055,2.923734,8.266032,-0.983165,-3.570876,-9.765001,7.975703,1.029610,7.349692,-5.849644,9.639340,8.463845,2.901093,-4.642828,8.155954,1.705229,6.710705,-1.399782,-8.360568,3.722206,-6.867400,7.365357,9.501580,0.905772,-9.928717,-6.133210,8.328718,-8.656346,2.752705,-6.943690,7.038260,-1.001302,-0.400962,3.488103,5.414085,2.658228,-4.977514,-9.429338,1.488045,2.899614,1.748695,-4.642035,2.736960,-5.991909,4.583109,3.473088,-8.976610,7.267680,-6.801976,1.641299,-1.657522,2.797606,8.552250,-2.797495,2.937195,3.860125,4.938552,7.006300,-4.444702,6.763012,7.034152,7.687579,3.386692,-0.185272,4.149063,7.288553,3.328539,4.691880,-4.276142,8.815514,4.144803,1.308231,-8.141562,4.858921,-4.726302,3.514766,8.433835,8.663578,1.236017,-4.969718,-4.852642,-8.077374,-9.990826,-7.000919,-7.671402,-9.348333,-3.842521,-0.939576,-1.805909,-3.714439,9.776954,-3.456624,-4.490298,0.607534,-3.907539,-2.696119,6.106578,-9.724464,-3.644405,2.155350,-3.426709,-6.950865,6.006601,-1.752918,-1.376457,-5.053282,-4.347288,-5.931373,-4.571245,-1.216733,4.819702,7.417086,-2.199306,-5.178946,9.140953,6.175991,4.244525,-8.365143,-9.328872,6.159183,5.048629,-9.604463,-5.426090,-8.487124,-1.569035,2.132073,-4.533206,5.655859,-3.062850,3.418220,1.599406,-7.133296,2.371285,4.256588,3.846992,-5.401096,-6.078388,-0.163871,-6.454622,9.635091,5.010833,-8.508735,-8.118572,-6.517329,-7.815853,-1.164778,-8.910787,-1.720638,1.394023,-8.744110,-4.776594,-3.085503,7.942071,-9.857713,7.252646,9.360496,-3.078587,-4.759534,0.911544,-1.969898,8.571876,4.172086,5.481955,8.976123,0.367464,5.611423,-2.139954,-7.610400,-7.620131,8.232222,-6.388552,-0.987788,8.373822,6.467197,-2.145592,-2.139381,-0.129542,3.914509,4.998841,9.837342,-4.812727,3.299840,-3.312984,0.154064,-2.137982,-7.137001,8.067209,4.323027,-0.571819,5.147199,-9.808664,-4.715580,9.617663,-0.351505,-7.187278,9.436948,-9.271120,8.989715,-8.277786,9.833734,-4.877687,2.006615,3.620434,-6.456425,-1.589045,-7.600456,1.734685,0.846775,-3.099417,0.134431,7.960797,-6.038848,1.253609,-2.543330,-7.809523,-2.404051,-7.318428,-4.760489,0.484974,9.336408,-7.078835,-6.105872,-8.393787,-8.713854,-2.008885,4.797758,-4.087909,0.922086,0.096497,8.747401,-6.364912,-9.913346,6.032067,-3.592504,6.884476,-6.559843,1.448841,0.272373,3.730038,-5.135677,-9.082388,6.259518,5.287330,-7.158453,1.525214,-8.563498,-4.765529,-7.933449,0.844949,-8.157062,-3.264985,-2.221090,3.072622,5.498627,4.415175,-8.651263,6.360576,-0.595471,3.584755,2.968801,-5.448043,-5.876433,2.231733,5.134045,7.940274,0.401941,-8.580924,6.937182,-7.889658,-8.104527,-8.945885,1.918661,3.452220,2.922305,-0.476976,6.278098,-7.769662,7.089412,-0.240926,2.574309,-9.464994,0.427212,-4.519173,1.923127,3.517464,3.713094,-1.389132,3.119986,-6.652787,-7.464620,8.106926,-0.277865,5.940487,2.117982,-2.937767,6.915526,-9.295144,7.927874,1.160352,1.719020,9.384043,0.196722,8.619824,9.014604,4.326780,-1.346242,5.708066,-9.847707,4.013821,-1.136748,-7.215486,-8.477836,-6.034961,-9.111365,-6.232681,-9.386488,-8.961207,-0.599582,-8.427162,1.078341,1.746902,-3.138701,-1.311674,-7.417154,9.225772,8.738804,-1.457532,-4.263253,-0.979996,2.425415,-9.189939,-8.695667,3.987667,-2.519334,-4.801210,3.397836,1.147581,-5.111598,-4.538739,9.654977,4.381674,-7.544819,3.597078,-7.310952,9.454438,-1.183676,2.838105,-7.534347,2.242811,-0.585346,-8.638638,-5.932641,2.832792,-0.957643,9.252214,2.128962,-0.430734,-3.196477,-8.091273,2.729718,-4.752232,4.123453,-3.946345,-6.955240,-8.717192,8.859834,-3.145248,0.990093,-6.646601,-7.845311,8.790765,-1.596373,1.310106,0.608189,2.939255,6.267545,5.879716,9.536284,-2.247561,5.420357,-6.060234,6.682605,-3.567202,2.029229,-0.598690,-8.653047,1.241756,-3.028105,-7.218805,1.714404,-0.208802,6.022563,8.008947,-1.991825,7.275483,2.409286,-4.696057,-5.136522,4.818779,-9.045926,7.199370,1.376244,3.347256,7.108525,-7.854032,-5.506564,0.311882,-8.185448,-2.007712,-3.637100,-2.244568,-1.839722,4.554906,-0.304033,-2.879197,-4.119027,3.933830,-8.641663,4.543092,-5.652840,-2.472808,3.071197,1.430787,6.712650,-6.424791,8.887690,1.868803,4.319492,-6.931455,5.447921,-5.817213,1.685076,7.208762,5.482004,2.714518,-8.746203,-2.366459,-2.525007,3.429262,9.490755,6.053153,1.892659,-4.436827,2.994455,-8.475554,6.546748,5.378708,-3.075474,4.245772,6.354045,-7.022974,-2.987091,1.872549,-2.842079,-6.107004,-9.867649,-3.637873,-4.859724,0.949424,4.507843,-9.313494,-7.653289,7.930875,7.000019,-0.023186,-4.131373,-1.468005,2.372887,8.459026,3.834595,-4.601898,1.382095,8.050591,7.100580,-1.591801,-8.630243,-1.421847,-8.362527,9.022534,-2.740754,-9.953103,-5.398622,8.995396,5.522242,9.947256,2.896575,-7.631602,-4.807169,-8.669121,-9.049100,8.472310,-3.698920,-2.816764,4.423557,-8.729198,7.442532,-3.771306,7.424129,-7.477730,-8.928646,4.846718,0.054978,3.213167,9.117265,4.556277,-7.513768,-9.784349,-1.925422,8.613598,8.973671,5.344357,-1.056833,-3.149425,-2.608644,-4.492915,1.127695,-4.186486,-6.589250,-1.077352,2.109406,7.031582,-1.175921,-0.435334,-2.764131,5.709888,9.643575,4.411395,-9.273326,-1.348472,-0.761237,-2.954837,-1.322120,-5.886182,-5.825511,6.880292,-9.082769,1.042514,-7.774274,-4.006723,0.375507,-2.782320,-2.451525,-6.372496,-4.669012,5.681859,-4.150340,-2.035685,-0.873778,4.958688,1.019399,3.660913,9.977173,9.207307,-8.108148,1.235864,3.479111,2.304140,7.447863,-7.079765,-8.134010,-1.530929,0.611457,7.399650,5.801624,-5.395446,9.323259,-0.934697,-2.621953,7.545694,0.345778,-4.393557,-1.136465,0.061030,-5.931690,0.016151,4.603706,3.262266,-7.258879,7.824239,6.633108,8.191553,5.664500,8.614036,0.203689,-8.021000,3.378692,7.758193,-2.554391,9.625640,-0.252335,7.117321,-2.967173,4.096214,-6.313551,-2.813234,-2.770151,-1.894481,-3.998980,-4.178365,-2.784633,-6.362414,6.661550,-7.129797,-6.982758,-1.341362,-9.065556,5.329541,-2.849378,-2.198070,9.893192,-3.888315,-0.407589,5.495105,5.973619,-4.607253,-4.965853,0.467949,-5.636059,-0.575117,-0.975605,7.588334,-6.685536,4.595492,5.504389,4.839565,9.561134,9.341480,9.933981,-3.392612,-4.963389,-1.041933,5.652300,-8.821663,6.099864,3.386458,-3.598212,7.406034,4.890394], dtype = "float64")#candidate|306|(840,)|const|float64
call_302 = relay.TupleGetItem(func_93_call(relay.reshape(var_292.astype('float64'), []), relay.reshape(var_303.astype('float64'), [13,]), relay.reshape(const_304.astype('float64'), [7, 13]), relay.reshape(var_305.astype('float64'), [1456,]), relay.reshape(var_303.astype('int8'), [13,]), relay.reshape(const_306.astype('float64'), [14, 10, 6]), ), 11)
call_307 = relay.TupleGetItem(func_100_call(relay.reshape(var_292.astype('float64'), []), relay.reshape(var_303.astype('float64'), [13,]), relay.reshape(const_304.astype('float64'), [7, 13]), relay.reshape(var_305.astype('float64'), [1456,]), relay.reshape(var_303.astype('int8'), [13,]), relay.reshape(const_306.astype('float64'), [14, 10, 6]), ), 11)
var_308 = relay.var("var_308", dtype = "float64", shape = (6, 4))#candidate|308|(6, 4)|var|float64
bop_309 = relay.minimum(bop_280.astype('uint8'), relay.reshape(var_308.astype('uint8'), relay.shape_of(bop_280))) # shape=(6, 4)
const_312 = relay.const([[8,3,4,-7],[-1,1,-4,-9],[5,-2,-8,-10],[-6,-3,2,-8],[-2,10,-3,4],[-7,-7,-9,-6]], dtype = "uint8")#candidate|312|(6, 4)|const|uint8
bop_313 = relay.floor_divide(bop_296.astype('float32'), relay.reshape(const_312.astype('float32'), relay.shape_of(bop_296))) # shape=(6, 4)
var_316 = relay.var("var_316", dtype = "float64", shape = (6, 4))#candidate|316|(6, 4)|var|float64
bop_317 = relay.subtract(const_278.astype('int16'), relay.reshape(var_316.astype('int16'), relay.shape_of(const_278))) # shape=(6, 4)
output = relay.Tuple([bop_288,call_291,var_292,var_293,bop_299,call_302,var_303,const_304,var_305,const_306,bop_309,bop_313,bop_317,])
output2 = relay.Tuple([bop_288,call_294,var_292,var_293,bop_299,call_307,var_303,const_304,var_305,const_306,bop_309,bop_313,bop_317,])
func_320 = relay.Function([var_292,var_293,var_295,var_303,var_305,var_308,var_316,], output)
mod['func_320'] = func_320
mod = relay.transform.InferType()(mod)
var_321 = relay.var("var_321", dtype = "int32", shape = ())#candidate|321|()|var|int32
var_322 = relay.var("var_322", dtype = "int32", shape = (1, 15))#candidate|322|(1, 15)|var|int32
var_323 = relay.var("var_323", dtype = "int8", shape = (6, 4))#candidate|323|(6, 4)|var|int8
var_324 = relay.var("var_324", dtype = "float64", shape = (13,))#candidate|324|(13,)|var|float64
var_325 = relay.var("var_325", dtype = "float64", shape = (1456,))#candidate|325|(1456,)|var|float64
var_326 = relay.var("var_326", dtype = "float64", shape = (6, 4))#candidate|326|(6, 4)|var|float64
var_327 = relay.var("var_327", dtype = "float64", shape = (6, 4))#candidate|327|(6, 4)|var|float64
output = func_320(var_321,var_322,var_323,var_324,var_325,var_326,var_327,)
func_328 = relay.Function([var_321,var_322,var_323,var_324,var_325,var_326,var_327,], output)
mutated_mod['func_328'] = func_328
mutated_mod = relay.transform.InferType()(mutated_mod)
var_330 = relay.var("var_330", dtype = "float32", shape = ())#candidate|330|()|var|float32
var_331 = relay.var("var_331", dtype = "float32", shape = (15, 9, 1))#candidate|331|(15, 9, 1)|var|float32
bop_332 = relay.subtract(var_330.astype('float32'), var_331.astype('float32')) # shape=(15, 9, 1)
bop_335 = relay.floor_divide(var_331.astype('float32'), var_330.astype('float32')) # shape=(15, 9, 1)
bop_338 = relay.add(var_331.astype('int8'), relay.reshape(bop_332.astype('int8'), relay.shape_of(var_331))) # shape=(15, 9, 1)
uop_341 = relay.log2(var_330.astype('float64')) # shape=()
bop_343 = relay.floor_mod(uop_341.astype('float64'), bop_338.astype('float64')) # shape=(15, 9, 1)
uop_346 = relay.cos(var_331.astype('float32')) # shape=(15, 9, 1)
uop_348 = relay.acos(uop_341.astype('float64')) # shape=()
uop_350 = relay.erf(uop_348.astype('float64')) # shape=()
bop_352 = relay.greater(uop_350.astype('bool'), var_330.astype('bool')) # shape=()
const_355 = relay.const(False, dtype = "bool")#candidate|355|()|const|bool
bop_356 = relay.divide(bop_352.astype('float64'), const_355.astype('float64')) # shape=()
uop_359 = relay.acos(uop_348.astype('float32')) # shape=()
var_361 = relay.var("var_361", dtype = "float64", shape = (15, 14, 11))#candidate|361|(15, 14, 11)|var|float64
bop_362 = relay.power(uop_350.astype('float32'), var_361.astype('float32')) # shape=(15, 14, 11)
var_365 = relay.var("var_365", dtype = "float64", shape = ())#candidate|365|()|var|float64
bop_366 = relay.floor_divide(uop_348.astype('float32'), var_365.astype('float32')) # shape=()
var_369 = relay.var("var_369", dtype = "bool", shape = ())#candidate|369|()|var|bool
bop_370 = relay.floor_divide(bop_352.astype('float32'), var_369.astype('float32')) # shape=()
bop_373 = relay.power(bop_366.astype('float64'), bop_356.astype('float64')) # shape=()
bop_376 = relay.logical_and(bop_366.astype('bool'), var_330.astype('bool')) # shape=()
uop_379 = relay.sin(var_365.astype('float64')) # shape=()
bop_381 = relay.bitwise_or(uop_341.astype('uint64'), bop_366.astype('uint64')) # shape=()
bop_384 = relay.multiply(uop_359.astype('int32'), const_355.astype('int32')) # shape=()
uop_387 = relay.acos(bop_370.astype('float32')) # shape=()
output = relay.Tuple([bop_335,bop_343,uop_346,bop_362,bop_373,bop_376,uop_379,bop_381,bop_384,uop_387,])
output2 = relay.Tuple([bop_335,bop_343,uop_346,bop_362,bop_373,bop_376,uop_379,bop_381,bop_384,uop_387,])
F = relay.Function([var_330,var_331,var_361,var_365,var_369,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_330,var_331,var_361,var_365,var_369,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_330= np.array(3.500004, dtype='float32')
module1.set_input('var_330', input_330)
input_331= np.array([[[6.527122],[-4.337781],[-2.185503],[1.866172],[9.679313],[-7.474989],[-3.870855],[0.956667],[-3.586481]],[[8.319875],[5.606937],[-2.511986],[-4.376013],[-7.685368],[-8.004940],[-5.364974],[-3.304358],[2.496181]],[[-3.795851],[4.367700],[-2.871840],[-3.635901],[0.286437],[9.957479],[-3.348354],[5.452953],[9.815718]],[[-7.914375],[-4.441851],[5.813618],[-5.181977],[2.268486],[-7.859179],[8.030025],[7.166115],[5.457906]],[[2.284979],[-0.862122],[1.903326],[-6.819394],[-6.359379],[5.049042],[-8.230797],[1.571306],[-2.012716]],[[8.851613],[-5.546057],[4.578010],[6.223115],[-0.624685],[1.595192],[-1.244930],[1.473217],[-0.539006]],[[0.130984],[-3.001330],[-5.447255],[0.403373],[0.568978],[-0.547751],[3.723748],[-3.222702],[-4.490441]],[[-7.806765],[-4.938293],[-2.692726],[-9.455241],[-2.353377],[0.997227],[-7.856763],[-3.758532],[-7.985669]],[[1.277719],[4.378309],[9.189842],[-5.869818],[3.064349],[-9.915904],[2.045244],[1.473985],[3.903922]],[[6.734461],[-3.283399],[3.886405],[-5.450819],[-4.714599],[-1.501423],[-7.844151],[-7.401022],[-2.304528]],[[2.087146],[-7.703505],[9.874588],[-2.776993],[-2.787316],[1.799705],[5.440714],[4.298677],[-4.981572]],[[2.278947],[3.741648],[8.949896],[-6.089299],[2.727994],[6.713253],[-1.962448],[-2.189882],[9.483949]],[[-5.386015],[-8.598581],[5.812830],[-5.040554],[4.402436],[6.376303],[7.834685],[-7.104798],[-4.366248]],[[-1.504770],[6.532067],[-6.308867],[-7.987230],[9.160955],[7.890042],[-7.718743],[-0.267819],[-1.022592]],[[-0.614114],[-8.373436],[7.047256],[-6.973955],[-3.856043],[7.067133],[-3.303912],[-8.869213],[2.363875]]], dtype='float32')
module1.set_input('var_331', input_331)
input_361= np.array([[[4.719944,6.892039,-5.249928,5.457043,-0.619161,-3.477548,-3.308244,-3.548379,-8.807337,-5.824406,-6.639361],[5.468572,9.911591,7.836342,-1.246194,-8.126499,-1.639338,-2.910307,6.997009,-4.726618,-3.143781,-5.050296],[1.562100,8.717363,-3.682079,-3.887574,6.525812,-5.399756,-6.559645,-4.093963,-4.954037,-4.003855,-1.929527],[-3.422781,-5.548412,-6.644554,2.744698,7.220140,4.647998,-0.658578,-4.635114,-5.654425,-6.579544,0.592856],[-5.292784,3.701597,-1.455439,-9.948222,0.645363,-7.675038,7.167886,-3.682411,-9.292925,4.147119,-1.623045],[7.439931,3.083742,-2.695946,2.609888,-7.494211,3.091346,-5.188020,3.163456,4.221768,1.325843,-9.328722],[-7.329976,6.345616,5.302411,-8.417390,-5.886045,-4.343717,2.524185,-3.233600,-2.861471,-1.519220,-3.636764],[-2.649983,2.763172,-1.397389,3.921243,5.683426,4.514200,-9.714354,-1.915258,5.422828,2.500632,-8.145001],[-1.645070,9.404133,7.529686,5.477911,-2.752594,7.663384,6.175870,3.726953,-5.273358,-6.601267,5.992241],[-9.352824,3.095093,0.226297,-0.183117,1.051786,-9.693604,7.188904,-0.126613,7.687959,-8.243129,8.039232],[4.128162,0.112744,8.825318,2.156009,-6.103056,-4.374411,7.467966,-8.445931,5.629130,2.163513,-6.962937],[9.637157,3.544177,-4.787709,1.216377,1.268194,-8.612407,5.471783,-2.198953,-1.170524,-1.582680,-1.110787],[-1.254455,5.361210,-5.232412,1.798939,-1.254935,4.771633,-9.293767,1.179458,2.930626,-9.057667,6.836689],[-6.789492,-7.830149,8.453050,2.477351,9.853963,-3.974239,-9.474391,8.466874,-4.150972,-7.866430,7.205124]],[[4.001649,2.353623,5.272091,-5.743373,5.790771,-7.645087,1.868122,-8.779474,5.911793,1.103441,2.091088],[-4.947603,5.420687,-9.418011,-8.399565,-4.218856,-4.876312,5.021987,5.580189,1.956224,-6.134634,7.638605],[9.125628,-5.596764,6.037148,-6.483830,4.343311,8.459377,0.194268,0.995428,3.671158,2.109560,1.264056],[5.186390,-1.716060,2.886191,-5.423643,7.766414,-4.448815,-9.482038,5.928569,-2.402664,2.406992,4.264326],[3.709115,-9.745043,6.194261,9.802663,-2.498450,4.234427,8.210914,4.593007,3.963165,9.840516,7.265353],[8.855032,-3.663423,2.214763,9.288653,7.787184,9.127407,7.656744,9.106405,6.271909,7.592724,9.590287],[1.650865,-6.552710,3.532902,2.305988,9.298498,0.725285,-8.848543,8.952042,3.090433,4.623704,0.049323],[0.964817,4.602055,-2.895113,-5.184181,2.318281,6.882130,-0.888878,9.632625,6.680863,9.641516,-7.122059],[5.039373,9.793915,-6.873874,-7.370673,-8.864353,2.375249,-5.237043,-4.584592,6.943437,9.153596,-4.027677],[9.171795,1.688643,-1.824733,7.426415,-1.981741,3.093690,6.207527,-6.962049,4.973573,-5.953586,-1.253501],[-5.190246,0.739903,-9.260643,-8.143373,-0.237795,-6.614039,-9.425866,-8.719303,-0.462480,3.735430,3.492834],[8.746361,-0.618983,-5.581093,9.660874,4.883963,8.003673,7.185383,1.421047,-8.200124,4.217234,2.834844],[-0.754396,9.305993,0.345773,-2.197876,-2.532519,-8.164638,-0.259789,6.817995,-6.164834,4.541964,9.290127],[8.995631,1.343336,-9.816114,5.222471,-9.034852,-1.047213,-6.847779,-0.095705,-1.977822,-2.951349,5.660210]],[[2.892358,8.231470,-6.173654,0.351550,9.991867,-8.048231,9.631753,-4.636441,5.503318,-2.971645,-1.225863],[5.667888,2.286799,3.062081,-2.366433,-2.894015,4.674285,1.867284,-1.045437,3.551456,-3.276809,-8.292563],[4.424420,-2.322877,-2.349223,-5.524565,8.545353,6.280254,1.896344,-4.497050,-0.998285,4.483290,-2.757350],[7.119560,0.374042,7.745025,-5.903242,6.736481,-6.497252,-4.243510,-8.425195,1.404886,-0.738020,-8.904734],[-7.749050,-0.822194,5.734680,-4.904770,-3.048939,4.825237,0.297997,5.326106,-4.712325,7.883729,-8.916902],[4.416603,-8.614387,-4.277806,-5.521658,-4.026252,-9.508649,9.689656,-9.142303,2.523374,2.375647,-3.688049],[5.529718,-7.125659,2.283728,-5.634030,-2.721704,-7.578613,6.607159,1.714334,-2.935243,-4.744772,-1.025587],[-5.805885,4.048321,-0.103489,-3.378066,0.477007,-9.128764,-7.089233,2.992802,-8.021535,-8.906670,-5.555715],[3.125921,4.155452,1.084037,-5.387764,7.440770,-2.403837,1.253796,3.033704,-7.611200,6.831242,3.401841],[-2.024305,6.429092,-3.299417,8.077263,7.997435,-3.385202,-5.834249,-5.265209,-5.164826,-1.687305,-3.820475],[7.172606,3.464782,3.384724,-9.105834,-5.780854,2.816335,8.592274,-0.851685,1.535709,-6.738986,-9.632473],[0.205745,2.401602,4.658020,9.180531,2.956925,1.841298,-4.325780,-8.067061,0.322206,4.159718,-0.300829],[-5.247549,9.609608,-4.082255,-4.605451,2.432004,9.912549,0.742805,-4.405835,-8.249016,4.120177,-9.363493],[-9.219635,-2.202463,-0.071005,6.128941,0.504005,6.579424,6.045886,-5.394256,-8.842517,8.471716,-6.891305]],[[-8.395923,6.339550,1.143756,5.137109,-3.850847,-4.511061,9.878480,-0.645615,3.451418,1.197257,5.921059],[-6.954216,-3.490244,4.104698,-6.596627,-6.210826,-6.947521,6.282216,-9.899108,0.986539,0.036390,1.374870],[-4.640659,1.020511,2.087409,-3.294390,6.446520,-6.865681,-9.700471,9.319077,-5.283868,6.433715,-3.096449],[-3.334938,3.018797,0.873721,4.972061,-1.234576,4.268574,7.752388,-9.326509,8.510011,-3.103735,6.496350],[2.669713,0.839398,-6.327717,-9.697147,3.748538,0.163280,-4.878153,8.285033,1.639162,-8.370724,3.513348],[-4.406062,3.826209,0.415744,9.062798,-0.560273,-3.982317,-8.987043,3.222128,4.367362,0.429853,3.004662],[0.988734,9.766091,-9.362715,3.951965,0.098677,2.703639,1.775224,-0.711184,7.346813,6.893345,-4.842610],[-0.838560,-4.137530,9.916084,-7.015368,-4.431405,0.277497,5.328504,0.837315,-9.759056,-4.334452,6.199715],[-9.696580,-0.965541,4.478750,0.551349,-9.707557,8.210125,8.096608,-8.115736,3.708566,-4.330963,5.821324],[7.943661,-4.287657,6.338175,5.430148,3.832164,2.470176,-4.983683,9.247631,-1.101353,8.941545,0.239839],[-9.685678,7.085731,-6.502226,0.687405,6.796906,-8.391601,-5.157911,-8.510886,-1.514668,5.975428,5.515237],[-1.927599,-5.247727,-4.230553,-9.696130,-8.099679,-3.610447,3.641771,4.032180,-9.546616,5.364100,5.037137],[-1.097291,9.796472,6.757348,-4.423897,-2.203592,7.200717,-1.767479,9.567533,1.568398,8.732211,0.776771],[-6.735324,5.225942,9.986411,7.909651,-2.632388,-8.572596,9.973124,4.570944,-1.165275,-5.702311,-6.669784]],[[-8.542753,-8.113824,7.757321,0.867483,-5.536299,-4.468244,-2.550634,-4.680283,-0.106194,7.912631,-8.274303],[-7.920526,7.142619,-1.412751,-2.067966,-3.811115,-0.585043,8.421946,-0.975267,-3.602272,-6.378797,7.851085],[-2.479578,3.272145,-3.405595,4.047682,4.350605,-9.386317,-7.825900,-7.711506,2.922538,2.432632,8.806045],[-3.339812,3.689267,-5.394074,3.610466,-5.921494,2.162407,-4.748229,3.646442,2.785405,4.899909,1.514410],[-2.706354,-8.255838,-2.790761,8.087441,-9.481318,9.481918,-9.954884,-0.803996,7.588525,4.247245,-9.362901],[1.531672,2.123183,-3.070963,-8.773116,-6.872971,3.070435,8.651118,3.470305,-9.639641,-7.189527,7.462464],[9.962957,-1.076886,5.740007,-3.466517,8.420518,1.723081,-2.027243,0.694170,7.596071,9.720470,-8.824038],[-1.274035,2.862536,-6.019094,-1.840282,-4.309700,0.564968,8.357641,-7.611564,-2.681333,4.246610,-6.627657],[6.239485,-6.583306,0.595673,1.035230,-0.178408,1.514751,-4.481240,5.338545,-3.046719,1.398219,-8.350685],[-9.027151,-9.926170,-0.271715,-5.058794,0.758166,-4.463228,-0.956988,2.571994,-0.039092,6.618656,7.321560],[6.386902,-7.966185,-8.833600,4.755453,-5.280758,8.422510,-7.698063,-2.476637,-1.857358,-3.842938,-9.186579],[-7.127239,-0.145949,2.381059,3.684626,-2.760471,-4.668512,-3.281854,-9.641408,5.420712,5.340603,4.994559],[7.016705,-2.211417,6.845961,-4.547128,9.312333,1.195576,5.006214,2.267613,7.642599,5.485692,-9.897063],[-2.232861,3.234848,-0.347156,-5.547876,-9.040636,2.219356,4.659795,2.067211,-1.108377,-2.054046,3.573259]],[[9.646050,-8.324803,-8.276946,-5.549074,6.350445,9.754302,-9.682598,9.815522,1.728466,-5.028595,-7.829200],[4.608880,-6.467192,-8.372820,8.778578,-2.092438,-3.193781,0.449790,7.918565,-4.010381,-4.662056,1.693098],[0.814435,4.361885,1.530029,5.435799,8.479084,6.268921,1.177327,-2.141690,7.458793,0.905890,-5.637075],[-1.116981,-5.977276,-4.435367,-5.643613,2.725228,5.643299,-6.809475,4.211870,-7.717778,-1.746458,-1.738505],[-2.528154,-1.638840,8.234729,5.260920,-9.294520,9.621266,-4.183793,7.860657,-4.556396,-3.847027,7.606669],[-3.946901,4.592064,9.963121,-0.330487,0.567807,5.007166,0.270736,4.534783,-8.752434,-3.486729,-0.100643],[0.709564,-1.239366,-8.941831,0.141367,9.559334,-4.202701,5.589866,0.413244,4.916351,-4.994008,-6.146805],[-9.930577,-6.425727,-6.286166,-2.836534,-3.320753,-7.468388,2.479875,8.020657,5.736212,-2.005272,7.512522],[4.327060,-2.715660,9.702264,7.909908,-5.269618,3.028974,-6.484023,4.674991,-8.669346,5.602442,-6.261717],[-2.739192,3.533814,3.179960,8.389420,8.162305,2.552237,-7.953277,-7.378139,-7.087778,7.793023,-6.699295],[4.556156,-3.921252,6.510171,0.853000,6.197134,3.496835,0.940911,-8.776303,-3.583680,8.085488,8.594731],[-7.215941,-5.757348,-5.731305,4.304226,2.636992,0.010215,-0.740423,5.603083,-5.170680,9.973533,-9.476780],[-2.674408,-3.308969,-1.744774,-8.689781,9.082836,-2.878714,-2.935226,3.006445,0.981550,-2.986958,-1.892439],[2.577286,-0.720750,-3.621850,6.335129,-6.869282,-0.416605,-1.561260,0.738217,-4.697624,-6.316620,-7.022359]],[[-0.794882,-8.806550,-5.940149,-8.572649,6.244768,3.031218,6.231391,-9.614969,-3.285385,1.258917,5.028965],[7.191584,-4.395536,9.023051,-5.491153,7.008662,7.290265,-3.659972,1.567587,-5.532249,-1.163128,-8.203056],[-7.996534,7.061324,-3.807416,7.121524,-8.003896,-4.873171,-1.162196,4.160683,6.087120,1.734566,-0.116826],[-4.472792,-7.320390,6.219161,-4.497391,8.713861,-1.840933,7.337205,8.650801,-7.537828,-2.175434,-3.254784],[-9.410265,8.306829,1.575050,-8.635093,5.623156,1.740277,0.939155,-8.763162,-7.536064,-1.922463,-5.990035],[8.083532,-9.630763,-5.069024,-2.079944,-2.084618,-8.424398,-0.386328,-0.817029,-4.600431,-0.395786,-5.199748],[-9.104085,9.043905,-1.659106,6.214723,-0.782245,-1.933699,-7.845902,5.829921,4.449433,2.435322,9.134947],[3.128249,-5.112009,7.010449,0.587944,-0.803165,2.520359,6.971586,-2.499492,-4.880581,2.948378,6.434708],[9.267820,7.498562,-6.306280,3.055344,-3.711119,-2.864915,-4.495797,0.040411,2.081261,2.816662,-9.275466],[-9.404038,8.741876,0.279875,8.450387,-6.559971,6.541827,0.103390,-6.687217,0.137212,-0.551704,9.487256],[-7.918638,-5.363549,-2.936628,-4.359937,-8.378829,3.131219,7.178508,2.635210,-5.588218,-1.408606,1.204814],[6.273685,-0.503987,-0.446103,-9.799831,4.473076,8.821597,-2.955412,6.349312,-2.346872,4.183159,4.462550],[-8.991030,3.365965,-5.863680,-5.838554,-9.157422,1.638628,-0.989948,4.494106,7.568515,1.170231,-8.438953],[-2.147971,-1.692960,-6.676527,6.106661,3.371947,-9.518487,-0.594986,-2.932200,-6.221385,-3.896437,0.706419]],[[3.135192,-0.125351,4.304316,8.857692,2.465742,4.174966,-5.747380,-5.898032,3.554178,0.615033,-5.861160],[-7.144661,-6.295477,8.396018,-6.056674,-5.610753,2.402096,-2.495406,-8.232747,8.346414,3.793415,-1.698357],[-8.362388,9.182288,-7.849190,8.632630,-2.542284,9.884052,-2.335683,-1.417328,3.242734,-5.802748,2.767223],[8.520985,5.456524,0.632413,5.946639,-6.580941,-4.590751,9.127001,2.549821,-2.876755,-8.066278,-4.220342],[-5.218447,6.396130,9.355866,1.060137,-4.435525,0.702616,3.014312,-7.094427,-0.738541,-4.039168,5.811130],[4.192027,-0.791729,-9.724560,2.030185,5.532439,9.849902,6.674167,-6.704095,9.369447,0.092420,-1.804629],[-1.549576,0.796782,-0.728493,0.200169,6.789548,-4.887441,-5.809784,-8.497601,9.573460,-0.913705,-6.186579],[-4.364863,-7.965366,4.191428,-4.013603,-1.569974,-9.589250,4.928639,8.600109,-7.838328,3.586260,-2.948782],[-4.668662,6.298441,-2.692792,-2.245383,2.655273,4.670022,0.810129,4.618591,3.279474,-4.609475,5.405012],[-1.561502,-1.728911,9.049850,2.899392,-1.894843,-8.488591,9.856327,5.737544,3.445397,-3.053688,-1.294095],[0.359142,3.541811,1.196077,-6.331907,6.050379,9.481994,-3.294337,0.321456,-5.149703,4.204822,2.156589],[1.983937,-7.059413,9.711728,1.661185,-6.503703,8.855396,4.132833,5.622224,0.094880,-9.582684,8.936998],[7.210812,-0.025384,-5.839409,-1.811532,4.078181,-6.705427,-4.978372,-6.558793,5.970099,-4.253693,1.367655],[1.664621,-2.605900,8.478853,4.894871,8.495256,-5.915669,-6.309550,4.240069,-4.599794,-5.307483,-4.858161]],[[2.964268,-9.093648,-6.288664,1.663496,5.393530,-3.623419,-2.615971,-2.039667,-4.653176,-4.661449,-2.811638],[9.616097,-5.247582,-7.191865,-1.073075,0.921194,3.817549,-9.586571,4.707655,1.556664,-1.110267,-2.970668],[-8.435617,-7.283365,-4.552783,5.008740,8.141871,-2.822198,-6.496299,-3.255004,9.688293,-5.758002,-7.532602],[-0.298187,1.861623,-5.027196,-9.809546,-4.575370,4.867220,1.928507,2.015998,-7.679734,-4.800420,-1.139526],[7.848155,2.091106,2.813920,-9.305297,7.545944,2.230245,-4.437867,-6.946046,-7.963762,9.668895,-9.137224],[4.770978,0.200774,-5.412621,-0.723179,0.153298,-5.746858,-6.492573,-9.719617,3.939039,-3.053685,-3.070694],[-3.616094,9.595707,0.279678,-4.183572,3.465091,-5.050742,-4.381738,-2.397089,9.603991,-8.437187,2.321440],[7.408769,2.922846,6.688341,5.060834,4.281164,-8.247830,-4.942465,1.952365,7.472454,-8.092160,-4.257129],[1.438451,4.788064,-4.660370,-6.852151,7.426470,9.335951,-1.915943,-8.720141,5.423984,4.174762,-4.559802],[8.496962,-7.516888,-1.336715,-6.379910,5.210087,-5.328848,7.551565,2.979991,-2.729198,4.662519,6.895224],[-4.389996,-6.862222,4.856820,2.147843,8.262168,-7.167771,-5.256336,3.093193,2.680409,-0.670329,1.627295],[-2.719455,8.631365,3.768421,-6.685369,-7.407169,-4.077398,-0.105946,-6.987214,7.842647,7.388087,1.420313],[4.426326,-5.040148,-9.872146,-6.181246,-9.165462,-6.256591,6.109748,7.160708,-0.028023,-3.696304,-9.936150],[0.020359,-2.461112,-5.547930,-8.904422,5.508445,-0.763269,-6.664641,-6.084355,1.773924,0.211745,-5.582226]],[[4.146900,-4.885922,2.399277,0.668302,-1.787598,-6.943268,1.545352,-7.212948,7.908226,8.124439,4.655357],[-0.271525,-5.337388,3.978364,8.252846,-1.477673,6.353074,-8.981077,0.256087,-1.432440,-7.767257,6.328751],[0.990235,4.374191,6.767662,3.370287,-3.979155,6.040219,3.887611,-4.407940,-5.366425,0.056512,-2.702688],[2.988299,0.525108,6.040159,-3.865312,-9.253246,-2.929439,-7.894907,-2.523017,-4.624655,4.024243,-2.545284],[-8.132459,5.237814,3.810080,-4.791516,1.173052,-1.628982,5.308187,-4.263375,-1.586062,-4.305771,9.232772],[-3.667638,-9.824518,-3.410177,-4.033770,-7.534726,-6.352061,-8.277963,-8.325192,3.874489,-7.830609,3.200477],[9.673306,5.799006,-3.512034,-1.236116,2.068309,2.097523,0.156198,8.910539,-9.807019,6.546289,-9.279266],[1.007215,-9.559123,-6.055838,-1.388515,9.427009,3.578588,3.911840,-5.914119,6.456378,-8.044425,2.269195],[1.707432,-0.593161,-7.897592,-5.252190,8.344624,0.045461,-4.804626,-8.422840,5.299587,-0.552147,-3.086036],[-4.310681,5.580648,-2.067757,6.938490,4.663660,6.224583,-6.312705,8.110550,-9.143833,-5.564207,1.102552],[0.679462,2.708412,5.182797,0.216620,2.771090,-7.729808,-0.346483,9.753699,-6.217048,-7.923157,-7.925771],[4.596308,1.240726,-7.173844,9.020186,-5.667029,4.432054,-6.453964,2.356872,-9.846375,8.641377,2.004273],[-5.770832,0.986719,4.355670,-4.170379,2.055905,-4.315008,2.536834,-1.440704,-6.471374,7.006467,2.324435],[-3.336920,5.861942,3.813042,0.141412,-2.738409,9.813289,-0.845466,2.210676,-9.628897,-0.866027,9.214046]],[[4.769515,-2.138381,-0.054301,2.277223,6.730843,-2.547318,4.409670,-9.514319,-3.623028,-8.444601,-6.956058],[3.661254,0.481615,-3.784247,-8.944383,2.615348,-3.715182,0.489456,1.374327,-6.775178,-5.540288,2.645833],[-4.346266,-3.588323,2.552561,6.369816,8.419814,2.774492,-9.183069,-0.010699,-8.790734,9.520460,1.366467],[4.068553,9.780950,-3.259049,9.981982,5.608729,4.398276,-2.918269,-4.539435,-3.842622,-2.514806,-2.049519],[-3.343775,8.051362,-5.926629,9.792931,5.238826,-0.912231,-2.464621,-2.769340,7.939171,0.366136,5.518584],[2.581966,4.013173,7.544592,8.868298,4.660666,-0.775894,-6.682260,6.008565,8.072879,5.912354,4.126472],[-0.525767,6.455078,-9.679803,-6.317006,-3.679529,0.132774,4.072740,-0.964941,7.954149,-4.393512,-7.907937],[-4.966504,-3.031649,2.101172,-9.744574,2.348752,-5.818845,-0.908613,-0.565206,9.254587,-0.726750,-3.759250],[4.673290,-5.877044,-9.876419,4.381469,-6.357283,-8.071913,8.349932,-2.063019,5.494476,-8.008897,-6.187782],[-6.346434,4.514414,2.127702,-4.728968,1.009146,-2.260203,-5.937716,4.682558,-5.654257,-8.592287,-1.807708],[-4.757992,6.673707,6.289367,7.126694,-7.826504,-0.837273,2.256359,5.315611,2.791698,-0.418789,-3.022533],[2.857225,-7.009189,0.551353,-0.560056,-6.150085,-4.804884,-1.795621,2.434264,1.647523,6.639263,5.914545],[-6.205771,2.934659,6.271917,2.986558,-4.807581,9.756143,-3.904807,4.644450,7.523575,6.428308,9.476667],[0.128901,-4.590970,-4.086278,-3.296536,-7.518730,-7.191896,-2.704008,5.419633,-2.232817,-5.739550,-5.725648]],[[-3.742584,-4.459758,7.007966,-6.238574,2.964520,5.526148,-9.296673,-1.185710,0.661543,3.697005,-5.848264],[-6.655240,-3.863144,1.352641,-4.502411,1.091851,-4.330381,-3.815506,-1.891630,-0.377038,-0.596948,6.277626],[-3.550703,3.617885,-8.107093,4.028778,5.747259,2.182851,-2.603816,-1.684609,-6.320781,-1.538330,2.685627],[9.894406,0.795842,-4.713233,7.211553,-2.984082,3.560398,-0.890724,7.388912,-2.773173,4.171703,-9.903971],[-7.656658,-9.985139,-0.108415,9.412508,-4.175189,1.812872,4.384279,2.760951,5.461831,-7.776278,-6.294086],[1.155911,-4.148080,-3.363221,3.082928,-1.148942,4.490561,-2.629514,2.911219,-0.405335,-8.570181,8.367857],[3.607656,6.556411,-1.255761,7.625830,-6.858344,-9.188681,-2.610287,-7.385706,2.004321,9.825042,8.588645],[7.173980,-0.979320,-5.412201,7.542431,-5.099113,8.475153,-3.964215,5.447284,-2.633153,-7.251171,-6.345456],[5.769333,-8.261311,5.441268,0.599583,0.993577,2.088275,-7.308148,7.831690,6.570824,-1.249177,7.763626],[1.626972,-2.166849,-7.174403,-9.830530,7.305349,8.170632,9.616217,-6.556820,9.977357,9.882816,3.108990],[7.120999,7.265499,-2.479394,9.268938,-9.724019,-5.593893,-6.927340,9.557048,2.476042,-4.014819,-7.439514],[-2.286743,-7.927320,3.094050,-2.049815,-1.164348,1.825036,3.449788,7.361709,8.897420,0.953457,4.374429],[-5.348256,-0.877395,0.820952,-1.730185,-2.974350,-0.726579,-7.782262,-9.191068,-9.992207,-5.096389,1.227567],[9.450425,-2.933665,-2.787719,-3.826573,0.541281,7.401264,4.757592,-2.622331,-5.623098,-9.214560,-8.958572]],[[-7.564330,8.547596,9.166003,-3.993923,9.866177,6.788465,-2.195808,8.394232,8.797891,1.145198,2.980695],[-0.133958,-2.439889,-3.612920,9.573000,-9.375121,-1.892406,1.820598,7.188828,-8.397902,6.683423,6.689850],[5.066959,7.327666,1.462060,3.055615,4.375167,2.915012,4.031625,-9.203851,-6.252967,-1.329241,-8.802576],[-8.058211,-0.917319,7.342577,-1.860340,8.475115,4.159178,7.597470,-0.502864,5.502426,-9.365619,1.486325],[3.941870,-6.156576,-9.376388,-4.042953,-8.211939,6.271758,7.696945,5.698823,8.933980,8.653696,2.911307],[2.919885,-9.329445,5.410771,3.539333,-8.407444,-8.414658,-2.385838,1.582859,0.863898,4.481769,-2.146254],[0.460888,0.449286,8.349053,-0.484471,1.931264,-5.434899,-2.984990,-1.244429,-1.567726,-5.936942,5.885766],[-5.226981,0.493203,1.548686,-3.287897,4.763932,2.323999,-2.666320,-1.860019,6.037727,-9.269247,6.432283],[1.878598,9.380020,-9.974358,-5.648327,-4.795245,-5.635107,-0.458168,1.656314,-2.384413,6.531682,5.007555],[-5.540550,-9.558766,1.663719,8.424695,8.777483,-5.149623,-6.856904,7.239524,-8.165977,6.671957,2.235768],[-1.061841,-2.836078,-4.384073,-1.229277,5.204888,2.507555,-4.836328,9.061579,1.682746,-1.482424,6.770641],[-7.015480,4.346131,-8.277909,0.675007,5.509238,-8.036200,-5.474450,3.895430,-5.401663,6.469290,-3.995131],[-0.317727,1.629354,-4.898260,0.137720,5.972030,-3.502327,3.507410,4.801039,3.194625,-8.311931,5.840071],[-0.816014,-4.640100,0.369667,-1.468288,7.667120,2.790799,-2.343040,0.170257,9.986390,8.286340,3.591423]],[[2.066694,8.135185,2.293882,-5.484816,4.199115,2.752865,-1.062190,2.684802,-8.343789,7.649435,-4.495427],[-9.072185,-5.646254,-6.314796,8.779176,-3.665841,-0.694117,8.685564,1.187071,-0.538475,-0.652677,-9.017091],[1.613388,0.905802,4.314347,2.900222,-2.724853,4.090050,-5.517298,-9.983943,6.561680,-4.151672,8.704438],[-6.755152,6.905754,6.245038,-7.419883,-0.949204,1.251646,-7.848983,1.753487,-3.895270,5.039967,-6.159507],[3.505560,2.564263,2.632264,1.689029,-5.044332,1.719705,-8.563486,4.116584,2.222859,-8.731272,-4.623397],[4.928956,7.266450,6.350070,7.150672,-2.311667,0.100234,0.215655,6.628201,1.643088,-7.986956,0.009769],[0.284177,-0.755426,5.204159,8.546664,8.744000,4.239971,5.927771,3.223224,-9.184597,6.739712,8.982350],[-2.315492,2.483295,-7.492472,-3.460357,3.541620,0.036993,-4.623534,-7.081718,-3.106684,-3.049549,-5.205081],[-0.284226,-2.093940,7.474876,-5.294227,8.815013,1.611922,-0.622970,-6.806013,-0.134070,-5.517556,9.747198],[-8.607372,1.586714,0.887187,-3.047531,3.177315,2.424638,2.484602,1.631174,-3.402260,-8.711914,-7.161330],[3.166047,1.266447,-3.098520,7.538859,6.623119,9.577785,-5.940247,-0.013897,2.373231,-6.418661,-9.398888],[9.812859,7.961717,-0.904808,-1.752229,8.784578,6.773709,5.353068,-8.048206,-8.544034,-9.653925,-2.105424],[-7.097698,7.011915,-9.611752,9.985558,7.518256,3.975315,-6.290976,-6.331118,-4.521127,-2.006093,-4.321464],[1.664184,9.590626,-8.865221,7.974332,-3.931091,-4.799754,1.992700,0.013138,3.400618,-5.933600,-2.186864]],[[-1.975313,0.705477,-8.422699,-4.121436,5.213079,4.145583,9.587129,-3.742664,6.029100,4.772893,-4.542223],[-3.884058,4.716071,-8.143795,-8.088598,-8.424195,8.240955,5.956945,5.338731,-9.685233,2.346454,1.326101],[-4.202037,-2.952145,7.521671,6.920350,-8.136344,1.730620,9.455546,5.966649,-0.547689,-0.862933,1.484742],[6.395320,5.013249,7.231095,-1.611011,-7.194918,-3.895918,-7.620454,-8.039481,4.088819,7.943531,-8.060793],[-8.914963,6.376035,2.673292,-2.103361,5.570414,1.506882,-2.535610,-7.109483,-0.947693,4.163696,4.630276],[-4.456974,3.158431,-7.717466,-8.917612,2.533691,8.689006,-3.197781,-5.247549,7.105472,-3.133225,-8.990072],[-4.199819,7.891239,1.749917,5.542500,-9.564404,-6.223489,-6.798572,3.426732,1.691335,5.118043,5.962335],[6.257711,8.105654,9.107261,-8.849840,-6.737400,-4.891426,8.334405,-3.483103,-6.330354,-4.951296,-4.332759],[-6.018126,1.190423,-7.662816,-3.481442,-7.126344,7.035624,-6.749066,-9.914479,-6.457922,9.283163,-6.688260],[4.362293,-2.612547,-9.287370,-6.491567,2.222162,-7.157636,8.725564,7.749154,-0.439173,9.318572,7.847417],[-1.739614,-6.575126,-4.507904,-4.240003,-5.942499,9.304725,5.478456,5.327085,-2.643641,-6.958998,-6.025719],[3.740571,7.573261,7.922374,2.783962,1.412315,-7.040506,9.197724,9.885980,-2.553721,9.719646,-6.404035],[2.526679,-6.266340,-2.240150,-8.770025,-4.482167,8.726777,5.859019,2.106095,9.777098,-5.496572,-4.767577],[6.315862,4.014158,-3.425280,8.523772,-3.553171,-1.537233,6.696947,0.264718,9.733318,6.153329,-7.309862]]], dtype='float64')
module1.set_input('var_361', input_361)
input_365= np.array(-2.216364, dtype='float64')
module1.set_input('var_365', input_365)
input_369= np.array(True, dtype='bool')
module1.set_input('var_369', input_369)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res3 = intrp3.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res4 = intrp4.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
module5.set_input('var_330', input_330)
module5.set_input('var_331', input_331)
module5.set_input('var_361', input_361)
module5.set_input('var_365', input_365)
module5.set_input('var_369', input_369)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res7 = intrp7.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res8 = intrp8.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
module9.set_input('var_330', input_330)
module9.set_input('var_331', input_331)
module9.set_input('var_361', input_361)
module9.set_input('var_365', input_365)
module9.set_input('var_369', input_369)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res11 = intrp11.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res12 = intrp12.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
module13.set_input('var_330', input_330)
module13.set_input('var_331', input_331)
module13.set_input('var_361', input_361)
module13.set_input('var_365', input_365)
module13.set_input('var_369', input_369)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res15 = intrp15.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res16 = intrp16.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
module17.set_input('var_330', input_330)
module17.set_input('var_331', input_331)
module17.set_input('var_361', input_361)
module17.set_input('var_365', input_365)
module17.set_input('var_369', input_369)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res19 = intrp19.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res20 = intrp20.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
module21.set_input('var_330', input_330)
module21.set_input('var_331', input_331)
module21.set_input('var_361', input_361)
module21.set_input('var_365', input_365)
module21.set_input('var_369', input_369)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res23 = intrp23.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res24 = intrp24.evaluate()(input_330, input_331, input_361, input_365, input_369, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()

'''60: TVMFuncCall
59: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
58: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
57: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
56: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
55: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
54: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
53: tvm::transform::Pass::operator()(tvm::IRModule) const
52: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
51: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
47: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
46: tvm::transform::Pass::operator()(tvm::IRModule) const
45: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
44: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
43: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
42: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
41: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
40: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
39: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
38: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
37: _ZN3tvm5relay9transform22Devic
36: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
35: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
34: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
33: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
32: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
26: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
25: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
24: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
23: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
22: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
21: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
16: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
15: _ZNSt17_Function_handlerIFvN3tvm7
14: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
13: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
12: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
11: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''