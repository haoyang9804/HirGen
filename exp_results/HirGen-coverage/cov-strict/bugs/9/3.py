import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_18 = relay.var("var_18", dtype = "uint32", shape = ())#candidate|18|()|var|uint32
var_19 = relay.var("var_19", dtype = "uint32", shape = (14, 15))#candidate|19|(14, 15)|var|uint32
bop_20 = relay.logical_xor(var_18.astype('uint32'), var_19.astype('uint32')) # shape=(14, 15)
output = bop_20
output2 = bop_20
func_23 = relay.Function([var_18,var_19,], output)
mod['func_23'] = func_23
mod = relay.transform.InferType()(mod)
var_24 = relay.var("var_24", dtype = "uint32", shape = ())#candidate|24|()|var|uint32
var_25 = relay.var("var_25", dtype = "uint32", shape = (14, 15))#candidate|25|(14, 15)|var|uint32
output = func_23(var_24,var_25,)
func_26 = relay.Function([var_24,var_25,], output)
mutated_mod['func_26'] = func_26
mutated_mod = relay.transform.InferType()(mutated_mod)
var_78 = relay.var("var_78", dtype = "float32", shape = (12, 13, 15))#candidate|78|(12, 13, 15)|var|float32
uop_79 = relay.acos(var_78.astype('float32')) # shape=(12, 13, 15)
output = relay.Tuple([uop_79,])
output2 = relay.Tuple([uop_79,])
func_82 = relay.Function([var_78,], output)
mod['func_82'] = func_82
mod = relay.transform.InferType()(mod)
var_83 = relay.var("var_83", dtype = "float32", shape = (12, 13, 15))#candidate|83|(12, 13, 15)|var|float32
output = func_82(var_83)
func_84 = relay.Function([var_83], output)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
const_95 = relay.const([[-6,8,4,-6,5],[9,6,-1,10,5],[7,10,2,-9,9],[-3,-3,-2,8,1],[6,3,10,5,2],[-2,7,-10,-5,2],[-6,-1,-7,-7,-3],[-8,-10,10,-5,-10],[4,7,-3,2,5],[-2,-6,-2,-5,8],[9,8,-7,9,-5],[2,-10,-1,-7,1]], dtype = "int64")#candidate|95|(12, 5)|const|int64
const_96 = relay.const([[-2,4,-5,9,-5],[3,7,-7,4,3],[2,5,-3,-7,8],[4,-3,5,-5,3],[-5,1,-2,1,2],[-10,-7,6,1,8],[-3,3,-9,6,-5],[7,7,3,10,-5],[-7,7,-9,-3,6],[4,-4,-7,-5,8],[-4,-1,-4,-10,8],[7,2,9,-6,-6]], dtype = "int64")#candidate|96|(12, 5)|const|int64
bop_97 = relay.right_shift(const_95.astype('int64'), relay.reshape(const_96.astype('int64'), relay.shape_of(const_95))) # shape=(12, 5)
bop_101 = relay.multiply(bop_97.astype('int64'), relay.reshape(const_95.astype('int64'), relay.shape_of(bop_97))) # shape=(12, 5)
bop_104 = relay.add(const_95.astype('uint16'), relay.reshape(bop_97.astype('uint16'), relay.shape_of(const_95))) # shape=(12, 5)
func_82_call = mod.get_global_var('func_82')
func_84_call = mutated_mod.get_global_var('func_84')
var_108 = relay.var("var_108", dtype = "float32", shape = (2340,))#candidate|108|(2340,)|var|float32
call_107 = relay.TupleGetItem(func_82_call(relay.reshape(var_108.astype('float32'), [12, 13, 15])), 0)
call_109 = relay.TupleGetItem(func_84_call(relay.reshape(var_108.astype('float32'), [12, 13, 15])), 0)
uop_110 = relay.atanh(bop_104.astype('float64')) # shape=(12, 5)
output = relay.Tuple([bop_101,call_107,var_108,uop_110,])
output2 = relay.Tuple([bop_101,call_109,var_108,uop_110,])
func_112 = relay.Function([var_108,], output)
mod['func_112'] = func_112
mod = relay.transform.InferType()(mod)
mutated_mod['func_112'] = func_112
mutated_mod = relay.transform.InferType()(mutated_mod)
var_113 = relay.var("var_113", dtype = "float32", shape = (2340,))#candidate|113|(2340,)|var|float32
func_112_call = mutated_mod.get_global_var('func_112')
call_114 = func_112_call(var_113)
output = call_114
func_115 = relay.Function([var_113], output)
mutated_mod['func_115'] = func_115
mutated_mod = relay.transform.InferType()(mutated_mod)
var_153 = relay.var("var_153", dtype = "float32", shape = (10, 10, 11))#candidate|153|(10, 10, 11)|var|float32
uop_154 = relay.erf(var_153.astype('float32')) # shape=(10, 10, 11)
var_156 = relay.var("var_156", dtype = "float32", shape = (10, 10, 11))#candidate|156|(10, 10, 11)|var|float32
bop_157 = relay.bitwise_and(uop_154.astype('uint64'), relay.reshape(var_156.astype('uint64'), relay.shape_of(uop_154))) # shape=(10, 10, 11)
uop_161 = relay.cosh(uop_154.astype('float32')) # shape=(10, 10, 11)
bop_163 = relay.greater_equal(uop_154.astype('bool'), relay.reshape(bop_157.astype('bool'), relay.shape_of(uop_154))) # shape=(10, 10, 11)
output = relay.Tuple([uop_161,bop_163,])
output2 = relay.Tuple([uop_161,bop_163,])
func_166 = relay.Function([var_153,var_156,], output)
mod['func_166'] = func_166
mod = relay.transform.InferType()(mod)
var_167 = relay.var("var_167", dtype = "float32", shape = (10, 10, 11))#candidate|167|(10, 10, 11)|var|float32
var_168 = relay.var("var_168", dtype = "float32", shape = (10, 10, 11))#candidate|168|(10, 10, 11)|var|float32
output = func_166(var_167,var_168,)
func_169 = relay.Function([var_167,var_168,], output)
mutated_mod['func_169'] = func_169
mutated_mod = relay.transform.InferType()(mutated_mod)
var_176 = relay.var("var_176", dtype = "float32", shape = (9, 11))#candidate|176|(9, 11)|var|float32
var_177 = relay.var("var_177", dtype = "float32", shape = (9, 11))#candidate|177|(9, 11)|var|float32
bop_178 = relay.mod(var_176.astype('float32'), relay.reshape(var_177.astype('float32'), relay.shape_of(var_176))) # shape=(9, 11)
uop_186 = relay.sinh(bop_178.astype('float32')) # shape=(9, 11)
bop_189 = relay.bitwise_xor(uop_186.astype('uint8'), relay.reshape(bop_178.astype('uint8'), relay.shape_of(uop_186))) # shape=(9, 11)
uop_192 = relay.rsqrt(bop_189.astype('float32')) # shape=(9, 11)
func_112_call = mod.get_global_var('func_112')
func_115_call = mutated_mod.get_global_var('func_115')
var_201 = relay.var("var_201", dtype = "float32", shape = (2340,))#candidate|201|(2340,)|var|float32
call_200 = relay.TupleGetItem(func_112_call(relay.reshape(var_201.astype('float32'), [2340,])), 3)
call_202 = relay.TupleGetItem(func_115_call(relay.reshape(var_201.astype('float32'), [2340,])), 3)
bop_207 = relay.bitwise_or(uop_192.astype('int8'), relay.reshape(var_176.astype('int8'), relay.shape_of(uop_192))) # shape=(9, 11)
bop_210 = relay.logical_xor(bop_189.astype('uint8'), relay.reshape(var_176.astype('uint8'), relay.shape_of(bop_189))) # shape=(9, 11)
bop_214 = relay.right_shift(bop_210.astype('uint16'), relay.reshape(bop_178.astype('uint16'), relay.shape_of(bop_210))) # shape=(9, 11)
uop_217 = relay.asinh(uop_192.astype('float64')) # shape=(9, 11)
output = relay.Tuple([call_200,var_201,bop_207,bop_214,uop_217,])
output2 = relay.Tuple([call_202,var_201,bop_207,bop_214,uop_217,])
func_221 = relay.Function([var_176,var_177,var_201,], output)
mod['func_221'] = func_221
mod = relay.transform.InferType()(mod)
var_222 = relay.var("var_222", dtype = "float32", shape = (9, 11))#candidate|222|(9, 11)|var|float32
var_223 = relay.var("var_223", dtype = "float32", shape = (9, 11))#candidate|223|(9, 11)|var|float32
var_224 = relay.var("var_224", dtype = "float32", shape = (2340,))#candidate|224|(2340,)|var|float32
output = func_221(var_222,var_223,var_224,)
func_225 = relay.Function([var_222,var_223,var_224,], output)
mutated_mod['func_225'] = func_225
mutated_mod = relay.transform.InferType()(mutated_mod)
var_238 = relay.var("var_238", dtype = "float32", shape = (16, 12, 6))#candidate|238|(16, 12, 6)|var|float32
var_239 = relay.var("var_239", dtype = "float32", shape = (16, 12, 6))#candidate|239|(16, 12, 6)|var|float32
bop_240 = relay.power(var_238.astype('float32'), relay.reshape(var_239.astype('float32'), relay.shape_of(var_238))) # shape=(16, 12, 6)
output = bop_240
output2 = bop_240
func_245 = relay.Function([var_238,var_239,], output)
mod['func_245'] = func_245
mod = relay.transform.InferType()(mod)
mutated_mod['func_245'] = func_245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_245_call = mutated_mod.get_global_var('func_245')
var_247 = relay.var("var_247", dtype = "float32", shape = (16, 12, 6))#candidate|247|(16, 12, 6)|var|float32
var_248 = relay.var("var_248", dtype = "float32", shape = (16, 12, 6))#candidate|248|(16, 12, 6)|var|float32
call_246 = func_245_call(var_247,var_248,)
output = call_246
func_249 = relay.Function([var_247,var_248,], output)
mutated_mod['func_249'] = func_249
mutated_mod = relay.transform.InferType()(mutated_mod)
var_325 = relay.var("var_325", dtype = "float64", shape = (10, 11))#candidate|325|(10, 11)|var|float64
uop_326 = relay.sigmoid(var_325.astype('float64')) # shape=(10, 11)
bop_328 = relay.bitwise_xor(uop_326.astype('int16'), relay.reshape(var_325.astype('int16'), relay.shape_of(uop_326))) # shape=(10, 11)
bop_331 = relay.floor_mod(bop_328.astype('float32'), relay.reshape(uop_326.astype('float32'), relay.shape_of(bop_328))) # shape=(10, 11)
output = bop_331
output2 = bop_331
func_334 = relay.Function([var_325,], output)
mod['func_334'] = func_334
mod = relay.transform.InferType()(mod)
var_335 = relay.var("var_335", dtype = "float64", shape = (10, 11))#candidate|335|(10, 11)|var|float64
output = func_334(var_335)
func_336 = relay.Function([var_335], output)
mutated_mod['func_336'] = func_336
mutated_mod = relay.transform.InferType()(mutated_mod)
var_338 = relay.var("var_338", dtype = "uint16", shape = (12, 11))#candidate|338|(12, 11)|var|uint16
var_339 = relay.var("var_339", dtype = "uint16", shape = (12, 11))#candidate|339|(12, 11)|var|uint16
bop_340 = relay.subtract(var_338.astype('uint16'), relay.reshape(var_339.astype('uint16'), relay.shape_of(var_338))) # shape=(12, 11)
output = bop_340
output2 = bop_340
func_343 = relay.Function([var_338,var_339,], output)
mod['func_343'] = func_343
mod = relay.transform.InferType()(mod)
mutated_mod['func_343'] = func_343
mutated_mod = relay.transform.InferType()(mutated_mod)
func_343_call = mutated_mod.get_global_var('func_343')
var_345 = relay.var("var_345", dtype = "uint16", shape = (12, 11))#candidate|345|(12, 11)|var|uint16
var_346 = relay.var("var_346", dtype = "uint16", shape = (12, 11))#candidate|346|(12, 11)|var|uint16
call_344 = func_343_call(var_345,var_346,)
output = call_344
func_347 = relay.Function([var_345,var_346,], output)
mutated_mod['func_347'] = func_347
mutated_mod = relay.transform.InferType()(mutated_mod)
var_390 = relay.var("var_390", dtype = "int16", shape = ())#candidate|390|()|var|int16
var_391 = relay.var("var_391", dtype = "int16", shape = (12,))#candidate|391|(12,)|var|int16
bop_392 = relay.left_shift(var_390.astype('int16'), var_391.astype('int16')) # shape=(12,)
output = bop_392
output2 = bop_392
func_396 = relay.Function([var_390,var_391,], output)
mod['func_396'] = func_396
mod = relay.transform.InferType()(mod)
mutated_mod['func_396'] = func_396
mutated_mod = relay.transform.InferType()(mutated_mod)
func_396_call = mutated_mod.get_global_var('func_396')
var_398 = relay.var("var_398", dtype = "int16", shape = ())#candidate|398|()|var|int16
var_399 = relay.var("var_399", dtype = "int16", shape = (12,))#candidate|399|(12,)|var|int16
call_397 = func_396_call(var_398,var_399,)
output = call_397
func_400 = relay.Function([var_398,var_399,], output)
mutated_mod['func_400'] = func_400
mutated_mod = relay.transform.InferType()(mutated_mod)
const_415 = relay.const([[-5.759430],[-0.699372],[4.010111],[-7.017323],[-3.541303],[4.931184],[-8.553290],[-5.163712],[-3.369094]], dtype = "float64")#candidate|415|(9, 1)|const|float64
uop_416 = relay.sqrt(const_415.astype('float64')) # shape=(9, 1)
func_112_call = mod.get_global_var('func_112')
func_115_call = mutated_mod.get_global_var('func_115')
var_420 = relay.var("var_420", dtype = "float32", shape = (2340,))#candidate|420|(2340,)|var|float32
call_419 = relay.TupleGetItem(func_112_call(relay.reshape(var_420.astype('float32'), [2340,])), 3)
call_421 = relay.TupleGetItem(func_115_call(relay.reshape(var_420.astype('float32'), [2340,])), 3)
bop_423 = relay.subtract(uop_416.astype('uint16'), var_420.astype('uint16')) # shape=(9, 2340)
var_427 = relay.var("var_427", dtype = "float32", shape = (2340,))#candidate|427|(2340,)|var|float32
bop_428 = relay.greater_equal(var_420.astype('bool'), relay.reshape(var_427.astype('bool'), relay.shape_of(var_420))) # shape=(2340,)
output = relay.Tuple([call_419,bop_423,bop_428,])
output2 = relay.Tuple([call_421,bop_423,bop_428,])
func_431 = relay.Function([var_420,var_427,], output)
mod['func_431'] = func_431
mod = relay.transform.InferType()(mod)
mutated_mod['func_431'] = func_431
mutated_mod = relay.transform.InferType()(mutated_mod)
func_431_call = mutated_mod.get_global_var('func_431')
var_433 = relay.var("var_433", dtype = "float32", shape = (2340,))#candidate|433|(2340,)|var|float32
var_434 = relay.var("var_434", dtype = "float32", shape = (2340,))#candidate|434|(2340,)|var|float32
call_432 = func_431_call(var_433,var_434,)
output = call_432
func_435 = relay.Function([var_433,var_434,], output)
mutated_mod['func_435'] = func_435
mutated_mod = relay.transform.InferType()(mutated_mod)
var_464 = relay.var("var_464", dtype = "int64", shape = (12, 6))#candidate|464|(12, 6)|var|int64
const_465 = relay.const([[-10,4,-8,5,5,3],[5,4,1,-8,1,-1],[-1,-4,-7,10,7,-7],[4,-4,-5,8,3,5],[-2,-2,-3,5,7,-8],[10,6,-1,-2,-4,3],[-3,3,-4,1,-3,1],[10,-9,-5,3,-4,-3],[-3,9,1,-9,4,-2],[2,4,-8,1,-1,5],[5,1,9,4,1,9],[7,6,-4,10,2,1]], dtype = "int64")#candidate|465|(12, 6)|const|int64
bop_466 = relay.equal(var_464.astype('bool'), relay.reshape(const_465.astype('bool'), relay.shape_of(var_464))) # shape=(12, 6)
bop_469 = relay.logical_or(bop_466.astype('bool'), relay.reshape(const_465.astype('bool'), relay.shape_of(bop_466))) # shape=(12, 6)
var_472 = relay.var("var_472", dtype = "bool", shape = (12, 6))#candidate|472|(12, 6)|var|bool
bop_473 = relay.floor_divide(bop_466.astype('float32'), relay.reshape(var_472.astype('float32'), relay.shape_of(bop_466))) # shape=(12, 6)
bop_476 = relay.bitwise_xor(var_464.astype('uint8'), relay.reshape(bop_473.astype('uint8'), relay.shape_of(var_464))) # shape=(12, 6)
uop_479 = relay.erf(bop_476.astype('float64')) # shape=(12, 6)
func_112_call = mod.get_global_var('func_112')
func_115_call = mutated_mod.get_global_var('func_115')
const_483 = relay.const([2.107832,0.896972,5.411330,-4.795544,-0.312656,-3.358784,-2.746986,-9.527000,-2.714645,-3.051204,7.762736,-3.681423,-6.038703,7.502910,-8.205491,5.620173,6.382692,7.914145,2.602743,0.264540,-1.767662,-2.345890,9.023258,-9.691153,3.114094,5.549292,-9.322907,9.962051,-2.937378,-3.972264,9.119867,-2.379993,0.164891,2.642083,9.191173,-5.110099,-6.575483,-7.372342,2.417446,0.152041,9.552719,-0.589028,-9.594816,4.584364,-1.593671,-6.761358,3.260844,-0.428730,-4.771552,-7.506154,1.247750,7.863897,9.349780,4.839069,1.245204,6.322456,2.488553,-7.532379,3.814899,-2.492554,-8.733312,1.309073,9.468341,-7.649636,2.605030,0.903082,3.806330,2.151735,3.467458,-0.292087,8.281756,4.151782,7.831631,9.325136,2.215250,-7.978260,-4.082659,-7.077352,-9.044617,8.608149,2.423971,-2.236450,0.011780,9.997391,-0.842709,3.955046,9.429880,-1.911412,3.701459,1.264404,4.600566,-5.998310,6.209634,3.641358,9.654501,5.735892,2.088357,4.201026,1.271417,4.093477,-4.733573,-6.908719,-3.069719,-1.255053,-6.672562,-2.783342,-7.394327,8.938807,9.704296,9.777815,4.732796,0.527690,-8.922391,6.293823,3.462591,3.731045,-7.883116,6.381066,-3.673607,-1.793881,4.616526,-5.228745,4.135153,0.529033,-7.911292,1.877042,-4.322854,-4.084905,6.467209,-7.312367,0.419796,4.567911,8.953843,-9.576457,-5.111659,-3.641377,9.090705,8.033339,-6.332920,-3.591012,1.936830,-3.006336,-2.188470,-0.270409,0.752093,1.535114,-6.678565,-9.161378,4.448895,3.131669,4.291521,-1.139701,-9.509400,9.300400,-7.786039,3.710531,2.581266,6.246638,0.178234,1.187906,2.456358,7.696666,9.301496,4.498106,-6.740713,4.731931,8.346506,-0.419556,9.659568,-2.208306,1.154070,-6.860781,-3.636145,9.605578,1.634301,-5.036306,0.587179,9.132513,8.477769,7.844766,4.205100,7.345944,-8.253912,7.484940,5.868301,-9.202666,2.585219,4.421856,-4.968099,2.197387,3.033406,-7.768849,0.569801,-5.041794,9.703389,-2.124983,-2.406283,3.576376,-7.848138,-4.164974,-8.368256,-3.646442,3.255112,7.904578,-1.121231,-2.941523,-6.972749,-7.373085,-7.405929,-5.034597,6.119901,-7.966136,-9.130334,-4.981308,-5.845945,-1.760609,0.849991,6.623213,-1.711239,7.189359,7.381828,8.660541,-0.254299,-9.867194,-2.086991,-4.455950,3.693946,5.482556,-6.775141,-7.882067,-0.093329,-1.629518,-3.935137,8.035107,-3.655618,4.096697,-6.201111,-9.934970,1.175514,0.709589,8.845035,2.717272,-2.835046,1.257181,-8.352796,-8.005874,-2.464800,1.896244,-3.003911,-9.608192,6.101582,-3.552788,-8.681078,-6.290987,1.873077,5.992840,-6.873719,-4.158220,9.967694,6.676096,8.969547,-9.563481,-1.339215,-3.806144,-9.065030,-8.635821,4.733741,9.782304,1.209800,5.602198,4.836130,5.369980,3.662229,5.902619,3.348887,-4.436098,-7.406287,9.374766,-1.614166,3.443866,-7.502296,-9.727175,-6.601507,5.097199,-5.177147,6.377672,9.272699,6.749770,-9.112611,0.473470,4.006483,-4.346004,-8.920311,6.683671,-0.108357,-0.781991,-8.052494,-4.901195,-6.795391,-1.659621,-5.635751,9.132320,-6.982126,-2.269821,3.937872,0.013990,9.414154,-1.354122,2.341170,4.790523,-7.023559,-2.548239,-8.246040,7.974173,-2.053934,2.137660,7.744872,-8.620887,7.191264,-8.680041,-7.262615,-3.565495,-6.580395,2.475861,-7.494222,6.799837,-3.206977,5.177066,-8.057565,-8.430246,-9.910334,7.167377,-2.384014,8.586037,-5.281494,-2.541600,6.352084,-2.390645,8.911234,2.518895,-7.268512,-8.932855,-8.462534,-0.302565,-0.924342,4.063569,-0.641015,8.586996,-8.829816,0.781169,-0.277669,4.994410,-3.262932,9.644450,-2.046870,9.612754,9.822762,4.720991,4.700363,-6.030896,-1.203741,-5.690393,-1.222958,1.060645,-3.587392,2.999584,-2.861211,4.063377,5.148272,-3.505246,2.217985,-0.354751,8.888382,7.699958,5.839692,0.698716,2.596378,3.635529,5.788097,7.861328,6.284953,-0.080666,0.983781,-3.460268,2.916868,-9.089987,-7.159644,3.002391,9.969465,-9.926874,3.796813,-1.304159,6.928338,-8.193785,5.464048,-2.037607,8.203507,-1.978572,-4.284390,3.181697,-1.202124,7.363281,-7.428787,-2.601740,9.501895,2.129823,-9.982081,6.419755,2.526653,-5.804643,9.714504,2.077975,-4.033304,-9.909420,-9.813384,-9.371660,4.657332,7.454980,-1.125266,4.624927,-0.765343,-0.804919,5.891962,-3.390081,-8.424271,1.378753,1.317590,-8.909915,-4.090215,2.897694,-4.046304,7.005771,7.194570,4.420402,3.160836,0.560618,0.321833,-7.344134,6.486798,8.489200,-6.926166,-7.637762,8.325816,4.405012,7.999456,-2.169430,-7.242915,2.912723,-7.461808,3.481294,-7.490732,2.601600,0.211675,-5.606295,-7.614465,-6.546416,-2.376727,8.513736,6.126594,7.284681,9.133103,-1.077375,-6.683341,1.778265,-7.117680,-0.242790,3.210351,9.990189,5.772455,6.806349,3.703051,-6.256286,-3.289440,-9.972347,-5.413344,-1.506904,6.936159,9.755159,1.956687,1.899014,-0.445453,-5.603509,3.545679,-6.245134,5.558301,5.948442,3.610567,-7.885722,9.711722,6.077172,-6.776373,8.289374,-7.782476,7.981529,6.546023,8.747867,-4.087330,9.266359,6.176218,2.733274,8.264284,-5.881357,-1.590257,5.154312,8.026555,-1.149344,-8.806063,2.913238,-6.643366,-7.861241,1.854482,0.772709,2.651439,-3.656874,-7.949901,0.208501,-5.704664,-9.484472,-8.558868,-1.151553,-4.138472,-7.840973,-7.220662,1.189269,-1.350984,-0.958624,-7.849575,-5.201195,-3.469149,-6.667146,-2.540675,-8.405512,0.010914,7.480299,-5.636977,7.543137,-9.406218,-2.105590,-1.325002,-8.778073,5.633582,-9.566592,-0.586331,-2.166268,4.431393,-0.271847,-8.681814,-2.281268,2.745393,-6.859175,2.078559,0.775709,8.798531,-6.765856,0.847181,-1.803885,9.904762,-9.472510,6.951905,-0.244313,-4.868152,-9.037710,-0.298255,-1.280154,8.471547,0.898487,6.745932,-1.777217,-9.722366,-2.361126,8.439140,9.379987,8.794795,2.985346,-6.240467,-9.347445,-3.680702,4.401107,9.269227,-3.563849,-1.170199,-3.127989,-3.195341,-3.313249,2.826502,1.632995,-5.761697,-2.537310,-2.999819,-1.669678,4.676410,3.029235,-1.369061,-8.195490,7.100225,-2.347332,4.322717,9.008548,9.421146,-6.929572,-9.085661,-7.122636,-1.912801,-2.141232,-3.659670,4.322676,9.165807,7.167177,-7.282742,-2.688067,-3.298461,3.319527,8.510444,-2.622876,8.473030,5.700189,-4.177456,-0.906933,-0.171117,0.824109,8.104485,8.005237,-3.246904,-5.568538,-4.206375,-8.750153,7.829967,-4.402754,-4.311285,-8.298307,-2.799807,7.141059,0.187079,9.766023,-6.207551,-2.768943,-5.519446,5.575451,-0.096665,7.771035,-3.618524,3.791665,2.287110,-5.898467,-4.552521,8.846209,-7.912515,9.908751,-6.268572,-9.676212,-8.773818,8.876888,-5.733867,3.929855,-1.457080,6.764973,-1.047801,8.686341,2.264699,7.595220,-6.701699,-8.970246,7.065425,-2.107816,-4.807909,-9.199090,3.991635,9.638304,-3.647232,-8.026996,8.223243,7.410264,-0.557357,-9.054701,-5.922361,-8.908126,-1.261539,-2.635707,-2.376889,-8.309279,0.217789,3.796846,-9.626129,-8.064259,4.228218,3.473770,-9.000534,-6.816404,9.102275,-4.011345,-2.475294,-2.610289,9.156708,-9.935852,8.253858,7.337098,-5.300532,6.493490,0.387588,1.804176,-5.840673,-7.735615,-2.427059,-9.519375,3.547508,0.334558,9.688047,-3.021094,-3.889457,-7.677745,8.432354,-4.020960,9.840649,-5.255088,4.784813,1.430316,9.902052,0.778716,1.768605,1.732071,-3.154091,-4.660668,3.180466,3.478220,-0.226133,7.596814,7.928891,0.411766,-3.938623,0.067060,2.507798,1.816093,-1.834488,-6.279748,-1.018302,-4.760843,7.512340,-2.289273,-4.941676,-5.854568,-5.481851,-4.518054,-2.500383,-9.856779,-1.372129,-7.245869,-5.347278,-4.175237,-6.640435,-7.228085,-2.100497,-0.857440,-8.734407,-6.049235,-1.871142,0.211379,7.001610,-3.354714,6.150670,-3.744149,-7.869332,0.736358,-3.186119,-3.425555,8.638093,-7.722102,1.743764,5.642340,5.876892,-1.771721,-7.018737,-4.464836,-8.376260,3.293428,3.113877,3.477609,1.878545,3.695975,-6.440241,-6.100415,-1.810388,8.883480,1.292196,6.427107,7.428713,-0.067637,8.199166,6.136291,9.951665,6.670160,-6.657083,4.606131,-0.011650,6.367849,-2.724523,-9.135153,-0.712702,-6.111001,-6.959868,4.828946,-0.843028,0.263254,-0.908875,0.142332,-9.886241,1.950278,1.694406,-5.097767,4.996689,-3.541894,3.363185,-3.782636,-7.991058,-5.955824,2.404237,-1.377842,9.775673,4.561564,-8.552764,-9.172012,-5.865577,2.859210,-2.346973,9.416798,-7.384078,8.831173,-3.582272,1.581657,-2.786787,0.670247,0.826922,7.248053,2.069879,2.098702,7.803456,-3.884869,4.980950,1.400465,7.692967,2.101711,-6.036325,-1.435486,-7.475457,-3.060355,6.679403,-1.899176,4.027553,3.241182,3.912919,8.834088,-6.416111,-6.683342,3.876602,7.017474,-1.996562,-7.853033,6.584626,8.153053,9.262130,3.274460,1.489391,2.171425,1.019705,0.403148,2.738787,-1.907584,3.428233,3.479279,-9.369174,9.987902,0.722058,-4.916721,-3.916043,8.853130,0.443101,-9.512900,-9.375972,6.856476,1.660900,-4.449637,2.573209,-9.274336,8.637185,-6.705441,2.511227,-8.046090,9.614801,0.133048,-1.895711,9.305215,7.642104,-2.517089,-3.654883,-4.210544,6.402871,-3.281803,1.392803,8.125898,9.276422,-3.645796,2.261450,7.041733,7.980102,9.640190,2.006329,2.563069,-7.518660,2.605884,-2.044873,-1.064824,-3.324700,-3.854191,-5.279539,1.630533,2.318070,-4.105387,-3.229490,-5.859552,-8.209189,-5.198854,-6.505352,9.137788,5.861944,6.343261,-2.149158,8.610514,8.066106,-3.593095,5.339166,0.638641,7.465236,-7.226774,5.254961,-3.624777,-9.667220,-2.940295,-7.162049,7.708125,-5.072431,4.596263,1.728062,0.636863,0.267524,-8.383458,8.809801,3.306592,3.600979,4.658572,-3.955690,-9.556764,-7.771500,-8.778046,-1.188054,-8.339115,-9.315042,0.110291,5.515555,-8.383954,-6.515624,7.003439,-4.591408,3.721385,-7.901555,0.811075,-7.182679,2.848467,-2.640937,6.230431,-1.830817,0.525734,-3.579314,-9.902107,6.296314,-0.366726,5.590169,-3.153002,-8.320961,9.096999,-1.962699,-5.309386,-4.012351,8.488233,5.076424,-4.787001,-3.397079,-6.501800,-4.254265,-8.136942,-1.636805,-6.931471,6.550802,0.241857,-9.302880,-6.544875,0.520913,3.706134,4.832034,-0.929002,2.919565,-6.100924,-2.438216,-3.884099,7.613398,1.931271,9.344494,1.996108,-5.121354,6.197803,3.695954,0.510895,-6.726841,-8.285741,1.823418,-3.710519,7.048122,-4.142603,0.847796,0.856569,-4.503831,-1.608939,-4.906159,-7.546950,7.806474,1.423884,1.493788,9.981631,9.603144,3.884435,4.011044,1.432569,-1.924894,-1.821237,0.271533,-9.605439,-1.753944,5.230448,-9.897876,2.607561,9.005310,-4.164699,8.123291,-7.106669,-2.263918,6.208320,1.758458,-3.533499,6.486220,-2.193986,-0.162842,-3.334863,1.942885,3.048116,9.546982,4.181812,8.633596,4.210682,-6.580909,8.245651,-3.192306,-5.123193,-6.449707,0.605587,4.400131,-0.900491,9.523743,8.065545,-1.598323,-4.727804,1.049764,1.262084,-6.881227,-4.759217,-9.269046,4.750379,-5.824806,3.609636,-0.855810,-2.547268,-1.410425,-3.106994,4.292973,-4.086924,-4.094796,7.631156,0.646064,7.440826,-4.317783,-2.457283,0.944376,2.871352,4.245020,-9.076361,5.523923,9.184998,2.768865,8.250558,1.027012,4.456942,8.300466,-1.314402,9.181332,-5.859204,7.541056,-8.569317,-3.254231,-8.887819,-7.746878,3.050063,-8.519644,1.807914,-1.292945,-5.580799,6.958675,-9.695276,0.546913,6.015467,-2.294378,-8.402059,-3.786873,-9.103616,-8.315686,-2.603891,-8.161217,-0.830334,-5.383824,-1.637445,1.242446,8.464958,-4.858419,5.294766,-5.763437,-7.683733,-8.828238,-8.736992,-1.299947,3.712323,7.352743,8.476704,0.055666,-0.035099,-4.437070,5.468663,-5.675707,-6.654139,-3.429026,-4.328827,-9.192482,8.386817,3.445754,3.999515,-9.825669,-2.206168,-1.181057,8.223842,7.736868,6.999701,1.397574,1.122801,4.861881,-7.387945,9.303530,-3.158488,-7.221256,-9.766772,2.468341,2.471706,-0.071195,-7.489043,3.928289,6.610755,2.477611,-2.204568,8.226895,-8.936841,1.807072,-0.404190,5.973280,-7.630857,-9.701751,1.916701,-0.934613,4.441077,-6.699843,5.038688,-6.247074,1.348711,-6.974929,-6.227126,8.578929,-3.335554,0.927982,-5.227762,-4.098329,-9.252985,8.916227,-6.691998,-6.574388,7.886562,2.561402,6.354321,9.935550,-3.959988,-2.438848,7.959141,9.847745,1.752667,-5.613255,-2.081821,-5.263210,0.638007,-9.849456,-3.073192,1.473839,-7.239800,-7.603349,-1.734379,-5.294358,2.361171,6.369196,-3.102470,1.304976,-7.679368,6.990111,-4.060281,7.921079,-9.186510,3.877632,6.172851,-3.219855,-6.033071,5.758635,-5.126954,7.240070,-3.020143,-8.216862,7.636186,-5.074566,2.984028,-0.137050,-1.115645,1.802907,-7.113681,2.099896,5.459128,1.570706,-0.746691,6.667568,-8.630166,0.290984,6.985442,2.094686,4.552037,-3.639843,-7.418009,-6.330308,7.412820,3.237372,-9.757466,0.076926,-3.919342,8.980887,3.676662,9.111034,7.657876,-5.804726,-4.930645,-5.411745,-5.974186,-2.126320,0.882931,0.526963,-4.167968,-7.568140,6.549502,-4.596553,-4.062879,-0.488151,-0.264935,6.911931,-5.425848,5.380622,-0.663469,-8.813689,-7.677752,2.361440,1.358952,-5.623263,3.716862,4.200900,-8.852495,-7.763352,8.238098,-2.444424,-4.664727,-9.830933,-3.143305,2.875268,5.817709,8.017185,-8.675826,8.738239,0.077848,3.797909,1.865268,3.555704,-5.168301,-5.439412,-1.542439,-3.856928,1.381122,-2.503659,-1.838163,-8.783165,6.734802,7.888933,-3.110972,-6.955232,0.053366,-2.404707,-0.955469,-2.542793,4.764780,-1.732360,-3.074718,-2.654939,3.452340,8.009279,-0.113458,3.686932,1.009309,1.199954,-8.112960,9.688360,7.633209,-8.094811,8.337093,-0.662292,0.157073,-4.018610,8.038266,2.916832,8.386148,-5.555188,-6.969697,-2.208489,2.964999,6.065990,2.627629,1.180897,-5.799779,-6.545422,-3.595244,-8.054312,4.013382,3.191048,8.359061,-5.432140,8.263017,-9.914417,-4.091112,6.383415,-9.427484,5.189921,0.299728,-9.857649,-0.511411,1.002330,-9.178184,1.719512,7.610845,-3.760708,9.129179,1.662200,-8.038444,5.086023,-6.169137,-8.498641,6.150463,-0.709714,-6.675064,6.173455,3.794822,7.645688,-7.846615,-7.076395,-7.547748,4.291356,2.327519,-8.176820,-5.117986,-2.110830,9.595968,-7.049989,9.926615,7.480922,9.596434,-8.488393,-0.898846,-7.671856,-7.026903,-9.223134,-1.719749,1.212798,-4.676525,8.863654,3.939549,-7.736411,-1.064231,5.080099,6.987075,2.254676,4.937326,-9.378498,3.560439,2.164738,2.797276,-0.252974,6.539075,0.795823,-2.397298,-8.307647,-1.574390,-0.580857,4.790120,-0.030331,-8.185080,-9.441715,-0.298826,0.292776,2.871899,1.516881,-7.927669,-5.561857,7.030278,-8.190999,-5.463744,9.227766,5.113186,0.136548,-3.062357,4.204413,3.193695,-9.906398,-2.580024,-8.796133,-5.870981,-1.589078,1.643361,-2.815675,-3.333945,-6.357540,-3.001237,-2.357185,3.452171,-1.443014,3.827818,3.068995,5.548487,-5.017114,4.346458,-2.308010,2.045993,2.137042,8.918214,5.637598,-8.680196,9.463275,-3.205430,-8.577749,9.387304,3.137852,-6.330748,-9.258357,-6.467108,-8.122793,2.872786,-9.916194,7.163357,1.903035,6.966568,0.202209,0.220123,-8.670353,-3.865424,8.375972,-8.113550,-0.973528,1.964669,-1.889754,-6.305885,-7.098047,6.784803,-7.746354,-0.982432,-8.698749,-7.425725,8.178889,-2.365497,9.094712,-0.646652,-8.356726,9.935977,3.182940,7.110956,9.762768,-8.641624,4.193094,-8.086916,0.237606,-4.614051,-5.245839,2.596828,-3.566202,-9.895808,-3.869961,-5.517269,2.290259,2.609839,6.468735,-3.780106,-0.034654,-7.116892,2.790735,7.645478,5.041612,-0.812202,6.865268,8.008040,9.782730,9.503166,-4.341802,-8.031855,-6.158469,-9.679433,4.002268,-0.769980,-0.932723,1.530185,7.040589,-0.666934,-6.180220,-9.310977,-7.011992,7.110336,0.334705,0.382028,0.890048,7.984038,3.604820,7.030006,2.514370,2.131877,-5.309191,1.174103,0.683995,-0.001624,-8.014153,0.537283,-7.945241,-9.309167,-2.355757,4.526664,0.331474,9.094340,-4.950601,0.038677,-8.794092,5.405392,-3.753204,-0.176186,-2.253090,6.309352,1.990976,2.340537,-9.862416,-2.320285,2.442422,-6.448147,-6.124000,-4.685372,-1.006708,-9.407909,-3.220511,5.533740,-4.778017,-5.197867,-5.708209,6.154073,7.422856,6.739173,-0.022814,-7.642854,7.155725,7.249403,-9.672073,-5.006629,4.683739,8.811815,5.625299,-5.646057,-4.247268,-7.496776,2.064767,-3.404468,7.363520,-2.819890,0.758591,8.028696,9.846387,8.937605,-0.829385,-9.144273,-1.894309,4.054701,-2.708719,-0.465654,0.371070,5.922837,-5.551272,8.440972,3.156662,-7.483989,-2.167094,9.501858,-7.666785,4.985058,-1.801487,-7.886551,5.747721,-5.624959,-2.450059,-3.177344,-0.068464,-0.109562,7.221211,-7.433302,3.998857,-9.622975,-8.176112,4.557880,-5.431162,-0.943675,-1.626664,6.247182,-5.171568,3.250610,-1.209813,-0.743992,3.997632,-9.728867,-6.172103,6.209312,2.467157,8.978376,8.909143,-4.947768,3.346402,-8.299889,7.987755,3.601625,-8.426985,-2.660850,-0.474252,3.247825,5.357942,7.791120,-3.549240,0.739357,-5.368900,3.606675,9.800554,2.478686,-7.473397,-5.317222,6.596273,-9.135314,-4.177649,4.784113,5.426160,-4.958212,-4.229183,1.204776,-9.719483,-5.942866,6.053970,-3.650303,5.235937,-1.665439,-0.587017,4.923496,-9.089408,4.604208,3.188378,-4.699395,3.836482,3.351637,-5.787955,-9.468461,-0.516716,2.760669,-3.541076,-4.273634,3.380679,-8.394677,-9.708430,9.812369,5.688500,8.913822,4.723387,8.252500,8.523651,-3.101692,8.866455,-2.265297,7.999526,-3.165311,-2.166494,1.972654,1.736939,1.955497,-2.227210,-7.889312,8.634176,-6.059224,9.180807,6.270052,-7.181575,-9.336963,-4.180052,8.431241,-7.858658,5.469057,5.807839,-0.842759,-6.002016,-3.463971,7.697730,-5.636628,-8.973958,8.266389,0.445737,-5.693067,5.805149,6.720090,-2.712730,6.506596,-4.392216,4.628255,-5.324118,-9.270477,5.985432,4.336687,-4.891705,0.929199,-2.798542,-6.377928,5.888655,0.606158,-7.687089,-0.467786,-8.456854,1.863041,-7.356352,-7.821416,7.487214,-2.830316,3.407776,6.861174,5.508155,-6.040466,3.384497,0.509090,-7.754709,5.078950,-6.953958,9.729595,-5.790797,8.744609,5.784007,3.040168,4.456190,1.858944,1.947158,-5.557106,7.396183,-9.388450,5.423861,0.060812,-7.615231,-9.070643,-6.012331,9.906717,8.198078,6.487697,-7.600753,5.135672,-1.474930,-5.289414,3.146915,0.649415,-7.973107,6.343828,7.902966,5.422911,-7.683302,-5.686456,6.793227,5.800700,6.542627,6.390242,4.418664,2.366132,6.929670,7.185192,-0.296756,2.442124,-1.107686,-3.816079,4.520657,3.615693,-3.578151,-2.526808,-1.003013,-5.946847,-4.233134,8.291930,-1.696743,-5.747701,1.354350,-6.593369,-4.342222,-0.499794,-1.026203,-0.558040,-7.548404,3.943747,-5.532015,-8.149348,9.961446,-3.795876,-4.283682,9.635919,-1.323023,-1.065563,8.307359,9.490533,-1.518270,-2.156552,-9.333375,-9.733697,7.853587,5.635254,8.050085,-5.906015,-5.747022,-3.146385,-2.176470,9.495014,7.952138,-1.531367,-8.920088,-9.157385,4.673181,-6.904611,-5.224231,-1.619878,-5.103689,6.370712,2.339008,4.278682,-3.667153,-9.387661,2.847258,1.609627,5.171257,-4.349622,2.614495,-6.836778,5.525966,-1.910362,9.511389,9.008901,7.203023,0.852790,-5.481415,-1.401958,4.466465,-2.041348,5.067716,5.856578,1.565977,-3.419758,6.719738,-0.141732,8.574219,-1.812906,1.738278,1.422479,-2.525546,-1.147737,8.453240,7.061473,4.220871,7.716272,6.375930,-2.090124,-3.551120,1.857705,6.071552,3.186543,-7.975871,-5.503917,8.595327,-8.902638,-0.150748,0.282467,-2.119647,-3.734070,-3.950050,-4.353365,9.003640,-6.411699,3.936221,6.824677,7.938750,-5.271052,-5.743000,-5.907678,-3.079286,9.972602,2.152301,-5.566899,4.131116,5.649854,-8.172022,0.698129,-8.859050,-3.459917,7.377633,9.840869,-5.879254,-8.303620,-3.052363,-1.468439,-5.662172,0.384979,-8.044289,9.552489,9.682580,6.584515,-8.767476,1.295784,8.387218,-5.496569,0.780114,5.008178,0.137990,-0.545313,-8.123972,-0.608288,-3.421436,-0.951703,6.742441,-3.014411,4.654215,9.753412,-3.935789,-7.827231,-2.719614,-0.358232,-7.985337,4.872978,1.543697,0.173959,-7.872423,-6.225802,-2.347719,-4.419972,-3.092697,-7.354888,-0.670763,9.922205,-8.125067,-8.286662,5.416342,-8.244580,0.595742,5.650042,6.411513,-4.597349,2.763442,-1.881981,-6.224220,6.804914,3.988287,-1.113294,5.904220,-3.550055,6.200022,-5.994038,0.632522,2.357666,-2.410640,5.396630,5.110497,-4.092328,1.072174,-8.606073,3.163020,-4.998693,2.051631,-2.224351,4.676154,-1.396677,-1.504097,2.474332,0.468191,-7.001427,9.304219,3.585630,2.490728,0.653572,-8.986877,-7.807423,-3.306182,-8.917402,0.367597,-4.713054,5.521036,-8.119111,-5.081519,5.961930,-3.318132,0.136026,-3.794968,-3.912475,-4.382541,-8.747025,-9.572076,-8.933147,3.476088,-6.927924,-1.521460,7.943354,-9.424029,0.121036,5.325891,-0.736138,-8.095357,-3.261774,5.916875,-5.696010,-3.082333,-8.082479,-5.393646,9.716475,-8.425292,-5.144704,9.706027,-9.432718,8.043710,-8.846526,5.209686,-8.252594,-1.296525,-2.917841,-3.828217,-8.951770,0.304726,5.784486,2.915811,4.516334,-8.974812,-5.179966,-2.736008,2.839879,-2.701198,-5.944451,1.074177,1.836734,9.370415,8.629887,6.311537,6.080263,-1.117830,-4.025501,6.970789,1.357296,9.482393,8.185897,0.164287,-7.749266,-6.930290,7.414314,0.005837,-1.893339,-7.042534,-1.675820,1.961753,-2.169241,-3.602488,0.123904,-3.804370,-3.591914,7.606303,6.252627,-1.424028,-4.833495,7.711926,-5.964821,6.078313,8.995329,-2.327684,6.039420,9.514778,-4.428824,-2.858610,-6.168782,-4.588170,-6.761498,-6.235423,-4.522889,4.871677,-9.331875,-2.482372,-6.977134,8.415904,6.344357,4.566735,8.581198,-4.431497,9.768694,6.921817,-4.997742,-1.935095,2.689809,-7.715493,8.657509,2.625192,-4.223131,5.257967,8.789067,6.536602,-2.196423,2.218099,3.143883,5.414433,-5.750062,-7.519325,7.871822,4.871887,-8.984698,-8.382537,-5.801588,5.825186,-9.166976,2.182026,4.846737,-6.102603,9.862836,2.125388,-7.844131,0.605337,6.589630,0.830768,-1.523550,-9.570052,-8.999051,2.065420,-8.379033,-4.678219,4.857710,-9.163460,-1.856412,-6.400617,-9.353300,-3.183319,6.568875,9.095671,-7.682695,9.432083,9.256778,5.961765,-2.295069,-5.548698,1.321485,3.383786,-0.260996,0.115484,3.435997,2.681918,3.595887,-3.159573,3.404707,1.398026,-8.315555,3.830213,-7.893813,1.803295,4.189804,6.481121,-4.996186,1.655110,-7.028541,0.731169,-0.723714,3.750387,6.781232,-1.267606,4.835427,-8.674715,-4.402287,-8.335923,-2.738300,-4.445223,8.296916,-6.785334,-4.139798,7.773422,-9.242378,-6.521287,5.749125,-2.847569,4.363194,4.791279,-0.492906,-2.665282,3.888761,-9.779816,9.201421,1.567493,-8.317438,-3.619662,3.904204,-2.281645,8.529571,1.447561,-7.625442,0.307490,-2.802956,6.256870,-5.067576,-2.119554,-5.135855,2.406879,4.938277,-3.767295,-3.876362,-0.311886,-1.386966,2.099887,-6.652916,-9.066322,-7.517879,-2.911960,8.123047,1.369295,-2.189944,0.942831,-6.771845,-5.514300,-0.472724,-8.565546,2.786364,-0.459318,6.668294,2.289183,-4.895456,-3.558643,3.451157,-1.813455,-9.091547,-0.910679,6.874939,0.930961,-3.439541,2.740687,9.692842,7.579184,-9.662361,-6.569557,5.161701,4.347954,-7.977653,-7.330823,8.982057,-9.367692,0.936059,-4.035106,-3.973866,-2.126437,4.925640,8.138065,3.548536,5.225541,9.533222,1.540462,-2.575406,-3.647579,7.087006,-7.710254,8.234590,-4.306827,-7.151108,1.269005,0.639023,6.620892,6.171228,8.484969,-6.323711,5.240382,-4.986255,-5.290012,0.976244,2.228513,-7.985434,3.162441,-6.558274,-9.130343,-9.561787,-5.156188,3.478063,-7.724205,-9.682760,-0.921709,1.293723,-7.838610,-3.862639,-8.946439,-0.208667,-1.841124,9.440589,-2.564759,-0.187298,-1.868917,3.236122,-7.950418,8.414792,7.301475,-9.968476], dtype = "float32")#candidate|483|(2340,)|const|float32
call_482 = relay.TupleGetItem(func_112_call(relay.reshape(const_483.astype('float32'), [2340,])), 1)
call_484 = relay.TupleGetItem(func_115_call(relay.reshape(const_483.astype('float32'), [2340,])), 1)
bop_488 = relay.maximum(uop_479.astype('float32'), relay.reshape(var_472.astype('float32'), relay.shape_of(uop_479))) # shape=(12, 6)
output = relay.Tuple([bop_469,call_482,const_483,bop_488,])
output2 = relay.Tuple([bop_469,call_484,const_483,bop_488,])
func_491 = relay.Function([var_464,var_472,], output)
mod['func_491'] = func_491
mod = relay.transform.InferType()(mod)
var_492 = relay.var("var_492", dtype = "int64", shape = (12, 6))#candidate|492|(12, 6)|var|int64
var_493 = relay.var("var_493", dtype = "bool", shape = (12, 6))#candidate|493|(12, 6)|var|bool
output = func_491(var_492,var_493,)
func_494 = relay.Function([var_492,var_493,], output)
mutated_mod['func_494'] = func_494
mutated_mod = relay.transform.InferType()(mutated_mod)
var_534 = relay.var("var_534", dtype = "uint32", shape = (4,))#candidate|534|(4,)|var|uint32
var_535 = relay.var("var_535", dtype = "uint32", shape = (4,))#candidate|535|(4,)|var|uint32
bop_536 = relay.bitwise_or(var_534.astype('uint32'), relay.reshape(var_535.astype('uint32'), relay.shape_of(var_534))) # shape=(4,)
bop_542 = relay.less_equal(bop_536.astype('bool'), relay.reshape(var_535.astype('bool'), relay.shape_of(bop_536))) # shape=(4,)
uop_545 = relay.sinh(var_535.astype('float64')) # shape=(4,)
var_549 = relay.var("var_549", dtype = "float64", shape = (4,))#candidate|549|(4,)|var|float64
bop_550 = relay.subtract(uop_545.astype('int32'), relay.reshape(var_549.astype('int32'), relay.shape_of(uop_545))) # shape=(4,)
const_553 = relay.const([7,-2,4,-6], dtype = "int32")#candidate|553|(4,)|const|int32
bop_554 = relay.divide(bop_550.astype('float64'), relay.reshape(const_553.astype('float64'), relay.shape_of(bop_550))) # shape=(4,)
func_112_call = mod.get_global_var('func_112')
func_115_call = mutated_mod.get_global_var('func_115')
const_558 = relay.const([8.739598,3.979646,-5.338549,6.789584,0.241441,-6.484904,7.464009,-7.863826,-0.348786,-1.911218,9.560109,-5.411237,-4.890722,5.763705,9.834811,-7.433101,1.824364,2.218964,6.052481,-3.023466,9.536082,-4.707483,-6.050701,-2.470931,-8.009992,-2.340120,3.667190,-9.068597,4.100516,4.796683,-8.950520,8.278918,5.003030,-1.261803,4.971568,9.675927,0.957187,2.417193,-7.968101,-9.952116,-8.484848,0.733883,0.145502,-1.046627,6.250003,1.728005,8.824081,-6.629334,-6.116102,1.849676,9.564689,-2.500335,8.845470,5.958845,8.785312,-8.310881,-3.219117,2.413239,4.817137,4.916796,7.537840,-7.457451,6.271222,-7.756531,6.876894,-3.953635,-5.380035,5.533568,-5.070044,-1.427600,-8.623280,-8.709882,-1.286029,-3.606853,8.872264,-4.886381,7.560885,4.733341,9.419834,-3.363892,-8.817663,-6.781195,6.322728,-9.763851,-3.240373,2.836921,8.819185,7.882016,9.887989,4.008686,9.952952,2.668263,-5.908443,-9.809042,-8.292492,1.561528,8.465082,-8.825446,8.259080,-9.052531,7.834524,3.273484,9.886855,-6.646949,-2.076248,8.470391,0.669689,-2.664925,-0.084611,-8.122750,1.424345,9.177124,9.184062,4.606660,-5.625048,-8.445855,7.124586,-3.552789,-8.983898,8.287264,-1.412520,6.154312,-9.765011,1.404786,-7.157788,6.864829,5.374237,-6.575400,-6.147036,-4.433073,7.202662,-9.139891,-1.224074,-3.432582,2.854661,1.220334,-3.342385,-1.749462,6.329618,9.359259,9.057920,9.606201,3.215102,3.530304,-8.972191,-9.851650,-0.609386,-6.509958,7.161839,4.970089,0.732832,-0.861947,6.472698,-6.334746,7.949532,-6.350659,-0.173446,0.808736,9.679865,-4.342971,-4.282606,-7.588778,6.285398,9.542499,7.107953,-3.878247,-9.138236,-5.240666,0.995528,-8.127313,3.744398,2.209621,-2.316411,0.519443,6.334345,3.145554,4.180869,-5.906039,6.092180,6.291940,-9.649977,1.430389,6.731473,3.520860,-8.681548,7.272494,-5.663159,1.490970,1.225868,5.396503,-1.826352,0.142129,-7.715136,4.625471,9.625184,-4.621276,-7.330011,-7.977580,4.622246,-4.301198,6.520487,5.918044,-3.958170,9.524283,-9.025803,-8.891425,6.664963,-7.407419,1.514527,4.803818,-7.664863,-5.971207,2.371303,-6.887660,-1.530499,-8.143585,-5.379666,-5.410603,4.516088,5.982037,-2.153212,-1.499247,2.451496,4.861656,-6.337197,6.203814,-2.338265,8.638930,1.322160,-5.868525,-3.512009,9.147120,6.769182,6.390601,8.152859,-1.477574,-9.546653,-3.123959,1.189269,-4.365524,-4.024883,-0.247033,-6.948598,7.175698,-4.812379,7.948046,-0.736694,9.476393,-0.400260,-7.197912,2.093347,3.799792,-4.033495,0.567257,1.080927,0.587110,-3.500687,-7.379206,-1.246942,-0.294553,-8.350426,4.713269,-9.481013,-9.255871,-3.058041,6.333050,8.620732,0.225474,-4.208193,9.206818,7.759822,5.101576,-3.828959,-4.286613,8.764820,6.126749,-8.840012,7.531134,-6.210178,-5.252120,-6.917783,-4.010685,-6.895984,5.669429,0.145824,1.293182,-8.334427,-3.846289,-9.695368,8.456120,8.777520,0.833883,7.702828,-5.482179,-8.292746,-4.470880,-6.473695,-7.653658,8.104979,9.093550,-1.585184,7.377760,-7.900967,-7.078810,-8.187053,-3.455173,-5.054656,7.832778,-6.395499,7.015114,-7.265791,-1.909387,5.970211,-5.677970,-0.789774,5.427127,-0.070091,6.272465,-2.060580,2.374670,8.537284,-7.550857,-9.232377,-8.411711,1.665942,0.716064,7.353440,0.169136,5.291562,2.341914,3.117080,-8.912440,8.142375,-2.894395,5.612593,-4.033686,-2.041629,4.151959,3.944982,7.146157,1.551313,-6.359683,-2.123033,0.158754,7.519140,-1.696303,2.116380,-8.470223,-8.718729,-1.114766,3.423753,8.576583,6.073718,-0.862530,-4.268736,-8.134378,-4.348533,-9.248335,-9.094830,-0.759161,9.835751,-1.919563,-9.901688,7.340818,-1.542262,-5.412870,0.566760,5.101833,-9.183793,6.830325,2.810118,6.429909,-7.661567,3.123489,7.987633,6.695542,-6.278312,-1.314071,-4.315943,2.134140,0.971458,-0.477014,9.872003,-6.240514,4.038680,-5.310055,5.458719,8.417094,-2.649408,-0.314131,-3.265541,-7.579175,4.606580,9.600285,-4.946975,-6.934806,3.535257,-3.515861,-7.686859,-1.788811,-1.966464,6.592924,-0.042397,-3.722907,9.745124,8.871567,-5.347850,-3.341690,-6.649711,4.535873,-7.392462,-1.173534,1.755439,6.578394,1.195458,9.037676,-2.105408,1.248463,0.835221,9.244288,-3.272954,8.531130,-6.561290,0.533536,9.762881,-1.547476,-5.841999,6.722550,2.415990,-1.674523,2.379481,8.730780,-7.164940,-1.021384,-7.975138,-3.361754,-3.801680,5.980296,7.545410,4.138157,7.506212,-4.919741,7.904199,1.726593,-7.992674,7.555423,-6.001469,-0.966510,-9.741545,-2.594118,-6.504139,1.310634,-2.881750,-6.880546,5.098102,9.527491,6.799562,9.717464,2.077050,0.051068,-8.858185,1.550227,7.169989,6.057107,2.910814,-1.458896,-1.577010,-1.974095,-2.532392,-7.875440,7.992277,0.742082,6.795518,2.969375,2.872139,8.270018,6.708782,-8.216560,-7.266473,-4.506828,-0.370813,4.106297,6.896517,7.425036,-4.050412,4.051855,7.843947,-7.979257,9.436487,-0.020195,8.132336,-4.937496,-2.037459,4.387642,-3.963317,-8.537344,7.755594,1.208206,-4.574869,-4.280407,-7.199641,-5.568754,-7.708926,7.531829,-1.646732,5.290069,7.109057,-5.652853,-6.340135,-3.027631,-8.584483,6.461253,-1.722573,-3.673513,-2.874140,-9.254897,-1.931589,-1.075765,8.506632,6.464400,9.963556,4.909913,-2.712902,3.090152,-7.669949,-9.161761,-5.841577,-1.636806,-2.534350,8.612986,4.326575,-8.782704,-0.120774,5.894125,-3.194602,8.937405,2.846673,-4.734949,9.037894,-5.046056,6.317179,-4.971529,6.904102,-4.760266,9.469742,-4.591116,3.981081,-7.443113,3.881939,-8.290301,-2.399717,-2.861602,-1.159002,-3.639874,-8.786954,4.471439,0.518438,1.435301,-8.593612,-6.876620,-1.494526,4.503871,7.472245,0.070243,5.464405,-3.169075,-2.327728,5.367228,1.710101,-2.483053,-4.782401,2.940112,0.924954,-5.236585,4.487746,0.179537,9.472910,1.044660,-3.112423,-5.140279,-2.010038,-5.864129,8.116174,-4.485875,2.117803,-6.567686,-8.701201,8.828803,-7.190666,-3.790125,-3.751314,6.724510,-2.995575,3.941149,-9.854874,-4.114287,-5.963170,5.715835,-2.361422,6.629182,-6.292256,0.691278,4.587292,-4.345562,1.516674,7.686087,-1.543724,7.493611,-4.102374,8.062366,-0.505598,7.384653,-8.317339,-1.516988,-6.124358,-5.290499,7.853246,-7.962276,-9.283386,2.347634,6.557429,-0.734100,0.809878,-1.027174,-9.064641,-3.298954,1.482805,5.314734,-7.515027,-0.633232,1.767036,1.951504,-3.266629,-4.539673,-3.698070,-3.706121,-8.494707,5.835139,1.374584,2.709996,-7.769905,-5.059801,-6.039796,0.377647,-5.324833,3.856151,4.661882,-7.850142,-3.543881,-4.404476,-1.804881,-1.739564,2.493200,4.587996,9.898598,-1.773829,-7.740279,3.985543,3.190141,-6.395045,-4.409761,3.610666,-0.499049,-7.190492,-5.089720,-8.198624,6.141468,-5.738800,-6.861743,5.559756,-8.885745,7.726492,7.375175,3.657217,-2.931543,-7.667460,-6.647615,-4.996254,3.359422,2.644554,6.665736,6.813910,4.148756,-3.490708,1.215003,2.258598,1.879752,-6.519427,-7.676046,3.680888,1.656065,4.358008,-1.080288,3.171131,-5.245842,2.936743,-4.356390,3.949134,-6.530976,6.365914,9.184405,-3.064916,-1.289136,5.739896,-0.785465,3.867658,-1.413562,7.407647,-2.744500,0.928844,-8.619993,-0.126958,3.350530,-2.561026,5.018348,6.764203,-5.146779,-5.927950,-1.156945,4.368483,-2.091524,8.779746,-3.281946,8.013049,3.600545,4.768670,-9.600043,-6.193998,0.696092,6.836261,-1.256374,-3.402200,-5.502567,7.800834,-6.080984,-5.028645,6.519224,-2.290622,-1.422967,-4.097159,-0.438415,7.869928,-0.056385,-1.463965,-5.747663,-6.842069,-0.925586,-8.141181,5.006807,7.978661,-5.579106,3.196123,8.987026,3.158669,9.289238,3.498824,-3.933412,-3.678610,-8.028538,-8.978874,1.979384,-0.619530,8.850154,-6.319326,-0.493492,3.388235,0.781505,8.287844,-2.492557,7.157317,-2.240226,5.115541,9.099964,9.964573,-1.419990,1.077721,8.620381,3.021629,-2.795785,6.558412,0.246910,4.680745,6.477113,-6.014750,-9.387595,-1.474962,-4.376217,6.242981,1.898227,-8.656749,-7.686389,9.393308,2.889270,0.620655,7.152089,-6.049140,6.063902,9.410555,-1.846314,-1.002057,7.964888,-1.342215,-8.157236,-4.251639,-6.666086,8.849946,-6.977963,-9.310869,9.005410,7.181423,3.607382,4.419116,3.602316,2.187064,-6.600446,-4.887792,-4.155784,-4.595645,-3.771155,0.392712,2.964459,-5.733297,2.957643,7.442656,-0.132692,0.550436,-5.444654,-4.028226,-9.643342,-3.736324,2.228223,-7.207655,2.133372,-7.236413,2.433004,-2.316162,-3.141631,-2.080356,-5.368515,-5.580336,-6.574631,-1.207265,-3.105914,9.263737,-2.768254,-9.581342,-4.898810,-3.949697,6.326801,-9.224342,-3.488441,4.140057,2.564221,-4.555786,3.116827,-0.721000,4.082237,-2.787248,2.420068,-2.860368,1.136203,0.254893,6.781522,4.087904,-8.956195,-1.415391,6.297506,3.208358,3.509157,-3.832755,-6.487001,7.530974,9.162435,1.205919,4.350809,-9.205870,-6.065126,-1.630752,6.340259,-4.506739,1.153183,-5.306798,-5.858038,3.439408,-5.228936,-8.730809,-0.126448,-7.109700,-8.579088,-3.763530,0.429671,-4.908110,-3.352563,5.005349,2.700037,8.213353,-1.699132,9.249026,8.576583,4.547302,-3.209035,-4.491619,1.713445,-9.467556,5.879272,2.917689,5.282599,-0.822297,-9.857859,-4.589877,-6.336912,6.444675,0.545939,1.685886,1.868843,-8.822423,7.896555,8.872143,0.768312,-0.232070,-0.652561,3.137705,8.016577,-2.333860,-1.080488,0.460748,-2.973212,6.219689,7.881137,7.219796,7.641412,-0.633004,-7.903677,4.761728,1.090632,-9.507295,2.595105,-1.976076,-1.072086,7.453135,3.154221,6.193673,8.536626,2.472837,1.065224,6.863033,7.927273,1.724098,8.056709,4.974581,-8.773246,8.301249,-0.083041,1.671382,-0.993891,9.971492,5.272031,7.780239,5.127172,-0.953884,7.219994,-4.529730,5.074693,7.895728,-5.820745,-3.146761,-5.456176,9.598203,2.649737,4.443215,6.531810,9.900464,1.894292,1.130921,5.346207,-1.783583,0.760278,4.615117,-3.770633,-8.934303,-9.609923,-8.020033,-6.376405,1.644787,-9.849737,0.292623,6.125890,-4.657807,7.972024,0.550060,5.126095,-9.862750,-4.878755,-3.461303,-8.154832,-5.842001,7.926010,3.308810,-8.340641,7.981613,-2.300455,-0.777426,0.628617,-6.716338,-3.478776,3.788696,3.815174,-2.267635,-4.678035,1.455867,2.527595,3.605592,-8.253593,-1.880650,7.550916,7.363568,-1.065382,5.438292,-6.998105,5.159888,3.605333,2.934134,-3.184885,8.665710,-5.450191,3.804038,-3.340998,-5.877367,3.359368,8.299595,-9.034101,-2.169033,-8.831490,-6.647190,-0.822010,3.489570,-3.754673,-0.356109,-1.083265,9.830197,-1.692457,9.544790,7.542239,2.500530,-2.016710,8.884983,5.267843,-9.219186,6.515753,2.841381,-0.949003,-7.009097,9.469340,3.945385,-6.281624,-2.258971,8.986997,4.466171,2.101737,4.942217,3.743396,-5.201244,9.985742,-5.740643,0.607657,-4.223966,-7.099497,-0.048191,0.648842,5.631201,3.651757,1.584168,7.663434,1.419768,5.638075,3.118593,-6.388293,-6.017008,-2.610991,-5.047526,-0.246934,7.122566,3.997208,-4.479349,2.814357,-9.730545,1.199690,8.323680,-7.777269,5.244789,2.865536,-5.458404,-8.711255,6.945355,9.052341,-1.164233,-0.120917,-4.690010,7.764908,7.354366,9.211442,0.628450,8.697799,2.043455,-4.144978,9.051004,0.044555,8.475195,-8.840056,-3.157556,-0.753732,0.029656,-8.614342,3.870995,-6.730674,-0.468798,-6.707209,-4.089231,-1.068977,-6.183278,-0.785553,3.741347,1.688228,6.194350,3.560023,-2.597513,-9.911459,5.131311,9.762376,6.887547,5.901814,4.490701,1.209063,3.375085,-9.906422,-0.375536,3.933321,-3.082499,-4.836821,0.764989,-3.574365,-8.760665,5.075524,0.096317,-2.087206,7.347591,5.400514,5.567351,-4.157051,-9.921020,-1.264057,-1.451156,-4.876649,0.876656,-2.366225,1.990633,-1.024036,-2.545236,7.586485,-3.757826,-6.065155,8.048546,6.850739,-3.311070,8.399332,-5.831849,-6.619822,8.205642,7.814549,5.769629,3.187432,-2.657447,-7.087640,-3.864573,9.608559,5.332486,-6.428541,2.762664,-2.513668,7.269724,-5.522361,6.090843,-9.672389,-9.640164,3.651633,-6.136505,-9.516769,-8.381136,5.484619,-1.448076,-8.032477,-3.859285,-8.857634,-9.793418,2.188675,-1.998130,1.423379,-7.645306,-2.877132,9.762372,2.074786,4.089079,9.540396,-7.578357,-2.923114,8.776964,8.362568,6.377944,2.188206,-0.718289,9.653006,-4.963977,-4.601839,5.200107,0.959602,4.730310,-9.231160,-8.082384,-4.041545,-6.852698,9.171141,3.670658,6.709865,-5.212049,-4.308075,6.309985,6.067117,-4.494756,6.800108,2.416178,8.216774,2.635491,7.057880,7.865947,-3.920749,-8.329995,4.164368,-4.748727,-7.481075,3.464942,4.597001,-4.173625,-7.353608,0.134438,-0.226353,3.192023,1.561418,1.088730,-5.056441,-9.143994,-2.383913,7.232848,7.590505,-8.506643,-9.448351,-2.695423,1.917792,3.525987,-3.718999,3.858963,8.620714,-6.610838,3.245878,1.826402,-2.567890,-4.558914,-2.777481,-3.355042,-2.239667,8.721564,-6.226879,-4.746542,-1.334094,2.040120,-0.325368,-5.565368,5.274101,-9.191654,-9.497041,9.504890,-9.763333,-0.619550,7.969226,-9.193653,3.591538,-0.480885,1.397546,0.906626,-7.571145,-1.638860,5.607457,-2.205592,2.076771,4.508734,-5.004978,-9.099911,9.632224,7.682327,6.454168,-2.983911,1.534019,-4.899484,4.550880,6.686347,5.213210,0.810022,-7.575868,3.413467,-4.567502,9.434258,8.448309,3.566138,-7.367173,1.768361,-1.705121,9.450874,6.458881,6.442050,4.568720,-3.708302,-7.663551,-4.541178,-5.610502,9.986819,-1.850594,2.945886,-7.904618,-1.840000,-6.746888,7.907028,1.901444,-7.705265,-0.736295,-0.867563,-1.397153,-6.582783,-2.160496,7.853693,8.121757,7.606756,-6.597596,0.183763,-9.659758,3.346565,-6.389008,4.605546,7.066815,-2.114054,5.238209,-3.770087,1.781988,5.262019,1.995730,-7.665273,8.594200,-9.208196,9.920126,-0.905126,-8.632772,-7.368226,-7.126702,-9.654494,7.289132,-2.858790,3.295529,5.704541,5.689313,-0.237616,2.180076,7.234417,6.420878,-8.078117,-2.626898,-5.330849,5.816226,6.997379,-4.174327,0.025858,-4.640967,5.919311,-3.304000,-3.645702,4.835294,-7.724298,-9.270189,7.157294,-9.313103,-0.889691,-3.106402,8.844916,8.165025,-5.663477,-7.455894,4.397048,2.589407,5.030700,7.497701,6.906581,-7.215263,-2.519238,-3.466919,-8.874363,2.216622,3.063737,8.108117,7.071547,7.871482,6.858497,-9.638047,-4.308550,4.829810,6.718726,2.741969,4.819781,4.303781,-6.894636,5.138118,-5.009235,3.072151,-8.456691,-4.018759,6.652246,9.718299,0.532677,-1.518129,5.821798,1.911510,-1.897746,-1.861946,2.377858,6.639822,2.453110,-4.253191,-9.916880,3.948612,1.653309,-5.486605,5.728957,8.155579,8.902659,-8.822986,5.539161,-9.297324,-3.938308,2.424835,-3.884595,-1.871985,0.224083,5.487763,-1.159102,-5.889005,-7.553794,9.742938,6.824458,-2.140353,-4.749837,2.304128,3.535543,3.060762,-2.306345,6.261373,-4.326780,-7.390406,-0.174757,0.004911,-5.025879,-7.286686,-6.158899,-2.471914,-6.859935,2.783710,2.183828,-7.019806,-8.954298,9.624863,-2.792963,9.287737,-7.035599,-6.057384,1.057508,1.769180,-1.297942,-1.021274,0.065711,-0.820852,5.773624,-3.100296,-7.994235,3.509885,6.875846,-3.343348,7.620563,-8.877995,4.518512,3.278170,-8.514655,9.731312,-1.403132,2.985034,-0.683005,-3.386723,3.915381,7.908574,3.992344,-5.086595,9.180853,6.801977,-5.017267,-5.016038,-8.842184,-5.579254,-5.104798,9.239056,8.068932,4.870349,-6.956456,-3.459442,-2.298711,-0.537977,-1.107937,-7.366985,3.850054,0.049185,2.018704,7.120446,5.223054,-9.779224,1.774457,-6.310851,5.941793,8.781842,2.044300,0.174308,6.380640,-5.697112,4.866693,4.691899,-6.142200,-6.356226,-8.049273,1.232829,-8.595556,9.928231,-0.968751,-7.187965,1.330017,4.793829,8.406999,4.283652,-9.256626,5.018713,-0.197153,-0.766185,6.123047,4.886283,4.106606,7.997027,-0.878931,0.378535,-1.660563,-6.857589,6.557723,8.479308,9.862171,7.514777,-8.171249,7.905100,8.785656,0.217971,-4.671667,-5.464752,6.660769,8.699977,4.073797,-1.410475,1.042220,1.081963,3.865480,5.541170,1.054073,-1.842936,3.911632,2.069181,-2.188009,5.085597,2.041120,-2.696921,2.592399,-0.269597,-9.827381,4.073897,-7.549727,3.527812,0.642229,-5.319812,1.645998,-0.197722,-0.516071,-4.501754,-2.138783,6.744103,5.592755,-9.785856,-9.812317,7.685719,-1.023786,-7.319409,-9.014789,-8.293936,-1.317847,-1.817447,1.382533,1.364831,-9.304907,-4.430510,3.275905,-2.059722,6.979064,-6.698110,-2.662280,9.181812,-2.294128,4.380608,4.509912,-6.600369,-9.380527,7.328888,9.885606,8.506087,-0.615325,-3.876114,0.106739,4.009376,5.979796,-9.612544,6.637434,-1.466123,1.371054,-3.141947,3.197123,2.318909,-8.929978,-8.456802,2.449813,5.811445,4.743685,9.938456,9.597008,-3.900859,-8.697671,-8.509181,-6.520365,4.355644,-3.524949,-1.968475,-4.185411,9.264418,-1.932942,-7.639764,5.420079,-3.993345,0.495719,5.837906,-8.088685,-7.836251,3.137214,-1.635909,4.437513,3.017096,-8.161042,-5.469490,0.937776,0.341893,7.544340,1.794957,8.325051,3.500396,-7.064253,7.976220,-5.265573,3.205012,-7.460898,2.190808,-9.901690,8.945490,-4.784696,8.376836,7.193962,-0.829592,4.649914,7.308147,1.197515,4.822185,-9.369058,-5.614330,-3.691033,-5.359303,7.014142,2.877647,-3.432257,-6.519982,-8.365749,9.774700,-3.956787,-1.814963,7.291052,2.746840,-1.343683,-0.492836,1.373633,-1.610197,0.459446,0.053822,-6.199703,-5.730635,4.823684,-4.235708,-4.824577,-0.720483,7.329621,-9.273978,-5.028156,6.311456,0.933516,0.597115,-4.880877,-1.358668,-3.572716,-0.134567,-8.941768,-3.373369,-5.790162,9.541047,-7.711177,7.349885,-4.958412,-2.741939,0.798420,-2.057551,-4.735159,-0.195255,1.492702,-6.846291,-1.377003,-0.730983,0.067401,-6.295489,5.132350,-5.357755,5.625325,1.253395,-7.796138,7.127609,1.544918,-0.117836,0.954408,-1.511053,7.145797,5.369123,-9.083810,3.137248,-3.582620,7.294793,1.529858,4.180626,7.191739,0.709770,-9.193998,-8.700481,-6.715531,4.648975,3.660173,-3.871622,-1.473264,-4.131311,9.221828,-7.988310,9.320235,-7.341504,-0.642996,-8.339164,-6.858339,2.870395,-8.009157,1.885804,-4.413039,-8.902253,-7.850111,-2.940103,-0.220771,3.103368,-7.444020,1.376201,2.129309,0.576154,2.248616,-3.954034,5.396779,1.667988,8.677703,-8.246840,3.483602,1.100575,9.488079,0.116450,-7.089077,6.732073,-1.709645,-1.489913,-7.769196,0.273601,6.749497,-0.897726,4.090719,-7.027617,-5.026920,-9.203207,-0.920969,5.723095,-6.676394,9.520448,-2.025995,9.516575,-9.916528,-2.776302,1.996925,-9.432546,9.216393,8.833715,-1.588447,2.292203,-0.057677,8.842214,2.643105,-2.922757,2.067725,-6.356184,5.977275,-0.919836,-7.968620,-4.657273,6.735523,-6.010249,7.911809,2.945048,-8.574457,-7.216317,5.829831,7.659007,2.666890,-4.881471,9.540911,-9.201955,-7.521780,-5.555262,7.516413,5.608682,-7.522835,-0.145142,0.897725,6.693014,-8.945110,0.813256,5.551393,4.851022,-8.427810,0.590638,-5.282115,-1.708585,3.042076,5.076939,-5.561061,2.904963,6.054329,-9.717208,9.418010,-6.287598,-5.407413,5.480126,-6.951248,-1.984030,-9.082164,-9.743975,7.568950,-5.567896,-6.553135,4.753193,-1.545527,5.303770,-5.644067,-9.346415,3.169477,-5.273780,-1.479812,-8.769895,-9.091383,-8.421740,-1.071987,4.932428,2.392751,-6.039106,-1.559868,-2.658775,-8.433846,-2.361463,-6.088353,0.892208,6.730104,8.061814,7.448989,-3.836771,-6.611683,2.881450,7.015809,-8.531737,-9.786687,-4.958656,-4.707608,1.500650,-9.131889,-8.533674,-8.371816,6.798439,1.591937,-2.659635,-5.990072,-7.597834,0.438785,9.757588,-7.586692,4.554841,3.297664,6.193831,8.032258,-5.605881,-5.727724,-8.293715,-4.176007,-6.543602,-6.056632,8.242257,9.287491,9.299762,0.388972,-0.973407,-9.703012,-4.025192,8.158164,1.279673,-5.444728,0.826674,-2.219329,4.212021,0.754969,-7.029049,-6.502370,-5.346485,1.844883,-8.775509,-3.074661,9.347016,7.787247,-8.116324,4.480047,9.379629,-8.527053,6.097182,-0.138294,4.745949,-8.845535,2.623774,3.273731,1.062343,4.745020,2.342825,-1.377659,-3.605683,-8.248917,-4.038800,-1.428163,1.551421,-3.925778,-7.527816,-8.096069,-4.738975,8.966806,7.306770,1.739212,-8.415148,4.241424,2.774658,-6.861420,7.167197,-3.668754,-1.602783,8.144461,1.085759,-5.743204,-1.704305,-8.145647,-2.455999,-1.652402,-4.116385,-0.941850,-0.586796,6.079387,8.825394,5.511570,-5.671912,-1.289500,-7.349955,4.499793,-6.223140,8.489938,-2.808711,6.381669,-2.306566,-6.715097,-5.450927,4.286545,-2.061706,-0.321848,-1.212691,-7.301919,4.822823,9.422179,-7.152579,-5.707124,1.145409,1.964253,8.941962,-8.300363,-0.712969,-0.029695,2.236621,2.478519,-1.077859,4.163422,2.632193,-0.150024,-9.878946,4.032802,-8.007758,1.333555,5.444404,4.124405,-8.427710,-1.406098,-1.080098,2.389478,-4.023184,-7.801379,-4.457311,9.634351,2.454299,-6.879035,-0.625238,5.668726,6.990765,-0.480188,6.921660,7.947500,7.189381,3.700997,4.816361,0.127742,5.310436,-0.875501,4.031915,-4.303635,0.804792,-6.569164,-9.254563,-9.379391,3.964483,-7.587583,-8.507947,-1.725359,-7.926710,-6.090623,-0.621123,1.989865,6.551354,4.172284,-2.005485,9.593858,-8.878185,5.629965,0.866852,3.586261,-2.884031,-0.863423,8.263859,-3.126515,-8.353566,3.035189,-0.299490,-8.892312,8.934802,-5.934235,9.304698,9.699583,0.254538,-5.804892,2.878422,2.074234,-8.448240,-5.776426,-3.466962,0.375160,8.911068,0.062535,9.114332,7.661753,0.557575,-6.430863,-3.358311,0.375164,-3.227539,-7.931253,0.846058,0.968917,6.267516,4.139364,-6.779375,-1.048408,-5.640151,3.153056,-3.238683,-1.770073,-2.388178,-5.432554,-8.847957,4.930060,-8.899837,-6.265998,2.543594,4.668238,-6.196464,6.500168,0.868554,-7.776659,5.130428,9.475198,2.538604,-1.567991,5.296553,-6.525064,-2.553796,-9.705673,9.037229,-0.999946,7.855876,-6.178085,-5.140539,-0.835131,0.052084,1.784575,3.281495,-8.139843,-6.020019,-8.687143,-2.327922,-5.528701,-0.024164,2.099851,6.401400,9.045223,5.088280,-9.865719,1.038404,5.079213,-1.608422,4.139926,0.759608,-3.617740,-0.705509,4.676935,6.318168,9.120725,0.234843,9.219443,-4.591090,2.064187,-8.310415,-0.020035,-4.262777,1.705041,-7.857495,-3.723535,-1.197821,-0.633921,-5.678048,4.120951,6.350388,1.292398,1.440415,7.766217,9.356034,5.481562,6.184910,3.511916,4.679573,-4.462176,-1.715295,-4.657738,1.426528,7.148583,-0.782622,7.680714,-5.830363,-8.320243,6.153194,2.123929,-0.761335,0.110813,-8.279593,-7.671946,4.011372,-7.068250,0.212703,-9.472000,8.842237,-3.939265,2.671496,8.575058,2.473813,1.868844,3.150455,6.613169,-9.101265,1.616280,-1.132049,-3.077978,-0.620421,0.519160,3.305181,-3.012698,5.272386,1.075221,-0.358267,-8.883741,-1.518711,7.620910,4.582482,-1.516607,7.567843,-6.353007,6.759834,3.482972,5.247986,2.066991,-6.242586,4.162181,6.833202,-1.408013,5.453368,9.858868,8.923280,-0.272203,1.458264,-1.102101,-2.607969,-2.556741,2.514663,-3.121749,-1.509508,-5.381950,4.487126,4.092156,-4.130756,5.508305,-5.924892,5.358535,7.643042,-2.599625,-1.810401,1.988869,-6.027250,-0.087900,7.374996,-8.538689,5.249983,-1.972172,1.740667,9.101535,-7.174771,1.633923,4.012888,-6.152188,-2.609593,1.633389,2.129289,-8.662908,2.120956,2.271079,6.553951,-9.666639,-5.251717,8.965931,-9.623960,1.677014,2.475206,-7.878507,-9.519908,5.806605,2.405557,1.207929,0.988700,-6.097529,3.268305,9.534669,-3.306219,7.203539,6.033405,-1.939543,9.206496,-5.153053,-2.214232,6.077379,6.201365,-2.286169,5.784365,4.242103,9.752810,8.930825,7.013683,3.301512,9.633346,7.825784,6.176434,-2.581140,4.058450,-9.078759,5.177524,-9.332961,-4.208146,-8.481069,7.577726,2.278922], dtype = "float32")#candidate|558|(2340,)|const|float32
call_557 = relay.TupleGetItem(func_112_call(relay.reshape(const_558.astype('float32'), [2340,])), 1)
call_559 = relay.TupleGetItem(func_115_call(relay.reshape(const_558.astype('float32'), [2340,])), 1)
uop_560 = relay.asinh(uop_545.astype('float64')) # shape=(4,)
uop_564 = relay.atan(uop_560.astype('float64')) # shape=(4,)
output = relay.Tuple([bop_542,bop_554,call_557,const_558,uop_564,])
output2 = relay.Tuple([bop_542,bop_554,call_559,const_558,uop_564,])
func_567 = relay.Function([var_534,var_535,var_549,], output)
mod['func_567'] = func_567
mod = relay.transform.InferType()(mod)
mutated_mod['func_567'] = func_567
mutated_mod = relay.transform.InferType()(mutated_mod)
func_567_call = mutated_mod.get_global_var('func_567')
var_569 = relay.var("var_569", dtype = "uint32", shape = (4,))#candidate|569|(4,)|var|uint32
var_570 = relay.var("var_570", dtype = "uint32", shape = (4,))#candidate|570|(4,)|var|uint32
var_571 = relay.var("var_571", dtype = "float64", shape = (4,))#candidate|571|(4,)|var|float64
call_568 = func_567_call(var_569,var_570,var_571,)
output = call_568
func_572 = relay.Function([var_569,var_570,var_571,], output)
mutated_mod['func_572'] = func_572
mutated_mod = relay.transform.InferType()(mutated_mod)
var_600 = relay.var("var_600", dtype = "uint32", shape = (6, 3, 5))#candidate|600|(6, 3, 5)|var|uint32
const_601 = relay.const([[[9,6,7,-8,-3],[10,1,4,7,-6],[1,8,7,6,-7]],[[10,2,-4,4,-5],[10,-4,-9,8,2],[-10,-8,-9,-4,1]],[[-3,-7,-8,4,-2],[1,-4,-5,-7,7],[-9,-4,-7,1,10]],[[-5,4,-8,3,-4],[-8,-9,4,-5,6],[-10,-1,1,-9,-1]],[[6,-2,8,-3,-9],[-7,4,1,-9,8],[-10,-10,3,9,4]],[[1,-6,10,-10,-6],[-10,9,-9,3,-7],[-1,7,10,-3,-4]]], dtype = "uint32")#candidate|601|(6, 3, 5)|const|uint32
bop_602 = relay.subtract(var_600.astype('uint32'), relay.reshape(const_601.astype('uint32'), relay.shape_of(var_600))) # shape=(6, 3, 5)
bop_617 = relay.bitwise_and(var_600.astype('int16'), relay.reshape(bop_602.astype('int16'), relay.shape_of(var_600))) # shape=(6, 3, 5)
func_334_call = mod.get_global_var('func_334')
func_336_call = mutated_mod.get_global_var('func_336')
var_624 = relay.var("var_624", dtype = "float64", shape = (110,))#candidate|624|(110,)|var|float64
call_623 = func_334_call(relay.reshape(var_624.astype('float64'), [10, 11]))
call_625 = func_334_call(relay.reshape(var_624.astype('float64'), [10, 11]))
output = relay.Tuple([bop_617,call_623,var_624,])
output2 = relay.Tuple([bop_617,call_625,var_624,])
func_626 = relay.Function([var_600,var_624,], output)
mod['func_626'] = func_626
mod = relay.transform.InferType()(mod)
mutated_mod['func_626'] = func_626
mutated_mod = relay.transform.InferType()(mutated_mod)
func_626_call = mutated_mod.get_global_var('func_626')
var_628 = relay.var("var_628", dtype = "uint32", shape = (6, 3, 5))#candidate|628|(6, 3, 5)|var|uint32
var_629 = relay.var("var_629", dtype = "float64", shape = (110,))#candidate|629|(110,)|var|float64
call_627 = func_626_call(var_628,var_629,)
output = call_627
func_630 = relay.Function([var_628,var_629,], output)
mutated_mod['func_630'] = func_630
mutated_mod = relay.transform.InferType()(mutated_mod)
const_680 = relay.const([[6,2,1,8,-10,8,-10,-2,-3,7,-1,-2,5],[9,4,1,-10,-10,8,-1,-6,-6,3,7,8,-4],[2,10,-3,-3,-6,8,9,7,7,6,10,-10,-10],[6,10,-7,-5,2,-7,-4,-1,-1,4,8,7,-5],[-5,-7,-3,-5,5,7,-2,-10,4,-3,10,-3,-3],[4,-4,6,-5,8,-8,-10,4,4,4,4,10,1],[3,-4,7,-8,-8,-2,-7,-10,-3,9,8,5,9],[-10,-9,9,-6,-10,-3,-4,1,4,8,5,4,1],[7,-4,5,5,4,8,9,3,-4,-2,6,-7,10],[8,-5,-8,6,1,3,-7,-2,-8,-1,-2,9,4],[-10,10,2,-7,-10,1,4,-9,-10,5,1,4,4],[9,-9,-7,-1,-10,8,1,-2,-3,-6,5,-1,9]], dtype = "int16")#candidate|680|(12, 13)|const|int16
var_681 = relay.var("var_681", dtype = "int16", shape = (12, 13))#candidate|681|(12, 13)|var|int16
bop_682 = relay.bitwise_or(const_680.astype('int16'), relay.reshape(var_681.astype('int16'), relay.shape_of(const_680))) # shape=(12, 13)
output = bop_682
output2 = bop_682
func_685 = relay.Function([var_681,], output)
mod['func_685'] = func_685
mod = relay.transform.InferType()(mod)
var_686 = relay.var("var_686", dtype = "int16", shape = (12, 13))#candidate|686|(12, 13)|var|int16
output = func_685(var_686)
func_687 = relay.Function([var_686], output)
mutated_mod['func_687'] = func_687
mutated_mod = relay.transform.InferType()(mutated_mod)
var_735 = relay.var("var_735", dtype = "float64", shape = (3, 1))#candidate|735|(3, 1)|var|float64
uop_736 = relay.atan(var_735.astype('float64')) # shape=(3, 1)
bop_739 = relay.add(var_735.astype('float64'), relay.reshape(uop_736.astype('float64'), relay.shape_of(var_735))) # shape=(3, 1)
uop_742 = relay.asin(uop_736.astype('float32')) # shape=(3, 1)
bop_744 = relay.not_equal(uop_742.astype('bool'), relay.reshape(uop_736.astype('bool'), relay.shape_of(uop_742))) # shape=(3, 1)
bop_747 = relay.multiply(var_735.astype('uint32'), relay.reshape(bop_739.astype('uint32'), relay.shape_of(var_735))) # shape=(3, 1)
uop_750 = relay.asinh(bop_739.astype('float64')) # shape=(3, 1)
bop_753 = relay.greater_equal(bop_747.astype('bool'), relay.reshape(bop_744.astype('bool'), relay.shape_of(bop_747))) # shape=(3, 1)
bop_757 = relay.right_shift(uop_742.astype('int8'), relay.reshape(bop_747.astype('int8'), relay.shape_of(uop_742))) # shape=(3, 1)
bop_760 = relay.bitwise_xor(bop_757.astype('uint64'), relay.reshape(uop_736.astype('uint64'), relay.shape_of(bop_757))) # shape=(3, 1)
uop_763 = relay.acosh(bop_744.astype('float32')) # shape=(3, 1)
var_767 = relay.var("var_767", dtype = "float32", shape = (3, 12))#candidate|767|(3, 12)|var|float32
bop_768 = relay.logical_or(uop_763.astype('bool'), var_767.astype('bool')) # shape=(3, 12)
bop_771 = relay.floor_divide(bop_768.astype('float32'), bop_744.astype('float32')) # shape=(3, 12)
uop_774 = relay.log10(var_735.astype('float32')) # shape=(3, 1)
output = relay.Tuple([uop_750,bop_753,bop_760,bop_771,uop_774,])
output2 = relay.Tuple([uop_750,bop_753,bop_760,bop_771,uop_774,])
func_776 = relay.Function([var_735,var_767,], output)
mod['func_776'] = func_776
mod = relay.transform.InferType()(mod)
mutated_mod['func_776'] = func_776
mutated_mod = relay.transform.InferType()(mutated_mod)
func_776_call = mutated_mod.get_global_var('func_776')
var_778 = relay.var("var_778", dtype = "float64", shape = (3, 1))#candidate|778|(3, 1)|var|float64
var_779 = relay.var("var_779", dtype = "float32", shape = (3, 12))#candidate|779|(3, 12)|var|float32
call_777 = func_776_call(var_778,var_779,)
output = call_777
func_780 = relay.Function([var_778,var_779,], output)
mutated_mod['func_780'] = func_780
mutated_mod = relay.transform.InferType()(mutated_mod)
var_784 = relay.var("var_784", dtype = "float32", shape = (14, 16))#candidate|784|(14, 16)|var|float32
uop_785 = relay.sin(var_784.astype('float32')) # shape=(14, 16)
uop_789 = relay.asinh(uop_785.astype('float64')) # shape=(14, 16)
output = relay.Tuple([uop_789,])
output2 = relay.Tuple([uop_789,])
func_791 = relay.Function([var_784,], output)
mod['func_791'] = func_791
mod = relay.transform.InferType()(mod)
mutated_mod['func_791'] = func_791
mutated_mod = relay.transform.InferType()(mutated_mod)
var_792 = relay.var("var_792", dtype = "float32", shape = (14, 16))#candidate|792|(14, 16)|var|float32
func_791_call = mutated_mod.get_global_var('func_791')
call_793 = func_791_call(var_792)
output = call_793
func_794 = relay.Function([var_792], output)
mutated_mod['func_794'] = func_794
mutated_mod = relay.transform.InferType()(mutated_mod)
var_821 = relay.var("var_821", dtype = "float32", shape = (4, 10))#candidate|821|(4, 10)|var|float32
uop_822 = relay.log2(var_821.astype('float32')) # shape=(4, 10)
func_112_call = mod.get_global_var('func_112')
func_115_call = mutated_mod.get_global_var('func_115')
var_827 = relay.var("var_827", dtype = "float32", shape = (2340,))#candidate|827|(2340,)|var|float32
call_826 = relay.TupleGetItem(func_112_call(relay.reshape(var_827.astype('float32'), [2340,])), 2)
call_828 = relay.TupleGetItem(func_115_call(relay.reshape(var_827.astype('float32'), [2340,])), 2)
uop_833 = relay.exp(uop_822.astype('float32')) # shape=(4, 10)
var_835 = relay.var("var_835", dtype = "float32", shape = (4, 10))#candidate|835|(4, 10)|var|float32
bop_836 = relay.left_shift(uop_833.astype('int8'), relay.reshape(var_835.astype('int8'), relay.shape_of(uop_833))) # shape=(4, 10)
bop_843 = relay.equal(uop_822.astype('bool'), relay.reshape(bop_836.astype('bool'), relay.shape_of(uop_822))) # shape=(4, 10)
uop_846 = relay.sigmoid(bop_836.astype('float64')) # shape=(4, 10)
func_685_call = mod.get_global_var('func_685')
func_687_call = mutated_mod.get_global_var('func_687')
var_850 = relay.var("var_850", dtype = "int16", shape = (3, 52))#candidate|850|(3, 52)|var|int16
call_849 = func_685_call(relay.reshape(var_850.astype('int16'), [12, 13]))
call_851 = func_685_call(relay.reshape(var_850.astype('int16'), [12, 13]))
const_852 = relay.const([[-8.997983,-0.814333,0.098387,-4.162850,3.555893,-1.825047,-1.929570,-9.473562,6.863476,9.229348],[-9.053816,1.115986,5.476881,-3.735865,5.240450,2.140658,6.973445,1.324746,-1.260648,8.001124],[-2.998290,9.670406,-5.473432,4.482802,-1.221163,8.832278,-2.245006,-6.097092,6.643061,4.005108],[-8.299665,-7.013221,-0.045377,-8.187127,-5.368278,0.607008,5.140911,1.066161,-8.965533,5.905571]], dtype = "float64")#candidate|852|(4, 10)|const|float64
bop_853 = relay.logical_xor(uop_846.astype('uint16'), relay.reshape(const_852.astype('uint16'), relay.shape_of(uop_846))) # shape=(4, 10)
output = relay.Tuple([call_826,var_827,bop_843,call_849,var_850,bop_853,])
output2 = relay.Tuple([call_828,var_827,bop_843,call_851,var_850,bop_853,])
func_856 = relay.Function([var_821,var_827,var_835,var_850,], output)
mod['func_856'] = func_856
mod = relay.transform.InferType()(mod)
mutated_mod['func_856'] = func_856
mutated_mod = relay.transform.InferType()(mutated_mod)
func_856_call = mutated_mod.get_global_var('func_856')
var_858 = relay.var("var_858", dtype = "float32", shape = (4, 10))#candidate|858|(4, 10)|var|float32
var_859 = relay.var("var_859", dtype = "float32", shape = (2340,))#candidate|859|(2340,)|var|float32
var_860 = relay.var("var_860", dtype = "float32", shape = (4, 10))#candidate|860|(4, 10)|var|float32
var_861 = relay.var("var_861", dtype = "int16", shape = (3, 52))#candidate|861|(3, 52)|var|int16
call_857 = func_856_call(var_858,var_859,var_860,var_861,)
output = call_857
func_862 = relay.Function([var_858,var_859,var_860,var_861,], output)
mutated_mod['func_862'] = func_862
mutated_mod = relay.transform.InferType()(mutated_mod)
var_925 = relay.var("var_925", dtype = "float32", shape = (12, 16))#candidate|925|(12, 16)|var|float32
uop_926 = relay.log(var_925.astype('float32')) # shape=(12, 16)
output = uop_926
output2 = uop_926
func_930 = relay.Function([var_925,], output)
mod['func_930'] = func_930
mod = relay.transform.InferType()(mod)
mutated_mod['func_930'] = func_930
mutated_mod = relay.transform.InferType()(mutated_mod)
var_931 = relay.var("var_931", dtype = "float32", shape = (12, 16))#candidate|931|(12, 16)|var|float32
func_930_call = mutated_mod.get_global_var('func_930')
call_932 = func_930_call(var_931)
output = call_932
func_933 = relay.Function([var_931], output)
mutated_mod['func_933'] = func_933
mutated_mod = relay.transform.InferType()(mutated_mod)
var_945 = relay.var("var_945", dtype = "uint8", shape = ())#candidate|945|()|var|uint8
var_946 = relay.var("var_946", dtype = "uint8", shape = (4, 11, 14))#candidate|946|(4, 11, 14)|var|uint8
bop_947 = relay.equal(var_945.astype('bool'), var_946.astype('bool')) # shape=(4, 11, 14)
uop_954 = relay.cosh(bop_947.astype('float32')) # shape=(4, 11, 14)
bop_957 = relay.left_shift(uop_954.astype('int64'), relay.reshape(bop_947.astype('int64'), relay.shape_of(uop_954))) # shape=(4, 11, 14)
uop_963 = relay.cos(uop_954.astype('float64')) # shape=(4, 11, 14)
bop_965 = relay.floor_mod(uop_954.astype('float64'), relay.reshape(var_946.astype('float64'), relay.shape_of(uop_954))) # shape=(4, 11, 14)
uop_971 = relay.sigmoid(var_946.astype('float32')) # shape=(4, 11, 14)
const_974 = relay.const([[[9.220695,-9.480841,-8.852564,-5.206883,8.963419,9.542661,-7.739455,3.376583,-9.220140,8.652686,-2.171635,7.843594,-6.046432,-7.311597],[-8.003256,-1.169596,-6.431954,-8.664279,-9.000484,-6.649183,4.273483,8.459335,-8.791464,-5.306823,3.506991,6.916582,-0.006726,-9.688839],[0.459768,8.526984,6.841604,-7.650261,-5.957925,-1.200080,5.271202,-9.353001,-7.152649,-2.279412,-9.271972,6.042162,-2.072634,4.633730],[0.909733,-1.474538,8.145063,5.949427,3.295641,-4.168209,-8.303677,-4.400561,8.075967,-6.630672,6.182579,-2.270134,5.378795,0.417179],[-2.162311,-7.405825,8.923362,2.374570,-5.341678,9.601138,-6.116440,-7.104488,-2.350913,-2.851398,8.417653,-3.428662,8.271897,8.390735],[-1.702061,-5.793762,1.934249,6.663353,4.807250,8.806135,7.195365,4.325349,-9.024606,-8.318126,7.897113,-0.853926,1.346309,9.425565],[-5.456848,3.212570,9.738521,2.373054,9.542141,9.182850,9.550715,-1.993061,3.238603,-5.321868,8.496183,5.906625,6.271506,-9.968028],[-5.024458,0.803146,-6.003123,0.522009,3.044466,-2.955659,0.919451,4.569565,9.640972,4.952484,-5.354050,-5.023756,-2.195670,-8.085362],[-5.629393,-1.729924,-4.311330,2.593925,2.597772,-8.293782,6.032048,1.742995,4.257814,-8.532328,-9.136921,2.832237,7.871678,5.782159],[1.850652,-6.019951,-2.649767,-1.237032,-2.060450,2.263860,2.402596,-3.260900,-7.181752,3.943906,0.608542,-1.911309,-9.083778,-9.073743],[-1.162146,6.110541,9.155410,1.781459,5.016665,-7.112275,9.627722,3.917976,8.737665,0.859028,3.944894,8.189286,-6.224760,-5.745518]],[[-5.834572,4.361472,-3.902674,-4.826244,-5.458205,4.848848,-5.682212,4.389950,4.495806,-0.540291,0.592933,9.993012,-9.749150,1.954039],[-5.913872,9.407910,-7.430537,4.298459,-5.640651,-7.073165,9.146660,-3.354579,8.435059,1.180600,-9.571482,3.286333,-7.646791,-8.330662],[-1.810284,7.779344,9.842213,1.818684,1.357002,3.954161,-9.242766,-2.242679,7.820229,8.578722,2.762398,-6.471971,-0.745321,4.712160],[-3.440676,-8.915044,1.996397,7.741215,-8.208821,-8.177268,-4.974237,8.103371,1.893454,-1.801669,-6.192673,0.256974,6.105321,5.998750],[3.117110,-4.194329,-8.572820,-7.561569,-0.324051,3.678848,-5.544611,7.245658,5.462734,-2.318671,-2.269995,1.121136,-0.031717,-9.540626],[-1.535565,-1.702271,-9.034207,5.609723,9.719646,-8.536990,-2.852757,-7.874142,5.049134,4.268093,8.418781,5.401683,-9.145903,-1.712927],[4.077488,-8.318305,7.976468,-5.875402,1.425220,-9.245647,6.819309,1.636911,-2.999826,5.602250,4.692765,-8.910730,-2.248906,-7.323818],[5.090135,6.370217,-0.472228,-7.495534,-0.695410,8.045605,6.748697,-7.628384,6.018123,-9.258424,-8.533192,9.821571,-4.455785,-5.407131],[-0.059978,8.606046,2.513602,-5.639185,7.406490,4.280499,3.331575,8.192275,5.608829,-7.651515,9.569203,-5.206809,-3.701226,1.086531],[-1.937102,4.952050,1.708264,-2.035271,6.695906,-2.450642,4.201624,6.178177,-8.886306,8.991489,-0.387063,-7.397210,-5.217817,3.465867],[7.435771,0.157548,-5.493381,-8.065464,-3.232131,7.502501,7.648130,-3.893222,8.740931,-7.154982,-0.178138,0.762608,0.458769,2.617324]],[[4.265803,-7.218395,6.657166,-3.124633,-6.482395,0.251740,1.401613,-7.895336,-6.078514,9.900263,-7.535384,-9.372647,-2.596879,-9.924237],[4.830833,8.522901,-7.809255,1.833798,-5.637096,-6.854900,-0.877805,1.630071,-5.310070,2.655468,-5.466636,-8.253476,-5.447356,1.025335],[7.895979,-7.673808,0.439551,1.901174,7.748189,-4.287455,-6.847152,-5.663566,-3.967166,-2.533193,8.833109,-5.987441,-6.230277,8.018295],[6.569765,1.985967,-0.736918,3.611669,-8.807106,2.951949,-2.019413,7.016739,-9.833833,7.706412,9.662030,2.137610,1.739440,-0.172942],[0.948356,-0.902025,-5.718935,6.939135,3.098264,3.035454,8.629454,3.844286,-8.537220,-0.603160,-3.767932,0.577350,6.761221,6.343987],[-8.685988,-5.534260,9.787513,-1.686937,1.827953,-2.255799,4.274988,-3.454965,-8.125240,-7.946932,-0.590898,-7.391254,-5.405924,-1.539355],[-9.249377,4.998027,8.643964,-4.820949,-2.866464,-3.830171,-4.621337,3.706955,-0.996338,-8.527632,7.198390,1.464554,8.071554,2.257788],[-8.518950,7.623975,4.672527,0.759078,1.199854,6.579353,0.446852,4.043319,-1.228404,9.281884,-1.147175,1.359647,-6.975305,2.680322],[-5.906893,9.349121,-4.397894,-2.334709,8.689432,-8.365084,6.863502,4.589156,2.482217,8.553898,3.191138,8.468212,-4.160389,1.788160],[6.287688,6.920784,7.698350,-0.365748,7.511177,8.020913,7.051094,3.208574,0.288610,6.524395,3.922504,-3.681769,7.222463,-3.958851],[5.805359,-5.157144,-2.075094,-5.467801,-1.265499,1.654186,6.679993,3.794173,-0.508705,-0.074504,8.739840,3.811454,-4.323091,4.970020]],[[4.015335,0.716354,0.608380,7.002208,4.147534,-4.364322,8.531067,-6.519776,-0.326967,1.791388,-5.173668,5.268744,3.964611,6.748990],[-6.940264,9.021702,-8.825155,-9.225331,-6.563317,-0.397997,-3.039739,0.984875,-9.866878,-4.408411,4.674063,-7.010869,7.736878,8.423295],[-7.439904,-9.532935,4.257582,-7.507714,4.284783,-4.672657,-5.054704,3.455046,1.338461,-1.231390,-5.774258,-5.076131,-7.580504,-0.868752],[-7.108562,-4.884215,-4.557371,-5.371451,-8.721920,6.815996,6.908706,1.762868,-2.321440,-0.225062,-8.553804,-4.774221,-0.648793,-7.973269],[1.874836,-6.355986,8.781259,-1.709859,-9.380198,1.367064,7.653809,-9.750106,-8.556299,-5.683039,-8.411543,-7.555853,-0.047276,-2.540212],[-3.879396,9.165395,1.596945,4.195059,2.624247,-6.291531,-2.405891,-5.865226,-6.076813,1.017824,9.852870,-1.854521,-1.886570,-9.464910],[0.736876,1.522649,0.095671,6.117157,4.330493,0.906340,-5.301677,-7.838508,-9.896208,-7.484095,9.110165,4.564212,7.713496,-2.611852],[5.969106,-8.366634,2.763509,-4.308023,7.082969,4.097930,-8.118573,1.690014,-8.681069,-3.783784,-2.869584,-7.065092,-3.839139,-5.630165],[8.312465,0.544805,0.677985,7.527549,-4.293761,-3.615014,8.970460,-3.162305,-4.836151,-5.518923,7.472796,7.364134,1.723950,8.369416],[-3.483000,2.181998,-1.716717,-2.053419,3.123510,8.823728,0.439094,4.319901,8.617582,-2.328685,0.010250,8.818174,3.000671,-6.284100],[-6.757190,-3.361888,-7.131195,-6.865774,9.807454,-3.559489,-8.971593,-4.524226,5.263756,-0.452867,3.896651,3.912575,0.375533,0.456001]]], dtype = "float64")#candidate|974|(4, 11, 14)|const|float64
bop_975 = relay.maximum(uop_963.astype('int32'), relay.reshape(const_974.astype('int32'), relay.shape_of(uop_963))) # shape=(4, 11, 14)
const_978 = relay.const([[[4.506186,-3.793846,7.869498,8.451739,9.829723,8.164370,7.949125,9.881135,5.532461,7.373567,-2.664455,4.693413,-4.418082,2.938961],[0.955049,1.074567,-0.977668,-8.274444,-6.875223,1.758394,-6.997288,-5.948391,2.400981,-3.917851,-8.012737,3.980081,-6.228378,-9.748074],[1.008886,3.593485,-6.617690,-6.171746,1.809987,3.422072,-5.508590,4.852929,6.486222,0.015891,1.186123,5.193345,7.396695,-1.775426],[6.638765,-2.934864,-0.485297,1.033189,-1.973181,6.016380,-7.730461,9.943996,2.248000,4.976551,-7.559439,2.413245,-2.053869,-3.634305],[9.323690,4.062546,9.342194,2.874820,-7.789292,-6.792012,-2.386040,-0.287619,-3.971393,-4.934442,-6.210543,-0.938905,-9.725608,-6.102090],[7.808523,-8.802122,8.789278,6.497258,2.581121,-7.119843,-5.385734,-7.202663,-9.046180,0.117467,2.476124,-4.750033,-1.898807,-0.792927],[-4.637591,2.564340,3.609128,-5.366673,-3.861626,4.141239,-6.952907,5.870517,7.922294,-3.481430,-4.560099,-1.492388,0.173497,9.070991],[-3.551996,-2.751260,-8.834526,-4.578925,5.838192,-1.603606,-7.544040,3.432006,8.013236,2.747975,-5.603140,-7.775271,-1.030168,-2.393421],[8.207093,7.492651,-7.516679,-6.756581,8.779724,-0.127213,4.944679,-4.435767,9.709504,-6.313626,-0.188068,9.708750,5.754629,2.565685],[-5.283353,4.636291,5.147837,3.323361,-4.347904,-7.668938,-0.311694,-7.457261,0.412908,-0.800555,-9.065118,1.600151,-1.835329,-4.243887],[-7.256994,0.350664,6.490532,-2.183100,1.031398,-1.158797,7.189745,-8.263205,-3.598122,1.125649,5.631377,-4.289369,6.023645,7.090010]],[[-7.096680,5.301788,7.795590,2.789012,-4.212738,-4.862421,-7.130020,1.287733,3.617370,8.335174,0.316415,-3.661396,-3.671691,-4.709621],[-0.572377,-8.300427,5.673049,-2.346808,-9.677562,-0.146058,9.839473,3.048407,9.965714,-1.195546,-1.108348,-9.936939,-1.065197,-3.810344],[7.145180,-3.407389,-7.660781,-1.622518,8.368101,1.960318,5.634606,-6.527147,-4.105536,-7.334376,-1.407804,-0.361900,-8.264611,-0.482091],[7.588687,-3.892778,-4.212926,9.452821,4.250146,-7.339681,-8.068958,-5.200020,3.778145,-8.178150,-4.927030,-9.515388,8.493533,3.915578],[2.376561,6.898265,3.078395,-3.634950,-9.870111,-3.183916,7.820879,-0.276971,-3.649991,1.239027,9.408473,4.760844,-4.469575,0.550553],[2.514287,-7.031858,-0.720738,2.137352,5.337800,5.471650,5.431003,1.264703,3.119121,-3.235620,-9.637465,3.543866,-0.257811,-3.658515],[-1.357645,-2.039463,-2.334772,4.925858,-9.579768,-2.057127,-4.494504,-3.038118,-8.184715,-9.736220,2.826812,3.548940,9.385945,-3.996173],[-2.356019,-8.626724,-1.099395,-5.053927,0.324869,1.170426,-0.759591,6.710597,-5.054309,3.685480,3.503417,-0.131083,-2.217782,0.929191],[-2.836302,5.243874,-5.984245,-0.706656,5.544131,7.392948,-7.383050,-2.700540,4.319599,9.789390,2.031622,-6.487055,-6.258163,-8.843507],[-6.526653,-2.856296,5.052795,3.509513,-0.225713,-6.440413,-5.132638,-0.401446,-9.776484,-0.039278,5.797557,2.405723,-8.650614,7.437589],[-2.826776,3.135117,1.716840,-5.723702,-5.834052,-0.164168,6.866128,-4.028477,8.967200,-5.532234,9.403791,8.857792,-1.602902,-9.094156]],[[-6.715475,6.834230,9.752702,1.822971,3.007810,0.184726,-2.153311,-0.338198,-4.501218,6.037162,8.751065,6.632214,-2.214562,7.812578],[-4.346431,1.508696,-8.677737,4.736582,-1.460072,-0.457023,-9.700668,8.660236,-3.178040,-5.248106,-5.452764,-6.626213,4.013682,-2.763580],[-2.681074,-3.244616,9.472160,2.195184,0.868993,0.310849,7.167290,5.424820,9.963693,-4.023830,-9.105220,-5.592057,2.148020,-1.790002],[1.198521,-6.545424,5.844945,-0.778918,9.234858,-4.936095,-2.065520,-8.473880,0.984383,-7.960526,-2.938872,-7.572647,2.119591,9.522807],[3.524285,-7.944899,-5.835402,-6.598473,1.871255,9.100468,-3.332547,5.215161,4.181230,4.754879,7.557246,-6.392930,-0.513798,-1.973108],[3.475949,-6.312621,-0.319627,2.305047,-9.590721,-9.581147,-1.206158,-7.525350,4.648125,-9.585689,3.406811,2.132867,1.614088,-0.637445],[5.262841,1.629795,-5.227112,7.101696,-8.052102,3.691415,1.536754,2.546871,2.691615,-9.368363,0.598368,-6.038697,-9.543428,-2.363089],[5.529703,-9.811747,2.574828,6.518195,5.774428,-5.563708,-5.960085,-9.193914,0.686106,3.538484,1.155064,0.732501,-3.133938,0.554122],[-2.825859,-8.727550,-4.405682,-6.194357,4.812835,2.137946,-9.309708,-1.112170,-8.404477,-3.689711,-7.479939,-5.997410,-3.538625,8.537578],[7.672905,0.369796,-0.138084,5.058920,-1.191048,-1.416037,-9.768002,3.545556,-4.802209,8.899095,-6.426500,-6.232114,2.392372,0.976931],[4.421285,5.242825,3.349326,-2.747359,-2.733543,0.555410,6.873033,-1.901501,4.859765,-1.584890,-4.818972,-3.461827,-0.363738,2.300727]],[[-3.254644,3.107021,2.325146,-3.785669,5.300306,-5.801355,7.878387,9.578076,-8.904121,-6.888272,2.225221,8.771284,-2.870856,-3.444821],[-7.483419,-5.991822,-9.173749,-7.751834,-6.137599,2.277207,5.020347,-1.933349,7.161909,7.918529,4.652233,0.986218,3.588628,-2.348848],[3.399741,-3.243467,6.141976,-2.045600,-6.862265,8.091119,2.642041,-9.261405,0.856858,7.035327,-6.943343,-7.450850,-6.428716,-2.919834],[-5.008421,1.669593,-0.066044,7.657388,4.986188,7.919314,9.775746,-2.590205,3.252254,7.071446,2.175691,2.934544,-8.089374,-9.060096],[-4.149068,-3.956187,4.067035,-8.479070,1.832754,7.631171,4.081282,-9.876286,-9.314836,0.615145,6.723173,-5.603907,-8.078723,3.392285],[0.295367,3.992591,-6.185321,-2.937508,-1.069031,6.600123,-1.611233,-3.377479,-3.475634,-1.290448,2.300674,-1.499989,1.263171,-6.952954],[0.896247,-4.765045,6.425771,-0.517070,9.245056,8.176440,9.638291,8.737610,-7.451965,4.595589,-0.889080,7.027723,6.712912,-9.821019],[-8.199157,-8.194091,-4.833421,-9.841165,6.916090,-5.309016,5.829116,-9.249305,-6.058551,-0.417581,3.890386,7.918068,-5.455335,5.173359],[9.493065,-7.549732,-1.727383,5.542245,1.104564,-1.202184,-0.478722,4.498632,8.693931,-1.365959,5.280767,-6.920025,-8.887951,-6.680491],[-0.169128,-5.477559,3.181688,4.677956,-5.852932,5.074838,-3.797052,-3.790662,-2.349978,-7.276267,1.993767,7.573469,7.940164,5.643465],[-1.188488,-7.682816,1.288666,-2.900914,9.769103,9.518011,-1.889611,1.606972,-2.536715,7.793768,5.448777,-8.076321,-9.834007,5.610136]]], dtype = "float64")#candidate|978|(4, 11, 14)|const|float64
bop_979 = relay.greater(uop_963.astype('bool'), relay.reshape(const_978.astype('bool'), relay.shape_of(uop_963))) # shape=(4, 11, 14)
bop_982 = relay.less(bop_975.astype('bool'), relay.reshape(bop_979.astype('bool'), relay.shape_of(bop_975))) # shape=(4, 11, 14)
uop_992 = relay.rsqrt(uop_963.astype('float64')) # shape=(4, 11, 14)
var_994 = relay.var("var_994", dtype = "bool", shape = (4, 11, 14))#candidate|994|(4, 11, 14)|var|bool
bop_995 = relay.logical_and(bop_979.astype('bool'), relay.reshape(var_994.astype('bool'), relay.shape_of(bop_979))) # shape=(4, 11, 14)
bop_998 = relay.bitwise_xor(uop_963.astype('int32'), relay.reshape(bop_957.astype('int32'), relay.shape_of(uop_963))) # shape=(4, 11, 14)
bop_1001 = relay.bitwise_and(uop_992.astype('int64'), relay.reshape(bop_975.astype('int64'), relay.shape_of(uop_992))) # shape=(4, 11, 14)
bop_1005 = relay.left_shift(bop_1001.astype('uint32'), relay.reshape(var_994.astype('uint32'), relay.shape_of(bop_1001))) # shape=(4, 11, 14)
func_791_call = mod.get_global_var('func_791')
func_794_call = mutated_mod.get_global_var('func_794')
const_1010 = relay.const([[7.574019,6.449636,-9.417670,-0.022173,0.969299,-8.934836,-8.193660,-4.395693,5.222853,4.697697,-1.265898,-3.356991,7.855832,9.151969,4.103318,6.798182,-7.749461,8.664280,-9.002557,-2.002626,-3.451380,6.182122,6.929339,9.728926,7.105173,-8.611315,2.592130,6.643053,-4.179774,-9.971057,-4.822333,-1.717515,3.992863,-0.156097,-8.933993,0.035798,5.312246,9.917774,-6.775960,7.100374,8.247327,5.900641,6.576146,9.094752,-6.849370,1.370895,6.626899,9.056810,3.224867,9.179749,-1.914021,6.043236,8.703839,1.231691,0.527151,3.013551],[-4.097018,9.868292,2.074571,6.098166,5.457875,2.251772,-8.442648,8.052121,-4.997484,4.382954,2.330598,-4.096543,6.315239,-0.922969,-6.695287,-9.847300,1.146540,-2.132254,-3.560098,-3.245750,8.655470,9.310164,-0.164178,0.415294,2.011627,-7.492894,6.251468,5.737712,-1.640034,-6.956322,0.761667,5.081443,-0.497965,-1.162774,8.366433,-4.302029,-4.091356,-3.234502,-9.469148,1.845335,2.646047,-4.359720,-2.096236,7.860082,-2.359525,3.576958,-8.582006,-1.113038,5.164415,-7.334152,0.829699,5.735455,-6.163666,-4.584925,0.255951,-1.454952],[4.780537,-6.263400,-7.499857,-8.273535,3.092788,-0.426511,-1.032127,-1.884517,5.982080,-0.172006,-1.411878,-7.941179,-7.385686,0.758520,-6.612298,-4.888802,0.009170,1.525805,-6.064810,-2.986462,-8.231599,-1.463824,9.189130,-0.747321,3.598481,7.332363,-5.975766,-3.907253,-7.392126,-1.037505,7.535413,1.626786,8.348788,-2.305372,-3.755028,8.874256,0.933485,-0.851475,7.502261,-4.767303,2.614435,-3.042441,7.191890,-4.702956,-8.642667,5.853165,3.123101,-2.421630,8.595186,4.984512,1.794101,-2.938048,-6.470576,2.860579,2.338123,-0.720090],[5.774763,-6.835491,5.488379,5.225272,-7.578974,7.283124,7.865742,-0.864150,-6.756379,-4.095141,8.920459,-7.403561,4.210289,9.978133,1.435720,-2.584918,-8.845046,-1.783146,5.157747,2.102998,-3.548306,-6.676578,5.544015,-1.927510,-3.355210,9.820327,-8.101636,4.823913,-8.664578,-0.851910,-0.117192,-1.944375,-4.055687,-3.603925,-1.571550,6.527617,-8.661916,-0.039668,-4.538838,0.893263,-6.013430,-6.133458,-9.482480,-3.875195,-4.468341,6.666158,1.121331,0.631266,-6.830435,-3.556388,-7.033073,9.346879,9.720283,-2.101837,-6.836762,-7.341275]], dtype = "float32")#candidate|1010|(4, 56)|const|float32
call_1009 = relay.TupleGetItem(func_791_call(relay.reshape(const_1010.astype('float32'), [14, 16])), 0)
call_1011 = relay.TupleGetItem(func_794_call(relay.reshape(const_1010.astype('float32'), [14, 16])), 0)
func_334_call = mod.get_global_var('func_334')
func_336_call = mutated_mod.get_global_var('func_336')
var_1013 = relay.var("var_1013", dtype = "float64", shape = (110,))#candidate|1013|(110,)|var|float64
call_1012 = func_334_call(relay.reshape(var_1013.astype('float64'), [10, 11]))
call_1014 = func_334_call(relay.reshape(var_1013.astype('float64'), [10, 11]))
uop_1016 = relay.log2(bop_1005.astype('float64')) # shape=(4, 11, 14)
bop_1020 = relay.add(bop_998.astype('int64'), relay.reshape(bop_979.astype('int64'), relay.shape_of(bop_998))) # shape=(4, 11, 14)
bop_1024 = relay.greater(uop_1016.astype('bool'), var_945.astype('bool')) # shape=(4, 11, 14)
uop_1028 = relay.acos(bop_1024.astype('float32')) # shape=(4, 11, 14)
uop_1030 = relay.cosh(uop_1028.astype('float32')) # shape=(4, 11, 14)
bop_1032 = relay.logical_xor(uop_1028.astype('uint64'), relay.reshape(bop_947.astype('uint64'), relay.shape_of(uop_1028))) # shape=(4, 11, 14)
func_567_call = mod.get_global_var('func_567')
func_572_call = mutated_mod.get_global_var('func_572')
const_1038 = relay.const([5,-1,1,6], dtype = "uint32")#candidate|1038|(4,)|const|uint32
call_1037 = relay.TupleGetItem(func_567_call(relay.reshape(const_1038.astype('uint32'), [4,]), relay.reshape(const_1038.astype('uint32'), [4,]), relay.reshape(const_1038.astype('float64'), [4,]), ), 3)
call_1039 = relay.TupleGetItem(func_572_call(relay.reshape(const_1038.astype('uint32'), [4,]), relay.reshape(const_1038.astype('uint32'), [4,]), relay.reshape(const_1038.astype('float64'), [4,]), ), 3)
bop_1042 = relay.not_equal(uop_1030.astype('bool'), relay.reshape(uop_954.astype('bool'), relay.shape_of(uop_1030))) # shape=(4, 11, 14)
bop_1045 = relay.logical_xor(uop_1030.astype('int8'), relay.reshape(bop_1005.astype('int8'), relay.shape_of(uop_1030))) # shape=(4, 11, 14)
bop_1048 = relay.bitwise_xor(bop_1032.astype('uint16'), relay.reshape(uop_1030.astype('uint16'), relay.shape_of(bop_1032))) # shape=(4, 11, 14)
uop_1053 = relay.sqrt(bop_1032.astype('float64')) # shape=(4, 11, 14)
uop_1056 = relay.asin(bop_1024.astype('float32')) # shape=(4, 11, 14)
uop_1062 = relay.log(bop_1032.astype('float32')) # shape=(4, 11, 14)
const_1064 = relay.const([[[9.838698,-6.484353,9.350355,-6.585530,5.631416,5.844104,6.730069,-1.818517,4.125804,-5.206272,5.851296,-2.128592,4.843920,-4.635475],[8.161674,4.291922,-8.737183,-2.299187,8.108854,-7.555134,5.618187,-7.202938,4.074308,-7.663230,3.992138,-1.349320,-0.072044,3.705015],[-2.065648,-8.194205,-4.127112,-7.794491,2.298755,-1.225389,7.848926,8.563721,7.286754,0.050534,-3.158447,2.438226,-7.249751,1.585570],[-8.607604,-8.009772,-6.195262,-8.353157,6.012979,-9.956294,-7.125491,7.428759,2.307203,-3.261030,-4.157607,1.218784,2.438740,8.152287],[-9.315149,7.647516,4.971966,7.324634,-1.052451,-4.518270,-2.451591,-5.646691,-7.204040,8.934348,-7.251660,-7.587099,9.701329,-6.228633],[-3.298258,4.660628,-2.640634,2.042623,-9.695939,2.492816,-4.874410,-2.899317,-1.128851,6.182466,-1.306821,9.733638,-9.733740,-8.154224],[1.133399,0.611425,-3.973788,1.577860,9.890703,-7.379720,3.520655,-8.297975,-5.506509,0.917511,3.707202,0.374539,8.752356,-5.589797],[-2.460780,7.974770,8.708797,3.938641,5.209026,-0.144678,1.419913,8.985858,7.330797,-4.682472,-9.930147,-2.921803,8.133232,-9.352390],[-3.991804,-8.210337,4.972722,8.345124,-7.131182,-7.985031,4.641124,-7.822924,2.265024,6.238891,7.875859,-5.304700,3.993808,0.487454],[-3.213971,2.161153,1.697854,1.051744,-9.921663,6.482933,2.798338,-0.894505,5.665244,4.104508,-6.551540,9.433968,0.926027,-9.678808],[-0.241338,5.927158,7.175850,-5.387655,-8.742285,7.340621,-5.577137,-9.763642,-6.915864,-6.376255,0.738363,-1.633933,-1.099329,-7.286231]],[[-6.986938,7.532938,-1.309663,6.121351,7.250084,-5.824759,-0.546878,-2.071811,4.448671,-1.049717,-7.511029,7.313671,4.862717,0.464820],[0.672165,7.207369,-7.435868,-0.696750,4.278638,-0.115404,8.406343,-3.367543,-6.670448,-6.450187,0.165611,1.468219,3.367455,-7.698050],[3.035830,2.414112,8.988486,-5.213630,0.264813,-9.647698,-1.904361,0.425405,-8.014481,2.071816,6.950236,-2.447759,5.481094,-9.299463],[-6.288333,6.986925,-6.093209,-1.197870,1.937563,-1.132910,7.131909,9.020196,4.456685,-9.722288,-1.956938,7.408826,2.986045,8.444044],[1.361741,-0.980082,-2.538138,9.103542,-6.803730,-5.995188,-0.634693,-0.825787,6.328502,-9.955140,-5.529334,-7.628779,-4.942267,-0.661395],[1.156272,-9.171306,5.818451,-5.014610,-3.321774,0.444578,1.887081,-8.155192,-3.163892,-7.278005,-9.272087,-3.395844,2.565198,-3.690810],[-2.043883,2.830579,-9.566933,5.325500,-1.941522,4.495631,5.184832,6.613233,-4.358564,4.806076,-1.556354,-5.216760,-9.338543,-8.361209],[-6.764127,2.709602,8.974174,-8.935351,9.794487,-5.749161,-3.703227,-7.677285,-5.266422,-0.815192,-7.282930,7.139815,9.544540,2.901805],[-1.443489,3.196471,-8.070206,-6.662043,-3.169055,1.948427,-5.724978,0.559271,6.519632,-6.940518,-3.633713,-3.654549,-6.167309,4.266543],[-2.050936,7.682591,-2.218111,4.001858,-3.020853,8.174550,-9.359757,-1.362795,-1.453440,6.207241,7.676101,3.619120,7.313123,-4.577972],[7.078936,4.915943,4.192381,-5.420499,-6.731330,-4.177062,1.309068,8.075095,3.480070,-0.345790,4.406383,4.282002,-4.680074,-5.631552]],[[6.044687,9.921777,9.768303,-9.280042,-7.841826,-3.477777,-1.939232,7.889100,-1.209910,8.123791,-8.519065,5.924853,-3.631739,-2.985395],[8.183057,-1.529403,-6.745326,7.045217,-6.161839,-9.919795,6.789090,6.371458,7.813944,9.150916,3.377520,2.593483,3.042205,-7.709394],[-3.443145,-3.028199,0.571694,-0.338603,-4.216267,4.995392,5.796837,3.938535,2.033132,-0.665244,8.366820,-3.164379,-0.577511,-0.166174],[8.064870,3.899984,-5.925123,5.917304,-3.585443,9.789390,-1.560347,-4.998809,-0.989901,-4.772152,-4.006049,-6.895779,-1.348141,4.575648],[6.714031,-1.992776,-8.090072,-8.953899,1.352775,-5.799466,9.114584,3.728406,0.259697,2.084755,6.482548,5.657890,-8.065661,-7.898857],[-2.737521,6.499746,2.474804,-8.294621,-2.472109,-5.760065,3.313070,9.859755,-5.350946,-4.498817,-9.821696,2.533907,1.838580,-5.079037],[5.721900,-4.819162,-6.204695,3.754798,-9.811846,2.060964,-7.700151,-9.842195,-2.575616,-3.278347,-1.699163,-6.641014,-1.572497,5.959265],[-6.569472,0.593002,-6.379285,-4.678011,6.955330,-7.136422,3.075328,-3.986647,-0.322447,8.612335,4.150687,2.333833,-8.082881,-5.087972],[-8.825714,-5.961588,4.602103,-1.228691,-9.895833,-7.063935,-6.226131,3.470918,-6.208449,9.994207,-4.030801,-8.049949,-6.001105,-0.101412],[9.349713,3.380937,-8.954150,2.483774,9.468497,1.491165,-7.623469,5.576581,-3.672569,-1.959014,3.218061,0.495913,1.618970,8.755553],[-7.978857,-8.046041,-6.170702,1.175794,-3.196197,9.810377,-7.629639,6.810667,-5.104450,0.388838,8.573399,-4.585798,8.978866,-6.667587]],[[4.569943,-5.093642,1.868805,0.830021,-3.604604,-8.496370,1.647784,-1.560096,-6.483131,-3.915915,-6.559863,-5.291838,-5.504640,-5.226227],[-0.887088,-7.266722,-0.949185,6.643103,5.850991,-0.325659,3.832936,-7.902546,-7.603766,-1.384051,-9.740690,2.619446,-1.695518,-9.067618],[-4.959364,-4.237661,-6.229950,-5.426615,2.999939,-3.826959,1.531019,-1.855855,-3.979576,2.601120,6.454797,9.208479,2.141558,6.803070],[-9.376202,-7.492456,-8.479663,-0.142130,8.907892,-8.954810,-8.250483,3.592016,0.276647,6.796795,7.232615,-5.202930,-2.339156,-0.120017],[-0.343888,-8.077092,-4.387773,-3.092951,7.761462,6.979999,1.503975,-2.495884,-9.124868,1.662325,9.200961,3.289916,-1.886799,-6.518655],[-5.753718,-4.904520,-2.851596,8.920277,5.217510,3.314072,-1.278370,7.066566,-2.758744,-5.400968,3.790152,-0.999258,-7.047781,9.957061],[8.684659,3.246371,4.561265,7.163510,-3.023351,-5.912955,-4.556884,4.550129,-8.592459,-7.842614,-7.479101,0.522285,2.138409,-2.086163],[-7.659723,-7.314330,8.335075,6.759514,2.872577,-5.489945,4.591934,4.074879,7.438975,1.082603,2.563167,-3.476735,-3.083778,9.098275],[-9.524981,8.893830,-4.676671,-2.856179,3.631047,-1.342893,-5.081816,0.622004,5.287858,9.850985,3.027559,-1.770127,7.811333,-8.985647],[-0.716645,0.415580,2.926937,2.562774,-1.511227,-0.375590,4.747010,-4.042845,7.556096,-4.285858,-6.165874,2.445719,-3.172362,-1.597282],[8.474757,3.096978,-9.653943,-5.085030,3.298159,8.993360,9.285213,6.249762,-6.129343,6.036109,2.346759,-2.338867,6.913605,2.398313]]], dtype = "float32")#candidate|1064|(4, 11, 14)|const|float32
bop_1065 = relay.minimum(uop_1028.astype('int64'), relay.reshape(const_1064.astype('int64'), relay.shape_of(uop_1028))) # shape=(4, 11, 14)
bop_1071 = relay.mod(uop_1053.astype('float64'), relay.reshape(bop_1048.astype('float64'), relay.shape_of(uop_1053))) # shape=(4, 11, 14)
bop_1075 = relay.power(bop_1024.astype('float64'), relay.reshape(uop_1062.astype('float64'), relay.shape_of(bop_1024))) # shape=(4, 11, 14)
func_82_call = mod.get_global_var('func_82')
func_84_call = mutated_mod.get_global_var('func_84')
call_1081 = relay.TupleGetItem(func_82_call(relay.reshape(call_1037.astype('float32'), [12, 13, 15])), 0)
call_1082 = relay.TupleGetItem(func_84_call(relay.reshape(call_1037.astype('float32'), [12, 13, 15])), 0)
bop_1084 = relay.less(uop_1053.astype('bool'), relay.reshape(bop_1065.astype('bool'), relay.shape_of(uop_1053))) # shape=(4, 11, 14)
var_1091 = relay.var("var_1091", dtype = "int64", shape = (4, 11, 14))#candidate|1091|(4, 11, 14)|var|int64
bop_1092 = relay.logical_or(bop_1065.astype('bool'), relay.reshape(var_1091.astype('bool'), relay.shape_of(bop_1065))) # shape=(4, 11, 14)
uop_1096 = relay.sinh(bop_1042.astype('float64')) # shape=(4, 11, 14)
bop_1101 = relay.logical_and(bop_1032.astype('bool'), relay.reshape(uop_1053.astype('bool'), relay.shape_of(bop_1032))) # shape=(4, 11, 14)
var_1105 = relay.var("var_1105", dtype = "float64", shape = (4, 11, 14))#candidate|1105|(4, 11, 14)|var|float64
bop_1106 = relay.subtract(uop_1096.astype('int32'), relay.reshape(var_1105.astype('int32'), relay.shape_of(uop_1096))) # shape=(4, 11, 14)
bop_1116 = relay.subtract(uop_1016.astype('uint64'), relay.reshape(bop_1048.astype('uint64'), relay.shape_of(uop_1016))) # shape=(4, 11, 14)
output = relay.Tuple([bop_965,uop_971,bop_982,bop_995,call_1009,const_1010,call_1012,var_1013,bop_1020,call_1037,const_1038,bop_1045,uop_1056,bop_1071,bop_1075,call_1081,bop_1084,bop_1092,bop_1101,bop_1106,bop_1116,])
output2 = relay.Tuple([bop_965,uop_971,bop_982,bop_995,call_1011,const_1010,call_1014,var_1013,bop_1020,call_1039,const_1038,bop_1045,uop_1056,bop_1071,bop_1075,call_1082,bop_1084,bop_1092,bop_1101,bop_1106,bop_1116,])
F = relay.Function([var_945,var_946,var_994,var_1013,var_1091,var_1105,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_945,var_946,var_994,var_1013,var_1091,var_1105,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_945= np.array(-3, dtype='uint8')
module1.set_input('var_945', input_945)
input_946= np.array([[[3,5,-9,6,8,4,-1,4,-5,-2,-4,6,4,6],[-9,7,4,7,-10,-7,6,2,8,9,-6,6,3,1],[1,5,6,-4,-4,4,-6,2,6,-1,1,-8,1,6],[8,-3,-5,-7,-10,3,-3,-6,2,3,2,-10,2,-10],[4,8,5,8,-10,3,7,-2,7,-9,5,-4,-6,10],[4,2,7,-9,1,-2,-6,9,-5,4,-10,-8,7,-4],[6,-10,5,8,1,-6,-7,-1,5,6,4,9,-7,9],[-9,-6,6,-7,9,6,-5,10,1,6,-5,6,-4,-3],[2,-4,4,7,-7,4,-2,-4,1,8,9,-7,-8,-6],[-8,3,1,-4,-9,-7,-7,-2,9,5,-4,-3,-9,-9],[-3,-9,-4,-2,4,-9,7,1,7,3,1,-8,-3,10]],[[-1,-6,6,5,10,4,-3,6,9,6,-3,1,-8,-1],[-10,-10,-1,-5,-6,6,8,-9,-3,5,-4,-9,1,-3],[9,-10,4,-1,-10,4,7,-1,10,-7,9,-8,-2,-2],[-6,-4,8,5,-5,8,3,1,-2,4,-6,-6,5,-10],[10,4,8,1,1,7,-2,-3,-7,-4,9,-10,3,2],[3,-6,5,-8,-7,8,-7,-4,-1,4,3,8,10,-9],[-7,10,4,-2,-8,-1,-1,3,-5,7,-3,-6,10,8],[-4,-2,9,-9,-2,1,3,-2,-2,-10,-3,-5,-7,5],[-4,7,2,-9,3,-4,-10,4,-9,-6,3,-8,-3,3],[5,-7,-10,9,6,-1,-7,-4,1,10,6,1,-4,-4],[-3,8,4,6,-2,6,-4,-6,3,8,8,4,-6,3]],[[-3,8,5,-3,-3,-5,-6,10,-9,1,-6,7,-6,10],[-5,1,-10,-5,5,4,-7,-3,-1,4,-9,3,1,1],[-3,1,-4,6,-1,8,9,6,-2,-10,1,-4,-9,10],[-7,9,-4,7,-3,1,-6,-4,1,-2,8,-8,7,1],[-9,6,-4,7,7,5,9,-6,4,-9,-9,-10,4,-5],[-9,7,-1,-3,9,-4,-4,-8,6,-9,3,5,-10,8],[2,4,-2,-7,-5,-8,2,3,-3,-10,-5,9,-6,10],[9,9,1,-3,6,6,4,-6,-7,4,-1,7,5,4],[2,9,-1,-5,4,7,-1,1,-6,2,9,-3,2,6],[8,1,5,-1,10,1,5,-4,-9,-2,6,-10,1,3],[5,-3,1,-5,3,3,4,-9,-9,7,-10,7,-4,10]],[[2,1,5,2,-7,2,-3,-7,-10,5,-9,-9,3,6],[-5,-5,2,-4,-1,4,-1,9,-3,10,3,3,10,-3],[-10,-10,-9,-1,2,-9,2,-2,4,-9,-10,-10,-4,6],[-7,-7,-10,-3,4,2,-7,-9,-8,4,-4,9,-1,6],[-4,-1,1,-9,5,-2,5,-6,-6,-3,-6,4,-7,-4],[4,6,-2,10,-5,6,2,-10,1,9,-1,-10,9,-8],[9,-5,-2,10,7,7,10,3,-1,-8,9,10,2,-8],[7,7,8,10,4,5,-9,-3,-8,-10,-9,3,-8,7],[-6,10,1,-1,1,10,-1,-9,1,-9,10,10,-10,7],[-8,5,-7,7,-4,6,10,-1,3,1,-3,5,-2,3],[7,-9,2,1,10,-7,8,10,-1,9,2,-10,-2,8]]], dtype='uint8')
module1.set_input('var_946', input_946)
input_994= np.array([[[False,True,False,False,False,False,False,True,False,False,True,False,False,False],[True,False,False,False,False,False,True,False,True,False,True,False,True,False],[True,True,True,True,False,True,True,False,False,True,False,False,True,True],[False,False,True,True,False,True,True,False,False,False,True,True,False,False],[True,False,False,False,True,True,True,True,True,False,False,True,False,False],[True,True,True,False,True,True,True,True,False,True,False,False,True,True],[True,False,True,False,False,True,False,True,True,True,False,False,False,False],[True,False,False,False,True,False,False,True,True,False,False,True,True,False],[False,False,True,True,False,False,False,False,False,False,True,True,False,False],[True,False,False,False,False,True,False,True,True,True,False,False,True,True],[True,False,True,True,False,True,True,True,True,True,True,True,True,True]],[[False,True,True,True,True,True,True,True,False,False,True,True,True,True],[True,False,False,True,False,False,False,False,True,True,True,False,False,True],[False,False,False,False,True,True,False,True,False,True,False,True,True,True],[False,False,True,False,False,True,True,False,True,True,True,False,True,False],[True,True,True,True,True,True,True,True,False,True,False,True,True,False],[False,False,False,False,True,True,False,True,False,True,False,False,True,True],[False,False,True,True,True,True,False,True,False,False,False,True,True,False],[False,False,False,False,True,False,False,False,True,True,True,False,False,True],[False,True,False,False,True,False,False,True,True,False,False,True,False,False],[False,False,False,False,False,False,False,True,True,True,True,False,False,True],[False,False,False,False,False,True,True,True,True,True,False,False,True,False]],[[True,False,False,False,False,False,False,False,True,True,False,False,False,True],[False,False,False,True,False,True,True,False,False,False,False,True,True,False],[True,True,True,False,True,True,False,True,False,True,True,True,False,True],[True,False,True,True,False,True,False,False,False,False,True,False,False,True],[True,False,True,False,True,False,True,False,False,True,True,False,False,False],[True,False,False,False,False,True,True,False,False,False,True,True,False,False],[True,False,True,True,False,False,True,True,True,False,True,True,False,False],[True,False,True,False,True,True,False,True,False,True,False,False,True,True],[True,True,True,True,False,False,False,False,False,True,False,True,False,True],[False,False,False,True,False,True,True,True,False,True,True,False,True,True],[False,False,False,False,False,True,True,False,True,True,False,True,False,False]],[[True,False,False,True,False,False,True,True,True,False,False,True,False,True],[True,True,False,True,True,False,True,True,True,False,True,False,True,False],[False,False,False,True,False,False,False,True,False,True,False,True,False,False],[False,False,False,True,True,False,True,False,True,False,False,False,True,True],[True,False,True,True,False,False,False,True,False,False,False,True,False,False],[False,False,False,True,False,False,False,True,True,True,True,False,False,True],[False,True,True,True,True,False,False,False,False,False,True,True,True,True],[False,True,True,False,True,True,True,True,False,False,False,True,True,True],[True,True,True,True,False,False,True,False,False,True,False,True,False,True],[False,True,False,False,False,True,False,True,False,False,False,False,False,False],[True,True,True,False,True,False,False,True,False,True,True,True,False,True]]], dtype='bool')
module1.set_input('var_994', input_994)
input_1013= np.array([1.568298,7.377069,4.437519,7.207996,-5.261578,0.804776,7.691659,-0.402050,-8.366464,3.665516,4.660239,9.726186,9.978909,7.030158,2.397160,6.381758,1.400524,8.498390,4.527429,7.793266,4.167811,-7.186495,7.606569,0.184007,9.853569,-8.897273,-6.452281,1.970401,4.248325,7.807980,-7.974193,8.567810,7.729226,0.796107,0.810981,5.829951,0.332153,0.449118,-3.039019,3.783663,3.727433,4.899176,0.033363,-3.123871,7.452582,5.327706,-6.675439,-5.770360,1.274833,-0.066463,-1.737629,-4.180520,6.178850,-7.448175,-1.553166,-1.303825,4.147487,-6.022297,-7.329892,9.567928,-9.721931,2.583267,6.646062,-0.490010,1.670967,4.525398,-7.993848,-4.414686,5.795132,-8.314747,-7.407175,-2.061578,-5.471027,-0.073283,9.001212,-6.768647,-7.083930,-4.173361,6.001143,4.941348,-3.413960,-8.307814,-1.164101,-4.536893,-0.033688,4.939094,0.798817,-1.813237,-3.115729,-8.073728,2.153477,0.757615,5.670787,5.158574,7.628311,9.331068,-2.677825,-6.884438,-3.461139,-4.035078,1.420298,7.214369,8.027390,-3.733002,-5.365822,2.729439,-9.475153,-7.879822,2.069177,-6.585888], dtype='float64')
module1.set_input('var_1013', input_1013)
input_1091= np.array([[[-10,6,3,-1,4,-9,7,9,-10,9,3,-10,7,-4],[-10,5,-3,-1,-6,-9,2,-1,8,1,10,9,-9,10],[9,-8,1,3,2,-10,-6,1,9,-7,2,4,-9,7],[-4,-6,1,3,7,5,10,10,-4,-2,-4,1,-8,-10],[-2,4,4,-8,-4,-6,-9,-10,6,-2,2,-7,-6,4],[5,-10,-1,-10,4,9,-1,9,-7,8,9,-6,-6,7],[9,-6,7,1,10,-4,-3,2,-9,-5,-10,-8,3,-9],[-6,2,2,-10,-2,9,-6,6,-8,-3,-1,-1,-9,1],[-4,-2,-1,-6,10,1,8,-6,5,-4,-2,7,-3,-6],[9,8,-8,-4,5,-1,5,-1,-4,-9,-8,-9,8,-4],[4,7,7,-7,-6,-5,10,-7,8,9,-4,-10,-9,-3]],[[-4,-10,-8,2,-4,2,1,-2,5,-5,9,6,2,6],[-4,-10,7,-7,-9,-10,-1,3,-2,-10,-6,10,8,-9],[-2,2,5,4,-2,-8,-1,5,3,-3,-5,-1,-9,4],[-9,-8,9,6,-1,-7,3,-7,-4,-8,10,-1,4,6],[5,1,-5,4,10,-10,-2,6,-10,2,5,10,-1,2],[5,9,8,-3,-8,6,10,-8,3,-10,9,7,-3,-3],[10,-10,-3,-4,-6,3,7,-1,-5,1,-7,3,4,3],[-8,2,2,-2,8,6,-6,-9,10,10,-2,-5,4,6],[7,5,-6,5,8,4,7,1,1,-6,9,6,9,-10],[-9,-10,6,6,-4,-3,-10,10,9,9,-1,-10,-3,4],[10,-4,2,7,-1,1,6,10,1,3,3,-1,-9,9]],[[-7,-1,-8,-6,-8,10,8,7,-7,9,-8,9,4,-10],[-1,2,-3,-7,-9,3,7,-9,5,10,4,2,-2,7],[-3,1,-5,1,8,-9,2,6,-5,6,-2,4,8,10],[-8,-9,4,-4,3,-9,5,9,1,-7,-2,-6,1,-2],[7,2,1,-8,-9,5,10,-2,3,-2,-7,-9,-4,-5],[9,8,1,3,9,-8,6,10,-7,-10,-6,-5,3,-5],[-10,-6,8,-7,1,-1,-3,-1,-2,4,-7,-2,-9,7],[-2,1,-3,-1,8,-1,7,-1,1,-9,5,6,10,-5],[4,10,-4,-10,-7,-7,-8,-8,-2,-9,-3,8,4,9],[2,4,8,4,5,9,6,1,-6,-10,7,1,-10,7],[-5,-9,-2,6,4,-2,-5,-5,10,-4,-4,-5,6,1]],[[9,9,8,-2,10,10,10,-5,6,-4,7,-3,2,1],[7,3,2,1,-1,-2,-1,-5,6,-5,-3,7,7,-10],[-9,9,3,-4,-8,-6,-8,-10,-1,-1,8,-9,5,8],[7,2,-8,-4,5,-5,2,1,-10,-2,-5,-7,-9,3],[-2,7,-8,-7,-10,-7,-10,-7,6,4,-9,4,-9,7],[7,5,3,-9,1,-9,-9,-5,9,-3,9,10,6,-2],[-4,7,10,-1,2,-4,-7,3,9,5,1,4,7,-10],[5,2,-2,1,8,7,-1,4,-3,-4,-6,-2,-8,9],[-8,2,10,5,10,-5,9,10,-2,7,-1,8,9,6],[-6,-7,-1,-10,-1,-2,10,-9,9,8,-4,-5,-8,-2],[-4,-6,-3,-7,-10,-7,9,-1,-7,9,-10,7,5,-10]]], dtype='int64')
module1.set_input('var_1091', input_1091)
input_1105= np.array([[[-2.455244,-4.481457,-5.419090,-8.469345,6.626553,3.655693,3.238228,7.445542,9.971269,8.093207,-8.236394,-4.480667,-9.230743,6.994893],[6.595462,-4.308610,2.615517,5.375303,2.587174,1.415595,-6.478761,2.831488,2.806165,3.962668,-4.524279,-4.461375,9.656798,-1.346471],[-8.480030,7.467547,-8.248608,-9.515566,-7.971765,8.927805,0.996144,-3.383667,3.228565,7.572908,-5.476785,8.646329,2.450390,-3.015375],[-5.479547,-6.974009,-6.353879,-3.777825,5.954328,-3.270214,4.833858,1.779143,-1.997246,-0.219603,4.364609,-2.826297,3.795009,-5.795997],[7.824160,7.191628,0.924452,7.611556,7.676124,-6.681833,-7.417761,-7.315993,-4.225771,-2.583334,8.409338,6.966400,-8.712959,0.448525],[2.255776,-1.743181,-3.916428,5.750314,4.076188,2.907959,-8.135757,5.247023,-6.978474,-7.291256,5.138474,2.392884,-2.692536,0.857611],[-3.997963,-9.296752,-8.584060,9.786160,-2.722195,-4.825495,1.975564,7.240224,-6.356759,-3.444393,-1.955852,5.630886,0.332866,6.432224],[1.986985,-2.308782,6.500735,-8.847316,8.354271,-1.653830,-9.445007,2.471060,-8.864078,0.923739,6.501953,7.194042,7.166007,3.784539],[6.151312,-4.675084,2.956959,-5.677292,3.724886,-2.352828,-2.732421,-3.395822,5.262815,-7.201121,-6.134545,-2.407612,1.773751,-3.553843],[5.060550,6.135700,-0.619533,3.996161,-1.192505,-0.333595,-0.327249,-1.219224,9.835003,2.460496,-4.121274,-1.796327,-4.012624,-1.166568],[-9.535427,-8.650033,-0.453781,-3.740638,2.759999,-8.734038,6.190929,3.517531,4.662787,1.503404,-6.272571,-3.801555,-7.099281,-2.649951]],[[3.875030,5.429241,8.467778,5.055048,9.789660,-4.491303,-8.803216,5.675138,4.417676,2.206938,-8.185146,5.948579,-3.637016,-4.680555],[-4.596351,1.316518,2.691735,6.658240,-3.751027,7.876191,-5.468806,-4.851231,-3.767752,-1.471170,-6.392042,8.665802,-0.509814,3.504576],[-3.176428,-0.275950,-1.590730,-3.779082,-7.734558,-4.101923,0.766502,-4.315912,9.488991,-7.528022,-3.756812,4.908722,-6.850968,-7.809702],[1.267162,1.251218,4.524606,-9.861895,5.744654,5.236583,-0.946274,-2.253524,9.295282,3.651782,1.988528,9.337830,7.732458,-9.306596],[9.084834,-8.800734,2.624618,-1.237968,4.970270,-4.627102,4.482081,-3.214842,-1.774623,2.013961,-5.730261,-9.161822,-3.891474,1.116780],[7.108023,-9.105977,-4.250671,3.229608,-5.453765,-1.648453,2.142242,6.329829,3.909542,-5.099321,-0.497757,2.122933,4.822686,6.031945],[8.360458,0.891950,-7.497650,5.421728,-5.163884,-4.322498,-0.392191,6.568246,-0.177334,3.496463,-9.016833,7.975915,4.551700,6.162477],[-7.996054,4.803629,-9.724539,-4.195210,-1.754188,6.037694,7.227447,0.121236,5.944208,8.223922,1.474501,1.367930,-4.840532,9.487840],[7.228671,-6.199617,7.305581,-3.296107,-5.852432,-0.205119,-5.329425,-2.797384,-1.146548,-9.131380,-6.050635,6.708984,-5.570184,9.538419],[3.369244,-7.366094,-1.231208,-9.653045,-5.633649,2.114043,-0.024159,7.256269,3.781331,-8.197580,-4.642410,4.640831,-1.336632,-0.160417],[1.008851,1.745160,-6.026848,-2.415097,7.756848,-3.209555,5.427387,-4.511305,-2.296207,-1.375294,0.265092,2.652858,4.083450,-6.228526]],[[6.829164,-6.881224,3.321051,5.931529,-0.223209,-0.804753,-3.706635,2.620240,-5.476105,3.625688,-7.164591,-3.672340,-0.877915,4.258683],[1.166425,8.278456,-6.545516,8.397231,-1.634869,-2.789733,-1.574099,-0.461965,5.384594,-3.709803,8.630869,-6.772090,-8.546317,-0.544142],[-5.056734,-4.010687,4.875401,-7.775754,-5.953118,0.992880,-7.885668,5.085871,-0.932337,-0.390098,2.064228,4.938944,-0.914458,-4.025709],[5.364808,-5.817400,-6.705611,7.653686,-0.283543,-8.406744,9.341996,3.285002,2.729269,8.261255,-5.310506,0.451707,-5.940622,0.332136],[9.475077,4.286235,-9.967023,-9.988934,6.074131,-5.622179,-5.275139,-7.252278,6.567256,3.212352,-3.949455,-4.677014,-2.245156,-0.704192],[8.403747,-8.928884,-8.807851,5.588808,1.043574,3.269728,8.792660,-1.214480,-1.696285,9.510678,7.286703,-1.388018,0.615162,-2.524633],[9.213488,7.365513,-8.865150,4.068474,1.608396,9.236088,-5.958035,8.490633,1.432729,7.015888,-2.926657,0.906713,-0.752079,6.891384],[-7.025295,0.295168,4.537365,-7.321642,-4.693912,-7.261691,-8.647916,-9.722046,-3.677378,-4.894208,-0.960933,-5.853968,1.937529,-2.576816],[4.562066,7.016301,9.703632,2.119985,6.682987,2.406240,5.892208,-3.507611,7.995097,1.341920,-4.605114,2.460334,3.632465,-6.406738],[4.497188,-8.454086,-3.204566,5.481440,3.846968,-9.963217,-0.309209,-0.278395,3.313743,-7.427985,-5.004269,1.971409,2.952163,8.393208],[-6.024239,7.811292,-1.049513,-6.866083,-3.502499,-3.752039,9.674816,-5.466247,-4.673437,9.099781,8.329830,3.117070,5.476185,3.981226]],[[5.617916,-7.855801,-5.908651,-2.761032,1.838569,2.827115,-5.359799,7.574650,3.093720,7.041663,2.929138,4.932397,-9.203964,-2.227565],[3.657175,7.659476,-0.017506,-7.754686,5.294302,6.279146,-5.029389,-3.170035,-8.641542,-6.688523,-6.818063,-0.840584,-2.139015,-1.627371],[-8.040210,8.563789,-1.749737,-3.057583,-1.273049,2.062658,3.597460,-1.654023,-7.146857,-6.293038,9.742980,-9.866601,0.699163,8.518147],[-7.350486,-4.897951,-8.974405,1.377308,-0.254640,9.800461,-8.544964,4.118060,3.911458,5.511781,-0.724818,-8.163139,-1.787957,4.044739],[7.535277,-9.415677,7.407556,-4.895619,-2.440378,-4.476721,-4.549546,7.359071,7.592590,-0.382386,-3.328275,-9.691025,-2.101048,-0.417063],[3.556379,-0.139807,-0.323809,-0.159769,4.126875,5.755506,-0.690041,1.488633,1.024980,-7.801949,2.267703,1.499192,-6.951632,-1.503759],[8.193394,-6.911341,3.097464,8.276728,5.840659,8.210405,3.878766,-6.189174,-7.212513,-9.236338,-1.883307,-6.564803,2.235371,0.693287],[1.557753,-5.202361,1.803136,6.654713,0.367377,-2.456919,0.194032,-0.304571,7.466599,-0.438666,-5.128255,9.540546,2.581967,-0.350400],[-4.219787,3.761719,5.600668,-3.757836,-8.612916,1.527416,-6.717288,-0.719560,2.803282,-8.818355,4.336475,7.638649,2.053275,-0.812426],[-6.164593,-3.437683,-1.701354,4.991127,1.654097,-3.308390,3.368212,-4.540221,-5.890739,6.284588,2.774170,-9.482500,6.193832,-6.052906],[-0.331920,6.245848,2.014587,9.367531,5.394329,4.540324,-0.751500,-3.031014,-8.048361,-4.376822,9.585486,-1.637075,5.768391,0.014074]]], dtype='float64')
module1.set_input('var_1105', input_1105)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res3 = intrp3.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res4 = intrp4.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
res1_15 = module1.get_output(15).asnumpy()
res2_15 = res2[15].asnumpy()
res3_15 = res3[15].asnumpy()
res4_15 = res4[15].asnumpy()
np.testing.assert_allclose(res1_15 ,res2_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res3_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_15 ,res4_15, atol=1e-3, rtol=1e-3)
(res1_15 == res2_15).all()
(res1_15 == res3_15).all()
(res1_15 == res4_15).all()
res1_16 = module1.get_output(16).asnumpy()
res2_16 = res2[16].asnumpy()
res3_16 = res3[16].asnumpy()
res4_16 = res4[16].asnumpy()
np.testing.assert_allclose(res1_16 ,res2_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res3_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_16 ,res4_16, atol=1e-3, rtol=1e-3)
(res1_16 == res2_16).all()
(res1_16 == res3_16).all()
(res1_16 == res4_16).all()
res1_17 = module1.get_output(17).asnumpy()
res2_17 = res2[17].asnumpy()
res3_17 = res3[17].asnumpy()
res4_17 = res4[17].asnumpy()
np.testing.assert_allclose(res1_17 ,res2_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res3_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_17 ,res4_17, atol=1e-3, rtol=1e-3)
(res1_17 == res2_17).all()
(res1_17 == res3_17).all()
(res1_17 == res4_17).all()
res1_18 = module1.get_output(18).asnumpy()
res2_18 = res2[18].asnumpy()
res3_18 = res3[18].asnumpy()
res4_18 = res4[18].asnumpy()
np.testing.assert_allclose(res1_18 ,res2_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res3_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_18 ,res4_18, atol=1e-3, rtol=1e-3)
(res1_18 == res2_18).all()
(res1_18 == res3_18).all()
(res1_18 == res4_18).all()
res1_19 = module1.get_output(19).asnumpy()
res2_19 = res2[19].asnumpy()
res3_19 = res3[19].asnumpy()
res4_19 = res4[19].asnumpy()
np.testing.assert_allclose(res1_19 ,res2_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res3_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_19 ,res4_19, atol=1e-3, rtol=1e-3)
(res1_19 == res2_19).all()
(res1_19 == res3_19).all()
(res1_19 == res4_19).all()
res1_20 = module1.get_output(20).asnumpy()
res2_20 = res2[20].asnumpy()
res3_20 = res3[20].asnumpy()
res4_20 = res4[20].asnumpy()
np.testing.assert_allclose(res1_20 ,res2_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res3_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_20 ,res4_20, atol=1e-3, rtol=1e-3)
(res1_20 == res2_20).all()
(res1_20 == res3_20).all()
(res1_20 == res4_20).all()
module5.set_input('var_945', input_945)
module5.set_input('var_946', input_946)
module5.set_input('var_994', input_994)
module5.set_input('var_1013', input_1013)
module5.set_input('var_1091', input_1091)
module5.set_input('var_1105', input_1105)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res7 = intrp7.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res8 = intrp8.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
res5_15 = module5.get_output(15).asnumpy()
res6_15 = res6[15].asnumpy()
res7_15 = res7[15].asnumpy()
res8_15 = res8[15].asnumpy()
np.testing.assert_allclose(res5_15 ,res6_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res7_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_15 ,res8_15, atol=1e-3, rtol=1e-3)
(res5_15 == res6_15).all()
(res5_15 == res7_15).all()
(res5_15 == res8_15).all()
res5_16 = module5.get_output(16).asnumpy()
res6_16 = res6[16].asnumpy()
res7_16 = res7[16].asnumpy()
res8_16 = res8[16].asnumpy()
np.testing.assert_allclose(res5_16 ,res6_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res7_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_16 ,res8_16, atol=1e-3, rtol=1e-3)
(res5_16 == res6_16).all()
(res5_16 == res7_16).all()
(res5_16 == res8_16).all()
res5_17 = module5.get_output(17).asnumpy()
res6_17 = res6[17].asnumpy()
res7_17 = res7[17].asnumpy()
res8_17 = res8[17].asnumpy()
np.testing.assert_allclose(res5_17 ,res6_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res7_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_17 ,res8_17, atol=1e-3, rtol=1e-3)
(res5_17 == res6_17).all()
(res5_17 == res7_17).all()
(res5_17 == res8_17).all()
res5_18 = module5.get_output(18).asnumpy()
res6_18 = res6[18].asnumpy()
res7_18 = res7[18].asnumpy()
res8_18 = res8[18].asnumpy()
np.testing.assert_allclose(res5_18 ,res6_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res7_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_18 ,res8_18, atol=1e-3, rtol=1e-3)
(res5_18 == res6_18).all()
(res5_18 == res7_18).all()
(res5_18 == res8_18).all()
res5_19 = module5.get_output(19).asnumpy()
res6_19 = res6[19].asnumpy()
res7_19 = res7[19].asnumpy()
res8_19 = res8[19].asnumpy()
np.testing.assert_allclose(res5_19 ,res6_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res7_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_19 ,res8_19, atol=1e-3, rtol=1e-3)
(res5_19 == res6_19).all()
(res5_19 == res7_19).all()
(res5_19 == res8_19).all()
res5_20 = module5.get_output(20).asnumpy()
res6_20 = res6[20].asnumpy()
res7_20 = res7[20].asnumpy()
res8_20 = res8[20].asnumpy()
np.testing.assert_allclose(res5_20 ,res6_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res7_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_20 ,res8_20, atol=1e-3, rtol=1e-3)
(res5_20 == res6_20).all()
(res5_20 == res7_20).all()
(res5_20 == res8_20).all()
module9.set_input('var_945', input_945)
module9.set_input('var_946', input_946)
module9.set_input('var_994', input_994)
module9.set_input('var_1013', input_1013)
module9.set_input('var_1091', input_1091)
module9.set_input('var_1105', input_1105)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res11 = intrp11.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res12 = intrp12.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
res9_15 = module9.get_output(15).asnumpy()
res10_15 = res10[15].asnumpy()
res11_15 = res11[15].asnumpy()
res12_15 = res12[15].asnumpy()
np.testing.assert_allclose(res9_15 ,res10_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res11_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_15 ,res12_15, atol=1e-3, rtol=1e-3)
(res9_15 == res10_15).all()
(res9_15 == res11_15).all()
(res9_15 == res12_15).all()
res9_16 = module9.get_output(16).asnumpy()
res10_16 = res10[16].asnumpy()
res11_16 = res11[16].asnumpy()
res12_16 = res12[16].asnumpy()
np.testing.assert_allclose(res9_16 ,res10_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res11_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_16 ,res12_16, atol=1e-3, rtol=1e-3)
(res9_16 == res10_16).all()
(res9_16 == res11_16).all()
(res9_16 == res12_16).all()
res9_17 = module9.get_output(17).asnumpy()
res10_17 = res10[17].asnumpy()
res11_17 = res11[17].asnumpy()
res12_17 = res12[17].asnumpy()
np.testing.assert_allclose(res9_17 ,res10_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res11_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_17 ,res12_17, atol=1e-3, rtol=1e-3)
(res9_17 == res10_17).all()
(res9_17 == res11_17).all()
(res9_17 == res12_17).all()
res9_18 = module9.get_output(18).asnumpy()
res10_18 = res10[18].asnumpy()
res11_18 = res11[18].asnumpy()
res12_18 = res12[18].asnumpy()
np.testing.assert_allclose(res9_18 ,res10_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res11_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_18 ,res12_18, atol=1e-3, rtol=1e-3)
(res9_18 == res10_18).all()
(res9_18 == res11_18).all()
(res9_18 == res12_18).all()
res9_19 = module9.get_output(19).asnumpy()
res10_19 = res10[19].asnumpy()
res11_19 = res11[19].asnumpy()
res12_19 = res12[19].asnumpy()
np.testing.assert_allclose(res9_19 ,res10_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res11_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_19 ,res12_19, atol=1e-3, rtol=1e-3)
(res9_19 == res10_19).all()
(res9_19 == res11_19).all()
(res9_19 == res12_19).all()
res9_20 = module9.get_output(20).asnumpy()
res10_20 = res10[20].asnumpy()
res11_20 = res11[20].asnumpy()
res12_20 = res12[20].asnumpy()
np.testing.assert_allclose(res9_20 ,res10_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res11_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_20 ,res12_20, atol=1e-3, rtol=1e-3)
(res9_20 == res10_20).all()
(res9_20 == res11_20).all()
(res9_20 == res12_20).all()
module13.set_input('var_945', input_945)
module13.set_input('var_946', input_946)
module13.set_input('var_994', input_994)
module13.set_input('var_1013', input_1013)
module13.set_input('var_1091', input_1091)
module13.set_input('var_1105', input_1105)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res15 = intrp15.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res16 = intrp16.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
res13_15 = module13.get_output(15).asnumpy()
res14_15 = res14[15].asnumpy()
res15_15 = res15[15].asnumpy()
res16_15 = res16[15].asnumpy()
np.testing.assert_allclose(res13_15 ,res14_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res15_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_15 ,res16_15, atol=1e-3, rtol=1e-3)
(res13_15 == res14_15).all()
(res13_15 == res15_15).all()
(res13_15 == res16_15).all()
res13_16 = module13.get_output(16).asnumpy()
res14_16 = res14[16].asnumpy()
res15_16 = res15[16].asnumpy()
res16_16 = res16[16].asnumpy()
np.testing.assert_allclose(res13_16 ,res14_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res15_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_16 ,res16_16, atol=1e-3, rtol=1e-3)
(res13_16 == res14_16).all()
(res13_16 == res15_16).all()
(res13_16 == res16_16).all()
res13_17 = module13.get_output(17).asnumpy()
res14_17 = res14[17].asnumpy()
res15_17 = res15[17].asnumpy()
res16_17 = res16[17].asnumpy()
np.testing.assert_allclose(res13_17 ,res14_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res15_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_17 ,res16_17, atol=1e-3, rtol=1e-3)
(res13_17 == res14_17).all()
(res13_17 == res15_17).all()
(res13_17 == res16_17).all()
res13_18 = module13.get_output(18).asnumpy()
res14_18 = res14[18].asnumpy()
res15_18 = res15[18].asnumpy()
res16_18 = res16[18].asnumpy()
np.testing.assert_allclose(res13_18 ,res14_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res15_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_18 ,res16_18, atol=1e-3, rtol=1e-3)
(res13_18 == res14_18).all()
(res13_18 == res15_18).all()
(res13_18 == res16_18).all()
res13_19 = module13.get_output(19).asnumpy()
res14_19 = res14[19].asnumpy()
res15_19 = res15[19].asnumpy()
res16_19 = res16[19].asnumpy()
np.testing.assert_allclose(res13_19 ,res14_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res15_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_19 ,res16_19, atol=1e-3, rtol=1e-3)
(res13_19 == res14_19).all()
(res13_19 == res15_19).all()
(res13_19 == res16_19).all()
res13_20 = module13.get_output(20).asnumpy()
res14_20 = res14[20].asnumpy()
res15_20 = res15[20].asnumpy()
res16_20 = res16[20].asnumpy()
np.testing.assert_allclose(res13_20 ,res14_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res15_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_20 ,res16_20, atol=1e-3, rtol=1e-3)
(res13_20 == res14_20).all()
(res13_20 == res15_20).all()
(res13_20 == res16_20).all()
module17.set_input('var_945', input_945)
module17.set_input('var_946', input_946)
module17.set_input('var_994', input_994)
module17.set_input('var_1013', input_1013)
module17.set_input('var_1091', input_1091)
module17.set_input('var_1105', input_1105)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res19 = intrp19.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res20 = intrp20.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
res17_15 = module17.get_output(15).asnumpy()
res18_15 = res18[15].asnumpy()
res19_15 = res19[15].asnumpy()
res20_15 = res20[15].asnumpy()
np.testing.assert_allclose(res17_15 ,res18_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res19_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_15 ,res20_15, atol=1e-3, rtol=1e-3)
(res17_15 == res18_15).all()
(res17_15 == res19_15).all()
(res17_15 == res20_15).all()
res17_16 = module17.get_output(16).asnumpy()
res18_16 = res18[16].asnumpy()
res19_16 = res19[16].asnumpy()
res20_16 = res20[16].asnumpy()
np.testing.assert_allclose(res17_16 ,res18_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res19_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_16 ,res20_16, atol=1e-3, rtol=1e-3)
(res17_16 == res18_16).all()
(res17_16 == res19_16).all()
(res17_16 == res20_16).all()
res17_17 = module17.get_output(17).asnumpy()
res18_17 = res18[17].asnumpy()
res19_17 = res19[17].asnumpy()
res20_17 = res20[17].asnumpy()
np.testing.assert_allclose(res17_17 ,res18_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res19_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_17 ,res20_17, atol=1e-3, rtol=1e-3)
(res17_17 == res18_17).all()
(res17_17 == res19_17).all()
(res17_17 == res20_17).all()
res17_18 = module17.get_output(18).asnumpy()
res18_18 = res18[18].asnumpy()
res19_18 = res19[18].asnumpy()
res20_18 = res20[18].asnumpy()
np.testing.assert_allclose(res17_18 ,res18_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res19_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_18 ,res20_18, atol=1e-3, rtol=1e-3)
(res17_18 == res18_18).all()
(res17_18 == res19_18).all()
(res17_18 == res20_18).all()
res17_19 = module17.get_output(19).asnumpy()
res18_19 = res18[19].asnumpy()
res19_19 = res19[19].asnumpy()
res20_19 = res20[19].asnumpy()
np.testing.assert_allclose(res17_19 ,res18_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res19_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_19 ,res20_19, atol=1e-3, rtol=1e-3)
(res17_19 == res18_19).all()
(res17_19 == res19_19).all()
(res17_19 == res20_19).all()
res17_20 = module17.get_output(20).asnumpy()
res18_20 = res18[20].asnumpy()
res19_20 = res19[20].asnumpy()
res20_20 = res20[20].asnumpy()
np.testing.assert_allclose(res17_20 ,res18_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res19_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_20 ,res20_20, atol=1e-3, rtol=1e-3)
(res17_20 == res18_20).all()
(res17_20 == res19_20).all()
(res17_20 == res20_20).all()
module21.set_input('var_945', input_945)
module21.set_input('var_946', input_946)
module21.set_input('var_994', input_994)
module21.set_input('var_1013', input_1013)
module21.set_input('var_1091', input_1091)
module21.set_input('var_1105', input_1105)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res23 = intrp23.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res24 = intrp24.evaluate()(input_945, input_946, input_994, input_1013, input_1091, input_1105, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()
res21_15 = module21.get_output(15).asnumpy()
res22_15 = res22[15].asnumpy()
res23_15 = res23[15].asnumpy()
res24_15 = res24[15].asnumpy()
np.testing.assert_allclose(res21_15 ,res22_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res23_15, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_15 ,res24_15, atol=1e-3, rtol=1e-3)
(res21_15 == res22_15).all()
(res21_15 == res23_15).all()
(res21_15 == res24_15).all()
res21_16 = module21.get_output(16).asnumpy()
res22_16 = res22[16].asnumpy()
res23_16 = res23[16].asnumpy()
res24_16 = res24[16].asnumpy()
np.testing.assert_allclose(res21_16 ,res22_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res23_16, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_16 ,res24_16, atol=1e-3, rtol=1e-3)
(res21_16 == res22_16).all()
(res21_16 == res23_16).all()
(res21_16 == res24_16).all()
res21_17 = module21.get_output(17).asnumpy()
res22_17 = res22[17].asnumpy()
res23_17 = res23[17].asnumpy()
res24_17 = res24[17].asnumpy()
np.testing.assert_allclose(res21_17 ,res22_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res23_17, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_17 ,res24_17, atol=1e-3, rtol=1e-3)
(res21_17 == res22_17).all()
(res21_17 == res23_17).all()
(res21_17 == res24_17).all()
res21_18 = module21.get_output(18).asnumpy()
res22_18 = res22[18].asnumpy()
res23_18 = res23[18].asnumpy()
res24_18 = res24[18].asnumpy()
np.testing.assert_allclose(res21_18 ,res22_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res23_18, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_18 ,res24_18, atol=1e-3, rtol=1e-3)
(res21_18 == res22_18).all()
(res21_18 == res23_18).all()
(res21_18 == res24_18).all()
res21_19 = module21.get_output(19).asnumpy()
res22_19 = res22[19].asnumpy()
res23_19 = res23[19].asnumpy()
res24_19 = res24[19].asnumpy()
np.testing.assert_allclose(res21_19 ,res22_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res23_19, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_19 ,res24_19, atol=1e-3, rtol=1e-3)
(res21_19 == res22_19).all()
(res21_19 == res23_19).all()
(res21_19 == res24_19).all()
res21_20 = module21.get_output(20).asnumpy()
res22_20 = res22[20].asnumpy()
res23_20 = res23[20].asnumpy()
res24_20 = res24[20].asnumpy()
np.testing.assert_allclose(res21_20 ,res22_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res23_20, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_20 ,res24_20, atol=1e-3, rtol=1e-3)
(res21_20 == res22_20).all()
(res21_20 == res23_20).all()
(res21_20 == res24_20).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''