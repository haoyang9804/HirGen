import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (9, 16))#candidate|0|(9, 16)|var|float64
uop_1 = relay.log10(var_0.astype('float64')) # shape=(9, 16)
var_3 = relay.var("var_3", dtype = "float64", shape = (9, 16))#candidate|3|(9, 16)|var|float64
bop_4 = relay.maximum(uop_1.astype('int64'), relay.reshape(var_3.astype('int64'), relay.shape_of(uop_1))) # shape=(9, 16)
uop_7 = relay.asin(bop_4.astype('float32')) # shape=(9, 16)
bop_9 = relay.bitwise_and(bop_4.astype('int8'), relay.reshape(var_0.astype('int8'), relay.shape_of(bop_4))) # shape=(9, 16)
bop_12 = relay.not_equal(bop_9.astype('bool'), relay.reshape(var_0.astype('bool'), relay.shape_of(bop_9))) # shape=(9, 16)
bop_15 = relay.logical_and(uop_7.astype('bool'), relay.reshape(bop_9.astype('bool'), relay.shape_of(uop_7))) # shape=(9, 16)
uop_18 = relay.cos(bop_12.astype('float32')) # shape=(9, 16)
uop_20 = relay.rsqrt(bop_12.astype('float64')) # shape=(9, 16)
bop_22 = relay.logical_xor(uop_20.astype('uint32'), relay.reshape(var_3.astype('uint32'), relay.shape_of(uop_20))) # shape=(9, 16)
uop_25 = relay.sinh(uop_1.astype('float32')) # shape=(9, 16)
bop_27 = relay.equal(bop_15.astype('bool'), relay.reshape(uop_18.astype('bool'), relay.shape_of(bop_15))) # shape=(9, 16)
bop_30 = relay.maximum(uop_25.astype('uint64'), relay.reshape(uop_1.astype('uint64'), relay.shape_of(uop_25))) # shape=(9, 16)
bop_33 = relay.bitwise_or(uop_7.astype('uint16'), relay.reshape(bop_30.astype('uint16'), relay.shape_of(uop_7))) # shape=(9, 16)
var_36 = relay.var("var_36", dtype = "float32", shape = (9, 16))#candidate|36|(9, 16)|var|float32
bop_37 = relay.logical_and(uop_7.astype('bool'), relay.reshape(var_36.astype('bool'), relay.shape_of(uop_7))) # shape=(9, 16)
uop_40 = relay.acos(bop_4.astype('float32')) # shape=(9, 16)
uop_42 = relay.cos(uop_40.astype('float64')) # shape=(9, 16)
uop_44 = relay.cosh(uop_20.astype('float64')) # shape=(9, 16)
var_46 = relay.var("var_46", dtype = "float64", shape = (9, 16))#candidate|46|(9, 16)|var|float64
bop_47 = relay.not_equal(uop_44.astype('bool'), relay.reshape(var_46.astype('bool'), relay.shape_of(uop_44))) # shape=(9, 16)
bop_50 = relay.equal(bop_47.astype('bool'), relay.reshape(uop_40.astype('bool'), relay.shape_of(bop_47))) # shape=(9, 16)
bop_53 = relay.less_equal(bop_30.astype('bool'), relay.reshape(bop_47.astype('bool'), relay.shape_of(bop_30))) # shape=(9, 16)
var_56 = relay.var("var_56", dtype = "float64", shape = (9, 16))#candidate|56|(9, 16)|var|float64
bop_57 = relay.right_shift(uop_42.astype('int16'), relay.reshape(var_56.astype('int16'), relay.shape_of(uop_42))) # shape=(9, 16)
output = relay.Tuple([bop_22,bop_27,bop_33,bop_37,bop_50,bop_53,bop_57,])
output2 = relay.Tuple([bop_22,bop_27,bop_33,bop_37,bop_50,bop_53,bop_57,])
func_60 = relay.Function([var_0,var_3,var_36,var_46,var_56,], output)
mod['func_60'] = func_60
mod = relay.transform.InferType()(mod)
var_61 = relay.var("var_61", dtype = "float64", shape = (9, 16))#candidate|61|(9, 16)|var|float64
var_62 = relay.var("var_62", dtype = "float64", shape = (9, 16))#candidate|62|(9, 16)|var|float64
var_63 = relay.var("var_63", dtype = "float32", shape = (9, 16))#candidate|63|(9, 16)|var|float32
var_64 = relay.var("var_64", dtype = "float64", shape = (9, 16))#candidate|64|(9, 16)|var|float64
var_65 = relay.var("var_65", dtype = "float64", shape = (9, 16))#candidate|65|(9, 16)|var|float64
output = func_60(var_61,var_62,var_63,var_64,var_65,)
func_66 = relay.Function([var_61,var_62,var_63,var_64,var_65,], output)
mutated_mod['func_66'] = func_66
mutated_mod = relay.transform.InferType()(mutated_mod)
var_68 = relay.var("var_68", dtype = "int64", shape = ())#candidate|68|()|var|int64
const_69 = relay.const([[-10,6,-8,-3,-3,4,-1,5,10,2,8,10,-3,7,2],[-1,1,-6,-8,-7,-3,-4,-5,10,7,-5,-4,-4,-7,-7],[3,3,-3,2,-7,-2,-10,-5,-5,2,-7,-8,3,7,5],[7,2,-1,-9,8,-1,-8,-7,6,6,-6,5,5,8,-6],[-8,10,-4,-6,-3,1,-5,5,-2,3,-8,-2,-3,-9,-10],[3,-9,-7,3,6,-8,-1,7,-4,-8,-8,6,-9,8,-1],[4,-8,6,-8,1,-8,-2,-3,-7,-8,3,-1,-8,9,2],[-6,-3,-1,-2,-1,-2,3,10,-1,-10,-1,-4,2,-5,-8],[3,3,-10,7,1,2,-9,-7,10,5,6,-5,-8,-4,9],[2,-8,8,-9,-8,4,-6,-7,-1,1,-7,2,9,8,-5],[-7,-9,-1,-5,-3,-1,-4,-2,-9,8,-1,-7,6,2,-9]], dtype = "int64")#candidate|69|(11, 15)|const|int64
bop_70 = relay.equal(var_68.astype('bool'), const_69.astype('bool')) # shape=(11, 15)
uop_73 = relay.sigmoid(const_69.astype('float32')) # shape=(11, 15)
var_75 = relay.var("var_75", dtype = "float32", shape = (11, 15))#candidate|75|(11, 15)|var|float32
bop_76 = relay.bitwise_xor(uop_73.astype('uint8'), relay.reshape(var_75.astype('uint8'), relay.shape_of(uop_73))) # shape=(11, 15)
func_60_call = mod.get_global_var('func_60')
func_66_call = mutated_mod.get_global_var('func_66')
var_80 = relay.var("var_80", dtype = "float64", shape = (72, 2))#candidate|80|(72, 2)|var|float64
call_79 = relay.TupleGetItem(func_60_call(relay.reshape(var_80.astype('float64'), [9, 16]), relay.reshape(var_80.astype('float64'), [9, 16]), relay.reshape(var_80.astype('float32'), [9, 16]), relay.reshape(var_80.astype('float64'), [9, 16]), relay.reshape(var_80.astype('float64'), [9, 16]), ), 3)
call_81 = relay.TupleGetItem(func_66_call(relay.reshape(var_80.astype('float64'), [9, 16]), relay.reshape(var_80.astype('float64'), [9, 16]), relay.reshape(var_80.astype('float32'), [9, 16]), relay.reshape(var_80.astype('float64'), [9, 16]), relay.reshape(var_80.astype('float64'), [9, 16]), ), 3)
uop_82 = relay.rsqrt(bop_76.astype('float64')) # shape=(11, 15)
output = relay.Tuple([bop_70,call_79,var_80,uop_82,])
output2 = relay.Tuple([bop_70,call_81,var_80,uop_82,])
func_84 = relay.Function([var_68,var_75,var_80,], output)
mod['func_84'] = func_84
mod = relay.transform.InferType()(mod)
var_85 = relay.var("var_85", dtype = "int64", shape = ())#candidate|85|()|var|int64
var_86 = relay.var("var_86", dtype = "float32", shape = (11, 15))#candidate|86|(11, 15)|var|float32
var_87 = relay.var("var_87", dtype = "float64", shape = (72, 2))#candidate|87|(72, 2)|var|float64
output = func_84(var_85,var_86,var_87,)
func_88 = relay.Function([var_85,var_86,var_87,], output)
mutated_mod['func_88'] = func_88
mutated_mod = relay.transform.InferType()(mutated_mod)
var_90 = relay.var("var_90", dtype = "float32", shape = (8, 11))#candidate|90|(8, 11)|var|float32
uop_91 = relay.erf(var_90.astype('float32')) # shape=(8, 11)
uop_93 = relay.cosh(uop_91.astype('float64')) # shape=(8, 11)
bop_95 = relay.floor_divide(uop_93.astype('float64'), relay.reshape(uop_91.astype('float64'), relay.shape_of(uop_93))) # shape=(8, 11)
uop_98 = relay.sqrt(uop_91.astype('float32')) # shape=(8, 11)
var_100 = relay.var("var_100", dtype = "float32", shape = (8, 11))#candidate|100|(8, 11)|var|float32
bop_101 = relay.not_equal(var_90.astype('bool'), relay.reshape(var_100.astype('bool'), relay.shape_of(var_90))) # shape=(8, 11)
uop_104 = relay.exp(uop_91.astype('float64')) # shape=(8, 11)
uop_106 = relay.sin(uop_104.astype('float64')) # shape=(8, 11)
var_108 = relay.var("var_108", dtype = "float64", shape = (8, 11))#candidate|108|(8, 11)|var|float64
bop_109 = relay.mod(uop_106.astype('float32'), relay.reshape(var_108.astype('float32'), relay.shape_of(uop_106))) # shape=(8, 11)
var_112 = relay.var("var_112", dtype = "float64", shape = (8, 11))#candidate|112|(8, 11)|var|float64
bop_113 = relay.not_equal(uop_106.astype('bool'), relay.reshape(var_112.astype('bool'), relay.shape_of(uop_106))) # shape=(8, 11)
uop_116 = relay.log10(uop_98.astype('float64')) # shape=(8, 11)
var_118 = relay.var("var_118", dtype = "float64", shape = (8, 11))#candidate|118|(8, 11)|var|float64
bop_119 = relay.bitwise_or(var_108.astype('uint64'), relay.reshape(var_118.astype('uint64'), relay.shape_of(var_108))) # shape=(8, 11)
bop_122 = relay.less_equal(uop_116.astype('bool'), relay.reshape(bop_95.astype('bool'), relay.shape_of(uop_116))) # shape=(8, 11)
uop_125 = relay.tan(var_108.astype('float32')) # shape=(8, 11)
bop_127 = relay.greater(bop_122.astype('bool'), relay.reshape(bop_119.astype('bool'), relay.shape_of(bop_122))) # shape=(8, 11)
var_130 = relay.var("var_130", dtype = "float64", shape = (8, 11))#candidate|130|(8, 11)|var|float64
bop_131 = relay.bitwise_or(uop_106.astype('int16'), relay.reshape(var_130.astype('int16'), relay.shape_of(uop_106))) # shape=(8, 11)
uop_134 = relay.sigmoid(bop_95.astype('float32')) # shape=(8, 11)
uop_136 = relay.sinh(uop_125.astype('float32')) # shape=(8, 11)
uop_138 = relay.asin(uop_125.astype('float64')) # shape=(8, 11)
output = relay.Tuple([bop_101,bop_109,bop_113,bop_127,bop_131,uop_134,uop_136,uop_138,])
output2 = relay.Tuple([bop_101,bop_109,bop_113,bop_127,bop_131,uop_134,uop_136,uop_138,])
func_140 = relay.Function([var_90,var_100,var_108,var_112,var_118,var_130,], output)
mod['func_140'] = func_140
mod = relay.transform.InferType()(mod)
var_141 = relay.var("var_141", dtype = "float32", shape = (8, 11))#candidate|141|(8, 11)|var|float32
var_142 = relay.var("var_142", dtype = "float32", shape = (8, 11))#candidate|142|(8, 11)|var|float32
var_143 = relay.var("var_143", dtype = "float64", shape = (8, 11))#candidate|143|(8, 11)|var|float64
var_144 = relay.var("var_144", dtype = "float64", shape = (8, 11))#candidate|144|(8, 11)|var|float64
var_145 = relay.var("var_145", dtype = "float64", shape = (8, 11))#candidate|145|(8, 11)|var|float64
var_146 = relay.var("var_146", dtype = "float64", shape = (8, 11))#candidate|146|(8, 11)|var|float64
output = func_140(var_141,var_142,var_143,var_144,var_145,var_146,)
func_147 = relay.Function([var_141,var_142,var_143,var_144,var_145,var_146,], output)
mutated_mod['func_147'] = func_147
mutated_mod = relay.transform.InferType()(mutated_mod)
const_149 = relay.const([[1.695232,3.609163,9.032582,-4.792182,9.629670],[0.045450,-6.949435,4.062031,7.917220,0.059285],[9.376801,-4.880120,-3.769991,4.421544,3.168338],[5.781183,-1.876562,8.182245,-8.747035,2.787164],[4.190962,2.402847,7.688420,-0.705244,-3.929325]], dtype = "float64")#candidate|149|(5, 5)|const|float64
uop_150 = relay.sin(const_149.astype('float64')) # shape=(5, 5)
uop_152 = relay.acos(uop_150.astype('float32')) # shape=(5, 5)
var_154 = relay.var("var_154", dtype = "float64", shape = (5, 5))#candidate|154|(5, 5)|var|float64
bop_155 = relay.logical_or(uop_150.astype('bool'), relay.reshape(var_154.astype('bool'), relay.shape_of(uop_150))) # shape=(5, 5)
bop_158 = relay.maximum(bop_155.astype('uint32'), relay.reshape(uop_150.astype('uint32'), relay.shape_of(bop_155))) # shape=(5, 5)
bop_161 = relay.logical_and(bop_158.astype('bool'), relay.reshape(bop_155.astype('bool'), relay.shape_of(bop_158))) # shape=(5, 5)
var_164 = relay.var("var_164", dtype = "float32", shape = (5, 5))#candidate|164|(5, 5)|var|float32
bop_165 = relay.equal(uop_152.astype('bool'), relay.reshape(var_164.astype('bool'), relay.shape_of(uop_152))) # shape=(5, 5)
func_60_call = mod.get_global_var('func_60')
func_66_call = mutated_mod.get_global_var('func_66')
const_169 = relay.const([0.693178,-9.265367,5.712419,2.631707,2.392134,5.635805,5.047070,-0.336651,7.883545,-3.002052,-7.936627,8.695519,-9.488044,-4.364269,-6.844278,-3.571049,-2.866172,-4.756896,7.329663,3.552288,9.088945,-7.481104,-5.914866,3.018564,6.386764,7.764186,-8.474617,-0.395754,-7.084779,6.321136,-5.524572,-5.133454,-8.423970,-6.611486,-5.532590,-2.069545,-1.850126,-3.392868,8.654462,-7.667937,1.459863,-4.977594,-6.742182,1.658248,-3.406907,2.829780,-1.371471,0.425988,-6.874071,-4.381239,0.019570,0.489371,-4.049071,-4.578743,3.467126,-0.279110,3.827203,6.449941,9.910367,-9.095353,4.396737,-5.970596,6.437253,-7.832808,2.776346,-9.218783,-7.325904,-6.235230,7.122284,-4.238936,6.511645,7.759709,-6.372611,-0.045088,4.854143,3.783824,1.593911,1.261550,4.643557,-1.440203,-6.241632,8.735879,-3.718297,2.254712,0.055884,8.181652,1.220123,9.879709,5.647483,5.122043,-0.581775,0.042219,0.192526,-0.342713,-6.740807,8.126901,1.220018,8.989240,4.811781,1.042167,5.193182,7.399941,5.296481,-6.537005,5.402138,-0.590978,-6.788546,0.056707,-9.369900,-0.424318,-2.301436,1.925252,-3.227075,-1.505032,-0.010534,-9.262699,-8.777009,-0.770256,-6.414605,-6.757919,-1.911110,4.381039,-1.595155,-1.708461,-4.278629,9.283462,2.557650,-2.971683,-2.322534,0.841131,-9.061283,-5.666169,4.606593,1.870307,6.014312,8.507977,-5.165588,-1.409486,9.631184,5.262944,0.585590,6.528465,2.311934,-1.553548], dtype = "float64")#candidate|169|(144,)|const|float64
call_168 = relay.TupleGetItem(func_60_call(relay.reshape(const_169.astype('float64'), [9, 16]), relay.reshape(const_169.astype('float64'), [9, 16]), relay.reshape(const_169.astype('float32'), [9, 16]), relay.reshape(const_169.astype('float64'), [9, 16]), relay.reshape(const_169.astype('float64'), [9, 16]), ), 1)
call_170 = relay.TupleGetItem(func_66_call(relay.reshape(const_169.astype('float64'), [9, 16]), relay.reshape(const_169.astype('float64'), [9, 16]), relay.reshape(const_169.astype('float32'), [9, 16]), relay.reshape(const_169.astype('float64'), [9, 16]), relay.reshape(const_169.astype('float64'), [9, 16]), ), 1)
uop_171 = relay.asinh(uop_150.astype('float64')) # shape=(5, 5)
uop_173 = relay.sinh(bop_165.astype('float32')) # shape=(5, 5)
bop_175 = relay.add(var_164.astype('uint64'), relay.reshape(uop_150.astype('uint64'), relay.shape_of(var_164))) # shape=(5, 5)
bop_178 = relay.bitwise_or(bop_165.astype('int16'), relay.reshape(bop_161.astype('int16'), relay.shape_of(bop_165))) # shape=(5, 5)
bop_181 = relay.floor_divide(uop_171.astype('float32'), relay.reshape(bop_155.astype('float32'), relay.shape_of(uop_171))) # shape=(5, 5)
uop_184 = relay.atan(bop_178.astype('float32')) # shape=(5, 5)
uop_186 = relay.tan(uop_173.astype('float64')) # shape=(5, 5)
bop_188 = relay.maximum(uop_150.astype('float32'), relay.reshape(bop_181.astype('float32'), relay.shape_of(uop_150))) # shape=(5, 5)
bop_191 = relay.left_shift(uop_173.astype('uint32'), relay.reshape(bop_155.astype('uint32'), relay.shape_of(uop_173))) # shape=(5, 5)
uop_194 = relay.atanh(bop_175.astype('float32')) # shape=(5, 5)
uop_196 = relay.log(uop_186.astype('float32')) # shape=(5, 5)
bop_198 = relay.not_equal(uop_196.astype('bool'), relay.reshape(uop_184.astype('bool'), relay.shape_of(uop_196))) # shape=(5, 5)
uop_201 = relay.erf(uop_173.astype('float32')) # shape=(5, 5)
uop_203 = relay.atanh(uop_196.astype('float32')) # shape=(5, 5)
uop_205 = relay.cos(uop_203.astype('float32')) # shape=(5, 5)
uop_207 = relay.erf(uop_205.astype('float64')) # shape=(5, 5)
bop_209 = relay.less_equal(uop_207.astype('bool'), relay.reshape(uop_184.astype('bool'), relay.shape_of(uop_207))) # shape=(5, 5)
bop_212 = relay.power(uop_205.astype('float64'), relay.reshape(bop_188.astype('float64'), relay.shape_of(uop_205))) # shape=(5, 5)
uop_215 = relay.sigmoid(uop_201.astype('float64')) # shape=(5, 5)
uop_217 = relay.atan(uop_207.astype('float64')) # shape=(5, 5)
uop_219 = relay.sqrt(uop_217.astype('float64')) # shape=(5, 5)
uop_221 = relay.tan(uop_219.astype('float64')) # shape=(5, 5)
uop_223 = relay.sinh(uop_221.astype('float64')) # shape=(5, 5)
bop_225 = relay.logical_or(uop_219.astype('bool'), relay.reshape(uop_150.astype('bool'), relay.shape_of(uop_219))) # shape=(5, 5)
bop_228 = relay.right_shift(uop_221.astype('int8'), relay.reshape(uop_201.astype('int8'), relay.shape_of(uop_221))) # shape=(5, 5)
bop_231 = relay.not_equal(uop_223.astype('bool'), relay.reshape(uop_186.astype('bool'), relay.shape_of(uop_223))) # shape=(5, 5)
output = relay.Tuple([call_168,const_169,bop_191,uop_194,bop_198,bop_209,bop_212,uop_215,bop_225,bop_228,bop_231,])
output2 = relay.Tuple([call_170,const_169,bop_191,uop_194,bop_198,bop_209,bop_212,uop_215,bop_225,bop_228,bop_231,])
func_234 = relay.Function([var_154,var_164,], output)
mod['func_234'] = func_234
mod = relay.transform.InferType()(mod)
var_235 = relay.var("var_235", dtype = "float64", shape = (5, 5))#candidate|235|(5, 5)|var|float64
var_236 = relay.var("var_236", dtype = "float32", shape = (5, 5))#candidate|236|(5, 5)|var|float32
output = func_234(var_235,var_236,)
func_237 = relay.Function([var_235,var_236,], output)
mutated_mod['func_237'] = func_237
mutated_mod = relay.transform.InferType()(mutated_mod)
var_239 = relay.var("var_239", dtype = "float32", shape = (7, 1, 2))#candidate|239|(7, 1, 2)|var|float32
uop_240 = relay.atanh(var_239.astype('float32')) # shape=(7, 1, 2)
uop_242 = relay.log2(uop_240.astype('float64')) # shape=(7, 1, 2)
uop_244 = relay.atan(uop_242.astype('float32')) # shape=(7, 1, 2)
uop_246 = relay.sqrt(uop_244.astype('float64')) # shape=(7, 1, 2)
const_248 = relay.const([[[-8.665361,-6.663709],[4.064781,1.551412],[-4.748533,9.012802],[-8.430826,4.381083],[-8.996422,6.919186],[6.994104,3.327655]],[[4.477488,5.435171],[6.068773,-3.067923],[2.532263,-8.866502],[4.431518,2.587632],[1.382764,5.959571],[6.611096,8.431719]],[[0.889598,3.076281],[3.038442,-4.766097],[8.190602,-5.628708],[0.068854,-0.784203],[7.734329,5.731894],[-1.042628,-1.252977]],[[9.733533,0.853268],[-7.004764,-4.843916],[-0.561885,-0.936030],[-9.643055,-5.962625],[-0.320268,8.413233],[8.399882,-1.761599]],[[-2.175274,1.670413],[-8.396493,-8.241488],[2.349794,-9.473591],[-7.273619,2.802828],[-4.964885,-5.768066],[0.592499,-0.286370]],[[-0.871089,9.280450],[3.443590,-8.643957],[8.777086,-2.396852],[-9.033623,9.041840],[9.417926,7.003441],[7.200962,-1.001866]],[[3.847887,-9.149751],[6.133829,-0.725042],[-1.448879,2.312269],[-9.868898,-3.647110],[8.478448,0.535794],[2.190781,4.815025]]], dtype = "float32")#candidate|248|(7, 6, 2)|const|float32
bop_249 = relay.bitwise_and(var_239.astype('int8'), const_248.astype('int8')) # shape=(7, 6, 2)
output = relay.Tuple([uop_246,bop_249,])
output2 = relay.Tuple([uop_246,bop_249,])
func_252 = relay.Function([var_239,], output)
mod['func_252'] = func_252
mod = relay.transform.InferType()(mod)
mutated_mod['func_252'] = func_252
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "float32", shape = (7, 1, 2))#candidate|253|(7, 1, 2)|var|float32
func_252_call = mutated_mod.get_global_var('func_252')
call_254 = func_252_call(var_253)
output = call_254
func_255 = relay.Function([var_253], output)
mutated_mod['func_255'] = func_255
mutated_mod = relay.transform.InferType()(mutated_mod)
var_257 = relay.var("var_257", dtype = "float32", shape = ())#candidate|257|()|var|float32
uop_258 = relay.rsqrt(var_257.astype('float32')) # shape=()
uop_260 = relay.log(uop_258.astype('float64')) # shape=()
bop_262 = relay.power(uop_260.astype('float32'), uop_258.astype('float32')) # shape=()
bop_265 = relay.minimum(uop_258.astype('int32'), uop_260.astype('int32')) # shape=()
uop_268 = relay.rsqrt(var_257.astype('float32')) # shape=()
bop_270 = relay.mod(bop_265.astype('float64'), uop_260.astype('float64')) # shape=()
bop_273 = relay.divide(bop_262.astype('float32'), uop_260.astype('float32')) # shape=()
uop_276 = relay.atanh(uop_258.astype('float64')) # shape=()
const_278 = relay.const(2.981817, dtype = "float32")#candidate|278|()|const|float32
bop_279 = relay.greater_equal(uop_258.astype('bool'), const_278.astype('bool')) # shape=()
bop_282 = relay.bitwise_xor(uop_276.astype('int8'), bop_262.astype('int8')) # shape=()
var_285 = relay.var("var_285", dtype = "float64", shape = (12, 10, 1))#candidate|285|(12, 10, 1)|var|float64
bop_286 = relay.mod(uop_276.astype('float32'), var_285.astype('float32')) # shape=(12, 10, 1)
bop_289 = relay.logical_and(var_285.astype('bool'), bop_279.astype('bool')) # shape=(12, 10, 1)
bop_292 = relay.left_shift(var_285.astype('uint16'), uop_276.astype('uint16')) # shape=(12, 10, 1)
uop_295 = relay.log2(bop_292.astype('float32')) # shape=(12, 10, 1)
uop_297 = relay.log10(uop_295.astype('float64')) # shape=(12, 10, 1)
uop_299 = relay.log2(bop_273.astype('float64')) # shape=()
const_301 = relay.const(-7.860203, dtype = "float64")#candidate|301|()|const|float64
bop_302 = relay.divide(uop_299.astype('float32'), const_301.astype('float32')) # shape=()
bop_305 = relay.less_equal(uop_297.astype('bool'), bop_302.astype('bool')) # shape=(12, 10, 1)
uop_308 = relay.log2(bop_305.astype('float64')) # shape=(12, 10, 1)
uop_310 = relay.log10(uop_308.astype('float32')) # shape=(12, 10, 1)
output = relay.Tuple([uop_268,bop_270,bop_282,bop_286,bop_289,uop_310,])
output2 = relay.Tuple([uop_268,bop_270,bop_282,bop_286,bop_289,uop_310,])
F = relay.Function([var_257,var_285,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_257,var_285,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_257= np.array(1.441095, dtype='float32')
module1.set_input('var_257', input_257)
input_285= np.array([[[8.493924],[5.069326],[-9.607098],[4.101155],[-6.200838],[-6.190353],[-0.046109],[-7.386146],[-5.892247],[-0.265570]],[[-2.494861],[-1.453331],[1.310564],[-8.216259],[-2.335213],[-3.007529],[-3.325029],[5.193373],[8.710342],[6.406094]],[[8.526040],[1.412225],[-3.796086],[-5.760182],[4.535149],[8.335664],[0.859118],[-8.841447],[2.656440],[-2.067207]],[[-9.642325],[5.802105],[-6.853756],[-8.817513],[7.602550],[-4.541062],[1.666283],[-4.768583],[9.485035],[-6.898516]],[[-3.868731],[-7.273686],[2.994862],[-4.560579],[-4.214310],[-6.723992],[3.179514],[7.322963],[-0.377919],[-0.513824]],[[3.160644],[9.980126],[-3.421185],[0.120800],[-2.909561],[1.802397],[3.483672],[7.785432],[-6.444084],[3.957420]],[[-8.230804],[4.904237],[1.186866],[9.505605],[-9.307021],[0.504025],[-3.161129],[-6.973233],[9.596862],[-8.850680]],[[-7.698652],[-1.230607],[-0.407185],[-6.120635],[4.723504],[2.007821],[-4.147784],[6.332227],[8.103652],[4.922283]],[[-4.325398],[-0.255466],[3.528829],[-1.303326],[-4.036733],[6.709208],[-3.188904],[-5.290607],[9.816298],[7.741005]],[[5.886452],[-3.207430],[3.114260],[2.362763],[-2.813038],[8.508780],[-1.107813],[-0.970446],[-5.573850],[-6.227413]],[[5.802027],[8.350312],[4.787500],[-2.073852],[3.534083],[7.737085],[-0.503959],[-9.915979],[4.366346],[7.206020]],[[-4.781604],[8.796007],[-7.114107],[6.850380],[-6.349677],[3.299269],[9.029642],[5.233185],[-5.002696],[8.134546]]], dtype='float64')
module1.set_input('var_285', input_285)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_257, input_285, )
res3 = intrp3.evaluate()(input_257, input_285, )
res4 = intrp4.evaluate()(input_257, input_285, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
module5.set_input('var_257', input_257)
module5.set_input('var_285', input_285)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_257, input_285, )
res7 = intrp7.evaluate()(input_257, input_285, )
res8 = intrp8.evaluate()(input_257, input_285, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
module9.set_input('var_257', input_257)
module9.set_input('var_285', input_285)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_257, input_285, )
res11 = intrp11.evaluate()(input_257, input_285, )
res12 = intrp12.evaluate()(input_257, input_285, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
module13.set_input('var_257', input_257)
module13.set_input('var_285', input_285)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_257, input_285, )
res15 = intrp15.evaluate()(input_257, input_285, )
res16 = intrp16.evaluate()(input_257, input_285, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
module17.set_input('var_257', input_257)
module17.set_input('var_285', input_285)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_257, input_285, )
res19 = intrp19.evaluate()(input_257, input_285, )
res20 = intrp20.evaluate()(input_257, input_285, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
module21.set_input('var_257', input_257)
module21.set_input('var_285', input_285)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_257, input_285, )
res23 = intrp23.evaluate()(input_257, input_285, )
res24 = intrp24.evaluate()(input_257, input_285, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()

'''88: TVMFuncCall
87: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
86: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
85: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
84: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
83: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
82: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
81: tvm::transform::Pass::operator()(tvm::IRModule) const
80: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
79: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
78: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
77: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
76: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
75: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
74: tvm::transform::Pass::operator()(tvm::IRModule) const
73: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
72: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
71: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
70: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
69: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
68: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
67: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
66: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
65: _ZN3tvm5relay9transform22Devic
64: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
63: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
62: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
61: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
60: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
57: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
56: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
55: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
54: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
53: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
52: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
51: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
50: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
49: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
48: tvm::transform::Pass::operator()(tvm::IRModule) const
47: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
46: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
45: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
44: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
43: _ZNSt17_Function_handlerIFvN3tvm7
42: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
41: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
40: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
39: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::ForNode const*)
38: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::ForNode const*)
37: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
36: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
35: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
34: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
33: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
32: _ZThn16_N3tvm3tir16DataTyp
31: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
30: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
29: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
28: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
27: _ZThn16_N3tvm3tir16DataTyp
26: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
25: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
24: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
23: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
22: _ZThn16_N3tvm3tir16DataTyp
21: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
20: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
19: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
18: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
17: _ZThn16_N3tvm3tir16DataTyp
16: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
15: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
14: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
13: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
12: _ZThn16_N3tvm3tir16DataTyp
11: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::LENode const*)
10: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''