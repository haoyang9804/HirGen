import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_12 = relay.var("var_12", dtype = "uint64", shape = (11, 7))#candidate|12|(11, 7)|var|uint64
var_13 = relay.var("var_13", dtype = "uint64", shape = (11, 7))#candidate|13|(11, 7)|var|uint64
bop_14 = relay.minimum(var_12.astype('uint64'), relay.reshape(var_13.astype('uint64'), relay.shape_of(var_12))) # shape=(11, 7)
bop_17 = relay.not_equal(var_12.astype('bool'), relay.reshape(var_13.astype('bool'), relay.shape_of(var_12))) # shape=(11, 7)
var_22 = relay.var("var_22", dtype = "bool", shape = (11, 7))#candidate|22|(11, 7)|var|bool
bop_23 = relay.logical_xor(bop_17.astype('uint32'), relay.reshape(var_22.astype('uint32'), relay.shape_of(bop_17))) # shape=(11, 7)
bop_26 = relay.left_shift(var_12.astype('uint16'), relay.reshape(bop_14.astype('uint16'), relay.shape_of(var_12))) # shape=(11, 7)
bop_32 = relay.less_equal(bop_14.astype('bool'), relay.reshape(var_13.astype('bool'), relay.shape_of(bop_14))) # shape=(11, 7)
output = relay.Tuple([bop_23,bop_26,bop_32,])
output2 = relay.Tuple([bop_23,bop_26,bop_32,])
func_37 = relay.Function([var_12,var_13,var_22,], output)
mod['func_37'] = func_37
mod = relay.transform.InferType()(mod)
var_38 = relay.var("var_38", dtype = "uint64", shape = (11, 7))#candidate|38|(11, 7)|var|uint64
var_39 = relay.var("var_39", dtype = "uint64", shape = (11, 7))#candidate|39|(11, 7)|var|uint64
var_40 = relay.var("var_40", dtype = "bool", shape = (11, 7))#candidate|40|(11, 7)|var|bool
output = func_37(var_38,var_39,var_40,)
func_41 = relay.Function([var_38,var_39,var_40,], output)
mutated_mod['func_41'] = func_41
mutated_mod = relay.transform.InferType()(mutated_mod)
const_60 = relay.const([[-2.212402,-7.257756,-1.800553,1.265027,5.485532,-0.505110,6.306721,1.986168,-1.142028,8.379762,-4.931390,-9.541619,-3.650193,0.874924,-9.254736,9.287518],[0.175813,1.395285,-0.555680,2.945782,-6.008295,-9.770071,7.533013,-5.906974,-5.307829,7.810077,2.175258,-4.809796,-7.614232,3.407166,2.297946,5.533819],[-0.892245,-7.297044,-1.971552,-7.052126,0.631204,-3.757445,9.886313,-0.289854,-4.329639,-7.984820,9.467050,-6.903732,0.047754,8.290866,-8.484104,6.365938],[5.130842,3.119246,9.836335,-0.857139,9.003436,2.199603,-6.807906,-1.053757,-1.153626,-7.652242,2.945548,0.829609,-0.264785,9.892302,-8.747450,7.480629],[8.717022,9.160709,1.336254,2.909923,-0.856711,4.612285,3.128836,-8.620502,-9.249806,3.899913,2.927764,-3.515343,7.321891,-6.247765,-7.603962,6.326729],[-9.937285,-2.347906,8.839816,-1.798171,8.714212,-5.265034,8.174062,-2.697702,5.195144,-3.201802,-8.197345,7.802342,-9.081433,2.409311,5.058364,-9.429140],[9.928135,8.250225,5.497776,4.276595,5.555557,9.796104,-4.731193,8.708611,0.648249,-9.022450,-8.606180,-4.935975,7.959435,-0.764168,-9.075440,-6.851231],[7.653430,-3.389425,-3.123757,7.581864,6.410334,-3.955233,-8.046085,-4.097326,9.274439,-0.686687,-0.272542,5.883501,-6.468734,-9.128760,-4.842254,9.807792],[1.850664,-4.337341,8.442741,0.435000,-8.164492,-9.992324,1.269223,7.514497,5.773502,4.278411,-5.139271,3.136882,-5.794421,2.016270,-1.203802,-2.830970],[5.197960,0.904057,9.691247,6.722075,2.702768,-5.580642,-8.589228,8.002627,7.060526,4.082045,2.891681,2.480603,2.455566,1.068486,0.206075,4.065689],[-9.432540,7.410454,6.746358,-8.337016,-4.694623,-5.511677,-2.134518,-7.597325,-3.061212,9.769700,-9.110800,2.329238,8.868809,8.873617,-7.093908,3.164392],[-7.614411,-7.353520,-0.998511,-2.025911,-7.584070,8.143429,-8.639959,-5.562376,-9.041065,0.356472,-2.006603,-5.570928,4.254010,-0.444481,-4.960229,-5.227811],[-0.863474,-8.849645,8.688019,9.556583,0.050229,-3.397818,-1.069690,-0.219323,-5.599794,4.579854,-8.959512,6.498570,-4.911665,-4.927464,6.928352,6.793142],[3.561623,-2.554197,-5.442811,-7.295445,8.247150,7.622067,-9.457696,-4.780120,8.954510,2.208122,6.122755,5.482666,4.896287,-3.936533,6.617294,-1.619746]], dtype = "float32")#candidate|60|(14, 16)|const|float32
uop_61 = relay.sinh(const_60.astype('float32')) # shape=(14, 16)
uop_63 = relay.sqrt(uop_61.astype('float64')) # shape=(14, 16)
bop_66 = relay.maximum(uop_61.astype('float32'), relay.reshape(uop_63.astype('float32'), relay.shape_of(uop_61))) # shape=(14, 16)
output = relay.Tuple([bop_66,])
output2 = relay.Tuple([bop_66,])
func_70 = relay.Function([], output)
mod['func_70'] = func_70
mod = relay.transform.InferType()(mod)
mutated_mod['func_70'] = func_70
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mutated_mod.get_global_var('func_70')
call_71 = func_70_call()
output = call_71
func_72 = relay.Function([], output)
mutated_mod['func_72'] = func_72
mutated_mod = relay.transform.InferType()(mutated_mod)
var_94 = relay.var("var_94", dtype = "int16", shape = (13, 2))#candidate|94|(13, 2)|var|int16
var_95 = relay.var("var_95", dtype = "int16", shape = (13, 2))#candidate|95|(13, 2)|var|int16
bop_96 = relay.bitwise_xor(var_94.astype('int16'), relay.reshape(var_95.astype('int16'), relay.shape_of(var_94))) # shape=(13, 2)
uop_100 = relay.rsqrt(bop_96.astype('float64')) # shape=(13, 2)
uop_102 = relay.exp(uop_100.astype('float32')) # shape=(13, 2)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_104 = relay.TupleGetItem(func_70_call(), 0)
call_105 = relay.TupleGetItem(func_72_call(), 0)
const_106 = relay.const([[-0.397107,-2.873040],[8.513771,-1.654392],[8.059113,8.385268],[-9.273214,-2.151508],[-0.192905,-1.299917],[-4.417409,9.395374],[5.805629,-9.815884],[-4.186609,1.086914],[-7.398686,-8.323166],[2.072475,8.505753],[1.113822,1.409398],[7.294303,-3.307897],[8.104850,-8.472809]], dtype = "float64")#candidate|106|(13, 2)|const|float64
bop_107 = relay.mod(uop_100.astype('float32'), relay.reshape(const_106.astype('float32'), relay.shape_of(uop_100))) # shape=(13, 2)
uop_110 = relay.sin(uop_102.astype('float32')) # shape=(13, 2)
var_116 = relay.var("var_116", dtype = "float64", shape = (13, 2))#candidate|116|(13, 2)|var|float64
bop_117 = relay.add(uop_100.astype('uint32'), relay.reshape(var_116.astype('uint32'), relay.shape_of(uop_100))) # shape=(13, 2)
bop_120 = relay.power(var_95.astype('float32'), relay.reshape(uop_100.astype('float32'), relay.shape_of(var_95))) # shape=(13, 2)
output = relay.Tuple([call_104,bop_107,uop_110,bop_117,bop_120,])
output2 = relay.Tuple([call_105,bop_107,uop_110,bop_117,bop_120,])
func_123 = relay.Function([var_94,var_95,var_116,], output)
mod['func_123'] = func_123
mod = relay.transform.InferType()(mod)
var_124 = relay.var("var_124", dtype = "int16", shape = (13, 2))#candidate|124|(13, 2)|var|int16
var_125 = relay.var("var_125", dtype = "int16", shape = (13, 2))#candidate|125|(13, 2)|var|int16
var_126 = relay.var("var_126", dtype = "float64", shape = (13, 2))#candidate|126|(13, 2)|var|float64
output = func_123(var_124,var_125,var_126,)
func_127 = relay.Function([var_124,var_125,var_126,], output)
mutated_mod['func_127'] = func_127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_131 = relay.TupleGetItem(func_70_call(), 0)
call_132 = relay.TupleGetItem(func_72_call(), 0)
var_133 = relay.var("var_133", dtype = "float32", shape = (14, 16))#candidate|133|(14, 16)|var|float32
bop_134 = relay.greater(call_131.astype('bool'), relay.reshape(var_133.astype('bool'), relay.shape_of(call_131))) # shape=(14, 16)
bop_137 = relay.greater(call_132.astype('bool'), relay.reshape(var_133.astype('bool'), relay.shape_of(call_132))) # shape=(14, 16)
bop_141 = relay.maximum(call_131.astype('int8'), relay.reshape(bop_134.astype('int8'), relay.shape_of(call_131))) # shape=(14, 16)
bop_144 = relay.maximum(call_132.astype('int8'), relay.reshape(bop_137.astype('int8'), relay.shape_of(call_132))) # shape=(14, 16)
uop_145 = relay.asinh(bop_141.astype('float32')) # shape=(14, 16)
uop_147 = relay.asinh(bop_144.astype('float32')) # shape=(14, 16)
func_37_call = mod.get_global_var('func_37')
func_41_call = mutated_mod.get_global_var('func_41')
const_149 = relay.const([[10],[7],[-6],[8],[-8],[-1],[-7],[9],[4],[-8],[-1],[-3],[-2],[3],[-10],[1],[10],[8],[6],[-9],[4],[-5],[4],[-8],[-2],[-3],[9],[-9],[6],[-2],[-4],[8],[3],[-9],[-9],[3],[-8],[-4],[-4],[3],[3],[8],[-1],[2],[6],[6],[6],[-5],[-10],[-8],[-3],[-6],[-1],[5],[5],[1],[3],[-7],[-6],[-4],[2],[2],[5],[-9],[-2],[-8],[9],[-7],[-4],[-6],[-2],[6],[-6],[-10],[5],[-5],[-5]], dtype = "uint64")#candidate|149|(77, 1)|const|uint64
call_148 = relay.TupleGetItem(func_37_call(relay.reshape(const_149.astype('uint64'), [11, 7]), relay.reshape(const_149.astype('uint64'), [11, 7]), relay.reshape(const_149.astype('bool'), [11, 7]), ), 2)
call_150 = relay.TupleGetItem(func_41_call(relay.reshape(const_149.astype('uint64'), [11, 7]), relay.reshape(const_149.astype('uint64'), [11, 7]), relay.reshape(const_149.astype('bool'), [11, 7]), ), 2)
uop_151 = relay.exp(bop_134.astype('float64')) # shape=(14, 16)
uop_153 = relay.exp(bop_137.astype('float64')) # shape=(14, 16)
var_154 = relay.var("var_154", dtype = "int8", shape = (14, 16))#candidate|154|(14, 16)|var|int8
bop_155 = relay.left_shift(bop_141.astype('uint8'), relay.reshape(var_154.astype('uint8'), relay.shape_of(bop_141))) # shape=(14, 16)
bop_158 = relay.left_shift(bop_144.astype('uint8'), relay.reshape(var_154.astype('uint8'), relay.shape_of(bop_144))) # shape=(14, 16)
uop_162 = relay.rsqrt(uop_151.astype('float64')) # shape=(14, 16)
uop_164 = relay.rsqrt(uop_153.astype('float64')) # shape=(14, 16)
bop_169 = relay.minimum(uop_145.astype('uint32'), relay.reshape(bop_155.astype('uint32'), relay.shape_of(uop_145))) # shape=(14, 16)
bop_172 = relay.minimum(uop_147.astype('uint32'), relay.reshape(bop_158.astype('uint32'), relay.shape_of(uop_147))) # shape=(14, 16)
uop_175 = relay.erf(uop_162.astype('float32')) # shape=(14, 16)
uop_177 = relay.erf(uop_164.astype('float32')) # shape=(14, 16)
uop_178 = relay.tan(uop_175.astype('float64')) # shape=(14, 16)
uop_180 = relay.tan(uop_177.astype('float64')) # shape=(14, 16)
output = relay.Tuple([call_148,const_149,bop_169,uop_178,])
output2 = relay.Tuple([call_150,const_149,bop_172,uop_180,])
func_181 = relay.Function([var_133,var_154,], output)
mod['func_181'] = func_181
mod = relay.transform.InferType()(mod)
mutated_mod['func_181'] = func_181
mutated_mod = relay.transform.InferType()(mutated_mod)
func_181_call = mutated_mod.get_global_var('func_181')
var_183 = relay.var("var_183", dtype = "float32", shape = (14, 16))#candidate|183|(14, 16)|var|float32
var_184 = relay.var("var_184", dtype = "int8", shape = (14, 16))#candidate|184|(14, 16)|var|int8
call_182 = func_181_call(var_183,var_184,)
output = call_182
func_185 = relay.Function([var_183,var_184,], output)
mutated_mod['func_185'] = func_185
mutated_mod = relay.transform.InferType()(mutated_mod)
var_195 = relay.var("var_195", dtype = "uint32", shape = (2,))#candidate|195|(2,)|var|uint32
var_196 = relay.var("var_196", dtype = "uint32", shape = (2,))#candidate|196|(2,)|var|uint32
bop_197 = relay.bitwise_and(var_195.astype('uint32'), relay.reshape(var_196.astype('uint32'), relay.shape_of(var_195))) # shape=(2,)
uop_200 = relay.cosh(bop_197.astype('float64')) # shape=(2,)
bop_204 = relay.subtract(uop_200.astype('float32'), relay.reshape(var_195.astype('float32'), relay.shape_of(uop_200))) # shape=(2,)
bop_207 = relay.logical_or(var_195.astype('bool'), relay.reshape(bop_197.astype('bool'), relay.shape_of(var_195))) # shape=(2,)
var_210 = relay.var("var_210", dtype = "float64", shape = (2,))#candidate|210|(2,)|var|float64
bop_211 = relay.power(uop_200.astype('float32'), relay.reshape(var_210.astype('float32'), relay.shape_of(uop_200))) # shape=(2,)
bop_214 = relay.less(bop_204.astype('bool'), relay.reshape(var_196.astype('bool'), relay.shape_of(bop_204))) # shape=(2,)
const_219 = relay.const([False,False], dtype = "bool")#candidate|219|(2,)|const|bool
bop_220 = relay.not_equal(bop_207.astype('bool'), relay.reshape(const_219.astype('bool'), relay.shape_of(bop_207))) # shape=(2,)
bop_224 = relay.not_equal(bop_214.astype('bool'), relay.reshape(bop_211.astype('bool'), relay.shape_of(bop_214))) # shape=(2,)
output = relay.Tuple([bop_220,bop_224,])
output2 = relay.Tuple([bop_220,bop_224,])
func_227 = relay.Function([var_195,var_196,var_210,], output)
mod['func_227'] = func_227
mod = relay.transform.InferType()(mod)
mutated_mod['func_227'] = func_227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_227_call = mutated_mod.get_global_var('func_227')
var_229 = relay.var("var_229", dtype = "uint32", shape = (2,))#candidate|229|(2,)|var|uint32
var_230 = relay.var("var_230", dtype = "uint32", shape = (2,))#candidate|230|(2,)|var|uint32
var_231 = relay.var("var_231", dtype = "float64", shape = (2,))#candidate|231|(2,)|var|float64
call_228 = func_227_call(var_229,var_230,var_231,)
output = call_228
func_232 = relay.Function([var_229,var_230,var_231,], output)
mutated_mod['func_232'] = func_232
mutated_mod = relay.transform.InferType()(mutated_mod)
const_240 = relay.const([2,4,1,4,4,2,-7,6,2,2,-7,-4,3,6,6], dtype = "uint32")#candidate|240|(15,)|const|uint32
var_241 = relay.var("var_241", dtype = "uint32", shape = (15,))#candidate|241|(15,)|var|uint32
bop_242 = relay.maximum(const_240.astype('uint32'), relay.reshape(var_241.astype('uint32'), relay.shape_of(const_240))) # shape=(15,)
output = bop_242
output2 = bop_242
func_245 = relay.Function([var_241,], output)
mod['func_245'] = func_245
mod = relay.transform.InferType()(mod)
var_246 = relay.var("var_246", dtype = "uint32", shape = (15,))#candidate|246|(15,)|var|uint32
output = func_245(var_246)
func_247 = relay.Function([var_246], output)
mutated_mod['func_247'] = func_247
mutated_mod = relay.transform.InferType()(mutated_mod)
var_265 = relay.var("var_265", dtype = "uint64", shape = (13, 5, 15))#candidate|265|(13, 5, 15)|var|uint64
var_266 = relay.var("var_266", dtype = "uint64", shape = (13, 5, 15))#candidate|266|(13, 5, 15)|var|uint64
bop_267 = relay.right_shift(var_265.astype('uint64'), relay.reshape(var_266.astype('uint64'), relay.shape_of(var_265))) # shape=(13, 5, 15)
output = bop_267
output2 = bop_267
func_271 = relay.Function([var_265,var_266,], output)
mod['func_271'] = func_271
mod = relay.transform.InferType()(mod)
mutated_mod['func_271'] = func_271
mutated_mod = relay.transform.InferType()(mutated_mod)
func_271_call = mutated_mod.get_global_var('func_271')
var_273 = relay.var("var_273", dtype = "uint64", shape = (13, 5, 15))#candidate|273|(13, 5, 15)|var|uint64
var_274 = relay.var("var_274", dtype = "uint64", shape = (13, 5, 15))#candidate|274|(13, 5, 15)|var|uint64
call_272 = func_271_call(var_273,var_274,)
output = call_272
func_275 = relay.Function([var_273,var_274,], output)
mutated_mod['func_275'] = func_275
mutated_mod = relay.transform.InferType()(mutated_mod)
var_282 = relay.var("var_282", dtype = "int16", shape = (8, 5, 13))#candidate|282|(8, 5, 13)|var|int16
var_283 = relay.var("var_283", dtype = "int16", shape = (8, 5, 13))#candidate|283|(8, 5, 13)|var|int16
bop_284 = relay.less(var_282.astype('bool'), relay.reshape(var_283.astype('bool'), relay.shape_of(var_282))) # shape=(8, 5, 13)
bop_287 = relay.equal(bop_284.astype('bool'), relay.reshape(var_282.astype('bool'), relay.shape_of(bop_284))) # shape=(8, 5, 13)
bop_290 = relay.bitwise_and(var_282.astype('int32'), relay.reshape(bop_287.astype('int32'), relay.shape_of(var_282))) # shape=(8, 5, 13)
uop_293 = relay.log(bop_290.astype('float64')) # shape=(8, 5, 13)
uop_297 = relay.sin(var_283.astype('float32')) # shape=(8, 5, 13)
uop_299 = relay.erf(uop_297.astype('float64')) # shape=(8, 5, 13)
bop_301 = relay.not_equal(uop_293.astype('bool'), relay.reshape(uop_299.astype('bool'), relay.shape_of(uop_293))) # shape=(8, 5, 13)
uop_304 = relay.cosh(uop_299.astype('float32')) # shape=(8, 5, 13)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_306 = relay.TupleGetItem(func_70_call(), 0)
call_307 = relay.TupleGetItem(func_72_call(), 0)
bop_308 = relay.logical_and(uop_293.astype('bool'), relay.reshape(uop_299.astype('bool'), relay.shape_of(uop_293))) # shape=(8, 5, 13)
bop_312 = relay.greater(bop_301.astype('bool'), relay.reshape(var_283.astype('bool'), relay.shape_of(bop_301))) # shape=(8, 5, 13)
output = relay.Tuple([uop_304,call_306,bop_308,bop_312,])
output2 = relay.Tuple([uop_304,call_307,bop_308,bop_312,])
func_315 = relay.Function([var_282,var_283,], output)
mod['func_315'] = func_315
mod = relay.transform.InferType()(mod)
mutated_mod['func_315'] = func_315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_315_call = mutated_mod.get_global_var('func_315')
var_317 = relay.var("var_317", dtype = "int16", shape = (8, 5, 13))#candidate|317|(8, 5, 13)|var|int16
var_318 = relay.var("var_318", dtype = "int16", shape = (8, 5, 13))#candidate|318|(8, 5, 13)|var|int16
call_316 = func_315_call(var_317,var_318,)
output = call_316
func_319 = relay.Function([var_317,var_318,], output)
mutated_mod['func_319'] = func_319
mutated_mod = relay.transform.InferType()(mutated_mod)
var_331 = relay.var("var_331", dtype = "int8", shape = (14, 1, 1))#candidate|331|(14, 1, 1)|var|int8
var_332 = relay.var("var_332", dtype = "int8", shape = (14, 16, 4))#candidate|332|(14, 16, 4)|var|int8
bop_333 = relay.left_shift(var_331.astype('int8'), var_332.astype('int8')) # shape=(14, 16, 4)
uop_336 = relay.log(bop_333.astype('float32')) # shape=(14, 16, 4)
const_338 = relay.const([[[-5.932024,7.797268,3.092949,3.300875],[-2.639487,7.399093,9.297536,-1.955207],[6.637027,-4.664898,-9.290446,-9.800326],[0.789479,-5.896351,-0.973230,-0.345749],[-8.580205,5.501343,-9.275093,4.228457],[-4.921468,5.695566,-9.804511,-2.891234],[4.364189,8.776084,9.856178,-7.273009],[3.296821,-9.345792,-2.376408,6.224943],[-2.327601,8.113356,6.636164,7.811482],[0.397338,-4.262783,3.603424,5.630333],[5.294765,-3.873427,4.515419,2.914472],[-9.362534,-7.634487,-9.557249,3.551358],[3.799072,3.219303,2.446593,-6.967761],[5.265472,-2.649193,8.652632,9.686512],[-2.552554,7.131970,-9.673951,2.677069],[2.765052,-2.124773,0.645677,-0.186042]],[[-1.875556,0.590426,0.963908,-5.799551],[-8.110903,5.851354,6.961688,-9.188234],[-6.791250,9.452186,-5.532959,0.704307],[-2.322820,0.230959,6.920434,-7.521650],[6.697874,6.648756,2.564715,8.606525],[3.461001,7.617335,4.490823,-3.196195],[-5.865082,7.958886,-2.491951,-0.379748],[-1.978072,-2.769128,9.872677,7.135319],[3.162765,2.199580,-4.914479,-0.985574],[8.235572,-8.229868,-2.404236,8.358594],[-7.427843,3.728948,6.351400,-1.129173],[-6.886000,-1.698037,7.824982,-0.256076],[-2.964426,-6.000879,6.650670,-9.108063],[-2.293300,0.099208,-3.992385,2.668460],[3.730108,1.198669,-0.456709,-0.400372],[1.987417,0.621980,-1.527063,6.770631]],[[8.257483,-2.150563,-9.397976,-6.716071],[7.357457,3.317172,-2.248143,1.863117],[-1.778323,-7.001459,-5.778786,0.827254],[9.613978,-9.120456,-3.661833,8.104910],[9.852480,-7.795732,-8.138551,7.499673],[6.759478,1.614129,7.966978,4.023709],[-3.500128,1.221470,2.814730,-0.031402],[1.978416,-8.429480,-3.667085,2.913624],[8.657618,9.253781,-1.527884,-5.211030],[-2.335218,1.492809,-9.088471,2.166444],[9.953301,7.694354,0.565616,8.722419],[-7.649330,-2.506458,9.574451,3.042864],[-3.160463,0.178401,8.646553,-0.988194],[4.374830,9.836745,-8.670223,-9.646613],[3.190415,-0.839280,7.187246,3.758845],[-6.182045,-1.215583,-1.535951,-7.098372]],[[8.616161,5.625317,7.293649,-7.593279],[-4.564915,-1.080249,-2.478791,-2.661949],[-9.191837,-9.045975,-5.467679,-9.803424],[7.160145,0.357052,-4.701799,-2.743230],[8.145776,-8.405036,8.510672,0.185422],[-5.340056,8.459187,2.725962,5.098148],[-6.458586,4.295221,7.686328,2.272256],[6.236188,-7.105819,3.394527,6.600940],[7.052640,8.370435,-8.858547,-8.769168],[1.162023,7.443181,1.915919,-9.529615],[-5.622291,-2.350290,8.759892,-1.626663],[-0.707593,-1.038590,-7.861516,-2.883519],[3.436371,-5.374966,2.336549,4.842608],[-7.652266,0.052651,6.786000,-3.799739],[9.828371,4.628675,-4.516297,9.635442],[0.881594,-5.261250,5.272169,1.864816]],[[5.475926,-9.405762,-8.924337,6.893270],[-4.248382,-4.778647,-3.262384,7.520377],[0.524237,7.763043,5.271884,1.427637],[-2.633850,-2.467303,-1.714108,6.108033],[4.624886,-8.037578,6.407544,1.071441],[-1.810928,9.020949,-8.901083,3.236449],[5.236087,6.717227,1.415450,5.336770],[4.724361,-1.255406,0.652059,0.367802],[4.958356,-9.436128,7.841083,7.720692],[8.124749,-7.810066,5.453739,-7.919247],[-4.695156,6.298320,-9.275997,-1.450169],[-6.194954,4.372144,-1.433421,4.645314],[0.571151,-5.124469,1.647076,-0.657728],[-4.523895,-1.024228,-1.008857,-8.327934],[-4.498821,2.826011,4.736706,-4.244793],[-1.521076,3.167034,-4.965755,-0.699239]],[[7.118798,-8.801973,-2.082212,6.301871],[-8.363784,8.328321,-7.476177,3.962569],[4.579685,5.580627,-4.070453,6.512509],[-9.540367,5.053173,2.915082,-6.037399],[-7.899668,7.793490,7.297949,3.830368],[-6.056943,0.494321,1.197851,2.228167],[1.492373,4.654673,1.827144,-4.361046],[0.991675,-0.767149,7.089903,4.797360],[-9.859169,9.593121,-0.642682,1.590814],[6.195715,5.157554,7.844278,2.756980],[-2.079988,9.908685,4.971607,6.166278],[6.229022,2.513849,-5.185535,1.057132],[2.806732,-6.853517,4.055533,-4.063763],[-1.324950,8.866449,1.865465,-2.535211],[3.464131,6.578496,0.279827,-0.536625],[-4.709668,-1.894374,-5.804237,3.510388]],[[-5.440339,2.368149,5.270177,-5.281606],[-1.792371,-3.248026,-8.855242,5.362492],[-9.347980,9.470369,5.684770,-6.980447],[8.323153,-1.554542,-5.081953,-4.279037],[3.222384,4.355198,3.215837,0.228169],[6.416336,9.792566,-7.938510,-3.418553],[7.709996,4.555253,5.288247,1.321444],[-0.957442,-2.768877,6.653761,6.290115],[4.539579,-9.141769,-5.186476,-7.483474],[2.181992,6.890290,-1.042384,-8.706339],[3.264580,-6.378639,3.408880,-2.977045],[1.152614,5.127557,9.902735,0.547607],[4.310367,3.287749,3.647068,2.527939],[-7.960103,7.860410,-0.818517,-2.359336],[2.887523,-1.237871,-7.057905,-7.275407],[-0.483374,3.260529,-5.828677,-7.101198]],[[-4.927651,5.323139,9.816892,-1.195086],[1.086717,-8.403927,6.741608,-1.175147],[1.291070,0.785254,6.772746,2.141469],[7.475321,4.534285,6.768854,1.969519],[1.192064,-4.810175,-4.687666,-3.747249],[-3.345141,9.923662,-6.258014,-1.558733],[1.693649,0.924100,4.520510,-1.485127],[9.745833,-6.883903,9.322246,-0.081149],[-7.358335,0.069723,4.030430,-3.922950],[-8.244681,8.901936,0.593606,-1.307708],[-3.403837,2.776138,-0.338984,-0.671446],[7.926493,-8.443722,2.886994,-1.891398],[7.335726,-0.021788,2.146884,-8.828214],[-4.946873,-8.344763,5.972200,-4.371068],[8.848166,6.472162,5.766595,1.884833],[-9.133991,0.132030,2.915772,7.503950]],[[8.432032,0.654840,8.073423,-2.724923],[-3.696756,5.326396,1.165342,2.782762],[-0.181795,-6.303030,-7.482373,-2.158026],[-2.183692,-3.981926,8.753375,-4.527389],[7.888097,-8.575971,-3.948481,3.925830],[7.009283,-1.344708,-2.247651,6.913070],[2.584294,0.150767,-1.166740,-5.464081],[7.778748,-5.724566,8.796640,-4.210216],[-1.656650,3.916123,1.738086,3.450547],[2.999830,-6.174110,4.731262,-7.454999],[6.018879,9.168778,-0.419878,-7.502494],[-7.344628,-3.568652,-6.554562,7.047166],[2.246026,6.693181,4.856940,-4.393783],[-2.668999,-5.793518,-3.862588,-6.587712],[-9.604234,7.407495,-1.652949,8.778987],[-1.590060,-4.658017,-9.459868,-0.407494]],[[-5.452863,-9.706238,-4.958345,-8.137264],[4.856902,4.747842,-2.433262,-7.951287],[0.621749,7.087829,4.037151,-4.320956],[-8.620719,-4.935614,-3.358231,1.875799],[-3.799053,-2.986893,-1.998171,-3.525986],[-0.726613,6.536900,4.939427,5.211535],[-8.690737,-7.200356,8.577102,7.708236],[2.834779,-8.262846,-0.806840,-0.047900],[-3.541285,-4.039097,-2.096461,-7.143837],[-1.654269,8.621243,5.237461,-3.450081],[1.726200,-4.271617,3.389273,-1.418229],[7.839691,1.836680,-9.433278,3.582994],[-5.801176,5.525264,-5.259977,5.936665],[-7.398140,-7.488294,-5.397336,5.306656],[-5.195363,-5.273430,9.976470,-5.770810],[-8.669639,1.747651,-8.989523,6.813969]],[[-2.189240,7.641085,-8.898398,8.783857],[8.744399,0.785898,-4.739989,1.854870],[-4.355223,-8.106304,-4.049895,-2.124418],[-7.415509,-7.242052,-4.941521,-9.095606],[-2.415319,5.878003,-4.999825,0.924731],[0.190597,2.535260,3.004791,-3.046836],[5.010019,-0.791618,9.214351,-4.442587],[-8.841312,-9.696867,-8.188422,6.028168],[-4.066474,7.938446,0.598960,-6.291925],[4.404969,-7.391459,-0.553781,-3.171630],[3.142403,-3.599055,-6.500709,2.975189],[6.823679,1.374692,-7.425782,-0.044479],[-5.051017,1.963968,6.666817,-6.342056],[-4.343161,9.745477,2.596153,-2.340148],[-6.601204,8.780506,6.274052,3.172062],[4.826939,-1.138853,7.872848,-7.980384]],[[-3.065065,8.592141,-2.373391,5.677844],[-8.066439,5.877205,-1.375131,2.652899],[-4.313471,3.629019,7.730510,-3.294522],[-0.597433,-3.035411,-8.405116,7.314240],[-6.608623,-2.889575,-2.481313,2.420566],[-2.449743,-4.220726,-6.154085,-4.769753],[-8.662671,-7.505995,-0.492674,-6.377431],[9.692206,3.975619,-3.615655,1.701545],[9.529332,6.296780,7.668377,5.482126],[6.764029,-5.625678,8.333949,9.950260],[2.838348,3.008534,-5.456245,-7.097560],[-5.015250,4.152145,-2.203008,1.037795],[-9.261866,3.582539,-1.882369,-5.483835],[-2.678115,2.686093,8.434575,3.902948],[2.072663,-5.970326,6.888343,3.128684],[-8.755751,-8.331674,9.370416,3.408673]],[[-6.865011,9.282963,3.477595,-7.394927],[7.279156,1.127158,-3.165090,7.647346],[3.097865,-5.450167,-3.143422,-5.329517],[-3.013827,1.386818,-8.399145,-9.836091],[4.268898,7.137400,8.157370,-1.815013],[-5.558490,7.523084,-6.450949,-0.833122],[-6.558022,-4.702879,-9.153596,-6.595645],[7.549173,6.599886,-9.308357,-0.947676],[2.062255,-8.964609,-9.737044,2.322866],[-1.252212,6.331594,6.091293,-5.536564],[-9.103245,-8.966587,6.667940,-4.497324],[-8.767310,-9.483908,2.681710,-2.079635],[1.130356,6.705067,6.031241,-6.105762],[1.194866,5.986727,2.654907,-7.119062],[-0.554641,-9.872887,4.514582,4.780134],[-0.491812,-7.676322,-4.483515,1.535129]],[[8.649456,5.204057,8.234609,-4.539802],[-1.609371,-5.169060,2.109663,7.190395],[0.996483,0.037786,-5.269756,9.398460],[8.743878,-5.578273,-3.823556,2.924810],[-2.186409,3.003605,-9.690848,-8.144166],[7.160013,-4.184665,-3.126219,-8.128291],[2.534166,-8.513209,-6.459829,6.470715],[-0.604435,-1.217878,2.423004,-8.896175],[-0.695666,7.873669,-5.634762,4.559805],[-7.425199,-7.628199,-6.891020,6.297937],[4.897729,1.707493,2.753424,1.271192],[0.408945,-2.200121,8.045744,-4.719777],[-4.188371,-3.051643,-7.977780,-4.742788],[4.124879,5.722057,-1.682059,9.020771],[-7.617816,4.192463,9.763747,5.887302],[-6.255994,7.458614,6.580173,-1.437617]]], dtype = "float32")#candidate|338|(14, 16, 4)|const|float32
bop_339 = relay.less(uop_336.astype('bool'), relay.reshape(const_338.astype('bool'), relay.shape_of(uop_336))) # shape=(14, 16, 4)
bop_342 = relay.minimum(uop_336.astype('uint64'), relay.reshape(const_338.astype('uint64'), relay.shape_of(uop_336))) # shape=(14, 16, 4)
uop_345 = relay.asin(bop_342.astype('float32')) # shape=(14, 16, 4)
uop_350 = relay.sin(uop_345.astype('float64')) # shape=(14, 16, 4)
bop_352 = relay.right_shift(uop_345.astype('int16'), relay.reshape(uop_350.astype('int16'), relay.shape_of(uop_345))) # shape=(14, 16, 4)
uop_355 = relay.sinh(bop_342.astype('float32')) # shape=(14, 16, 4)
uop_357 = relay.log2(uop_355.astype('float32')) # shape=(14, 16, 4)
bop_359 = relay.add(uop_336.astype('uint64'), relay.reshape(bop_333.astype('uint64'), relay.shape_of(uop_336))) # shape=(14, 16, 4)
uop_363 = relay.atanh(uop_355.astype('float32')) # shape=(14, 16, 4)
output = relay.Tuple([bop_339,bop_352,uop_357,bop_359,uop_363,])
output2 = relay.Tuple([bop_339,bop_352,uop_357,bop_359,uop_363,])
func_365 = relay.Function([var_331,var_332,], output)
mod['func_365'] = func_365
mod = relay.transform.InferType()(mod)
mutated_mod['func_365'] = func_365
mutated_mod = relay.transform.InferType()(mutated_mod)
func_365_call = mutated_mod.get_global_var('func_365')
var_367 = relay.var("var_367", dtype = "int8", shape = (14, 1, 1))#candidate|367|(14, 1, 1)|var|int8
var_368 = relay.var("var_368", dtype = "int8", shape = (14, 16, 4))#candidate|368|(14, 16, 4)|var|int8
call_366 = func_365_call(var_367,var_368,)
output = call_366
func_369 = relay.Function([var_367,var_368,], output)
mutated_mod['func_369'] = func_369
mutated_mod = relay.transform.InferType()(mutated_mod)
const_371 = relay.const([[[-0.886883,9.499238],[-7.621637,5.842389],[-8.319836,3.484663],[7.030709,2.992059],[2.981669,-4.005952],[-9.100684,8.509405],[-0.587941,6.481733],[-6.589043,-2.021959],[-3.037226,-6.067524],[6.905474,9.270771]],[[-4.224616,-7.264929],[-6.507569,-7.685064],[5.065818,-9.678493],[3.936472,-0.493916],[6.453789,-1.716408],[-8.555408,6.315656],[-5.160662,3.542048],[8.338998,6.937024],[-0.503661,5.135065],[-7.577986,-3.681968]],[[-1.588048,1.110547],[7.592878,4.702623],[1.847736,-2.675747],[-3.439379,2.985883],[9.668747,-6.894010],[7.855785,-4.995895],[3.155116,-2.603235],[3.778666,-1.312244],[5.881763,0.911844],[2.390299,5.947426]],[[-5.253927,-1.794160],[2.664176,0.271218],[-3.012065,0.188125],[-6.019420,3.156472],[6.336995,4.388966],[1.233103,5.829674],[2.845464,5.212552],[1.055409,0.622390],[-6.322155,6.211809],[7.023809,-1.503113]],[[-5.560023,9.242965],[-5.580868,8.827740],[-9.808024,-2.026541],[-0.930409,-9.497465],[3.046192,-8.021031],[7.267247,-9.435392],[2.610863,7.421249],[5.846826,-2.700558],[-6.012823,-1.212032],[7.932181,-2.570113]],[[-2.603918,6.796737],[-4.934080,-7.458153],[2.268287,8.731267],[-7.473583,-3.771833],[1.752797,2.663860],[5.503847,-5.237045],[3.940864,-6.717505],[-4.043245,0.595117],[-1.478827,5.470288],[-6.002541,-8.697816]],[[-2.511064,-3.679409],[0.748315,-0.882145],[8.580549,8.858122],[-5.283602,-6.392533],[-4.615923,-3.165928],[1.509626,2.717978],[-2.954341,2.276693],[-3.310910,-6.648140],[5.531981,-2.234015],[1.274036,6.854900]],[[-0.069417,1.437452],[-1.056530,-5.865376],[2.367104,-4.486846],[-9.825187,-1.177684],[-8.975941,-3.569646],[8.616500,-3.804223],[4.832952,3.540624],[3.352586,7.512429],[-1.866841,-2.910180],[-0.418409,7.246790]],[[9.771295,8.826223],[-1.576621,-6.858787],[4.685586,7.359543],[1.986805,3.889000],[-7.435251,0.866700],[5.813459,0.405251],[-1.415262,-5.316782],[2.002679,-3.087994],[8.183815,-4.779485],[3.889827,9.381887]],[[1.472851,5.663226],[-4.614680,-5.905819],[6.901170,-8.124873],[-9.800404,-8.832221],[-4.879793,-3.281752],[3.838218,-0.796307],[-1.887323,-1.521812],[-4.566660,-8.601049],[-1.130098,-2.801362],[-8.903049,-2.559574]],[[2.563277,-3.422004],[-7.781053,-4.472285],[3.556466,-3.481142],[1.551355,-1.801795],[-5.899912,0.790677],[-0.495263,-1.487346],[2.438236,4.038548],[4.103945,1.224273],[-0.087392,7.661975],[1.414643,1.465348]],[[-8.170167,4.815075],[6.709233,9.166700],[-9.023507,-9.216225],[-6.057151,7.203341],[3.498476,7.385211],[-2.247421,5.947793],[-4.127880,-3.165748],[-6.539209,-7.070737],[1.533610,-2.766652],[7.718548,-5.050745]],[[-7.286488,-4.798428],[-4.915283,-1.077761],[-1.247804,-6.973573],[9.840203,-2.597034],[-9.806794,3.652973],[-4.020250,9.359700],[4.138009,-1.913993],[5.171585,-8.462781],[0.749812,-5.991922],[-5.573307,-8.972962]],[[-2.856379,-0.875121],[-7.079010,3.829441],[7.234471,-3.274795],[1.989991,2.407149],[7.364950,4.372881],[5.158021,3.055748],[4.579891,-1.908737],[-2.861131,-3.138099],[5.528481,-6.104374],[4.873326,9.163870]],[[-3.072241,3.453601],[0.630678,-2.103866],[-9.226932,-8.153359],[9.886355,6.085020],[1.144964,0.469437],[-1.637187,6.571776],[-9.001315,5.984352],[4.441337,-4.440289],[-8.797667,9.018504],[-6.967153,1.699367]]], dtype = "float64")#candidate|371|(15, 10, 2)|const|float64
var_372 = relay.var("var_372", dtype = "float64", shape = (15, 10, 2))#candidate|372|(15, 10, 2)|var|float64
bop_373 = relay.multiply(const_371.astype('float64'), relay.reshape(var_372.astype('float64'), relay.shape_of(const_371))) # shape=(15, 10, 2)
func_37_call = mod.get_global_var('func_37')
func_41_call = mutated_mod.get_global_var('func_41')
var_377 = relay.var("var_377", dtype = "uint64", shape = (77,))#candidate|377|(77,)|var|uint64
call_376 = relay.TupleGetItem(func_37_call(relay.reshape(var_377.astype('uint64'), [11, 7]), relay.reshape(var_377.astype('uint64'), [11, 7]), relay.reshape(var_377.astype('bool'), [11, 7]), ), 1)
call_378 = relay.TupleGetItem(func_41_call(relay.reshape(var_377.astype('uint64'), [11, 7]), relay.reshape(var_377.astype('uint64'), [11, 7]), relay.reshape(var_377.astype('bool'), [11, 7]), ), 1)
bop_380 = relay.subtract(call_376.astype('int16'), relay.reshape(var_377.astype('int16'), relay.shape_of(call_376))) # shape=(11, 7)
bop_383 = relay.subtract(call_378.astype('int16'), relay.reshape(var_377.astype('int16'), relay.shape_of(call_378))) # shape=(11, 7)
var_385 = relay.var("var_385", dtype = "float64", shape = (15, 10, 2))#candidate|385|(15, 10, 2)|var|float64
bop_386 = relay.right_shift(var_372.astype('uint32'), relay.reshape(var_385.astype('uint32'), relay.shape_of(var_372))) # shape=(15, 10, 2)
uop_389 = relay.asin(var_377.astype('float32')) # shape=(77,)
func_245_call = mod.get_global_var('func_245')
func_247_call = mutated_mod.get_global_var('func_247')
var_395 = relay.var("var_395", dtype = "uint32", shape = (15,))#candidate|395|(15,)|var|uint32
call_394 = func_245_call(relay.reshape(var_395.astype('uint32'), [15,]))
call_396 = func_245_call(relay.reshape(var_395.astype('uint32'), [15,]))
bop_397 = relay.logical_xor(uop_389.astype('uint16'), relay.reshape(var_377.astype('uint16'), relay.shape_of(uop_389))) # shape=(77,)
output = relay.Tuple([bop_373,bop_380,bop_386,call_394,var_395,bop_397,])
output2 = relay.Tuple([bop_373,bop_383,bop_386,call_396,var_395,bop_397,])
func_401 = relay.Function([var_372,var_377,var_385,var_395,], output)
mod['func_401'] = func_401
mod = relay.transform.InferType()(mod)
mutated_mod['func_401'] = func_401
mutated_mod = relay.transform.InferType()(mutated_mod)
func_401_call = mutated_mod.get_global_var('func_401')
var_403 = relay.var("var_403", dtype = "float64", shape = (15, 10, 2))#candidate|403|(15, 10, 2)|var|float64
var_404 = relay.var("var_404", dtype = "uint64", shape = (77,))#candidate|404|(77,)|var|uint64
var_405 = relay.var("var_405", dtype = "float64", shape = (15, 10, 2))#candidate|405|(15, 10, 2)|var|float64
var_406 = relay.var("var_406", dtype = "uint32", shape = (15,))#candidate|406|(15,)|var|uint32
call_402 = func_401_call(var_403,var_404,var_405,var_406,)
output = call_402
func_407 = relay.Function([var_403,var_404,var_405,var_406,], output)
mutated_mod['func_407'] = func_407
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_416 = relay.TupleGetItem(func_70_call(), 0)
call_417 = relay.TupleGetItem(func_72_call(), 0)
const_418 = relay.constdtype = "float32")#candidate|418|(14, 16)|const|float32
bop_419 = relay.multiply(call_416.astype('int32'), relay.reshape(const_418.astype('int32'), relay.shape_of(call_416))) # shape=(14, 16)
bop_422 = relay.multiply(call_417.astype('int32'), relay.reshape(const_418.astype('int32'), relay.shape_of(call_417))) # shape=(14, 16)
output = bop_419
output2 = bop_422
func_423 = relay.Function([], output)
mod['func_423'] = func_423
mod = relay.transform.InferType()(mod)
output = func_423()
func_424 = relay.Function([], output)
mutated_mod['func_424'] = func_424
mutated_mod = relay.transform.InferType()(mutated_mod)
var_431 = relay.var("var_431", dtype = "int8", shape = (11, 8, 7))#candidate|431|(11, 8, 7)|var|int8
const_432 = relay.const([[[-10,2,8,-9,-2,9,5],[-9,10,7,-2,9,4,7],[-3,-8,2,2,-3,10,9],[7,1,5,7,9,-6,5],[-6,-2,7,-1,-1,-9,-1],[4,-8,8,-6,-3,4,-2],[2,10,2,-6,-3,-8,-9],[3,-5,4,7,-7,2,7]],[[3,6,-7,-3,10,7,-8],[10,-3,-1,-9,4,-4,2],[-10,-4,6,-10,6,-1,-5],[-10,5,-2,4,-7,-8,-10],[1,-10,8,-7,2,9,-1],[4,1,10,-3,-4,-8,9],[-1,8,-10,-4,4,7,9],[6,8,-7,-2,-5,-9,-10]],[[-2,-3,-8,7,-1,8,-4],[-3,-1,-2,-7,-8,-6,-3],[-3,-2,-4,10,-5,-9,7],[2,-2,-4,-4,-2,5,-1],[4,-6,9,-4,10,-4,-10],[-1,-2,-8,-10,9,-1,6],[-2,9,-10,-7,-2,1,-4],[8,8,10,-4,6,5,9]],[[-8,-3,9,8,-6,10,5],[-1,6,4,-9,-6,5,9],[9,5,3,10,10,3,5],[4,-5,-1,-4,-7,-9,6],[-8,5,2,-5,-8,7,4],[-3,-3,1,4,1,6,3],[-4,1,-3,-7,6,10,-8],[-1,-6,3,3,-1,5,7]],[[1,-7,8,-7,4,-7,-8],[4,3,2,10,-3,9,-2],[-6,-4,-8,4,-2,-6,-4],[7,-10,-2,4,4,-9,-7],[-1,-1,-7,-3,-9,-10,7],[7,10,7,-5,-3,-3,5],[4,-10,-2,-9,9,3,-1],[9,2,3,-2,-10,-9,7]],[[9,-6,3,-5,9,3,10],[-6,-2,10,2,6,4,-10],[10,-5,-7,-2,-8,-7,-5],[-7,-8,-7,-9,-6,10,7],[-7,-7,4,6,4,4,-8],[-1,3,9,10,-6,1,-1],[2,-7,5,-4,5,-2,9],[-2,-9,2,-8,7,-5,8]],[[3,-10,-7,1,-8,-3,-8],[-3,3,6,8,-5,-8,-4],[-3,2,-4,-10,7,5,8],[-10,4,-5,-1,-8,8,-5],[4,-3,4,3,-6,-8,-6],[-2,-2,-1,8,-3,7,-7],[-7,-3,-4,9,2,5,-7],[-4,-8,5,9,-8,4,-7]],[[5,7,-8,2,-9,-3,3],[10,3,-10,10,-2,-5,-7],[2,-1,-2,6,1,4,-8],[-2,5,10,-5,10,8,-6],[10,2,-9,-6,3,1,-1],[7,-3,10,-10,7,-1,-3],[-9,-3,-2,1,-10,-2,-1],[1,9,-1,5,-2,2,-4]],[[-6,-3,6,4,-3,-1,1],[7,6,4,-6,-10,4,7],[1,8,-10,4,9,6,-2],[6,-8,-5,-3,-2,2,9],[1,-4,9,2,5,7,-4],[7,-8,7,-5,2,1,-6],[-5,-3,-5,3,-10,-5,-10],[10,-3,-10,-9,-9,-9,-4]],[[-7,7,7,2,-4,-8,-9],[9,3,-3,-8,7,10,-4],[9,1,-10,1,8,-1,-6],[9,2,-5,9,1,-9,-5],[-6,-9,-8,-4,1,-8,-9],[-1,10,10,-8,-6,3,4],[-8,2,-7,3,-3,4,2],[-1,2,6,4,3,3,8]],[[-7,-9,-3,-8,-1,-6,8],[8,-3,-9,-3,-7,2,-8],[9,10,-10,10,-9,-6,9],[-5,-3,7,4,-2,-2,3],[-1,9,-8,-6,6,-6,4],[5,3,10,-5,-3,-4,5],[6,-8,-10,8,5,-10,10],[6,-7,9,3,7,8,-6]]], dtype = "int8")#candidate|432|(11, 8, 7)|const|int8
bop_433 = relay.minimum(var_431.astype('int8'), relay.reshape(const_432.astype('int8'), relay.shape_of(var_431))) # shape=(11, 8, 7)
bop_440 = relay.power(var_431.astype('float64'), relay.reshape(bop_433.astype('float64'), relay.shape_of(var_431))) # shape=(11, 8, 7)
func_181_call = mod.get_global_var('func_181')
func_185_call = mutated_mod.get_global_var('func_185')
var_445 = relay.var("var_445", dtype = "float32", shape = (2, 112))#candidate|445|(2, 112)|var|float32
call_444 = relay.TupleGetItem(func_181_call(relay.reshape(var_445.astype('float32'), [14, 16]), relay.reshape(var_445.astype('int8'), [14, 16]), ), 0)
call_446 = relay.TupleGetItem(func_185_call(relay.reshape(var_445.astype('float32'), [14, 16]), relay.reshape(var_445.astype('int8'), [14, 16]), ), 0)
uop_447 = relay.sigmoid(bop_440.astype('float64')) # shape=(11, 8, 7)
func_271_call = mod.get_global_var('func_271')
func_275_call = mutated_mod.get_global_var('func_275')
const_450 = relay.const([6,2,-7,7,-10,-2,-2,-8,9,-5,-5,5,5,8,-5,-1,-4,-10,4,2,4,6,-4,-2,4,-3,-6,6,10,-1,9,-9,-3,-4,6,2,2,10,2,1,1,4,2,1,4,-8,-4,-5,-4,5,-5,-2,6,-4,-3,-4,-1,-4,-6,5,-8,4,10,10,-8,-5,-5,1,8,10,2,-10,10,-6,-8,8,-5,-10,2,8,7,5,10,-3,-3,4,7,-8,5,-5,8,2,8,6,-4,-1,8,2,2,-8,10,-10,-3,6,-6,-4,-8,8,8,7,-10,2,-4,8,2,3,-6,-1,-5,9,-1,6,7,5,-9,7,1,-9,-6,5,3,-1,2,7,10,9,-9,1,10,-3,-8,-10,2,6,-8,-7,8,1,-10,9,6,-3,2,3,2,3,-10,1,-6,-1,9,-7,-6,8,7,-7,-5,8,-8,1,10,-2,-9,-2,1,9,-1,-6,5,2,1,-6,4,4,-8,-4,1,7,-10,-4,4,10,2,-10,-1,-2,6,1,-4,3,-1,8,-4,1,6,4,9,-5,3,-9,-2,9,8,9,6,-2,9,-1,9,-9,-7,6,9,8,-9,-6,-7,8,-6,5,-8,-3,1,2,-5,-6,3,10,-3,6,5,-2,7,-8,-6,-9,2,-3,-5,4,5,-4,-1,-4,3,8,-10,-10,2,-3,3,-3,3,9,-3,8,10,-8,-6,-7,10,7,-6,10,7,6,-5,-4,-7,6,5,-7,8,7,-8,3,10,2,10,-3,5,-6,10,-1,-4,-8,5,-5,-1,-8,-7,-8,2,-2,-2,-9,6,-9,7,5,1,10,9,10,8,-10,1,-1,-8,7,-1,8,2,-4,-1,10,-4,-7,-6,2,5,6,-10,10,3,9,-4,1,-6,4,-6,9,-7,-5,-5,4,9,-7,8,-10,-3,-4,5,2,10,1,2,-8,-6,9,-9,3,-4,10,6,-4,-8,5,-6,7,2,-4,7,5,-4,-7,9,3,-8,5,3,-2,-10,6,-3,9,-10,2,-6,5,1,-3,1,4,-10,-3,8,4,2,1,-3,-3,-5,2,-1,-1,8,3,-1,1,5,4,9,1,-8,-9,5,5,6,-1,-6,-9,8,6,-10,3,-10,9,7,-5,2,-9,5,-7,3,9,-4,-6,2,-4,-10,10,-5,1,8,-10,-9,9,1,6,6,5,-4,4,2,10,6,4,-8,-5,9,9,4,-4,4,1,5,-1,7,-7,-5,3,-7,-3,9,1,5,8,6,6,-3,-1,3,7,9,-8,-3,6,-5,-2,10,6,3,-7,-7,-10,-10,-9,5,2,2,-10,1,2,6,-4,-9,-4,-4,5,5,-2,-8,-9,-8,1,-1,2,7,-9,10,-3,-4,5,-9,-1,-8,9,-5,1,9,1,2,-3,-9,-4,-8,2,-4,-1,-9,-7,-7,-1,5,6,-3,-8,-2,6,5,-4,8,6,5,5,10,-9,8,-9,-3,9,-4,2,7,-9,9,7,1,9,9,-8,-8,5,-8,-1,9,-8,6,-9,10,-5,-3,-6,6,-8,1,-3,4,5,10,2,5,-2,-2,3,-9,2,-3,-6,-6,-3,2,-8,-3,8,-10,-5,-4,3,8,-9,6,-8,-2,7,9,-8,7,-1,8,6,-2,2,-7,-2,-3,-1,4,10,-4,-7,9,5,-1,6,6,9,4,3,-8,-6,8,2,7,-10,-8,-3,2,3,-6,5,3,-1,-5,8,-1,-4,4,-3,-5,1,1,10,-5,9,4,-3,-7,-1,9,4,4,1,4,-10,-10,-4,-6,-4,-9,-10,6,9,-8,-4,10,8,-9,-3,-4,4,3,-5,-4,9,2,8,5,-1,-8,9,-6,1,6,8,6,-6,-10,7,9,-9,5,9,5,-2,-7,-10,-8,8,-8,5,-8,2,-9,-2,-4,9,10,-1,10,-9,-4,9,3,-5,-4,4,9,-10,4,-7,6,-2,-6,3,-6,-10,-3,-4,8,7,10,-4,5,9,7,-10,2,9,-4,-3,-5,3,-3,4,6,3,-1,7,10,-9,-2,10,-10,-1,1,5,6,-2,6,-10,7,10,-10,-8,-3,-7,-4,6,-6,-8,-10,1,-2,-6,-10,3,-2,5,-2,-4,10,9,-8,7,3,-3,10,-2,8,5,6,5,-2,2,5,-8,-7,8,3,3,3,-10,9,-7,10,7,9,6,4,7,5,-2,-4,10,-6,-3,7,3,-7,-5,4,5,-3,7,2,-7,-9,7,-9,-3,10,-3,-1,-2,-7,-5,10,4,-4,1,5,1,6,9,7,-10,10,-3,-10,-9,-4,9,8,-9,4,-6,-9,5,9,3,-8,2,-6,8,1,-4,4,1,5,-2,-2,-10,-9,8,-10,1,-2,5,7,-6,1,-5,1,6,-8,9,-9,10,-3,-4,-7,-1,10,-9,-1,9,-2,6,-10,3,3,9,10,-9,-8,-6,-2,6,-4,10,1,-7,4,8,8,-4,-3,2,-2,4,8,7,-8,-3,-1,10,-2,4,-10,2,4,-10,10,-10,-5,-4,-6,-4,-5,9,-9,5,5,9,-4,5,10,-6,-7,3,-1,-6,6], dtype = "uint64")#candidate|450|(975,)|const|uint64
call_449 = func_271_call(relay.reshape(const_450.astype('uint64'), [13, 5, 15]), relay.reshape(const_450.astype('uint64'), [13, 5, 15]), )
call_451 = func_271_call(relay.reshape(const_450.astype('uint64'), [13, 5, 15]), relay.reshape(const_450.astype('uint64'), [13, 5, 15]), )
uop_453 = relay.erf(uop_447.astype('float64')) # shape=(11, 8, 7)
bop_455 = relay.left_shift(uop_447.astype('int8'), relay.reshape(bop_433.astype('int8'), relay.shape_of(uop_447))) # shape=(11, 8, 7)
const_458 = relay.const([[[-2,-2,7,4,-9,-3,2],[-4,-5,2,-5,-8,4,10],[-4,7,-10,-5,-2,8,-9],[-4,2,-7,10,9,-8,10],[-6,5,7,-6,-10,-5,3],[4,6,-2,-9,3,8,9],[-8,8,-9,-6,7,-5,-4],[-9,-6,8,4,8,8,-7]],[[3,2,4,7,-5,2,-4],[8,9,-6,2,-5,-3,2],[-2,6,4,7,8,-1,-7],[-4,2,-9,-9,4,-9,8],[1,1,-8,1,7,-9,-1],[9,-5,-9,4,8,4,-5],[-2,-5,4,6,-7,5,4],[10,-4,3,1,-6,3,10]],[[-7,-10,-1,-2,3,8,-5],[-3,-7,-6,1,2,-3,-10],[-4,4,7,-10,9,3,2],[-3,4,-7,8,-2,5,2],[2,-6,2,8,4,-10,-2],[6,-4,-10,-6,9,-2,-2],[7,-7,-5,7,-3,-9,-5],[-1,-1,10,7,-4,-8,-6]],[[6,-7,5,3,-5,9,7],[6,-8,10,5,7,-1,4],[5,-10,-1,7,-9,5,-3],[3,-6,-2,3,6,-2,-9],[-5,2,6,-5,7,2,-2],[-1,3,3,-10,-4,8,2],[-2,-3,-5,-8,-5,7,-5],[-9,7,-10,-1,-10,9,-5]],[[-5,-7,5,5,-4,-2,-6],[-2,-9,7,-10,-8,9,1],[5,5,10,-6,-3,-8,6],[8,10,-4,-3,-7,-6,-4],[-5,5,1,-10,3,8,9],[-4,6,8,2,-5,2,7],[-6,-5,6,-3,-1,7,-10],[-9,-3,-3,-5,-6,-4,-3]],[[4,-6,-9,-3,10,-1,10],[-4,-5,7,-6,-8,5,9],[7,-6,1,3,-3,-4,-4],[-4,5,3,3,-7,-4,1],[2,-9,-1,2,-8,-2,3],[6,3,2,-1,7,6,-2],[-2,10,-2,-3,-5,-5,-1],[-6,4,-4,3,6,-2,6]],[[8,8,3,-4,-6,-8,-3],[4,1,-10,1,2,9,-7],[-3,-9,-5,1,-7,-2,1],[6,2,-9,9,8,3,-5],[9,3,9,3,1,1,-8],[-2,1,-2,-5,8,10,5],[7,6,-2,-8,-1,4,-6],[1,-5,2,1,1,-6,-2]],[[-6,-10,5,-8,4,-7,-8],[8,-5,9,-2,-6,-6,-8],[7,-9,-7,5,-2,10,-9],[-1,-9,5,8,1,-5,-4],[5,3,2,-6,-10,2,6],[-8,-8,-3,9,-10,-2,-10],[10,-9,-6,1,-4,-8,10],[6,1,-2,-6,5,-5,-4]],[[-7,-5,8,6,-8,-1,-5],[-9,-8,-2,3,-7,9,4],[-8,10,-5,-6,10,-7,8],[3,1,-10,-8,-8,-4,-8],[9,-6,2,-4,-2,-2,-2],[-1,10,-4,7,-8,6,-4],[10,-5,5,8,9,6,2],[-4,-6,-5,-2,-7,-2,-1]],[[-2,-1,6,3,-9,-9,-3],[-2,3,-9,4,7,-4,-2],[-9,7,8,4,-5,-7,8],[-5,-3,5,-2,6,10,-1],[-8,-1,7,-10,7,1,3],[-10,-8,-1,1,-8,10,-8],[-9,-5,1,-8,5,3,2],[-7,6,3,10,4,9,6]],[[-9,-10,-5,-7,-10,-7,3],[-8,-8,7,2,-5,-5,6],[4,-3,-6,1,-9,-10,-5],[5,-8,10,-10,9,8,-4],[4,7,2,1,3,1,-2],[3,9,5,1,-5,-4,-2],[-8,-7,6,2,-4,-6,-7],[-10,-10,-6,9,10,1,-2]]], dtype = "int8")#candidate|458|(11, 8, 7)|const|int8
bop_459 = relay.equal(bop_455.astype('bool'), relay.reshape(const_458.astype('bool'), relay.shape_of(bop_455))) # shape=(11, 8, 7)
var_462 = relay.var("var_462", dtype = "float64", shape = (11, 8, 7))#candidate|462|(11, 8, 7)|var|float64
bop_463 = relay.logical_xor(uop_453.astype('int8'), relay.reshape(var_462.astype('int8'), relay.shape_of(uop_453))) # shape=(11, 8, 7)
output = relay.Tuple([call_444,var_445,call_449,const_450,bop_459,bop_463,])
output2 = relay.Tuple([call_446,var_445,call_451,const_450,bop_459,bop_463,])
func_466 = relay.Function([var_431,var_445,var_462,], output)
mod['func_466'] = func_466
mod = relay.transform.InferType()(mod)
var_467 = relay.var("var_467", dtype = "int8", shape = (11, 8, 7))#candidate|467|(11, 8, 7)|var|int8
var_468 = relay.var("var_468", dtype = "float32", shape = (2, 112))#candidate|468|(2, 112)|var|float32
var_469 = relay.var("var_469", dtype = "float64", shape = (11, 8, 7))#candidate|469|(11, 8, 7)|var|float64
output = func_466(var_467,var_468,var_469,)
func_470 = relay.Function([var_467,var_468,var_469,], output)
mutated_mod['func_470'] = func_470
mutated_mod = relay.transform.InferType()(mutated_mod)
var_474 = relay.var("var_474", dtype = "uint64", shape = (2, 7))#candidate|474|(2, 7)|var|uint64
var_475 = relay.var("var_475", dtype = "uint64", shape = (2, 7))#candidate|475|(2, 7)|var|uint64
bop_476 = relay.multiply(var_474.astype('uint64'), relay.reshape(var_475.astype('uint64'), relay.shape_of(var_474))) # shape=(2, 7)
func_123_call = mod.get_global_var('func_123')
func_127_call = mutated_mod.get_global_var('func_127')
var_489 = relay.var("var_489", dtype = "int16", shape = (26,))#candidate|489|(26,)|var|int16
call_488 = relay.TupleGetItem(func_123_call(relay.reshape(var_489.astype('int16'), [13, 2]), relay.reshape(var_489.astype('int16'), [13, 2]), relay.reshape(var_489.astype('float64'), [13, 2]), ), 4)
call_490 = relay.TupleGetItem(func_127_call(relay.reshape(var_489.astype('int16'), [13, 2]), relay.reshape(var_489.astype('int16'), [13, 2]), relay.reshape(var_489.astype('float64'), [13, 2]), ), 4)
func_123_call = mod.get_global_var('func_123')
func_127_call = mutated_mod.get_global_var('func_127')
call_494 = relay.TupleGetItem(func_123_call(relay.reshape(var_489.astype('int16'), [13, 2]), relay.reshape(call_488.astype('int16'), [13, 2]), relay.reshape(var_489.astype('float64'), [13, 2]), ), 2)
call_495 = relay.TupleGetItem(func_127_call(relay.reshape(var_489.astype('int16'), [13, 2]), relay.reshape(call_488.astype('int16'), [13, 2]), relay.reshape(var_489.astype('float64'), [13, 2]), ), 2)
bop_499 = relay.floor_mod(bop_476.astype('float64'), relay.reshape(var_474.astype('float64'), relay.shape_of(bop_476))) # shape=(2, 7)
bop_502 = relay.less(bop_499.astype('bool'), relay.reshape(bop_476.astype('bool'), relay.shape_of(bop_499))) # shape=(2, 7)
bop_509 = relay.divide(bop_476.astype('float32'), relay.reshape(bop_502.astype('float32'), relay.shape_of(bop_476))) # shape=(2, 7)
func_401_call = mod.get_global_var('func_401')
func_407_call = mutated_mod.get_global_var('func_407')
var_514 = relay.var("var_514", dtype = "float64", shape = (10, 30))#candidate|514|(10, 30)|var|float64
var_515 = relay.var("var_515", dtype = "uint64", shape = (77,))#candidate|515|(77,)|var|uint64
const_516 = relay.const([[-4],[-8],[6],[-7],[-1],[6],[1],[1],[-7],[1],[5],[-4],[8],[-5],[-1]], dtype = "uint32")#candidate|516|(15, 1)|const|uint32
call_513 = relay.TupleGetItem(func_401_call(relay.reshape(var_514.astype('float64'), [15, 10, 2]), relay.reshape(var_515.astype('uint64'), [77,]), relay.reshape(var_514.astype('float64'), [15, 10, 2]), relay.reshape(const_516.astype('uint32'), [15,]), ), 4)
call_517 = relay.TupleGetItem(func_407_call(relay.reshape(var_514.astype('float64'), [15, 10, 2]), relay.reshape(var_515.astype('uint64'), [77,]), relay.reshape(var_514.astype('float64'), [15, 10, 2]), relay.reshape(const_516.astype('uint32'), [15,]), ), 4)
uop_521 = relay.erf(bop_509.astype('float32')) # shape=(2, 7)
bop_524 = relay.multiply(uop_521.astype('uint16'), relay.reshape(bop_502.astype('uint16'), relay.shape_of(uop_521))) # shape=(2, 7)
uop_527 = relay.atanh(bop_524.astype('float64')) # shape=(2, 7)
bop_529 = relay.mod(uop_527.astype('float32'), relay.reshape(var_474.astype('float32'), relay.shape_of(uop_527))) # shape=(2, 7)
bop_532 = relay.subtract(bop_529.astype('uint64'), relay.reshape(bop_476.astype('uint64'), relay.shape_of(bop_529))) # shape=(2, 7)
bop_536 = relay.bitwise_xor(uop_527.astype('int32'), relay.reshape(bop_476.astype('int32'), relay.shape_of(uop_527))) # shape=(2, 7)
uop_539 = relay.cosh(uop_527.astype('float64')) # shape=(2, 7)
output = relay.Tuple([call_488,var_489,call_494,call_513,var_514,var_515,const_516,bop_532,bop_536,uop_539,])
output2 = relay.Tuple([call_490,var_489,call_495,call_517,var_514,var_515,const_516,bop_532,bop_536,uop_539,])
func_545 = relay.Function([var_474,var_475,var_489,var_514,var_515,], output)
mod['func_545'] = func_545
mod = relay.transform.InferType()(mod)
mutated_mod['func_545'] = func_545
mutated_mod = relay.transform.InferType()(mutated_mod)
func_545_call = mutated_mod.get_global_var('func_545')
var_547 = relay.var("var_547", dtype = "uint64", shape = (2, 7))#candidate|547|(2, 7)|var|uint64
var_548 = relay.var("var_548", dtype = "uint64", shape = (2, 7))#candidate|548|(2, 7)|var|uint64
var_549 = relay.var("var_549", dtype = "int16", shape = (26,))#candidate|549|(26,)|var|int16
var_550 = relay.var("var_550", dtype = "float64", shape = (10, 30))#candidate|550|(10, 30)|var|float64
var_551 = relay.var("var_551", dtype = "uint64", shape = (77,))#candidate|551|(77,)|var|uint64
call_546 = func_545_call(var_547,var_548,var_549,var_550,var_551,)
output = call_546
func_552 = relay.Function([var_547,var_548,var_549,var_550,var_551,], output)
mutated_mod['func_552'] = func_552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_575 = relay.TupleGetItem(func_70_call(), 0)
call_576 = relay.TupleGetItem(func_72_call(), 0)
var_580 = relay.var("var_580", dtype = "float32", shape = (14, 16))#candidate|580|(14, 16)|var|float32
bop_581 = relay.bitwise_xor(call_575.astype('int8'), relay.reshape(var_580.astype('int8'), relay.shape_of(call_575))) # shape=(14, 16)
bop_584 = relay.bitwise_xor(call_576.astype('int8'), relay.reshape(var_580.astype('int8'), relay.shape_of(call_576))) # shape=(14, 16)
bop_586 = relay.floor_mod(bop_581.astype('float32'), relay.reshape(var_580.astype('float32'), relay.shape_of(bop_581))) # shape=(14, 16)
bop_589 = relay.floor_mod(bop_584.astype('float32'), relay.reshape(var_580.astype('float32'), relay.shape_of(bop_584))) # shape=(14, 16)
bop_591 = relay.subtract(call_575.astype('int64'), relay.reshape(bop_586.astype('int64'), relay.shape_of(call_575))) # shape=(14, 16)
bop_594 = relay.subtract(call_576.astype('int64'), relay.reshape(bop_589.astype('int64'), relay.shape_of(call_576))) # shape=(14, 16)
func_545_call = mod.get_global_var('func_545')
func_552_call = mutated_mod.get_global_var('func_552')
var_596 = relay.var("var_596", dtype = "uint64", shape = (14,))#candidate|596|(14,)|var|uint64
const_597 = relay.const([2,-8,7,9,-4,8,4,10,-4,-9,2,-3,4,6,-6,8,1,3,9,-7,7,-4,3,-1,4,5], dtype = "int16")#candidate|597|(26,)|const|int16
var_598 = relay.var("var_598", dtype = "float64", shape = (300,))#candidate|598|(300,)|var|float64
var_599 = relay.var("var_599", dtype = "uint64", shape = (77,))#candidate|599|(77,)|var|uint64
call_595 = relay.TupleGetItem(func_545_call(relay.reshape(var_596.astype('uint64'), [2, 7]), relay.reshape(var_596.astype('uint64'), [2, 7]), relay.reshape(const_597.astype('int16'), [26,]), relay.reshape(var_598.astype('float64'), [10, 30]), relay.reshape(var_599.astype('uint64'), [77,]), ), 7)
call_600 = relay.TupleGetItem(func_552_call(relay.reshape(var_596.astype('uint64'), [2, 7]), relay.reshape(var_596.astype('uint64'), [2, 7]), relay.reshape(const_597.astype('int16'), [26,]), relay.reshape(var_598.astype('float64'), [10, 30]), relay.reshape(var_599.astype('uint64'), [77,]), ), 7)
bop_602 = relay.subtract(bop_586.astype('float64'), relay.reshape(bop_581.astype('float64'), relay.shape_of(bop_586))) # shape=(14, 16)
bop_605 = relay.subtract(bop_589.astype('float64'), relay.reshape(bop_584.astype('float64'), relay.shape_of(bop_589))) # shape=(14, 16)
func_315_call = mod.get_global_var('func_315')
func_319_call = mutated_mod.get_global_var('func_319')
var_617 = relay.var("var_617", dtype = "int16", shape = (520,))#candidate|617|(520,)|var|int16
call_616 = relay.TupleGetItem(func_315_call(relay.reshape(var_617.astype('int16'), [8, 5, 13]), relay.reshape(var_617.astype('int16'), [8, 5, 13]), ), 0)
call_618 = relay.TupleGetItem(func_319_call(relay.reshape(var_617.astype('int16'), [8, 5, 13]), relay.reshape(var_617.astype('int16'), [8, 5, 13]), ), 0)
uop_622 = relay.log10(var_599.astype('float64')) # shape=(77,)
uop_627 = relay.tan(uop_622.astype('float32')) # shape=(77,)
output = relay.Tuple([bop_591,call_595,var_596,const_597,var_598,bop_602,call_616,var_617,uop_627,])
output2 = relay.Tuple([bop_594,call_600,var_596,const_597,var_598,bop_605,call_618,var_617,uop_627,])
func_629 = relay.Function([var_580,var_596,var_598,var_599,var_617,], output)
mod['func_629'] = func_629
mod = relay.transform.InferType()(mod)
var_630 = relay.var("var_630", dtype = "float32", shape = (14, 16))#candidate|630|(14, 16)|var|float32
var_631 = relay.var("var_631", dtype = "uint64", shape = (14,))#candidate|631|(14,)|var|uint64
var_632 = relay.var("var_632", dtype = "float64", shape = (300,))#candidate|632|(300,)|var|float64
var_633 = relay.var("var_633", dtype = "uint64", shape = (77,))#candidate|633|(77,)|var|uint64
var_634 = relay.var("var_634", dtype = "int16", shape = (520,))#candidate|634|(520,)|var|int16
output = func_629(var_630,var_631,var_632,var_633,var_634,)
func_635 = relay.Function([var_630,var_631,var_632,var_633,var_634,], output)
mutated_mod['func_635'] = func_635
mutated_mod = relay.transform.InferType()(mutated_mod)
var_637 = relay.var("var_637", dtype = "int8", shape = (8, 9, 8))#candidate|637|(8, 9, 8)|var|int8
var_638 = relay.var("var_638", dtype = "int8", shape = (8, 9, 8))#candidate|638|(8, 9, 8)|var|int8
bop_639 = relay.multiply(var_637.astype('int8'), relay.reshape(var_638.astype('int8'), relay.shape_of(var_637))) # shape=(8, 9, 8)
func_181_call = mod.get_global_var('func_181')
func_185_call = mutated_mod.get_global_var('func_185')
var_644 = relay.var("var_644", dtype = "float32", shape = (224,))#candidate|644|(224,)|var|float32
call_643 = relay.TupleGetItem(func_181_call(relay.reshape(var_644.astype('float32'), [14, 16]), relay.reshape(var_644.astype('int8'), [14, 16]), ), 1)
call_645 = relay.TupleGetItem(func_185_call(relay.reshape(var_644.astype('float32'), [14, 16]), relay.reshape(var_644.astype('int8'), [14, 16]), ), 1)
bop_651 = relay.right_shift(var_637.astype('uint32'), relay.reshape(bop_639.astype('uint32'), relay.shape_of(var_637))) # shape=(8, 9, 8)
output = relay.Tuple([call_643,var_644,bop_651,])
output2 = relay.Tuple([call_645,var_644,bop_651,])
func_658 = relay.Function([var_637,var_638,var_644,], output)
mod['func_658'] = func_658
mod = relay.transform.InferType()(mod)
mutated_mod['func_658'] = func_658
mutated_mod = relay.transform.InferType()(mutated_mod)
func_658_call = mutated_mod.get_global_var('func_658')
var_660 = relay.var("var_660", dtype = "int8", shape = (8, 9, 8))#candidate|660|(8, 9, 8)|var|int8
var_661 = relay.var("var_661", dtype = "int8", shape = (8, 9, 8))#candidate|661|(8, 9, 8)|var|int8
var_662 = relay.var("var_662", dtype = "float32", shape = (224,))#candidate|662|(224,)|var|float32
call_659 = func_658_call(var_660,var_661,var_662,)
output = call_659
func_663 = relay.Function([var_660,var_661,var_662,], output)
mutated_mod['func_663'] = func_663
mutated_mod = relay.transform.InferType()(mutated_mod)
func_423_call = mod.get_global_var('func_423')
func_424_call = mutated_mod.get_global_var('func_424')
call_667 = func_423_call()
call_668 = func_423_call()
var_677 = relay.var("var_677", dtype = "int32", shape = (14, 16))#candidate|677|(14, 16)|var|int32
bop_678 = relay.floor_divide(call_667.astype('float32'), relay.reshape(var_677.astype('float32'), relay.shape_of(call_667))) # shape=(14, 16)
bop_681 = relay.floor_divide(call_668.astype('float32'), relay.reshape(var_677.astype('float32'), relay.shape_of(call_668))) # shape=(14, 16)
const_683 = relay.constdtype = "float32")#candidate|683|(14, 16)|const|float32
bop_684 = relay.mod(bop_678.astype('float32'), relay.reshape(const_683.astype('float32'), relay.shape_of(bop_678))) # shape=(14, 16)
bop_687 = relay.mod(bop_681.astype('float32'), relay.reshape(const_683.astype('float32'), relay.shape_of(bop_681))) # shape=(14, 16)
bop_689 = relay.less_equal(call_667.astype('bool'), relay.reshape(bop_684.astype('bool'), relay.shape_of(call_667))) # shape=(14, 16)
bop_692 = relay.less_equal(call_668.astype('bool'), relay.reshape(bop_687.astype('bool'), relay.shape_of(call_668))) # shape=(14, 16)
output = bop_689
output2 = bop_692
func_694 = relay.Function([var_677,], output)
mod['func_694'] = func_694
mod = relay.transform.InferType()(mod)
mutated_mod['func_694'] = func_694
mutated_mod = relay.transform.InferType()(mutated_mod)
var_695 = relay.var("var_695", dtype = "int32", shape = (14, 16))#candidate|695|(14, 16)|var|int32
func_694_call = mutated_mod.get_global_var('func_694')
call_696 = func_694_call(var_695)
output = call_696
func_697 = relay.Function([var_695], output)
mutated_mod['func_697'] = func_697
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_703 = relay.TupleGetItem(func_70_call(), 0)
call_704 = relay.TupleGetItem(func_72_call(), 0)
var_712 = relay.var("var_712", dtype = "float32", shape = (14, 16))#candidate|712|(14, 16)|var|float32
bop_713 = relay.bitwise_or(call_703.astype('int16'), relay.reshape(var_712.astype('int16'), relay.shape_of(call_703))) # shape=(14, 16)
bop_716 = relay.bitwise_or(call_704.astype('int16'), relay.reshape(var_712.astype('int16'), relay.shape_of(call_704))) # shape=(14, 16)
bop_719 = relay.greater(call_703.astype('bool'), relay.reshape(var_712.astype('bool'), relay.shape_of(call_703))) # shape=(14, 16)
bop_722 = relay.greater(call_704.astype('bool'), relay.reshape(var_712.astype('bool'), relay.shape_of(call_704))) # shape=(14, 16)
uop_725 = relay.acos(bop_713.astype('float64')) # shape=(14, 16)
uop_727 = relay.acos(bop_716.astype('float64')) # shape=(14, 16)
bop_728 = relay.power(uop_725.astype('float64'), relay.reshape(call_703.astype('float64'), relay.shape_of(uop_725))) # shape=(14, 16)
bop_731 = relay.power(uop_727.astype('float64'), relay.reshape(call_704.astype('float64'), relay.shape_of(uop_727))) # shape=(14, 16)
uop_732 = relay.atanh(bop_728.astype('float64')) # shape=(14, 16)
uop_734 = relay.atanh(bop_731.astype('float64')) # shape=(14, 16)
bop_736 = relay.less(uop_725.astype('bool'), relay.reshape(call_703.astype('bool'), relay.shape_of(uop_725))) # shape=(14, 16)
bop_739 = relay.less(uop_727.astype('bool'), relay.reshape(call_704.astype('bool'), relay.shape_of(uop_727))) # shape=(14, 16)
bop_742 = relay.greater_equal(bop_719.astype('bool'), relay.reshape(bop_728.astype('bool'), relay.shape_of(bop_719))) # shape=(14, 16)
bop_745 = relay.greater_equal(bop_722.astype('bool'), relay.reshape(bop_731.astype('bool'), relay.shape_of(bop_722))) # shape=(14, 16)
output = relay.Tuple([uop_732,bop_736,bop_742,])
output2 = relay.Tuple([uop_734,bop_739,bop_745,])
func_749 = relay.Function([var_712,], output)
mod['func_749'] = func_749
mod = relay.transform.InferType()(mod)
var_750 = relay.var("var_750", dtype = "float32", shape = (14, 16))#candidate|750|(14, 16)|var|float32
output = func_749(var_750)
func_751 = relay.Function([var_750], output)
mutated_mod['func_751'] = func_751
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mod.get_global_var('func_70')
func_72_call = mutated_mod.get_global_var('func_72')
call_758 = relay.TupleGetItem(func_70_call(), 0)
call_759 = relay.TupleGetItem(func_72_call(), 0)
func_423_call = mod.get_global_var('func_423')
func_424_call = mutated_mod.get_global_var('func_424')
call_777 = func_423_call()
call_778 = func_423_call()
uop_782 = relay.cos(call_758.astype('float64')) # shape=(14, 16)
uop_784 = relay.cos(call_759.astype('float64')) # shape=(14, 16)
bop_785 = relay.less(uop_782.astype('bool'), relay.reshape(call_777.astype('bool'), relay.shape_of(uop_782))) # shape=(14, 16)
bop_788 = relay.less(uop_784.astype('bool'), relay.reshape(call_778.astype('bool'), relay.shape_of(uop_784))) # shape=(14, 16)
bop_789 = relay.greater(bop_785.astype('bool'), relay.reshape(call_777.astype('bool'), relay.shape_of(bop_785))) # shape=(14, 16)
bop_792 = relay.greater(bop_788.astype('bool'), relay.reshape(call_778.astype('bool'), relay.shape_of(bop_788))) # shape=(14, 16)
output = bop_789
output2 = bop_792
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''104: TVMFuncCall
103: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
102: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
101: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
100: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
99: tvm::transform::Pass::operator()(tvm::IRModule) const
98: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
97: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
96: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
95: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
94: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
93: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
92: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
91: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
90: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
89: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
88: _ZN3tvm5relay16MixedModeMutato
87: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
86: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
85: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
84: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
83: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
82: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
81: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
80: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
79: _ZN3tvm5relay16MixedModeMutato
78: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
77: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
76: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
75: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
74: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
73: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
72: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
71: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
70: tvm::transform::Pass::operator()(tvm::IRModule) const
69: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
68: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
67: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
66: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
65: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
64: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
63: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
62: _ZN3tvm5relay16MixedModeMutato
61: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
60: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
59: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
58: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
57: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
56: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
55: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
54: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
53: _ZN3tvm5relay16MixedModeMutato
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
48: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
46: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''