import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_82 = relay.var("var_82", dtype = "float64", shape = (12, 3))#candidate|82|(12, 3)|var|float64
var_83 = relay.var("var_83", dtype = "float64", shape = (12, 3))#candidate|83|(12, 3)|var|float64
bop_84 = relay.mod(var_82.astype('float64'), relay.reshape(var_83.astype('float64'), relay.shape_of(var_82))) # shape=(12, 3)
uop_89 = relay.exp(var_82.astype('float32')) # shape=(12, 3)
output = relay.Tuple([bop_84,uop_89,])
output2 = relay.Tuple([bop_84,uop_89,])
func_101 = relay.Function([var_82,var_83,], output)
mod['func_101'] = func_101
mod = relay.transform.InferType()(mod)
mutated_mod['func_101'] = func_101
mutated_mod = relay.transform.InferType()(mutated_mod)
func_101_call = mutated_mod.get_global_var('func_101')
var_103 = relay.var("var_103", dtype = "float64", shape = (12, 3))#candidate|103|(12, 3)|var|float64
var_104 = relay.var("var_104", dtype = "float64", shape = (12, 3))#candidate|104|(12, 3)|var|float64
call_102 = func_101_call(var_103,var_104,)
output = call_102
func_105 = relay.Function([var_103,var_104,], output)
mutated_mod['func_105'] = func_105
mutated_mod = relay.transform.InferType()(mutated_mod)
var_141 = relay.var("var_141", dtype = "float32", shape = (4, 9))#candidate|141|(4, 9)|var|float32
uop_142 = relay.cosh(var_141.astype('float32')) # shape=(4, 9)
func_101_call = mod.get_global_var('func_101')
func_105_call = mutated_mod.get_global_var('func_105')
call_150 = relay.TupleGetItem(func_101_call(relay.reshape(uop_142.astype('float64'), [12, 3]), relay.reshape(var_141.astype('float64'), [12, 3]), ), 0)
call_151 = relay.TupleGetItem(func_105_call(relay.reshape(uop_142.astype('float64'), [12, 3]), relay.reshape(var_141.astype('float64'), [12, 3]), ), 0)
var_154 = relay.var("var_154", dtype = "float32", shape = (4, 9))#candidate|154|(4, 9)|var|float32
bop_155 = relay.mod(uop_142.astype('float32'), relay.reshape(var_154.astype('float32'), relay.shape_of(uop_142))) # shape=(4, 9)
uop_168 = relay.log2(bop_155.astype('float64')) # shape=(4, 9)
bop_178 = relay.floor_divide(uop_168.astype('float64'), relay.reshape(uop_142.astype('float64'), relay.shape_of(uop_168))) # shape=(4, 9)
output = relay.Tuple([call_150,bop_178,])
output2 = relay.Tuple([call_151,bop_178,])
func_184 = relay.Function([var_141,var_154,], output)
mod['func_184'] = func_184
mod = relay.transform.InferType()(mod)
var_185 = relay.var("var_185", dtype = "float32", shape = (4, 9))#candidate|185|(4, 9)|var|float32
var_186 = relay.var("var_186", dtype = "float32", shape = (4, 9))#candidate|186|(4, 9)|var|float32
output = func_184(var_185,var_186,)
func_187 = relay.Function([var_185,var_186,], output)
mutated_mod['func_187'] = func_187
mutated_mod = relay.transform.InferType()(mutated_mod)
var_189 = relay.var("var_189", dtype = "uint8", shape = (15, 16))#candidate|189|(15, 16)|var|uint8
var_190 = relay.var("var_190", dtype = "uint8", shape = (15, 16))#candidate|190|(15, 16)|var|uint8
bop_191 = relay.greater(var_189.astype('bool'), relay.reshape(var_190.astype('bool'), relay.shape_of(var_189))) # shape=(15, 16)
output = bop_191
output2 = bop_191
func_194 = relay.Function([var_189,var_190,], output)
mod['func_194'] = func_194
mod = relay.transform.InferType()(mod)
var_195 = relay.var("var_195", dtype = "uint8", shape = (15, 16))#candidate|195|(15, 16)|var|uint8
var_196 = relay.var("var_196", dtype = "uint8", shape = (15, 16))#candidate|196|(15, 16)|var|uint8
output = func_194(var_195,var_196,)
func_197 = relay.Function([var_195,var_196,], output)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
var_226 = relay.var("var_226", dtype = "float64", shape = (7, 7, 15))#candidate|226|(7, 7, 15)|var|float64
uop_227 = relay.asinh(var_226.astype('float64')) # shape=(7, 7, 15)
func_101_call = mod.get_global_var('func_101')
func_105_call = mutated_mod.get_global_var('func_105')
var_230 = relay.var("var_230", dtype = "float64", shape = (1, 36))#candidate|230|(1, 36)|var|float64
call_229 = relay.TupleGetItem(func_101_call(relay.reshape(var_230.astype('float64'), [12, 3]), relay.reshape(var_230.astype('float64'), [12, 3]), ), 0)
call_231 = relay.TupleGetItem(func_105_call(relay.reshape(var_230.astype('float64'), [12, 3]), relay.reshape(var_230.astype('float64'), [12, 3]), ), 0)
output = relay.Tuple([uop_227,call_229,var_230,])
output2 = relay.Tuple([uop_227,call_231,var_230,])
func_232 = relay.Function([var_226,var_230,], output)
mod['func_232'] = func_232
mod = relay.transform.InferType()(mod)
var_233 = relay.var("var_233", dtype = "float64", shape = (7, 7, 15))#candidate|233|(7, 7, 15)|var|float64
var_234 = relay.var("var_234", dtype = "float64", shape = (1, 36))#candidate|234|(1, 36)|var|float64
output = func_232(var_233,var_234,)
func_235 = relay.Function([var_233,var_234,], output)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
var_366 = relay.var("var_366", dtype = "float64", shape = (3, 2, 2))#candidate|366|(3, 2, 2)|var|float64
uop_367 = relay.asinh(var_366.astype('float64')) # shape=(3, 2, 2)
output = relay.Tuple([uop_367,])
output2 = relay.Tuple([uop_367,])
func_386 = relay.Function([var_366,], output)
mod['func_386'] = func_386
mod = relay.transform.InferType()(mod)
var_387 = relay.var("var_387", dtype = "float64", shape = (3, 2, 2))#candidate|387|(3, 2, 2)|var|float64
output = func_386(var_387)
func_388 = relay.Function([var_387], output)
mutated_mod['func_388'] = func_388
mutated_mod = relay.transform.InferType()(mutated_mod)
var_406 = relay.var("var_406", dtype = "float32", shape = (11, 5, 10))#candidate|406|(11, 5, 10)|var|float32
var_407 = relay.var("var_407", dtype = "float32", shape = (11, 5, 10))#candidate|407|(11, 5, 10)|var|float32
bop_408 = relay.divide(var_406.astype('float32'), relay.reshape(var_407.astype('float32'), relay.shape_of(var_406))) # shape=(11, 5, 10)
output = relay.Tuple([bop_408,])
output2 = relay.Tuple([bop_408,])
func_434 = relay.Function([var_406,var_407,], output)
mod['func_434'] = func_434
mod = relay.transform.InferType()(mod)
var_435 = relay.var("var_435", dtype = "float32", shape = (11, 5, 10))#candidate|435|(11, 5, 10)|var|float32
var_436 = relay.var("var_436", dtype = "float32", shape = (11, 5, 10))#candidate|436|(11, 5, 10)|var|float32
output = func_434(var_435,var_436,)
func_437 = relay.Function([var_435,var_436,], output)
mutated_mod['func_437'] = func_437
mutated_mod = relay.transform.InferType()(mutated_mod)
var_691 = relay.var("var_691", dtype = "uint64", shape = ())#candidate|691|()|var|uint64
var_692 = relay.var("var_692", dtype = "uint64", shape = (14, 11, 3))#candidate|692|(14, 11, 3)|var|uint64
bop_693 = relay.multiply(var_691.astype('uint64'), var_692.astype('uint64')) # shape=(14, 11, 3)
output = relay.Tuple([bop_693,])
output2 = relay.Tuple([bop_693,])
func_696 = relay.Function([var_691,var_692,], output)
mod['func_696'] = func_696
mod = relay.transform.InferType()(mod)
var_697 = relay.var("var_697", dtype = "uint64", shape = ())#candidate|697|()|var|uint64
var_698 = relay.var("var_698", dtype = "uint64", shape = (14, 11, 3))#candidate|698|(14, 11, 3)|var|uint64
output = func_696(var_697,var_698,)
func_699 = relay.Function([var_697,var_698,], output)
mutated_mod['func_699'] = func_699
mutated_mod = relay.transform.InferType()(mutated_mod)
const_900 = relay.const(-1, dtype = "uint16")#candidate|900|()|const|uint16
var_901 = relay.var("var_901", dtype = "uint16", shape = (15, 14))#candidate|901|(15, 14)|var|uint16
bop_902 = relay.multiply(const_900.astype('uint16'), var_901.astype('uint16')) # shape=(15, 14)
output = bop_902
output2 = bop_902
func_907 = relay.Function([var_901,], output)
mod['func_907'] = func_907
mod = relay.transform.InferType()(mod)
mutated_mod['func_907'] = func_907
mutated_mod = relay.transform.InferType()(mutated_mod)
var_908 = relay.var("var_908", dtype = "uint16", shape = (15, 14))#candidate|908|(15, 14)|var|uint16
func_907_call = mutated_mod.get_global_var('func_907')
call_909 = func_907_call(var_908)
output = call_909
func_910 = relay.Function([var_908], output)
mutated_mod['func_910'] = func_910
mutated_mod = relay.transform.InferType()(mutated_mod)
var_971 = relay.var("var_971", dtype = "int32", shape = (7, 8, 8))#candidate|971|(7, 8, 8)|var|int32
const_972 = relay.const([[[-5,8,1,-3,4,3,-2,8],[-2,8,2,7,-1,-4,9,-6],[4,-6,-9,5,-5,-3,7,-10],[-2,9,4,-6,6,2,9,-2],[4,-9,-9,6,5,10,5,-2],[-8,4,8,-9,-7,10,10,2],[1,9,-8,-3,-8,-4,3,-1],[9,-5,5,-9,-6,2,-2,2]],[[-6,5,-7,6,5,8,7,1],[5,1,1,-4,-3,-2,3,-10],[4,4,8,-5,-1,1,2,-4],[-9,1,-8,-6,3,6,2,4],[1,-7,7,2,-7,-6,4,-8],[-6,2,5,-3,-3,-2,-4,1],[6,6,10,-1,-10,7,-8,6],[3,-8,-5,-7,-9,-5,7,10]],[[-4,7,2,-10,-7,-6,-2,-9],[-10,5,7,6,-3,10,-5,-5],[5,-2,2,-1,8,3,2,7],[8,-9,-6,-2,-6,-10,3,1],[-9,-8,6,1,-1,-6,-8,-6],[6,3,2,2,-10,-10,-8,-4],[3,-10,-3,5,-5,6,-3,-2],[-10,3,-2,2,7,-8,5,2]],[[4,-9,2,9,-4,-5,-7,-7],[3,3,-5,9,8,-7,-9,-1],[2,8,-3,-5,1,-3,6,9],[10,-5,8,-10,-3,-9,7,-5],[-9,5,1,-8,-10,5,3,-3],[6,9,-4,-10,6,-9,-9,-6],[-9,-2,-2,7,3,8,-5,-10],[-1,-7,-10,1,-6,10,7,6]],[[6,-8,-10,10,6,1,9,4],[-10,4,-10,5,5,1,-3,10],[5,-8,5,-10,6,-4,-5,-6],[1,-7,4,5,9,-3,-3,2],[1,2,-5,-6,-6,-7,-1,5],[2,-1,4,-8,-3,5,-6,-3],[4,4,10,2,2,-6,-2,-3],[3,-1,-3,9,-3,-2,-1,7]],[[-2,9,-1,-9,-2,-4,-8,-9],[4,-9,2,-2,4,2,-1,-3],[10,-9,4,-3,-5,-1,5,-5],[1,-5,3,5,-9,5,8,5],[1,-8,-1,9,10,-10,-1,4],[-8,4,6,1,8,7,3,5],[-5,-8,6,4,-9,-10,9,2],[-5,-1,8,8,7,4,-7,-3]],[[-4,1,-10,5,-9,-2,3,8],[-10,10,-10,-4,2,-6,-8,5],[3,1,3,3,-5,10,8,-7],[-8,8,3,-6,9,8,-2,1],[-9,9,2,-3,8,4,-3,6],[-8,-9,6,8,7,5,8,-7],[10,-6,9,-7,5,4,-2,9],[-5,-1,-4,-8,-4,2,-1,-7]]], dtype = "int32")#candidate|972|(7, 8, 8)|const|int32
bop_973 = relay.logical_xor(var_971.astype('int32'), relay.reshape(const_972.astype('int32'), relay.shape_of(var_971))) # shape=(7, 8, 8)
output = relay.Tuple([bop_973,])
output2 = relay.Tuple([bop_973,])
func_982 = relay.Function([var_971,], output)
mod['func_982'] = func_982
mod = relay.transform.InferType()(mod)
mutated_mod['func_982'] = func_982
mutated_mod = relay.transform.InferType()(mutated_mod)
var_983 = relay.var("var_983", dtype = "int32", shape = (7, 8, 8))#candidate|983|(7, 8, 8)|var|int32
func_982_call = mutated_mod.get_global_var('func_982')
call_984 = func_982_call(var_983)
output = call_984
func_985 = relay.Function([var_983], output)
mutated_mod['func_985'] = func_985
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1038 = relay.var("var_1038", dtype = "int32", shape = (2, 3))#candidate|1038|(2, 3)|var|int32
var_1039 = relay.var("var_1039", dtype = "int32", shape = (2, 3))#candidate|1039|(2, 3)|var|int32
bop_1040 = relay.right_shift(var_1038.astype('int32'), relay.reshape(var_1039.astype('int32'), relay.shape_of(var_1038))) # shape=(2, 3)
func_101_call = mod.get_global_var('func_101')
func_105_call = mutated_mod.get_global_var('func_105')
const_1046 = relay.const([-8.367073,8.668520,3.179977,-1.801960,-1.792239,-7.956813,-8.613435,-0.322891,-1.579090,8.621294,6.937229,-7.569974,5.057018,5.770345,-8.831696,-4.610728,4.702903,9.836623,-4.970895,-2.117287,8.173821,9.509778,-4.349836,-6.694708,5.605042,7.619761,-1.295626,5.896376,5.164228,-4.727687,-8.154597,-8.001402,-1.116359,-4.278954,2.369176,-9.534570], dtype = "float64")#candidate|1046|(36,)|const|float64
call_1045 = relay.TupleGetItem(func_101_call(relay.reshape(const_1046.astype('float64'), [12, 3]), relay.reshape(const_1046.astype('float64'), [12, 3]), ), 1)
call_1047 = relay.TupleGetItem(func_105_call(relay.reshape(const_1046.astype('float64'), [12, 3]), relay.reshape(const_1046.astype('float64'), [12, 3]), ), 1)
func_907_call = mod.get_global_var('func_907')
func_910_call = mutated_mod.get_global_var('func_910')
const_1056 = relay.const([1,-8,8,-6,-1,-8,-6,-8,-10,7,1,2,9,-5,1,-8,-8,5,-8,10,2,8,1,-8,-5,4,2,9,2,-6,-5,-5,-3,-1,-3,-2,9,3,-4,-2,6,6,-3,-9,6,-10,-4,-6,-7,-7,7,5,9,-9,-1,-3,-8,6,1,-6,3,-10,1,3,4,-8,1,-9,1,5,-9,-8,-7,-8,-10,-9,-10,-1,6,1,-3,-1,2,5,7,7,8,5,-2,8,-7,6,-6,10,-8,-10,-4,7,10,-1,-2,7,6,7,-4,9,-2,1,-1,-7,-6,1,-7,-5,-2,8,-5,-4,-6,8,-8,3,1,7,5,-2,-1,10,-3,9,-9,9,-3,-4,6,10,8,-5,7,2,5,4,9,6,-7,7,-5,2,1,-8,10,2,-1,-9,-6,2,-5,7,-10,-5,-1,7,-9,5,-6,7,-1,8,-6,4,-9,5,-5,-7,-7,-6,-7,6,3,-7,4,-7,-5,-1,-3,4,1,8,-2,-3,-9,9,1,3,-7,-2,-4,-8,-7,1,1,-4,7,-10,-8,1,-3,5,-8,-9], dtype = "uint16")#candidate|1056|(210,)|const|uint16
call_1055 = func_907_call(relay.reshape(const_1056.astype('uint16'), [15, 14]))
call_1057 = func_907_call(relay.reshape(const_1056.astype('uint16'), [15, 14]))
output = relay.Tuple([bop_1040,call_1045,const_1046,call_1055,const_1056,])
output2 = relay.Tuple([bop_1040,call_1047,const_1046,call_1057,const_1056,])
func_1063 = relay.Function([var_1038,var_1039,], output)
mod['func_1063'] = func_1063
mod = relay.transform.InferType()(mod)
mutated_mod['func_1063'] = func_1063
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1063_call = mutated_mod.get_global_var('func_1063')
var_1065 = relay.var("var_1065", dtype = "int32", shape = (2, 3))#candidate|1065|(2, 3)|var|int32
var_1066 = relay.var("var_1066", dtype = "int32", shape = (2, 3))#candidate|1066|(2, 3)|var|int32
call_1064 = func_1063_call(var_1065,var_1066,)
output = call_1064
func_1067 = relay.Function([var_1065,var_1066,], output)
mutated_mod['func_1067'] = func_1067
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1069 = relay.var("var_1069", dtype = "float64", shape = (13, 9, 9))#candidate|1069|(13, 9, 9)|var|float64
uop_1070 = relay.sin(var_1069.astype('float64')) # shape=(13, 9, 9)
uop_1080 = relay.tan(uop_1070.astype('float64')) # shape=(13, 9, 9)
func_184_call = mod.get_global_var('func_184')
func_187_call = mutated_mod.get_global_var('func_187')
var_1087 = relay.var("var_1087", dtype = "float32", shape = (36, 1))#candidate|1087|(36, 1)|var|float32
call_1086 = relay.TupleGetItem(func_184_call(relay.reshape(var_1087.astype('float32'), [4, 9]), relay.reshape(var_1087.astype('float32'), [4, 9]), ), 1)
call_1088 = relay.TupleGetItem(func_187_call(relay.reshape(var_1087.astype('float32'), [4, 9]), relay.reshape(var_1087.astype('float32'), [4, 9]), ), 1)
bop_1089 = relay.right_shift(uop_1080.astype('uint8'), relay.reshape(uop_1070.astype('uint8'), relay.shape_of(uop_1080))) # shape=(13, 9, 9)
bop_1095 = relay.logical_xor(uop_1080.astype('int16'), relay.reshape(uop_1070.astype('int16'), relay.shape_of(uop_1080))) # shape=(13, 9, 9)
output = relay.Tuple([call_1086,var_1087,bop_1089,bop_1095,])
output2 = relay.Tuple([call_1088,var_1087,bop_1089,bop_1095,])
func_1098 = relay.Function([var_1069,var_1087,], output)
mod['func_1098'] = func_1098
mod = relay.transform.InferType()(mod)
var_1099 = relay.var("var_1099", dtype = "float64", shape = (13, 9, 9))#candidate|1099|(13, 9, 9)|var|float64
var_1100 = relay.var("var_1100", dtype = "float32", shape = (36, 1))#candidate|1100|(36, 1)|var|float32
output = func_1098(var_1099,var_1100,)
func_1101 = relay.Function([var_1099,var_1100,], output)
mutated_mod['func_1101'] = func_1101
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1175 = relay.var("var_1175", dtype = "int32", shape = ())#candidate|1175|()|var|int32
var_1176 = relay.var("var_1176", dtype = "int32", shape = (9, 16, 13))#candidate|1176|(9, 16, 13)|var|int32
bop_1177 = relay.multiply(var_1175.astype('int32'), var_1176.astype('int32')) # shape=(9, 16, 13)
bop_1183 = relay.not_equal(bop_1177.astype('bool'), var_1175.astype('bool')) # shape=(9, 16, 13)
bop_1198 = relay.greater_equal(bop_1177.astype('bool'), relay.reshape(bop_1183.astype('bool'), relay.shape_of(bop_1177))) # shape=(9, 16, 13)
bop_1201 = relay.subtract(bop_1198.astype('uint32'), relay.reshape(bop_1177.astype('uint32'), relay.shape_of(bop_1198))) # shape=(9, 16, 13)
output = bop_1201
output2 = bop_1201
func_1208 = relay.Function([var_1175,var_1176,], output)
mod['func_1208'] = func_1208
mod = relay.transform.InferType()(mod)
mutated_mod['func_1208'] = func_1208
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1208_call = mutated_mod.get_global_var('func_1208')
var_1210 = relay.var("var_1210", dtype = "int32", shape = ())#candidate|1210|()|var|int32
var_1211 = relay.var("var_1211", dtype = "int32", shape = (9, 16, 13))#candidate|1211|(9, 16, 13)|var|int32
call_1209 = func_1208_call(var_1210,var_1211,)
output = call_1209
func_1212 = relay.Function([var_1210,var_1211,], output)
mutated_mod['func_1212'] = func_1212
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1239 = relay.var("var_1239", dtype = "float32", shape = (12, 7))#candidate|1239|(12, 7)|var|float32
uop_1240 = relay.acos(var_1239.astype('float32')) # shape=(12, 7)
output = uop_1240
output2 = uop_1240
func_1242 = relay.Function([var_1239,], output)
mod['func_1242'] = func_1242
mod = relay.transform.InferType()(mod)
var_1243 = relay.var("var_1243", dtype = "float32", shape = (12, 7))#candidate|1243|(12, 7)|var|float32
output = func_1242(var_1243)
func_1244 = relay.Function([var_1243], output)
mutated_mod['func_1244'] = func_1244
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1289 = relay.var("var_1289", dtype = "float32", shape = (13, 2))#candidate|1289|(13, 2)|var|float32
uop_1290 = relay.tan(var_1289.astype('float32')) # shape=(13, 2)
var_1300 = relay.var("var_1300", dtype = "float32", shape = (13, 2))#candidate|1300|(13, 2)|var|float32
bop_1301 = relay.multiply(var_1289.astype('float32'), relay.reshape(var_1300.astype('float32'), relay.shape_of(var_1289))) # shape=(13, 2)
output = relay.Tuple([uop_1290,bop_1301,])
output2 = relay.Tuple([uop_1290,bop_1301,])
func_1305 = relay.Function([var_1289,var_1300,], output)
mod['func_1305'] = func_1305
mod = relay.transform.InferType()(mod)
var_1306 = relay.var("var_1306", dtype = "float32", shape = (13, 2))#candidate|1306|(13, 2)|var|float32
var_1307 = relay.var("var_1307", dtype = "float32", shape = (13, 2))#candidate|1307|(13, 2)|var|float32
output = func_1305(var_1306,var_1307,)
func_1308 = relay.Function([var_1306,var_1307,], output)
mutated_mod['func_1308'] = func_1308
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1437 = relay.var("var_1437", dtype = "float32", shape = (4, 2, 9))#candidate|1437|(4, 2, 9)|var|float32
uop_1438 = relay.atan(var_1437.astype('float32')) # shape=(4, 2, 9)
output = uop_1438
output2 = uop_1438
func_1443 = relay.Function([var_1437,], output)
mod['func_1443'] = func_1443
mod = relay.transform.InferType()(mod)
mutated_mod['func_1443'] = func_1443
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1444 = relay.var("var_1444", dtype = "float32", shape = (4, 2, 9))#candidate|1444|(4, 2, 9)|var|float32
func_1443_call = mutated_mod.get_global_var('func_1443')
call_1445 = func_1443_call(var_1444)
output = call_1445
func_1446 = relay.Function([var_1444], output)
mutated_mod['func_1446'] = func_1446
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1454 = relay.const([[[-8.530245,9.378997,-2.457673,2.168983,-2.223945,-5.711936,6.211748,-5.367912,-1.669813,-3.961483,9.761896],[-1.703808,-2.241943,9.111812,4.177486,6.471013,2.115088,0.491438,-4.775448,-2.801845,1.933628,-8.739144],[-7.272544,9.172247,-5.543049,-6.939372,8.668981,3.669109,-6.114843,0.951072,-4.405062,-5.398484,2.768513],[8.681204,-8.575354,-9.621742,-6.676213,-5.792212,7.329208,-5.404654,8.297869,-2.025816,5.254879,-0.244020],[-9.401787,5.721617,-1.700643,-1.323331,5.532807,6.259027,3.790483,8.814536,-5.537721,5.930909,5.495244],[3.871500,-2.295383,8.175809,6.935585,1.696171,1.400648,-8.215604,-8.044374,-6.009362,7.134428,6.889024],[4.463143,-6.141885,-0.076262,-0.578854,2.005243,-5.737947,5.209749,5.423724,6.136519,-6.772083,2.019790],[-9.447776,7.238332,0.327186,-0.378229,1.482696,6.754103,8.166036,7.270006,-5.859778,8.172559,-8.415082],[-6.691090,-4.153917,5.817124,3.733190,3.710696,-9.197734,-4.276718,9.861074,5.158688,-3.138962,6.964656],[-5.640525,4.164510,0.205676,-9.012236,6.809309,-8.854143,-3.152243,-2.140429,-5.677670,-8.038707,-7.896234],[2.064922,4.394037,1.013052,4.948539,-6.992428,0.350024,-2.200102,-2.099503,6.213036,-2.245177,4.825806],[9.793052,-9.453582,-5.278568,-8.915779,6.538283,-3.954627,-9.611931,-4.986692,-1.846677,-6.640080,6.392757],[6.215458,2.420808,6.854256,-9.047433,-6.689510,0.843790,6.221993,7.227916,-2.422798,1.376496,-2.296230],[-4.378992,-2.340196,0.842748,1.226998,6.725508,-3.392726,9.151472,-9.629515,7.522753,4.227363,9.858307],[-7.003649,-7.257558,3.799807,3.063061,-4.689548,0.035119,9.107934,4.298560,9.329121,0.401160,3.514128]],[[8.866182,-8.782299,-0.975450,6.672810,-4.254340,3.450853,2.156766,4.693208,-7.340754,-8.859981,-8.040298],[-0.531067,-6.015885,-8.579020,6.944032,-3.668164,-1.212880,5.651539,-5.071577,-1.927693,-4.239740,-7.753873],[9.258226,6.036742,0.589398,7.688390,0.744043,5.308307,3.225442,1.346947,9.231152,5.733241,-8.128082],[-6.126385,-7.899146,1.997516,-3.637081,-1.779461,6.367852,7.907247,7.928221,-2.847922,-5.975234,2.359974],[-2.745432,1.627977,-9.551291,0.865246,9.119925,-5.683908,-6.665099,8.695034,7.202873,-6.833270,0.016701],[0.010283,-8.242799,0.495066,8.782727,-1.229370,6.365195,9.581209,5.325024,-6.025760,-5.296625,-7.759938],[-1.361594,-0.172036,0.997498,6.125178,-8.216083,4.873465,-1.472858,-8.671567,0.659155,4.334689,-5.111267],[8.149528,5.726412,-3.320827,-2.625358,0.504112,-9.696292,-6.870094,-1.315101,-8.810718,-9.126294,-6.110935],[-2.643360,-6.759516,1.349979,-5.228097,-3.711060,9.712970,4.313834,3.504589,-2.729276,8.794082,-3.418729],[-7.171692,8.061348,-0.270497,2.700055,-8.141343,5.496261,1.358434,8.173725,-7.619390,0.468873,7.474791],[5.817608,-4.240572,3.941953,4.414891,5.980510,2.112714,-9.087858,-4.644148,-5.233972,-2.747134,7.047950],[-5.981027,2.595242,-2.275364,9.706884,-1.926631,2.445111,-6.495771,-8.637374,-7.889360,-6.935081,-3.200792],[9.743228,-2.669406,5.691416,1.295747,-7.305637,8.444159,-8.530759,8.737772,-1.218064,6.918459,-0.558496],[-2.321839,7.495672,1.836296,-1.772046,-2.504537,-1.024171,1.474809,4.059585,0.415344,1.660255,-6.467764],[-7.303465,5.258194,8.893878,-5.458648,-6.117192,-8.876206,-2.701700,8.385302,6.711251,-8.169106,-3.652017]],[[3.873143,4.540903,-5.849796,-6.752681,-5.554108,-3.427835,4.944331,-6.562970,7.831468,-3.897301,-0.633749],[1.554824,-9.957097,-8.266733,5.955448,-8.451295,-9.243656,1.481890,-3.384862,1.888810,-9.869115,-5.560435],[2.680403,-2.656405,-8.833307,-8.251587,8.054280,-7.603094,-8.590978,-0.843196,-4.905950,1.835011,-6.072283],[5.379817,-2.852840,-8.428636,-7.816864,-4.686996,0.610677,-4.899611,2.614628,6.223618,0.832074,-1.850902],[-6.118944,4.735592,-9.924925,3.118045,5.970059,3.912718,-6.042387,-8.948710,4.483139,-4.604061,3.604639],[-3.542822,-2.500001,3.646855,4.935428,6.294219,5.945005,-4.454095,8.591547,-8.462854,-4.762569,-4.579796],[6.653211,9.713971,6.176350,-9.301412,1.376598,-7.690328,-2.638694,8.131903,4.475870,0.189205,8.560638],[-1.596162,1.533066,0.684165,0.536672,-8.945457,-1.622977,7.269854,-1.816556,2.920108,-8.864107,1.589096],[8.016956,-5.098450,9.236218,3.435784,-3.394546,-1.016326,9.797390,6.204336,0.443570,3.891202,-6.719988],[-1.265248,-6.148162,-5.572734,0.749859,5.356636,-2.639368,9.598359,9.502438,-4.437139,4.290265,-8.581351],[-9.226422,3.036282,1.249319,1.306502,1.257847,-1.829523,6.506362,-9.336211,-1.491037,-1.351240,5.896399],[4.302142,-0.208775,-0.598360,-7.986148,-9.297906,1.053840,-9.343164,9.103140,-6.855182,5.305540,-9.086026],[8.773039,7.362429,1.566759,-5.879332,-3.112562,1.288291,8.448739,-5.082806,-2.649309,-7.150492,-8.510736],[4.582978,-8.605942,-1.555190,-1.904416,0.925048,2.102809,-0.416945,-9.528567,7.576760,-1.661137,0.842636],[1.736503,2.649688,1.125358,2.345451,-9.595084,5.392423,-7.147623,2.729593,-9.767864,-2.539776,4.485892]],[[-1.936867,2.398337,-8.545704,5.744546,8.004036,6.818059,-4.508380,-4.314164,-6.143764,-5.362438,8.160731],[6.121571,-5.426748,0.580519,1.238249,7.094187,-4.646436,-8.801357,-4.431369,7.179098,-6.982084,-7.013738],[9.606226,-9.707613,4.020576,6.853377,5.216470,4.705423,-0.595500,-3.465062,-8.418187,-8.264317,-3.923290],[6.058847,-8.868242,-7.505274,-9.377537,7.184231,8.777546,1.536237,8.671588,8.147982,-9.321539,-6.261280],[-4.682231,-3.111002,-7.158095,0.708425,1.877977,7.752109,5.386474,-0.660212,-2.514670,8.396807,3.705670],[-9.544673,9.317190,3.782080,5.468569,5.390618,-7.375934,-8.375453,-3.147636,7.830984,-0.141385,1.143574],[-8.733013,8.631653,3.082994,-1.618608,-7.454523,9.382689,4.432911,1.542084,-8.610357,-4.272956,-9.471081],[1.455252,-7.863506,8.822147,2.264367,5.850552,-5.920773,-8.942248,9.227381,9.753067,-9.203359,-6.339337],[2.106390,-7.783417,-0.101572,0.621240,4.401261,4.939802,2.527824,-6.991112,5.345188,3.207514,4.459059],[2.904372,-5.520246,-8.947338,-7.279724,-2.381738,-4.341602,9.074769,8.092929,8.077013,-2.324396,6.000344],[3.705114,-8.391206,9.353951,2.608084,-4.541518,1.510761,6.103132,6.950756,-9.678451,3.678715,-0.386438],[5.945837,7.188137,-7.962827,8.406694,-8.875930,1.189791,7.712035,-9.060198,4.584835,-9.021154,7.534766],[-8.803722,2.619828,6.884006,9.369636,4.312681,2.158003,-6.618270,-3.257052,1.202832,-0.926709,-1.141546],[8.946381,-7.017167,2.081152,-4.544401,-2.979377,3.933456,2.983033,2.261570,-3.144518,-2.049738,2.674212],[6.062171,-4.559789,-3.406373,4.296859,1.267485,1.955140,-0.689246,-5.606236,-2.819203,5.917459,-4.353220]],[[-8.483765,-7.656008,-9.856182,-4.398676,1.564907,-9.383089,6.050755,-1.153914,7.753575,9.776711,-9.890943],[4.385420,-2.728895,3.068635,2.378062,0.134442,9.819398,-9.019743,-6.491819,-9.365178,-2.060982,0.734305],[8.876760,-6.999100,6.278863,-3.368123,3.608576,-1.982865,7.440372,-5.959762,4.436966,-5.970505,4.130099],[8.367520,4.785258,1.219287,-6.440121,4.465690,-0.728191,-0.174646,-9.171505,1.614661,-8.196719,4.086720],[-8.423374,-8.814781,6.122650,-2.899813,5.370831,-9.799843,8.812941,-7.364267,0.124209,-5.136797,6.980462],[0.310220,2.371740,-0.985559,1.266353,0.320581,0.103899,5.544864,-9.902488,5.966006,6.577177,-5.310979],[6.944670,-0.778828,9.207218,-3.440247,4.154970,-3.011379,5.539060,-9.691042,-4.646860,-5.404085,0.144972],[3.905164,9.902256,5.199344,-4.126707,-6.992299,-4.101332,-3.265026,0.761102,9.682511,1.145028,4.581693],[-3.846257,3.738637,9.704222,-3.443650,9.138784,-4.609563,-4.747976,-9.706992,2.676145,-4.228323,1.214483],[8.270443,3.322579,-6.897475,-9.815559,5.757059,2.084916,-7.541970,-5.889945,-3.216438,-5.725294,5.587304],[-7.805969,6.743716,-1.299448,-9.955313,3.892635,-7.367351,-0.010137,0.686060,-7.893022,4.406501,8.416613],[-6.289908,-5.821890,6.752689,4.586958,1.448479,-0.455443,6.798119,-5.430096,4.423138,-6.256435,-5.437588],[-7.853406,8.684412,4.252251,-0.913171,-9.748349,-8.701329,4.761325,5.683400,-5.501209,6.292532,-7.943753],[3.149935,-3.302818,-6.704376,-7.732364,7.817991,-1.105626,6.935388,3.774934,-2.156996,-7.767586,-7.991320],[-7.260071,-4.781198,-0.227166,-8.422759,8.230865,5.285046,-4.204485,-8.389043,-1.581290,9.685278,-8.553564]],[[-8.172359,-6.399311,-8.293127,-2.907273,2.569410,-2.878945,2.516559,9.876122,6.921805,-1.273697,-2.160335],[-4.829362,5.395938,-5.210109,9.691108,-4.968516,-7.889654,-4.574895,3.684756,2.091278,-2.060596,7.761577],[-2.506216,2.654871,6.388259,-9.897811,-5.246870,-8.062674,2.893986,-3.829517,4.932843,6.135475,6.129267],[-9.587634,-7.085693,5.283338,-5.870509,-4.168827,9.898856,-3.491371,0.049561,-9.885001,-5.380831,-5.284971],[3.119024,-1.077851,8.043156,-2.265280,-8.570007,7.020564,-8.158222,7.792579,2.835469,7.016270,0.231586],[9.709617,-7.130374,-6.963222,-3.222624,4.290181,2.515369,3.412881,0.928746,0.487481,-3.553024,-5.737594],[-3.380062,7.652959,6.718565,-5.813072,9.966989,-3.678788,-0.690490,-6.181544,1.826740,-1.978939,5.515449],[0.356752,-2.998419,-1.002915,5.476577,9.531064,-3.909009,-9.975132,-1.008844,-3.760274,-3.615975,9.546367],[4.283604,-2.106264,8.939126,2.980669,-5.289751,6.082003,-1.977897,6.412665,-7.642108,0.995117,-7.602684],[5.557607,-8.697786,-5.287658,-0.343013,8.828841,2.927596,-0.457639,0.957884,0.956968,-9.782256,-3.641394],[6.736943,-2.111718,-8.846161,-1.506261,4.112234,1.700718,-0.545362,2.881859,-6.739698,-2.430984,-0.464558],[-9.289648,7.331222,1.064986,7.809536,-2.961271,2.844079,-0.110709,-9.216337,-4.789111,-1.666201,7.574391],[3.626862,2.803952,-8.649706,8.502697,-9.725189,-5.509186,-5.590922,9.163096,1.548353,-5.216461,1.279023],[-3.212097,0.888097,8.533251,1.227285,-6.306580,5.803451,-7.964921,-0.506997,-3.303572,7.478349,-6.097260],[-3.164531,3.687715,9.509448,8.333629,4.201860,-5.615471,-3.483794,-9.667015,-8.721765,0.421520,6.617034]],[[1.065861,4.356905,-1.571309,-6.921813,-3.788635,4.211254,-5.801736,9.083759,8.687799,-3.309750,-1.588286],[0.727456,-9.776208,3.473728,-1.448099,9.549785,-3.550302,6.293549,1.626197,6.330597,2.266502,-3.474577],[8.475161,9.954247,-6.822773,-7.814719,-8.056681,0.263988,-3.603765,-1.224047,6.693406,-7.157611,8.691447],[2.348738,-5.129244,-3.511497,7.381440,7.561913,1.252496,1.292737,-7.863454,-9.700634,0.227888,5.370399],[-7.848487,-6.960438,4.116336,-5.591570,6.660616,-1.574708,-3.636236,8.036734,3.921788,5.050369,5.917989],[-8.297624,-7.577731,-8.669181,-6.624580,5.254658,-7.952646,4.361803,2.094368,-0.691838,0.942474,-2.204401],[0.537160,8.306229,-3.094225,4.905216,4.116253,-9.376669,-7.346452,8.989551,-7.889628,-3.431223,7.869222],[4.506125,6.136151,5.911347,-1.622530,-0.004803,7.983047,-7.848182,-5.289859,9.668720,4.914480,-9.043352],[-7.548095,-8.419793,-0.010131,2.967982,-9.209793,-4.331184,-3.493149,-2.917068,7.517972,7.406986,-4.683953],[1.401565,3.734161,-4.217620,-7.486835,6.695734,0.859688,1.471985,-5.279166,5.696302,1.179032,-2.535772],[0.996051,-4.155809,0.946864,7.782449,0.735040,7.370101,9.299329,8.937458,-1.643545,-4.900746,8.996819],[5.341566,5.344265,-6.438546,4.421556,-2.046022,-5.514929,0.150115,-1.057343,0.757400,0.371310,6.733125],[3.015488,-0.571329,0.279254,0.115002,0.478320,-0.455983,0.224348,2.346585,0.335729,9.150056,2.643950],[0.191429,9.967918,9.235226,0.161872,9.552118,-8.649505,-3.346410,-0.095754,-5.567697,9.035196,-3.561556],[5.805461,0.988750,-6.349677,-6.335776,1.816466,7.525558,2.732707,-1.313689,4.295106,1.296534,1.804487]],[[6.170968,6.236517,2.762186,-9.260805,1.128927,-9.388304,-5.695756,4.589734,-6.878411,3.849785,6.111627],[-2.996985,0.233912,5.812000,4.850202,5.963911,-0.462028,-5.997512,4.493120,-0.618955,1.215337,4.085023],[2.935520,-5.686622,7.008078,6.504239,-4.021752,-6.744800,-9.017416,-9.862739,1.239407,-3.731489,-3.755761],[7.845571,-0.145408,-9.715786,-6.043652,3.180682,-5.003667,3.627954,7.729826,-2.120445,8.219264,-1.527822],[-8.222865,0.108723,-4.310134,-0.975831,1.377422,-1.616832,6.248418,8.086611,-9.516079,9.286485,-9.007245],[-3.017485,0.420627,-3.270691,-4.638526,-1.020522,4.198956,-9.719925,-4.810272,2.744372,-0.088430,0.353629],[-3.250727,-0.041126,0.734437,-8.641323,-4.366263,-0.064331,3.407802,-0.392465,1.080554,8.958210,4.992539],[-3.917124,-1.166042,2.900132,8.807617,-1.264469,1.851653,-7.025178,-6.359357,-0.194598,5.185372,-2.798969],[1.588333,-0.073755,-7.449616,-5.399189,9.058379,2.737092,-2.727568,8.365689,4.914088,4.131867,-9.880802],[4.636672,-0.493371,0.385129,-0.672473,9.813507,2.556019,-4.852862,8.624452,1.918307,0.853600,-4.144366],[9.695148,1.038204,7.377652,7.081993,-3.666312,-9.594456,-9.737347,5.501570,3.021220,9.143018,-8.803903],[-7.769850,-0.652587,1.766382,-2.923056,3.080102,1.715489,-8.852478,4.453136,-0.715661,3.518418,8.528387],[-3.970646,-6.643703,9.077623,-0.001413,-5.807398,3.586353,-5.070039,-7.446519,-4.609011,-0.129774,0.397494],[-8.556767,-1.779276,-7.271089,1.822323,-7.563696,-9.690095,6.861710,-9.886276,-4.718222,5.889564,1.046837],[-8.736977,-9.425309,2.324478,-1.204374,-9.929817,7.387313,6.891915,-3.137771,6.956094,-4.617242,0.708991]],[[0.880530,-6.027631,-0.906910,0.819167,0.900687,-6.019243,-1.533905,0.378829,-3.275121,3.848899,-6.496751],[4.183754,6.112383,6.077104,0.257312,-3.563538,-4.563073,-9.379299,-7.609752,-0.187015,1.844228,7.790251],[-4.329832,-9.796011,-8.096066,9.099728,-3.404052,9.290006,1.832526,3.340814,-1.596562,-4.400912,-0.650119],[0.651324,-9.369211,9.844707,-3.908780,-1.558847,8.406724,9.658350,-1.475364,-2.700869,-2.859671,1.223321],[3.963193,-1.317043,-1.866976,-3.596864,7.517515,0.945909,-7.123016,0.049648,4.024516,5.765645,-3.625308],[7.619458,3.390926,3.317292,9.255200,-2.823228,1.508054,-1.726890,7.553069,8.647537,8.460344,-9.286580],[5.424661,-2.307805,8.389861,6.726627,3.317324,3.461793,-4.293850,-4.959134,4.139044,-5.576109,8.687578],[-9.957508,-3.332129,0.631747,-0.108387,6.413591,5.538194,-7.663273,9.097559,-4.161250,-7.375338,-3.843647],[-1.034560,2.105229,9.324466,-1.185902,-1.668876,3.348836,-3.372145,-6.975131,-3.929771,-2.730734,-8.212352],[0.448907,-6.359566,-9.732388,6.156794,-9.233288,5.744726,1.166211,4.183960,5.472235,-1.550496,-1.370594],[8.145409,1.644376,-1.308631,3.477234,-2.778751,7.267826,-5.212231,-1.573357,-0.399201,0.078745,-1.900421],[-0.027915,-1.155028,7.452386,-3.741579,-7.781920,3.798339,4.513565,2.677258,-0.813634,7.154347,8.590927],[5.156741,8.032535,-3.977385,5.914127,4.528062,-8.374596,8.769539,-7.749420,-9.824897,9.636134,-8.708689],[4.940770,4.962359,-8.783607,4.513803,-9.142107,4.939967,-5.636948,-1.268373,-6.843278,2.736110,8.344196],[-8.573327,-2.784986,-1.244936,-3.883487,1.251631,8.713663,4.618060,5.660982,4.981687,4.148920,-3.721392]],[[-3.825025,8.040938,-7.718091,8.233836,9.759089,-4.310618,-7.230994,8.170880,4.525278,6.230688,6.939925],[-8.849576,5.920584,-9.859525,-0.592953,1.839107,4.385757,3.518745,6.556128,-2.059069,8.938829,1.835155],[9.892315,-7.093005,0.273367,5.438020,9.814629,8.133558,8.439949,0.222022,-5.699565,-8.690752,-6.183673],[-2.199945,9.444668,-2.174586,9.073808,-1.083851,2.448370,1.011762,-4.682309,3.747032,3.469692,7.932488],[2.859188,-9.646785,9.588882,0.276605,1.588465,3.495705,-2.355949,2.469327,7.307751,4.065224,-2.246545],[6.052502,7.012604,-9.468676,-8.515076,-8.267271,9.798916,0.765105,5.209404,-9.132767,-1.321151,4.731366],[8.228413,-0.023841,5.610603,7.273643,9.566011,-4.998076,-0.399824,1.741019,-5.223824,-5.689355,-9.605503],[-8.181149,-7.919093,-2.099403,6.987770,-6.919396,-5.580647,2.883737,-1.997333,-1.524539,-5.693330,-9.529615],[9.768530,7.007068,0.550878,6.104759,8.096112,-9.016290,-2.410091,1.388392,-3.434448,6.539466,-9.931070],[-1.020960,2.095846,-0.476394,-2.198319,-1.802211,-4.572618,1.929318,8.993594,-8.861874,8.180194,4.005047],[8.033156,3.457538,-1.619819,5.503836,7.635695,3.058579,-7.203130,-9.475283,-0.095176,-3.097556,-5.786003],[9.894512,9.584739,1.520693,-3.701158,-8.588790,0.608577,4.027625,-4.018663,-4.044478,0.170335,4.536188],[-5.949299,-7.392911,-2.679947,7.951192,-2.131522,7.808993,-5.901348,-1.683780,5.803889,3.582741,-0.989270],[-3.761026,2.621479,5.863376,-2.923894,-0.575488,-9.412555,6.621412,8.313405,-8.358640,2.951527,9.152693],[-3.818911,-8.922786,2.532109,-7.665194,3.828451,-4.401677,4.021369,7.626569,-4.376211,-7.679513,-3.406370]]], dtype = "float32")#candidate|1454|(10, 15, 11)|const|float32
uop_1455 = relay.asinh(const_1454.astype('float32')) # shape=(10, 15, 11)
func_434_call = mod.get_global_var('func_434')
func_437_call = mutated_mod.get_global_var('func_437')
var_1460 = relay.var("var_1460", dtype = "float32", shape = (550,))#candidate|1460|(550,)|var|float32
call_1459 = relay.TupleGetItem(func_434_call(relay.reshape(var_1460.astype('float32'), [11, 5, 10]), relay.reshape(var_1460.astype('float32'), [11, 5, 10]), ), 0)
call_1461 = relay.TupleGetItem(func_437_call(relay.reshape(var_1460.astype('float32'), [11, 5, 10]), relay.reshape(var_1460.astype('float32'), [11, 5, 10]), ), 0)
output = relay.Tuple([uop_1455,call_1459,var_1460,])
output2 = relay.Tuple([uop_1455,call_1461,var_1460,])
func_1464 = relay.Function([var_1460,], output)
mod['func_1464'] = func_1464
mod = relay.transform.InferType()(mod)
mutated_mod['func_1464'] = func_1464
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1465 = relay.var("var_1465", dtype = "float32", shape = (550,))#candidate|1465|(550,)|var|float32
func_1464_call = mutated_mod.get_global_var('func_1464')
call_1466 = func_1464_call(var_1465)
output = call_1466
func_1467 = relay.Function([var_1465], output)
mutated_mod['func_1467'] = func_1467
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1491 = relay.var("var_1491", dtype = "float64", shape = ())#candidate|1491|()|var|float64
var_1492 = relay.var("var_1492", dtype = "float64", shape = (7, 14, 10))#candidate|1492|(7, 14, 10)|var|float64
bop_1493 = relay.divide(var_1491.astype('float64'), var_1492.astype('float64')) # shape=(7, 14, 10)
uop_1497 = relay.rsqrt(bop_1493.astype('float32')) # shape=(7, 14, 10)
func_184_call = mod.get_global_var('func_184')
func_187_call = mutated_mod.get_global_var('func_187')
const_1509 = relay.const([0.946558,-0.445593,2.479950,2.986132,3.117044,-6.178267,6.328537,0.984888,-6.479542,-4.398109,1.199216,6.066290,5.786552,-0.226722,0.676038,-5.170565,-3.287326,7.946221,-1.368398,-6.937074,-4.536076,3.737097,-8.412561,-2.026446,6.370243,3.484983,8.594373,-6.490374,-0.762173,7.046250,-4.588026,-0.926878,5.276119,-1.856204,1.111261,6.399466], dtype = "float32")#candidate|1509|(36,)|const|float32
call_1508 = relay.TupleGetItem(func_184_call(relay.reshape(const_1509.astype('float32'), [4, 9]), relay.reshape(const_1509.astype('float32'), [4, 9]), ), 1)
call_1510 = relay.TupleGetItem(func_187_call(relay.reshape(const_1509.astype('float32'), [4, 9]), relay.reshape(const_1509.astype('float32'), [4, 9]), ), 1)
const_1511 = relay.const([[[3.714689,-9.477869,5.088172,-9.430950,-0.054579,3.295925,1.515834,1.248629,0.139800,8.333513],[-7.445275,-7.834200,2.379066,-3.013185,4.085303,7.029791,-7.274213,5.684719,-0.908455,2.493831],[7.072455,6.187308,2.022993,8.893147,-0.031144,-6.336630,1.310003,0.171430,3.507917,4.065383],[6.779852,0.186294,1.755563,-5.517786,-4.743248,-4.561399,-6.426509,-7.309794,-9.768121,-7.185714],[3.349637,-6.290672,-6.362250,8.514871,6.515919,-3.001994,2.971385,-1.501137,-2.080564,-6.110585],[7.843734,2.865655,6.966920,1.611370,6.803693,-5.579196,-0.798790,-2.114687,-7.308658,5.874659],[-5.608709,3.875137,6.730494,-9.408499,-5.472158,8.301801,5.327880,1.134803,-4.933631,2.672141],[4.206084,-3.574806,-5.656149,-4.644550,4.850700,-4.108090,8.929584,7.718032,-8.048825,-8.353466],[8.899163,-4.505299,-0.860095,5.574439,-5.585435,5.954690,-2.675669,-5.113112,-2.762668,-7.736506],[-7.587860,7.592741,-8.441458,-7.226411,6.215326,6.354136,-0.658740,8.918935,9.667844,-5.954160],[3.603934,2.134388,4.127058,-0.141216,-0.146284,8.676190,-8.816466,-2.597298,-2.230648,7.802205],[-3.001278,-1.393809,-8.885905,2.703927,-6.304655,2.216559,3.966239,6.005523,-1.367107,-8.239983],[-7.386244,4.495211,0.376029,3.119869,2.661881,9.997742,8.927084,-1.109781,3.378052,-2.897197],[5.669862,-2.342234,-0.897499,-6.092388,8.519440,-6.770324,-8.613255,-9.609484,2.322662,8.949870]],[[-4.443151,-9.388557,-2.362737,5.864457,1.411777,7.633224,-8.021650,4.815204,-8.100369,8.251314],[9.229088,9.782172,-6.521969,5.536987,-6.364625,-5.723107,1.853787,-0.872409,5.572880,9.044314],[8.231717,-0.609006,-5.347506,0.005113,2.765748,6.585770,-3.889758,-6.788406,-0.029776,-4.212480],[4.955957,-3.787320,-8.413331,-8.789629,-0.227356,-4.159303,7.422001,0.165519,-7.008204,-3.352749],[-5.011894,-0.038195,-0.850597,1.029154,-2.584259,3.406836,-7.862034,-1.223380,5.274495,-0.950320],[8.962855,3.297474,3.921100,-1.256378,5.179838,7.433537,-6.155036,-0.743412,2.731290,-5.468124],[-4.480260,5.983392,8.736831,5.036708,-7.692540,-1.477423,-2.155755,-9.619255,3.323574,2.295991],[9.912084,-3.033743,0.941175,2.310391,-2.654709,-5.805468,4.139256,8.118444,-0.014697,1.885704],[-5.312739,-4.595277,-1.118319,1.466025,5.546048,-1.208579,1.380210,1.551801,-2.511521,0.306908],[-0.533065,3.550089,3.671076,-5.402545,6.939780,0.565605,3.720277,-5.175959,-7.478075,3.970220],[-0.646704,8.236389,-2.917024,-4.541502,7.575392,4.374243,-3.005768,5.813136,6.648665,0.952405],[-9.040834,2.932931,-0.735169,0.729368,0.437400,-2.188883,-8.543472,5.213657,-0.972609,0.706222],[-6.156310,0.296051,2.280053,-3.080789,-4.421773,4.743396,-7.272321,7.977563,-4.036191,-6.008451],[5.296349,-1.029346,-4.027923,9.072340,7.262921,-1.271030,7.199747,-8.535481,-6.799981,-7.788981]],[[-1.582876,7.750888,-4.694684,2.593255,4.404310,-7.519468,8.111522,8.516680,-1.814538,-7.646776],[3.627236,6.303740,8.590242,-1.296312,4.598682,-9.794176,-8.327075,-3.052611,-5.617435,-3.436714],[7.227213,5.807380,4.833774,-7.633517,0.200510,0.415646,6.193675,7.998618,8.757232,9.890484],[-3.790863,-7.521744,2.586327,4.662496,9.038671,-7.476340,-4.881117,4.989376,-6.077765,-7.405529],[-1.881177,-8.300670,-9.935954,-9.147190,3.108042,-9.037802,-1.933053,5.835243,-4.151288,1.001099],[-9.827349,-1.255904,0.236810,-5.228577,-6.323468,0.569444,-6.544528,-2.889768,-7.740178,-0.067529],[-8.707069,1.904729,-6.562255,2.489306,-7.101118,-0.708525,-5.723744,5.331845,-8.599323,6.974736],[-8.950074,9.807980,-5.886072,-1.200295,3.465545,9.208052,2.534529,-7.147484,5.860981,-2.193416],[-7.399356,-6.136160,-4.751533,7.614797,8.402643,1.993639,1.343171,-0.991219,-5.620929,-6.328781],[-6.334099,-4.787609,1.507128,2.627256,-2.059962,-1.693868,-9.518911,4.035001,-1.443788,5.061826],[9.187615,-3.450381,5.103134,-7.189272,1.223846,2.250597,-6.586185,9.193951,-7.838968,-4.007196],[9.616684,-7.654072,7.348894,-6.037731,-8.227711,9.131025,-0.592324,-7.664579,6.007779,9.826489],[-9.537359,-4.747059,-7.854223,-1.441314,-1.356494,2.014864,9.678673,9.602187,8.441576,-7.776209],[8.438868,9.912491,3.409157,3.289444,2.762326,8.378021,-4.895319,-9.867302,-7.766463,4.500846]],[[-7.101611,-2.475697,-3.109250,-3.938785,6.303808,5.154072,7.430501,-5.882461,4.221149,0.642343],[-3.523942,-6.531144,-0.551822,-6.613661,6.916307,6.620656,-9.674338,0.937828,9.288152,4.673022],[-2.929988,1.632652,9.153853,3.001438,1.881943,5.017423,2.987108,-7.253480,2.194517,-5.571176],[7.724642,-1.602463,6.248142,-7.665053,6.111555,1.082246,1.714050,0.468550,-8.354968,1.372293],[5.464791,-3.073076,-3.886555,-5.751919,2.844336,-7.467111,-5.190943,-5.484043,-7.026628,-2.474774],[-9.183522,9.416534,-1.625903,9.684851,1.420432,1.545879,3.077616,-3.907812,-9.031213,8.925622],[3.363358,-6.639414,-2.407800,-3.381837,-0.413751,3.094734,-3.840733,-2.246704,4.296151,-4.826464],[-9.386766,-8.578163,8.403337,9.555518,6.789073,4.722570,-4.836084,8.722791,-7.252490,3.634042],[-1.822584,-0.647252,8.433259,-7.216557,-4.659411,-1.665361,-5.294291,-0.452005,1.346032,0.672823],[5.996588,9.077512,9.813116,-0.177640,-2.148323,-0.595866,-8.765696,-7.030507,6.333157,9.297463],[5.111429,-7.688431,-5.421875,9.441836,-0.760352,-8.359699,5.046516,8.232720,-1.050282,-8.945865],[8.808166,-9.524031,0.397926,9.213841,0.451215,-8.300354,-1.637647,-1.893469,-7.910457,-5.552739],[-6.601884,-1.476263,8.633368,-1.803677,7.113729,-4.286112,2.638809,7.636715,4.875507,7.111216],[7.208942,0.234001,-4.564536,-7.191931,1.038678,8.194921,6.184684,1.622299,2.597356,6.508826]],[[0.508687,8.948846,-1.356470,7.805598,-8.267019,-6.827517,2.148496,9.383100,4.516027,-0.320242],[1.372351,-5.352736,7.759487,9.506238,-7.056068,2.344942,-6.287218,-4.292554,7.749514,8.210955],[9.239737,4.578893,0.432664,-8.276282,-2.078831,-9.179143,2.760624,0.716654,-3.627436,6.848865],[3.295782,-9.399168,-8.889905,-1.565928,3.254271,7.940789,2.233609,7.065633,4.293227,1.889952],[-1.325947,2.074696,-8.732659,-1.699056,3.082073,9.694885,-6.662825,2.767552,2.079474,6.082898],[8.435980,8.331617,9.368921,0.898344,-9.762055,0.486263,-7.436225,-5.938369,0.150018,-2.018270],[1.431585,2.644226,7.231152,-6.154870,-7.593767,7.062940,-6.050742,-3.751179,3.999987,-4.597693],[-1.290230,-0.586626,7.630689,3.011202,9.190125,0.902795,-9.715809,5.696399,9.873352,-1.768873],[9.104157,7.691796,-3.019984,9.229052,-4.518599,1.542204,3.658571,7.724969,1.536892,0.937910],[-0.889114,7.002443,9.887225,8.858297,-8.163089,-7.899707,9.391443,2.801198,3.875594,-6.551943],[-4.684323,-7.602884,6.668001,-2.496566,9.414627,-0.859343,5.673922,-7.681227,-0.214063,2.669748],[4.204698,-4.847407,-1.429578,-2.096258,-8.048241,7.617832,-3.059742,9.066436,7.688888,-9.312020],[2.330671,5.819996,-9.610819,-2.132912,6.500470,9.169210,7.966976,8.013084,8.591492,-9.928680],[-2.063872,1.116439,2.072014,0.552814,-9.379217,3.900985,-1.251486,-2.557183,-9.060621,2.539117]],[[0.312660,-7.456685,-4.290071,-3.491765,1.034817,5.201958,-6.383489,4.281384,4.877555,-8.608635],[-3.946370,-4.053021,-5.424730,-6.090874,6.745601,-3.325683,-3.053596,3.373727,5.115745,6.161760],[-9.529551,-7.946191,1.307479,2.907435,-9.286188,-7.680815,6.485743,0.760868,-6.114485,3.983799],[1.835695,-6.120552,-8.860329,-4.650941,7.063884,7.362864,9.472777,-4.206532,7.094959,0.600234],[0.823034,-4.251195,-6.569170,0.864403,7.121021,-9.008051,-4.524180,8.653839,1.329308,-0.575175],[3.589217,-3.069089,-8.548641,6.665207,-1.172109,2.742392,-8.523443,1.391324,-1.550841,7.554742],[0.725101,-6.766591,-2.737415,-3.296797,-4.695661,-6.888444,-9.034660,-1.546909,9.254905,-1.307292],[-0.087246,-9.407424,-3.186931,-7.344168,-6.476948,-2.645463,1.891524,4.342161,-8.531694,1.423680],[1.540287,-8.747777,0.546269,-0.785754,-7.511886,-9.767678,-8.704823,-6.940758,-5.681441,7.318548],[-2.705687,-0.139128,4.112245,-8.105866,-0.931784,-3.268610,9.095111,0.088135,6.595072,-6.304371],[9.094230,-1.216971,0.242871,-8.358083,7.338280,-6.401468,6.513352,-2.129610,-1.983909,4.643708],[-2.494348,-3.309055,-5.739852,-2.443186,6.252097,-7.127475,-2.084291,0.573652,6.126284,2.471522],[7.510402,-5.356046,9.003562,6.513215,9.482594,-8.858049,-5.032195,-0.786835,-3.951739,-4.405314],[8.756592,-6.292063,-8.162556,9.143639,1.689078,-8.898417,-7.663617,-3.495621,1.787436,5.511382]],[[-1.371271,4.566950,9.578532,3.795944,-5.567217,5.927506,-5.323696,4.644934,5.703470,-3.244906],[-0.261066,-7.920421,-1.244312,-6.695670,-1.654522,-4.747585,9.833162,-1.542732,7.615688,-3.256206],[1.747105,0.226292,-7.019939,-5.174133,6.437498,-5.502572,-0.970062,-8.533052,4.714081,-2.541670],[9.754576,-4.167279,-4.482379,6.630865,5.519656,-3.938941,1.348049,-5.053407,-0.239611,-4.192070],[-3.300330,5.095920,9.935046,6.402620,-9.065821,-0.893436,-0.659419,-5.752098,9.352095,4.291524],[-1.333629,-8.877381,4.375183,8.066232,4.212134,-4.599441,-0.737521,-0.052594,5.621427,3.877211],[-6.827952,8.033989,-4.820773,5.770345,6.066575,-7.970957,-5.319870,-4.669740,-5.396688,-1.345356],[1.096418,7.389048,-6.625742,3.935576,6.993663,-3.471207,-6.569843,-7.874061,7.732646,9.149873],[-7.265727,-8.032552,-8.816736,4.491958,-3.701813,-8.241100,-7.726926,-4.732370,-1.658149,-2.987165],[-2.699615,6.396719,1.590589,7.493276,1.275490,7.745339,2.427567,2.872518,-0.990851,-9.332111],[-9.891896,-0.778450,-5.171041,5.614641,-6.048108,-7.998403,-2.400440,-0.387574,4.638808,7.466504],[-3.536194,5.130435,-6.786373,4.745111,3.237742,-4.552807,-6.619723,-3.219729,5.139980,0.723731],[2.054478,-7.140329,8.197230,7.364650,-7.792558,-8.940582,-2.797003,-8.549859,-6.092439,0.707598],[1.958306,9.630008,5.448342,-1.575821,8.404734,-8.766278,5.948057,3.379645,6.228826,-3.434946]]], dtype = "float64")#candidate|1511|(7, 14, 10)|const|float64
bop_1512 = relay.add(var_1492.astype('uint32'), relay.reshape(const_1511.astype('uint32'), relay.shape_of(var_1492))) # shape=(7, 14, 10)
func_1305_call = mod.get_global_var('func_1305')
func_1308_call = mutated_mod.get_global_var('func_1308')
const_1517 = relay.const([[-9.229836,5.249003],[-3.805087,-5.863693],[-2.730185,6.218099],[0.423651,9.316575],[0.241474,-7.056852],[3.918891,3.620273],[6.694870,7.383939],[8.523092,-4.764034],[8.449077,9.873170],[2.414943,8.636350],[2.091951,-0.593243],[9.079287,-7.608525],[7.892488,6.004180]], dtype = "float32")#candidate|1517|(13, 2)|const|float32
call_1516 = relay.TupleGetItem(func_1305_call(relay.reshape(const_1517.astype('float32'), [13, 2]), relay.reshape(const_1517.astype('float32'), [13, 2]), ), 0)
call_1518 = relay.TupleGetItem(func_1308_call(relay.reshape(const_1517.astype('float32'), [13, 2]), relay.reshape(const_1517.astype('float32'), [13, 2]), ), 0)
bop_1519 = relay.greater_equal(uop_1497.astype('bool'), relay.reshape(bop_1493.astype('bool'), relay.shape_of(uop_1497))) # shape=(7, 14, 10)
bop_1526 = relay.floor_mod(uop_1497.astype('float32'), relay.reshape(bop_1519.astype('float32'), relay.shape_of(uop_1497))) # shape=(7, 14, 10)
func_184_call = mod.get_global_var('func_184')
func_187_call = mutated_mod.get_global_var('func_187')
call_1529 = relay.TupleGetItem(func_184_call(relay.reshape(call_1508.astype('float32'), [4, 9]), relay.reshape(call_1508.astype('float32'), [4, 9]), ), 0)
call_1530 = relay.TupleGetItem(func_187_call(relay.reshape(call_1508.astype('float32'), [4, 9]), relay.reshape(call_1508.astype('float32'), [4, 9]), ), 0)
output = relay.Tuple([call_1508,const_1509,bop_1512,call_1516,const_1517,bop_1526,call_1529,])
output2 = relay.Tuple([call_1510,const_1509,bop_1512,call_1518,const_1517,bop_1526,call_1530,])
func_1532 = relay.Function([var_1491,var_1492,], output)
mod['func_1532'] = func_1532
mod = relay.transform.InferType()(mod)
var_1533 = relay.var("var_1533", dtype = "float64", shape = ())#candidate|1533|()|var|float64
var_1534 = relay.var("var_1534", dtype = "float64", shape = (7, 14, 10))#candidate|1534|(7, 14, 10)|var|float64
output = func_1532(var_1533,var_1534,)
func_1535 = relay.Function([var_1533,var_1534,], output)
mutated_mod['func_1535'] = func_1535
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1679 = relay.var("var_1679", dtype = "float32", shape = (15, 8, 3))#candidate|1679|(15, 8, 3)|var|float32
uop_1680 = relay.asinh(var_1679.astype('float32')) # shape=(15, 8, 3)
uop_1682 = relay.log2(uop_1680.astype('float32')) # shape=(15, 8, 3)
func_1305_call = mod.get_global_var('func_1305')
func_1308_call = mutated_mod.get_global_var('func_1308')
var_1692 = relay.var("var_1692", dtype = "float32", shape = (26,))#candidate|1692|(26,)|var|float32
call_1691 = relay.TupleGetItem(func_1305_call(relay.reshape(var_1692.astype('float32'), [13, 2]), relay.reshape(var_1692.astype('float32'), [13, 2]), ), 0)
call_1693 = relay.TupleGetItem(func_1308_call(relay.reshape(var_1692.astype('float32'), [13, 2]), relay.reshape(var_1692.astype('float32'), [13, 2]), ), 0)
bop_1695 = relay.logical_and(uop_1682.astype('bool'), relay.reshape(uop_1680.astype('bool'), relay.shape_of(uop_1682))) # shape=(15, 8, 3)
func_1305_call = mod.get_global_var('func_1305')
func_1308_call = mutated_mod.get_global_var('func_1308')
call_1698 = relay.TupleGetItem(func_1305_call(relay.reshape(var_1692.astype('float32'), [13, 2]), relay.reshape(var_1692.astype('float32'), [13, 2]), ), 0)
call_1699 = relay.TupleGetItem(func_1308_call(relay.reshape(var_1692.astype('float32'), [13, 2]), relay.reshape(var_1692.astype('float32'), [13, 2]), ), 0)
output = relay.Tuple([call_1691,var_1692,bop_1695,call_1698,])
output2 = relay.Tuple([call_1693,var_1692,bop_1695,call_1699,])
func_1704 = relay.Function([var_1679,var_1692,], output)
mod['func_1704'] = func_1704
mod = relay.transform.InferType()(mod)
var_1705 = relay.var("var_1705", dtype = "float32", shape = (15, 8, 3))#candidate|1705|(15, 8, 3)|var|float32
var_1706 = relay.var("var_1706", dtype = "float32", shape = (26,))#candidate|1706|(26,)|var|float32
output = func_1704(var_1705,var_1706,)
func_1707 = relay.Function([var_1705,var_1706,], output)
mutated_mod['func_1707'] = func_1707
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1805 = relay.var("var_1805", dtype = "float32", shape = (3, 1, 16))#candidate|1805|(3, 1, 16)|var|float32
uop_1806 = relay.log(var_1805.astype('float32')) # shape=(3, 1, 16)
uop_1808 = relay.cos(var_1805.astype('float32')) # shape=(3, 1, 16)
bop_1818 = relay.right_shift(uop_1806.astype('int8'), relay.reshape(uop_1808.astype('int8'), relay.shape_of(uop_1806))) # shape=(3, 1, 16)
uop_1821 = relay.erf(uop_1808.astype('float64')) # shape=(3, 1, 16)
func_194_call = mod.get_global_var('func_194')
func_197_call = mutated_mod.get_global_var('func_197')
const_1824 = relay.const([9,-8,8,6,-10,5,7,-6,-6,5,2,2,3,8,-8,-4,9,-1,-1,-8,-6,-4,4,-5,-1,-10,2,-4,2,8,9,10,-4,-2,8,6,3,-10,2,-9,6,9,3,-6,-7,8,8,5,-9,-7,-9,2,6,8,5,-4,9,10,-7,9,-1,-2,-5,1,4,-10,4,4,3,-10,9,1,5,10,-10,-8,5,9,6,3,-9,-2,4,3,-8,-6,-6,7,-10,7,-7,2,6,-4,-1,-4,-8,5,2,7,-4,-1,4,4,-6,-6,6,6,9,-4,-5,-3,7,-4,10,1,6,4,1,-6,9,-1,-7,-6,-5,7,1,2,1,-8,-7,5,-2,-5,-7,1,10,10,9,6,-8,-1,-4,-8,-8,6,-5,1,7,2,7,-9,-7,6,5,-7,4,4,2,-3,-8,8,-7,3,-4,-10,-10,8,8,-3,-4,7,-2,-6,-3,-7,-7,4,-1,-1,-4,4,2,3,-5,-4,-9,-9,-4,-5,5,7,4,-7,10,10,9,-10,-5,2,7,1,8,7,6,-8,2,2,-9,-1,-4,-5,-4,-3,-5,-8,-10,-10,-8,10,-9,-4,6,-6,-2,-5,5,-9,-6,7,9,6,6,-10,5,8,-8,2,8,-10], dtype = "uint8")#candidate|1824|(240,)|const|uint8
call_1823 = func_194_call(relay.reshape(const_1824.astype('uint8'), [15, 16]), relay.reshape(const_1824.astype('uint8'), [15, 16]), )
call_1825 = func_194_call(relay.reshape(const_1824.astype('uint8'), [15, 16]), relay.reshape(const_1824.astype('uint8'), [15, 16]), )
bop_1826 = relay.power(uop_1806.astype('float64'), relay.reshape(uop_1821.astype('float64'), relay.shape_of(uop_1806))) # shape=(3, 1, 16)
bop_1829 = relay.less_equal(bop_1818.astype('bool'), relay.reshape(uop_1821.astype('bool'), relay.shape_of(bop_1818))) # shape=(3, 1, 16)
func_1443_call = mod.get_global_var('func_1443')
func_1446_call = mutated_mod.get_global_var('func_1446')
const_1837 = relay.const([2.288002,0.215689,-3.160560,-8.589654,-7.417599,1.671586,9.010636,-6.135492,-0.145148,-3.142360,-8.483894,-5.292773,6.891240,1.635053,0.055899,0.331889,-8.212084,-7.480615,1.838070,-1.081673,7.477119,-7.765135,0.101703,2.926751,-0.061715,4.722315,-4.544214,-8.094933,-0.803699,0.579475,-7.730692,-1.959333,4.503610,1.281908,-7.935508,-9.097165,0.735606,-6.761158,3.221275,8.002735,9.294632,3.861847,-5.175808,-0.705325,4.322191,-2.783542,-5.481724,8.392837,3.571809,0.743220,-8.062676,8.009415,-1.589490,-1.705105,7.562610,8.909380,8.887761,4.914346,-2.802857,-0.089652,9.776702,0.157724,1.412783,8.316158,7.740751,-2.976232,-9.867982,3.745831,4.904597,5.974352,9.254269,-8.847808], dtype = "float32")#candidate|1837|(72,)|const|float32
call_1836 = func_1443_call(relay.reshape(const_1837.astype('float32'), [4, 2, 9]))
call_1838 = func_1443_call(relay.reshape(const_1837.astype('float32'), [4, 2, 9]))
bop_1860 = relay.add(bop_1826.astype('int64'), relay.reshape(uop_1821.astype('int64'), relay.shape_of(bop_1826))) # shape=(3, 1, 16)
output = relay.Tuple([call_1823,const_1824,bop_1829,call_1836,const_1837,bop_1860,])
output2 = relay.Tuple([call_1825,const_1824,bop_1829,call_1838,const_1837,bop_1860,])
func_1863 = relay.Function([var_1805,], output)
mod['func_1863'] = func_1863
mod = relay.transform.InferType()(mod)
mutated_mod['func_1863'] = func_1863
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1864 = relay.var("var_1864", dtype = "float32", shape = (3, 1, 16))#candidate|1864|(3, 1, 16)|var|float32
func_1863_call = mutated_mod.get_global_var('func_1863')
call_1865 = func_1863_call(var_1864)
output = call_1865
func_1866 = relay.Function([var_1864], output)
mutated_mod['func_1866'] = func_1866
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1979 = relay.var("var_1979", dtype = "float32", shape = (14, 6))#candidate|1979|(14, 6)|var|float32
uop_1980 = relay.cosh(var_1979.astype('float32')) # shape=(14, 6)
output = relay.Tuple([uop_1980,])
output2 = relay.Tuple([uop_1980,])
func_1983 = relay.Function([var_1979,], output)
mod['func_1983'] = func_1983
mod = relay.transform.InferType()(mod)
mutated_mod['func_1983'] = func_1983
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1984 = relay.var("var_1984", dtype = "float32", shape = (14, 6))#candidate|1984|(14, 6)|var|float32
func_1983_call = mutated_mod.get_global_var('func_1983')
call_1985 = func_1983_call(var_1984)
output = call_1985
func_1986 = relay.Function([var_1984], output)
mutated_mod['func_1986'] = func_1986
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2022 = relay.const([[[-8,-5,-1,5,-7,2],[1,7,-2,-8,6,-9],[-3,5,-3,-7,-9,1],[5,7,5,10,-3,-10]],[[5,-7,3,7,4,9],[-2,6,9,3,-5,7],[-10,-8,1,9,-5,-10],[-4,-6,10,-4,4,-6]],[[-1,-8,-7,-8,2,-3],[-3,-1,-1,-7,-10,3],[-10,4,1,8,7,8],[-1,-3,10,5,8,-2]],[[-1,-6,-3,2,-6,-9],[4,-8,-3,7,3,-6],[3,8,1,2,2,2],[-7,-1,9,-1,-7,-6]],[[-7,4,-10,-5,-4,-8],[-7,-5,-8,-4,-1,7],[7,5,-9,4,-1,-8],[-9,-7,9,7,4,5]],[[-1,9,6,-2,-6,-8],[-5,2,9,10,-6,10],[-10,1,1,8,-5,-1],[-2,5,-9,4,-3,1]],[[-10,-1,-6,10,-8,-2],[7,10,-6,4,-6,-8],[1,-9,2,-8,9,-9],[-2,2,1,10,1,-9]],[[-1,-7,-1,-9,10,-9],[-8,-7,8,-3,-6,-2],[-9,5,10,-9,9,9],[-4,2,-8,8,-10,4]],[[-10,8,-4,-3,3,-2],[-5,6,-8,4,5,8],[9,-1,9,-8,-4,5],[7,8,-9,4,3,8]]], dtype = "uint32")#candidate|2022|(9, 4, 6)|const|uint32
var_2023 = relay.var("var_2023", dtype = "uint32", shape = (9, 4, 6))#candidate|2023|(9, 4, 6)|var|uint32
bop_2024 = relay.logical_xor(const_2022.astype('uint32'), relay.reshape(var_2023.astype('uint32'), relay.shape_of(const_2022))) # shape=(9, 4, 6)
output = relay.Tuple([bop_2024,])
output2 = relay.Tuple([bop_2024,])
func_2029 = relay.Function([var_2023,], output)
mod['func_2029'] = func_2029
mod = relay.transform.InferType()(mod)
var_2030 = relay.var("var_2030", dtype = "uint32", shape = (9, 4, 6))#candidate|2030|(9, 4, 6)|var|uint32
output = func_2029(var_2030)
func_2031 = relay.Function([var_2030], output)
mutated_mod['func_2031'] = func_2031
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2380 = relay.var("var_2380", dtype = "uint8", shape = (11, 4))#candidate|2380|(11, 4)|var|uint8
var_2381 = relay.var("var_2381", dtype = "uint8", shape = (11, 4))#candidate|2381|(11, 4)|var|uint8
bop_2382 = relay.not_equal(var_2380.astype('bool'), relay.reshape(var_2381.astype('bool'), relay.shape_of(var_2380))) # shape=(11, 4)
output = bop_2382
output2 = bop_2382
func_2385 = relay.Function([var_2380,var_2381,], output)
mod['func_2385'] = func_2385
mod = relay.transform.InferType()(mod)
var_2386 = relay.var("var_2386", dtype = "uint8", shape = (11, 4))#candidate|2386|(11, 4)|var|uint8
var_2387 = relay.var("var_2387", dtype = "uint8", shape = (11, 4))#candidate|2387|(11, 4)|var|uint8
output = func_2385(var_2386,var_2387,)
func_2388 = relay.Function([var_2386,var_2387,], output)
mutated_mod['func_2388'] = func_2388
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2442 = relay.var("var_2442", dtype = "float32", shape = (9, 5, 16))#candidate|2442|(9, 5, 16)|var|float32
var_2443 = relay.var("var_2443", dtype = "float32", shape = (9, 5, 16))#candidate|2443|(9, 5, 16)|var|float32
bop_2444 = relay.power(var_2442.astype('float32'), relay.reshape(var_2443.astype('float32'), relay.shape_of(var_2442))) # shape=(9, 5, 16)
bop_2461 = relay.bitwise_or(var_2443.astype('uint64'), relay.reshape(var_2442.astype('uint64'), relay.shape_of(var_2443))) # shape=(9, 5, 16)
bop_2468 = relay.multiply(var_2443.astype('int32'), relay.reshape(bop_2461.astype('int32'), relay.shape_of(var_2443))) # shape=(9, 5, 16)
bop_2477 = relay.logical_or(var_2442.astype('bool'), relay.reshape(bop_2468.astype('bool'), relay.shape_of(var_2442))) # shape=(9, 5, 16)
output = relay.Tuple([bop_2444,bop_2477,])
output2 = relay.Tuple([bop_2444,bop_2477,])
func_2486 = relay.Function([var_2442,var_2443,], output)
mod['func_2486'] = func_2486
mod = relay.transform.InferType()(mod)
mutated_mod['func_2486'] = func_2486
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2486_call = mutated_mod.get_global_var('func_2486')
var_2488 = relay.var("var_2488", dtype = "float32", shape = (9, 5, 16))#candidate|2488|(9, 5, 16)|var|float32
var_2489 = relay.var("var_2489", dtype = "float32", shape = (9, 5, 16))#candidate|2489|(9, 5, 16)|var|float32
call_2487 = func_2486_call(var_2488,var_2489,)
output = call_2487
func_2490 = relay.Function([var_2488,var_2489,], output)
mutated_mod['func_2490'] = func_2490
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2587 = relay.var("var_2587", dtype = "uint32", shape = (13, 5, 1))#candidate|2587|(13, 5, 1)|var|uint32
var_2588 = relay.var("var_2588", dtype = "uint32", shape = (13, 5, 12))#candidate|2588|(13, 5, 12)|var|uint32
bop_2589 = relay.greater(var_2587.astype('bool'), var_2588.astype('bool')) # shape=(13, 5, 12)
output = relay.Tuple([bop_2589,])
output2 = relay.Tuple([bop_2589,])
func_2593 = relay.Function([var_2587,var_2588,], output)
mod['func_2593'] = func_2593
mod = relay.transform.InferType()(mod)
mutated_mod['func_2593'] = func_2593
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2593_call = mutated_mod.get_global_var('func_2593')
var_2595 = relay.var("var_2595", dtype = "uint32", shape = (13, 5, 1))#candidate|2595|(13, 5, 1)|var|uint32
var_2596 = relay.var("var_2596", dtype = "uint32", shape = (13, 5, 12))#candidate|2596|(13, 5, 12)|var|uint32
call_2594 = func_2593_call(var_2595,var_2596,)
output = call_2594
func_2597 = relay.Function([var_2595,var_2596,], output)
mutated_mod['func_2597'] = func_2597
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2742 = relay.const([[-4.923971,7.289331,-9.139151,-1.961824,-0.084976,-0.558211,-5.216218],[3.840258,-0.318415,0.141986,-6.900094,-7.121879,7.742817,5.041501],[-4.345606,9.840768,-0.259680,1.852895,-9.405114,7.911901,2.886114],[3.061360,-7.471557,5.117420,-4.610400,-5.636015,7.099400,-4.824453],[-6.377581,5.885959,6.634072,6.566041,-0.893332,-7.798132,-4.187587],[9.420276,6.242012,8.193561,4.617542,9.916868,5.301692,3.281091],[-6.195484,-7.308939,7.391102,7.840103,-1.536213,8.854968,3.619290],[0.344283,7.636634,-7.784244,-8.847034,5.974278,-3.872901,4.226728],[-9.703578,6.372231,8.644410,8.005865,5.155366,9.979338,9.990513],[-2.607126,-6.627203,5.349674,-2.057064,-9.279729,7.968402,7.820598],[-9.750948,-8.537190,3.182926,-2.738889,3.913964,6.264786,-9.366719]], dtype = "float64")#candidate|2742|(11, 7)|const|float64
uop_2743 = relay.acosh(const_2742.astype('float64')) # shape=(11, 7)
bop_2748 = relay.equal(uop_2743.astype('bool'), relay.reshape(const_2742.astype('bool'), relay.shape_of(uop_2743))) # shape=(11, 7)
func_696_call = mod.get_global_var('func_696')
func_699_call = mutated_mod.get_global_var('func_699')
var_2759 = relay.var("var_2759", dtype = "uint64", shape = ())#candidate|2759|()|var|uint64
const_2760 = relay.const([[10,-7],[-2,-7],[-6,10],[4,10],[4,6],[-8,5],[-1,-4],[6,-5],[-5,3],[5,-10],[7,-8],[-8,1],[-8,5],[-6,-6],[5,-10],[-2,-7],[5,-4],[2,-5],[6,9],[4,7],[-7,-7],[-7,1],[-3,-4],[4,-3],[3,-3],[-1,-1],[-4,2],[10,-9],[4,-1],[-7,4],[5,-6],[-1,-10],[-6,7],[-3,-6],[-1,-4],[-8,10],[-7,4],[5,-7],[-7,-1],[-1,3],[6,-5],[-10,-6],[9,-2],[3,10],[4,5],[3,-10],[-4,-1],[4,2],[-5,8],[6,-6],[6,-4],[1,8],[-10,-5],[-6,5],[7,-4],[-1,-10],[-3,-2],[4,4],[8,-8],[1,-4],[-10,4],[-5,-7],[9,3],[8,-6],[2,10],[10,4],[3,6],[-8,5],[-1,-6],[-1,1],[4,10],[7,-5],[-8,5],[-2,-5],[-2,8],[-5,-10],[5,-5],[8,-6],[7,-8],[-4,5],[1,-1],[10,-5],[8,4],[8,2],[-1,10],[10,-4],[4,5],[-9,1],[10,-1],[7,-3],[-1,2],[1,5],[-8,1],[-2,9],[1,5],[2,-7],[7,3],[6,-1],[-2,-8],[-7,-5],[7,5],[5,7],[-5,3],[8,2],[-10,9],[10,4],[-5,7],[5,-6],[-9,4],[-4,9],[3,1],[-6,7],[5,-3],[-6,-8],[-9,-10],[8,9],[-9,-3],[-5,-6],[-6,2],[-7,7],[4,8],[-9,10],[1,4],[-8,-7],[9,-1],[2,-5],[-4,10],[5,-3],[9,9],[-6,-6],[1,-6],[-5,7],[3,-8],[-7,5],[1,1],[5,7],[5,-2],[4,-10],[9,3],[9,8],[10,-8],[1,6],[-9,10],[-1,7],[-10,9],[-8,1],[4,-1],[-4,6],[-7,8],[-10,-9],[-1,4],[-5,-8],[-2,1],[5,-7],[-5,-2],[9,2],[-6,3],[-5,8],[3,-10],[5,-3],[4,-6],[7,-7],[-10,-1],[1,-5],[4,-7],[-10,6],[9,2],[-3,-10],[1,7],[-7,-10],[7,8],[-5,-7],[10,-9],[-8,-6],[1,2],[2,-3],[8,-3],[-6,4],[4,-3],[6,7],[3,8],[1,10],[-1,7],[2,6],[-2,7],[-2,3],[-4,5],[4,5],[8,-1],[-7,-4],[-1,2],[1,-5],[9,-2],[2,6],[-2,7],[-3,-5],[8,-1],[-5,5],[-5,1],[-7,8],[-8,-8],[8,8],[5,5],[-10,8],[-6,-2],[3,7],[4,-4],[6,-8],[4,9],[-10,-9],[-2,2],[7,-9],[8,-2],[-9,-8],[10,-4],[4,3],[8,10],[-8,-10],[5,4],[1,-5],[-5,9],[-9,-6],[9,-5],[2,2],[9,5],[-3,10],[8,-2],[-7,7],[3,7],[2,-10],[3,-5]], dtype = "uint64")#candidate|2760|(231, 2)|const|uint64
call_2758 = relay.TupleGetItem(func_696_call(relay.reshape(var_2759.astype('uint64'), []), relay.reshape(const_2760.astype('uint64'), [14, 11, 3]), ), 0)
call_2761 = relay.TupleGetItem(func_699_call(relay.reshape(var_2759.astype('uint64'), []), relay.reshape(const_2760.astype('uint64'), [14, 11, 3]), ), 0)
func_1242_call = mod.get_global_var('func_1242')
func_1244_call = mutated_mod.get_global_var('func_1244')
var_2769 = relay.var("var_2769", dtype = "float32", shape = (84,))#candidate|2769|(84,)|var|float32
call_2768 = func_1242_call(relay.reshape(var_2769.astype('float32'), [12, 7]))
call_2770 = func_1242_call(relay.reshape(var_2769.astype('float32'), [12, 7]))
func_1208_call = mod.get_global_var('func_1208')
func_1212_call = mutated_mod.get_global_var('func_1212')
const_2776 = relay.const([3,4,-3,1,1,-7,9,10,8,8,-8,6,-10,4,-10,-3,-2,-5,6,-8,3,7,-3,-5,8,4,-10,-3,-5,-4,3,-7,4,1,9,8,-5,5,-1,-8,4,4,4,-4,-6,1,-6,6,10,10,9,3,-5,1,-1,-7,-2,-8,-10,-3,-1,-6,5,-6,1,6,6,-5,10,-8,-6,-7,-8,3,9,4,2,-6,-4,-2,8,7,9,-6,-8,1,1,-2,-3,7,-3,-2,1,-2,2,-9,5,-6,-8,3,-7,1,2,-7,10,-7,-2,-10,8,-7,-9,3,-2,8,1,7,-8,8,-2,3,8,7,-10,5,10,-8,-10,-10,-10,-4,2,3,-2,7,7,-7,3,-8,-2,1,-5,-10,-2,9,1,-4,-7,-2,-9,2,-3,2,-5,-9,3,9,-8,5,9,3,9,2,6,2,5,3,5,3,8,-4,-1,1,2,-1,-1,-9,-2,4,-7,5,-2,-1,6,6,-8,-4,-5,-10,2,6,-8,2,7,9,-4,-7,7,-5,4,8,4,-10,-9,-4,6,2,8,-5,2,9,10,-4,6,1,-1,-9,-1,3,-3,-10,-10,4,-10,1,5,-8,9,-4,-3,2,-4,-10,2,-6,2,-6,2,-10,-9,2,4,10,6,-6,-9,-5,-9,-7,-10,-8,10,-7,-5,3,-8,9,9,-3,3,3,8,-4,-5,-10,3,9,3,6,-3,-4,-5,2,2,8,7,-9,1,3,-4,1,4,-1,-8,-5,-5,1,-3,2,10,-3,1,-3,-3,8,-3,5,1,-2,-2,-9,9,-4,6,-8,-8,-5,-2,1,7,5,10,-7,7,-9,10,3,-1,2,5,-4,-2,1,-9,3,4,8,-9,3,4,-4,-2,-4,4,-10,7,-1,3,4,6,10,7,-4,-2,-4,-10,3,-3,-7,-4,-5,3,9,-10,9,-10,8,8,-6,8,1,6,4,-2,6,9,6,-9,-7,-9,7,-5,9,-6,4,-4,-3,-8,2,9,-7,-1,-10,9,3,4,-7,6,2,2,-7,-2,9,-9,-1,10,7,-2,-6,-4,9,1,-7,-6,9,7,-4,-8,1,5,6,-2,9,-9,7,3,1,3,-1,7,5,-5,2,-6,-3,-7,-8,-3,4,-3,-7,-4,10,-6,-6,-10,4,-2,1,1,10,-2,-6,-5,-10,9,5,-6,3,-8,5,-2,5,7,-3,-9,-6,-1,-7,3,7,5,-9,8,4,-3,-4,-8,-10,-5,3,7,-7,4,-7,3,2,7,-10,-5,3,-1,-4,7,6,-8,8,-10,4,-8,2,-8,-9,6,-1,4,-1,-2,6,9,-3,-2,-2,5,8,-10,5,7,-2,3,-5,9,2,1,3,9,-8,-7,3,10,-5,4,-8,-4,-3,6,-4,4,-6,-3,4,7,4,6,-3,-1,-5,-8,5,3,-9,-5,-4,10,-1,-1,6,1,-1,9,1,2,-4,-9,4,-6,1,-7,-8,6,-1,-8,-4,-7,4,-9,-6,3,5,9,-5,2,6,-2,-6,8,5,4,-5,-4,-9,-5,8,-4,-9,-10,-10,10,-4,4,1,7,10,-7,4,-3,8,7,4,-9,-8,7,3,-6,10,-7,4,10,7,8,-1,-6,8,7,9,-7,4,5,-1,-2,-2,5,5,9,-3,5,7,4,-7,1,4,-10,-4,-6,5,10,-9,1,-8,-5,-9,-6,-2,-6,-1,2,7,-6,7,9,-1,9,-4,5,-3,5,-3,-10,1,-5,-3,10,10,-2,-9,1,10,2,-10,-5,9,7,-1,8,-3,6,9,5,-3,6,-9,-4,7,-2,4,2,-9,7,5,2,8,3,4,-7,-6,9,-2,-4,-8,5,-6,-7,-5,-5,-10,8,4,7,7,5,7,-9,-6,7,1,-5,-1,4,-7,-6,-7,-8,4,-1,7,6,-1,-4,-10,-10,-7,2,7,1,6,-4,-2,5,6,-6,-5,9,-9,-2,8,-4,7,10,-1,-2,10,9,8,7,2,-9,8,-3,-4,8,5,6,7,7,-9,-6,-5,-3,10,9,5,-9,7,-2,4,-3,-3,2,5,7,-8,-6,-7,-6,-9,9,2,-9,-7,-7,10,-2,9,2,-3,1,-1,6,6,-4,-6,10,-10,-8,9,-8,7,3,-3,-1,3,10,1,-3,8,3,-2,-6,2,-9,-9,-2,-8,2,10,-10,7,9,5,-4,-3,1,-2,10,-8,6,6,6,5,-7,-5,-9,6,10,-4,-8,-3,-4,5,8,-1,-3,-4,-4,8,5,-8,-6,4,8,2,5,-5,10,-3,5,3,-2,8,-8,-7,2,7,10,3,9,5,3,-5,2,-1,1,-7,-3,-10,3,-3,-3,-2,10,-2,-3,5,9,-8,7,9,5,2,3,8,1,1,-10,6,10,-2,-5,10,-6,-6,-8,-2,3,1,-6,-1,2,1,-7,-3,5,2,2,-5,-10,3,7,1,9,-5,-4,-4,-10,-8,3,6,7,-9,7,1,-6,5,10,-3,-1,6,7,-10,4,-8,9,5,9,7,8,5,-2,5,-8,3,-9,3,-8,6,10,8,-7,5,5,-4,-10,6,1,8,-2,-9,9,-8,4,8,8,-1,-7,1,-8,6,5,-4,3,-6,-4,-5,-4,9,-7,-3,-2,-9,3,-2,6,1,-2,-10,8,8,-8,4,-6,-3,1,-5,10,-4,6,4,-6,5,-3,-10,10,2,3,-1,2,-1,10,5,-1,-1,-5,-1,1,8,3,-4,10,-1,5,-3,6,7,1,5,1,3,2,-6,9,6,1,-5,9,5,9,-10,-1,10,1,8,-1,7,-4,-8,-6,-7,8,10,-7,1,3,1,-8,-8,8,10,-6,5,-9,-4,-9,2,2,-5,4,-7,7,1,-2,-6,-4,2,-3,-9,-1,-5,-6,10,-8,-9,2,1,5,-7,-10,7,-1,-5,5,-7,9,-7,-1,-2,-3,-3,-6,-4,-6,-10,-6,-2,4,-1,1,5,4,-4,-10,-3,-9,8,1,-8,5,-3,3,-7,-3,5,-10,6,2,-6,8,5,-8,-5,-7,5,-1,2,-6,-2,-1,2,9,3,8,4,-1,-3,4,-9,1,2,4,7,-6,8,-5,-7,8,6,1,2,-10,2,-5,4,7,-7,1,3,-2,-5,1,1,-1,-5,-8,-6,-4,-4,-1,6,-6,1,6,7,4,6,1,7,8,-6,-9,-5,-3,3,-9,2,-1,-3,6,8,9,5,3,5,4,-8,-4,-9,3,-10,2,-6,-4,1,-8,-10,-4,10,-9,-9,-6,9,9,6,-1,-4,10,-5,10,6,6,6,3,7,1,-6,-10,-7,-4,-3,-3,5,7,-8,7,-5,-10,-2,1,6,5,8,-8,6,-2,-6,-8,-6,2,-1,10,3,-9,4,6,3,-5,-9,-8,4,6,2,-2,8,-6,2,-5,7,-9,5,2,-7,8,9,-10,5,4,1,-10,9,-8,-2,-5,-8,-10,10,-2,9,2,8,-1,-10,-2,3,10,8,5,10,6,6,2,8,-2,3,-4,-6,6,4,-6,2,10,-1,-9,-7,-10,3,-9,-5,-9,-7,-1,-2,8,5,-2,2,-8,-9,6,3,8,-8,-10,-10,-1,-4,9,-9,9,-2,2,2,-9,-8,6,-10,9,3,-1,10,9,6,7,4,-9,8,-2,-3,3,7,3,6,-5,3,4,-2,7,-1,-3,-2,-3,6,-3,8,10,-7,-3,9,4,6,7,-2,-5,-9,-8,-1,-3,8,-5,4,-10,-2,-6,2,5,9,-5,-8,-2,7,10,-10,-4,-1,-5,-8,-5,-9,-1,10,-9,10,8,6,-5,-1,-2,9,1,7,-4,2,-5,-8,-4,-4,9,-8,-4,-8,-9,5,2,-9,4,1,-3,5,6,6,-4,-2,6,10,6,8,-9,-7,7,-5,2,-6,9,-2,-7,-4,1,-5,-7,7,-7,9,8,-6,-1,-3,-7,9,2,-2,10,-3,-1,7,7,1,1,-9,-7,-3,8,-3,-6,-10,4,9,-7,4,-3,7,-7,4,-10,4,-8,6,-4,10,1,-8,3,8,2,-7,5,4,4,-7,-1,-4,9,-4,10,2,-5,6,-8,7,6,-4,1,2,-6,-2,1,5,-7,-4,-4,-10,-7,-8,-1,-4,10,-10,5,-6,3,5,5,6,8,1,-6,-2,7,7,-4,7,-8,7,-10,-2,3,9,-7,10,-4,-9,9,-3,-1,6,-1,1,1,1,-1,6,-2,1,-1,7,1,-8,-7,-9,-1,-4,-8,-10,-3,2,-5,9,5,-9,3,4,9,-6,-4,5,-2,8,3,10,-2,-9,3,6,-8,-6,8,4,-3,6,-9,-3,-9,10,-8,10,-3,6,-7,-5,7,7,-3,-7,-5,-4,-5,3,7,-7,-4,-6,6,-2,-6,9,8,1,8,8,2,-8,-10,-2,-4,1,-8,6,8,-8,-7,-8,-6,8,8,7,-9,-8,6,5,2,10,2,-5,-4,-5,-1,-5,1,-1,9,-10,3,-9,-9,-8,8,-9,4,1,7,6,-8,-5,6,9,-3,6,-6,-6,-9,3,4,10,-8,-5,-6,4,-4,4,-6,7,-1,-9,10,-1,2,8,8,4,-8,2,2,1,-7,-7,-7,6,7,-6,-1,-6,1,-6,10,4,1,-6,-3,8,-2,-5,-9,-9,-4,-3,-4,-7,1,-3,-5,2,4,-8,5,-7,3,7,2,-8,3,-3,-8,-1,4,-1,2,7,-9,10,-5,10,8,-9,5,7,9,-2,-10,6,-8,5,10,5,10,-5,2,-2,5,3,9,6,9,4,3,-5,9,-3,5,8,3,8,-9,8,-2,-3,-10,-10,9,2,6,-4,-9,-3,3,8,7,3,-6,1,1,-10,1,4,4,3,-1,-6,-4,-5,-2,-4,8,-4,-8,4,-7,4,4,9,2,-7,-10,3,2,2,-10,-3,-6,5,-2,-7,5,8,-7,-5,-10,2], dtype = "int32")#candidate|2776|(1872,)|const|int32
call_2775 = func_1208_call(relay.reshape(var_2759.astype('int32'), []), relay.reshape(const_2776.astype('int32'), [9, 16, 13]), )
call_2777 = func_1208_call(relay.reshape(var_2759.astype('int32'), []), relay.reshape(const_2776.astype('int32'), [9, 16, 13]), )
output = relay.Tuple([bop_2748,call_2758,var_2759,const_2760,call_2768,var_2769,call_2775,const_2776,])
output2 = relay.Tuple([bop_2748,call_2761,var_2759,const_2760,call_2770,var_2769,call_2777,const_2776,])
func_2790 = relay.Function([var_2759,var_2769,], output)
mod['func_2790'] = func_2790
mod = relay.transform.InferType()(mod)
mutated_mod['func_2790'] = func_2790
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2790_call = mutated_mod.get_global_var('func_2790')
var_2792 = relay.var("var_2792", dtype = "uint64", shape = ())#candidate|2792|()|var|uint64
var_2793 = relay.var("var_2793", dtype = "float32", shape = (84,))#candidate|2793|(84,)|var|float32
call_2791 = func_2790_call(var_2792,var_2793,)
output = call_2791
func_2794 = relay.Function([var_2792,var_2793,], output)
mutated_mod['func_2794'] = func_2794
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2929 = relay.var("var_2929", dtype = "int64", shape = (1, 5, 10))#candidate|2929|(1, 5, 10)|var|int64
var_2930 = relay.var("var_2930", dtype = "int64", shape = (16, 5, 10))#candidate|2930|(16, 5, 10)|var|int64
bop_2931 = relay.bitwise_xor(var_2929.astype('int64'), var_2930.astype('int64')) # shape=(16, 5, 10)
output = relay.Tuple([bop_2931,])
output2 = relay.Tuple([bop_2931,])
func_2941 = relay.Function([var_2929,var_2930,], output)
mod['func_2941'] = func_2941
mod = relay.transform.InferType()(mod)
var_2942 = relay.var("var_2942", dtype = "int64", shape = (1, 5, 10))#candidate|2942|(1, 5, 10)|var|int64
var_2943 = relay.var("var_2943", dtype = "int64", shape = (16, 5, 10))#candidate|2943|(16, 5, 10)|var|int64
output = func_2941(var_2942,var_2943,)
func_2944 = relay.Function([var_2942,var_2943,], output)
mutated_mod['func_2944'] = func_2944
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2977 = relay.var("var_2977", dtype = "float32", shape = (9, 13))#candidate|2977|(9, 13)|var|float32
var_2978 = relay.var("var_2978", dtype = "float32", shape = (9, 13))#candidate|2978|(9, 13)|var|float32
bop_2979 = relay.mod(var_2977.astype('float32'), relay.reshape(var_2978.astype('float32'), relay.shape_of(var_2977))) # shape=(9, 13)
func_1443_call = mod.get_global_var('func_1443')
func_1446_call = mutated_mod.get_global_var('func_1446')
var_2983 = relay.var("var_2983", dtype = "float32", shape = (72,))#candidate|2983|(72,)|var|float32
call_2982 = func_1443_call(relay.reshape(var_2983.astype('float32'), [4, 2, 9]))
call_2984 = func_1443_call(relay.reshape(var_2983.astype('float32'), [4, 2, 9]))
func_1863_call = mod.get_global_var('func_1863')
func_1866_call = mutated_mod.get_global_var('func_1866')
const_2993 = relay.const([[5.455265,5.349225,-1.019059,-1.489414],[6.615712,-0.221770,-7.003684,-2.859566],[8.139795,-6.503281,-0.558069,0.513518],[-7.281062,1.297500,-4.156392,1.670780],[-6.335219,9.146176,-0.838822,5.982008],[7.526693,9.972046,9.731152,-9.276018],[-0.193540,-5.935509,-9.678048,-9.240570],[-8.372829,-1.614383,6.959326,-7.154845],[-7.361173,3.843885,7.847417,-2.210582],[-3.195061,-5.558704,5.953983,3.821881],[-4.059985,-3.684862,6.877465,1.434494],[2.572984,-5.815628,5.593026,-0.412495]], dtype = "float32")#candidate|2993|(12, 4)|const|float32
call_2992 = relay.TupleGetItem(func_1863_call(relay.reshape(const_2993.astype('float32'), [3, 1, 16])), 4)
call_2994 = relay.TupleGetItem(func_1866_call(relay.reshape(const_2993.astype('float32'), [3, 1, 16])), 4)
func_1464_call = mod.get_global_var('func_1464')
func_1467_call = mutated_mod.get_global_var('func_1467')
const_3000 = relay.const([-5.496567,-5.537030,2.194930,-3.227264,-5.478500,7.933761,4.771424,-0.610207,2.079771,-7.095745,5.330262,-4.571962,2.841251,1.991988,-9.268836,8.652518,4.059485,4.658552,5.882418,-1.728023,0.478993,-0.784684,6.710815,5.783772,-9.585195,2.505771,-9.781676,3.155585,-2.467505,-3.080416,-7.841306,3.783649,6.082385,3.572790,-9.435052,-5.046806,0.221876,-0.836300,4.644910,7.736294,9.891143,2.415154,4.273550,6.992001,-8.937188,-7.402595,8.268006,-9.916419,-8.195962,-7.080145,3.217068,-7.845461,2.913271,7.012989,6.742680,5.605623,8.629773,-6.247603,8.307677,-7.148083,3.619629,7.054577,-9.748177,5.686965,9.510161,0.416786,-5.285916,3.512730,-7.304734,-1.147520,-0.469514,-2.280387,-2.572311,-6.145503,-2.486516,0.155437,5.150798,5.844773,-6.577439,-7.658573,-7.219756,-5.649482,1.062288,-6.886825,3.731922,7.453370,-8.265756,3.578385,-7.041038,5.222253,6.691583,-7.189934,0.341302,-1.557289,-1.913869,1.082733,0.288356,4.171733,7.728971,-9.325185,-2.675753,-8.372951,-0.005557,-2.592865,1.623821,2.908546,-3.775063,8.666532,5.748351,-1.884166,-9.828200,-0.471849,3.683204,5.663322,-2.310783,7.978569,4.656892,3.813152,-8.153520,5.869565,2.296762,-3.352831,-3.276052,0.438874,9.157317,-1.514423,0.281243,1.613724,-9.006774,-1.216857,7.185091,-3.271348,9.218404,-9.059240,3.881479,-1.447138,-1.661619,-3.775023,-8.195167,5.409117,0.411683,-0.578276,-6.302407,-1.277352,-0.111659,0.292353,-9.221943,-5.886129,-9.880126,8.045073,-5.035550,-1.169629,-1.416680,-6.630066,4.092766,9.014219,1.367421,7.314784,3.005532,-6.643623,-8.552902,1.579681,3.769817,8.913135,-0.896756,2.751627,-0.761471,-6.158493,6.582328,8.084303,-7.163102,0.220291,-8.571957,4.995716,-8.583938,7.574923,-3.949836,-9.093427,6.617750,7.040497,-7.685783,-2.871289,-8.123176,-9.331123,6.539844,-2.627329,-6.948544,3.577707,6.255203,-9.523010,5.571154,-8.434952,1.919705,4.430817,-4.004472,-9.130240,-6.129209,8.709053,0.063498,-1.299549,-6.776767,-5.138664,-1.187951,3.974109,5.482355,-2.001636,-8.160489,-6.680259,9.466127,-7.976359,-9.933601,-4.630200,5.660295,5.242791,0.768474,-1.143684,9.909750,-1.939079,-3.899768,8.706458,-8.502350,-5.221182,-5.876124,-3.200465,4.502248,-5.615961,2.214505,-8.655981,-8.469084,-0.557521,8.178730,4.242333,5.409008,-7.752881,-7.646468,0.515743,8.168025,6.647614,-8.822626,5.875880,-9.399468,8.097711,9.012644,-0.862109,-4.853672,7.341995,2.294344,-7.632566,0.082371,9.074951,-1.678114,-4.568280,-0.355205,1.666231,5.626572,-2.918156,-5.953572,3.313165,0.050801,-7.247646,-7.527621,3.786631,-2.131539,3.854024,7.730257,5.050510,7.631475,1.880871,1.426114,0.613136,-2.217320,-8.349485,7.859933,-7.188177,-0.584590,-5.568951,-8.297446,-8.243118,9.570331,-2.541845,-6.197446,-3.446832,7.905431,-3.204134,9.128363,4.714931,0.104247,-0.653231,-0.738533,-5.630791,8.347931,0.285385,-0.544873,8.083472,4.566370,-8.990259,3.361049,-1.480391,9.548588,-8.787562,-6.200528,-4.502612,4.416396,-5.648003,2.930829,-0.801675,-8.180590,-9.078627,-4.752713,-2.178050,-1.774864,9.636552,-7.099909,-7.032662,-3.317507,-5.872679,5.711657,1.990817,7.239429,-0.371270,-4.663950,-5.915719,-3.469998,3.583203,-4.434107,2.968771,5.913730,-0.387509,-1.076335,9.316208,6.217176,9.656697,-4.928520,-0.048818,-0.706170,-1.352303,3.278348,4.639117,4.025975,-1.093205,3.592009,-6.582747,0.929279,-4.135520,-6.218196,-2.469244,1.477672,-6.273506,-1.344318,4.980039,9.147853,6.746572,-6.828074,-4.885444,-7.956034,3.682006,-1.466186,-6.076641,0.750619,6.652953,-4.023206,1.321588,5.240051,3.390560,-5.269960,2.606640,-4.875221,4.456498,5.717084,-9.586890,-6.215375,5.762595,-3.558717,-5.887024,-5.562059,8.407221,-9.551705,-3.191539,-9.836632,3.616629,2.402298,-0.591994,-1.769735,-3.082135,9.223022,1.254968,5.645785,5.155518,-8.992789,5.915813,6.115672,6.422019,7.758377,-5.732410,2.719476,1.145354,-1.779315,-3.093801,7.206842,-5.099975,7.782173,-9.351369,4.942058,-1.041415,-7.014503,-5.864054,-4.014196,9.461746,-9.228751,5.497754,3.814247,-7.146774,-5.088960,-1.836860,7.764372,1.123067,-7.290926,2.975444,7.966821,6.887462,3.737545,3.666095,9.917079,-8.441511,-1.384187,3.363990,-6.121636,8.960858,-9.885147,-1.455900,1.317391,5.765953,8.496223,5.284009,-9.649125,-8.307690,-5.539213,-0.443233,-2.741528,1.704486,-7.611482,2.708211,-2.920861,-5.360823,-1.261333,4.287157,-0.124240,-0.607004,8.321787,-6.665124,-1.417795,-0.954486,-2.805395,0.599483,6.732926,-1.674004,7.364570,-9.798602,-7.241704,5.306531,3.793728,-8.978342,7.183123,2.086065,-5.356995,-2.477943,1.638763,-6.209744,9.639864,-6.894815,-1.672963,4.713109,-6.573202,-4.541178,-2.590170,-1.128540,-9.455830,2.287035,5.311636,-4.955880,-3.987059,-1.975552,3.191128,3.265422,-0.707672,5.497669,-7.011905,3.333704,-3.422977,-6.622565,9.667046,-4.864567,1.962348,6.216689,6.527178,1.119878,-0.452279,7.621155,-0.665653,4.813836,-8.011665,7.894774,6.709377,-4.793165,-6.282817,-3.850703,7.308673,8.401025,-5.357694,0.823052,8.445926,9.185730,-9.576141,0.525480,5.857644,-2.104272,-3.733866,6.614636,-9.342981,2.694700,-7.866959,-3.804293,8.977392,-5.729441,-9.717576,0.612537,-7.156328,9.629781,4.138868,6.814260,6.666779,-9.299257,-4.055737,4.770439,8.135778,1.848111,-5.103344,4.989812,-3.047445,8.561236,7.463891,-4.508064,1.740216,9.625421,-0.225999,-7.628417,-1.378588,1.629184,-1.612677,8.006631], dtype = "float32")#candidate|3000|(550,)|const|float32
call_2999 = relay.TupleGetItem(func_1464_call(relay.reshape(const_3000.astype('float32'), [550,])), 1)
call_3001 = relay.TupleGetItem(func_1467_call(relay.reshape(const_3000.astype('float32'), [550,])), 1)
func_1063_call = mod.get_global_var('func_1063')
func_1067_call = mutated_mod.get_global_var('func_1067')
var_3008 = relay.var("var_3008", dtype = "int32", shape = (6,))#candidate|3008|(6,)|var|int32
call_3007 = relay.TupleGetItem(func_1063_call(relay.reshape(var_3008.astype('int32'), [2, 3]), relay.reshape(var_3008.astype('int32'), [2, 3]), ), 2)
call_3009 = relay.TupleGetItem(func_1067_call(relay.reshape(var_3008.astype('int32'), [2, 3]), relay.reshape(var_3008.astype('int32'), [2, 3]), ), 2)
output = relay.Tuple([bop_2979,call_2982,var_2983,call_2992,const_2993,call_2999,const_3000,call_3007,var_3008,])
output2 = relay.Tuple([bop_2979,call_2984,var_2983,call_2994,const_2993,call_3001,const_3000,call_3009,var_3008,])
func_3011 = relay.Function([var_2977,var_2978,var_2983,var_3008,], output)
mod['func_3011'] = func_3011
mod = relay.transform.InferType()(mod)
mutated_mod['func_3011'] = func_3011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3011_call = mutated_mod.get_global_var('func_3011')
var_3013 = relay.var("var_3013", dtype = "float32", shape = (9, 13))#candidate|3013|(9, 13)|var|float32
var_3014 = relay.var("var_3014", dtype = "float32", shape = (9, 13))#candidate|3014|(9, 13)|var|float32
var_3015 = relay.var("var_3015", dtype = "float32", shape = (72,))#candidate|3015|(72,)|var|float32
var_3016 = relay.var("var_3016", dtype = "int32", shape = (6,))#candidate|3016|(6,)|var|int32
call_3012 = func_3011_call(var_3013,var_3014,var_3015,var_3016,)
output = call_3012
func_3017 = relay.Function([var_3013,var_3014,var_3015,var_3016,], output)
mutated_mod['func_3017'] = func_3017
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3045 = relay.var("var_3045", dtype = "float32", shape = (6, 6))#candidate|3045|(6, 6)|var|float32
var_3046 = relay.var("var_3046", dtype = "float32", shape = (6, 6))#candidate|3046|(6, 6)|var|float32
bop_3047 = relay.mod(var_3045.astype('float32'), relay.reshape(var_3046.astype('float32'), relay.shape_of(var_3045))) # shape=(6, 6)
output = relay.Tuple([bop_3047,])
output2 = relay.Tuple([bop_3047,])
func_3058 = relay.Function([var_3045,var_3046,], output)
mod['func_3058'] = func_3058
mod = relay.transform.InferType()(mod)
var_3059 = relay.var("var_3059", dtype = "float32", shape = (6, 6))#candidate|3059|(6, 6)|var|float32
var_3060 = relay.var("var_3060", dtype = "float32", shape = (6, 6))#candidate|3060|(6, 6)|var|float32
output = func_3058(var_3059,var_3060,)
func_3061 = relay.Function([var_3059,var_3060,], output)
mutated_mod['func_3061'] = func_3061
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3085 = relay.var("var_3085", dtype = "float64", shape = (12, 1, 6))#candidate|3085|(12, 1, 6)|var|float64
uop_3086 = relay.sigmoid(var_3085.astype('float64')) # shape=(12, 1, 6)
bop_3095 = relay.right_shift(var_3085.astype('int8'), relay.reshape(uop_3086.astype('int8'), relay.shape_of(var_3085))) # shape=(12, 1, 6)
output = bop_3095
output2 = bop_3095
func_3100 = relay.Function([var_3085,], output)
mod['func_3100'] = func_3100
mod = relay.transform.InferType()(mod)
mutated_mod['func_3100'] = func_3100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3101 = relay.var("var_3101", dtype = "float64", shape = (12, 1, 6))#candidate|3101|(12, 1, 6)|var|float64
func_3100_call = mutated_mod.get_global_var('func_3100')
call_3102 = func_3100_call(var_3101)
output = call_3102
func_3103 = relay.Function([var_3101], output)
mutated_mod['func_3103'] = func_3103
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3136 = relay.const([[[-7,-1,10,-9,7],[9,-3,3,2,-10],[1,5,10,-5,3],[8,-3,-8,-3,9],[4,9,6,7,6],[-3,3,-2,-7,5],[5,2,2,-10,-9],[-8,-8,2,7,-2],[-5,7,-4,-10,-10],[-3,-10,-4,8,-9]],[[4,10,4,-7,-9],[3,3,-3,-1,-10],[-2,5,-1,-4,2],[6,3,-7,5,-8],[-1,10,1,3,-10],[2,-7,2,5,-6],[3,10,-5,-3,-10],[-9,-9,7,4,-1],[-4,-4,9,8,6],[-10,6,-5,6,-5]],[[8,-7,5,-9,3],[-3,3,7,-7,-8],[1,-2,-8,9,-2],[2,8,-8,-3,-2],[-7,3,-6,3,-5],[6,9,-10,2,2],[-4,5,4,-7,-10],[-3,-5,6,7,5],[-2,-6,7,-1,7],[-5,10,5,3,2]],[[10,-10,-4,-6,-10],[10,10,-5,2,-7],[9,-2,-2,-4,-8],[8,-2,4,-7,-6],[1,-8,-2,9,-9],[4,6,9,-2,3],[-9,-9,1,6,4],[-2,-8,8,-5,3],[-3,4,-3,-9,5],[-5,5,7,7,-4]],[[5,-8,8,2,-4],[7,-4,-1,3,-9],[4,-5,8,-4,5],[-6,6,5,3,-7],[-4,6,-5,-2,7],[-1,5,-9,-9,-8],[3,-7,9,4,1],[10,-6,-5,3,1],[1,10,-7,-1,-4],[-1,4,-9,-1,-6]]], dtype = "int8")#candidate|3136|(5, 10, 5)|const|int8
var_3137 = relay.var("var_3137", dtype = "int8", shape = (5, 10, 5))#candidate|3137|(5, 10, 5)|var|int8
bop_3138 = relay.bitwise_and(const_3136.astype('int8'), relay.reshape(var_3137.astype('int8'), relay.shape_of(const_3136))) # shape=(5, 10, 5)
func_696_call = mod.get_global_var('func_696')
func_699_call = mutated_mod.get_global_var('func_699')
var_3142 = relay.var("var_3142", dtype = "uint64", shape = ())#candidate|3142|()|var|uint64
const_3143 = relay.const([6,-9,6,-7,10,9,6,4,-9,-2,6,7,-5,2,-7,5,10,2,-5,9,4,1,10,-9,-8,3,10,6,10,5,4,9,-5,-8,-8,6,-6,4,-2,-7,6,6,2,3,1,-7,9,-7,-7,-3,-3,-10,5,7,9,-10,5,-2,8,-9,5,-4,-4,-9,7,7,-10,-10,-1,4,10,4,10,2,-5,-8,7,-5,2,-1,5,-10,-6,-1,7,8,9,-5,-2,-8,-8,-7,6,-7,5,9,9,-6,2,-4,3,8,-8,1,-10,6,5,4,-7,-2,-10,-4,-2,5,-8,-3,-3,-10,-2,10,2,-9,-9,-8,5,-9,-3,-5,3,-9,9,9,10,4,2,3,9,-1,-4,-5,1,3,6,8,-8,-10,8,-10,3,-10,7,9,5,4,-10,-10,2,-6,-3,-10,1,7,-3,8,10,-1,1,-3,-3,-8,6,4,3,-8,4,7,-10,-7,-3,9,2,10,-3,10,10,6,7,-3,2,5,9,-3,6,2,-4,-5,-2,-10,8,8,9,3,8,6,-7,-5,-3,-5,-10,-10,-9,-1,-10,5,-2,-7,1,-8,-5,-6,-5,9,1,7,-3,8,-4,3,1,-3,5,7,-7,4,7,-4,-2,10,-7,7,-6,1,3,3,4,-8,-5,6,9,-3,9,-9,-2,-6,-8,8,5,3,3,-3,-1,7,-7,-7,2,-3,9,2,10,10,-1,1,6,-6,-1,6,-2,-9,6,3,8,-9,-7,10,-10,-7,-9,-7,-4,3,-1,-7,-4,10,-2,7,9,9,-8,-7,-1,9,7,-4,8,6,8,2,2,1,-5,6,-6,-3,-5,-5,9,6,-2,6,-10,1,8,2,-5,3,-1,7,-5,-2,-5,7,-2,9,-5,-6,-9,-5,-10,4,9,-9,-8,10,1,4,-10,9,7,-6,4,7,8,-10,-8,8,-4,10,5,5,-3,-1,1,-4,1,1,1,1,-2,8,5,-9,-2,1,10,-5,-5,9,10,6,-5,-7,9,-6,10,2,9,-6,-2,-10,3,7,-4,7,10,-5,2,-1,-1,1,10,-7,-5,-2,10,-1,-7,-4,-5,-7,4,-9,-4,-9,-7,6,-6,-6,6,9,-2,-10,9,2,-4,-10,-8,9,9,-9,-10,6,6,10,2,9,-10,-4,10,4,4,-4,-2,6,-1,-10,10,1,-9,-9,10,6,-4,10,6,-1,7,5,-6,-1,-8,2], dtype = "uint64")#candidate|3143|(462,)|const|uint64
call_3141 = relay.TupleGetItem(func_696_call(relay.reshape(var_3142.astype('uint64'), []), relay.reshape(const_3143.astype('uint64'), [14, 11, 3]), ), 0)
call_3144 = relay.TupleGetItem(func_699_call(relay.reshape(var_3142.astype('uint64'), []), relay.reshape(const_3143.astype('uint64'), [14, 11, 3]), ), 0)
uop_3150 = relay.sin(const_3143.astype('float32')) # shape=(462,)
bop_3166 = relay.minimum(const_3143.astype('uint16'), var_3142.astype('uint16')) # shape=(462,)
func_1863_call = mod.get_global_var('func_1863')
func_1866_call = mutated_mod.get_global_var('func_1866')
const_3175 = relay.const([-0.878501,-9.208481,-7.287714,-5.507526,7.986400,8.274358,8.920709,-7.434315,-7.579110,0.082492,9.915207,-8.963242,3.294431,-2.622096,-8.102698,-0.783902,-2.999314,-8.160689,1.460122,4.835370,-8.677545,-0.613433,7.563682,-4.371089,-0.191557,1.625662,2.057888,-8.596346,1.097103,4.876921,-8.661704,0.473691,-1.795373,6.545333,-8.292783,-2.667627,-9.759447,-8.405325,3.995243,6.462009,0.597020,-4.995717,-6.214770,8.932451,4.092993,8.874643,-2.006170,-3.477147], dtype = "float32")#candidate|3175|(48,)|const|float32
call_3174 = relay.TupleGetItem(func_1863_call(relay.reshape(const_3175.astype('float32'), [3, 1, 16])), 4)
call_3176 = relay.TupleGetItem(func_1866_call(relay.reshape(const_3175.astype('float32'), [3, 1, 16])), 4)
func_1098_call = mod.get_global_var('func_1098')
func_1101_call = mutated_mod.get_global_var('func_1101')
var_3179 = relay.var("var_3179", dtype = "float64", shape = (1053,))#candidate|3179|(1053,)|var|float64
const_3180 = relay.const([2.282290,-8.466792,-5.171711,-4.497364,-4.228268,3.672759,-2.023426,-9.252242,5.468598,-6.914218,6.891158,-4.402339,-8.299566,-6.366717,3.222392,0.861313,6.548896,0.920383,6.587911,9.124589,-5.351761,-3.338427,7.500489,9.257165,-5.900980,4.675864,8.495370,5.532530,-3.379810,-9.869290,8.389252,-0.642776,3.321839,-8.502802,-1.647948,-2.758183], dtype = "float32")#candidate|3180|(36,)|const|float32
call_3178 = relay.TupleGetItem(func_1098_call(relay.reshape(var_3179.astype('float64'), [13, 9, 9]), relay.reshape(const_3180.astype('float32'), [36, 1]), ), 2)
call_3181 = relay.TupleGetItem(func_1101_call(relay.reshape(var_3179.astype('float64'), [13, 9, 9]), relay.reshape(const_3180.astype('float32'), [36, 1]), ), 2)
uop_3182 = relay.acosh(const_3175.astype('float64')) # shape=(48,)
uop_3187 = relay.sqrt(uop_3150.astype('float32')) # shape=(462,)
func_3100_call = mod.get_global_var('func_3100')
func_3103_call = mutated_mod.get_global_var('func_3103')
call_3192 = func_3100_call(relay.reshape(call_3174.astype('float64'), [12, 1, 6]))
call_3193 = func_3100_call(relay.reshape(call_3174.astype('float64'), [12, 1, 6]))
output = relay.Tuple([bop_3138,call_3141,bop_3166,call_3174,call_3178,var_3179,const_3180,uop_3182,uop_3187,call_3192,])
output2 = relay.Tuple([bop_3138,call_3144,bop_3166,call_3176,call_3181,var_3179,const_3180,uop_3182,uop_3187,call_3193,])
func_3197 = relay.Function([var_3137,var_3142,var_3179,], output)
mod['func_3197'] = func_3197
mod = relay.transform.InferType()(mod)
mutated_mod['func_3197'] = func_3197
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3197_call = mutated_mod.get_global_var('func_3197')
var_3199 = relay.var("var_3199", dtype = "int8", shape = (5, 10, 5))#candidate|3199|(5, 10, 5)|var|int8
var_3200 = relay.var("var_3200", dtype = "uint64", shape = ())#candidate|3200|()|var|uint64
var_3201 = relay.var("var_3201", dtype = "float64", shape = (1053,))#candidate|3201|(1053,)|var|float64
call_3198 = func_3197_call(var_3199,var_3200,var_3201,)
output = call_3198
func_3202 = relay.Function([var_3199,var_3200,var_3201,], output)
mutated_mod['func_3202'] = func_3202
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3336 = relay.const([[[-8.417932],[-7.148978],[-3.972236]],[[3.992261],[9.626391],[-2.090408]],[[5.245998],[4.436423],[6.611579]],[[-5.039902],[0.083733],[-5.302488]]], dtype = "float64")#candidate|3336|(4, 3, 1)|const|float64
uop_3337 = relay.exp(const_3336.astype('float64')) # shape=(4, 3, 1)
func_1532_call = mod.get_global_var('func_1532')
func_1535_call = mutated_mod.get_global_var('func_1535')
var_3347 = relay.var("var_3347", dtype = "float64", shape = ())#candidate|3347|()|var|float64
var_3348 = relay.var("var_3348", dtype = "float64", shape = (980,))#candidate|3348|(980,)|var|float64
call_3346 = relay.TupleGetItem(func_1532_call(relay.reshape(var_3347.astype('float64'), []), relay.reshape(var_3348.astype('float64'), [7, 14, 10]), ), 0)
call_3349 = relay.TupleGetItem(func_1535_call(relay.reshape(var_3347.astype('float64'), []), relay.reshape(var_3348.astype('float64'), [7, 14, 10]), ), 0)
func_1983_call = mod.get_global_var('func_1983')
func_1986_call = mutated_mod.get_global_var('func_1986')
const_3359 = relay.const([-9.809980,2.945764,-2.786159,4.098727,-0.223959,4.704982,-6.130495,6.666762,-9.718840,-3.095292,4.620565,1.083272,-1.522282,7.319247,4.626239,0.355427,-6.488442,1.515333,-6.832486,-8.818085,5.132870,-0.010189,-6.564446,9.512296,-1.495968,-2.847777,-4.771900,-0.949863,-5.973686,-2.697450,-3.948927,3.225372,-6.679039,5.681235,4.283307,-9.712560,-1.804689,-6.249166,-8.428211,2.405210,7.169407,-4.225257,8.699230,3.470594,9.159285,-8.477382,7.134509,-3.712048,-1.402495,0.747619,9.981597,-9.094708,-7.280771,-3.061197,-9.398937,-5.228510,8.129611,1.247927,6.449824,-1.231465,4.170463,-1.237537,-2.572619,-8.652769,-8.857690,-6.845765,7.238735,9.424367,-7.634740,-8.428804,-3.793087,-3.099781,-2.235207,-2.067428,-6.766010,-8.592197,9.781359,5.018434,5.378624,6.759121,5.848180,7.337223,-6.480543,-1.293830], dtype = "float32")#candidate|3359|(84,)|const|float32
call_3358 = relay.TupleGetItem(func_1983_call(relay.reshape(const_3359.astype('float32'), [14, 6])), 0)
call_3360 = relay.TupleGetItem(func_1986_call(relay.reshape(const_3359.astype('float32'), [14, 6])), 0)
func_1464_call = mod.get_global_var('func_1464')
func_1467_call = mutated_mod.get_global_var('func_1467')
const_3366 = relay.const([2.961435,-6.096839,3.936627,-2.358266,8.138427,-3.992791,4.411111,7.066692,9.473547,8.984693,8.252941,-3.565243,-3.232591,-5.016962,-5.771398,2.458408,8.496391,4.194938,-7.934293,-2.501636,4.894621,-5.396385,-0.862639,7.321929,6.151218,-6.354521,8.542160,-6.877015,7.870176,1.697182,6.375893,8.047122,7.138904,6.637437,-5.542687,6.333424,0.111324,-6.649376,7.129717,6.405496,-4.778790,5.574101,-0.409903,0.784553,-6.939760,3.846478,-9.042367,0.177806,2.047756,4.647152,-8.085675,-7.254313,9.993938,3.999794,-8.754470,4.926074,-1.333308,1.372351,1.758415,-2.467135,3.781060,7.268740,-1.686999,6.426178,-1.189204,5.829870,6.383298,-2.211253,0.582083,-9.956782,-7.610419,-9.247964,-1.572961,-1.532807,7.197421,-0.964718,-8.586954,-2.259006,-6.349121,4.675016,-7.633688,3.698601,-5.291533,-5.149434,4.648292,9.976709,3.328630,-8.157636,2.740741,9.744156,-2.968013,-6.541372,3.778568,6.556582,-0.755662,-8.593236,-2.541737,9.471684,9.226206,-8.418389,-1.331042,9.229927,5.495745,2.352673,-3.568997,8.580060,-6.122214,2.722302,-1.623725,0.309040,3.460138,-5.271838,9.113544,-5.817116,4.076026,2.079416,6.439681,1.738572,2.290407,1.283554,0.031803,-2.209713,-7.314311,-4.177319,-6.332731,-3.536939,6.219798,8.394740,-6.946731,-5.197614,-8.167855,5.184018,-4.837068,9.108365,5.471652,2.863480,9.507637,9.393748,7.759076,0.989704,7.158799,-5.227338,-6.099224,-0.158022,9.174787,-8.775392,-1.138852,1.697651,7.481718,-3.934218,-6.527486,3.333560,9.163775,6.777383,-9.153544,6.124695,-1.731105,6.391299,4.442072,9.479353,-3.544270,4.431690,2.260982,8.891571,8.211184,-9.982185,6.350359,5.835365,-9.862367,5.414645,9.982284,-8.025697,-2.654174,-5.384129,0.166197,2.840746,-0.208881,9.011793,9.506490,-5.728246,-2.377836,-5.761865,-0.222897,9.549787,7.288287,-8.709270,4.307685,-2.980952,-3.932642,8.358689,1.478549,1.007758,6.811660,5.594361,0.803991,9.745691,-8.643588,8.817272,-5.588703,0.745219,3.037562,-1.708213,7.608687,7.345409,-7.251748,9.190774,4.869318,4.446126,1.103026,8.717674,-4.253589,9.888197,9.381544,8.198605,6.736387,1.315185,-5.979576,1.956592,-6.434776,6.552733,7.274465,-1.845149,5.113753,-8.253307,4.635337,5.111793,-0.258321,-3.288452,7.304638,5.148941,5.253317,-9.525834,7.117526,4.985507,-5.337530,-2.760420,2.118213,-3.501360,-9.392814,-1.971208,-7.871195,2.670148,-6.630662,-9.394084,1.891036,-9.106289,-6.671020,5.293037,-1.057241,-4.186518,6.618370,-3.084144,0.641871,-5.396814,2.785507,8.720932,-4.011548,5.168974,5.025518,4.962865,8.855410,5.482572,-6.523740,0.416896,7.332736,3.635811,-6.358997,5.555647,-8.814672,6.203242,-4.130800,0.056259,9.290898,0.144387,3.434632,-4.706610,-0.641554,-9.448890,-7.991173,8.912574,1.843282,-2.879070,2.666294,-1.329452,3.214386,8.770487,-2.748258,2.902387,8.425119,-1.502103,3.246671,-0.615420,-3.428872,-6.427376,-0.115070,-8.754145,-0.134329,-5.240971,6.232943,9.367294,-5.662664,-5.180193,2.847182,5.808795,3.534781,4.807684,-1.345372,-6.166351,0.827908,4.526169,4.417114,7.760949,-9.409202,0.763760,-2.410528,6.516058,6.181858,-3.703461,8.086169,-2.846345,2.364623,3.307531,1.040181,5.916297,-6.738777,-8.106337,-6.435700,0.929186,5.221850,-1.890341,1.299797,3.339475,-9.080279,9.338397,0.969999,-3.175907,-3.941833,-7.119347,2.496183,-1.051068,-0.462158,9.413787,-3.039783,8.238569,7.353332,-1.511742,3.918868,-5.127096,1.044109,0.950202,2.333168,9.170558,5.616901,1.504064,1.465156,-1.638056,-5.895762,3.886629,-0.049467,2.808381,-7.935238,-6.334991,7.151534,6.308946,1.208700,2.643195,-9.547364,-8.463721,-0.795252,5.772411,9.966363,4.123993,5.277602,-0.270759,4.491837,-1.349151,8.590288,-7.138827,2.115823,6.966616,-4.977647,9.320964,-4.545844,9.137609,9.399874,-0.938831,-9.376259,-6.388730,-9.390913,-8.228813,-7.497870,-7.959262,8.368062,-8.288547,-0.325874,1.000023,-7.945156,-9.226116,-6.916347,0.457071,-0.620707,-8.529486,8.942196,-9.298375,-8.694322,-4.546988,5.051524,-2.641109,8.833320,9.167810,4.199926,-6.141524,9.977404,-8.003124,-7.619745,5.119968,7.867504,-1.470141,7.436698,6.246476,5.286550,-7.879119,-5.106457,5.586478,-6.098380,6.130724,-8.137826,3.754993,-5.917491,5.785535,-9.456592,6.493485,5.834947,-5.862137,4.027592,-9.889728,1.147395,6.058732,0.873308,5.406095,-8.305023,4.792281,5.444284,-2.650760,-4.249516,-0.982707,2.358317,3.004497,4.687939,7.973970,6.553238,2.015804,-9.201242,-7.995480,-7.198040,5.762705,-5.652685,7.896501,-8.109880,-3.047544,6.577799,2.764171,-4.542381,1.054405,-2.473062,-4.514582,-2.183408,8.205041,4.458561,5.523995,0.242546,-5.375351,5.607428,4.563633,0.607280,4.868819,6.064231,2.991452,7.845751,2.056334,9.240622,1.291202,-8.149904,7.185485,-4.005197,3.974968,6.488607,4.674491,2.217717,-0.214736,-8.692876,2.277123,-8.408111,-3.545683,-0.605897,-2.709082,7.488329,5.405268,-3.760267,6.092016,5.157650,-8.525029,-4.629578,-4.120081,5.377402,2.891064,-2.820329,4.285992,4.526537,-7.008864,8.174166,-7.740526,-6.535000,-6.542128,-7.197102,9.626286,-1.011304,-0.781499,5.662217,-0.758352,-8.898405,7.760751,9.608748,4.396581,-8.738049,-8.658513,-7.927894,-9.248717,-5.365791,1.367159,2.798706,5.339589,1.593447,-9.370018,-5.120801,0.278211,-2.870615,2.137016,9.663416,6.829422,-5.963817,4.533890,-9.758896,2.523689,2.168419,1.225921,1.999127,-7.087023,-1.144436,1.242055], dtype = "float32")#candidate|3366|(550,)|const|float32
call_3365 = relay.TupleGetItem(func_1464_call(relay.reshape(const_3366.astype('float32'), [550,])), 2)
call_3367 = relay.TupleGetItem(func_1467_call(relay.reshape(const_3366.astype('float32'), [550,])), 2)
output = relay.Tuple([uop_3337,call_3346,var_3347,var_3348,call_3358,const_3359,call_3365,const_3366,])
output2 = relay.Tuple([uop_3337,call_3349,var_3347,var_3348,call_3360,const_3359,call_3367,const_3366,])
func_3370 = relay.Function([var_3347,var_3348,], output)
mod['func_3370'] = func_3370
mod = relay.transform.InferType()(mod)
var_3371 = relay.var("var_3371", dtype = "float64", shape = ())#candidate|3371|()|var|float64
var_3372 = relay.var("var_3372", dtype = "float64", shape = (980,))#candidate|3372|(980,)|var|float64
output = func_3370(var_3371,var_3372,)
func_3373 = relay.Function([var_3371,var_3372,], output)
mutated_mod['func_3373'] = func_3373
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3560 = relay.var("var_3560", dtype = "float32", shape = (2, 12, 5))#candidate|3560|(2, 12, 5)|var|float32
uop_3561 = relay.log(var_3560.astype('float32')) # shape=(2, 12, 5)
bop_3563 = relay.logical_or(var_3560.astype('bool'), relay.reshape(uop_3561.astype('bool'), relay.shape_of(var_3560))) # shape=(2, 12, 5)
output = bop_3563
output2 = bop_3563
func_3567 = relay.Function([var_3560,], output)
mod['func_3567'] = func_3567
mod = relay.transform.InferType()(mod)
var_3568 = relay.var("var_3568", dtype = "float32", shape = (2, 12, 5))#candidate|3568|(2, 12, 5)|var|float32
output = func_3567(var_3568)
func_3569 = relay.Function([var_3568], output)
mutated_mod['func_3569'] = func_3569
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3571 = relay.var("var_3571", dtype = "float32", shape = (2, 4))#candidate|3571|(2, 4)|var|float32
uop_3572 = relay.sqrt(var_3571.astype('float32')) # shape=(2, 4)
output = uop_3572
output2 = uop_3572
func_3574 = relay.Function([var_3571,], output)
mod['func_3574'] = func_3574
mod = relay.transform.InferType()(mod)
var_3575 = relay.var("var_3575", dtype = "float32", shape = (2, 4))#candidate|3575|(2, 4)|var|float32
output = func_3574(var_3575)
func_3576 = relay.Function([var_3575], output)
mutated_mod['func_3576'] = func_3576
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3675 = relay.const([[[9.795101,2.162440,2.415509,-8.459401],[-1.217154,1.645026,-5.780812,1.400881],[3.608135,5.394222,2.297244,3.153120],[-1.747405,8.788136,-4.529775,-1.036258]],[[3.120556,5.387672,1.883250,8.313575],[-6.870267,-7.061184,5.698411,-1.387632],[8.245350,-8.744152,5.751525,-0.757178],[-0.341537,1.357034,-8.963719,-9.628394]],[[3.969747,2.856210,2.371676,-6.147171],[9.888453,-8.082139,-2.955137,7.278757],[1.115121,-3.774732,6.794012,-3.709917],[5.339720,4.946306,6.389151,3.079340]],[[7.995008,5.955618,3.515731,-6.024108],[9.555863,0.234435,-0.029121,8.722520],[7.285794,-7.559099,-9.117678,-0.726972],[-1.393475,-4.530154,8.945653,-7.393160]],[[-1.595081,3.316638,-6.104020,-6.360838],[-7.221181,6.522568,8.466714,-9.390852],[0.098935,7.925669,-8.536093,3.600151],[7.564406,-7.486956,5.507867,-3.763841]],[[4.912743,-7.990539,3.953040,8.200915],[-9.297112,-5.364623,4.560323,-3.609196],[-6.303390,-9.857251,3.967645,2.354578],[0.805746,4.170368,5.575950,-7.087555]],[[9.024621,-9.408016,-4.553938,6.856281],[-4.442689,-6.477999,-3.259378,-6.564525],[-8.190160,8.750774,-2.008025,1.191831],[4.796620,7.016555,-1.784903,8.937766]],[[-4.749498,-6.732534,0.941271,6.752512],[-2.121092,1.181347,2.730911,1.076897],[-4.467805,9.814626,6.304810,4.566575],[-1.474758,6.927123,-3.117530,-2.903693]],[[-1.358201,8.482479,-0.536534,-1.060066],[-4.036719,-0.849173,3.442257,-2.908488],[-1.286890,1.832763,-4.834346,-7.419002],[6.395242,2.738174,-8.975419,-8.729131]],[[-7.825336,-4.631927,-3.075970,5.733781],[-3.905034,-9.144086,0.114024,-8.057546],[3.600801,-1.931709,-9.192001,-6.378328],[-2.653766,7.232306,6.235352,-6.788915]]], dtype = "float32")#candidate|3675|(10, 4, 4)|const|float32
var_3676 = relay.var("var_3676", dtype = "float32", shape = (10, 4, 4))#candidate|3676|(10, 4, 4)|var|float32
bop_3677 = relay.mod(const_3675.astype('float32'), relay.reshape(var_3676.astype('float32'), relay.shape_of(const_3675))) # shape=(10, 4, 4)
output = bop_3677
output2 = bop_3677
func_3680 = relay.Function([var_3676,], output)
mod['func_3680'] = func_3680
mod = relay.transform.InferType()(mod)
var_3681 = relay.var("var_3681", dtype = "float32", shape = (10, 4, 4))#candidate|3681|(10, 4, 4)|var|float32
output = func_3680(var_3681)
func_3682 = relay.Function([var_3681], output)
mutated_mod['func_3682'] = func_3682
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3692 = relay.var("var_3692", dtype = "uint64", shape = (11, 7, 11))#candidate|3692|(11, 7, 11)|var|uint64
var_3693 = relay.var("var_3693", dtype = "uint64", shape = (11, 7, 11))#candidate|3693|(11, 7, 11)|var|uint64
bop_3694 = relay.bitwise_and(var_3692.astype('uint64'), relay.reshape(var_3693.astype('uint64'), relay.shape_of(var_3692))) # shape=(11, 7, 11)
uop_3700 = relay.tan(bop_3694.astype('float32')) # shape=(11, 7, 11)
const_3702 = relay.const([[[0.976366,-0.194842,-2.352584,-7.608982,-8.807568,-3.626717,-1.512523,4.789117,-0.128348,-5.977828,-9.283917],[8.496653,-5.383517,1.871620,-6.660550,4.423447,6.437620,0.078670,-1.954120,0.528172,-8.240954,9.152690],[-1.154965,0.818985,8.793959,3.063725,-2.353557,8.240688,1.862771,6.881307,-1.417921,-6.722289,-9.683256],[9.250599,7.567193,2.271824,-3.808548,-8.964114,8.357353,-1.936384,6.072152,-6.171027,-8.967058,7.698368],[2.480578,4.181142,3.306764,0.259683,-1.992411,-2.540690,-7.463191,1.528403,3.875159,9.797079,6.705463],[0.037592,-6.883725,-5.993758,9.395010,-0.653382,-1.050763,-0.285938,3.627482,2.417302,-1.495807,-5.362678],[-1.653306,-0.752400,0.997033,-8.072338,7.678461,-1.657222,-9.564633,-4.467427,-4.405668,-4.720035,-3.937844]],[[-3.724140,-0.838587,8.875389,-1.987518,9.037379,-5.208226,-8.963019,-0.072025,-7.938698,-1.986348,1.384879],[-8.590914,-7.189136,-5.272399,2.993255,-3.889843,1.009930,-6.709925,5.053998,-4.148192,7.593830,-6.376153],[-8.200713,-5.513784,-0.909774,1.363189,6.265936,9.859636,-7.480265,-8.153028,6.698133,-6.409346,-6.540180],[6.745892,6.085399,-0.911198,-9.337235,-2.108050,4.010863,-6.517145,7.191351,2.426482,4.072980,-4.481889],[7.327526,2.001136,1.600814,3.974974,-6.864870,-1.014498,-9.693047,-1.138258,0.948353,5.878935,-4.585722],[0.351605,-9.985359,-9.725658,9.798877,3.101572,-5.907355,4.807171,-8.636026,1.887881,-6.772346,-1.837957],[-9.606027,4.505307,7.886769,7.914772,-8.576952,7.255724,0.128886,-0.625273,3.422163,0.045494,7.716298]],[[6.144099,5.401113,-6.330101,-1.984481,-4.116251,-1.869346,2.887006,2.523816,4.001733,1.068994,-1.467033],[-5.175612,8.571791,-1.699609,0.093725,-1.091646,-5.669071,3.799761,8.387404,7.028322,2.350439,0.789734],[-3.588018,8.600735,1.499447,-3.964026,4.238999,-9.417329,-6.506960,-0.708957,-9.058475,9.976448,-7.444551],[-5.945626,-3.315390,-7.507794,9.846493,-9.500244,-9.464187,1.405567,-0.349147,5.854298,-9.179019,1.149121],[-8.426752,2.640125,-9.578182,4.483842,3.695172,-7.140428,-2.222767,9.052853,-3.810452,6.380865,5.879636],[-9.269832,-9.674265,-6.238322,-8.236838,-1.967687,5.579616,9.955318,-2.188294,-9.006464,-7.531318,5.243550],[4.145254,-1.418448,5.035752,-3.397052,-0.985262,-4.206821,-6.364989,-6.758488,-5.325193,-6.940305,-3.103074]],[[6.555024,-3.239316,-6.739748,-8.705195,4.253298,4.544067,-0.401551,9.103693,3.204958,4.918691,0.539744],[-5.348944,-5.518657,-7.474979,-0.985089,9.558336,9.065315,-9.450086,-5.321676,5.324222,-4.366300,-5.522965],[2.895474,-0.028957,8.467085,6.363527,0.217098,-8.273614,-2.898575,-4.805883,6.400382,4.736689,-5.464033],[1.397400,-1.074710,-8.971266,6.957575,8.887354,0.813595,7.366199,-9.171989,8.249792,3.440905,2.358861],[-9.605567,-1.167706,7.513607,-9.609435,6.630773,7.606823,-9.583656,5.519872,-5.946412,0.560609,-5.516414],[-3.470987,9.476407,-5.345383,-0.795718,-4.170258,-2.188430,-8.783410,-0.687124,2.949724,-0.662598,-4.648549],[-1.750756,-6.640222,-7.116643,-1.377566,2.903501,6.888647,-3.378932,6.777487,-3.939122,2.180646,-2.669167]],[[-2.659428,-9.599513,6.130459,-4.496361,-4.737590,5.488992,0.358046,-9.641852,-5.895925,5.636439,-6.366853],[0.835411,-6.695534,8.498970,-3.740270,0.656248,0.533668,-7.009676,8.434640,-3.240195,-4.053851,-5.502072],[3.929050,7.288052,-0.526765,-6.474590,6.242394,-9.559989,9.399944,4.251401,-7.450397,-2.933443,1.326706],[-0.897474,-5.390661,-1.733402,-0.875900,-9.517701,0.364395,0.593419,-8.486625,-8.337295,4.570559,6.225564],[-8.370738,8.076076,-5.858401,-3.263347,-0.138728,-2.408256,3.491817,7.646040,4.626288,-9.710204,-8.061340],[3.601274,5.557824,-3.506219,-1.038259,0.787245,-3.863070,9.443362,-9.927291,-1.217747,-2.161365,8.322371],[6.617934,3.572781,4.510113,0.014876,7.347515,-2.777827,-2.045668,-4.220805,6.259251,-9.268855,-6.281747]],[[-0.519353,1.933372,4.218480,4.666957,-0.467248,-8.063101,6.766093,3.543072,1.236914,2.923642,3.937132],[-0.183465,0.972633,9.981269,4.074928,3.274228,-0.055584,5.705629,2.386731,3.816650,6.701744,0.296168],[6.999045,-3.527840,-8.522199,-5.668003,3.231794,4.745053,-0.220334,-8.447838,-4.887450,9.266310,2.391035],[-8.247086,2.569835,-8.374710,4.549682,-0.919907,-6.243870,7.225913,-3.972732,-5.463205,-9.857362,-8.534116],[-2.234368,1.241636,7.713006,4.531882,1.980423,9.305295,3.800088,5.850095,0.480556,5.150113,-3.669996],[-0.406214,6.834113,5.475647,-1.708116,-6.759145,-0.793944,3.166369,1.028801,-6.204755,8.090057,5.147736],[8.350677,6.289314,-2.921078,-2.813066,-1.215197,-8.370285,6.865367,6.740234,4.386946,-1.813629,6.022521]],[[8.055829,4.323775,3.944720,2.636069,4.245668,-7.932644,-8.682632,-7.305869,8.468697,4.783788,-3.239346],[5.262375,4.290525,9.655233,0.738070,9.529837,9.773891,-9.428925,0.729032,-8.163677,2.780849,-4.757710],[8.476835,-8.806655,4.739404,-5.473503,8.992384,5.227149,1.307234,-2.640282,-8.254014,5.958621,-3.923765],[-4.846702,-9.322073,8.293488,3.976034,2.003908,-6.603183,-2.517129,2.696837,8.265696,-3.285963,3.576936],[1.848262,-8.623276,-3.258292,-4.883969,-4.028546,-8.543649,5.050082,-9.683105,1.020081,7.164488,4.461729],[1.665099,7.002160,2.286231,-3.692319,5.322239,2.649536,0.192829,8.719653,-0.385255,-5.250119,-1.473375],[-6.833235,8.910008,-1.623444,4.761018,-0.530303,9.937599,5.203575,0.896929,6.504042,-4.422803,2.816838]],[[-6.730117,8.313283,-0.543950,-4.631299,1.856524,7.794477,-1.036983,7.320404,3.758553,5.349487,0.470276],[-2.881238,-9.296273,2.011381,-0.969318,-9.778373,-7.709658,3.124710,5.117987,1.283029,7.492043,6.808401],[6.266402,5.989695,-9.596608,1.969363,-5.090037,2.212124,0.122680,9.939595,7.672946,4.320665,8.380239],[-9.013800,-1.289316,1.512473,-0.383235,2.221382,7.065190,-9.974629,5.973616,-6.140491,1.088387,-8.124523],[-2.719350,-6.112963,5.294989,8.945821,1.276003,-0.106779,-0.606677,8.412728,-2.691406,-9.399345,9.694131],[-3.661362,-9.092180,-9.616520,-8.563650,-1.226658,-1.450442,-1.966990,-8.201454,-8.613182,2.285728,4.986046],[-9.349806,-8.587950,-0.028612,9.992103,8.706865,-3.323218,-7.193475,-2.713104,-6.015380,1.942308,8.153933]],[[-4.227948,-4.657762,5.678943,8.441989,3.337736,4.572406,5.118357,-0.277742,-0.885159,-6.857447,0.521845],[0.432187,2.422442,-9.406211,6.663901,-7.078460,-9.291390,-2.805827,-8.935226,-9.452129,-6.285110,8.000445],[9.103558,-3.571791,1.045997,0.501853,2.333220,-5.231490,-7.283177,7.589522,3.199863,1.797995,-3.780592],[4.081146,-8.996292,-7.401182,-0.117270,-6.345737,2.880866,4.991207,2.623885,0.531436,0.420666,7.260491],[0.053662,0.013026,-3.920858,-5.634418,2.209720,4.540014,6.013501,-0.368004,9.262888,-1.286404,2.562016],[4.112532,-3.209295,0.694534,4.531672,1.404011,3.472327,4.590243,0.313224,4.717665,0.122712,-1.378329],[-2.886489,-7.340506,9.668178,0.316783,-8.400657,6.777979,5.916186,8.382643,4.261294,1.059774,8.518531]],[[-6.356895,-2.890480,0.935780,-2.939253,6.396873,-0.717543,-0.302428,-8.559953,-5.369101,3.097373,8.247579],[-5.950003,7.803089,9.464946,8.223578,0.059400,8.938425,0.155076,1.006470,8.521877,-9.310011,0.055368],[7.445908,-6.130692,-2.631234,-2.657853,0.637906,-0.947181,-9.408653,9.079533,2.388755,-3.075149,5.020658],[5.485311,2.194900,5.225783,5.902165,2.488121,-6.624507,-4.372479,7.236778,-0.955751,-2.061340,1.508122],[-4.883702,-2.374304,0.730085,-5.558700,-6.309351,6.867577,-9.680986,8.400350,7.389699,0.469808,7.588837],[3.243866,-9.216377,0.589355,-0.058937,3.894922,2.366985,-0.519187,-7.556901,0.561037,2.792359,9.234682],[9.580086,7.815490,8.704447,-8.186360,-1.464700,2.479751,0.468444,5.557837,9.617511,-2.153903,-1.488950]],[[7.311665,-0.611136,5.592453,3.792322,1.860188,-7.843325,-3.313682,6.966511,-7.454967,-9.505196,-7.422447],[-3.710030,2.761961,8.177990,-2.613508,4.751614,-7.697905,4.858689,7.299068,-5.247339,4.970506,9.383901],[-9.659302,6.711210,-2.480562,-1.551153,1.322030,0.661184,-0.578097,3.574490,-3.414073,-1.662025,-4.943278],[2.920511,0.627041,-4.532469,-6.976783,-1.305425,0.678945,2.005053,6.214138,-6.764129,-1.834012,0.210357],[-3.452239,3.481885,4.113095,-7.718204,1.489947,0.224645,4.622440,-7.289599,5.597924,0.619357,-1.750433],[8.323032,-2.367546,-9.713583,6.054416,-1.791838,-3.928281,-9.801922,0.358622,0.388418,-9.041921,1.725677],[2.997781,6.036236,-0.643690,5.905092,7.470268,-9.494221,-9.742900,-4.032771,0.747076,-1.559967,6.627949]]], dtype = "float32")#candidate|3702|(11, 7, 11)|const|float32
bop_3703 = relay.subtract(uop_3700.astype('uint8'), relay.reshape(const_3702.astype('uint8'), relay.shape_of(uop_3700))) # shape=(11, 7, 11)
func_232_call = mod.get_global_var('func_232')
func_235_call = mutated_mod.get_global_var('func_235')
const_3709 = relay.const([[-4.712052,-3.258750,-3.202212],[9.941524,1.346178,6.298796],[8.756604,-4.796968,-5.610534],[0.618266,-9.816686,-8.553950],[-9.707180,-5.473605,-3.146040],[9.783592,-7.376117,-5.642442],[2.587190,-1.674642,0.254956],[-1.909509,-1.778338,2.219178],[-3.641970,-0.067585,-6.718258],[-9.950089,-1.309590,-9.781302],[8.824122,-3.348884,1.865747],[9.550734,-1.780704,1.856911],[9.573738,-7.811152,-1.295827],[-2.908783,-0.729486,-5.962755],[5.081831,4.812769,8.801108],[-4.082846,-5.595135,-2.468459],[-7.402042,-8.721370,3.780134],[-4.470800,0.725955,-5.389650],[-6.848492,4.883510,-3.643221],[-8.273461,-9.788287,7.216956],[4.202995,8.795099,-2.290461],[6.234474,1.516711,2.263962],[3.984263,2.939184,-1.148315],[3.822965,-6.704690,3.185631],[-3.768413,4.505407,-2.325139],[-0.048067,-1.579903,9.848362],[5.486797,0.969335,-6.693418],[1.437160,8.815032,4.946519],[5.515764,-0.493232,7.396942],[-6.953658,2.454625,-9.022971],[-0.590597,6.365147,-4.891797],[-1.962268,6.060516,-1.768118],[-1.286127,-6.993786,-3.362171],[-8.979169,-0.053425,-7.140328],[-8.189637,8.056016,-5.338065],[5.604412,-5.755907,7.210693],[5.734409,-6.108739,-1.288906],[1.298270,-8.741916,-0.446302],[4.139694,-7.939274,7.616374],[2.168705,9.107372,-6.777716],[-6.804456,2.528996,-6.548419],[-9.005850,-0.708100,1.591752],[9.395360,6.137532,-9.160944],[2.095318,-5.353549,0.726311],[-5.491970,-4.141382,1.950421],[8.615993,-2.630132,-0.846633],[8.973231,6.347846,4.853391],[-6.507393,7.152141,-7.733189],[9.196089,5.368444,-0.733048],[-3.975249,1.028776,-6.827429],[9.448188,-6.942371,-4.259737],[-8.797232,5.672735,7.098837],[-4.909491,-7.335212,-2.872015],[9.498725,-7.741559,1.965171],[0.982762,5.219198,-1.282202],[8.029990,9.554936,-4.035466],[-1.244388,0.083782,-9.028308],[-5.253967,1.768582,-9.711660],[-2.218015,0.283518,-1.411097],[8.162463,-4.199686,-0.766410],[-4.004685,-0.360013,3.510258],[-1.369172,-3.453645,-5.463640],[-1.024531,0.871102,6.291689],[3.878107,-1.869165,-9.265613],[-1.461618,-6.771164,-8.748351],[1.842160,7.133942,-7.037230],[-1.663003,-4.395038,-6.100836],[1.842730,-2.864711,-3.939687],[-9.671075,7.041755,2.332382],[7.465403,5.029609,-7.236438],[-1.009368,-3.620600,-0.688928],[5.323689,1.401722,5.187015],[-3.056020,3.339298,6.744837],[-3.482902,2.593251,-3.400727],[9.941497,-6.579473,-1.920179],[-0.758013,6.772683,-9.514903],[5.393568,-8.300946,7.914225],[-8.193399,7.725978,-4.591016],[-3.672207,-7.969405,-7.894210],[-0.331386,5.412149,-0.833396],[3.228207,-2.295877,-9.529696],[-6.300479,-9.061635,-9.629629],[-5.525078,0.642290,-7.985572],[1.051135,-0.310529,5.334433],[-0.797539,-6.395351,-4.732642],[0.974385,1.314797,-3.355955],[-7.049159,5.137526,-5.093869],[7.451176,7.266828,-5.310403],[-9.534105,-9.502978,3.345474],[-0.131431,2.308355,3.952856],[3.681756,7.710521,1.628819],[-4.077704,9.948498,-8.338108],[-9.294143,-4.660341,8.962930],[7.614432,-4.702487,-5.646876],[5.911488,-0.820720,-8.223204],[5.308994,-7.608824,-3.508947],[-9.511718,-0.430363,4.603717],[9.259359,-3.257128,2.767148],[-7.559986,4.919512,-7.708575],[4.037616,-1.510231,-2.222442],[8.903363,3.300556,-4.935612],[6.660820,-1.408413,-2.762071],[0.244806,2.418593,-6.578481],[9.071519,-8.892321,4.572574],[-6.115992,-3.813618,-1.837714],[5.108853,-0.242624,-6.531658],[3.661157,-8.681837,9.644703],[1.816923,-2.204764,-1.393878],[6.159947,-2.921238,-6.734597],[-5.543975,-1.458474,-8.597740],[1.939962,-7.754239,-7.070644],[-3.182680,6.705363,8.258663],[-6.910023,5.599845,-5.333923],[2.196217,7.422196,2.096009],[6.723811,-8.852154,-4.693629],[4.368317,1.785081,-2.275029],[-5.093022,6.027859,5.135174],[-3.375233,3.184362,-8.103457],[6.332752,5.048277,7.663553],[-3.439098,-4.754893,-5.846072],[1.016102,-0.635653,-1.477449],[-3.979047,0.977003,-7.543608],[3.495259,-3.950240,-2.369276],[-2.794885,-2.698781,-6.211263],[-2.519619,5.683808,5.503230],[0.085120,0.295375,5.180433],[-8.708458,-3.332206,2.284697],[-7.179073,9.222311,7.193352],[-6.662268,2.512893,8.424461],[-4.508272,-5.665994,-4.492387],[-1.757866,9.743030,1.327843],[4.986217,-3.492029,-4.829660],[-3.687208,-9.975816,3.440074],[0.991226,3.657471,3.252683],[-9.195609,-3.374111,1.762364],[-4.034746,5.199875,7.542833],[1.391156,-5.592257,-2.099345],[4.501337,-0.929658,-7.290798],[-3.401307,7.036977,-5.557397],[-1.012892,-6.111979,7.207665],[-2.345262,4.440160,0.662212],[-6.373969,5.654826,0.413189],[5.527266,-4.184479,-8.309704],[-0.433878,-9.191531,8.950781],[-0.531265,5.392551,-3.516787],[-0.662682,5.463215,-5.705014],[-9.257040,4.424044,-2.270173],[8.058798,3.109474,6.483074],[-7.813558,-0.979679,4.749789],[3.262055,-6.705612,-9.765456],[0.482326,9.171958,8.151380],[-5.260487,-7.659396,8.395231],[-3.559384,2.345370,2.168902],[5.555952,-1.174139,-3.438627],[5.354234,3.992361,7.058706],[0.442703,-5.890147,4.183528],[-2.713285,4.924510,8.973384],[0.372217,1.065321,5.362584],[7.025096,-4.104150,1.150105],[2.172979,-9.578895,-7.769838],[5.971986,-3.553909,-9.025496],[7.298327,5.563982,0.574527],[4.136012,-6.222587,0.872625],[7.611235,8.559231,-7.371192],[7.187778,9.038977,-8.622411],[8.502310,7.759589,8.749058],[5.580358,9.445442,0.847147],[4.142566,6.598909,0.439400],[6.391949,-1.846662,-2.356741],[4.345240,-0.172790,7.338543],[-1.936875,-2.703474,7.534865],[7.802502,-9.445563,7.080677],[-6.830077,1.959031,3.458436],[-0.076330,2.806522,7.439521],[-3.380138,3.962300,8.123055],[5.653939,2.124415,-2.386450],[-9.348668,6.773092,-8.603712],[-2.270503,0.069380,-4.614782],[1.092920,-7.982902,4.106241],[-9.921545,-4.716363,9.336742],[9.948937,-3.240652,-4.177020],[0.564820,-8.792765,-8.919713],[5.600130,8.984217,-8.735712],[8.726578,5.749527,-3.005964],[3.837647,-7.289829,8.193254],[-1.141790,-8.613202,8.572372],[7.649335,1.722045,-5.081687],[-0.549242,4.566379,-5.255644],[8.190470,4.019115,4.575543],[-1.693454,-7.788610,4.477096],[-7.164154,-3.617416,-9.822784],[8.437349,-4.400861,9.114217],[-2.671356,9.100909,-1.457274],[2.113408,5.805878,-4.778560],[5.646209,-8.090494,3.252500],[9.753935,7.801826,-5.907250],[7.813859,8.589462,8.570893],[-8.199782,-8.552801,9.531919],[-6.746020,-4.106693,5.385817],[-9.888118,8.204577,-7.764111],[-3.157415,-5.035453,-9.269986],[9.923847,0.838696,4.294366],[-0.849032,-1.137338,1.543453],[1.388847,1.582596,-9.047485],[-7.321343,6.639799,2.407319],[-8.526928,3.854125,6.319588],[5.202338,1.144039,7.568976],[8.681963,8.171907,-0.817922],[8.421937,-7.097523,1.766515],[4.848381,8.324329,-5.064755],[9.453819,2.179299,9.709757],[-7.609984,7.775312,8.707561],[-3.277307,-5.061098,4.396528],[9.911325,-0.632029,3.436783],[-6.661481,2.942949,6.411060],[-9.134457,-6.803508,4.025855],[-5.828694,7.965264,3.147987],[-2.854516,8.469408,7.279521],[4.749402,-3.128579,-4.595325],[0.085991,-8.333033,8.068275],[-8.292285,-5.853125,8.232701],[6.468692,6.169952,4.668070],[9.827462,4.657653,6.241611],[6.914311,7.812575,-3.232662],[9.894736,-0.038132,3.788890],[3.197454,2.899833,-1.022899],[0.192959,-2.932846,-7.602267],[-3.949361,0.034937,8.861158],[-3.925188,4.654672,-2.469993],[-4.125692,8.664651,1.000948],[-4.344913,4.351414,3.845695],[-5.090845,1.644479,3.745936],[-4.095616,6.898048,5.622410],[-6.086563,-1.856518,1.671937],[-7.279666,-7.188390,-2.215428],[-0.335020,0.345704,-5.513687],[3.710692,9.138284,3.786242],[0.465116,-8.885735,1.685724],[1.214113,-7.907342,8.976100],[-5.447539,4.047393,-1.179999],[-0.452536,-4.394006,-3.067861],[-5.426713,3.292326,-7.616834],[5.513732,-0.583686,-6.848248],[8.186970,-6.392610,7.745590],[-1.403608,2.645004,2.197620]], dtype = "float64")#candidate|3709|(245, 3)|const|float64
const_3710 = relay.const([[8.890011,-2.471696,7.738126,8.809068,-1.846803,4.464183,-4.730972,-5.695343,-0.816238,-1.089584,1.851091,-4.830053,3.902884,7.945048,1.643683,-7.735601,-4.622302,7.522210,9.294857,-4.569910,-6.216993,7.349195,3.534638,1.990604,9.270581,-0.486547,8.274263,6.440340,-6.187158,-3.229594,3.187752,-6.009902,-5.263577,-7.652336,7.990960,8.882105]], dtype = "float64")#candidate|3710|(1, 36)|const|float64
call_3708 = relay.TupleGetItem(func_232_call(relay.reshape(const_3709.astype('float64'), [7, 7, 15]), relay.reshape(const_3710.astype('float64'), [1, 36]), ), 0)
call_3711 = relay.TupleGetItem(func_235_call(relay.reshape(const_3709.astype('float64'), [7, 7, 15]), relay.reshape(const_3710.astype('float64'), [1, 36]), ), 0)
func_2385_call = mod.get_global_var('func_2385')
func_2388_call = mutated_mod.get_global_var('func_2388')
const_3713 = relay.const([9,-4,-5,5,-8,6,-2,-10,-7,1,4,4,-8,5,7,-9,-6,-5,5,-4,-6,1,-5,-9,7,-8,5,6,1,9,-5,-4,-9,-6,7,-9,2,3,2,8,1,2,-7,3], dtype = "uint8")#candidate|3713|(44,)|const|uint8
call_3712 = func_2385_call(relay.reshape(const_3713.astype('uint8'), [11, 4]), relay.reshape(const_3713.astype('uint8'), [11, 4]), )
call_3714 = func_2385_call(relay.reshape(const_3713.astype('uint8'), [11, 4]), relay.reshape(const_3713.astype('uint8'), [11, 4]), )
bop_3718 = relay.logical_and(uop_3700.astype('bool'), relay.reshape(bop_3694.astype('bool'), relay.shape_of(uop_3700))) # shape=(11, 7, 11)
var_3723 = relay.var("var_3723", dtype = "float32", shape = (11, 7, 11))#candidate|3723|(11, 7, 11)|var|float32
bop_3724 = relay.greater(uop_3700.astype('bool'), relay.reshape(var_3723.astype('bool'), relay.shape_of(uop_3700))) # shape=(11, 7, 11)
const_3735 = relay.const([[[True,False,False,True,False,False,True,True,True,True,False],[True,False,True,True,False,False,True,True,False,True,True],[False,False,True,False,True,False,False,False,False,True,False],[False,True,False,False,False,True,True,True,False,True,True],[True,False,False,True,True,True,True,True,False,True,True],[True,True,True,False,True,True,False,True,True,True,False],[True,True,False,False,True,True,False,False,True,False,False]],[[True,True,False,False,True,True,True,False,False,False,False],[True,False,True,False,True,False,True,False,False,False,True],[False,True,False,False,True,False,True,True,True,False,True],[True,False,False,False,True,False,False,False,False,False,False],[False,False,True,False,False,True,True,False,True,True,True],[True,True,True,False,False,False,True,False,True,False,True],[True,False,False,False,False,False,False,False,True,False,True]],[[False,True,True,False,False,True,True,True,True,False,True],[False,False,True,False,True,False,False,True,True,True,True],[True,True,False,False,False,False,True,False,True,True,True],[False,True,True,False,False,True,True,True,False,True,True],[True,True,True,True,True,False,False,True,False,False,False],[False,False,False,False,True,True,False,False,False,False,False],[False,False,False,True,True,True,True,False,True,False,False]],[[False,False,True,False,False,False,False,False,True,False,False],[True,True,True,False,True,False,True,True,False,True,False],[False,False,True,False,True,False,True,True,False,True,True],[True,True,False,False,False,False,True,False,True,False,True],[False,True,False,False,False,False,False,True,False,True,True],[True,True,False,True,False,True,True,True,True,True,False],[True,True,False,True,False,True,False,False,False,True,True]],[[True,True,True,True,False,False,True,True,True,False,False],[True,False,False,True,True,True,False,False,True,True,True],[False,False,True,True,True,False,True,False,True,False,True],[True,True,True,True,False,False,True,True,False,False,True],[False,True,False,True,True,True,True,False,False,True,True],[False,False,False,False,True,False,True,False,True,False,True],[True,False,False,True,True,True,False,True,False,False,True]],[[False,False,False,True,True,True,False,False,False,False,False],[False,False,True,False,True,True,True,False,True,False,False],[True,False,True,False,False,False,False,False,True,False,False],[False,False,True,True,False,True,True,False,True,True,False],[True,True,True,False,False,True,True,True,True,False,True],[False,False,True,True,False,True,False,True,False,False,True],[True,True,True,True,False,True,False,True,True,True,False]],[[False,False,True,False,True,False,True,False,True,False,False],[False,True,True,True,True,False,True,False,True,True,True],[False,False,False,True,False,True,False,False,False,False,False],[True,False,True,True,False,True,False,False,False,False,True],[True,True,False,True,True,False,False,False,False,False,False],[False,True,False,True,True,False,True,True,False,False,False],[False,True,False,True,True,False,True,True,True,False,True]],[[True,True,False,False,True,False,False,True,False,False,False],[False,True,True,True,True,True,True,True,True,True,True],[True,True,False,True,False,False,False,True,True,True,False],[True,True,False,True,True,True,True,True,False,True,True],[True,False,False,False,False,True,True,True,False,False,False],[True,True,True,True,True,False,False,True,False,True,False],[False,False,False,False,True,True,False,False,False,True,True]],[[False,False,True,False,True,False,False,False,True,True,True],[False,False,True,False,False,False,False,True,False,True,True],[False,True,False,False,True,True,False,False,False,True,False],[True,True,False,True,True,False,False,True,True,False,True],[False,False,False,False,True,True,True,False,True,True,True],[True,True,False,False,False,False,False,True,True,True,False],[True,True,True,True,True,False,False,False,False,True,False]],[[False,True,True,True,False,True,False,False,False,False,True],[False,False,True,True,True,False,False,False,False,True,True],[False,False,True,False,False,True,False,True,True,False,True],[True,False,True,False,False,True,True,False,True,True,True],[False,False,False,True,False,False,True,True,False,True,True],[True,False,False,False,False,True,True,True,False,False,True],[False,True,True,True,False,False,False,True,True,True,False]],[[True,False,False,True,True,False,True,True,True,False,True],[True,False,True,True,False,False,True,False,True,True,True],[True,True,True,True,True,True,False,False,True,True,False],[True,False,False,True,False,True,True,False,False,False,True],[True,True,True,False,True,True,True,False,True,False,True],[False,True,True,True,True,True,False,False,False,False,True],[False,True,True,True,False,True,True,True,False,False,False]]], dtype = "bool")#candidate|3735|(11, 7, 11)|const|bool
bop_3736 = relay.right_shift(bop_3718.astype('uint8'), relay.reshape(const_3735.astype('uint8'), relay.shape_of(bop_3718))) # shape=(11, 7, 11)
uop_3742 = relay.acos(bop_3718.astype('float64')) # shape=(11, 7, 11)
output = relay.Tuple([bop_3703,call_3708,const_3709,const_3710,call_3712,const_3713,bop_3724,bop_3736,uop_3742,])
output2 = relay.Tuple([bop_3703,call_3711,const_3709,const_3710,call_3714,const_3713,bop_3724,bop_3736,uop_3742,])
func_3744 = relay.Function([var_3692,var_3693,var_3723,], output)
mod['func_3744'] = func_3744
mod = relay.transform.InferType()(mod)
var_3745 = relay.var("var_3745", dtype = "uint64", shape = (11, 7, 11))#candidate|3745|(11, 7, 11)|var|uint64
var_3746 = relay.var("var_3746", dtype = "uint64", shape = (11, 7, 11))#candidate|3746|(11, 7, 11)|var|uint64
var_3747 = relay.var("var_3747", dtype = "float32", shape = (11, 7, 11))#candidate|3747|(11, 7, 11)|var|float32
output = func_3744(var_3745,var_3746,var_3747,)
func_3748 = relay.Function([var_3745,var_3746,var_3747,], output)
mutated_mod['func_3748'] = func_3748
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3826 = relay.var("var_3826", dtype = "float32", shape = (8, 7))#candidate|3826|(8, 7)|var|float32
var_3827 = relay.var("var_3827", dtype = "float32", shape = (8, 7))#candidate|3827|(8, 7)|var|float32
bop_3828 = relay.floor_divide(var_3826.astype('float32'), relay.reshape(var_3827.astype('float32'), relay.shape_of(var_3826))) # shape=(8, 7)
bop_3833 = relay.less(bop_3828.astype('bool'), relay.reshape(var_3827.astype('bool'), relay.shape_of(bop_3828))) # shape=(8, 7)
const_3838 = relay.const([[6.663886,1.105916,0.096527,9.156432,-7.594233,-0.408040,3.814446],[-2.247496,-8.629860,1.342247,7.919053,7.866030,-4.280727,0.614092],[-9.810076,-4.446222,-9.737099,-0.777541,4.551017,5.656225,3.687021],[-8.417680,-9.714726,8.906757,-8.886307,-4.872188,-8.444700,-2.801105],[-9.819699,-7.008997,-4.981664,2.108130,-8.984090,-6.888210,6.570957],[9.443866,2.276454,9.629874,-2.623274,0.620431,6.894414,8.696528],[1.057097,-2.756697,0.137482,-6.926577,-4.985499,-8.027311,-7.204336],[-4.281531,-4.205855,-2.590904,8.766587,8.997435,-9.261919,5.424768]], dtype = "float32")#candidate|3838|(8, 7)|const|float32
bop_3839 = relay.minimum(var_3826.astype('int64'), relay.reshape(const_3838.astype('int64'), relay.shape_of(var_3826))) # shape=(8, 7)
output = relay.Tuple([bop_3833,bop_3839,])
output2 = relay.Tuple([bop_3833,bop_3839,])
func_3846 = relay.Function([var_3826,var_3827,], output)
mod['func_3846'] = func_3846
mod = relay.transform.InferType()(mod)
var_3847 = relay.var("var_3847", dtype = "float32", shape = (8, 7))#candidate|3847|(8, 7)|var|float32
var_3848 = relay.var("var_3848", dtype = "float32", shape = (8, 7))#candidate|3848|(8, 7)|var|float32
output = func_3846(var_3847,var_3848,)
func_3849 = relay.Function([var_3847,var_3848,], output)
mutated_mod['func_3849'] = func_3849
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3987 = relay.const([[[2.140162,3.733884,-1.813602],[-8.526054,-6.082086,1.439341],[1.385747,-5.788862,9.223901],[-3.013262,-2.750632,-4.970793],[-0.348449,3.261784,-4.138953],[5.472208,-9.548519,-1.325816]],[[1.252400,-2.402651,7.512446],[-4.974933,-3.922699,-8.644432],[-5.714056,-9.382440,9.871625],[1.138446,2.554744,7.291166],[7.406982,1.522955,-9.261173],[-8.512564,0.044201,6.376799]],[[5.619161,4.355121,-7.345520],[1.554043,-8.046372,8.225085],[-2.206907,3.497089,9.959848],[8.024240,8.985882,-4.681080],[3.058929,-6.342170,4.035565],[8.658827,2.667858,-6.528365]],[[-0.627820,-1.786686,4.232134],[-9.862802,-4.153314,-3.107322],[5.049222,-9.007225,-4.121978],[-2.215430,-5.987828,-0.970663],[-4.547002,-1.050950,-2.045177],[-9.453665,-6.995436,-1.914383]],[[-6.450522,-0.562064,-0.405745],[2.730202,-2.465115,3.102542],[-9.637114,-4.779003,-3.747167],[9.393097,-1.348688,-6.681316],[-8.576431,1.322580,-4.844180],[3.084783,8.120792,8.551746]],[[-3.452202,8.909844,1.965385],[4.256778,-8.655964,-5.370465],[6.212510,6.760048,6.220868],[-2.487370,-6.087788,-3.880163],[6.393673,-5.255630,5.764359],[1.157290,-3.625290,0.343616]],[[2.435636,9.702668,-6.103000],[-5.139168,7.557859,-7.435500],[6.158966,1.168302,-8.752674],[-4.783502,9.321888,-3.942089],[3.648770,-8.622466,-7.056992],[6.333833,-8.123345,9.301417]],[[-4.962496,-3.300964,-8.993651],[-0.756310,-3.604714,9.728772],[1.423470,-0.766261,-2.463134],[-6.631304,-7.530481,0.777838],[-2.389617,-1.383028,-6.758560],[0.475043,7.193413,-3.221093]],[[-7.592973,-7.326911,-3.530671],[-9.036279,4.914458,-8.491530],[0.613379,4.962381,5.388046],[8.612515,6.360950,7.907591],[2.946909,-1.736816,-6.091139],[-8.753498,7.894179,2.648038]],[[8.906203,-7.005304,5.078608],[-0.516580,8.594324,-1.585341],[5.459219,-6.898604,-2.781082],[-8.031599,-9.037948,-3.553159],[2.641868,-5.050894,7.730890],[6.713723,3.199165,-7.005994]],[[-6.218158,2.482416,-4.168832],[3.027608,7.539610,6.548309],[0.196384,-9.332113,-5.707999],[-3.533315,7.216282,1.807924],[7.699892,3.895305,-7.410540],[1.978077,7.272930,-0.047646]],[[-0.471081,8.306507,7.558781],[9.327520,-6.404807,-8.698763],[1.797082,-0.267498,0.355266],[1.512637,-3.824964,6.004085],[-9.659263,-1.040099,-8.337402],[-7.654991,-0.601099,-8.328961]],[[-0.300715,-9.270174,6.253404],[4.118690,5.666126,-6.341315],[9.574464,1.352266,-3.462549],[-0.828484,3.897008,-7.879568],[2.188762,5.612551,-0.277073],[3.942206,8.267698,0.827884]],[[0.127679,7.624715,7.938005],[2.931142,-5.534003,-0.464834],[-8.853246,7.107148,6.272639],[4.883090,-0.056612,-6.454374],[-8.109523,3.851904,3.704565],[3.896314,-5.868895,-7.585462]]], dtype = "float64")#candidate|3987|(14, 6, 3)|const|float64
uop_3988 = relay.cos(const_3987.astype('float64')) # shape=(14, 6, 3)
func_3197_call = mod.get_global_var('func_3197')
func_3202_call = mutated_mod.get_global_var('func_3202')
var_3991 = relay.var("var_3991", dtype = "int8", shape = (250,))#candidate|3991|(250,)|var|int8
const_3992 = relay.const(8, dtype = "uint64")#candidate|3992|()|const|uint64
var_3993 = relay.var("var_3993", dtype = "float64", shape = (1053,))#candidate|3993|(1053,)|var|float64
call_3990 = relay.TupleGetItem(func_3197_call(relay.reshape(var_3991.astype('int8'), [5, 10, 5]), relay.reshape(const_3992.astype('uint64'), []), relay.reshape(var_3993.astype('float64'), [1053,]), ), 6)
call_3994 = relay.TupleGetItem(func_3202_call(relay.reshape(var_3991.astype('int8'), [5, 10, 5]), relay.reshape(const_3992.astype('uint64'), []), relay.reshape(var_3993.astype('float64'), [1053,]), ), 6)
const_4001 = relay.const([-9.204962,7.220184,2.734089,1.834113,8.866698,-0.536343,-8.748050,1.440384,-5.358167,-2.383964,8.327568,-3.994397,1.465147,-4.947980,-3.647899,-3.864063,8.693412,4.488115,-4.495231,-7.765168,6.157746,-0.361629,-6.141670,-2.881322,4.279718,-6.821769,-6.923556,6.961936,0.337020,3.078349,3.099723,7.128509,4.036240,7.746342,2.685341,9.970160], dtype = "float32")#candidate|4001|(36,)|const|float32
bop_4002 = relay.add(call_3990.astype('uint32'), relay.reshape(const_4001.astype('uint32'), relay.shape_of(call_3990))) # shape=(36,)
bop_4005 = relay.add(call_3994.astype('uint32'), relay.reshape(const_4001.astype('uint32'), relay.shape_of(call_3994))) # shape=(36,)
var_4007 = relay.var("var_4007", dtype = "float64", shape = (14, 6, 3))#candidate|4007|(14, 6, 3)|var|float64
bop_4008 = relay.subtract(uop_3988.astype('int8'), relay.reshape(var_4007.astype('int8'), relay.shape_of(uop_3988))) # shape=(14, 6, 3)
func_1863_call = mod.get_global_var('func_1863')
func_1866_call = mutated_mod.get_global_var('func_1866')
var_4030 = relay.var("var_4030", dtype = "float32", shape = (48,))#candidate|4030|(48,)|var|float32
call_4029 = relay.TupleGetItem(func_1863_call(relay.reshape(var_4030.astype('float32'), [3, 1, 16])), 1)
call_4031 = relay.TupleGetItem(func_1866_call(relay.reshape(var_4030.astype('float32'), [3, 1, 16])), 1)
func_434_call = mod.get_global_var('func_434')
func_437_call = mutated_mod.get_global_var('func_437')
var_4035 = relay.var("var_4035", dtype = "float32", shape = (1, 550))#candidate|4035|(1, 550)|var|float32
call_4034 = relay.TupleGetItem(func_434_call(relay.reshape(var_4035.astype('float32'), [11, 5, 10]), relay.reshape(var_4035.astype('float32'), [11, 5, 10]), ), 0)
call_4036 = relay.TupleGetItem(func_437_call(relay.reshape(var_4035.astype('float32'), [11, 5, 10]), relay.reshape(var_4035.astype('float32'), [11, 5, 10]), ), 0)
bop_4044 = relay.logical_or(bop_4008.astype('bool'), relay.reshape(var_4007.astype('bool'), relay.shape_of(bop_4008))) # shape=(14, 6, 3)
bop_4048 = relay.greater_equal(bop_4008.astype('bool'), relay.reshape(const_3987.astype('bool'), relay.shape_of(bop_4008))) # shape=(14, 6, 3)
output = relay.Tuple([var_3991,const_3992,var_3993,bop_4002,call_4029,var_4030,call_4034,var_4035,bop_4044,bop_4048,])
output2 = relay.Tuple([var_3991,const_3992,var_3993,bop_4005,call_4031,var_4030,call_4036,var_4035,bop_4044,bop_4048,])
func_4052 = relay.Function([var_3991,var_3993,var_4007,var_4030,var_4035,], output)
mod['func_4052'] = func_4052
mod = relay.transform.InferType()(mod)
mutated_mod['func_4052'] = func_4052
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4052_call = mutated_mod.get_global_var('func_4052')
var_4054 = relay.var("var_4054", dtype = "int8", shape = (250,))#candidate|4054|(250,)|var|int8
var_4055 = relay.var("var_4055", dtype = "float64", shape = (1053,))#candidate|4055|(1053,)|var|float64
var_4056 = relay.var("var_4056", dtype = "float64", shape = (14, 6, 3))#candidate|4056|(14, 6, 3)|var|float64
var_4057 = relay.var("var_4057", dtype = "float32", shape = (48,))#candidate|4057|(48,)|var|float32
var_4058 = relay.var("var_4058", dtype = "float32", shape = (1, 550))#candidate|4058|(1, 550)|var|float32
call_4053 = func_4052_call(var_4054,var_4055,var_4056,var_4057,var_4058,)
output = call_4053
func_4059 = relay.Function([var_4054,var_4055,var_4056,var_4057,var_4058,], output)
mutated_mod['func_4059'] = func_4059
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4106 = relay.const([[[1.477491,-7.131741,-4.960638,7.245958,5.966600],[1.770743,7.143238,3.737074,5.599193,-1.902776],[-3.607385,5.689062,7.416334,-4.006412,-9.644775],[-8.867575,-5.730757,-1.610258,5.203068,-9.797544],[8.752971,6.544133,-2.717039,0.253014,-1.606703],[2.376160,-3.893989,-2.872601,-0.241761,-7.875318]],[[-6.380561,-6.814807,6.430400,-8.614914,-2.639050],[0.317209,-9.320230,0.039260,8.677866,9.693281],[-9.507176,-3.203781,8.649329,-9.888924,-3.299718],[-5.890972,-6.213483,7.407178,-5.928444,-3.203727],[-5.698819,-7.422011,-6.704680,3.937281,4.899888],[-0.135595,8.829610,-1.105710,4.697927,-6.325832]]], dtype = "float32")#candidate|4106|(2, 6, 5)|const|float32
uop_4107 = relay.atan(const_4106.astype('float32')) # shape=(2, 6, 5)
bop_4109 = relay.equal(uop_4107.astype('bool'), relay.reshape(const_4106.astype('bool'), relay.shape_of(uop_4107))) # shape=(2, 6, 5)
output = bop_4109
output2 = bop_4109
func_4112 = relay.Function([], output)
mod['func_4112'] = func_4112
mod = relay.transform.InferType()(mod)
mutated_mod['func_4112'] = func_4112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4112_call = mutated_mod.get_global_var('func_4112')
call_4113 = func_4112_call()
output = call_4113
func_4114 = relay.Function([], output)
mutated_mod['func_4114'] = func_4114
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4112_call = mod.get_global_var('func_4112')
func_4114_call = mutated_mod.get_global_var('func_4114')
call_4115 = func_4112_call()
call_4116 = func_4112_call()
uop_4124 = relay.asinh(call_4115.astype('float32')) # shape=(2, 6, 5)
uop_4126 = relay.asinh(call_4116.astype('float32')) # shape=(2, 6, 5)
bop_4136 = relay.logical_or(uop_4124.astype('bool'), relay.reshape(call_4115.astype('bool'), relay.shape_of(uop_4124))) # shape=(2, 6, 5)
bop_4139 = relay.logical_or(uop_4126.astype('bool'), relay.reshape(call_4116.astype('bool'), relay.shape_of(uop_4126))) # shape=(2, 6, 5)
func_3567_call = mod.get_global_var('func_3567')
func_3569_call = mutated_mod.get_global_var('func_3569')
var_4142 = relay.var("var_4142", dtype = "float32", shape = (120,))#candidate|4142|(120,)|var|float32
call_4141 = func_3567_call(relay.reshape(var_4142.astype('float32'), [2, 12, 5]))
call_4143 = func_3567_call(relay.reshape(var_4142.astype('float32'), [2, 12, 5]))
output = relay.Tuple([bop_4136,call_4141,var_4142,])
output2 = relay.Tuple([bop_4139,call_4143,var_4142,])
func_4146 = relay.Function([var_4142,], output)
mod['func_4146'] = func_4146
mod = relay.transform.InferType()(mod)
mutated_mod['func_4146'] = func_4146
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4147 = relay.var("var_4147", dtype = "float32", shape = (120,))#candidate|4147|(120,)|var|float32
func_4146_call = mutated_mod.get_global_var('func_4146')
call_4148 = func_4146_call(var_4147)
output = call_4148
func_4149 = relay.Function([var_4147], output)
mutated_mod['func_4149'] = func_4149
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4112_call = mod.get_global_var('func_4112')
func_4114_call = mutated_mod.get_global_var('func_4114')
call_4161 = func_4112_call()
call_4162 = func_4112_call()
func_1443_call = mod.get_global_var('func_1443')
func_1446_call = mutated_mod.get_global_var('func_1446')
const_4168 = relay.const([[5.429547,-7.539339,-6.737730,-9.958851],[-4.469667,2.558080,-6.777876,-5.032926],[9.751204,2.461109,9.180391,-0.231374],[-8.898865,-0.728079,9.055144,-4.822349],[8.633960,-7.365585,-3.802425,2.215116],[3.706838,-5.408248,8.374915,2.611976],[8.019362,-3.810030,4.436332,-3.888162],[-2.803078,-6.046230,-2.513276,3.645166],[6.945350,9.930813,-0.231968,-1.155100],[3.010768,-3.653327,6.854236,3.652572],[-7.092073,3.903849,-7.173141,1.843504],[-0.528816,-9.630971,-3.540881,-6.571715],[0.601397,1.395432,-8.045862,9.170568],[0.534347,6.147577,3.729443,7.072358],[-9.711907,2.749163,-2.551151,9.958902],[-8.923868,6.204309,5.950545,-6.852157],[-5.928055,7.260502,-0.192409,-9.159223],[-8.465359,-2.495570,1.331741,7.402352]], dtype = "float32")#candidate|4168|(18, 4)|const|float32
call_4167 = func_1443_call(relay.reshape(const_4168.astype('float32'), [4, 2, 9]))
call_4169 = func_1443_call(relay.reshape(const_4168.astype('float32'), [4, 2, 9]))
func_1208_call = mod.get_global_var('func_1208')
func_1212_call = mutated_mod.get_global_var('func_1212')
const_4173 = relay.const(-10, dtype = "int32")#candidate|4173|()|const|int32
var_4174 = relay.var("var_4174", dtype = "int32", shape = (1872,))#candidate|4174|(1872,)|var|int32
call_4172 = func_1208_call(relay.reshape(const_4173.astype('int32'), []), relay.reshape(var_4174.astype('int32'), [9, 16, 13]), )
call_4175 = func_1208_call(relay.reshape(const_4173.astype('int32'), []), relay.reshape(var_4174.astype('int32'), [9, 16, 13]), )
output = relay.Tuple([call_4161,call_4167,const_4168,call_4172,const_4173,var_4174,])
output2 = relay.Tuple([call_4162,call_4169,const_4168,call_4175,const_4173,var_4174,])
func_4179 = relay.Function([var_4174,], output)
mod['func_4179'] = func_4179
mod = relay.transform.InferType()(mod)
mutated_mod['func_4179'] = func_4179
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4180 = relay.var("var_4180", dtype = "int32", shape = (1872,))#candidate|4180|(1872,)|var|int32
func_4179_call = mutated_mod.get_global_var('func_4179')
call_4181 = func_4179_call(var_4180)
output = call_4181
func_4182 = relay.Function([var_4180], output)
mutated_mod['func_4182'] = func_4182
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4190 = relay.const([[[False,False,True,False,False],[True,False,True,False,True],[False,True,True,False,False],[True,True,True,False,True],[True,False,False,False,False],[False,True,False,False,True],[False,False,False,False,False],[False,True,True,False,True],[False,False,False,True,False],[False,False,False,True,True]],[[True,False,True,True,False],[True,False,False,True,False],[True,False,False,True,False],[False,False,True,True,False],[False,False,False,False,True],[False,False,False,False,True],[True,False,True,False,True],[False,True,True,False,False],[True,True,False,True,True],[False,False,True,True,True]],[[True,True,True,True,True],[True,True,True,True,False],[False,False,False,False,False],[True,False,True,True,False],[True,False,True,False,False],[False,False,False,True,False],[True,False,True,True,True],[True,False,True,False,True],[True,True,True,True,True],[True,False,True,False,True]],[[True,True,False,False,True],[False,True,False,False,False],[False,True,True,True,False],[False,False,False,True,True],[True,False,False,False,True],[True,True,False,False,True],[True,True,True,True,True],[False,True,False,False,True],[True,False,True,False,False],[True,False,False,False,False]],[[True,True,False,True,False],[False,False,True,False,False],[True,True,True,False,True],[True,False,False,True,True],[False,False,True,True,False],[True,False,True,False,False],[True,True,False,True,True],[False,True,True,True,True],[False,False,True,True,False],[False,False,True,False,False]],[[False,False,False,True,True],[True,True,False,False,True],[False,True,False,False,False],[True,False,False,True,False],[True,True,False,False,False],[True,False,True,False,True],[True,False,True,True,True],[True,False,False,True,False],[True,True,True,False,False],[False,True,False,False,False]],[[False,True,True,True,False],[False,False,False,True,False],[True,False,False,True,True],[True,False,False,False,True],[False,True,False,False,True],[False,False,True,True,False],[True,True,True,True,False],[True,True,False,False,False],[False,True,False,False,False],[True,False,False,True,False]],[[True,False,True,False,False],[True,False,False,False,True],[False,True,True,True,False],[True,True,True,False,True],[True,False,False,True,True],[True,True,True,True,False],[True,True,False,False,True],[False,True,True,False,True],[True,False,True,False,False],[True,True,True,True,True]],[[False,False,False,False,False],[True,True,True,False,True],[True,True,False,False,True],[True,False,True,False,True],[False,True,True,True,True],[True,True,True,False,False],[False,False,False,False,True],[False,True,False,True,True],[True,True,False,True,True],[False,False,True,True,True]]], dtype = "bool")#candidate|4190|(9, 10, 5)|const|bool
var_4191 = relay.var("var_4191", dtype = "bool", shape = (9, 10, 5))#candidate|4191|(9, 10, 5)|var|bool
bop_4192 = relay.logical_and(const_4190.astype('bool'), relay.reshape(var_4191.astype('bool'), relay.shape_of(const_4190))) # shape=(9, 10, 5)
output = relay.Tuple([bop_4192,])
output2 = relay.Tuple([bop_4192,])
func_4198 = relay.Function([var_4191,], output)
mod['func_4198'] = func_4198
mod = relay.transform.InferType()(mod)
var_4199 = relay.var("var_4199", dtype = "bool", shape = (9, 10, 5))#candidate|4199|(9, 10, 5)|var|bool
output = func_4198(var_4199)
func_4200 = relay.Function([var_4199], output)
mutated_mod['func_4200'] = func_4200
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4202 = relay.const([[[8.333845,4.366902,8.386381,9.572340,-7.382442,4.381825,-1.752383,-5.603435],[3.742454,-6.113310,6.676831,7.925422,-2.234640,-2.291719,6.596730,-0.828810],[-0.713345,3.224312,7.314016,-6.145143,7.952621,-5.558390,0.058076,-9.930628],[5.854214,-6.328457,1.026260,-9.015147,-2.339136,6.414575,-3.737267,-3.184390],[4.007552,-1.138740,-4.628155,-1.431013,3.378289,1.612550,0.342190,3.751761],[-2.680572,1.779338,3.949938,5.174474,6.789512,2.020016,1.083964,-0.411148]],[[1.975314,8.038469,3.437838,2.310111,-1.177395,6.939478,8.363172,4.972978],[9.185210,3.514216,-7.889608,-8.767308,9.464543,4.112259,9.357254,-4.624218],[-6.858737,6.173584,9.411618,-2.080409,6.696704,-2.995476,-2.792908,6.572898],[-5.390345,-0.713721,5.156738,-6.237250,9.913337,2.723024,-4.743503,2.082346],[-3.908534,-4.647925,-7.251099,3.790456,7.665819,-8.523873,1.189231,0.042062],[-8.024484,-1.946366,-2.431448,7.140315,-6.624529,-6.446904,-9.213337,-3.714069]],[[-2.919637,-8.303626,3.143260,1.707377,4.335471,9.870140,3.426446,0.880953],[-5.583686,0.816689,-8.435416,-7.514744,-0.668794,8.991083,2.691440,1.170514],[0.860815,-0.379647,7.471331,0.940109,5.914594,-1.205336,7.699863,-9.194052],[5.165807,-6.901722,-7.703556,2.880514,5.221998,7.238190,-4.786355,0.371188],[1.157690,-9.655731,6.223810,3.058177,-6.814965,3.969801,1.146596,-8.595237],[8.907039,4.902377,4.656768,-5.858344,2.479144,2.914743,-6.548141,9.679934]],[[-0.801519,7.998953,9.971020,-3.137590,-1.212024,7.238465,-7.932197,-9.282034],[-2.840192,1.481787,-5.553338,8.757461,-8.458242,6.164412,3.777401,-9.451941],[7.409759,2.393855,-0.212232,-3.026692,7.210183,9.602764,5.804201,5.852170],[8.168740,-8.483778,6.590267,9.858383,-5.320187,-7.237299,-1.123083,-2.187039],[-6.008259,-0.316692,7.813456,6.889655,0.805376,-8.843850,7.616215,-6.165956],[6.893239,-6.839850,-0.418431,-9.093447,7.114621,-7.074696,9.054272,4.680171]],[[-8.303378,-1.916238,-8.223910,-1.904272,-0.551840,1.687555,6.608210,-1.580747],[-4.329481,7.938060,7.727936,1.476260,-2.330737,-0.270687,-8.943825,-2.923115],[9.028502,2.278573,-6.936275,3.989769,-9.344754,-6.930221,3.911056,-3.751605],[-1.773358,-8.337697,6.155989,-8.229508,-6.736000,5.401651,-1.434261,4.059425],[2.930455,2.336864,2.933617,-6.007267,1.736044,5.300293,-5.187438,-9.544049],[8.316503,-4.208113,8.790312,-1.055390,8.874642,-2.501587,1.892971,8.383114]]], dtype = "float32")#candidate|4202|(5, 6, 8)|const|float32
uop_4203 = relay.atan(const_4202.astype('float32')) # shape=(5, 6, 8)
bop_4210 = relay.logical_or(uop_4203.astype('bool'), relay.reshape(const_4202.astype('bool'), relay.shape_of(uop_4203))) # shape=(5, 6, 8)
uop_4217 = relay.exp(uop_4203.astype('float32')) # shape=(5, 6, 8)
output = relay.Tuple([bop_4210,uop_4217,])
output2 = relay.Tuple([bop_4210,uop_4217,])
func_4243 = relay.Function([], output)
mod['func_4243'] = func_4243
mod = relay.transform.InferType()(mod)
mutated_mod['func_4243'] = func_4243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4243_call = mutated_mod.get_global_var('func_4243')
call_4244 = func_4243_call()
output = call_4244
func_4245 = relay.Function([], output)
mutated_mod['func_4245'] = func_4245
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4277 = relay.var("var_4277", dtype = "uint64", shape = (6, 14))#candidate|4277|(6, 14)|var|uint64
var_4278 = relay.var("var_4278", dtype = "uint64", shape = (6, 14))#candidate|4278|(6, 14)|var|uint64
bop_4279 = relay.bitwise_and(var_4277.astype('uint64'), relay.reshape(var_4278.astype('uint64'), relay.shape_of(var_4277))) # shape=(6, 14)
func_386_call = mod.get_global_var('func_386')
func_388_call = mutated_mod.get_global_var('func_388')
var_4293 = relay.var("var_4293", dtype = "float64", shape = (1, 12))#candidate|4293|(1, 12)|var|float64
call_4292 = relay.TupleGetItem(func_386_call(relay.reshape(var_4293.astype('float64'), [3, 2, 2])), 0)
call_4294 = relay.TupleGetItem(func_388_call(relay.reshape(var_4293.astype('float64'), [3, 2, 2])), 0)
func_3744_call = mod.get_global_var('func_3744')
func_3748_call = mutated_mod.get_global_var('func_3748')
var_4297 = relay.var("var_4297", dtype = "uint64", shape = (847,))#candidate|4297|(847,)|var|uint64
call_4296 = relay.TupleGetItem(func_3744_call(relay.reshape(var_4297.astype('uint64'), [11, 7, 11]), relay.reshape(var_4297.astype('uint64'), [11, 7, 11]), relay.reshape(var_4297.astype('float32'), [11, 7, 11]), ), 2)
call_4298 = relay.TupleGetItem(func_3748_call(relay.reshape(var_4297.astype('uint64'), [11, 7, 11]), relay.reshape(var_4297.astype('uint64'), [11, 7, 11]), relay.reshape(var_4297.astype('float32'), [11, 7, 11]), ), 2)
bop_4307 = relay.maximum(var_4293.astype('int16'), relay.reshape(call_4292.astype('int16'), relay.shape_of(var_4293))) # shape=(1, 12)
bop_4310 = relay.maximum(var_4293.astype('int16'), relay.reshape(call_4294.astype('int16'), relay.shape_of(var_4293))) # shape=(1, 12)
func_232_call = mod.get_global_var('func_232')
func_235_call = mutated_mod.get_global_var('func_235')
const_4315 = relay.const([2.584764,5.660274,9.243368,0.654892,-7.181257,-9.192818,-3.694366,-2.084507,2.168280,-4.522829,-4.685988,4.252892,3.417987,-1.103606,-1.441346,-3.413514,-0.527091,-7.518574,3.480213,-9.009122,-6.578457,-0.898844,0.206977,-4.679527,-8.011962,-9.998283,2.330844,2.139998,6.631113,4.135325,8.543234,9.574569,-8.208869,4.772067,-1.132179,1.111450], dtype = "float64")#candidate|4315|(36,)|const|float64
call_4314 = relay.TupleGetItem(func_232_call(relay.reshape(call_4296.astype('float64'), [7, 7, 15]), relay.reshape(const_4315.astype('float64'), [1, 36]), ), 2)
call_4316 = relay.TupleGetItem(func_235_call(relay.reshape(call_4296.astype('float64'), [7, 7, 15]), relay.reshape(const_4315.astype('float64'), [1, 36]), ), 2)
func_3846_call = mod.get_global_var('func_3846')
func_3849_call = mutated_mod.get_global_var('func_3849')
const_4325 = relay.const([[-8.675562,-5.522504,-1.636681,-1.320443],[-5.736507,4.047548,-1.462670,-0.860536],[8.474331,6.848206,-4.081356,5.200152],[-8.429155,1.403773,5.369645,9.595970],[-4.819936,-3.465632,1.124770,-7.195547],[-9.705122,4.477654,-4.954119,-7.382720],[-4.999217,8.504464,9.367228,9.922583],[9.110740,1.341836,-7.017044,-4.679877],[-8.938993,2.796930,3.480567,8.860021],[-8.638673,-8.590806,6.607529,-9.986703],[-2.178385,-8.337413,-7.035623,-9.625510],[7.955566,-6.036020,-8.425506,-2.172593],[-8.426532,-7.377181,6.033786,3.900885],[-1.346011,4.960304,-3.081608,2.454250]], dtype = "float32")#candidate|4325|(14, 4)|const|float32
call_4324 = relay.TupleGetItem(func_3846_call(relay.reshape(const_4325.astype('float32'), [8, 7]), relay.reshape(const_4325.astype('float32'), [8, 7]), ), 1)
call_4326 = relay.TupleGetItem(func_3849_call(relay.reshape(const_4325.astype('float32'), [8, 7]), relay.reshape(const_4325.astype('float32'), [8, 7]), ), 1)
uop_4330 = relay.tan(bop_4307.astype('float32')) # shape=(1, 12)
uop_4332 = relay.tan(bop_4310.astype('float32')) # shape=(1, 12)
var_4334 = relay.var("var_4334", dtype = "float32", shape = (13, 12))#candidate|4334|(13, 12)|var|float32
bop_4335 = relay.floor_mod(uop_4330.astype('float32'), var_4334.astype('float32')) # shape=(13, 12)
bop_4338 = relay.floor_mod(uop_4332.astype('float32'), var_4334.astype('float32')) # shape=(13, 12)
func_4112_call = mod.get_global_var('func_4112')
func_4114_call = mutated_mod.get_global_var('func_4114')
call_4340 = func_4112_call()
call_4341 = func_4112_call()
uop_4344 = relay.erf(bop_4335.astype('float64')) # shape=(13, 12)
uop_4346 = relay.erf(bop_4338.astype('float64')) # shape=(13, 12)
output = relay.Tuple([bop_4279,call_4296,var_4297,call_4314,const_4315,call_4324,const_4325,call_4340,uop_4344,])
output2 = relay.Tuple([bop_4279,call_4298,var_4297,call_4316,const_4315,call_4326,const_4325,call_4341,uop_4346,])
func_4347 = relay.Function([var_4277,var_4278,var_4293,var_4297,var_4334,], output)
mod['func_4347'] = func_4347
mod = relay.transform.InferType()(mod)
var_4348 = relay.var("var_4348", dtype = "uint64", shape = (6, 14))#candidate|4348|(6, 14)|var|uint64
var_4349 = relay.var("var_4349", dtype = "uint64", shape = (6, 14))#candidate|4349|(6, 14)|var|uint64
var_4350 = relay.var("var_4350", dtype = "float64", shape = (1, 12))#candidate|4350|(1, 12)|var|float64
var_4351 = relay.var("var_4351", dtype = "uint64", shape = (847,))#candidate|4351|(847,)|var|uint64
var_4352 = relay.var("var_4352", dtype = "float32", shape = (13, 12))#candidate|4352|(13, 12)|var|float32
output = func_4347(var_4348,var_4349,var_4350,var_4351,var_4352,)
func_4353 = relay.Function([var_4348,var_4349,var_4350,var_4351,var_4352,], output)
mutated_mod['func_4353'] = func_4353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4112_call = mod.get_global_var('func_4112')
func_4114_call = mutated_mod.get_global_var('func_4114')
call_4406 = func_4112_call()
call_4407 = func_4112_call()
uop_4408 = relay.acos(call_4406.astype('float64')) # shape=(2, 6, 5)
uop_4410 = relay.acos(call_4407.astype('float64')) # shape=(2, 6, 5)
func_1063_call = mod.get_global_var('func_1063')
func_1067_call = mutated_mod.get_global_var('func_1067')
const_4414 = relay.const([9,-1,10,10,-3,9], dtype = "int32")#candidate|4414|(6,)|const|int32
call_4413 = relay.TupleGetItem(func_1063_call(relay.reshape(const_4414.astype('int32'), [2, 3]), relay.reshape(const_4414.astype('int32'), [2, 3]), ), 4)
call_4415 = relay.TupleGetItem(func_1067_call(relay.reshape(const_4414.astype('int32'), [2, 3]), relay.reshape(const_4414.astype('int32'), [2, 3]), ), 4)
output = relay.Tuple([uop_4408,call_4413,const_4414,])
output2 = relay.Tuple([uop_4410,call_4415,const_4414,])
func_4421 = relay.Function([], output)
mod['func_4421'] = func_4421
mod = relay.transform.InferType()(mod)
mutated_mod['func_4421'] = func_4421
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4421_call = mutated_mod.get_global_var('func_4421')
call_4422 = func_4421_call()
output = call_4422
func_4423 = relay.Function([], output)
mutated_mod['func_4423'] = func_4423
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4243_call = mod.get_global_var('func_4243')
func_4245_call = mutated_mod.get_global_var('func_4245')
call_4457 = relay.TupleGetItem(func_4243_call(), 0)
call_4458 = relay.TupleGetItem(func_4245_call(), 0)
func_3370_call = mod.get_global_var('func_3370')
func_3373_call = mutated_mod.get_global_var('func_3373')
const_4460 = relay.const(-6.770723, dtype = "float64")#candidate|4460|()|const|float64
var_4461 = relay.var("var_4461", dtype = "float64", shape = (980,))#candidate|4461|(980,)|var|float64
call_4459 = relay.TupleGetItem(func_3370_call(relay.reshape(const_4460.astype('float64'), []), relay.reshape(var_4461.astype('float64'), [980,]), ), 0)
call_4462 = relay.TupleGetItem(func_3373_call(relay.reshape(const_4460.astype('float64'), []), relay.reshape(var_4461.astype('float64'), [980,]), ), 0)
uop_4463 = relay.log2(call_4457.astype('float64')) # shape=(5, 6, 8)
uop_4465 = relay.log2(call_4458.astype('float64')) # shape=(5, 6, 8)
uop_4485 = relay.cos(uop_4463.astype('float32')) # shape=(5, 6, 8)
uop_4487 = relay.cos(uop_4465.astype('float32')) # shape=(5, 6, 8)
func_184_call = mod.get_global_var('func_184')
func_187_call = mutated_mod.get_global_var('func_187')
const_4490 = relay.const([1.136622,2.079566,-0.973188,3.761299,-4.897239,-5.968906,7.381663,1.559742,-2.658305,-4.271740,-6.784858,2.865738,9.645106,9.783655,-3.048486,4.636484,3.014779,-7.914852,2.857909,-2.840597,5.640310,-4.941896,8.007850,7.149875,-2.250971,8.858510,8.651920,4.686181,-1.942330,-4.708282,-2.928948,-6.555993,-6.351655,5.425957,-7.430741,4.958668], dtype = "float32")#candidate|4490|(36,)|const|float32
call_4489 = relay.TupleGetItem(func_184_call(relay.reshape(const_4490.astype('float32'), [4, 9]), relay.reshape(const_4490.astype('float32'), [4, 9]), ), 0)
call_4491 = relay.TupleGetItem(func_187_call(relay.reshape(const_4490.astype('float32'), [4, 9]), relay.reshape(const_4490.astype('float32'), [4, 9]), ), 0)
func_1063_call = mod.get_global_var('func_1063')
func_1067_call = mutated_mod.get_global_var('func_1067')
const_4500 = relay.const([[-2,9],[7,-7],[3,-9]], dtype = "int32")#candidate|4500|(3, 2)|const|int32
call_4499 = relay.TupleGetItem(func_1063_call(relay.reshape(const_4500.astype('int32'), [2, 3]), relay.reshape(const_4500.astype('int32'), [2, 3]), ), 0)
call_4501 = relay.TupleGetItem(func_1067_call(relay.reshape(const_4500.astype('int32'), [2, 3]), relay.reshape(const_4500.astype('int32'), [2, 3]), ), 0)
uop_4503 = relay.sigmoid(uop_4485.astype('float64')) # shape=(5, 6, 8)
uop_4505 = relay.sigmoid(uop_4487.astype('float64')) # shape=(5, 6, 8)
output = relay.Tuple([call_4459,const_4460,var_4461,call_4489,const_4490,call_4499,const_4500,uop_4503,])
output2 = relay.Tuple([call_4462,const_4460,var_4461,call_4491,const_4490,call_4501,const_4500,uop_4505,])
func_4507 = relay.Function([var_4461,], output)
mod['func_4507'] = func_4507
mod = relay.transform.InferType()(mod)
var_4508 = relay.var("var_4508", dtype = "float64", shape = (980,))#candidate|4508|(980,)|var|float64
output = func_4507(var_4508)
func_4509 = relay.Function([var_4508], output)
mutated_mod['func_4509'] = func_4509
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4551 = relay.var("var_4551", dtype = "float32", shape = (12, 13, 7))#candidate|4551|(12, 13, 7)|var|float32
uop_4552 = relay.sinh(var_4551.astype('float32')) # shape=(12, 13, 7)
output = uop_4552
output2 = uop_4552
F = relay.Function([var_4551,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_4551,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
	relay.transform.InferType(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_4551= np.array([[[8.373988,0.179257,-9.688327,-1.395499,4.132180,1.710116,-3.711662],[-8.380588,-3.905763,-1.669354,2.498593,-9.036048,-2.472668,-3.336601],[9.199383,1.616577,-3.460636,-1.455201,8.634434,-3.255704,3.784815],[5.337445,3.845085,5.049080,-5.354771,8.854081,5.103158,1.348297],[-4.967798,-9.806491,-4.387611,9.001911,-7.489898,8.192055,-2.515572],[-1.080005,-0.650592,9.968945,0.728701,5.328289,-9.914722,-6.450995],[-4.572489,-1.230274,1.940436,-1.840037,-6.031604,-0.684958,-7.146233],[3.709717,3.071342,-6.468846,9.359762,-0.510520,-1.999450,-6.933713],[-1.960890,3.901431,-6.752228,-7.876180,-2.202936,2.316975,-7.672200],[9.488699,-0.857081,7.274184,-1.516893,2.633684,7.257868,2.955573],[0.555844,0.775775,-5.986817,-1.851437,-5.126971,-4.184339,-5.723300],[8.320159,1.000500,6.252122,5.386106,-3.776750,-6.018221,7.513988],[6.400373,-0.604589,-3.336730,-4.402357,-5.338639,-5.835269,7.029192]],[[6.772735,-6.461046,-7.362831,9.311643,5.242164,-2.102439,-6.759973],[2.095574,8.329483,-0.021469,1.429603,8.587621,9.076843,8.874212],[-2.240069,-7.539823,-4.087431,-0.305737,7.809035,-2.581711,7.658542],[-1.646221,7.909792,4.842864,-2.035037,-4.477480,2.389112,5.805263],[6.383689,-9.835244,-2.642983,9.868313,6.608182,8.433683,0.430210],[-8.205020,8.433579,5.889366,-8.993182,7.850909,-2.367708,2.224992],[1.806056,5.407918,7.116685,-4.343502,-2.815528,-8.539735,8.003148],[-0.682584,3.220226,0.852647,7.582140,2.283323,-1.502238,-9.111222],[5.455770,-7.311971,4.363833,8.830917,7.822853,-9.910990,-9.573600],[0.329313,-6.175845,-8.947088,-6.337123,-6.647656,-1.273270,-7.132348],[-7.851999,-7.606232,-6.728964,-1.120369,-2.366456,-2.778159,2.340447],[0.167580,7.151147,-3.075583,0.814588,4.932139,-9.583444,9.467751],[5.483634,7.164678,1.223899,0.004933,-8.564988,0.421265,-0.911493]],[[-0.427170,-2.053994,5.652203,9.360136,9.784575,-6.868336,-1.151459],[6.420963,-6.338979,9.728435,-5.819878,3.576465,-6.349181,-8.516709],[-2.524718,0.079815,-9.252558,-4.659738,8.422709,4.450188,-0.939769],[2.646491,5.651956,8.472405,-3.876528,5.802215,7.829045,-8.019053],[0.938604,0.236171,3.092720,-5.790979,-2.846270,4.354901,-8.321382],[-3.321164,5.118301,-3.016153,-4.207487,-0.999783,-6.293134,-4.118493],[-3.566227,-7.930389,1.216347,6.995637,-6.303360,-5.573178,-9.758593],[8.232411,4.874405,-2.798753,9.430068,2.765364,-1.854155,-2.066262],[5.812345,-0.174756,-0.119105,5.101390,-0.716501,-2.664252,8.480398],[6.675202,0.368245,-6.591216,-8.477216,6.602685,3.828141,-3.010623],[-3.438330,0.851357,1.948480,3.707482,-5.630589,4.435747,1.337770],[5.449124,-9.619653,-3.649174,8.076057,-1.417678,6.573086,-4.845285],[-0.185057,-5.988739,8.944781,8.791160,4.142977,-4.415155,7.228610]],[[-4.171794,-9.388806,0.167813,-9.996026,-1.092054,8.533602,-9.049133],[-7.270584,4.519891,7.790035,3.134098,5.904371,1.061336,1.055075],[-4.542986,4.828252,6.516395,8.938005,-9.295544,-1.334853,2.668755],[-9.632952,9.147907,-0.976522,7.413305,-5.269337,9.146057,8.458620],[9.238748,-4.109009,-5.591758,-1.755819,1.076679,-2.023937,-9.995840],[-7.980335,-6.772378,6.562643,1.766660,5.006136,6.372874,2.802073],[3.253822,6.154949,5.674906,6.747301,5.445433,3.115433,7.524885],[-1.151022,2.442864,8.410666,1.332106,7.636337,9.849799,-3.185361],[-2.651089,6.209029,-5.277874,-3.146667,-6.405109,9.276248,-0.759392],[9.225760,5.605792,9.392227,-3.297438,-2.162881,1.053717,3.925333],[-5.488344,6.373662,2.369810,2.092747,2.749496,-2.627236,0.605456],[0.436075,-5.241887,0.321159,-0.843913,-6.392263,0.004552,4.768775],[-6.934927,1.026908,-1.696824,-1.854004,4.359796,5.428353,9.815299]],[[9.379579,-5.260830,-3.222889,4.825339,-2.404983,-1.528341,-6.151496],[2.388614,-0.963648,-1.183706,7.123004,-5.903104,7.913450,6.801732],[-2.625254,-5.291440,0.222055,-8.007767,3.983133,4.298902,-0.361608],[4.237057,3.792848,-3.390223,-5.175424,-2.514474,9.604409,5.268620],[-4.592676,9.965226,-7.223571,-3.328659,-8.759419,2.374173,-6.866471],[6.284647,7.329205,-6.475975,-0.382103,-1.006891,8.905965,-9.561462],[-9.913463,8.067556,-9.012395,7.763923,-1.322457,-7.668539,7.874733],[3.668033,-2.698954,-4.951378,8.816248,-7.637946,6.318758,-8.090023],[4.638561,5.202315,9.292544,9.468591,9.546641,-5.953469,-3.188766],[3.580052,-5.829453,-3.917927,2.780999,-0.231915,5.713108,-3.024494],[-9.456224,3.897297,6.877900,7.381462,-2.429992,-6.728324,1.772969],[9.976438,4.685016,5.969603,5.774452,-5.727380,-6.698763,2.668687],[-9.056654,-1.383946,8.232459,-3.280724,-7.316577,7.427992,-5.267494]],[[1.926982,-7.318229,-4.365213,3.996103,0.219127,9.343140,7.203620],[0.842296,7.393366,3.159009,-1.019293,4.215564,1.693329,-2.237522],[-9.002800,0.454879,-5.278804,8.331314,5.132881,1.935815,1.678201],[3.143674,-4.763144,-1.461977,-6.646950,-3.655076,-1.052176,2.413629],[6.594808,-2.352124,0.516181,8.801994,1.858041,-0.708027,4.375754],[7.136214,-6.458736,-1.815855,1.926772,-3.355864,-9.254617,-4.797729],[-6.491240,-6.382034,3.054497,-4.094624,-6.314758,8.258963,-6.959280],[1.991058,7.551904,-7.916013,8.267946,-3.181124,9.447117,-8.381555],[9.795605,-4.121747,-9.240731,-3.726699,4.061891,-1.749025,-4.489566],[1.007089,1.412277,5.566479,-9.672567,-4.971212,-9.981465,-7.458562],[6.489167,9.558535,-0.385602,1.754575,-7.670320,-7.479864,-4.069785],[-4.797902,-7.423498,2.286507,-4.994673,-3.318759,-8.760562,-6.642891],[-9.581075,1.187772,2.854436,-7.718763,-8.289678,-2.534739,1.804787]],[[1.266796,-7.515340,0.145509,8.357442,-4.736110,9.021645,-4.002276],[-8.429339,-8.582869,-0.318680,-0.471697,-2.054341,3.419752,-4.495381],[1.315738,-8.858122,6.981255,-1.941880,-3.936248,0.537290,4.663334],[5.648868,3.140326,-8.289645,-7.732439,8.081489,-1.307711,-0.301707],[-8.777527,-0.704457,-2.008324,-1.074515,6.588133,-3.242658,3.675955],[-4.524130,-7.947402,-5.152523,4.233516,4.111387,3.897990,2.362085],[-6.025894,2.341238,-0.373683,0.862004,4.259533,4.705097,-5.334608],[-4.143445,5.713812,3.823413,-6.109295,0.213558,-6.849561,-4.736327],[7.314223,-2.656816,8.812145,6.835792,7.465416,-3.178837,-8.078752],[4.532009,-6.185433,-1.951038,-4.675378,5.540826,-9.589534,2.799027],[-5.777951,-5.717308,5.764079,2.355101,1.015038,-9.137762,4.765979],[3.367360,-5.847096,2.102967,-8.398720,1.977182,8.693429,9.317567],[4.709932,-3.009635,-3.718906,-4.564058,9.594219,-3.508907,-5.955916]],[[8.406894,-9.645365,6.995280,8.183987,9.300406,4.452025,0.485366],[1.523864,-6.047698,9.034948,-8.508275,2.450695,3.936421,9.758611],[1.177236,-7.340063,4.023833,4.759186,-7.613481,2.698229,-5.404072],[-9.528575,8.186846,8.102135,-2.948883,9.122584,-5.302893,2.522234],[3.202172,-4.471577,-0.449254,-8.787563,6.980213,8.778467,-7.486495],[3.494872,2.818868,-9.245654,0.170441,-0.225088,-7.040788,7.966004],[-2.911472,-9.243356,9.219152,6.236464,-0.271551,3.371650,1.635979],[7.703852,-9.090607,6.287677,-6.256289,-1.401186,7.590021,4.013266],[-1.399029,-2.337408,-8.723193,0.855749,4.852297,4.400952,-8.623297],[5.847893,5.000671,6.500400,8.193799,0.476128,7.971770,-7.264481],[-2.067829,-4.436886,-0.912025,-0.473483,-8.643910,-9.760717,-9.190445],[2.213138,-8.910768,-1.629986,0.082313,9.001794,-2.601457,-3.766294],[8.385464,-7.198055,-3.373056,-1.332361,-2.744542,4.178707,-3.247507]],[[-9.361576,-9.616143,2.785968,8.523126,-0.704229,-9.562010,2.076486],[4.704277,-8.846848,-3.870997,-3.984968,0.431473,0.110429,7.233670],[-8.874024,-8.193781,-7.962580,-9.110138,-5.473309,-9.493951,-0.714314],[-1.757781,1.260519,6.704919,-9.313230,6.202780,3.801136,-9.832455],[-4.688709,8.352282,4.913760,2.327338,-9.728056,-8.652054,0.317441],[-2.370742,1.829783,-1.389552,-7.369396,-5.745814,7.582982,7.415573],[-7.636158,-0.925157,-1.195600,-9.738604,6.059838,2.980784,7.620013],[-1.206277,-4.676841,5.123472,-8.101220,9.916589,0.603421,4.626365],[8.512656,5.136126,-8.239685,-2.482657,-9.864084,6.333805,-4.783688],[0.173438,-3.076882,2.822200,-7.406409,-4.479031,-3.444180,0.220134],[0.703357,-0.800645,-4.910912,-8.562327,3.905104,8.827261,0.756509],[-3.109680,3.857089,-4.101255,3.822115,9.904346,-9.541772,-4.034664],[5.042749,-9.842844,6.052529,9.734642,1.983993,-2.588943,-6.706706]],[[-5.139742,-6.591413,6.164892,-6.616843,0.637519,1.055713,-9.903866],[-2.361601,-6.947947,-8.251433,-9.536243,-2.069264,9.699891,-8.344107],[-8.724291,4.761706,-3.804987,6.763540,-8.447256,1.278889,-3.539344],[-9.167214,-1.525286,9.680022,-4.919682,-4.711979,3.288903,-6.646233],[-4.243352,9.952393,9.817767,6.329789,-3.032352,6.685476,-6.227057],[2.018144,-1.031849,0.289857,-4.462857,5.453822,8.980086,-1.209204],[-1.796177,1.755768,2.283779,-8.303351,-8.616543,-6.504175,-3.632042],[7.851222,6.258290,0.008621,-0.140129,-2.654815,-6.366205,0.299111],[4.055148,-2.534607,-4.932888,-7.553232,-6.370172,-7.012807,-0.300569],[-0.348745,-7.499078,-3.171127,-5.076429,3.614582,-0.982100,7.546867],[-6.441322,-0.791888,-2.932421,5.529335,7.436402,-2.800222,-4.370510],[-1.552920,-9.256727,-7.807502,-8.937481,-2.487246,-3.962601,9.293662],[9.788514,1.189674,3.612388,-7.483987,5.451193,-7.166434,6.495858]],[[-1.567236,1.218116,9.788599,3.790984,-7.209407,-7.221999,-8.110628],[6.286882,9.590070,4.022506,-1.425227,9.908203,-2.465717,-4.717921],[7.446626,-9.170743,-0.781170,-9.657926,9.311055,0.448154,7.995728],[-5.148878,-8.925496,6.263956,-2.137240,7.991184,4.264742,5.082992],[0.883816,-1.626314,-8.302311,-5.142994,-9.012380,-5.101060,1.615599],[5.430261,8.661408,-9.619508,7.294035,7.090901,-3.600399,-5.104006],[1.709193,-6.470346,-9.067411,2.987068,9.399137,0.222087,-4.245593],[5.260367,1.659036,-2.717358,-9.071953,-3.698041,-4.375450,8.589469],[-3.313201,-3.718005,-2.638510,-0.419937,7.584331,7.459541,-7.689564],[-4.508623,-8.962172,-9.540313,1.666066,-3.292239,8.392407,8.667019],[-2.298713,3.831689,7.396305,9.553235,-3.489098,-3.687702,5.872246],[-0.766562,-8.301082,0.985993,-3.580863,-5.155125,-8.415666,9.593858],[3.692128,-8.372782,1.910706,1.086860,6.288000,-1.513410,-7.895199]],[[-5.450465,-3.358893,7.040242,1.790034,2.004590,-6.860558,1.663105],[-1.398212,6.069169,-4.810150,-9.555841,7.624624,-8.366303,-9.336257],[-8.511850,5.595437,-1.047413,8.073104,-4.412302,-3.450759,-4.027623],[6.450317,-1.339151,-6.206496,1.011466,7.376392,-0.050390,5.593792],[6.270987,-1.341141,8.601793,-8.581856,3.619625,1.028160,3.914800],[-0.312972,0.994191,5.621684,1.813342,6.702373,-1.430780,-8.430348],[4.366690,9.436797,7.510117,-9.010911,3.172229,9.909776,-5.072889],[-0.522084,-2.454583,2.105453,-8.481204,7.502519,-0.006347,2.046264],[4.723698,1.521052,1.824120,-4.405546,-8.279785,8.360012,9.500353],[6.423448,-7.820082,6.537081,-3.622150,-7.143071,-1.706450,-7.842887],[-0.462764,2.397150,-2.094651,-4.966910,-6.804154,-6.568876,3.043579],[-5.568412,-2.938600,-3.034288,-2.927332,-2.746430,-0.100671,2.172727],[-2.711549,0.281099,2.783932,4.296303,6.348150,-6.033774,-3.633934]]], dtype='float32')
module1.set_input('var_4551', input_4551)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_4551, )
res3 = intrp3.evaluate()(input_4551, )
res4 = intrp4.evaluate()(input_4551, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_4551', input_4551)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_4551, )
res7 = intrp7.evaluate()(input_4551, )
res8 = intrp8.evaluate()(input_4551, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_4551', input_4551)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_4551, )
res11 = intrp11.evaluate()(input_4551, )
res12 = intrp12.evaluate()(input_4551, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_4551', input_4551)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_4551, )
res15 = intrp15.evaluate()(input_4551, )
res16 = intrp16.evaluate()(input_4551, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_4551', input_4551)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_4551, )
res19 = intrp19.evaluate()(input_4551, )
res20 = intrp20.evaluate()(input_4551, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_4551', input_4551)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_4551, )
res23 = intrp23.evaluate()(input_4551, )
res24 = intrp24.evaluate()(input_4551, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''43: TVMFuncCall
42: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
41: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
40: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
39: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
38: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
37: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
36: tvm::transform::Pass::operator()(tvm::IRModule) const
35: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
30: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
29: tvm::transform::Pass::operator()(tvm::IRModule) const
28: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
27: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
20: _ZN3tvm5relay9transform22Devic
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''