import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_61 = relay.var("var_61", dtype = "uint64", shape = (3, 14, 1))#candidate|61|(3, 14, 1)|var|uint64
var_62 = relay.var("var_62", dtype = "uint64", shape = (3, 14, 3))#candidate|62|(3, 14, 3)|var|uint64
bop_63 = relay.add(var_61.astype('uint64'), var_62.astype('uint64')) # shape=(3, 14, 3)
uop_67 = relay.acosh(bop_63.astype('float64')) # shape=(3, 14, 3)
bop_69 = relay.floor_mod(uop_67.astype('float64'), relay.reshape(bop_63.astype('float64'), relay.shape_of(uop_67))) # shape=(3, 14, 3)
var_76 = relay.var("var_76", dtype = "float64", shape = (3, 14, 3))#candidate|76|(3, 14, 3)|var|float64
bop_77 = relay.floor_divide(bop_69.astype('float64'), relay.reshape(var_76.astype('float64'), relay.shape_of(bop_69))) # shape=(3, 14, 3)
bop_81 = relay.less_equal(bop_77.astype('bool'), relay.reshape(uop_67.astype('bool'), relay.shape_of(bop_77))) # shape=(3, 14, 3)
uop_86 = relay.asinh(bop_77.astype('float32')) # shape=(3, 14, 3)
bop_88 = relay.greater_equal(bop_81.astype('bool'), relay.reshape(var_62.astype('bool'), relay.shape_of(bop_81))) # shape=(3, 14, 3)
bop_94 = relay.left_shift(uop_86.astype('int64'), relay.reshape(uop_67.astype('int64'), relay.shape_of(uop_86))) # shape=(3, 14, 3)
uop_99 = relay.log(uop_86.astype('float32')) # shape=(3, 14, 3)
output = relay.Tuple([bop_88,bop_94,uop_99,])
output2 = relay.Tuple([bop_88,bop_94,uop_99,])
func_101 = relay.Function([var_61,var_62,var_76,], output)
mod['func_101'] = func_101
mod = relay.transform.InferType()(mod)
var_102 = relay.var("var_102", dtype = "uint64", shape = (3, 14, 1))#candidate|102|(3, 14, 1)|var|uint64
var_103 = relay.var("var_103", dtype = "uint64", shape = (3, 14, 3))#candidate|103|(3, 14, 3)|var|uint64
var_104 = relay.var("var_104", dtype = "float64", shape = (3, 14, 3))#candidate|104|(3, 14, 3)|var|float64
output = func_101(var_102,var_103,var_104,)
func_105 = relay.Function([var_102,var_103,var_104,], output)
mutated_mod['func_105'] = func_105
mutated_mod = relay.transform.InferType()(mutated_mod)
var_125 = relay.var("var_125", dtype = "float64", shape = (7, 3, 4))#candidate|125|(7, 3, 4)|var|float64
uop_126 = relay.tan(var_125.astype('float64')) # shape=(7, 3, 4)
output = relay.Tuple([uop_126,])
output2 = relay.Tuple([uop_126,])
func_130 = relay.Function([var_125,], output)
mod['func_130'] = func_130
mod = relay.transform.InferType()(mod)
var_131 = relay.var("var_131", dtype = "float64", shape = (7, 3, 4))#candidate|131|(7, 3, 4)|var|float64
output = func_130(var_131)
func_132 = relay.Function([var_131], output)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_145 = relay.var("var_145", dtype = "float32", shape = (10,))#candidate|145|(10,)|var|float32
uop_146 = relay.acos(var_145.astype('float32')) # shape=(10,)
uop_149 = relay.log(uop_146.astype('float32')) # shape=(10,)
bop_153 = relay.subtract(uop_149.astype('int8'), relay.reshape(var_145.astype('int8'), relay.shape_of(uop_149))) # shape=(10,)
bop_159 = relay.not_equal(bop_153.astype('bool'), relay.reshape(uop_146.astype('bool'), relay.shape_of(bop_153))) # shape=(10,)
output = bop_159
output2 = bop_159
func_162 = relay.Function([var_145,], output)
mod['func_162'] = func_162
mod = relay.transform.InferType()(mod)
mutated_mod['func_162'] = func_162
mutated_mod = relay.transform.InferType()(mutated_mod)
var_163 = relay.var("var_163", dtype = "float32", shape = (10,))#candidate|163|(10,)|var|float32
func_162_call = mutated_mod.get_global_var('func_162')
call_164 = func_162_call(var_163)
output = call_164
func_165 = relay.Function([var_163], output)
mutated_mod['func_165'] = func_165
mutated_mod = relay.transform.InferType()(mutated_mod)
var_172 = relay.var("var_172", dtype = "float64", shape = (1, 14, 4))#candidate|172|(1, 14, 4)|var|float64
var_173 = relay.var("var_173", dtype = "float64", shape = (3, 14, 4))#candidate|173|(3, 14, 4)|var|float64
bop_174 = relay.mod(var_172.astype('float64'), var_173.astype('float64')) # shape=(3, 14, 4)
func_130_call = mod.get_global_var('func_130')
func_132_call = mutated_mod.get_global_var('func_132')
var_181 = relay.var("var_181", dtype = "float64", shape = (84,))#candidate|181|(84,)|var|float64
call_180 = relay.TupleGetItem(func_130_call(relay.reshape(var_181.astype('float64'), [7, 3, 4])), 0)
call_182 = relay.TupleGetItem(func_132_call(relay.reshape(var_181.astype('float64'), [7, 3, 4])), 0)
output = relay.Tuple([bop_174,call_180,var_181,])
output2 = relay.Tuple([bop_174,call_182,var_181,])
func_186 = relay.Function([var_172,var_173,var_181,], output)
mod['func_186'] = func_186
mod = relay.transform.InferType()(mod)
mutated_mod['func_186'] = func_186
mutated_mod = relay.transform.InferType()(mutated_mod)
func_186_call = mutated_mod.get_global_var('func_186')
var_188 = relay.var("var_188", dtype = "float64", shape = (1, 14, 4))#candidate|188|(1, 14, 4)|var|float64
var_189 = relay.var("var_189", dtype = "float64", shape = (3, 14, 4))#candidate|189|(3, 14, 4)|var|float64
var_190 = relay.var("var_190", dtype = "float64", shape = (84,))#candidate|190|(84,)|var|float64
call_187 = func_186_call(var_188,var_189,var_190,)
output = call_187
func_191 = relay.Function([var_188,var_189,var_190,], output)
mutated_mod['func_191'] = func_191
mutated_mod = relay.transform.InferType()(mutated_mod)
var_196 = relay.var("var_196", dtype = "float32", shape = (11, 4, 3))#candidate|196|(11, 4, 3)|var|float32
var_197 = relay.var("var_197", dtype = "float32", shape = (11, 4, 3))#candidate|197|(11, 4, 3)|var|float32
bop_198 = relay.power(var_196.astype('float32'), relay.reshape(var_197.astype('float32'), relay.shape_of(var_196))) # shape=(11, 4, 3)
output = bop_198
output2 = bop_198
func_201 = relay.Function([var_196,var_197,], output)
mod['func_201'] = func_201
mod = relay.transform.InferType()(mod)
var_202 = relay.var("var_202", dtype = "float32", shape = (11, 4, 3))#candidate|202|(11, 4, 3)|var|float32
var_203 = relay.var("var_203", dtype = "float32", shape = (11, 4, 3))#candidate|203|(11, 4, 3)|var|float32
output = func_201(var_202,var_203,)
func_204 = relay.Function([var_202,var_203,], output)
mutated_mod['func_204'] = func_204
mutated_mod = relay.transform.InferType()(mutated_mod)
var_209 = relay.var("var_209", dtype = "float32", shape = (13, 15))#candidate|209|(13, 15)|var|float32
var_210 = relay.var("var_210", dtype = "float32", shape = (13, 15))#candidate|210|(13, 15)|var|float32
bop_211 = relay.floor_mod(var_209.astype('float32'), relay.reshape(var_210.astype('float32'), relay.shape_of(var_209))) # shape=(13, 15)
bop_214 = relay.less(bop_211.astype('bool'), relay.reshape(var_210.astype('bool'), relay.shape_of(bop_211))) # shape=(13, 15)
bop_218 = relay.bitwise_or(bop_211.astype('uint8'), relay.reshape(var_209.astype('uint8'), relay.shape_of(bop_211))) # shape=(13, 15)
output = relay.Tuple([bop_214,bop_218,])
output2 = relay.Tuple([bop_214,bop_218,])
func_223 = relay.Function([var_209,var_210,], output)
mod['func_223'] = func_223
mod = relay.transform.InferType()(mod)
var_224 = relay.var("var_224", dtype = "float32", shape = (13, 15))#candidate|224|(13, 15)|var|float32
var_225 = relay.var("var_225", dtype = "float32", shape = (13, 15))#candidate|225|(13, 15)|var|float32
output = func_223(var_224,var_225,)
func_226 = relay.Function([var_224,var_225,], output)
mutated_mod['func_226'] = func_226
mutated_mod = relay.transform.InferType()(mutated_mod)
var_250 = relay.var("var_250", dtype = "float32", shape = (13, 16, 15))#candidate|250|(13, 16, 15)|var|float32
uop_251 = relay.asin(var_250.astype('float32')) # shape=(13, 16, 15)
func_223_call = mod.get_global_var('func_223')
func_226_call = mutated_mod.get_global_var('func_226')
const_258 = relay.const([8.989281,-4.487498,7.723273,-6.155746,3.665820,-6.720150,6.989854,8.325302,4.110384,2.781109,5.109961,-2.353915,-2.163168,-7.788036,8.637633,8.826149,-4.252930,1.854754,2.812216,0.361785,7.332737,3.971318,-6.067417,-5.697623,9.585876,4.537440,0.039679,-9.045127,4.791274,-4.418154,1.938953,8.865045,7.490216,5.771135,3.331693,-9.820094,-6.235267,7.839149,-3.952214,-2.561312,0.928236,-0.660407,-6.407850,-4.042152,0.751065,-8.754345,-8.407325,-6.852124,2.320137,2.572938,9.645029,1.724372,5.553219,-6.739434,-2.812321,-0.293919,-4.470895,9.605763,2.854603,-6.849972,-7.893441,6.088695,2.170847,-9.304142,-7.595795,2.450130,2.173434,8.902721,3.726627,7.628562,1.161839,4.131320,-0.799635,-9.935883,-8.601757,6.521117,2.865310,7.996535,-4.558406,6.338725,2.072988,-2.043126,3.705566,-3.176231,-6.391055,5.277849,0.503926,9.024599,1.452398,0.328332,7.567585,-2.304715,-7.236000,4.055354,4.005101,5.463945,3.936746,-2.114892,7.202639,6.568969,-9.027276,9.201445,7.894678,0.209213,-8.914461,-8.765022,1.848692,0.020894,-1.455729,5.783135,4.050665,8.467810,-4.653484,-1.547418,-9.389779,3.048119,-3.643226,-7.652996,-6.565247,-2.258613,-8.325318,-7.996190,1.624655,9.930033,-1.350681,7.470478,0.811543,-5.502172,-0.065275,-6.469527,-8.458310,8.223818,-5.294752,-8.347708,-6.824332,-4.214477,1.471076,-8.265238,-2.046234,-7.882186,-5.117736,-1.441653,-7.211835,-4.532628,9.305878,6.004509,-5.889535,-8.057935,-5.251835,0.391423,6.251459,-5.534974,-7.578707,5.446144,-7.765511,3.160826,-2.680164,6.010140,-2.957442,6.120858,-7.868142,4.570266,-2.888905,9.453259,-6.559513,9.734201,-3.659662,-1.321129,-4.107263,7.341832,-6.673060,-4.113217,1.527373,9.113035,7.086915,3.126113,-1.605820,-0.202189,3.426642,9.730221,6.648835,7.994576,-1.764168,-9.141604,-9.142966,-9.684436,9.213026,7.863810,-4.546801,-8.577048,2.973140,8.929381,8.124307,-6.071037,4.707497], dtype = "float32")#candidate|258|(195,)|const|float32
call_257 = relay.TupleGetItem(func_223_call(relay.reshape(const_258.astype('float32'), [13, 15]), relay.reshape(const_258.astype('float32'), [13, 15]), ), 0)
call_259 = relay.TupleGetItem(func_226_call(relay.reshape(const_258.astype('float32'), [13, 15]), relay.reshape(const_258.astype('float32'), [13, 15]), ), 0)
func_101_call = mod.get_global_var('func_101')
func_105_call = mutated_mod.get_global_var('func_105')
var_261 = relay.var("var_261", dtype = "uint64", shape = (42,))#candidate|261|(42,)|var|uint64
const_262 = relay.const([3,-7,-8,2,-4,-4,3,8,8,-6,7,9,3,-2,-9,-10,-4,-3,-1,4,9,-4,4,10,5,-9,8,-6,7,9,-8,10,-7,6,7,-5,-2,1,-2,7,5,-8,5,5,1,-10,4,-2,-3,8,10,6,-6,-5,-8,-4,10,9,7,9,-9,-6,9,5,-6,-1,8,-6,6,3,-6,10,-2,-3,-4,-6,1,7,9,1,-5,-2,10,1,1,-2,2,5,3,-2,10,10,-1,-9,-1,8,3,-10,9,-10,5,9,6,-3,2,7,-7,-3,-6,-1,-5,2,2,-10,3,-3,-4,10,-6,8,-10,2,-2,6,-9,4], dtype = "uint64")#candidate|262|(126,)|const|uint64
call_260 = relay.TupleGetItem(func_101_call(relay.reshape(var_261.astype('uint64'), [3, 14, 1]), relay.reshape(const_262.astype('uint64'), [3, 14, 3]), relay.reshape(const_262.astype('float64'), [3, 14, 3]), ), 0)
call_263 = relay.TupleGetItem(func_105_call(relay.reshape(var_261.astype('uint64'), [3, 14, 1]), relay.reshape(const_262.astype('uint64'), [3, 14, 3]), relay.reshape(const_262.astype('float64'), [3, 14, 3]), ), 0)
bop_266 = relay.bitwise_or(uop_251.astype('uint8'), relay.reshape(var_250.astype('uint8'), relay.shape_of(uop_251))) # shape=(13, 16, 15)
func_186_call = mod.get_global_var('func_186')
func_191_call = mutated_mod.get_global_var('func_191')
const_289 = relay.const([5.505427,-5.221322,-4.705684,-4.072673,-8.120414,-2.486842,0.078365,8.646045,5.120578,-9.678259,6.817563,-3.241145,4.504138,-3.850712,-2.232447,3.734849,4.177538,-2.184219,7.972160,6.314413,-7.877183,7.587491,3.840569,-4.401267,-9.683717,3.042236,-2.061242,7.218199,2.307431,-5.928999,4.445702,-7.685317,7.695872,-9.919764,8.733443,6.115553,-7.877159,3.395056,9.731971,-1.405088,9.728530,-1.645979,4.673733,8.112278,6.514291,6.649894,6.269661,-3.094890,-3.858448,-7.076261,-4.455777,5.928563,-5.627656,-0.467670,-7.274551,4.066865], dtype = "float64")#candidate|289|(56,)|const|float64
var_290 = relay.var("var_290", dtype = "float64", shape = (168,))#candidate|290|(168,)|var|float64
const_291 = relay.const([5.518762,3.429874,-9.347274,1.443895,4.602611,-6.734522,4.269817,-3.984201,-0.643992,-3.256787,7.754178,-0.074600,6.415258,2.882392,5.296677,9.457834,3.349837,8.991590,-7.406392,-0.305372,-4.382281,9.440634,7.755350,2.885396,-5.072985,-0.093913,4.996754,-0.108961,6.178114,4.383855,-5.404669,3.538762,-6.011792,0.002191,6.580314,-1.548686,-6.585495,-6.173552,5.939898,9.706418,7.685807,3.501609,1.525928,1.341930,7.935704,3.494040,4.690010,-4.838958,9.160327,4.963086,2.125948,4.380329,2.232568,1.282372,0.969248,8.354454,6.862718,-8.820390,-9.760774,1.257472,-3.300480,3.926523,1.018832,2.902337,8.476162,8.075572,-3.427107,-7.199963,-3.466956,-2.228383,-5.391053,-3.401268,-8.551577,-3.003062,-2.748656,7.764493,-6.691471,3.876768,-3.542593,9.929392,8.133863,-0.614080,3.792094,7.469493], dtype = "float64")#candidate|291|(84,)|const|float64
call_288 = relay.TupleGetItem(func_186_call(relay.reshape(const_289.astype('float64'), [1, 14, 4]), relay.reshape(var_290.astype('float64'), [3, 14, 4]), relay.reshape(const_291.astype('float64'), [84,]), ), 0)
call_292 = relay.TupleGetItem(func_191_call(relay.reshape(const_289.astype('float64'), [1, 14, 4]), relay.reshape(var_290.astype('float64'), [3, 14, 4]), relay.reshape(const_291.astype('float64'), [84,]), ), 0)
bop_293 = relay.multiply(uop_251.astype('int8'), relay.reshape(bop_266.astype('int8'), relay.shape_of(uop_251))) # shape=(13, 16, 15)
bop_303 = relay.floor_mod(bop_266.astype('float32'), relay.reshape(bop_293.astype('float32'), relay.shape_of(bop_266))) # shape=(13, 16, 15)
var_311 = relay.var("var_311", dtype = "float32", shape = (13, 16, 15))#candidate|311|(13, 16, 15)|var|float32
bop_312 = relay.greater_equal(uop_251.astype('bool'), relay.reshape(var_311.astype('bool'), relay.shape_of(uop_251))) # shape=(13, 16, 15)
var_318 = relay.var("var_318", dtype = "uint8", shape = (13, 16, 15))#candidate|318|(13, 16, 15)|var|uint8
bop_319 = relay.mod(bop_266.astype('float64'), relay.reshape(var_318.astype('float64'), relay.shape_of(bop_266))) # shape=(13, 16, 15)
func_162_call = mod.get_global_var('func_162')
func_165_call = mutated_mod.get_global_var('func_165')
var_329 = relay.var("var_329", dtype = "float32", shape = (10,))#candidate|329|(10,)|var|float32
call_328 = func_162_call(relay.reshape(var_329.astype('float32'), [10,]))
call_330 = func_162_call(relay.reshape(var_329.astype('float32'), [10,]))
uop_335 = relay.rsqrt(bop_319.astype('float32')) # shape=(13, 16, 15)
func_101_call = mod.get_global_var('func_101')
func_105_call = mutated_mod.get_global_var('func_105')
call_338 = relay.TupleGetItem(func_101_call(relay.reshape(var_261.astype('uint64'), [3, 14, 1]), relay.reshape(call_260.astype('uint64'), [3, 14, 3]), relay.reshape(call_260.astype('float64'), [3, 14, 3]), ), 0)
call_339 = relay.TupleGetItem(func_105_call(relay.reshape(var_261.astype('uint64'), [3, 14, 1]), relay.reshape(call_260.astype('uint64'), [3, 14, 3]), relay.reshape(call_260.astype('float64'), [3, 14, 3]), ), 0)
output = relay.Tuple([call_257,const_258,call_260,var_261,const_262,call_288,const_289,var_290,const_291,bop_303,bop_312,call_328,var_329,uop_335,call_338,])
output2 = relay.Tuple([call_259,const_258,call_263,var_261,const_262,call_292,const_289,var_290,const_291,bop_303,bop_312,call_330,var_329,uop_335,call_339,])
func_344 = relay.Function([var_250,var_261,var_290,var_311,var_318,var_329,], output)
mod['func_344'] = func_344
mod = relay.transform.InferType()(mod)
mutated_mod['func_344'] = func_344
mutated_mod = relay.transform.InferType()(mutated_mod)
func_344_call = mutated_mod.get_global_var('func_344')
var_346 = relay.var("var_346", dtype = "float32", shape = (13, 16, 15))#candidate|346|(13, 16, 15)|var|float32
var_347 = relay.var("var_347", dtype = "uint64", shape = (42,))#candidate|347|(42,)|var|uint64
var_348 = relay.var("var_348", dtype = "float64", shape = (168,))#candidate|348|(168,)|var|float64
var_349 = relay.var("var_349", dtype = "float32", shape = (13, 16, 15))#candidate|349|(13, 16, 15)|var|float32
var_350 = relay.var("var_350", dtype = "uint8", shape = (13, 16, 15))#candidate|350|(13, 16, 15)|var|uint8
var_351 = relay.var("var_351", dtype = "float32", shape = (10,))#candidate|351|(10,)|var|float32
call_345 = func_344_call(var_346,var_347,var_348,var_349,var_350,var_351,)
output = call_345
func_352 = relay.Function([var_346,var_347,var_348,var_349,var_350,var_351,], output)
mutated_mod['func_352'] = func_352
mutated_mod = relay.transform.InferType()(mutated_mod)
var_450 = relay.var("var_450", dtype = "int16", shape = (16, 14, 15))#candidate|450|(16, 14, 15)|var|int16
var_451 = relay.var("var_451", dtype = "int16", shape = (16, 14, 15))#candidate|451|(16, 14, 15)|var|int16
bop_452 = relay.less_equal(var_450.astype('bool'), relay.reshape(var_451.astype('bool'), relay.shape_of(var_450))) # shape=(16, 14, 15)
uop_455 = relay.cosh(bop_452.astype('float32')) # shape=(16, 14, 15)
bop_465 = relay.not_equal(var_451.astype('bool'), relay.reshape(bop_452.astype('bool'), relay.shape_of(var_451))) # shape=(16, 14, 15)
bop_468 = relay.maximum(uop_455.astype('uint64'), relay.reshape(var_451.astype('uint64'), relay.shape_of(uop_455))) # shape=(16, 14, 15)
var_475 = relay.var("var_475", dtype = "float32", shape = (16, 14, 15))#candidate|475|(16, 14, 15)|var|float32
bop_476 = relay.greater_equal(uop_455.astype('bool'), relay.reshape(var_475.astype('bool'), relay.shape_of(uop_455))) # shape=(16, 14, 15)
uop_483 = relay.exp(bop_468.astype('float32')) # shape=(16, 14, 15)
func_344_call = mod.get_global_var('func_344')
func_352_call = mutated_mod.get_global_var('func_352')
var_486 = relay.var("var_486", dtype = "float32", shape = (3120,))#candidate|486|(3120,)|var|float32
const_487 = relay.const([-8,8,-7,9,-9,7,10,8,7,-5,-4,1,-9,-5,-8,2,1,4,-8,-10,-5,-10,-8,-7,8,10,-2,-4,-1,-9,-9,-7,-2,-10,5,7,6,7,4,7,-5,-5], dtype = "uint64")#candidate|487|(42,)|const|uint64
const_488 = relay.const([1.879252,-3.521673,-1.984775,9.330163,4.207664,-3.498483,7.071927,6.605106,5.586134,-4.716682,-4.954784,9.590500,7.886943,-9.515778,9.583857,-7.685991,1.235520,8.686676,-0.746075,2.765420,6.298999,5.987996,6.278243,3.378303,3.722647,3.324667,-1.308061,1.193980,-4.987543,5.767279,1.731076,-8.351187,-0.733607,-5.995818,-0.427271,-5.118411,7.752045,-9.868462,0.393267,-0.531233,-7.054585,-5.977801,-3.464858,-5.131303,-5.120278,-8.484337,9.476834,-1.977755,-9.873968,-3.696389,-3.801512,0.603955,-1.932174,-6.384572,0.882290,-8.391372,-6.412968,2.277668,2.587384,7.956911,1.874640,6.784693,-0.494023,-9.359014,-0.634096,2.721836,5.141877,-0.721941,0.051058,9.110013,4.693585,-1.902832,8.655629,-6.308250,0.177654,-3.264008,-4.664414,-5.720889,4.667602,4.280374,1.251898,-7.776621,8.842823,2.499237,4.497244,-9.052493,-8.968809,-9.506622,-0.473688,-5.912255,-9.929303,-9.932522,-1.447780,9.091944,1.754917,0.510063,1.027424,1.748693,2.888460,0.130705,-5.996443,2.181491,-2.267575,-7.593068,4.815121,8.667327,2.787893,-4.343898,-2.793101,6.593999,-5.477027,-0.284550,-3.338133,5.463270,-2.681512,-9.551913,-7.417717,-4.909233,8.840593,5.814593,3.745504,-7.873082,-8.478977,4.828409,-5.272876,-4.605178,6.602606,-9.204523,-4.891211,4.963412,2.257236,4.185079,-1.267762,-8.579525,-1.973426,-1.169051,-1.871326,-2.715621,1.723820,9.051202,-5.891542,-7.059702,4.581548,0.856362,-8.931345,-1.892907,-4.379271,4.802090,9.294844,-3.841989,3.350837,-5.056102,8.717795,-3.878497,-8.979685,-6.654387,8.205505,-7.867132,-5.006063,7.145184,7.809022,-5.824425,6.435097,-7.815816,8.478714,8.468919,4.033642,2.061671], dtype = "float64")#candidate|488|(168,)|const|float64
const_489 = relay.const([[0.147434,-5.800303],[-8.826505,3.340398],[-3.995608,-9.617648],[7.585981,7.461817],[1.166994,-4.427657]], dtype = "float32")#candidate|489|(5, 2)|const|float32
call_485 = relay.TupleGetItem(func_344_call(relay.reshape(var_486.astype('float32'), [13, 16, 15]), relay.reshape(const_487.astype('uint64'), [42,]), relay.reshape(const_488.astype('float64'), [168,]), relay.reshape(var_486.astype('float32'), [13, 16, 15]), relay.reshape(var_486.astype('uint8'), [13, 16, 15]), relay.reshape(const_489.astype('float32'), [10,]), ), 9)
call_490 = relay.TupleGetItem(func_352_call(relay.reshape(var_486.astype('float32'), [13, 16, 15]), relay.reshape(const_487.astype('uint64'), [42,]), relay.reshape(const_488.astype('float64'), [168,]), relay.reshape(var_486.astype('float32'), [13, 16, 15]), relay.reshape(var_486.astype('uint8'), [13, 16, 15]), relay.reshape(const_489.astype('float32'), [10,]), ), 9)
func_162_call = mod.get_global_var('func_162')
func_165_call = mutated_mod.get_global_var('func_165')
call_493 = func_162_call(relay.reshape(const_489.astype('float32'), [10,]))
call_494 = func_162_call(relay.reshape(const_489.astype('float32'), [10,]))
output = relay.Tuple([bop_465,bop_476,uop_483,call_485,var_486,const_487,const_488,const_489,call_493,])
output2 = relay.Tuple([bop_465,bop_476,uop_483,call_490,var_486,const_487,const_488,const_489,call_494,])
func_495 = relay.Function([var_450,var_451,var_475,var_486,], output)
mod['func_495'] = func_495
mod = relay.transform.InferType()(mod)
var_496 = relay.var("var_496", dtype = "int16", shape = (16, 14, 15))#candidate|496|(16, 14, 15)|var|int16
var_497 = relay.var("var_497", dtype = "int16", shape = (16, 14, 15))#candidate|497|(16, 14, 15)|var|int16
var_498 = relay.var("var_498", dtype = "float32", shape = (16, 14, 15))#candidate|498|(16, 14, 15)|var|float32
var_499 = relay.var("var_499", dtype = "float32", shape = (3120,))#candidate|499|(3120,)|var|float32
output = func_495(var_496,var_497,var_498,var_499,)
func_500 = relay.Function([var_496,var_497,var_498,var_499,], output)
mutated_mod['func_500'] = func_500
mutated_mod = relay.transform.InferType()(mutated_mod)
var_590 = relay.var("var_590", dtype = "float64", shape = (9, 4, 1))#candidate|590|(9, 4, 1)|var|float64
uop_591 = relay.erf(var_590.astype('float64')) # shape=(9, 4, 1)
uop_595 = relay.tan(uop_591.astype('float64')) # shape=(9, 4, 1)
output = uop_595
output2 = uop_595
func_597 = relay.Function([var_590,], output)
mod['func_597'] = func_597
mod = relay.transform.InferType()(mod)
var_598 = relay.var("var_598", dtype = "float64", shape = (9, 4, 1))#candidate|598|(9, 4, 1)|var|float64
output = func_597(var_598)
func_599 = relay.Function([var_598], output)
mutated_mod['func_599'] = func_599
mutated_mod = relay.transform.InferType()(mutated_mod)
var_615 = relay.var("var_615", dtype = "float32", shape = (14, 9))#candidate|615|(14, 9)|var|float32
uop_616 = relay.log10(var_615.astype('float32')) # shape=(14, 9)
uop_618 = relay.log2(var_615.astype('float32')) # shape=(14, 9)
output = relay.Tuple([uop_616,uop_618,])
output2 = relay.Tuple([uop_616,uop_618,])
func_623 = relay.Function([var_615,], output)
mod['func_623'] = func_623
mod = relay.transform.InferType()(mod)
mutated_mod['func_623'] = func_623
mutated_mod = relay.transform.InferType()(mutated_mod)
var_624 = relay.var("var_624", dtype = "float32", shape = (14, 9))#candidate|624|(14, 9)|var|float32
func_623_call = mutated_mod.get_global_var('func_623')
call_625 = func_623_call(var_624)
output = call_625
func_626 = relay.Function([var_624], output)
mutated_mod['func_626'] = func_626
mutated_mod = relay.transform.InferType()(mutated_mod)
var_628 = relay.var("var_628", dtype = "float32", shape = (1, 9, 3))#candidate|628|(1, 9, 3)|var|float32
var_629 = relay.var("var_629", dtype = "float32", shape = (6, 9, 3))#candidate|629|(6, 9, 3)|var|float32
bop_630 = relay.subtract(var_628.astype('float32'), var_629.astype('float32')) # shape=(6, 9, 3)
func_344_call = mod.get_global_var('func_344')
func_352_call = mutated_mod.get_global_var('func_352')
const_637 = relay.const([-4.786734,6.004767,0.337551,7.305555,2.850580,-1.653523,7.143851,2.321854,8.402066,1.591042,7.549716,8.455225,6.046668,8.600083,-8.571987,-0.303267,3.434960,7.475717,-9.219684,-3.418381,0.467580,1.252109,1.896768,-4.994632,-9.959968,6.070498,5.077788,-0.247645,-6.933039,-4.145853,-7.393915,6.068933,-9.560201,-4.247146,2.358702,-7.030674,4.898685,5.764390,0.882864,2.343272,-8.144687,8.541563,-0.586601,-2.998479,0.816015,4.952449,7.268911,-7.211743,7.720449,-7.731487,5.871724,8.998769,2.424269,-6.470546,-7.775184,-4.687331,-9.005145,8.916284,9.463111,5.282847,-5.501682,5.357127,8.506426,8.222808,-1.679034,1.250034,4.588979,6.808168,7.857171,5.447897,3.870020,-5.946457,6.307520,-8.575716,-2.320867,-1.548756,0.376378,-7.392359,4.544360,5.124024,-9.098078,5.046541,-8.412235,-9.405154,-3.870255,1.727104,3.265586,0.363926,4.456116,3.206111,1.914871,-2.608748,7.227715,6.418201,0.003223,3.501389,0.495087,4.091377,3.002485,-6.123111,8.840044,6.287467,4.606846,5.561402,5.035125,-0.854006,-4.430328,1.531875,-9.350921,-6.167110,6.167666,3.710746,7.847343,-5.670598,-3.152202,-8.195192,3.795274,-1.597541,9.288687,9.016387,-4.952513,1.801650,8.836683,2.207994,-9.270194,6.259416,4.879339,-2.974639,1.611225,7.344610,3.708463,5.041962,7.212643,-2.603032,6.253871,6.172056,6.242178,0.954860,7.218833,-8.516939,-3.546450,-8.743326,-0.336177,-4.561231,6.038817,1.323527,-2.631197,9.170311,-3.403747,-4.451611,-0.826353,-4.683593,-4.572462,-7.305095,-9.526763,8.718506,-9.222571,-5.339318,0.506450,-1.149986,-4.745482,2.996247,-9.085997,-4.152773,-1.513551,-5.546194,4.225549,4.943086,-2.122756,1.319708,-0.223164,-7.858559,-9.419481,-6.743366,7.683270,0.237966,-2.019905,-2.410765,6.965256,-8.006789,3.057323,-9.467392,9.147817,8.141079,2.917957,-6.623038,2.206563,-0.712261,8.176111,0.878475,3.499867,-4.756787,-0.052953,-1.616385,6.846784,4.149440,-2.912445,7.253522,4.258473,7.054091,-2.347603,2.968773,-0.395333,6.700815,-7.563300,1.684631,2.780829,2.043358,-8.252179,-9.094005,-7.946113,0.005072,2.684307,-4.575494,8.080165,-1.590961,8.631552,0.176573,4.328579,3.039106,-5.632752,-0.189806,-9.025953,7.538185,3.819459,4.563370,6.988293,-1.717887,7.555779,-5.963331,0.444860,-5.881321,-5.913351,-7.291898,7.772644,1.991380,-9.157044,4.090614,9.940991,-4.552807,-8.734948,7.011032,-7.708713,7.156304,-3.656988,-8.297246,-5.382078,7.947438,-8.764272,-8.685210,3.746873,0.705776,3.053859,3.630751,8.193892,-3.858830,5.700730,-6.093333,5.750884,9.737692,6.198010,3.350943,8.627371,-3.847305,3.932232,4.971272,-8.371733,-9.115203,2.083127,-4.280512,8.208033,3.100438,-8.778529,-6.659500,4.349497,-7.014704,0.883914,-9.691501,-0.430212,3.791489,9.664022,-4.735743,5.797125,-4.589923,-3.049175,-1.777336,1.679324,-3.663097,0.841845,1.875110,6.331441,5.214050,-7.544292,4.412452,-8.332527,-1.213002,3.011786,9.255955,1.003863,3.563747,-5.298708,-9.682191,8.859880,-3.893336,0.270751,1.909610,1.255495,-3.435791,-9.928534,-8.472745,-3.195572,1.431352,8.636111,-2.308956,-2.341409,7.489090,8.591280,-9.238065,-2.841662,4.016323,-6.522790,-1.258787,0.236711,9.388600,-9.120107,-5.490264,-4.444394,-6.473166,-4.637234,9.812456,9.883227,-4.993658,-8.136259,8.349503,6.340480,-3.929205,-7.834097,1.397987,9.328698,6.801662,-8.366183,-0.028922,7.855773,-5.980770,-3.741237,-7.882687,-0.569229,-3.831641,7.754782,-3.746259,0.569134,8.107113,6.694198,3.926930,5.197770,3.860571,0.854115,7.125276,-3.285146,-7.303878,6.811555,-3.887607,2.023817,-1.619048,1.974661,9.171399,1.104334,-8.365921,8.442581,-7.920452,-9.668652,-5.650704,1.708848,7.589726,-7.335809,-0.713104,-4.204029,7.737587,-8.073873,2.382594,-3.220767,-9.349864,1.118722,0.166866,-6.683443,2.638530,8.559506,-2.604548,5.422152,-4.220920,-1.843348,9.981414,-1.225300,-6.714306,-8.098252,-9.154025,6.541061,2.311466,9.936286,7.631959,-0.675450,-3.570024,9.620837,-0.224504,-9.597984,-2.686667,-7.071506,-1.807481,-8.377225,0.272074,-6.746616,-4.398389,-1.408179,-4.181568,-4.370564,0.657235,-4.366043,-7.662348,5.561965,6.878867,4.270648,-5.123523,9.680819,-2.146265,0.908132,2.004683,1.307994,9.710706,8.149464,8.005063,-9.957574,-6.218304,3.632719,-6.898247,2.073721,-3.877752,6.587467,-9.877971,0.577235,-4.365000,-2.856282,-7.684062,8.349154,1.739227,7.693320,-1.130371,-3.332104,7.139691,3.590893,-9.826842,3.371439,-2.274108,5.374137,5.942494,7.480689,8.506801,1.893351,-9.410995,-4.830623,2.523440,-7.030277,0.357057,-6.716562,-9.717716,-0.884219,1.903169,-0.909421,-9.607378,-0.605273,-6.402986,1.592909,-9.261383,-8.105205,-4.092969,-4.962487,-3.179728,6.443394,6.266615,-6.872198,-9.229425,-0.144135,-7.748692,1.472352,-2.280855,5.704893,4.701005,3.422816,5.508825,-4.916283,-0.053700,-0.017959,-6.573665,-0.650194,2.104984,2.161607,1.335972,9.925183,-7.646257,-8.584488,7.504637,-2.818900,-5.474094,-5.285738,3.528078,3.240352,8.814421,-5.381401,-7.077886,-3.152049,-2.529481,8.224550,7.322907,5.482773,8.115970,4.526168,9.328522,0.521937,0.470581,-6.502306,1.859398,-2.104932,6.209931,-9.555285,7.856510,2.128142,-8.665635,3.647532,-5.900233,-4.287668,-7.222566,-5.153368,4.980184,3.218849,2.887505,9.541033,-4.614660,4.895251,-9.065768,9.148027,-5.594860,1.915027,9.055367,7.663413,-6.931825,2.955991,4.439964,-3.640001,7.207601,6.194328,8.641783,9.405270,-2.478910,8.473128,-8.682265,-8.842687,-2.709211,-3.722012,-4.228729,5.379007,3.413316,3.241147,-1.380646,6.678215,2.806346,-3.757039,3.057206,-5.191048,-7.483647,-7.324834,-8.407454,-1.174194,9.937963,-3.336147,-3.335580,-3.319500,-6.119607,-7.224854,2.108952,7.263410,-2.469247,-3.586828,9.275671,6.641059,-0.027340,4.681391,-6.537501,5.965968,-6.296032,8.513555,3.614295,-6.478105,8.631262,-3.495916,-6.692706,2.012578,5.719896,-6.416940,9.386069,8.423066,2.166693,-2.660466,-4.914387,3.907540,-0.334732,8.782232,-0.316380,6.383197,-7.352656,1.926979,9.063349,9.388787,-5.373224,-8.398491,2.576687,3.972939,-0.923691,-1.979579,-9.863559,9.306252,-3.855365,-0.936521,-9.997981,-6.761697,-4.803992,2.099211,-1.384933,-0.416180,-4.553653,-1.816083,-0.990244,-0.064701,-7.410578,5.647012,2.385712,6.629294,8.616149,-3.019980,5.092185,-1.776994,-3.953779,-6.946685,-5.388980,3.836900,8.021579,-4.665962,-2.322017,-4.771037,8.551519,4.505397,-3.884323,-2.425202,-7.837821,0.574632,0.142678,4.784453,3.075922,5.421676,4.218416,-1.834006,-1.978076,-3.430296,6.720640,2.836690,9.141732,7.612059,7.293374,3.670758,7.093176,-4.181773,2.025281,-8.414442,4.268692,-3.774556,5.928305,3.422891,-8.387177,-4.828091,-8.452439,-1.050490,-1.380052,1.521281,-3.214792,8.913034,4.670135,-4.869649,-6.056769,1.546991,-9.904453,-8.105343,-3.816455,-9.095549,6.675103,-1.657709,-1.901317,5.122431,2.875435,1.752316,-8.861816,8.405299,-5.581079,-3.667520,-6.341401,-1.104061,4.001194,-7.093381,-0.629667,-6.773524,9.947303,5.543317,-8.765972,-4.089175,6.715924,7.596363,4.237436,5.981126,-5.546636,-8.899835,9.369577,-9.876248,6.506996,-2.994901,0.678262,0.578657,8.160572,-5.422170,-7.592918,4.917840,-0.456610,5.125814,6.046736,8.428795,-5.773810,6.413691,-8.605929,-9.588151,-9.475353,6.709662,-4.337436,3.819326,3.838016,7.510121,-1.135708,5.287895,0.917654,-9.921991,6.302725,-2.887294,8.878519,4.623100,3.768712,4.095661,-3.999008,2.617051,-4.097146,0.385042,0.976942,9.021811,5.898450,-1.231071,6.064717,-4.828330,8.148782,-3.149275,-8.629889,-9.721410,0.684454,9.512379,3.013033,-8.456416,7.661905,2.278941,-0.373845,6.272707,-7.378011,-3.608633,-3.328207,-3.270013,-0.583589,1.936898,6.489881,-8.385223,9.395457,-8.151779,9.122368,-8.265173,-4.663197,8.745899,-7.325673,1.448176,-3.527090,-5.868094,-7.391002,-1.144710,7.097430,7.611094,-2.979715,-3.426736,9.754421,-6.586386,8.356306,-9.035160,-5.322010,5.239311,-2.212092,6.889883,-3.624030,8.305120,5.783811,9.138784,8.787061,2.193228,7.368105,-7.569891,-5.609214,3.873790,7.577903,-4.737944,1.569796,4.591385,-3.705993,-4.872747,-1.366554,5.612582,-0.763666,8.662593,5.371432,4.448763,-1.542750,8.567725,-4.764198,-1.468742,-7.854648,4.346597,-1.890775,6.020169,-3.230553,-5.564580,-9.020064,-1.817694,-0.248170,-5.372177,-0.602023,-0.272024,6.737445,3.428534,-5.336917,-4.994443,-9.469834,-5.668706,-9.968269,8.240458,-7.801594,7.275708,3.115408,9.890953,0.899128,8.125434,9.955902,-2.033127,-2.937156,-1.689168,-4.275515,1.313164,-6.939533,8.917793,-2.735012,4.006878,-3.257859,1.363772,-3.329349,-2.475252,-2.885180,0.108323,1.550728,9.749533,-8.047058,4.347103,-3.953361,0.787025,-8.628908,9.371799,-4.532422,7.102186,2.280796,-7.282711,0.079219,-2.982932,6.863384,6.920523,5.176930,-6.839650,-9.908824,-6.783594,-0.920598,-9.382093,5.464378,7.045921,-0.400499,-2.899255,4.411918,-5.236945,8.534433,0.604965,-2.096062,-9.429374,8.676184,9.316104,-0.776211,-5.522643,-7.235284,1.144365,-7.904406,0.441972,-0.247461,-6.502065,-1.031044,-4.926158,8.404384,-0.288182,5.992458,-4.685118,8.030290,-5.835477,8.218644,5.881629,6.370925,0.277365,5.528954,6.055280,6.587525,-9.853389,-8.063233,1.681838,-7.183227,0.101562,-7.195285,-0.609337,-7.734748,7.381261,4.557764,5.363120,-7.661712,-4.725250,7.727298,2.909343,2.347671,-0.167111,-9.447238,-1.978702,-4.962542,-6.151305,9.223755,-6.475468,-4.878580,1.267199,-8.416663,-7.575855,-0.300619,0.489207,-2.108511,-6.891744,-8.618905,5.431225,-9.093337,1.631929,-1.606360,-8.070128,-5.514153,3.927452,-0.345635,-8.808174,3.157676,7.333775,8.874156,8.135467,7.958133,9.452167,-2.547234,8.437520,-4.053710,0.878999,-4.323233,-4.031117,5.135045,6.138441,1.912831,-1.544072,5.953405,-0.749364,-9.555153,-4.312826,6.567388,5.403458,9.774793,-9.451873,6.305067,-7.303888,3.701028,-5.691082,-0.004341,6.635994,8.502634,-5.724998,9.769180,2.145923,-5.056094,-9.194763,-8.669184,4.181068,-3.643664,4.877660,-3.543270,8.636933,5.872486,-0.191533,-8.858150,9.208691,8.021853,-2.028707,-3.883843,1.317264,3.990207,-7.909211,3.298399,7.931418,8.781465,-4.908648,-0.001206,-9.694388,0.441317,6.213832,-1.954047,-8.107728,-5.384296,-4.878734,-0.987371,4.043863,1.508021,6.974821,-2.307614,-4.888220,-1.412942,8.092216,0.229652,-3.081897,-3.916830,-7.297728,-5.050682,-0.440261,5.915025,9.018595,-5.150098,1.446136,-9.678729,0.045510,-1.734015,-0.123322,-7.166584,4.782343,8.466064,-2.475086,-9.902947,-9.281075,8.987145,9.447057,-9.781253,0.006149,-5.318293,-3.446325,1.693588,6.991412,-8.297861,-1.030271,3.561062,-7.763197,8.053194,-0.460631,1.143268,-0.738447,4.985728,9.692153,-4.077033,4.486777,3.760541,9.725342,9.278016,-8.451916,7.240691,-1.804994,7.711964,0.808612,0.957335,-4.542038,7.132323,-0.437301,-4.614312,-3.806041,-0.330955,9.851501,2.502125,-9.134706,8.682221,-6.324626,-8.611640,0.041500,1.498649,-5.456777,-5.753252,2.311463,-3.105181,0.677064,6.961558,0.324621,2.680627,-4.243779,-8.811629,4.844838,3.163306,-0.717310,-1.987421,6.179390,-9.608746,-0.697476,-6.891377,-8.314985,0.005508,-4.673126,8.034986,-1.406815,-5.766989,-1.566649,-1.884865,1.048320,6.576916,6.508301,2.169475,-7.332256,-1.755550,5.526284,-7.992414,4.169805,7.921907,5.284924,-3.623019,3.715018,-8.033496,9.334165,5.963083,-8.922766,-1.533329,-0.880718,2.770284,3.920502,3.283306,-3.896364,2.444445,-6.739943,7.174243,0.169645,5.677937,7.552106,-8.015692,-1.647889,8.619494,5.825088,-0.465399,5.515204,-3.128122,-2.154510,8.736994,3.207254,-6.396299,0.269325,1.895079,2.281328,7.336051,-3.527281,9.675685,6.367511,-5.017380,-0.887174,-4.658545,-4.001659,3.218543,6.062610,9.615786,7.308461,-2.302645,-7.925713,7.863637,-1.752884,-0.402756,5.878383,-7.581078,-4.699414,9.381148,0.520743,-1.643216,-2.160531,-5.616375,1.503445,-0.571767,-4.006066,5.158390,2.835875,-8.398078,-8.694019,-1.526671,2.170832,-5.374586,6.966921,-8.036563,-4.435807,-7.887485,-5.084353,-1.412178,8.980065,-0.182976,2.131014,-6.431909,6.613717,-8.859641,6.336339,7.056384,0.292406,-6.105286,5.837727,-4.438082,6.181229,-2.587658,2.586994,3.198602,9.109930,-4.123186,-5.197610,3.721225,-3.009398,4.673451,2.411315,-7.224810,-4.302933,1.712185,4.628773,8.827486,3.871111,3.862827,-1.563257,2.528858,-3.654805,-2.329631,-0.246733,-3.281734,-9.860662,-4.845669,-4.803433,-7.111686,1.189633,-9.510679,0.101228,1.698366,5.290496,-1.797135,-9.725379,-6.907940,2.742145,4.611064,-2.644051,-3.888926,7.170353,-4.889998,4.940647,-9.382342,2.861059,-8.783972,1.196080,1.864007,-2.129378,-8.457713,2.618261,1.986930,-2.789571,-7.580621,7.928814,3.038702,2.680671,-4.412273,-7.191622,3.167707,-6.712090,8.742559,4.238203,-8.665044,-1.796567,-3.353430,1.799974,-8.028584,-2.719150,7.825608,-6.292562,-4.790305,-0.952611,-3.679743,-7.865495,-0.827745,3.639728,-7.805824,-0.020809,-5.795028,5.830310,-0.602690,4.878087,-5.552721,9.398726,0.352526,-1.106994,1.687077,-2.133398,-9.065025,8.287128,1.250467,-6.226991,-5.802766,4.379274,3.948361,8.743736,0.055438,-7.352918,9.524410,2.312831,0.693437,-1.049059,6.421678,1.386656,2.736038,-8.298862,0.345596,-4.640149,-9.837664,4.844087,0.716805,1.369355,7.126610,-7.291087,-6.346652,4.185314,-3.250696,-5.805489,-0.289913,3.208384,4.172220,2.737785,-1.752184,-9.160025,4.239911,-0.501697,-2.938937,3.501385,7.957495,-9.784480,-1.866046,-4.081222,-2.088415,-7.228076,-8.438172,-2.279489,6.598470,-2.186548,-0.009391,-4.417749,-2.418752,-9.513101,2.425354,-5.297987,0.327480,-9.935008,-0.213261,-2.732797,2.653409,-0.111065,-3.764491,1.410759,-6.528312,4.221760,-4.955881,-4.178930,-6.747252,-4.992602,-7.784455,4.994467,4.804663,4.553596,-2.620930,-4.616830,-9.758348,7.913582,-6.822375,0.124771,-5.324133,4.002422,-9.696575,-1.456181,-4.243917,-2.527240,3.430600,-2.605776,2.406421,0.621866,-4.451258,-5.284615,-5.665900,7.171806,-5.730089,9.543719,-6.765727,-2.757815,-7.566930,0.285319,5.436113,3.058469,6.316094,1.993815,-8.160601,-0.902727,9.905388,4.096875,-8.045901,-0.725890,8.718180,-5.199702,-1.174497,0.252328,7.737102,6.246154,-2.259538,6.709234,-1.788154,7.100580,5.560341,3.034620,-4.732806,-9.137496,-0.305528,3.179537,-5.113851,3.865099,-6.894031,3.000396,5.899205,-9.822538,-2.950042,-1.094858,4.402249,5.966860,5.251412,3.282582,7.041084,7.336112,-6.997035,-0.968502,-5.020952,2.473343,-4.125597,-5.002014,9.629814,1.769033,-1.824101,-3.802220,5.840434,1.242527,8.557821,-8.930273,-0.231738,-3.905706,9.504011,-9.873312,-3.194013,-7.961856,-1.034880,-6.262806,-7.284354,0.277172,7.629368,-1.364763,8.668768,-9.624525,-9.162905,-3.619759,-8.816109,2.182261,9.386859,3.568119,5.459840,-5.544449,-4.176518,5.063506,-9.204454,5.882635,-1.812919,5.678120,9.359222,-4.194245,-1.436524,3.044259,4.380904,-6.670299,-5.334853,-8.430761,-0.560317,1.217346,-9.773236,6.575025,-9.295348,-5.978876,-8.403024,-8.935137,6.659010,5.403157,8.748199,-5.139783,0.817742,0.251733,-7.038282,2.671491,-8.057345,4.767536,6.229555,-3.008237,-5.572536,-4.876692,-1.464953,-2.264264,-5.192747,1.876098,-5.669062,-3.872850,8.036222,5.853665,-6.169504,-2.570919,-8.650537,5.743936,-8.599278,1.606356,-4.077349,8.807178,-4.897396,1.403280,7.499890,7.761490,-4.867550,2.754037,7.344782,-3.795632,1.861265,3.103104,-3.761052,3.490444,-5.316536,9.358177,-7.890366,9.774678,3.978062,9.597331,0.819579,-5.650614,1.338580,5.225199,3.843256,-2.220694,-6.753810,-9.158690,-4.751328,8.733414,-8.855551,8.863830,1.776089,3.780400,4.637775,2.234680,6.974896,5.470679,0.372319,-5.310413,-9.304980,5.641235,-9.699113,6.028226,7.048516,3.124336,-6.645564,7.269385,3.353314,-8.919686,9.347101,9.712044,3.194059,9.079061,-6.576005,8.989755,-7.104600,1.172213,-2.604498,5.236393,-4.874396,2.685554,-3.487280,-3.559851,-1.310456,-4.077345,4.063456,-5.056813,-7.912769,3.367165,0.747226,6.102660,-2.829715,-5.253789,-0.583904,-6.872143,-8.670127,8.851163,-2.288588,-6.098994,-3.712495,3.966405,9.774262,-0.825371,7.414398,-4.208239,9.865070,4.985493,-9.996226,-2.181016,3.390270,5.634644,8.179072,-1.375682,2.606325,-0.996924,-3.588656,8.600520,7.046508,6.553896,3.766205,-9.325076,-7.214281,-3.691231,9.003446,9.730927,-6.882878,8.924276,6.027325,0.358599,-7.126833,-4.369700,6.686106,-1.877664,2.482318,-2.638839,0.098064,8.653435,-8.751704,4.155710,7.226916,-8.211780,1.735436,0.815069,-3.596074,0.096428,-8.191978,4.307967,8.834561,-4.828039,7.917710,-5.372625,0.307203,-1.165874,4.792580,-7.395376,-0.076256,-5.243514,-4.642296,-9.161052,2.403621,6.574546,1.918995,2.220815,8.758458,-8.207309,-4.286530,3.857753,-8.707290,9.452077,9.395404,-3.540785,6.264461,-5.882676,-5.139555,-5.085664,-8.811956,5.107158,-5.603560,9.760547,9.209938,-0.235460,-9.657143,9.963089,-3.134867,-3.404786,-6.515955,2.494764,-6.223259,5.271723,8.302299,-8.742018,-1.310378,0.033548,-7.314402,-0.191132,-1.788834,-8.003287,-8.758708,-5.634609,-3.146630,5.843806,8.375576,-7.818246,-3.390670,1.340340,1.713125,0.790449,4.667546,-7.820742,4.185612,2.169211,-9.297077,-0.853498,-8.652575,5.486824,-2.100299,8.312839,8.940760,1.644941,-0.997674,3.327861,-2.370977,9.443454,-0.442258,8.605237,-9.166817,4.016066,-2.803182,9.164483,-9.934661,-6.798653,2.860122,2.777178,4.418070,-5.861558,3.884314,-8.893228,3.734612,0.856464,6.132013,9.466766,-1.422845,-0.569916,6.430345,9.627899,-7.341163,-2.116398,1.239698,4.720588,-5.400630,-7.265209,4.416507,4.370697,-6.281630,-1.470475,5.999409,2.482603,3.108967,3.374728,-4.055533,-0.227386,-6.242766,-5.869343,-3.683048,-5.922503,-7.129835,-0.333855,8.957643,-2.044773,4.994738,-9.873758,-6.041605,-8.580202,0.295793,-5.325529,-0.726816,3.280069,2.528351,-7.772591,1.587262,-2.562639,-8.336722,7.661715,-5.737790,2.915759,5.955300,7.470443,-8.529154,9.221892,2.470683,3.659384,-0.037021,-8.978760,-0.637701,-9.175492,6.428726,4.097975,0.034532,-6.960278,-4.358008,5.812593,1.110603,-3.158376,-8.989308,9.540007,9.327360,0.993605,8.859912,-8.036851,5.287317,4.274937,8.500584,-0.342542,-6.347974,3.878963,-9.688230,-4.300301,1.492167,7.792650,-9.013948,3.060417,7.276584,7.547784,-4.758602,9.500565,-0.921072,-3.172612,8.324408,0.224285,8.215730,5.192449,2.713316,4.568944,-1.458460,2.037540,-4.771361,-8.584168,4.704084,-3.092087,9.825583,0.126257,3.332034,-0.690425,-7.274224,-4.603405,-7.326366,-1.576440,1.105356,-9.953678,-0.283903,-5.312168,-8.924571,8.112795,-9.081525,5.065721,6.663542,-7.002808,-3.069075,7.986948,-0.601923,3.590416,3.202265,-5.912018,5.646972,-0.678017,-5.766582,-7.055562,-7.883459,9.875173,-9.986218,-9.127415,3.828188,-2.528677,6.010034,1.135901,1.507809,-1.308324,-3.653853,4.714966,4.861182,8.624029,-2.975711,-1.228415,8.698274,6.525697,-8.499097,7.230341,-3.930825,-1.646288,-9.991073,7.447134,-8.290322,-0.641417,6.177669,-3.619990,-4.450128,-6.689226,-3.296621,7.916193,-0.341667,5.094816,-8.138226,8.714420,-8.449710,3.431782,3.792916,-0.837340,-1.961161,-6.501567,-4.709356,4.863628,-2.388185,9.487372,-9.986190,6.658851,1.099793,-4.858340,3.871138,6.152812,3.827223,-1.756411,9.074258,-0.331498,-4.131074,2.531682,8.150068,8.155723,5.802888,-9.200996,6.703822,-4.211685,-1.959286,-3.291546,-7.157180,3.951012,-7.932715,-5.319207,-0.674874,-7.404390,6.710363,5.504954,-0.668571,3.628547,8.305209,9.324000,1.128332,-0.266494,-2.297767,6.324187,-2.242741,-2.593487,0.526019,-8.041650,5.789777,-5.658361,1.965171,-7.904688,-1.727961,6.882555,6.359100,-0.870313,-9.026530,9.879184,7.207199,-7.727688,3.909230,4.994323,8.125012,2.720645,-5.533205,-2.913649,1.119681,2.818076,-4.025307,-5.098925,0.105558,-5.880416,2.524110,6.653038,-4.936623,-0.986171,-5.432356,-0.728233,1.984827,0.379634,9.659433,6.302897,-4.031313,-0.581403,0.057182,-0.457179,2.902581,3.406266,-1.472315,-6.209172,-4.814842,7.101916,-3.470408,-9.670756,9.747817,1.471319,3.475293,2.047065,3.292066,-4.427677,-6.534436,9.639170,4.185044,-1.004437,8.854821,9.052658,2.699698,6.418623,-1.303782,-6.145073,1.475765,2.600791,-1.898729,-5.228189,-6.472650,9.345669,8.180130,8.755406,2.250802,4.110394,-7.332144,-5.612082,3.811904,1.501060,3.196110,2.759400,0.056339,-1.729468,2.689373,5.610154,2.980261,5.959880,9.024916,-0.899131,-2.670078,-9.340688,-8.247012,9.555993,-5.121782,8.732583,-2.503004,-5.529468,5.707165,0.887880,0.357697,2.933926,5.432408,9.981995,7.445614,3.880222,6.290021,-0.922667,-8.770027,4.093232,-3.092889,9.840752,0.010088,-6.904336,-7.518078,-9.435651,-5.128993,-8.662239,-3.220927,-9.031543,9.572805,8.495499,0.629492,-4.040951,3.735318,-2.169425,5.050473,-8.588630,7.327527,5.901934,3.793293,9.638758,2.428814,3.736621,-9.216198,9.349365,-9.436363,-3.306122,-8.079688,3.127143,1.509527,9.993047,1.778388,6.828504,-4.445786,-7.256852,-7.683633,5.137042,-3.239980,2.971521,4.410800,-6.466212,-1.427517,4.448824,-0.055451,-8.213799,9.955331,-7.340210,-6.733110,8.971513,-2.483224,-1.670006,-2.080907,2.894075,-1.314062,6.863838,4.236637,3.462860,-8.287785,1.096459,-5.236963,-5.825313,4.479445,-2.620133,5.057316,0.526886,-0.502117,-7.949506,0.333479,5.322348,7.747468,4.519506,-3.944163,-8.946766,-9.850243,3.016747,2.259704,-6.055280,-9.317601,-9.035911,-9.239303,-5.129393,0.519260,4.127020,-0.663841,6.904821,6.577142,-1.989108,9.836706,5.964072,-3.654976,-9.969843,-2.261429,3.101727,-4.568362,-2.747719,2.934466,7.454394,-3.856118,5.616821,1.148497,-3.551927,-1.740358,-8.744186,4.588987,4.269337,4.509378,8.287474,-8.322576,-9.743654,1.652641,0.089178,5.618769,1.634452,-5.661487,-2.919691,5.475616,-9.800847,-0.903885,-0.858863,-0.950799,7.025111,3.608788,-7.179048,7.367026,-8.692345,5.178420,2.501818,-8.173881,-4.689144,-0.584060,-8.354878,5.941156,9.747709,-0.803438,5.045753,9.282835,-3.449513,-1.828226,-7.829488,1.766316,-1.773736,-1.122876,-2.198694,-6.112163,5.198088,6.346414,7.111038,9.837017,-0.369579,-2.984201,-4.755547,7.050301,-7.857201,9.665848,8.811128,-6.054235,-2.783931,-4.556541,1.210546,9.549636,2.318160,6.065779,-2.506060,0.394180,-5.161585,-3.075077,3.315699,4.877166,9.695919,-2.887613,3.356351,-1.458598,7.546995,-5.567921,-2.487569,-6.697274,6.216060,-8.622626,-4.293018,-1.166478,7.294108,1.979784,-8.892853,-6.237837,-8.765400,0.330005,5.847062,2.109892,-5.932096,-9.546398,6.419454,-8.775439,-0.690701,-2.233381,-7.096874,3.304334,-1.954921,-1.724220,1.080844,-3.368150,0.662203,3.363937,-3.030501,3.629321,6.670081,5.552934,-5.568403,1.532900,-7.519114,3.614990,-2.233184,-0.258686,-9.713159,-1.256810,0.147566,6.585227,-3.855141,-4.175996,7.156700,6.931538,1.180455,0.491143,-2.671770,-0.908600,0.582229,2.249538,-0.352797,-1.692829,-3.752172,-1.664517,0.163790,-7.198743,-9.113261,-6.812990,-4.774311,-3.296804,-0.684608,-6.357561,-5.721304,9.590088,-6.376947,-1.280644,-9.526741,3.320273,5.729629,8.808579,4.250065,-8.583346,-5.412125,5.808376,-1.112038,-4.169952,-3.306187,5.137059,2.286551,-6.339102,7.500677,-2.486340,2.178814,-4.504549,8.974335,2.975069,5.080591,-8.897167,3.350115,-6.082035,-0.620895,-5.300240,0.413391,5.030098,2.776084,3.568864,-8.595480,-9.255710,9.968279,-8.080585,-6.661928,-3.661749,9.230360,7.275979,-7.060083,-5.675021,-6.166504,9.502118,-1.143410,-9.881136,-4.390915,-6.019142,2.718869,-4.558703,9.470335,0.063641,9.634082,8.222434,0.451201,4.708948,7.615163,-0.337689,-8.784473,8.992385,-0.258761,-5.338972,4.842316,-4.265240,-5.573213,-3.841600,1.727003,8.077536,4.165998,-2.081453,-8.380007,-8.034397,0.372232,7.016267,4.827937,5.015821,4.845673,-3.436460,-2.753167,0.211047,-1.417324,1.898730,-9.932637,-9.194277,0.718419,-1.166800,-5.008537,6.293105,2.061076,6.274605,-0.501405,-2.589145,0.113083,-0.369545,2.824509,-6.560930,0.083725,-7.606150,-9.845220,8.765690,6.794949,5.348723,1.155933,8.941485,-8.534514,2.761702,8.231808,-0.434589,-2.239338,3.689992,-7.808638,7.900573,7.769546,1.697621,-1.913338,7.257013,-0.181196,0.061823,-0.977704,-6.085148,-3.271247,7.069601,-6.388918,-6.984466,-5.202181,-1.010113,6.191137,9.119642,2.916358,-8.178114,5.754756,1.850916,4.401352,9.091495,-3.061673,-9.603878,5.396966,-2.249387,4.915722,4.788489,-8.934058,-8.245326,6.836730,-6.011614,9.840774,0.789332,5.438705,-3.412968,2.432060,-5.505409,-2.737986,-2.927163,-6.348251,6.501981,7.033831,2.410870,-0.876512,9.243787,4.949515,8.424724,6.983927,-1.037902,7.132884,4.148301,-0.950226,-0.352945,-2.647590,5.365188,-3.585285,-9.068482,4.524918,2.817303,9.841899,2.865292,4.171882,0.970629,5.790395,2.785203,3.956305,-8.060235,-8.227292,-4.796120,0.342123,9.514681,-6.300783,-9.610150,4.122302,5.812294,-4.484274,-6.013804,8.470503,-8.191595,8.571375,-4.943082,-9.173752,-8.943488,5.549802,8.505446,-0.767953,-4.591350,-3.711866,-5.923742,5.751012,0.296858,6.865324,7.922176,6.453087,5.192698,4.659439,1.512855,-1.867319,-9.653226,-1.261530,3.593075,-7.356966,1.018946,-1.677694,-3.831146,-2.795172,3.816174,9.830740,-7.036006,5.007929,9.071950,9.439444,-0.455458,2.752790,-6.823761,7.143886,-4.517411,8.413162,-4.295946,-8.064177,6.083744,-1.815939,-9.936170,6.014965,1.714736,-9.778632,4.410406,6.528664,-7.301437,-9.725068,3.140129,-7.728720,2.258295,3.775575,2.829541,3.663330,-0.183455,7.250276,0.332576,-4.064468,8.928049,-0.876470,-8.192399,2.613336,-6.251699,2.787543,3.596500,6.800764,-8.820760,-0.277695,-2.617152,-7.944598,-5.837273,9.133275,9.852975,-1.977115,9.844553,4.399162,-3.655771,-1.719537,9.448587,-1.006903,9.591625,7.152670,2.227180,1.440250,0.957225,-0.385793,8.932939,-7.784717,7.894251,-0.105345,1.101456,1.701409,-2.881373,-4.346358,7.888879,-2.854596,-0.646209,-5.025353,5.284234,-1.932643,-4.839242,-8.058911,-1.208423,-9.780863,2.338152,-8.905859,-0.136691,1.059640,0.914992,-2.225734,-7.198736,5.900354,5.563620,-6.060804,7.191106,1.981204,-0.411281,-5.504525,-8.183236,-5.904047,2.135706,-3.192219,-8.343191,-7.270145,7.815890,2.015118,5.480056,0.409480,-9.970151,7.451067,-7.386784,4.886698,5.366528,2.716659,-9.883959,9.232384,2.864515,-8.943290,9.727609,2.436934,7.345268,3.509206,-5.792181,7.029844,-6.887439,-4.215767,-9.073026,4.660854,7.904173,6.505413,0.324088,2.268820,1.760858,-0.475386,-9.664610,9.898937,-0.078687,-6.340312,5.601946,-9.205402,4.325767,-9.155890,-0.228155,2.127822,8.793801,-1.220279,8.061824,6.426397,5.319453,-1.106944,8.357858,3.625916,-4.479432,-3.817675,-4.773132,9.711476,-4.147497,1.311593,-0.047276,-5.665124,3.740467,-4.293121,8.598451,4.556914,4.521505,-7.436576,-7.529183,2.736434,-4.028270,-1.035407,-4.178166,-0.224583,-1.550769,3.917721,-9.286645,-2.219070,-0.531943,-6.399483,-2.735411,-1.164287,5.889609,-7.361270,7.574209,-9.792601,-2.529254,-1.311224,6.362620,8.110912,-7.750592,-3.917105,-5.351497,-2.684065,0.386992,-4.394142,5.897291,8.450370,-8.001063,-5.614759,4.607429,2.875509,7.368854,-6.458150,-7.583685,-4.196991,0.800203,9.868823,4.699028,-8.419755,-2.636441,-6.336537,-2.739144,1.751065,-3.214538,-6.201227,-4.642736,6.286026,7.006315,-7.605651,8.189249,-1.399439,0.590360,-1.874990,6.607611,2.041934,-7.218488,9.786079,-9.442038,7.914595,-1.664837,-2.446233,9.820678,6.368326,-0.338157,-9.826183,-2.908057,-0.054839,-6.743292,2.684181,2.556273,2.136780,-4.715257,-2.884364,6.159463,1.606013,4.979259,0.613533,5.444127,7.172821,-1.027906,9.560752,-9.532687,9.821789,0.448828,7.141549,9.200343,-0.423757,9.977546,-3.391458,-2.497707,3.636149,-9.328960,-7.856870,6.008058,6.393546,4.731789,-3.461895,-4.486934,-0.516253,-0.878954,-0.359607,-9.861316,-1.087127,-9.468017,2.988293,-1.446033,-5.842405,5.829650,3.950228,3.228189,-7.732127,0.123458,-2.134980,-4.000385,3.748055,-7.397122,2.526686,-9.130964,4.388687,-3.743413,9.926429,6.245796,8.698668,-6.007006,8.871736,7.129838,-6.244267,-0.909821,-8.161765,3.698003,-8.011170,-2.549258,8.449620,5.094094,5.215469,5.908368,-2.619907,-4.764908,4.256102,-4.918735,-4.329624,-8.774258,5.336846,-1.149861,-1.490582,0.354336,7.690238,-6.614214,0.937553,5.593597,5.696992,9.975096,2.941302,-5.848070,9.436524,3.328245,-4.023292,-0.235413,6.270078,-0.451443,3.607213,-1.316070,5.287138,1.442580,-6.737566,0.001782,8.814570,6.790283,-0.687218,5.401522,2.681129,-5.627874,-9.868499,5.180012,3.227508,2.734734,9.832166,8.813606,-1.632478,0.359314,-7.527732,3.185120,-7.356335,-6.678533,-9.751295,-8.102487,9.557217,2.335909,1.668175,1.779868,-2.222028,3.142490,-5.935421,-5.839695,2.728217,4.105038,-9.739058,9.388214,8.056787,-7.251725,0.594654,5.495196,7.055126,2.510367,5.434809,0.344140,7.947906,-9.324213,3.578652,5.657548,-4.329987,-3.617836,7.603348,4.354376,-5.171243,-3.073177,-5.941554,-3.218245,-7.698818,5.383495,-5.044903,-2.644560,8.893820,0.626803,1.313981,-3.735151,2.692490,2.469935,-3.514218,8.862295,-2.140201,2.277042,-9.703681,-0.713737,1.907974,-5.792459,-4.325053,0.288463,0.293165,-4.827254,8.488313,7.118002,-2.217877,8.006223,8.095285,1.489162,-6.641368,7.982711,-5.335258,-8.545042,1.323604,6.067179,5.110865,1.175987,8.577497,5.339219,-4.083164,3.750064,3.111316,-2.346768,8.529385,-8.827299,-7.761962,-5.080660,4.437653,-3.034293,-2.393899,-3.537915,-3.611724,-3.064011,-0.366691,4.457691,-9.564269,6.790850,7.969229,8.358362,4.497662,9.845868,5.575829,-0.941328,-0.221450,6.583709,-1.226725,-8.744669,3.509196,-4.220642,-8.932943,3.189508,-4.163235,4.385990,-2.087213,-4.800265,-5.367312,7.603065,-2.774146,1.411724,-8.150488,5.480827,-7.088854,4.824984,-8.628533,8.071856,7.589713,-4.633503,6.078147,-5.737120,-7.967968,8.632687,-1.065557,-4.804678,-9.946818,7.906550,-0.055110,8.134389,-2.528924,-2.182006,-8.068623,6.797953,-5.887555,5.945589,0.069069,8.882536,6.905082,6.298470,7.362835,-8.920806,1.383467,-4.306734,-1.480201,-0.139612,1.629916,5.769333,6.439432,7.867850,-5.028742,1.425747,-2.627813,0.682322,-2.005066,3.760227,-4.430461,7.749956,8.186318,3.757286,-9.325825,-2.045037,4.729924,4.153391,9.406920,-8.491139,-4.580223,4.642062,1.049743,-6.131647,5.178698,6.875060,6.371851,7.949845,4.078033,-7.913941,7.017313,9.956518,-2.476289,2.493121,6.654295,-7.121277,6.110785,9.557261,-6.586750,-1.881837,4.774173,-3.271293,6.310486,-7.177246,-4.984698,-5.041836,9.166163,-6.723484,-0.714427,2.739568,-9.603583,4.563130,-7.351627,-5.545699,-2.718056,-0.277796,-2.218392,-3.020897,6.621081,-4.678027,6.265147,7.855860,-2.120827,2.007622,5.365924,9.397498,-3.437997,4.877553,0.677786,6.582607,3.610447,5.680605,-9.300155,8.513077,-2.177569,-2.832216,-7.205563,3.748190,7.851015,6.610408,1.576128,-2.752356], dtype = "float32")#candidate|637|(3120,)|const|float32
var_638 = relay.var("var_638", dtype = "uint64", shape = (42,))#candidate|638|(42,)|var|uint64
const_639 = relay.const([-9.049712,4.815792,7.024158,-8.643240,-4.088101,8.263004,-9.852747,-0.112629,2.625804,-1.245092,-1.659077,-7.833811,-2.414647,-6.327950,7.707471,-2.923736,-9.059491,-7.091856,-6.749729,-8.323835,3.429776,5.367997,-3.030232,-0.026807,-7.455097,-3.746907,6.338592,0.676746,-9.835152,-1.777260,1.646045,6.511464,-5.949670,3.607482,-6.221937,9.807299,-9.732284,1.474173,-0.271897,-1.528545,-3.749929,1.567625,-6.543163,8.679093,-6.965815,-0.663316,6.113899,-3.887755,4.626982,-7.820967,5.619338,-0.361552,1.033267,-3.028496,2.183412,-2.691213,3.549514,9.765472,-9.446193,-6.731819,-1.063867,-9.506519,-5.038866,8.803400,7.182700,7.272298,-0.347446,-1.049302,8.512426,9.633808,5.544289,-2.965414,-7.599287,-6.841039,9.662885,8.493174,5.060414,3.503024,-9.117893,-3.982401,-7.433606,-6.077427,5.975427,-4.271439,5.606930,9.718830,7.036307,-4.419252,4.814761,-5.853470,6.444956,1.337097,-8.028403,6.569519,8.619434,-9.408923,3.723000,-0.039551,8.929365,-7.462785,6.628381,1.300308,5.645034,-8.610481,1.067841,2.597529,-5.274643,4.359421,7.705928,-7.564581,-4.663785,8.093507,7.493291,-1.031024,-2.307998,-7.568980,-5.619417,9.184859,4.256967,9.031945,-5.937758,0.990072,1.438971,6.405115,1.002654,3.739001,-5.182538,-8.808740,7.713706,-7.106570,4.007156,5.938697,3.218157,3.048831,-8.064493,7.838872,-3.051851,8.199383,7.723761,-9.367031,-6.882182,4.179191,-2.744246,2.606209,-0.272124,-3.838113,-1.979780,-1.821570,-3.818676,-7.188662,-7.747610,5.832246,-4.182022,-2.636119,-4.831798,0.442175,-1.097807,4.025234,-4.930265,-9.883917,3.618696,-4.662183,-7.381468,4.439910,-6.670265,4.839365,0.497714,6.684921], dtype = "float64")#candidate|639|(168,)|const|float64
const_640 = relay.const([9.884461,-3.506993,1.960897,3.463693,8.629282,-7.501242,-0.139525,-2.125085,3.751137,8.793915], dtype = "float32")#candidate|640|(10,)|const|float32
call_636 = relay.TupleGetItem(func_344_call(relay.reshape(const_637.astype('float32'), [13, 16, 15]), relay.reshape(var_638.astype('uint64'), [42,]), relay.reshape(const_639.astype('float64'), [168,]), relay.reshape(const_637.astype('float32'), [13, 16, 15]), relay.reshape(const_637.astype('uint8'), [13, 16, 15]), relay.reshape(const_640.astype('float32'), [10,]), ), 4)
call_641 = relay.TupleGetItem(func_352_call(relay.reshape(const_637.astype('float32'), [13, 16, 15]), relay.reshape(var_638.astype('uint64'), [42,]), relay.reshape(const_639.astype('float64'), [168,]), relay.reshape(const_637.astype('float32'), [13, 16, 15]), relay.reshape(const_637.astype('uint8'), [13, 16, 15]), relay.reshape(const_640.astype('float32'), [10,]), ), 4)
func_223_call = mod.get_global_var('func_223')
func_226_call = mutated_mod.get_global_var('func_226')
const_648 = relay.const([-3.986560,-3.449820,7.622355,-3.681886,1.479275,3.489404,0.381164,-8.960665,9.109848,6.166025,8.861581,-4.258568,-5.338024,9.377131,-4.419258,-3.213227,6.694715,3.961452,-9.385608,7.279842,-3.829391,-8.644441,4.900175,6.474190,5.109091,-8.428805,1.373028,-0.596753,-3.266793,8.138958,-2.918486,4.205518,1.529563,7.398398,1.690948,7.384151,6.297920,3.304271,-2.397634,3.063689,1.325688,7.295875,-7.240191,-7.255611,8.022828,9.809737,8.048701,-5.933813,4.541041,4.886422,-2.798858,-3.692910,-9.653517,-9.619310,-4.544033,-5.093563,0.614825,-5.011356,4.459589,5.395523,0.149332,-7.756632,9.564528,0.768406,-8.969779,0.307857,6.861998,-5.332906,-8.962929,3.141216,6.087918,-9.985587,0.417431,-3.137700,-5.871523,5.430427,3.282333,-9.724831,-2.045575,6.462308,-3.610210,8.318437,8.137340,3.146189,0.047551,-0.198819,-0.549439,9.079734,-1.816031,-1.119213,6.144200,-7.922997,-8.655851,-9.877779,-2.159449,2.165250,-0.433016,-8.635132,0.651414,3.836269,-6.714072,6.904894,7.761472,-9.958064,-8.828971,-2.291862,9.749647,-2.042693,5.520470,-0.082380,3.176036,8.985328,4.476424,2.021273,3.978495,6.952087,-6.833905,8.904725,1.279078,8.497272,-6.568969,-6.055470,-1.752775,9.768949,3.041966,1.657813,-8.195193,-6.341598,0.037793,-1.143326,3.050083,-4.720962,-9.187084,1.116718,-4.418823,0.741922,-0.639228,-3.475816,0.166663,-7.857584,1.540382,0.964401,-7.978394,9.907156,6.854670,3.113177,4.265683,-9.543043,1.891228,-4.498228,8.760763,-7.677393,7.190451,-7.965768,8.937527,2.666029,7.638037,-6.782070,-6.381335,5.192455,5.411945,-6.691473,-2.184556,-2.994872,-7.773921,2.294545,-2.681463,4.393839,-6.581605,-9.047808,9.856146,8.973509,-5.626596,-0.359181,6.433255,-9.530123,-8.193914,-5.805551,-7.280917,-8.298354,0.647223,-1.732711,-6.737283,9.199637,1.661025,-7.798818,6.495508,9.992712,4.577152,-4.578129,2.980779,9.730787,-5.051720,3.277067,-8.549465], dtype = "float32")#candidate|648|(195,)|const|float32
call_647 = relay.TupleGetItem(func_223_call(relay.reshape(const_648.astype('float32'), [13, 15]), relay.reshape(const_648.astype('float32'), [13, 15]), ), 0)
call_649 = relay.TupleGetItem(func_226_call(relay.reshape(const_648.astype('float32'), [13, 15]), relay.reshape(const_648.astype('float32'), [13, 15]), ), 0)
uop_650 = relay.log(var_638.astype('float64')) # shape=(42,)
const_655 = relay.const([-2.964504,4.013297,-6.753422,4.886700,-7.700286,0.161710,2.777981,4.337967,-2.890598,6.272991,-1.213871,3.596700,-5.774205,-3.865331,-5.752662,4.415914,9.012658,-8.898465,2.880249,-9.214341,8.762889,6.760625,-5.741577,-9.810725,0.709652,6.883978,-4.786097,-1.684150,4.679322,9.039235,-5.474014,-0.484198,-4.636106,4.928811,-1.333023,9.055174,4.495818,1.628985,9.222460,7.364166,1.667715,-6.228317], dtype = "float64")#candidate|655|(42,)|const|float64
bop_656 = relay.logical_or(uop_650.astype('bool'), relay.reshape(const_655.astype('bool'), relay.shape_of(uop_650))) # shape=(42,)
func_623_call = mod.get_global_var('func_623')
func_626_call = mutated_mod.get_global_var('func_626')
call_673 = relay.TupleGetItem(func_623_call(relay.reshape(call_636.astype('float32'), [14, 9])), 1)
call_674 = relay.TupleGetItem(func_626_call(relay.reshape(call_636.astype('float32'), [14, 9])), 1)
var_675 = relay.var("var_675", dtype = "float64", shape = (42,))#candidate|675|(42,)|var|float64
bop_676 = relay.bitwise_xor(uop_650.astype('uint8'), relay.reshape(var_675.astype('uint8'), relay.shape_of(uop_650))) # shape=(42,)
bop_679 = relay.multiply(bop_676.astype('uint32'), relay.reshape(bop_656.astype('uint32'), relay.shape_of(bop_676))) # shape=(42,)
uop_682 = relay.asin(var_675.astype('float32')) # shape=(42,)
output = relay.Tuple([bop_630,call_636,const_637,const_639,const_640,call_647,const_648,call_673,bop_679,uop_682,])
output2 = relay.Tuple([bop_630,call_641,const_637,const_639,const_640,call_649,const_648,call_674,bop_679,uop_682,])
func_686 = relay.Function([var_628,var_629,var_638,var_675,], output)
mod['func_686'] = func_686
mod = relay.transform.InferType()(mod)
mutated_mod['func_686'] = func_686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_686_call = mutated_mod.get_global_var('func_686')
var_688 = relay.var("var_688", dtype = "float32", shape = (1, 9, 3))#candidate|688|(1, 9, 3)|var|float32
var_689 = relay.var("var_689", dtype = "float32", shape = (6, 9, 3))#candidate|689|(6, 9, 3)|var|float32
var_690 = relay.var("var_690", dtype = "uint64", shape = (42,))#candidate|690|(42,)|var|uint64
var_691 = relay.var("var_691", dtype = "float64", shape = (42,))#candidate|691|(42,)|var|float64
call_687 = func_686_call(var_688,var_689,var_690,var_691,)
output = call_687
func_692 = relay.Function([var_688,var_689,var_690,var_691,], output)
mutated_mod['func_692'] = func_692
mutated_mod = relay.transform.InferType()(mutated_mod)
var_728 = relay.var("var_728", dtype = "float64", shape = ())#candidate|728|()|var|float64
const_729 = relay.const([[-0.395875,1.154063,6.602432,-2.786951,-4.947984,2.016826,0.300508,0.791086],[9.745675,8.776621,2.196166,-2.630816,-9.895205,4.262447,-9.314331,5.779533],[9.905743,-7.772239,6.966858,0.056141,0.135070,-7.594039,5.551632,-9.113269]], dtype = "float64")#candidate|729|(3, 8)|const|float64
bop_730 = relay.mod(var_728.astype('float64'), const_729.astype('float64')) # shape=(3, 8)
output = bop_730
output2 = bop_730
func_734 = relay.Function([var_728,], output)
mod['func_734'] = func_734
mod = relay.transform.InferType()(mod)
mutated_mod['func_734'] = func_734
mutated_mod = relay.transform.InferType()(mutated_mod)
var_735 = relay.var("var_735", dtype = "float64", shape = ())#candidate|735|()|var|float64
func_734_call = mutated_mod.get_global_var('func_734')
call_736 = func_734_call(var_735)
output = call_736
func_737 = relay.Function([var_735], output)
mutated_mod['func_737'] = func_737
mutated_mod = relay.transform.InferType()(mutated_mod)
const_744 = relay.const([[-6.553115],[7.665278],[-2.654652]], dtype = "float32")#candidate|744|(3, 1)|const|float32
uop_745 = relay.sinh(const_744.astype('float32')) # shape=(3, 1)
uop_751 = relay.sqrt(uop_745.astype('float32')) # shape=(3, 1)
bop_753 = relay.maximum(uop_751.astype('uint32'), relay.reshape(uop_745.astype('uint32'), relay.shape_of(uop_751))) # shape=(3, 1)
bop_759 = relay.logical_and(uop_751.astype('bool'), relay.reshape(const_744.astype('bool'), relay.shape_of(uop_751))) # shape=(3, 1)
output = relay.Tuple([bop_753,bop_759,])
output2 = relay.Tuple([bop_753,bop_759,])
func_762 = relay.Function([], output)
mod['func_762'] = func_762
mod = relay.transform.InferType()(mod)
output = func_762()
func_763 = relay.Function([], output)
mutated_mod['func_763'] = func_763
mutated_mod = relay.transform.InferType()(mutated_mod)
func_762_call = mod.get_global_var('func_762')
func_763_call = mutated_mod.get_global_var('func_763')
call_799 = relay.TupleGetItem(func_762_call(), 1)
call_800 = relay.TupleGetItem(func_763_call(), 1)
var_804 = relay.var("var_804", dtype = "bool", shape = (3, 4))#candidate|804|(3, 4)|var|bool
bop_805 = relay.power(call_799.astype('float32'), var_804.astype('float32')) # shape=(3, 4)
bop_808 = relay.power(call_800.astype('float32'), var_804.astype('float32')) # shape=(3, 4)
output = relay.Tuple([bop_805,])
output2 = relay.Tuple([bop_808,])
func_809 = relay.Function([var_804,], output)
mod['func_809'] = func_809
mod = relay.transform.InferType()(mod)
var_810 = relay.var("var_810", dtype = "bool", shape = (3, 4))#candidate|810|(3, 4)|var|bool
output = func_809(var_810)
func_811 = relay.Function([var_810], output)
mutated_mod['func_811'] = func_811
mutated_mod = relay.transform.InferType()(mutated_mod)
func_762_call = mod.get_global_var('func_762')
func_763_call = mutated_mod.get_global_var('func_763')
call_835 = relay.TupleGetItem(func_762_call(), 1)
call_836 = relay.TupleGetItem(func_763_call(), 1)
var_837 = relay.var("var_837", dtype = "bool", shape = (3, 9))#candidate|837|(3, 9)|var|bool
bop_838 = relay.less(call_835.astype('bool'), var_837.astype('bool')) # shape=(3, 9)
bop_841 = relay.less(call_836.astype('bool'), var_837.astype('bool')) # shape=(3, 9)
func_130_call = mod.get_global_var('func_130')
func_132_call = mutated_mod.get_global_var('func_132')
var_843 = relay.var("var_843", dtype = "float64", shape = (84,))#candidate|843|(84,)|var|float64
call_842 = relay.TupleGetItem(func_130_call(relay.reshape(var_843.astype('float64'), [7, 3, 4])), 0)
call_844 = relay.TupleGetItem(func_132_call(relay.reshape(var_843.astype('float64'), [7, 3, 4])), 0)
func_201_call = mod.get_global_var('func_201')
func_204_call = mutated_mod.get_global_var('func_204')
const_846 = relay.const([-9.749334,0.774662,-5.501358,0.444630,-9.852570,-7.220681,7.456912,6.615347,3.947046,-0.886585,1.041475,-4.283652,-5.779568,-2.457118,3.147425,8.300961,2.739921,0.716320,-3.345581,-2.454875,-6.887350,4.137994,3.276421,8.136423,9.734390,-9.556028,2.437448,-9.543826,-1.896177,-4.223376,6.275980,0.623954,-8.041646,-5.465553,1.400045,6.880237,5.217043,-4.426036,6.406492,1.247070,3.340020,-5.497390,-0.031833,-8.909366,4.225950,-9.342535,8.075225,-9.504436,-2.256516,-8.029496,2.694661,3.360640,-5.083279,0.683074,5.115670,5.875932,-6.042783,-1.680150,-5.545507,5.232805,5.643327,-9.233969,0.577248,-8.107920,5.205270,-4.689090,3.389642,6.118051,8.500046,8.296292,1.808469,9.827360,-7.507544,-0.667453,2.220218,1.592630,6.063490,0.984678,-6.121948,-6.593412,-3.824208,-7.918027,-9.747568,-7.527003,-3.882071,0.885326,-8.257875,0.902771,-7.237163,0.714014,6.865245,-6.717184,0.327029,7.876056,4.895061,3.037376,-6.456336,5.698393,-9.234016,-6.248582,-4.299242,-9.639563,5.501899,3.666608,-6.554472,2.597503,2.098391,-8.532132,7.382249,-0.726849,-2.595240,-6.742294,9.513391,5.064378,4.947930,-8.252816,2.947806,-5.898151,-0.546535,-1.713765,9.811485,-5.906317,6.749250,5.463525,8.062318,-1.956570,8.043130,-8.901052,-1.987756,-2.269080,-1.409468,6.316619], dtype = "float32")#candidate|846|(132,)|const|float32
call_845 = func_201_call(relay.reshape(const_846.astype('float32'), [11, 4, 3]), relay.reshape(const_846.astype('float32'), [11, 4, 3]), )
call_847 = func_201_call(relay.reshape(const_846.astype('float32'), [11, 4, 3]), relay.reshape(const_846.astype('float32'), [11, 4, 3]), )
uop_853 = relay.erf(const_846.astype('float32')) # shape=(132,)
bop_859 = relay.add(const_846.astype('uint8'), relay.reshape(uop_853.astype('uint8'), relay.shape_of(const_846))) # shape=(132,)
uop_862 = relay.acos(bop_859.astype('float64')) # shape=(132,)
output = relay.Tuple([bop_838,call_842,var_843,call_845,uop_862,])
output2 = relay.Tuple([bop_841,call_844,var_843,call_847,uop_862,])
func_864 = relay.Function([var_837,var_843,], output)
mod['func_864'] = func_864
mod = relay.transform.InferType()(mod)
mutated_mod['func_864'] = func_864
mutated_mod = relay.transform.InferType()(mutated_mod)
func_864_call = mutated_mod.get_global_var('func_864')
var_866 = relay.var("var_866", dtype = "bool", shape = (3, 9))#candidate|866|(3, 9)|var|bool
var_867 = relay.var("var_867", dtype = "float64", shape = (84,))#candidate|867|(84,)|var|float64
call_865 = func_864_call(var_866,var_867,)
output = call_865
func_868 = relay.Function([var_866,var_867,], output)
mutated_mod['func_868'] = func_868
mutated_mod = relay.transform.InferType()(mutated_mod)
func_762_call = mod.get_global_var('func_762')
func_763_call = mutated_mod.get_global_var('func_763')
call_881 = relay.TupleGetItem(func_762_call(), 1)
call_882 = relay.TupleGetItem(func_763_call(), 1)
uop_886 = relay.cosh(call_881.astype('float32')) # shape=(3, 1)
uop_888 = relay.cosh(call_882.astype('float32')) # shape=(3, 1)
output = uop_886
output2 = uop_888
func_890 = relay.Function([], output)
mod['func_890'] = func_890
mod = relay.transform.InferType()(mod)
output = func_890()
func_891 = relay.Function([], output)
mutated_mod['func_891'] = func_891
mutated_mod = relay.transform.InferType()(mutated_mod)
func_890_call = mod.get_global_var('func_890')
func_891_call = mutated_mod.get_global_var('func_891')
call_900 = func_890_call()
call_901 = func_890_call()
output = relay.Tuple([call_900,])
output2 = relay.Tuple([call_901,])
func_902 = relay.Function([], output)
mod['func_902'] = func_902
mod = relay.transform.InferType()(mod)
mutated_mod['func_902'] = func_902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_902_call = mutated_mod.get_global_var('func_902')
call_903 = func_902_call()
output = call_903
func_904 = relay.Function([], output)
mutated_mod['func_904'] = func_904
mutated_mod = relay.transform.InferType()(mutated_mod)
func_762_call = mod.get_global_var('func_762')
func_763_call = mutated_mod.get_global_var('func_763')
call_940 = relay.TupleGetItem(func_762_call(), 1)
call_941 = relay.TupleGetItem(func_763_call(), 1)
uop_944 = relay.sin(call_940.astype('float32')) # shape=(3, 1)
uop_946 = relay.sin(call_941.astype('float32')) # shape=(3, 1)
func_130_call = mod.get_global_var('func_130')
func_132_call = mutated_mod.get_global_var('func_132')
const_948 = relay.const([5.379313,-3.095994,2.821606,7.571379,-6.266986,7.942630,8.149551,-7.679017,9.163247,3.926559,7.712557,0.903391,7.810259,-7.941722,4.758091,9.101236,4.632680,-3.383505,-3.495383,-1.731529,8.058404,0.573484,-7.196142,-3.228553,0.915257,-0.877998,-8.553244,9.490514,-8.849300,-1.137697,2.378003,-1.328985,2.359560,-1.924881,-2.858607,-4.577058,-3.011218,-2.503870,-2.203402,-4.636596,1.767741,-0.335727,-2.077742,1.717027,4.685716,-3.958583,7.575731,5.911968,8.595044,-9.525331,2.955686,3.732748,-7.818698,-8.173233,-1.046216,-4.963501,7.002165,8.855702,5.621998,-0.473703,-7.348303,3.359921,3.963573,-8.403312,-7.099756,0.540995,7.782053,8.879258,-7.577246,-9.540376,-3.002477,-9.942068,-1.909199,6.591298,-3.234325,-3.869252,-6.507289,-3.438035,8.978091,-9.627873,6.473766,7.575102,-6.186043,-6.889367], dtype = "float64")#candidate|948|(84,)|const|float64
call_947 = relay.TupleGetItem(func_130_call(relay.reshape(const_948.astype('float64'), [7, 3, 4])), 0)
call_949 = relay.TupleGetItem(func_132_call(relay.reshape(const_948.astype('float64'), [7, 3, 4])), 0)
func_864_call = mod.get_global_var('func_864')
func_868_call = mutated_mod.get_global_var('func_868')
var_953 = relay.var("var_953", dtype = "bool", shape = (27,))#candidate|953|(27,)|var|bool
call_952 = relay.TupleGetItem(func_864_call(relay.reshape(var_953.astype('bool'), [3, 9]), relay.reshape(const_948.astype('float64'), [84,]), ), 1)
call_954 = relay.TupleGetItem(func_868_call(relay.reshape(var_953.astype('bool'), [3, 9]), relay.reshape(const_948.astype('float64'), [84,]), ), 1)
var_955 = relay.var("var_955", dtype = "float32", shape = (3, 16))#candidate|955|(3, 16)|var|float32
bop_956 = relay.power(uop_944.astype('float32'), var_955.astype('float32')) # shape=(3, 16)
bop_959 = relay.power(uop_946.astype('float32'), var_955.astype('float32')) # shape=(3, 16)
uop_960 = relay.acosh(bop_956.astype('float32')) # shape=(3, 16)
uop_962 = relay.acosh(bop_959.astype('float32')) # shape=(3, 16)
uop_963 = relay.log2(uop_960.astype('float64')) # shape=(3, 16)
uop_965 = relay.log2(uop_962.astype('float64')) # shape=(3, 16)
uop_966 = relay.exp(uop_960.astype('float32')) # shape=(3, 16)
uop_968 = relay.exp(uop_962.astype('float32')) # shape=(3, 16)
uop_977 = relay.asinh(uop_960.astype('float64')) # shape=(3, 16)
uop_979 = relay.asinh(uop_962.astype('float64')) # shape=(3, 16)
uop_980 = relay.atan(uop_960.astype('float64')) # shape=(3, 16)
uop_982 = relay.atan(uop_962.astype('float64')) # shape=(3, 16)
func_344_call = mod.get_global_var('func_344')
func_352_call = mutated_mod.get_global_var('func_352')
var_984 = relay.var("var_984", dtype = "float32", shape = (3120,))#candidate|984|(3120,)|var|float32
var_985 = relay.var("var_985", dtype = "uint64", shape = (42,))#candidate|985|(42,)|var|uint64
const_986 = relay.const([5.844845,-9.873667,-0.323227,6.023257,-1.465721,-0.440362,-3.597405,-3.027075,3.565519,2.778694,4.183820,3.370364,-7.965003,6.328970,-5.636855,9.235857,6.800394,8.191954,-6.168540,5.326733,4.697123,3.416178,1.781679,8.593641,-9.025607,-0.667173,4.167091,-4.798888,-9.286854,6.026075,-7.644705,4.580596,-7.687232,1.968752,9.940574,7.777133,-7.091993,-6.854136,-3.945293,-7.609499,-7.008395,-2.213872,2.275725,5.011604,-3.764613,-1.033464,3.431113,-8.979623,-7.306977,-0.414909,6.660035,1.028758,-9.872505,2.290164,5.376707,-7.234284,-2.167779,-5.044502,3.705615,2.733626,-7.697132,-2.106118,6.355910,-9.114353,-7.171965,1.822831,-7.594039,4.615944,-5.320555,-2.460138,-6.680273,5.010877,3.320394,-2.968398,9.686002,7.935035,3.131920,-0.992983,-3.697227,7.841164,8.378414,-3.949600,8.664693,2.850150,-5.193886,1.258979,-2.950449,3.238723,-0.577732,-8.336436,-5.853299,-9.963090,3.952692,-5.069311,5.363158,-4.359150,1.014665,-7.830255,-5.265854,-2.009380,8.638939,2.089497,6.316307,-9.207597,7.482301,0.587389,-5.368096,2.292886,-1.490329,2.199218,0.366018,1.858656,8.036543,4.723413,9.837420,-6.295761,-5.557263,-4.358049,7.216501,7.229828,4.096067,-3.569618,-0.457661,8.437389,2.900384,-1.260216,-6.514247,4.083903,-5.184162,6.328974,8.832685,-2.438685,1.582067,5.339081,1.982715,6.288671,8.666024,-5.389225,-4.059168,0.678205,1.224868,-2.836884,1.796991,1.246508,2.527789,4.604102,-8.642404,-2.443038,-7.220418,-1.522198,-6.223705,-6.223849,9.693470,-9.077234,-3.562558,-6.442462,0.661789,8.014463,-8.701897,-2.161764,9.497579,-2.374397,-8.808173,5.146646,-6.642370,-2.263361,-4.713685,7.515141], dtype = "float64")#candidate|986|(168,)|const|float64
const_987 = relay.const([-3.482263,4.529857,-3.890494,-2.134091,0.426955,6.513177,8.522013,-7.867229,2.421567,5.703222], dtype = "float32")#candidate|987|(10,)|const|float32
call_983 = relay.TupleGetItem(func_344_call(relay.reshape(var_984.astype('float32'), [13, 16, 15]), relay.reshape(var_985.astype('uint64'), [42,]), relay.reshape(const_986.astype('float64'), [168,]), relay.reshape(var_984.astype('float32'), [13, 16, 15]), relay.reshape(var_984.astype('uint8'), [13, 16, 15]), relay.reshape(const_987.astype('float32'), [10,]), ), 4)
call_988 = relay.TupleGetItem(func_352_call(relay.reshape(var_984.astype('float32'), [13, 16, 15]), relay.reshape(var_985.astype('uint64'), [42,]), relay.reshape(const_986.astype('float64'), [168,]), relay.reshape(var_984.astype('float32'), [13, 16, 15]), relay.reshape(var_984.astype('uint8'), [13, 16, 15]), relay.reshape(const_987.astype('float32'), [10,]), ), 4)
bop_989 = relay.equal(uop_960.astype('bool'), relay.reshape(uop_966.astype('bool'), relay.shape_of(uop_960))) # shape=(3, 16)
bop_992 = relay.equal(uop_962.astype('bool'), relay.reshape(uop_968.astype('bool'), relay.shape_of(uop_962))) # shape=(3, 16)
bop_993 = relay.less(uop_977.astype('bool'), relay.reshape(uop_966.astype('bool'), relay.shape_of(uop_977))) # shape=(3, 16)
bop_996 = relay.less(uop_979.astype('bool'), relay.reshape(uop_968.astype('bool'), relay.shape_of(uop_979))) # shape=(3, 16)
output = relay.Tuple([call_947,const_948,call_952,var_953,uop_963,uop_980,call_983,var_984,var_985,const_986,const_987,bop_989,bop_993,])
output2 = relay.Tuple([call_949,const_948,call_954,var_953,uop_965,uop_982,call_988,var_984,var_985,const_986,const_987,bop_992,bop_996,])
func_997 = relay.Function([var_953,var_955,var_984,var_985,], output)
mod['func_997'] = func_997
mod = relay.transform.InferType()(mod)
mutated_mod['func_997'] = func_997
mutated_mod = relay.transform.InferType()(mutated_mod)
func_997_call = mutated_mod.get_global_var('func_997')
var_999 = relay.var("var_999", dtype = "bool", shape = (27,))#candidate|999|(27,)|var|bool
var_1000 = relay.var("var_1000", dtype = "float32", shape = (3, 16))#candidate|1000|(3, 16)|var|float32
var_1001 = relay.var("var_1001", dtype = "float32", shape = (3120,))#candidate|1001|(3120,)|var|float32
var_1002 = relay.var("var_1002", dtype = "uint64", shape = (42,))#candidate|1002|(42,)|var|uint64
call_998 = func_997_call(var_999,var_1000,var_1001,var_1002,)
output = call_998
func_1003 = relay.Function([var_999,var_1000,var_1001,var_1002,], output)
mutated_mod['func_1003'] = func_1003
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1005 = relay.var("var_1005", dtype = "float64", shape = (9,))#candidate|1005|(9,)|var|float64
uop_1006 = relay.sigmoid(var_1005.astype('float64')) # shape=(9,)
uop_1018 = relay.asin(var_1005.astype('float64')) # shape=(9,)
uop_1025 = relay.log2(uop_1018.astype('float64')) # shape=(9,)
uop_1030 = relay.acos(uop_1025.astype('float64')) # shape=(9,)
func_809_call = mod.get_global_var('func_809')
func_811_call = mutated_mod.get_global_var('func_811')
const_1033 = relay.const([False,True,False,False,True,True,True,True,True,False,True,True], dtype = "bool")#candidate|1033|(12,)|const|bool
call_1032 = relay.TupleGetItem(func_809_call(relay.reshape(const_1033.astype('bool'), [3, 4])), 0)
call_1034 = relay.TupleGetItem(func_811_call(relay.reshape(const_1033.astype('bool'), [3, 4])), 0)
output = relay.Tuple([uop_1006,uop_1030,call_1032,const_1033,])
output2 = relay.Tuple([uop_1006,uop_1030,call_1034,const_1033,])
func_1045 = relay.Function([var_1005,], output)
mod['func_1045'] = func_1045
mod = relay.transform.InferType()(mod)
mutated_mod['func_1045'] = func_1045
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1046 = relay.var("var_1046", dtype = "float64", shape = (9,))#candidate|1046|(9,)|var|float64
func_1045_call = mutated_mod.get_global_var('func_1045')
call_1047 = func_1045_call(var_1046)
output = call_1047
func_1048 = relay.Function([var_1046], output)
mutated_mod['func_1048'] = func_1048
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1083 = relay.var("var_1083", dtype = "uint16", shape = (15, 2, 15))#candidate|1083|(15, 2, 15)|var|uint16
const_1084 = relay.const([[[10,-9,-2,9,-7,9,2,-6,5,3,-7,8,9,-5,7],[5,1,-2,-8,6,4,3,-9,2,-7,6,9,-1,3,-1]],[[1,-10,3,5,7,-7,9,4,1,2,4,-9,1,1,-9],[-6,10,5,10,-5,3,5,-1,10,8,9,1,4,9,-7]],[[6,1,9,-9,7,-5,3,-4,10,8,9,9,7,-1,-7],[-7,2,-10,5,10,-1,-4,-9,-3,-6,7,8,3,-1,2]],[[-3,-2,-8,-5,-10,-4,-4,-7,9,-1,3,-8,6,-6,6],[-5,-10,3,9,-8,-5,-2,-1,1,3,4,-10,6,-4,4]],[[-4,-8,-8,-10,-8,-8,1,3,2,-3,-6,8,-7,-3,-9],[-10,6,5,8,-2,4,-1,-1,8,-8,8,-5,-9,3,5]],[[7,-2,1,8,3,-6,-2,-3,-1,6,-1,3,-3,2,4],[-7,-1,5,-6,-1,-5,-9,6,-1,4,-8,4,-3,-6,2]],[[-2,-3,7,9,5,4,9,-8,-5,1,6,4,-3,-6,4],[10,-8,3,3,9,-1,9,-8,4,5,3,-7,1,6,8]],[[7,9,3,9,3,-5,2,-6,-10,-4,-8,-4,5,-4,3],[2,1,5,3,-9,3,5,-7,-6,3,-2,8,-3,-1,4]],[[8,6,-5,-3,-3,7,8,1,-4,2,10,6,10,-1,-8],[-7,-10,8,-1,6,-5,10,-6,9,-2,7,7,-10,-5,-7]],[[7,-3,-6,2,2,-1,-4,10,-4,2,-2,-7,-2,-5,7],[2,-6,9,-6,9,-3,-6,-3,-7,-7,-2,5,9,6,6]],[[6,7,5,-5,-1,10,7,8,-4,7,-3,-4,10,-8,5],[-2,-6,-6,7,5,-6,-1,-2,-2,-6,-2,8,9,-7,-6]],[[3,-5,7,3,3,-1,2,3,-2,2,4,7,8,-1,3],[7,-5,8,-4,-7,6,7,1,1,4,1,5,-1,-4,-8]],[[-10,-6,1,-1,2,3,8,-7,9,2,1,-3,-3,-1,-5],[-5,-8,-3,4,4,-2,5,7,6,-10,-1,-6,-9,-7,6]],[[-1,-10,-4,6,7,-4,-4,-6,9,-9,2,9,-4,-5,-9],[4,5,-7,-7,7,-2,10,7,7,7,6,5,5,6,-10]],[[-4,4,-8,-10,-5,-8,7,-3,1,-2,-7,8,-6,3,7],[-8,10,2,-5,5,-9,-5,1,1,-9,2,3,-9,-5,2]]], dtype = "uint16")#candidate|1084|(15, 2, 15)|const|uint16
bop_1085 = relay.equal(var_1083.astype('bool'), relay.reshape(const_1084.astype('bool'), relay.shape_of(var_1083))) # shape=(15, 2, 15)
bop_1092 = relay.logical_or(const_1084.astype('bool'), relay.reshape(bop_1085.astype('bool'), relay.shape_of(const_1084))) # shape=(15, 2, 15)
output = relay.Tuple([bop_1092,])
output2 = relay.Tuple([bop_1092,])
func_1095 = relay.Function([var_1083,], output)
mod['func_1095'] = func_1095
mod = relay.transform.InferType()(mod)
mutated_mod['func_1095'] = func_1095
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1096 = relay.var("var_1096", dtype = "uint16", shape = (15, 2, 15))#candidate|1096|(15, 2, 15)|var|uint16
func_1095_call = mutated_mod.get_global_var('func_1095')
call_1097 = func_1095_call(var_1096)
output = call_1097
func_1098 = relay.Function([var_1096], output)
mutated_mod['func_1098'] = func_1098
mutated_mod = relay.transform.InferType()(mutated_mod)
func_890_call = mod.get_global_var('func_890')
func_891_call = mutated_mod.get_global_var('func_891')
call_1107 = func_890_call()
call_1108 = func_890_call()
output = call_1107
output2 = call_1108
func_1127 = relay.Function([], output)
mod['func_1127'] = func_1127
mod = relay.transform.InferType()(mod)
output = func_1127()
func_1128 = relay.Function([], output)
mutated_mod['func_1128'] = func_1128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1127_call = mod.get_global_var('func_1127')
func_1128_call = mutated_mod.get_global_var('func_1128')
call_1201 = func_1127_call()
call_1202 = func_1127_call()
func_495_call = mod.get_global_var('func_495')
func_500_call = mutated_mod.get_global_var('func_500')
var_1222 = relay.var("var_1222", dtype = "int16", shape = (3360,))#candidate|1222|(3360,)|var|int16
const_1223 = relay.const([-9.547409,-4.867554,-7.362071,-0.972326,8.398413,4.581416,-0.665021,8.811440,6.427504,0.717165,-3.473337,-1.121595,3.064023,-8.076414,-8.933436,-3.471340,-5.542120,7.064965,9.905910,-1.743709,2.226847,5.377770,-3.514184,-1.746392,5.447960,6.509307,-1.724353,0.491360,8.121909,-8.662299,8.144346,7.765919,3.524723,-9.715684,-1.048806,-8.405682,5.597393,-2.038594,-0.779146,3.264612,-7.433572,-0.987463,-9.756653,-7.440456,4.052146,1.157601,1.631371,-3.897004,1.103316,-1.751697,9.448097,-4.288099,-4.490229,-7.889204,7.925217,5.027072,-9.159994,3.334849,7.384510,5.446310,-4.546114,-7.960651,2.920961,2.644801,7.756192,-2.599193,-8.832649,7.069845,2.096166,9.822372,-5.316280,-1.636593,-2.561689,6.234732,7.535420,-9.029657,-8.981399,-4.997610,-5.717124,-4.786429,0.490897,-8.108507,3.893755,-5.222148,-3.634464,-5.848166,-9.000158,3.693791,-7.966723,1.634507,1.090324,2.479468,-0.532517,4.276819,9.624030,-1.283440,3.253460,-9.941085,1.657156,0.522403,5.369883,-9.143131,7.687627,-0.976859,-6.165042,7.970434,-2.949880,2.576802,-3.545343,3.007882,7.363258,-8.314106,-1.675129,3.614090,-6.228844,1.914749,-0.654653,8.837176,-7.186312,3.674663,9.316591,-3.936083,-5.582337,-2.338461,1.959083,-9.832128,-1.708111,6.925804,-3.233056,-1.204677,5.843196,-1.097808,5.373125,4.179810,6.852906,-2.216617,-2.112095,-6.838399,7.771097,7.704175,-2.983211,6.062959,1.322511,-0.261390,5.168789,-9.032298,-8.832489,2.217115,-5.792714,6.855741,9.079344,1.646241,2.708347,-2.261616,-3.322061,2.425872,-8.451690,1.164293,3.211673,0.034594,-2.763133,6.780706,-9.122803,-5.514873,-2.429513,-0.958375,-3.687693,3.003420,-0.197851,-5.255715,8.725106,7.762055,-2.001945,2.147894,-1.529920,-2.375160,-6.289330,-6.338928,-4.737484,-2.001031,-8.667898,2.517948,-1.679041,-6.951078,-6.629310,1.820849,-8.145995,4.795582,-0.685674,-7.049542,1.648728,5.319124,1.692502,-9.668590,6.077992,-7.311800,-4.086052,-0.767290,-3.355025,7.736054,2.939940,-3.053303,1.561635,-5.795466,0.900009,1.344716,7.538057,-4.652166,-3.841594,7.265259,5.979268,9.925234,4.458846,-4.842355,2.062766,-3.623541,8.224043,-6.593247,9.414899,-6.658269,-8.198931,5.556061,-6.274775,-7.451858,4.970828,-6.426885,4.059201,-6.313738,6.235168,-7.587629,-7.078754,4.482204,4.665823,-0.015697,-6.483633,9.423023,-0.198178,2.520173,0.818756,2.490491,8.037271,6.154528,-8.888504,7.852643,9.482802,-2.505399,-7.415713,7.587943,0.160817,-2.334189,-7.436853,-2.444986,5.281309,1.931007,8.020894,1.865378,4.579832,0.746984,-6.373923,3.924388,-2.467718,8.537600,-9.311793,3.596674,-2.033702,4.544573,7.824118,-7.692421,1.207156,2.117829,-6.905291,5.495099,-7.997028,3.781219,4.600883,-1.505630,-4.282451,9.351516,-1.987687,1.540805,-3.099302,0.295344,-1.959461,-4.393012,4.400141,9.209052,-3.136297,2.194140,8.051819,9.905948,-4.195489,6.032485,7.219708,8.919898,7.951290,2.064096,2.504286,3.458846,-4.939562,-6.558985,-5.276245,9.192468,-0.215715,6.247417,-4.734107,5.622443,-7.703778,8.427116,7.376600,2.892844,2.800585,-2.234871,4.229238,6.153980,-6.701996,8.925643,9.610167,7.783086,-1.845678,7.352806,-5.092677,3.858252,9.845561,-5.880687,5.476884,5.521773,-0.604483,2.199523,-9.489328,3.882332,-4.279377,3.317868,-1.238454,-6.670925,7.411606,3.886710,-1.998830,-2.144482,0.019628,-8.556982,-8.723923,-7.473526,3.247444,-1.877626,-4.194896,-0.654749,-3.227438,-3.574342,2.284254,0.798593,-4.363363,-6.114147,4.074045,0.558964,8.644251,4.035155,9.658555,3.597513,-4.533098,-4.309973,9.710701,8.638838,-6.452900,-9.248245,-9.762118,-7.793977,-1.068468,6.945684,8.934999,3.034348,-9.139094,-5.864471,-4.363724,1.327729,7.086769,6.610321,-1.541668,8.429430,-7.315290,-8.324555,4.041058,4.395273,7.451400,-3.696020,0.598259,-7.396156,-3.086015,-5.243874,-6.029406,7.591417,2.182936,-3.070564,-4.982758,0.691159,-4.940764,5.769990,-1.772954,0.053440,-3.841182,0.786798,4.935751,6.875725,-0.579536,-8.287901,7.953882,3.746414,-4.208285,9.162333,8.930959,5.871022,-4.279027,5.371325,-8.511352,6.822100,-0.417937,-7.989791,-9.393504,-9.043449,7.961479,2.269685,-2.627743,-6.193683,-6.234830,2.067915,-4.443530,9.564957,-0.355208,6.254772,-0.724598,7.371690,9.565247,-5.921503,0.248505,8.941669,-0.041190,-4.325126,8.102281,5.358568,-1.456537,4.569926,-0.809551,8.692529,6.034983,4.702414,0.459031,1.647650,-3.650561,-6.721059,-4.391040,2.991141,-3.345071,0.118985,-5.139650,-7.738366,-5.517752,1.776028,-4.918429,4.002914,9.553165,9.951206,0.876152,-3.302710,6.222901,0.407360,-8.229017,-8.534056,-0.407529,-1.500025,-4.363683,4.307748,-3.835574,1.238156,-1.501916,-9.777940,9.806080,-6.724848,-9.428541,8.293254,-9.361307,9.357081,5.124385,8.609585,-3.059541,-7.594157,-4.020442,6.166899,-4.568071,-3.770787,9.780172,-1.529840,-6.527633,1.786602,3.716377,-9.181654,3.605423,-5.452052,1.465612,9.764401,2.210303,0.967924,2.302990,-3.769991,8.274459,-5.249800,-5.033280,-4.799001,-3.468087,9.228990,-4.295735,4.649540,-3.122322,-5.149635,3.602472,5.383145,6.161859,6.025444,8.115372,-1.725945,-6.744598,1.865568,5.830531,2.735524,4.474851,-1.626339,8.358376,3.443111,0.121492,9.754542,4.401849,-5.220808,5.588219,-2.369696,9.954743,-8.189302,1.612698,-5.238731,4.835843,-4.845450,4.448612,-5.499422,-3.721662,-6.122927,4.325050,4.052239,-6.078389,8.606290,1.298315,-5.429526,-0.221556,-8.809104,-9.804732,-7.550160,-6.881547,-7.608516,0.379722,-2.472379,-2.952197,-2.562410,1.734777,6.230507,0.357503,6.171111,-7.472257,9.272769,-9.396892,-7.218484,7.909107,-5.108268,-0.006805,1.817386,4.580859,1.233536,-8.665816,1.449244,1.688395,0.794694,3.538085,7.822052,-6.503694,-6.924134,-0.872161,1.900378,-8.658096,-4.580868,-0.749355,-2.056021,8.336227,3.081896,6.555755,4.533908,5.133553,2.593985,-3.764748,-6.965864,-7.686164,6.213770,-1.132350,-2.723588,9.120585,9.473378,-7.794453,9.156708,1.688216,3.383677,-8.317356,-1.209468,2.200794,-9.736522,-9.195271,-5.034876,-0.609196,-6.680682,-3.352269,7.280066,8.460145,6.789964,-0.589689,8.682048,2.114192,1.585918,-9.341783,-6.486270,6.354522,9.955150,2.057409,-2.407250,0.307403,-9.907402,7.767847,3.402312,-3.701231,-8.846976,-9.241856,9.963074,-4.357895,9.148264,-8.329465,-2.321400,-3.235525,4.315075,0.720342,0.522213,-4.108262,-2.825611,7.075631,-8.456290,-1.505096,1.372282,5.602168,8.646556,1.631242,-2.145740,-9.325736,1.789401,-6.358852,-3.147562,3.338888,-7.244423,-0.137188,2.480212,0.936437,1.826416,1.915602,-9.472460,6.543000,-3.372771,-2.162541,-1.491080,-0.445459,1.027364,2.156687,-6.556570,-2.536217,-0.183988,-5.715485,-4.272862,-7.457751,6.774487,-4.109183,-3.766450,4.661160,-5.873877,4.165760,-7.531476,9.191850,-5.295866,-0.672088,1.144977,8.527934,6.525695,5.764248,2.627050,7.369279,9.521342,-9.408544,-3.278774,8.636258,4.232064,4.703707,-0.439259,-3.373306,6.505753,6.836258,0.987788,7.326669,-4.422347,-5.051003,-6.520840,4.907400,-8.863349,6.856568,9.490206,0.404952,4.583376,1.136553,0.745161,-1.873008,-8.123026,5.099627,-8.304004,-3.212577,-3.970440,0.971970,-3.367748,-0.311789,-9.018739,3.340096,-6.755971,3.825917,-1.616585,6.432420,-6.729958,-6.680449,-9.226137,-7.801087,-0.148741,8.679397,3.803408,3.988163,2.425992,-8.809699,7.214991,-3.066910,9.105938,7.647211,-5.054654,2.643303,-7.980371,1.686214,-3.412139,-9.497063,-2.755388,2.348803,-6.654268,3.091290,-5.341554,6.921267,-5.634901,-6.009257,9.016279,0.772601,-4.417787,-7.201422,-7.548068,3.131686,1.115875,-5.763944,-7.363847,-4.742602,-3.469372,-6.452835,5.149186,4.144989,7.638552,3.720506,8.808916,-1.168186,-2.878013,3.951068,-0.116819,1.775726,-2.183199,1.893405,8.837855,2.266865,-8.697516,-5.066352,7.692196,8.350501,8.016792,-2.419096,5.670587,3.721396,4.173979,-7.199378,2.523460,-0.919308,8.816317,-4.991449,8.775556,2.854799,-1.615111,8.298030,1.797619,-5.247417,-4.893215,9.060501,-6.799303,5.740812,0.634714,7.756027,2.342011,-9.397356,-2.911285,8.354411,-7.955715,8.613131,-2.040601,8.552488,9.514206,3.469112,-8.068666,4.546933,7.476633,-7.601304,-2.139931,9.479277,1.205545,6.039632,7.375388,6.734208,9.928719,-5.596716,-6.787733,7.211511,8.790513,1.784964,4.346151,-5.847277,0.516463,-8.229955,0.044147,7.873264,7.744590,-0.354153,2.430336,8.290842,-6.676707,-4.424658,2.860535,-6.141000,-5.599567,-7.715106,-6.043671,-4.060861,5.130597,6.390503,7.904184,-5.877760,6.722591,5.922033,-7.277988,3.060876,-5.290853,1.239232,5.530328,-5.961549,7.981745,-7.647524,-5.153639,1.211295,7.751272,-3.431115,3.677178,8.657237,1.807504,2.206316,2.013272,-2.764256,4.123897,5.169565,3.879605,-9.490753,-7.067809,-3.860564,-1.974358,4.637566,-9.107765,-7.097825,-0.044744,2.594001,-5.281518,7.245780,4.130186,6.215682,-6.718031,-1.407120,-8.420547,-8.110386,5.902907,3.817336,0.928045,3.236796,-8.426091,4.088340,5.123158,-1.593814,-7.010400,-5.299763,7.135184,-1.144144,-4.699710,0.992725,3.700461,-9.427764,-8.798611,-1.375140,-2.262321,-3.935558,8.227296,3.318024,-3.522622,-0.310173,1.989136,-5.917829,-6.694758,-8.258083,8.873349,-3.525529,-7.389150,7.602975,-5.927107,-1.822665,4.144388,-4.087167,-6.174165,-3.047207,9.547478,2.549600,5.764768,-6.189731,-6.656833,-7.957443,-7.131745,3.552680,1.867567,-1.585933,-4.127579,-0.535955,2.136606,6.342928,-4.558412,-5.531442,-4.056511,5.675549,9.480260,-8.396102,-2.789556,-0.884479,8.554645,8.335509,-3.379282,-8.764065,-9.901282,0.894039,7.110559,-9.036274,-8.945429,-1.097782,-9.686573,-3.072134,9.088526,-9.171916,8.494322,-1.901671,-6.076244,-2.595492,6.255281,1.633416,5.549634,1.172140,2.219902,1.812088,-9.262098,1.255860,8.060843,5.055204,-6.510685,-9.690049,-7.319831,-1.246997,3.485032,6.066249,6.642510,-2.976185,0.524011,-3.169281,1.581557,-9.621838,4.202190,9.183356,0.309631,7.219681,-0.755539,-0.347127,-2.323687,1.782054,4.573088,8.575173,8.836770,7.374224,9.686634,-7.038388,9.279473,0.965722,-6.674837,0.297177,1.930115,9.946703,2.383272,-7.040619,-6.554874,8.971147,-0.739839,-3.721079,-4.886574,2.977303,8.979223,7.849406,-8.244747,4.795425,7.438211,7.929700,4.321767,-1.406568,-3.987679,8.832277,-4.870406,-9.664304,6.523325,-4.417778,-6.721811,8.546663,5.028766,4.578635,6.932849,-3.481726,3.491355,1.017943,-9.275991,2.999842,-0.128979,7.873363,6.977868,-7.771346,7.195863,8.124005,-5.470365,6.792069,1.478640,3.873440,-9.388731,7.074245,9.118854,-7.315952,-3.673818,-0.777223,-1.415866,5.336822,2.050859,-4.134764,-5.705583,2.755781,2.440326,9.777482,9.365523,4.622716,-9.876704,1.884740,-6.595074,-0.114103,-5.372806,8.028412,-3.519168,-1.978797,-7.319782,-9.930474,-6.761215,7.562621,4.804261,-3.826781,-7.647062,-2.089545,-3.927871,-5.042032,3.617989,1.835610,-6.209581,8.674082,8.924914,-8.138372,-2.517442,0.110470,-0.523275,-0.246094,3.524973,-5.735851,4.728276,-1.509187,6.846385,-7.097512,9.490767,-7.836316,-1.659624,9.414691,5.934197,-6.066160,-6.173978,7.125762,-4.257368,-6.365852,-2.190697,7.942570,4.683226,-5.207949,0.220346,-2.523297,-8.417817,-1.494667,-9.428732,3.759138,5.521365,0.862313,4.356963,6.102091,7.005322,8.126892,-1.524240,7.239335,-9.615078,-7.660141,-6.235846,3.106021,6.689996,6.541289,8.318797,-5.638742,-9.054350,-6.471002,-8.481973,-8.602772,-9.122717,4.966401,-3.697649,-7.991334,-6.353773,-4.363800,5.540333,-2.363684,7.197326,-1.044635,-2.585793,-8.098853,5.672180,-9.750138,-3.376702,8.743435,-1.076620,6.625065,1.865868,6.394892,4.365716,-7.040618,6.917130,7.381966,-4.564920,0.796002,-7.553903,-0.122080,9.680300,4.109280,8.474658,-4.009653,-5.129366,-2.748623,0.651271,8.513509,-0.339294,-9.872022,-5.641643,-3.439993,1.597956,8.554728,9.559947,1.735923,-7.954697,-6.183299,5.992152,1.193502,1.166997,5.475866,-1.265222,2.706078,-5.311751,-0.528618,3.385705,-7.163584,9.228763,8.975442,6.972467,0.627137,4.042425,0.290775,-8.268153,-0.287610,-8.668217,-6.695462,2.374321,2.817408,9.804818,-8.896112,5.150545,-7.299541,0.647684,4.370532,-3.508233,-7.323285,9.561559,8.581777,3.727428,2.064656,7.130820,-0.444099,3.628688,2.692538,7.781814,8.452006,-6.106178,2.467739,0.020168,-8.215920,6.597351,-8.697891,-6.473326,-6.607204,7.541833,5.212923,-0.636581,7.412843,-6.328180,-2.514471,0.025226,-6.485917,7.850441,2.685012,-2.295924,0.549941,-2.009304,-9.635090,6.398659,-0.815903,-1.907643,0.341944,2.990759,-2.016630,8.203135,-1.719541,0.240410,-9.264163,-5.086198,2.832384,1.978386,8.396311,-4.871767,-4.504771,-7.530338,3.955822,1.007470,8.322005,4.479390,-1.152740,3.842275,7.064682,0.277437,1.707272,6.440490,-2.427607,5.897095,6.807662,-6.617668,8.499622,-6.835267,6.640250,-8.427726,3.961036,3.312300,-7.764654,-2.049032,1.788719,-4.970033,1.891410,9.743636,-2.592503,2.774064,0.091372,-9.846443,8.437300,2.133130,-9.469318,8.784446,1.101554,8.535348,2.272814,-5.667069,7.254366,-8.057558,-4.380939,-8.797562,-2.241072,-0.657539,0.961227,0.785537,-3.532756,-5.426926,-5.972661,-3.615383,-0.605302,1.157567,9.024049,-0.548703,-0.411124,4.772946,-2.606466,-2.610712,-0.599392,-5.466553,6.564542,-8.759469,-4.484971,-9.028709,-6.823642,4.678303,-2.186333,0.297512,-3.026932,-0.325746,-8.798828,1.848594,0.630517,2.579640,1.761419,-7.149665,6.819525,-1.791966,8.749792,-9.499922,7.635513,-3.262703,3.550144,1.038311,3.877961,-6.024617,4.142074,-6.304958,5.407943,-3.211752,-5.530795,6.834591,5.632701,3.755255,-5.453800,7.883310,8.811104,6.856361,2.604267,-1.748113,-1.274554,-8.072485,1.761793,9.524706,-7.834616,5.474193,-2.701562,7.791076,-7.993946,-6.376635,-1.128799,-6.118427,9.756250,-9.129273,-6.019462,1.598025,-1.329934,-6.140731,-8.727398,-1.808772,-0.834002,4.817337,0.156922,-3.973887,-1.575369,-2.182228,-3.927962,-7.480245,3.068225,-0.859185,-2.629541,-9.889910,3.541140,-9.687246,-4.635081,1.112130,-7.519144,8.757356,8.876418,2.918708,-7.512238,-4.435531,-5.682068,-3.557392,-5.833952,2.068740,-6.546450,3.086533,-4.172776,-7.925532,-6.019691,5.542451,-0.771032,-0.003620,8.570769,7.793357,-3.334476,-3.771214,7.934498,-6.060022,-4.451751,-7.807611,5.783426,-5.323674,6.439186,1.629773,-5.962776,-3.376337,3.419983,-7.770416,-2.103211,3.488895,-3.755625,4.100288,-0.806466,5.605650,3.983757,-5.022868,8.471047,-8.632305,2.770930,-3.149964,5.271003,-7.851316,-1.785332,3.521468,8.646078,6.071830,-7.786077,8.627809,-9.421250,6.319839,-0.154599,-6.850093,5.250221,-0.655259,-1.845134,-7.046460,8.657443,6.935523,-9.951905,-7.773749,3.157106,7.761721,-5.049155,-0.437422,9.848150,-8.306454,7.494284,7.464893,2.044391,0.509551,-9.843932,1.423506,6.545204,4.128419,3.751015,2.700199,6.851521,4.078796,6.043928,-8.115441,3.609440,-2.026334,-1.691352,8.611392,0.015354,6.557196,2.014553,3.587488,5.704851,-6.952229,-4.574443,9.067220,-7.531141,6.849319,8.607867,-9.557746,-4.174769,1.922769,-6.461961,-4.518519,-6.182461,4.866087,1.738364,-8.796061,-9.981115,3.469617,-8.101597,-8.337174,0.402801,-9.103979,-2.006364,-5.884385,4.131570,3.205644,-8.447683,8.821018,0.556554,-8.723223,0.757739,-4.996852,6.519721,-9.509982,-7.609148,-6.622227,-0.493850,-9.341808,6.006543,1.313498,4.871542,-4.043307,-0.457982,-4.544602,5.068101,-5.329962,0.628019,-3.688613,8.079563,-2.525658,6.794865,8.639224,0.253761,-6.409902,-9.898938,6.862585,-2.017224,-4.101888,4.519900,1.718399,0.240975,5.933851,-4.468044,-8.120906,-6.950090,1.724131,7.191130,1.029114,4.430196,-4.340986,5.881606,4.916220,2.435914,-5.406445,-7.296748,6.005654,-9.118329,-6.907985,-3.549975,-2.203858,1.340955,7.944514,-7.149985,8.836747,-4.391101,-8.208669,6.137605,-3.169536,2.572451,0.332545,-4.254421,9.128094,0.971855,4.997102,-2.518917,-6.685528,5.894068,8.251456,-2.090835,4.679201,-6.146981,-3.847095,0.805135,-2.866464,9.955161,-9.501060,8.986563,-6.029587,8.395714,-7.428555,1.066459,9.946542,-3.766069,5.600955,9.870812,-4.209086,-9.614936,4.411390,1.854909,-6.706302,8.049089,-6.461189,-1.148469,3.781290,-3.953328,-8.095668,-9.188845,-1.742754,-9.932180,3.758327,5.779351,8.884707,-3.511566,6.939074,-2.097191,5.273096,7.531246,-6.144476,-4.904193,6.745344,-4.984376,3.113083,-6.601542,7.960534,0.866037,-0.452601,-4.991114,-4.503718,6.951192,-6.121133,4.413273,6.006875,4.848786,-0.930969,-3.089108,-0.249916,3.376768,4.219423,-8.883389,-2.320902,-1.125467,-3.643263,-6.420788,1.380789,-8.462924,-2.471776,2.826847,-8.254194,1.990490,6.115653,8.868320,-3.824836,3.858240,-5.096477,2.474393,3.675324,5.176556,-3.135334,-1.155486,8.930087,-7.574963,-0.046978,-1.459030,-7.598626,4.257044,3.607549,-1.304119,-9.287023,2.397261,6.089797,4.733648,-8.022447,-1.474180,5.667535,1.499891,1.315837,-8.800572,0.123190,9.062911,-3.848464,1.989335,7.871887,-4.293875,0.369462,-7.004178,-9.054247,0.981088,-2.151673,6.913916,-9.392047,4.251545,-8.301828,1.405903,-2.812686,-7.312403,-3.708177,-9.100282,3.261041,1.440350,-7.588315,8.042734,9.460900,-9.722811,-0.369610,6.920417,-7.996341,-9.420752,-4.088475,-2.654942,-0.673693,-4.236476,4.393620,-5.498362,5.576678,9.330877,6.172148,-2.176263,-9.084521,5.291679,-3.713923,7.460232,4.450381,-5.957849,-9.792233,-6.645524,7.688380,2.014858,8.114244,9.584992,0.433567,-3.642885,3.904524,1.590648,8.225740,-7.793237,-0.324568,-1.793649,3.074271,4.218566,-6.281926,8.708036,-1.407477,-5.132602,-7.182275,-3.466643,-2.055673,1.596863,4.232207,2.631076,2.505392,6.219525,-6.967719,4.237057,-7.058702,4.482390,-1.981095,-6.752264,8.630434,-1.701444,-6.588624,2.899126,5.839992,-5.627180,4.653709,-9.594076,9.242413,-7.676704,8.243754,7.538176,5.238516,-8.631414,9.162690,-6.903596,6.630281,1.031638,-1.583053,7.758037,4.050082,-0.117235,0.764082,4.690562,-4.786883,-4.450957,5.991558,1.386340,-7.088661,-0.045570,-1.427219,-1.403989,9.065868,4.862235,-4.397744,0.234146,-8.662735,5.220023,-1.930178,-9.968613,-1.693840,4.989778,3.940091,-6.364339,-8.415513,7.150218,-5.592817,2.182901,6.047117,6.786047,7.553225,9.988313,-2.168879,5.392895,5.473245,-4.744892,5.765022,3.443460,-0.273519,-1.282715,-4.952287,-9.104278,-7.276507,-2.794891,-4.958547,1.587926,6.329521,-5.469796,4.723055,-8.306110,4.374536,9.669471,-1.472548,0.778418,-9.789867,-0.883200,-3.114001,8.976460,-1.394239,-8.209773,9.915146,-3.338789,2.112336,2.369523,-4.712966,1.729415,-2.834373,-1.887490,-3.276360,8.062368,-0.393353,0.373007,-8.159110,2.684552,5.311238,-3.095309,2.809933,8.005028,8.225769,-3.502522,-1.358552,5.472012,-3.333110,-5.162855,-5.785527,7.921019,7.872474,9.649876,-4.982049,-8.294360,-2.695979,-0.592982,0.200833,-8.661196,-2.087993,-6.732255,1.386087,0.968660,-3.136843,-9.920687,-5.874173,2.167383,-1.690636,6.464714,5.268981,-2.450281,-9.799368,6.418548,-3.505292,-0.181765,-9.401367,-6.637542,9.131422,3.869592,0.658903,-5.683954,-3.506472,3.784133,-3.410273,6.191934,-9.225229,7.217839,-2.508914,-4.546006,8.941052,-0.060537,4.306349,1.442894,-1.232311,-7.427396,-7.237184,4.138728,-4.087030,3.283098,-4.877189,-7.709371,7.431240,1.980720,5.302549,-4.243301,7.103576,-7.854826,8.462359,4.971256,9.493114,4.306007,-4.326090,-1.509338,1.787992,6.987510,-0.724259,-0.463609,6.127208,7.117588,1.719345,5.585735,-4.291860,-1.258898,7.950581,-3.654827,3.967429,-2.142506,-8.700607,5.659130,9.422345,5.487189,-5.894432,4.841872,-0.799143,-5.792394,-4.660307,-6.816454,-4.510186,4.818235,-0.937100,-3.418990,2.220801,4.211885,6.466367,-6.780288,3.212671,-9.436616,4.429734,7.412178,-2.815692,-9.069870,-5.400765,-6.443541,5.795277,-3.068657,1.246623,4.642009,-0.425703,-1.127843,5.066221,-9.620694,1.685522,3.510272,-4.267079,-3.841858,-4.464168,0.746121,4.509218,5.146623,5.597140,-0.145531,-1.847136,-1.955377,-7.192709,-1.217821,2.803024,-9.465610,6.228814,6.841117,-6.926421,0.309531,-6.774331,2.470202,-0.230689,-1.279197,3.088059,-2.659503,7.723576,-4.226293,7.785568,5.579920,6.895622,9.448459,8.002774,-3.344535,-9.054426,7.414824,-2.643681,-2.224289,0.750538,7.079735,0.518647,0.381349,-4.032332,-1.634521,-5.293175,-1.877508,4.192248,1.005721,-7.895088,3.720801,0.345340,-0.401941,1.021599,-8.892741,4.229213,4.176819,9.658570,1.273413,-3.416823,9.124224,-2.898475,-7.546098,-2.307921,-4.077359,3.847455,4.282531,-5.042526,5.872399,1.955851,8.233694,0.547927,2.122856,0.148352,-8.368789,5.475763,-9.184833,4.753257,0.655031,-4.739908,-3.768847,4.032468,-3.316429,2.944920,-6.560228,8.224080,-3.523812,-2.830706,6.417844,-4.746713,-1.681694,-8.165691,1.032879,5.455698,9.679214,3.032903,-6.953112,2.924366,-5.184611,-4.441761,2.808285,-4.523554,-9.493335,-6.676009,-5.321406,1.572351,-7.279403,-8.193995,4.134608,-2.586545,7.595134,-0.559482,0.107766,0.003244,7.644175,-9.113563,4.505543,-2.415279,3.218009,-5.523086,7.367332,-3.632062,3.644493,-0.961863,9.336629,7.464666,-7.447136,-5.888993,3.990585,4.558146,2.584264,-3.404965,1.995979,-0.990826,3.969419,-8.726168,-4.500417,-6.352930,7.346212,-9.314872,6.660112,-9.108761,3.402121,7.226084,-0.764258,3.320439,-8.388035,-2.961090,-6.543453,1.116467,7.097004,7.544814,-6.247113,8.514978,-6.589764,-5.211163,8.624712,5.848967,4.367233,-2.668952,6.112349,3.057479,4.278901,7.797552,-2.371228,4.644687,9.891254,1.412636,-2.093854,7.025810,-0.524168,-4.277003,-7.181176,3.823473,0.833122,5.302512,9.950586,-3.546440,5.177583,3.292275,-3.728347,9.802371,8.524039,-4.145970,-2.504463,-4.406355,2.850641,-1.319274,-5.292373,-7.468298,2.123976,-9.213262,-9.784247,4.932086,9.454761,-5.068327,3.306341,8.609974,-3.433681,-4.889065,9.190315,-2.459018,-8.463368,7.889892,-9.519440,-6.282140,8.710952,-4.553039,8.355419,2.524145,-3.473546,4.117153,-5.953266,-1.575071,-3.135932,5.058165,2.770587,-0.387852,-1.570018,-8.923532,3.212193,8.137938,-0.728737,5.855956,8.241070,-0.929464,-1.091568,-3.983135,-2.906980,4.907646,2.639956,-6.388763,-9.322803,-4.575819,-9.657097,2.530339,5.665621,7.453275,2.133436,-7.601524,2.064725,-9.798245,-7.745265,-6.689376,-9.024776,0.379217,-7.436702,-9.928360,-8.344438,-3.178855,-5.212632,6.357555,-4.488540,7.724161,8.421247,-3.851044,-2.599509,-2.000192,6.521300,3.772593,-5.341936,-5.427565,-4.545136,-2.777016,2.462444,-9.961260,-9.068499,-3.906581,-4.358129,-2.207201,0.676069,-4.435682,-4.068507,-0.263087,-6.359808,9.843820,-4.539444,8.925650,-3.705341,3.705532,-6.444139,3.689698,2.662187,5.066813,4.999602,2.868471,1.997962,-7.215721,-8.135989,6.708850,-8.661716,-9.502393,-5.795898,-4.381425,7.860301,9.580690,3.546601,-6.683150,-4.311414,-7.350302,-7.660843,-0.127960,7.308829,5.869413,6.636066,-1.948954,6.916931,-2.829549,2.691280,-8.392370,-1.802347,-5.714620,9.414706,6.250413,2.372018,7.205775,6.063806,0.497807,7.261696,0.818537,8.563953,-1.326468,-2.513515,5.422559,5.471067,-1.113851,4.583502,1.844582,8.812065,-4.614663,-4.314658,-7.269985,2.285269,2.831858,-7.955767,2.332613,-8.608887,-2.417015,-5.581455,-7.640942,-5.868021,5.017869,-1.327653,-6.372263,2.728506,-3.115326,-4.232128,-4.865479,-0.271464,-9.118445,-1.691856,-7.584027,-9.183565,0.310431,-4.748118,-1.226447,-6.312811,-4.654796,7.122175,-1.777666,6.302330,-4.959245,-5.817731,7.439290,-4.061181,4.573829,1.316025,-0.398235,0.969830,-3.233880,8.055167,-9.497564,0.031879,-3.587197,6.844994,4.466710,0.830788,-6.438652,-1.788641,-9.574946,-2.541702,5.475572,-5.986589,9.751553,5.583317,0.601481,-1.507067,-0.836509,3.759321,-5.917417,-8.352466,3.401251,-3.918152,0.711744,-7.796573,3.432551,0.775445,-8.997593,-3.190526,6.411926,-4.655233,0.287409,-9.927458,-8.673804,-6.990773,-2.632501,-1.194968,1.620917,-5.408096,-8.626966,-9.914866,3.759993,-2.291061,7.441351,5.243190,5.050651,-1.823394,-2.259322,-8.636208,-7.103529,-6.267329,7.695097,-2.455273,6.403849,5.821705,4.439343,8.446565,-9.445120,8.355423,8.617667,-4.837689,-2.793834,9.222577,-6.094699,6.327605,-5.882582,2.640033,-2.379314,-8.129761,-0.109098,8.434667,-0.672078,-4.031876,7.374630,-1.223725,-2.214320,8.807016,8.800419,-1.194054,-2.907844,-9.331688,1.638557,7.116467,-9.772303,6.219864,1.986252,-6.279232,7.505438,-3.281536,-4.426755,1.858016,-7.243137,5.182158,6.889349,5.032490,3.168467,2.688067,2.161959,7.551217,-7.782028,7.242787,2.997872,0.030110,-2.441547,5.601724,2.362542,-5.319354,2.411053,8.531107,4.216442,2.825976,1.978396,0.466611,9.144344,-1.447759,7.214461,7.334124,1.872743,7.032898,1.911722,7.323882,-8.482628,-4.382448,9.891378,-4.987953,-7.237765,-4.113511,-1.000123,-9.315772,-1.543504,-4.241779,-4.608700,-1.494396,-9.321925,-6.733337,9.108346,-1.121741,8.560310,9.582156,8.871134,1.523743,9.712392,7.075208,6.349054,8.762395,-5.593825,0.837170,-7.638926,-0.886967,0.016660,-1.516094,-8.809645,-5.154983,1.086613,1.424385,-3.384099,-1.642473,-7.720776,0.620756,5.576864,4.772534,-8.425056,8.891909,-3.220252,-5.322427,-3.989493,-6.975436,7.751269,-8.678404,7.219726,3.529579,-6.788059,2.369334,8.948995,-6.018848,-6.458343,-1.493737,-4.544440,2.847155,-1.669231,-0.545480,-4.626404,2.765182,-8.754250,-2.026197,4.716217,2.861083,9.143266,-5.821193,5.038622,0.036268,-8.786758,5.863591,9.657423,-9.825159,-1.445693,-9.391599,9.308824,-4.841512,3.811932,9.185975,8.693756,-4.800403,-6.009940,2.225679,4.325171,6.387568,5.179236,-3.744091,0.045295,-9.788860,-9.378172,-6.627586,-7.846750,5.962210,5.211015,4.466645,8.506850,9.250333,-0.587961,2.466607,1.867312,-3.474457,6.682895,-7.967251,8.233205,-2.975059,8.256160,6.814369,-8.224692,-6.842401,-4.939442,-7.307101,3.730637,0.947716,-0.894518,-9.792722,1.497055,-5.512964,7.895910,1.733829,0.713162,-9.825785,-0.894386,9.595347,-9.716552,-0.671178,9.061687,-6.462771,-9.499202,-0.077269,2.709008,-2.436737,8.200649,8.475288,9.503290,6.657137,1.734994,-8.947482,-2.073387,-7.731332,6.280461,3.795538,1.737602,0.235731,6.745478,-8.916909,-5.793172,0.696010,-5.881239,9.346999,0.082557,-3.971153,-3.101128,-9.718523,-7.908632,-4.368054,6.916353,-5.506379,2.720198,-7.276645,-8.167290,4.758006,9.489567,-7.179803,-4.898285,-3.700955,7.080458,-7.899621,1.836777,-4.535328,0.953892,5.478124,-7.909579,0.728301,8.925200,-0.349719,-0.033157,5.549090,-5.199490,2.185525,7.689836,-9.760857,5.314601,-6.357417,7.963150,-5.217014,3.973573,7.984673,-6.014044,-1.998627,-9.765928,6.035857,-4.839292,-8.074254,-4.050459,3.997107,2.496369,-3.276902,-1.502520,7.602784,9.411858,-8.119199,6.667019,-2.411585,-4.685284,-8.311366,2.197553,-0.201215,-0.598236,-3.567356,-9.087776,-9.658556,8.616700,-2.375648,7.479232,8.739255,-5.157323,-2.521110,4.570165,4.824344,7.536161,-6.986402,2.465775,-2.666321,-9.824147,-2.664219,4.328606,-2.233421,-9.826942,-8.989226,3.876958,-1.677673,-3.189108,6.654693,-5.508623,0.039207,-6.757948,-7.571875,-0.421793,1.441856,-6.800093,-4.825688,-6.108687,-4.007743,2.246701,5.234006,6.510875,-7.531000,-5.870021,6.067814,-5.238126,-9.300832,1.566586,-6.673083,1.087347,-5.987075,-3.279908,0.882978,3.040427,5.536645,9.206023,0.128031,-8.419926,-9.522658,-3.285102,2.101712,-3.562176,2.235590,6.908172,-4.673573,-9.828349,-1.209034,5.628855,7.725217,7.802819,7.345975,6.774558,5.537546,4.580704,-4.944649,-9.556483,-1.376010,7.970277,-2.270793,-2.741018,-3.660842,2.337832,4.331506,-5.344994,1.772714,0.100755,-7.143961,-6.935333,-4.077202,5.932611,4.263461,5.615518,5.634278,4.535512,4.802382,-5.960181,-2.911256,-6.384370,-6.883335,7.587224,-0.429193,-1.869430,7.079187,2.299555,-6.734382,5.391911,-0.870873,-3.426230,3.121858,0.474263,4.316690,-4.541472,8.594214,7.143066,-5.603288,7.834383,9.034171,2.787121,-2.640259,-6.614058,-4.582483,-7.791672,-2.873940,-1.325469,5.431476,-8.984955,0.163388,-1.344318,1.862460,-0.041272,-0.912077,4.348462,1.439878,9.628597,4.678881,6.978124,1.289877,-3.460484,-5.610235,0.233755,-6.056742,-6.605368,2.012158,-6.857981,-7.523700,-4.155909,-5.614598,-8.999647,-9.113206,-4.703752,8.267120,3.594753,6.014126,4.868964,-4.450977,1.823357,-9.213950,-0.629973,2.259063,7.878822,2.685662,-3.941663,0.782757,-4.761932,-1.262023,2.292271,-6.748141,-3.828673,-5.596192,1.856889,2.495756,0.257343,-7.435489,2.146886,-1.517432,1.040430,-7.713971,3.814279,-0.767687,6.490065,-7.061305,-1.039431,-8.261290,1.903250,-5.251343,9.973722,3.873033,-7.095608,6.813292,4.143174,-8.140056,4.782298,1.004928,-6.958821,-6.641693,-3.836111,-9.456313,7.059117,-6.807313,3.274873,8.245262,-9.530233,4.833556,-9.230767,-0.906202,-6.608135,-9.112825,2.559978,-0.953639,4.756610,3.228047,-1.471937,1.884308,-2.887699,-7.398769,-5.269363,5.181360,-4.893211,4.538071,1.264652,5.630137,-4.624021,5.397608,6.705941,9.385054,5.760262,-7.282768,-1.207028,2.816148,0.934934,-3.906229,-9.975273,-5.221078,-1.160622,6.643912,8.649245,5.054937,6.420081,9.349135,4.036634,3.661719,-6.775479,-1.320090,4.587887,1.493867,1.856344,8.857105,6.435756,-4.484377,1.863807,6.839326,-8.186487,9.178391,-0.384487,-7.998058,6.923030,-6.444121,-2.998847,8.218930,-3.088166,-0.189876,-9.170980,3.698747,-0.677851,-3.777145,-6.739671,-6.357063,-3.551748,-3.617942,0.071995,-5.493730,-7.906030,-5.922048,5.091772,1.772439,-1.621851,2.098448,3.969555,5.112859,7.047232,2.927467,9.804395,-9.841939,6.597639,-5.347100,-7.694560,-9.410867,5.801725,9.433178,-8.308835,4.491047,-8.624039,6.789878,0.830457,2.772133,-1.370128,-2.695737,4.132558,-3.594944,4.448802,2.224736,3.715628,7.796358,-8.225185,-3.530942,8.034260,6.177114,-0.113728,6.908020,9.979963,-2.607995,5.884461,-5.464040,-1.524469,-6.311541,1.887101,6.791111,8.809045,-9.667014,5.988943,-8.319580,-0.355460,-8.739337,-0.315695,-1.132556,4.495643,-2.471096,-6.395403,4.635611,4.431121,-1.617804,3.565503,3.450138,-9.591836,-7.557718,-2.217096,-5.438424,-4.111568,-2.821444,-7.550237,0.682213,2.580625,8.087788,-7.554528,-9.032068,-8.810835,-0.613876,-6.424260,-1.689945,1.555201,-1.032296,7.545934,-7.975714,-6.381002,-6.416727,-7.257025,-2.353595,1.033619,5.218536,-7.951918,2.677402,-4.700576,-1.570421,-9.820378,-3.506821,2.195070,6.671180,4.492148,-2.850395,-8.212896,6.702441,-2.085835,1.223656,1.439001,8.385751,-7.685718,-2.129015,7.567477,-8.897092,9.589346,7.652806,4.374682,8.535690,3.224730,-7.718307,-7.845104,-9.250544,4.054648,4.753303,-3.620428,-2.067100,3.510212,4.233095,1.270457,-9.246937,-9.312219,1.854813,7.687863,6.118394,0.424705,-3.121817,4.427609,-2.166211,-9.467902,9.204051,5.427468,-5.733249,-0.370425,9.158039,5.651634,-4.113496,7.979975,3.655414,-2.355143,2.532828,4.590498,7.639970,-4.111731,5.891669,1.212437,3.579997,0.305797,-0.161333,-1.003143,6.097910,9.957972], dtype = "float32")#candidate|1223|(3120,)|const|float32
call_1221 = relay.TupleGetItem(func_495_call(relay.reshape(var_1222.astype('int16'), [16, 14, 15]), relay.reshape(var_1222.astype('int16'), [16, 14, 15]), relay.reshape(var_1222.astype('float32'), [16, 14, 15]), relay.reshape(const_1223.astype('float32'), [3120,]), ), 1)
call_1224 = relay.TupleGetItem(func_500_call(relay.reshape(var_1222.astype('int16'), [16, 14, 15]), relay.reshape(var_1222.astype('int16'), [16, 14, 15]), relay.reshape(var_1222.astype('float32'), [16, 14, 15]), relay.reshape(const_1223.astype('float32'), [3120,]), ), 1)
var_1242 = relay.var("var_1242", dtype = "float32", shape = (3120,))#candidate|1242|(3120,)|var|float32
bop_1243 = relay.power(const_1223.astype('float64'), relay.reshape(var_1242.astype('float64'), relay.shape_of(const_1223))) # shape=(3120,)
output = relay.Tuple([call_1201,call_1221,var_1222,bop_1243,])
output2 = relay.Tuple([call_1202,call_1224,var_1222,bop_1243,])
func_1274 = relay.Function([var_1222,var_1242,], output)
mod['func_1274'] = func_1274
mod = relay.transform.InferType()(mod)
mutated_mod['func_1274'] = func_1274
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1274_call = mutated_mod.get_global_var('func_1274')
var_1276 = relay.var("var_1276", dtype = "int16", shape = (3360,))#candidate|1276|(3360,)|var|int16
var_1277 = relay.var("var_1277", dtype = "float32", shape = (3120,))#candidate|1277|(3120,)|var|float32
call_1275 = func_1274_call(var_1276,var_1277,)
output = call_1275
func_1278 = relay.Function([var_1276,var_1277,], output)
mutated_mod['func_1278'] = func_1278
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1333 = relay.const([4.115615,-8.427628,-2.473613,3.324029,7.365319,7.260866,-4.933673], dtype = "float32")#candidate|1333|(7,)|const|float32
uop_1334 = relay.atan(const_1333.astype('float32')) # shape=(7,)
output = uop_1334
output2 = uop_1334
func_1340 = relay.Function([], output)
mod['func_1340'] = func_1340
mod = relay.transform.InferType()(mod)
mutated_mod['func_1340'] = func_1340
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1340_call = mutated_mod.get_global_var('func_1340')
call_1341 = func_1340_call()
output = call_1341
func_1342 = relay.Function([], output)
mutated_mod['func_1342'] = func_1342
mutated_mod = relay.transform.InferType()(mutated_mod)
func_890_call = mod.get_global_var('func_890')
func_891_call = mutated_mod.get_global_var('func_891')
call_1368 = func_890_call()
call_1369 = func_890_call()
uop_1388 = relay.exp(call_1368.astype('float32')) # shape=(3, 1)
uop_1390 = relay.exp(call_1369.astype('float32')) # shape=(3, 1)
bop_1394 = relay.bitwise_xor(uop_1388.astype('uint8'), relay.reshape(call_1368.astype('uint8'), relay.shape_of(uop_1388))) # shape=(3, 1)
bop_1397 = relay.bitwise_xor(uop_1390.astype('uint8'), relay.reshape(call_1369.astype('uint8'), relay.shape_of(uop_1390))) # shape=(3, 1)
uop_1399 = relay.asin(bop_1394.astype('float32')) # shape=(3, 1)
uop_1401 = relay.asin(bop_1397.astype('float32')) # shape=(3, 1)
bop_1404 = relay.add(uop_1399.astype('uint32'), relay.reshape(uop_1388.astype('uint32'), relay.shape_of(uop_1399))) # shape=(3, 1)
bop_1407 = relay.add(uop_1401.astype('uint32'), relay.reshape(uop_1390.astype('uint32'), relay.shape_of(uop_1401))) # shape=(3, 1)
const_1410 = relay.const([[7.292533,9.051287],[3.908806,-9.859935],[4.851304,8.005619]], dtype = "float32")#candidate|1410|(3, 2)|const|float32
bop_1411 = relay.maximum(uop_1399.astype('int16'), const_1410.astype('int16')) # shape=(3, 2)
bop_1414 = relay.maximum(uop_1401.astype('int16'), const_1410.astype('int16')) # shape=(3, 2)
var_1416 = relay.var("var_1416", dtype = "uint32", shape = (3, 3))#candidate|1416|(3, 3)|var|uint32
bop_1417 = relay.logical_xor(bop_1404.astype('uint64'), var_1416.astype('uint64')) # shape=(3, 3)
bop_1420 = relay.logical_xor(bop_1407.astype('uint64'), var_1416.astype('uint64')) # shape=(3, 3)
uop_1421 = relay.asin(bop_1411.astype('float32')) # shape=(3, 2)
uop_1423 = relay.asin(bop_1414.astype('float32')) # shape=(3, 2)
uop_1425 = relay.asinh(uop_1388.astype('float64')) # shape=(3, 1)
uop_1427 = relay.asinh(uop_1390.astype('float64')) # shape=(3, 1)
bop_1428 = relay.logical_or(bop_1394.astype('bool'), relay.reshape(uop_1425.astype('bool'), relay.shape_of(bop_1394))) # shape=(3, 1)
bop_1431 = relay.logical_or(bop_1397.astype('bool'), relay.reshape(uop_1427.astype('bool'), relay.shape_of(bop_1397))) # shape=(3, 1)
uop_1434 = relay.log10(uop_1421.astype('float64')) # shape=(3, 2)
uop_1436 = relay.log10(uop_1423.astype('float64')) # shape=(3, 2)
bop_1437 = relay.bitwise_xor(uop_1421.astype('int16'), bop_1428.astype('int16')) # shape=(3, 2)
bop_1440 = relay.bitwise_xor(uop_1423.astype('int16'), bop_1431.astype('int16')) # shape=(3, 2)
uop_1443 = relay.sqrt(uop_1434.astype('float64')) # shape=(3, 2)
uop_1445 = relay.sqrt(uop_1436.astype('float64')) # shape=(3, 2)
output = relay.Tuple([bop_1417,bop_1437,uop_1443,])
output2 = relay.Tuple([bop_1420,bop_1440,uop_1445,])
func_1449 = relay.Function([var_1416,], output)
mod['func_1449'] = func_1449
mod = relay.transform.InferType()(mod)
var_1450 = relay.var("var_1450", dtype = "uint32", shape = (3, 3))#candidate|1450|(3, 3)|var|uint32
output = func_1449(var_1450)
func_1451 = relay.Function([var_1450], output)
mutated_mod['func_1451'] = func_1451
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1461 = relay.var("var_1461", dtype = "uint8", shape = (12, 16, 12))#candidate|1461|(12, 16, 12)|var|uint8
var_1462 = relay.var("var_1462", dtype = "uint8", shape = (12, 16, 12))#candidate|1462|(12, 16, 12)|var|uint8
bop_1463 = relay.greater_equal(var_1461.astype('bool'), relay.reshape(var_1462.astype('bool'), relay.shape_of(var_1461))) # shape=(12, 16, 12)
bop_1467 = relay.logical_xor(var_1462.astype('int32'), relay.reshape(bop_1463.astype('int32'), relay.shape_of(var_1462))) # shape=(12, 16, 12)
func_1045_call = mod.get_global_var('func_1045')
func_1048_call = mutated_mod.get_global_var('func_1048')
const_1471 = relay.const([[1.329688,9.418343,-3.799611],[-5.469861,-5.971680,-7.469238],[-9.531836,6.100173,0.225115]], dtype = "float64")#candidate|1471|(3, 3)|const|float64
call_1470 = relay.TupleGetItem(func_1045_call(relay.reshape(const_1471.astype('float64'), [9,])), 1)
call_1472 = relay.TupleGetItem(func_1048_call(relay.reshape(const_1471.astype('float64'), [9,])), 1)
func_1340_call = mod.get_global_var('func_1340')
func_1342_call = mutated_mod.get_global_var('func_1342')
call_1473 = func_1340_call()
call_1474 = func_1340_call()
func_623_call = mod.get_global_var('func_623')
func_626_call = mutated_mod.get_global_var('func_626')
const_1478 = relay.const([-1.013391,-1.739106,-1.969078,-5.026382,-1.386581,4.864469,-2.593087,-4.405072,-4.343254,6.179108,-1.862085,0.494265,-4.687178,-9.199259,-9.642925,9.847283,-9.377208,-3.473522,5.146624,2.554648,-6.937946,1.434691,1.990489,7.637926,0.224944,-1.434377,1.001610,-4.071697,5.068788,0.944168,-2.447503,9.938204,5.507214,7.500590,-3.699206,-1.868541,-9.629343,6.704176,0.563717,2.754206,3.961977,2.425713,5.416601,8.779922,-4.402439,9.843191,3.762792,7.906647,-0.770943,7.571953,-7.094339,2.726205,8.314676,-1.201915,-3.460356,-4.594491,-9.104397,-6.901450,3.534969,-4.946809,6.269015,5.491662,-9.403617,7.579588,8.022530,-4.097789,-9.944156,-4.977550,-7.185765,6.797452,9.989366,0.404940,6.467409,8.685093,2.580094,-6.563562,6.851691,5.949262,0.976398,-5.488612,8.644816,-8.984581,4.059188,-3.539401,9.226033,-3.727784,4.879002,-9.262223,1.409217,5.232460,-3.965537,8.116612,0.082739,6.759784,5.598846,-2.036473,-1.484864,4.502969,5.382546,-9.474816,3.080661,8.903334,-2.787176,1.977284,-5.724892,-4.891905,-4.232351,-6.588210,-5.862910,-9.540338,-8.954302,-2.639728,2.696939,-4.105696,0.234227,-2.953466,9.390328,9.320492,2.640245,5.835442,-6.958965,-2.823938,-6.263289,-1.114625,8.160243,-2.266126], dtype = "float32")#candidate|1478|(126,)|const|float32
call_1477 = relay.TupleGetItem(func_623_call(relay.reshape(const_1478.astype('float32'), [14, 9])), 1)
call_1479 = relay.TupleGetItem(func_626_call(relay.reshape(const_1478.astype('float32'), [14, 9])), 1)
uop_1480 = relay.tan(bop_1467.astype('float32')) # shape=(12, 16, 12)
uop_1482 = relay.log10(const_1471.astype('float32')) # shape=(3, 3)
bop_1488 = relay.left_shift(uop_1480.astype('int16'), relay.reshape(bop_1463.astype('int16'), relay.shape_of(uop_1480))) # shape=(12, 16, 12)
bop_1493 = relay.less(var_1461.astype('bool'), relay.reshape(uop_1480.astype('bool'), relay.shape_of(var_1461))) # shape=(12, 16, 12)
func_864_call = mod.get_global_var('func_864')
func_868_call = mutated_mod.get_global_var('func_868')
const_1500 = relay.const([True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False], dtype = "bool")#candidate|1500|(27,)|const|bool
const_1501 = relay.const([5.110920,9.771319,9.816836,0.759112,-6.925436,5.281920,-3.906471,-9.416701,-1.307648,2.806016,-1.183784,-5.674677,-0.108418,6.439903,3.660535,-3.285852,-3.270519,0.785178,0.770319,9.095936,7.437125,-2.957673,0.526439,-9.463003,-7.378111,9.972288,-7.234687,-9.915302,9.601491,-4.639920,-4.424281,6.319157,-4.106194,-7.250255,-9.028177,-1.105465,-1.414493,9.596395,5.897760,5.307272,6.076861,-4.209954,3.432557,-1.546596,-1.303038,2.167089,-0.933891,7.616831,2.116487,-0.127021,-4.144323,1.584289,2.047661,-8.531479,6.588195,-3.362041,-9.477159,-3.368323,6.415446,-2.357131,-6.851647,-4.257885,4.003621,9.645799,-9.803702,-0.350003,-6.024976,4.466463,-4.351746,-7.200852,-9.642995,7.205517,-4.161533,-6.246596,-3.532293,6.292482,-4.931507,4.359243,-5.885243,-0.147281,-9.837846,6.329673,-7.498527,-0.744010], dtype = "float64")#candidate|1501|(84,)|const|float64
call_1499 = relay.TupleGetItem(func_864_call(relay.reshape(const_1500.astype('bool'), [3, 9]), relay.reshape(const_1501.astype('float64'), [84,]), ), 0)
call_1502 = relay.TupleGetItem(func_868_call(relay.reshape(const_1500.astype('bool'), [3, 9]), relay.reshape(const_1501.astype('float64'), [84,]), ), 0)
uop_1504 = relay.log2(bop_1463.astype('float64')) # shape=(12, 16, 12)
bop_1509 = relay.greater_equal(uop_1480.astype('bool'), relay.reshape(bop_1488.astype('bool'), relay.shape_of(uop_1480))) # shape=(12, 16, 12)
bop_1515 = relay.bitwise_and(uop_1482.astype('uint64'), relay.reshape(call_1470.astype('uint64'), relay.shape_of(uop_1482))) # shape=(3, 3)
bop_1518 = relay.bitwise_and(uop_1482.astype('uint64'), relay.reshape(call_1472.astype('uint64'), relay.shape_of(uop_1482))) # shape=(3, 3)
var_1519 = relay.var("var_1519", dtype = "float32", shape = (3, 3))#candidate|1519|(3, 3)|var|float32
bop_1520 = relay.equal(uop_1482.astype('bool'), relay.reshape(var_1519.astype('bool'), relay.shape_of(uop_1482))) # shape=(3, 3)
output = relay.Tuple([call_1473,call_1477,const_1478,bop_1493,call_1499,const_1500,const_1501,uop_1504,bop_1509,bop_1515,bop_1520,])
output2 = relay.Tuple([call_1474,call_1479,const_1478,bop_1493,call_1502,const_1500,const_1501,uop_1504,bop_1509,bop_1518,bop_1520,])
func_1528 = relay.Function([var_1461,var_1462,var_1519,], output)
mod['func_1528'] = func_1528
mod = relay.transform.InferType()(mod)
var_1529 = relay.var("var_1529", dtype = "uint8", shape = (12, 16, 12))#candidate|1529|(12, 16, 12)|var|uint8
var_1530 = relay.var("var_1530", dtype = "uint8", shape = (12, 16, 12))#candidate|1530|(12, 16, 12)|var|uint8
var_1531 = relay.var("var_1531", dtype = "float32", shape = (3, 3))#candidate|1531|(3, 3)|var|float32
output = func_1528(var_1529,var_1530,var_1531,)
func_1532 = relay.Function([var_1529,var_1530,var_1531,], output)
mutated_mod['func_1532'] = func_1532
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1547 = relay.const([[-6,2,-4,-3,7,6,9,-6,-3,5,-1,-1,-1,6,-7],[-5,3,2,-8,-6,-7,8,8,-10,6,10,-2,-2,7,-1],[10,9,7,-3,-6,-10,1,-9,-4,2,4,-9,-5,1,8],[-8,2,-4,-9,-4,5,-8,-5,-7,-7,9,3,10,-7,-1],[7,-5,-7,7,-3,-10,8,7,6,10,-7,5,-9,9,7],[2,9,2,6,1,4,-10,-1,4,2,-9,7,10,-8,-1],[-9,7,-10,-4,-10,-8,6,5,-6,5,6,-9,-7,-8,-8],[-9,4,4,7,-4,5,-9,1,-8,-6,-7,6,-5,6,7],[-4,2,-4,-6,6,-6,-2,-2,3,-10,-5,-1,-4,4,-2],[6,9,8,6,-2,1,-5,-7,6,9,8,2,4,6,7],[-9,5,-1,-1,4,1,-3,8,3,9,9,-5,5,-6,7],[8,-6,-4,-4,4,-8,5,1,-3,-9,-4,10,-9,9,7],[-7,-2,7,-2,10,-1,10,2,-1,-6,7,-9,9,1,1],[4,2,3,-1,-2,-10,1,-1,3,-10,-10,-1,4,-7,10],[3,-10,-7,4,-7,-10,1,10,6,2,4,-1,-5,7,-9],[9,-10,-7,-3,6,9,-8,-7,2,6,7,10,-5,4,6]], dtype = "int16")#candidate|1547|(16, 15)|const|int16
var_1548 = relay.var("var_1548", dtype = "int16", shape = (16, 15))#candidate|1548|(16, 15)|var|int16
bop_1549 = relay.left_shift(const_1547.astype('int16'), relay.reshape(var_1548.astype('int16'), relay.shape_of(const_1547))) # shape=(16, 15)
uop_1552 = relay.log10(bop_1549.astype('float64')) # shape=(16, 15)
func_495_call = mod.get_global_var('func_495')
func_500_call = mutated_mod.get_global_var('func_500')
var_1556 = relay.var("var_1556", dtype = "int16", shape = (3360,))#candidate|1556|(3360,)|var|int16
var_1557 = relay.var("var_1557", dtype = "float32", shape = (780, 4))#candidate|1557|(780, 4)|var|float32
call_1555 = relay.TupleGetItem(func_495_call(relay.reshape(var_1556.astype('int16'), [16, 14, 15]), relay.reshape(var_1556.astype('int16'), [16, 14, 15]), relay.reshape(var_1556.astype('float32'), [16, 14, 15]), relay.reshape(var_1557.astype('float32'), [3120,]), ), 5)
call_1558 = relay.TupleGetItem(func_500_call(relay.reshape(var_1556.astype('int16'), [16, 14, 15]), relay.reshape(var_1556.astype('int16'), [16, 14, 15]), relay.reshape(var_1556.astype('float32'), [16, 14, 15]), relay.reshape(var_1557.astype('float32'), [3120,]), ), 5)
output = relay.Tuple([uop_1552,call_1555,var_1556,var_1557,])
output2 = relay.Tuple([uop_1552,call_1558,var_1556,var_1557,])
func_1560 = relay.Function([var_1548,var_1556,var_1557,], output)
mod['func_1560'] = func_1560
mod = relay.transform.InferType()(mod)
var_1561 = relay.var("var_1561", dtype = "int16", shape = (16, 15))#candidate|1561|(16, 15)|var|int16
var_1562 = relay.var("var_1562", dtype = "int16", shape = (3360,))#candidate|1562|(3360,)|var|int16
var_1563 = relay.var("var_1563", dtype = "float32", shape = (780, 4))#candidate|1563|(780, 4)|var|float32
output = func_1560(var_1561,var_1562,var_1563,)
func_1564 = relay.Function([var_1561,var_1562,var_1563,], output)
mutated_mod['func_1564'] = func_1564
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1127_call = mod.get_global_var('func_1127')
func_1128_call = mutated_mod.get_global_var('func_1128')
call_1569 = func_1127_call()
call_1570 = func_1127_call()
func_1045_call = mod.get_global_var('func_1045')
func_1048_call = mutated_mod.get_global_var('func_1048')
var_1577 = relay.var("var_1577", dtype = "float64", shape = (9,))#candidate|1577|(9,)|var|float64
call_1576 = relay.TupleGetItem(func_1045_call(relay.reshape(var_1577.astype('float64'), [9,])), 2)
call_1578 = relay.TupleGetItem(func_1048_call(relay.reshape(var_1577.astype('float64'), [9,])), 2)
uop_1579 = relay.sinh(call_1576.astype('float64')) # shape=(3, 4)
uop_1581 = relay.sinh(call_1578.astype('float64')) # shape=(3, 4)
bop_1582 = relay.logical_and(uop_1579.astype('bool'), call_1569.astype('bool')) # shape=(3, 4)
bop_1585 = relay.logical_and(uop_1581.astype('bool'), call_1570.astype('bool')) # shape=(3, 4)
var_1587 = relay.var("var_1587", dtype = "float64", shape = (3, 4))#candidate|1587|(3, 4)|var|float64
bop_1588 = relay.not_equal(uop_1579.astype('bool'), relay.reshape(var_1587.astype('bool'), relay.shape_of(uop_1579))) # shape=(3, 4)
bop_1591 = relay.not_equal(uop_1581.astype('bool'), relay.reshape(var_1587.astype('bool'), relay.shape_of(uop_1581))) # shape=(3, 4)
output = relay.Tuple([var_1577,bop_1582,bop_1588,])
output2 = relay.Tuple([var_1577,bop_1585,bop_1591,])
func_1592 = relay.Function([var_1577,var_1587,], output)
mod['func_1592'] = func_1592
mod = relay.transform.InferType()(mod)
var_1593 = relay.var("var_1593", dtype = "float64", shape = (9,))#candidate|1593|(9,)|var|float64
var_1594 = relay.var("var_1594", dtype = "float64", shape = (3, 4))#candidate|1594|(3, 4)|var|float64
output = func_1592(var_1593,var_1594,)
func_1595 = relay.Function([var_1593,var_1594,], output)
mutated_mod['func_1595'] = func_1595
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1621 = relay.var("var_1621", dtype = "uint16", shape = (1, 15))#candidate|1621|(1, 15)|var|uint16
const_1622 = relay.const([[7,-8,-3,-1,5,9,-3,5,-3,9,3,-9,4,2,-5],[1,-2,5,8,-2,9,4,-8,-4,-10,-4,10,3,-7,-5],[5,-4,-7,-2,-4,-9,-10,5,-4,8,-1,-6,-8,-4,3],[7,7,4,-10,-10,-3,-9,2,8,2,-7,-10,3,1,5],[9,3,-3,10,3,2,-9,-8,5,-6,-4,10,-7,4,-2]], dtype = "uint16")#candidate|1622|(5, 15)|const|uint16
bop_1623 = relay.add(var_1621.astype('uint16'), const_1622.astype('uint16')) # shape=(5, 15)
uop_1626 = relay.cosh(const_1622.astype('float32')) # shape=(5, 15)
bop_1632 = relay.logical_xor(uop_1626.astype('int16'), relay.reshape(const_1622.astype('int16'), relay.shape_of(uop_1626))) # shape=(5, 15)
output = relay.Tuple([bop_1623,bop_1632,])
output2 = relay.Tuple([bop_1623,bop_1632,])
F = relay.Function([var_1621,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1621,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1621= np.array([[10,-8,9,10,7,-3,8,-1,-8,4,1,1,-2,-8,-6]], dtype='uint16')
module1.set_input('var_1621', input_1621)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1621, )
res3 = intrp3.evaluate()(input_1621, )
res4 = intrp4.evaluate()(input_1621, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input('var_1621', input_1621)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1621, )
res7 = intrp7.evaluate()(input_1621, )
res8 = intrp8.evaluate()(input_1621, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input('var_1621', input_1621)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1621, )
res11 = intrp11.evaluate()(input_1621, )
res12 = intrp12.evaluate()(input_1621, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input('var_1621', input_1621)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1621, )
res15 = intrp15.evaluate()(input_1621, )
res16 = intrp16.evaluate()(input_1621, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input('var_1621', input_1621)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1621, )
res19 = intrp19.evaluate()(input_1621, )
res20 = intrp20.evaluate()(input_1621, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input('var_1621', input_1621)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1621, )
res23 = intrp23.evaluate()(input_1621, )
res24 = intrp24.evaluate()(input_1621, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''49: TVMFuncCall
48: _ZNSt17_Function_handlerIFvN3tvm7run
47: tvm::runtime::TypedPackedFunc<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>::AssignTypedLambda<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>(tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
46: tvm::relay::EvalFunction(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''