import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_15 = relay.var("var_15", dtype = "float32", shape = (9, 7))#candidate|15|(9, 7)|var|float32
uop_16 = relay.cos(var_15.astype('float32')) # shape=(9, 7)
output = uop_16
output2 = uop_16
func_18 = relay.Function([var_15,], output)
mod['func_18'] = func_18
mod = relay.transform.InferType()(mod)
mutated_mod['func_18'] = func_18
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19 = relay.var("var_19", dtype = "float32", shape = (9, 7))#candidate|19|(9, 7)|var|float32
func_18_call = mutated_mod.get_global_var('func_18')
call_20 = func_18_call(var_19)
output = call_20
func_21 = relay.Function([var_19], output)
mutated_mod['func_21'] = func_21
mutated_mod = relay.transform.InferType()(mutated_mod)
var_42 = relay.var("var_42", dtype = "float64", shape = (9, 7, 8))#candidate|42|(9, 7, 8)|var|float64
uop_43 = relay.exp(var_42.astype('float64')) # shape=(9, 7, 8)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
const_47 = relay.const([-9.125849,-4.086089,-5.047821,-3.246204,-1.807725,-2.266466,-0.512720,-0.166614,2.139697,-9.663915,9.065352,5.710026,-3.442781,2.482695,-2.253055,-0.130465,-7.132503,-4.269877,5.327740,-4.619799,6.448447,4.144275,-5.410612,1.658555,0.417103,7.499535,-2.546184,1.809236,-5.144981,4.700785,9.189928,6.529137,-6.925446,6.897731,-5.065756,2.919640,-5.079072,3.247232,-6.620431,-5.593865,-3.398741,-8.034706,7.008810,3.135194,2.783235,-1.341922,9.884991,-2.605286,9.308727,4.047580,9.636574,-1.315193,7.250957,-0.156870,-8.492109,0.812641,-8.856450,-7.743191,-1.397658,9.190179,-4.951164,-4.610295,6.230864], dtype = "float32")#candidate|47|(63,)|const|float32
call_46 = func_18_call(relay.reshape(const_47.astype('float32'), [9, 7]))
call_48 = func_18_call(relay.reshape(const_47.astype('float32'), [9, 7]))
output = relay.Tuple([uop_43,call_46,const_47,])
output2 = relay.Tuple([uop_43,call_48,const_47,])
func_49 = relay.Function([var_42,], output)
mod['func_49'] = func_49
mod = relay.transform.InferType()(mod)
var_50 = relay.var("var_50", dtype = "float64", shape = (9, 7, 8))#candidate|50|(9, 7, 8)|var|float64
output = func_49(var_50)
func_51 = relay.Function([var_50], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
const_85 = relay.const([[[0.317481,-5.970699,-1.566230,-9.102897,0.209381,1.777853,-2.917888],[7.992638,-0.841406,-8.704005,4.618632,1.136639,5.281871,7.963424],[8.199786,5.401562,1.360233,-5.111503,-9.516700,8.236607,4.800723],[1.995052,7.652665,8.429090,9.052689,-7.973604,-6.123637,-6.200000],[-9.316258,-0.963534,-9.593348,8.606175,-4.612937,4.722329,-3.856588],[-6.753282,2.391404,3.261848,-5.218589,5.104617,-8.996844,-4.299034],[3.178950,8.669574,-3.498695,-6.185327,0.185147,9.665345,3.485276],[-3.475890,2.107071,1.530738,-7.876857,4.381949,9.584448,-3.899543],[-3.973620,8.523764,-8.978563,-4.967364,-4.986368,1.722166,-6.358912],[6.927290,-0.389785,2.121552,-3.442723,-4.200701,-2.406655,8.796965],[-1.964072,2.565561,-6.734621,5.978453,3.997801,-4.798088,-5.215946],[2.123379,-0.465398,-5.884706,-5.815006,-6.869176,2.027568,-8.699229],[1.854045,3.546200,0.594337,-3.405248,3.886421,-4.534150,4.202756],[3.980104,5.606524,-5.599315,5.121301,-3.675042,0.692862,7.353852],[2.128465,-7.313819,3.235380,8.993533,-2.106884,5.070349,9.054159]],[[3.242166,-4.274956,-2.453853,4.257572,2.593409,3.887651,3.009626],[-1.551654,0.087274,-4.877108,-4.883632,-1.206032,-3.024245,-8.040915],[-8.840159,-4.965777,-5.097878,-7.881633,-5.919803,-3.611657,9.223101],[4.940915,-3.417242,7.985899,5.282531,0.276214,4.645730,4.230420],[-3.430080,2.338607,2.691360,-2.827928,-5.143046,-9.108479,9.166917],[-1.839616,2.071182,4.382666,-9.300010,7.642008,-5.594779,5.546337],[-4.854754,9.578657,-2.700036,-2.309630,-6.677419,-3.011486,6.791783],[5.989965,5.770749,0.519327,3.780188,-5.750750,4.893826,-5.014218],[-2.393487,-2.290900,-7.465128,6.332841,-9.249983,0.600421,6.711966],[-8.942984,-7.581843,0.896612,7.949091,-6.151071,5.581763,-8.742417],[8.409448,-5.026039,5.321704,-1.034369,-8.351420,-0.662890,6.200146],[-2.111008,7.148766,-2.991790,-8.759159,9.694319,-5.317058,6.050894],[-0.266861,7.445731,-0.395234,8.264316,-6.137808,4.841545,-4.474150],[6.795050,9.237706,-8.568471,-6.205415,8.264111,-1.660958,2.483041],[-8.028544,-0.980260,-0.056951,-8.406031,0.139918,-4.437328,-8.773015]],[[-9.278279,-6.880968,-7.117434,9.654705,-7.910618,3.018244,5.194743],[0.112423,0.817388,2.797027,-4.790032,5.955319,-3.091683,6.924687],[-8.442054,-8.789395,-6.276079,-5.346586,4.737859,2.537376,-2.225352],[7.951381,-0.021579,-8.677410,-7.658385,3.265214,5.940535,-0.964168],[8.927709,3.802709,6.484219,-3.319176,-6.183199,-9.078207,3.015381],[2.414897,9.937338,5.951101,8.653199,3.505889,5.682412,6.172159],[6.629638,-9.953240,0.792621,-4.154396,9.948191,-8.042281,0.410817],[3.587000,-7.037783,-5.780297,6.639597,0.281064,3.879816,2.778245],[3.348586,-5.663824,-7.581978,1.528920,-7.439092,-6.880979,-7.864693],[5.278256,6.620160,-4.426793,4.162899,0.069636,-7.606721,-3.726954],[4.228448,-2.374488,-3.354879,6.920571,4.354570,-6.586890,-5.809201],[-3.937149,5.098890,2.556382,-7.648635,-4.838992,-1.702685,0.252790],[-5.931205,2.845255,0.397072,-7.156844,-6.516061,-6.469434,-9.095078],[1.303536,7.737600,2.749503,6.965373,5.638306,3.942897,5.867196],[-7.711877,-5.060030,-7.194423,-8.750955,-3.489878,5.221406,5.188641]],[[-5.801333,-7.489839,-6.018578,6.720678,-8.294481,-6.787605,9.307713],[7.315621,-8.856617,5.476144,-8.655792,-2.602374,3.431617,8.485451],[7.796218,-0.474332,-8.546029,9.072526,-2.547667,0.807013,1.813865],[-9.985256,8.091464,1.293183,5.245855,-2.933937,7.639991,0.466838],[5.246499,8.255979,3.992283,9.167913,5.246113,-3.458892,8.472759],[-4.221322,-9.518169,8.414409,4.824801,6.688418,0.048624,-6.772636],[-0.978245,7.046165,3.227448,-9.646532,-6.577013,-3.741223,-6.630035],[1.941455,-7.365109,-5.290881,9.430524,-1.672670,-6.126466,7.341319],[-2.481457,-7.445198,0.707388,-5.341022,4.450276,1.345798,-3.037366],[2.653463,7.238735,0.810999,-3.682038,-9.539569,6.387529,-1.217169],[-8.348380,-8.948236,-6.151627,3.290678,-3.089285,-5.299570,-5.686235],[-0.958000,7.389107,6.948253,-4.731667,7.253571,-5.065981,-7.601757],[-1.242899,8.773666,7.892739,3.233742,6.873273,2.116217,3.595855],[5.384419,-5.654250,-7.218571,0.528642,-3.813132,-7.627653,-4.823572],[7.284973,2.926774,-2.839615,-2.548429,-7.510577,6.044858,-1.357639]],[[4.145949,-8.633399,9.584617,-3.320714,-4.319457,0.146730,-6.231071],[-8.728803,-6.297076,3.712871,-7.902663,-0.492576,4.620902,-9.763042],[-2.212663,-1.853652,-3.886770,-1.147279,4.498728,-3.996689,-2.285435],[-7.605333,6.724214,-7.929921,-9.519082,4.703093,6.126575,9.011491],[-7.677290,8.866977,-7.829075,9.981929,-2.110354,-0.636891,-9.052708],[2.257692,-2.190516,0.363152,3.144927,4.641592,-6.577268,-9.971525],[-3.237655,-9.209527,1.399370,-5.674361,6.202107,9.562322,3.188792],[7.257956,-5.832837,3.367763,-8.289823,-4.686226,-6.025039,4.249780],[4.980460,-7.681360,3.466770,-2.776984,-2.062356,-0.849411,-9.561171],[5.654783,3.943190,-4.791876,1.687705,-1.310081,-7.133134,4.724401],[-3.199483,8.532610,-1.006663,-3.933125,3.253180,4.716548,3.468650],[4.603212,2.128688,8.651526,-7.476302,-5.989463,1.587895,3.543958],[0.802137,-1.569988,-0.523128,3.000019,7.324473,-9.383917,0.731468],[-2.128958,-4.684175,-7.359311,-9.408733,-7.604705,1.986927,2.481863],[-0.122217,9.617969,4.016423,9.097547,1.288078,2.533380,-0.273712]],[[1.883668,6.504409,-6.734999,-0.594426,4.251362,9.472558,5.024022],[-3.442141,2.167806,8.632551,-7.914819,0.517864,-6.220757,2.098767],[1.401806,-7.739203,8.404041,7.365278,6.188116,-3.323924,-4.194966],[-1.361761,6.404193,-2.800826,5.337280,5.120725,7.767375,-2.188352],[4.145971,4.682667,2.547612,-5.116321,4.755011,0.704516,0.754296],[3.017175,6.044411,4.190257,-8.442922,3.374164,8.563613,7.590771],[9.816597,6.116471,3.597235,-2.953180,-4.782690,5.031330,-9.509198],[-8.119714,4.092892,1.865658,2.317975,1.021750,7.254757,-4.571454],[9.216734,5.239228,7.983990,6.815831,6.800595,2.065793,-8.304666],[4.336959,6.431950,-2.626311,3.022937,6.627970,-2.339825,-2.080366],[-8.284777,1.551564,-1.328974,-9.872941,4.257052,5.909891,5.508763],[-1.569781,2.581349,-9.210450,0.469846,3.684380,4.092124,9.711662],[4.201483,6.666769,-8.888375,4.515825,1.209662,-3.014295,-9.697993],[1.017846,8.248475,9.952414,5.224232,8.814526,2.970298,1.696731],[-8.864477,-1.760856,-0.935223,1.507377,-0.280741,3.355274,-2.997307]],[[-1.730525,7.930309,7.287612,4.687789,-3.700772,-8.377283,4.252756],[-3.619462,-1.221253,-4.453661,8.321574,-6.249140,8.845333,6.223800],[-3.135158,5.989708,-3.623069,-4.566589,8.939952,2.416755,-4.333381],[3.970684,1.636650,-3.940931,-5.974456,-2.756235,1.923892,-2.922288],[-8.850247,-6.128342,-0.607567,1.659677,-6.116341,-8.040437,-8.564709],[9.128130,5.575419,-0.653929,2.037538,7.073750,8.904931,3.841727],[-1.236077,-5.789035,2.468020,-4.238943,-1.509254,9.460049,4.709557],[-0.280851,1.235220,1.903410,-4.565941,7.232432,-7.459917,-8.305825],[-2.198398,0.806501,6.459308,7.037150,-5.763471,-4.437063,-9.434160],[9.054254,4.262657,6.897502,-7.157057,-8.672026,-7.785380,-7.735795],[-0.993948,1.739420,-6.577119,7.865008,-0.828297,-5.727678,-0.066087],[5.120478,-7.031379,6.410629,-6.890267,-7.436104,2.672023,5.797018],[-3.058744,-8.204671,-0.076120,-0.785085,-0.766292,7.728539,-7.408787],[4.977862,-6.524144,2.328965,-9.962570,2.039775,9.802488,2.829689],[-7.520454,9.809850,-1.073840,8.608988,6.599062,7.353176,2.904504]],[[-2.197615,-5.754188,8.446193,-6.502915,-4.270328,4.025870,2.651077],[1.294419,4.048871,3.816698,3.083259,-9.344686,6.992986,-3.450156],[-9.710421,1.322023,4.040735,-1.092891,-3.882556,-2.402300,8.276551],[-1.509988,-4.610218,2.898169,6.051702,-9.667046,-7.982932,3.328655],[-9.831019,-8.551538,-0.036474,5.370399,-4.735997,-0.454216,-5.154816],[1.621132,-8.773573,-1.912742,4.349150,-4.818540,7.338361,0.273681],[0.050034,0.727948,-3.437977,-8.993414,8.655031,2.570833,-7.293656],[-0.563813,-2.098532,-5.764159,-6.936275,5.635822,3.668730,-6.038753],[8.027116,-3.748928,0.555746,-7.880257,-6.902027,-2.912703,8.069770],[6.958604,8.140571,-0.702900,3.546193,-5.508141,-7.688992,6.689677],[3.311616,-3.790455,-2.493861,0.669050,-6.570304,4.539340,8.187503],[-7.969594,8.398065,-7.976202,0.175722,-3.306275,4.423084,-0.700350],[4.199499,9.404697,-2.398232,9.477675,6.300951,-5.160334,-5.385225],[-8.092166,8.399760,-8.405480,-9.090671,6.564274,-5.714812,-5.067379],[-5.887637,0.631473,-2.793893,-9.895893,-0.902998,3.176846,-4.047056]],[[4.147885,-2.136094,-9.996523,-3.001620,-3.262748,1.985465,-7.651725],[-0.835679,-0.677344,-1.239312,-5.434321,-5.149325,4.167889,-4.860998],[-7.990637,-5.881067,1.787215,5.916840,-1.852743,9.697065,-1.694289],[-4.427300,-3.314825,5.365225,6.339948,-6.458575,6.106621,-8.957980],[8.066686,7.687531,4.021382,3.410594,-2.742635,9.067912,-6.582681],[-0.456026,3.352212,2.344895,9.278626,-1.803008,-8.669241,-7.459525],[-6.821340,-0.066176,6.907973,4.146681,6.085370,5.712792,-3.848430],[-3.301362,5.320881,0.793828,0.156446,-5.064678,-4.879631,9.756201],[0.364635,-5.571532,-9.052774,0.955139,-9.821007,3.512109,8.204195],[-3.110053,7.329291,-3.449670,6.178099,5.882472,5.175691,6.410022],[0.606366,-9.901132,-9.235265,-9.926131,-3.844956,-5.801518,-5.619582],[-6.398158,-2.373630,0.888138,-5.060917,7.565348,-4.121474,-8.242766],[-6.541934,4.837813,8.478736,1.626601,-2.354362,-1.346858,9.199137],[7.982537,-1.071653,-6.559229,-1.622115,-6.490916,6.872164,-5.432958],[7.017649,4.933703,-7.760397,8.211328,8.619002,6.982079,-5.750477]],[[-9.039223,-2.955835,5.059475,9.450107,-1.897832,-8.625010,-2.717694],[-7.608707,7.778667,-5.070832,2.267224,4.502637,-5.590302,4.316657],[-9.966622,6.830617,-0.786393,-6.869993,7.346698,5.357259,-7.085438],[-0.093318,2.275794,9.099526,-3.401293,-8.712902,2.313656,-1.478852],[-6.474682,5.530668,2.887631,2.186826,1.637288,-5.217906,7.829781],[-2.710672,8.894254,4.667545,9.511894,0.780919,-9.959263,0.369482],[2.659205,1.296374,-6.583929,-5.863793,8.490294,3.345265,1.934512],[7.696096,7.011461,-9.906380,2.168007,7.198933,7.267514,-6.825622],[-5.257356,9.715828,-6.313419,0.928771,8.101022,-4.269647,9.460908],[1.377859,6.621758,-3.663865,-7.320185,6.453786,-0.682029,-0.551333],[5.524453,9.030039,5.209946,5.262037,9.420943,-6.433774,-9.633214],[6.060108,-1.934140,3.207665,-9.207727,-7.382401,-9.029871,-6.468341],[-1.216113,-6.241504,1.757776,-6.488859,-2.579434,-4.427591,-7.789201],[7.252057,-1.317091,7.330719,5.496924,-2.765553,-4.984540,8.723654],[0.154127,9.717729,-8.895929,9.816688,6.942096,-6.020774,-5.513638]],[[5.594053,6.206841,1.911890,3.638556,-3.743693,8.819026,-0.340929],[8.667812,2.026910,8.595688,0.552267,-5.577732,-2.321106,-2.830460],[-6.830631,1.440195,0.001946,-4.583771,-3.459037,0.573479,-4.095217],[-7.250789,-7.586229,-8.761973,-0.635794,-3.345416,-3.126789,-4.688519],[-7.818273,1.183505,7.152269,-4.800106,-3.402965,-9.499869,8.068189],[2.845494,-0.721602,-5.667150,-9.357156,-8.101060,2.389317,-4.225289],[-7.648854,-3.772022,7.348877,4.661866,-7.475448,0.388823,-2.187510],[-1.462101,-3.062402,2.460726,8.618009,9.606085,1.306177,-1.636318],[4.330095,-8.922637,7.606362,-5.064671,-3.857213,-5.269866,-3.469942],[2.478423,3.458107,-0.433760,-0.303608,-4.142863,4.184790,1.451679],[-4.250268,8.119621,-5.535029,0.680046,-0.080847,-6.342135,8.609617],[-9.921838,-2.613624,-9.439846,2.396037,6.943409,-9.047513,0.507437],[-7.761725,-4.233329,-7.090564,-4.622110,9.053944,-8.316274,2.906301],[4.200837,4.396117,-6.384108,2.643503,6.310277,6.240159,-4.574719],[2.146658,-3.277202,-8.493449,-6.515575,-3.363569,0.657939,-8.699489]],[[-1.417376,-7.635480,-8.266547,6.929399,-8.266813,2.361866,7.709936],[-7.347337,-9.137675,3.387437,8.948136,-3.893210,-4.794880,-8.561557],[-1.653699,0.043925,5.609581,-1.572274,-0.176453,-7.851171,2.431881],[-7.379299,2.160355,-8.339956,-0.359478,-2.422967,-9.360154,9.487413],[6.664307,-2.053118,-6.731533,-2.689081,-8.705129,1.245733,-0.750885],[7.977663,3.879630,-9.866254,-2.038476,5.403531,-0.602999,4.611515],[-5.188243,8.035196,-6.183514,3.529528,-1.797415,-9.132539,9.871992],[7.489843,-2.388962,1.666804,-8.681407,-7.862596,-9.533887,-8.197798],[5.167177,7.508818,-1.037510,5.625013,0.828768,-6.029262,5.969993],[-5.188704,-4.807105,-0.894317,-4.198343,7.448170,-7.368517,4.922447],[5.305566,9.935725,7.797803,-6.267563,-2.848765,1.910560,-3.707351],[0.054739,-9.286285,-1.178052,7.481605,7.510847,-0.322493,-2.931927],[-0.134615,-1.117965,5.683010,-3.019899,-5.870436,8.509319,1.984434],[-8.831559,-9.669180,8.065917,6.398593,9.008658,-5.862868,-8.720408],[2.492379,3.002194,3.614544,6.819253,-9.628699,6.745387,-8.952667]],[[9.268434,3.475950,-2.421160,8.577589,6.111458,6.018760,4.474187],[6.597893,7.615574,-7.908375,7.245936,-3.768402,5.738329,-3.248225],[5.689041,7.970207,-1.296423,9.951961,-9.312205,-9.809762,6.320585],[-5.367304,-4.824114,6.918336,8.940292,-8.399672,3.015250,0.857068],[7.918017,9.914048,7.550721,3.012911,-7.693981,-0.908414,1.211768],[-6.334549,-0.280657,1.221259,-3.046634,-9.678755,3.730413,-9.252269],[5.453025,9.684787,-1.176295,-3.855113,7.897303,0.867798,-7.330558],[-8.502749,3.336349,-7.877574,8.127066,-2.693550,-0.441388,4.149478],[6.526849,-9.939479,-5.686437,-5.508397,3.016432,-6.194818,-9.533626],[-4.798416,8.794463,0.207118,8.555148,-3.127942,8.039866,-9.466006],[-1.017832,2.772761,-4.035611,-5.549289,9.121371,3.595686,9.594677],[0.786027,1.784577,-9.844567,-9.671406,5.745520,-6.860361,0.960249],[-3.364870,4.485912,9.661294,4.146435,7.682729,-7.333007,-7.360426],[5.286983,0.502835,4.284424,-1.232201,7.914265,9.246129,-8.903131],[6.537532,-7.235186,8.641149,-1.119230,-9.162750,-2.308591,2.010252]],[[2.823225,-5.654069,-7.631253,8.173046,8.464182,2.735542,7.568052],[3.464778,-7.538763,9.011221,2.233877,7.926729,9.837561,8.590546],[6.703428,3.844814,-8.941216,5.888112,0.605222,-6.267095,-6.355902],[-1.031829,7.608680,2.452909,-4.603529,-1.577456,7.626354,9.155346],[3.432298,1.673933,8.377354,2.662328,-8.013641,-2.752971,-0.856579],[-7.584275,0.513600,-1.396528,6.165541,-9.970476,-3.966160,1.836097],[-1.950809,-2.805505,1.806682,-0.014417,-6.029428,-8.831136,-9.879834],[1.213984,8.997714,3.820777,-8.966735,8.499965,0.420525,8.365493],[-7.068347,-3.429591,1.836231,7.360156,-0.765671,4.348599,4.774639],[2.130179,1.185588,-6.994187,7.434100,3.680825,5.884825,6.724647],[-8.251817,-5.994723,1.639867,-2.794230,-6.884702,7.574287,7.208724],[4.576649,-0.536676,3.308245,0.601963,-8.990341,5.405992,-4.929668],[1.425144,-9.069402,-6.147335,-2.063051,6.515567,-1.583999,-3.942157],[-5.755842,8.384559,1.711081,-5.042819,8.036147,-1.772808,-8.877965],[6.573272,0.239282,-2.040426,-6.969088,-6.876707,-7.536477,8.088637]]], dtype = "float32")#candidate|85|(14, 15, 7)|const|float32
var_86 = relay.var("var_86", dtype = "float32", shape = (14, 15, 7))#candidate|86|(14, 15, 7)|var|float32
bop_87 = relay.less(const_85.astype('bool'), relay.reshape(var_86.astype('bool'), relay.shape_of(const_85))) # shape=(14, 15, 7)
bop_90 = relay.equal(bop_87.astype('bool'), relay.reshape(const_85.astype('bool'), relay.shape_of(bop_87))) # shape=(14, 15, 7)
const_93 = relay.const([[[6.097800,-0.438645,-1.043490,2.080031,-2.995575,-3.022374,1.310274],[4.806103,5.055460,9.605119,9.528349,8.034789,-5.731342,1.819096],[-5.841123,4.700339,1.621534,-5.420577,-1.278991,-2.447267,-0.137825],[2.773148,-1.830411,-8.468707,-8.922060,5.766733,-7.488469,6.340657],[2.058256,-3.302303,2.942998,5.170389,9.168899,2.310800,6.098385],[-8.729931,-2.555896,8.522580,-8.930025,-7.226736,9.563136,6.027436],[-6.325057,9.521893,3.446723,-5.790705,1.647761,6.470021,5.559024],[-4.284845,1.052141,-3.355335,-4.644248,-3.518487,-1.975092,2.632775],[-0.687233,1.372141,9.770297,-5.124617,-7.423997,-9.494912,2.182624],[-2.798598,-1.198880,1.555355,6.656430,8.946867,-5.647674,6.329102],[-3.273101,-8.014296,7.985512,-6.241315,-0.084157,7.189265,7.094157],[-7.620844,0.755362,8.687550,4.434811,0.063661,-0.470901,-3.417301],[-9.184183,8.089803,1.166941,9.893992,-5.119598,4.267028,3.409215],[1.983480,-0.943380,4.443561,9.023607,3.804556,8.680378,4.698890],[2.940959,-5.617728,1.529123,9.469507,-7.750304,9.984840,-9.112893]],[[2.053849,3.135838,-9.877567,5.764718,-2.410936,-0.179490,4.411345],[-2.979187,1.107321,5.462442,-6.161710,-5.032415,3.283556,-5.349526],[6.665713,5.598412,-2.716204,4.844222,3.740800,-4.226021,7.220685],[4.425186,2.255193,-9.047070,-3.017783,-4.680766,-9.911934,-4.904374],[0.580479,2.186185,2.851404,-1.350319,2.757699,-1.637111,-8.299328],[-6.563382,4.331543,-2.930285,-5.190157,0.126428,-1.225312,0.265704],[-7.082277,-6.865396,-1.120768,-8.579072,3.534670,-8.529472,1.405133],[3.350072,9.958757,8.104748,2.049169,4.274867,-1.747399,-1.991592],[5.486362,-6.338267,3.769296,6.874087,-4.106487,3.088812,-2.050825],[-6.877764,-9.077489,0.758572,-8.564677,-7.435116,6.973694,2.361540],[4.096564,-1.094526,6.105841,-5.365192,-1.166593,-0.954188,-2.584478],[-7.123138,2.184178,-0.580845,-2.381342,-4.785086,-7.148617,-9.080690],[-7.987378,-3.767003,-2.291755,-4.697622,4.744046,-2.886005,6.270445],[-0.248882,3.597745,-3.531432,6.154794,-1.377108,4.370929,-5.036140],[-6.298433,6.182700,-4.434356,-7.269697,-5.288412,-3.827263,6.749029]],[[0.980462,-1.250454,-0.817135,-8.587441,-5.057437,5.873540,0.902993],[2.761255,5.800731,7.360180,9.406887,-7.973789,-6.404056,-2.665793],[-5.880332,8.315233,-1.722102,7.440264,5.670670,-7.939581,5.534608],[4.007318,-2.827560,8.662224,-1.477309,-2.638263,-2.166937,5.032715],[6.925272,-2.991443,6.999099,-2.446984,5.649105,9.389517,0.098642],[-8.882458,0.679409,-5.138686,7.654214,6.336827,-8.830338,3.219793],[-8.277165,9.505289,-6.718545,8.276154,3.902883,-6.475250,0.145930],[-2.622150,5.897736,-5.754298,-5.453193,-4.276294,-4.458250,6.307013],[7.421680,6.079240,1.821171,4.821576,-5.475817,7.896405,-7.923440],[-8.452940,6.279793,9.616055,-1.992811,-6.198709,-6.786837,-1.117628],[-0.815911,2.426411,-7.259610,-1.123198,5.008507,7.220190,-1.855236],[5.777536,-2.985610,8.204648,-9.724507,-0.299508,-6.413134,4.320678],[4.713038,9.309476,7.877220,4.198310,6.380763,7.989975,-3.566186],[1.728271,-5.190922,8.291824,-6.758648,-2.179037,3.980090,8.703912],[5.492637,-5.046714,-2.120406,7.516853,-3.263588,0.892444,-9.188265]],[[-1.863954,-7.500406,2.312886,0.674177,0.534742,2.059491,-3.356922],[7.529786,-0.096997,9.416144,1.705701,-3.053413,8.287272,-2.505445],[6.192089,-3.273067,3.967005,9.204041,0.549408,7.075919,-9.783550],[-8.142235,-1.273287,4.429993,2.991212,7.346612,-6.885541,9.830965],[5.720864,1.883187,-5.233058,-5.833672,-8.785901,-5.106034,-0.396406],[-7.649220,9.252985,-7.726328,-9.693297,-0.105341,-0.172403,5.110391],[-2.049908,-8.453302,-5.723575,-7.861939,1.051271,-2.089484,-0.383510],[7.359146,-0.692640,3.050397,7.075195,3.696375,6.313255,8.960834],[-0.244167,6.799514,5.367722,-2.359690,3.069543,-7.454355,0.389226],[-3.111570,7.324218,9.470423,0.095856,2.422596,-1.562920,0.484886],[7.446338,9.797503,3.923061,-6.458626,-6.675474,-0.432344,1.066677],[7.841033,4.008925,-5.946899,5.957589,-2.733855,-5.654427,8.638749],[1.423021,3.959872,2.957074,-9.699558,7.669896,4.661978,6.466168],[7.514531,-3.399304,5.472414,-4.740308,9.909960,2.090930,-8.064368],[2.003852,-2.028562,-3.445076,5.770801,-8.284177,-3.785421,-3.758641]],[[-6.074042,6.492092,-1.276584,-6.270671,2.101892,8.997412,-8.626516],[7.619163,2.381432,6.834647,3.762765,0.759079,4.725507,-8.505407],[2.824843,-4.489077,-2.539806,3.899388,9.974111,-0.110192,-0.772333],[2.378760,1.922766,7.014129,-1.896576,-7.782214,0.482362,-7.040511],[-6.346081,-5.602609,-3.827621,4.920283,8.804673,1.940488,-7.910682],[8.945078,-7.877059,6.249595,1.896544,-1.109010,7.146624,4.636686],[-5.554507,-6.897094,-2.119893,-3.125653,2.032561,7.183323,-3.266425],[3.077919,9.676731,4.323541,-8.391372,9.825462,0.141991,3.662069],[-9.822563,3.199594,-0.312168,0.967693,2.837151,2.824733,4.924112],[4.157055,-8.725706,-7.296396,9.463564,1.438708,5.803514,-7.278412],[-1.559970,5.293151,-5.472119,1.283735,-3.295159,-8.704622,-0.032777],[-6.628514,-0.613366,2.547434,4.301923,-2.798577,3.854596,-1.840478],[-0.710122,6.292904,-2.973513,-4.294986,-2.887113,5.337285,-4.749269],[-4.913838,-4.586229,6.162419,-7.340881,3.610211,-8.320101,-9.775512],[2.581154,-7.969567,4.818618,-3.515534,2.910978,1.379142,-5.811739]],[[-3.334434,-2.053053,1.320174,-4.652282,5.332981,9.440874,-3.916150],[9.264171,6.448895,8.133078,-7.866725,5.039569,-4.688683,2.111859],[-9.387408,-1.476075,7.738854,4.696440,0.344444,0.394481,-9.254803],[2.638700,-6.612847,-9.175729,1.250738,-9.764651,-3.565810,-6.895958],[-0.902280,-3.333956,0.520596,0.441060,0.120980,7.212862,-0.946871],[-5.724240,7.441366,8.199038,-0.096017,8.493853,6.485093,9.798443],[-3.699218,-4.456174,-3.607605,1.169610,-4.516342,-2.766529,-0.534297],[-3.498308,-4.914216,6.107556,9.418696,0.515833,-6.355331,9.279778],[-2.413376,-3.836747,9.811541,6.312213,2.336007,3.780758,-8.312082],[-6.946618,-2.041840,6.679026,1.929229,-5.475217,-5.718502,-7.551077],[7.222365,-9.343926,-6.084533,-0.841128,-0.007181,7.268310,-8.043553],[1.764393,-5.385632,5.871421,-1.954655,0.548134,-1.885108,-8.246813],[-0.486119,2.665328,5.704942,2.548931,-1.391295,8.272443,-8.958300],[5.032429,6.696958,1.883886,-4.417078,-7.377222,6.679362,-0.528292],[-5.914771,-3.900268,0.352962,-8.290422,-1.892415,-8.386254,0.193114]],[[6.944117,1.885794,-5.959482,1.270157,-8.628097,8.717077,-3.842903],[4.386798,-9.498216,-2.227922,-2.731875,-4.493393,-6.538400,-2.586515],[-2.548344,-3.340583,3.458664,-7.522942,-6.486280,9.704025,0.734371],[-6.701308,-0.447392,-2.329804,0.234849,8.108046,-8.844896,-7.193431],[-3.249207,3.491217,-2.136191,-6.704284,1.388337,7.489298,-8.653509],[2.596126,5.051576,-7.265435,7.198425,-9.331206,8.470826,-6.288249],[-5.949197,-5.001568,3.786259,6.530590,7.805098,-4.807827,-9.734979],[-8.307956,-2.903215,-2.167736,3.303547,2.347592,1.518227,1.933115],[-1.612588,-1.716251,-2.289565,8.431931,-9.851471,7.551283,8.647144],[9.013313,-8.769189,-0.121262,4.633775,-0.282801,6.331690,0.064345],[-8.251661,5.413601,-4.661890,1.949934,-6.352943,-1.677163,9.169356],[-9.872769,1.348249,-6.573192,-3.144326,2.954112,3.148942,-6.949831],[0.377018,8.328016,3.501083,-1.010848,-5.064503,-8.818825,3.525947],[5.141580,7.100359,3.179819,6.703693,-9.626624,-2.921698,4.479693],[4.463388,2.789806,8.070944,-7.825171,3.313861,-7.009562,-3.858737]],[[4.916484,-1.463002,-6.733911,-7.278500,-6.578764,2.551748,0.129733],[-2.441882,5.950973,5.547650,6.466031,7.059493,2.394139,-1.946810],[-4.555289,-4.998334,-1.762869,4.504342,-7.301059,-8.516551,5.350495],[6.261630,-8.750281,-6.775481,-7.065361,-9.727784,-6.630847,9.201721],[-3.319339,-5.991393,6.323620,-0.980287,9.762353,-4.480739,-0.578643],[-2.840952,1.641508,-4.456612,-2.298521,9.404830,-4.001055,-5.587330],[-9.412441,-2.217538,6.459453,7.703089,-0.013538,9.346200,3.623344],[6.728586,-3.750508,-0.953608,-6.792829,3.275850,2.756475,9.811392],[-0.379308,-8.531343,9.112977,-0.309406,9.335508,0.802301,5.146975],[8.487780,8.289464,-3.511660,0.118321,8.667924,-0.145799,-2.723770],[0.742670,4.542207,0.244050,-2.966622,5.418501,9.539296,5.905102],[-4.250349,5.968369,2.521659,-3.792222,2.876981,-6.446088,5.825298],[8.559161,-7.966141,5.029237,2.469167,-5.275584,-4.078094,-5.667261],[-5.883087,-1.126496,-4.511177,6.761259,-9.675142,-0.054176,7.402188],[-5.561442,4.817002,-3.183912,0.555721,0.419971,-3.816554,-7.487725]],[[5.241658,-0.703616,-4.781585,-6.784081,1.521835,3.658024,-3.983777],[0.525877,-0.923084,-4.759751,5.858574,-5.435465,5.393352,5.279946],[5.773813,-2.929539,-3.093138,-4.979188,0.840067,-8.307437,-5.712975],[1.759999,4.661452,-0.850891,-4.095041,2.879011,9.567900,-3.110242],[8.834758,-3.946549,-7.968024,-8.828210,-1.163381,5.901494,4.540819],[-4.012370,2.862251,-4.430330,-2.641986,2.364571,-9.925637,-2.105762],[-9.461995,-4.232974,1.940082,-7.641732,7.618940,-9.900928,7.579633],[7.757289,8.634991,0.376574,7.702421,3.428665,-5.292567,6.342030],[7.803558,0.098155,-8.173290,-6.279463,-8.443481,5.941060,8.366291],[5.852105,-1.773994,5.875955,-5.352337,-6.205045,0.796153,5.421741],[-5.760596,-0.244509,3.468244,7.769294,8.863074,5.897246,-4.184564],[7.826966,-8.693736,7.912215,8.685996,5.741768,5.223353,-7.674536],[8.733094,-7.129647,-3.856434,-8.852981,-7.612315,8.808374,1.681410],[-9.664232,-0.184224,1.516277,-4.188771,6.186120,7.320395,-4.995926],[-4.284367,6.776375,-4.252668,-9.232471,-3.656109,-8.397834,-6.518020]],[[-0.232099,-4.395427,-8.473726,-0.655754,-9.878880,-2.556647,0.639099],[-4.583163,-7.883241,-9.249359,-9.757121,7.284340,1.324225,6.527834],[1.343961,8.651554,2.738200,-2.149980,-3.412038,4.195768,3.686182],[-4.335568,-7.917604,-0.203008,-1.103030,-0.171785,-3.612624,4.587472],[-2.930853,3.622210,-6.354360,9.543921,0.507695,4.209574,5.270701],[-5.873646,-6.712884,1.473815,9.388754,3.145541,-3.792441,-4.138333],[-3.513118,-1.592357,8.245757,-5.032780,-4.994607,9.684342,5.854638],[-9.810421,-2.847501,0.204165,7.015813,2.014659,3.679133,-0.526549],[-4.290114,-4.195682,-1.094927,1.849501,-7.306783,-9.529427,-4.292976],[-1.544753,-0.917426,-0.039132,3.561110,-2.660305,-2.622637,1.999998],[-3.183596,2.291796,6.773913,8.008908,-9.343082,7.213157,-1.539134],[8.722408,9.753731,-1.405705,-5.494673,-4.900485,3.209522,6.810589],[-3.094131,7.849570,-8.654895,-5.163055,-6.982813,-5.411264,-4.652192],[8.869325,0.661022,9.814971,1.598127,-2.681261,-6.273346,0.144177],[0.519765,8.760637,-6.794507,7.908617,9.095624,-1.274014,4.999471]],[[-4.564692,-3.334596,3.506986,6.269111,-7.115894,-8.436797,-1.951572],[-4.371720,-4.494316,-6.331601,2.517206,-0.990000,-1.359588,-1.445291],[8.742696,7.562969,-4.328205,-3.863587,5.937648,-9.763228,-4.688864],[-3.233932,-2.942132,-6.891151,8.796994,-3.499275,0.693530,0.398724],[7.140591,-9.237744,0.281709,-6.230873,0.298753,9.958814,-3.438471],[1.779940,5.041727,-6.562869,-8.010850,-3.683310,8.663715,-7.727661],[-2.248897,-0.638407,-9.150181,-4.704080,-0.585361,2.180966,2.594001],[-7.502492,-5.933569,-3.147763,-3.464037,1.510759,-6.734938,-8.190066],[5.955396,-0.526406,-3.783082,1.510165,-6.210841,-6.840455,-5.917817],[-4.820941,4.143979,-1.362370,-9.577007,5.795943,3.055826,3.499965],[-0.419757,4.369332,5.123267,3.420576,9.594649,-1.108558,8.249616],[-2.785663,-7.412507,4.716869,-5.650150,0.306608,6.023163,9.882472],[-8.826324,-4.460614,-0.101532,-3.192502,4.146046,8.102526,-4.243891],[-1.210908,-7.370636,5.199837,-5.781837,-4.196210,-6.728253,6.299323],[-6.507246,-4.251863,-9.513927,-0.893605,9.704743,-4.807694,-5.263135]],[[1.998192,5.678207,-9.504062,-3.265501,-9.018697,0.726517,6.414226],[-5.899706,8.326845,0.753286,7.744442,-9.636678,-7.603611,-0.502792],[-5.812733,-8.644604,1.552820,-8.937026,-0.312678,-2.089081,3.934261],[0.929014,8.480044,9.806182,7.915670,6.588586,-0.644010,-2.244242],[3.238625,8.501398,2.767222,1.885376,9.651683,0.148073,-6.512091],[-7.259434,3.551549,0.600046,-4.957836,9.909055,8.603172,-4.710897],[-6.993120,0.195027,-8.385300,8.163040,-0.359661,-7.313042,-3.567914],[8.719506,8.414332,-2.112355,-0.724743,-0.927996,8.668807,-8.341300],[-7.182748,-2.491774,7.938857,-4.454908,0.190281,7.350925,-5.232647],[5.667102,4.084035,3.427652,1.594326,3.219262,2.489138,-6.047190],[0.564403,-5.332576,5.849140,-6.537856,-9.704574,-1.121594,7.708988],[0.707166,-9.010132,-4.480067,-8.969736,-7.411450,-6.882023,0.809189],[6.637926,-4.438590,-1.775516,-7.974371,5.202130,-1.981221,0.193073],[2.008453,-4.794138,-6.668904,-0.973490,5.397232,9.075320,-2.843395],[0.709445,6.921250,2.955368,-8.720263,-1.922419,6.136569,4.058564]],[[2.966186,7.509854,9.890084,-6.537081,-7.244939,8.891371,6.559328],[7.145959,-9.295994,0.536076,-1.521957,7.551610,-0.759119,9.712916],[2.941135,9.913244,-4.895017,-4.666554,-3.386240,6.673098,1.088374],[-8.294780,8.219002,-1.286072,4.504327,-4.441296,-0.094764,-8.209052],[5.168351,-0.522167,-0.777797,-6.562351,-7.456013,1.409868,3.790948],[2.060268,8.726024,9.485994,-7.338674,-1.716713,4.221038,4.983991],[-1.043719,-3.699042,3.809888,-9.426754,-2.351815,-0.120837,3.053694],[6.669475,7.887630,2.377706,1.571974,4.618620,-7.403088,1.107250],[-9.177134,5.552004,-8.539777,4.505155,1.848680,2.534753,-2.299480],[-5.857635,3.660938,-6.510978,4.895834,1.702379,-3.247126,-6.915829],[-7.584935,-4.014380,-2.230550,1.348313,0.998858,-8.703596,5.660674],[-0.637425,-1.470750,0.945691,-2.129524,-9.597978,-2.877446,-5.710823],[-2.947740,9.895726,-2.815347,-7.871734,-4.332405,7.072367,-3.433225],[-5.415068,-0.359811,8.118451,0.568049,-3.417927,-6.694356,3.822664],[4.544926,5.109582,-0.570708,-7.051072,-6.785356,0.975962,3.112065]],[[-0.606748,1.672240,7.930833,1.835549,-6.574055,8.277126,-4.247729],[8.745115,-2.615494,-5.976655,-3.931120,8.077671,0.344274,4.235572],[-9.341749,-1.918969,-6.686247,9.475999,3.264656,-9.694044,4.650246],[-8.311311,1.135110,-8.528219,-5.593355,9.293116,3.688680,-7.402843],[-1.405336,-8.436258,-9.055656,8.989788,-3.882005,-5.829496,7.942501],[7.440810,-7.667007,4.630885,6.364079,-8.805313,-6.864784,-6.215066],[-4.233193,-6.440391,1.834848,4.910264,3.700788,-1.778439,0.583182],[3.740492,-7.637128,5.801887,7.129638,-6.395485,-1.995353,-0.158791],[9.966014,7.063562,7.671802,-5.252337,-8.624019,-3.701530,3.025034],[2.068404,7.202597,6.404995,3.934664,3.166356,9.306041,1.354827],[-4.113496,-5.738795,-3.983437,3.373341,-4.492111,-6.616802,2.264264],[-8.849076,-4.905107,9.129792,8.166709,7.293717,7.084715,9.959796],[-7.168661,0.967329,-1.819609,-5.739412,5.331779,1.695333,-0.575497],[-3.142802,-1.321106,-2.739820,-6.537735,0.275664,-0.728369,-2.975445],[5.787587,0.207618,-8.826624,-9.950760,-3.969268,5.225658,-7.573681]]], dtype = "float32")#candidate|93|(14, 15, 7)|const|float32
bop_94 = relay.power(const_85.astype('float64'), relay.reshape(const_93.astype('float64'), relay.shape_of(const_85))) # shape=(14, 15, 7)
uop_98 = relay.acosh(bop_87.astype('float32')) # shape=(14, 15, 7)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
var_102 = relay.var("var_102", dtype = "float32", shape = (63,))#candidate|102|(63,)|var|float32
call_101 = func_18_call(relay.reshape(var_102.astype('float32'), [9, 7]))
call_103 = func_18_call(relay.reshape(var_102.astype('float32'), [9, 7]))
bop_106 = relay.bitwise_xor(uop_98.astype('uint16'), relay.reshape(bop_94.astype('uint16'), relay.shape_of(uop_98))) # shape=(14, 15, 7)
uop_109 = relay.tan(uop_98.astype('float32')) # shape=(14, 15, 7)
bop_111 = relay.logical_xor(uop_109.astype('int32'), relay.reshape(const_93.astype('int32'), relay.shape_of(uop_109))) # shape=(14, 15, 7)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_114 = func_18_call(relay.reshape(call_101.astype('float32'), [9, 7]))
call_115 = func_18_call(relay.reshape(call_101.astype('float32'), [9, 7]))
bop_116 = relay.floor_mod(bop_111.astype('float32'), relay.reshape(const_85.astype('float32'), relay.shape_of(bop_111))) # shape=(14, 15, 7)
var_119 = relay.var("var_119", dtype = "uint16", shape = (14, 15, 7))#candidate|119|(14, 15, 7)|var|uint16
bop_120 = relay.bitwise_and(bop_106.astype('uint16'), relay.reshape(var_119.astype('uint16'), relay.shape_of(bop_106))) # shape=(14, 15, 7)
var_125 = relay.var("var_125", dtype = "float32", shape = (14, 15, 7))#candidate|125|(14, 15, 7)|var|float32
bop_126 = relay.right_shift(bop_116.astype('int64'), relay.reshape(var_125.astype('int64'), relay.shape_of(bop_116))) # shape=(14, 15, 7)
uop_130 = relay.asin(bop_116.astype('float64')) # shape=(14, 15, 7)
uop_132 = relay.log10(uop_109.astype('float32')) # shape=(14, 15, 7)
bop_134 = relay.subtract(uop_130.astype('float32'), relay.reshape(uop_132.astype('float32'), relay.shape_of(uop_130))) # shape=(14, 15, 7)
bop_137 = relay.less_equal(bop_87.astype('bool'), relay.reshape(uop_98.astype('bool'), relay.shape_of(bop_87))) # shape=(14, 15, 7)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_141 = func_18_call(relay.reshape(call_101.astype('float32'), [9, 7]))
call_142 = func_18_call(relay.reshape(call_101.astype('float32'), [9, 7]))
func_49_call = mod.get_global_var('func_49')
func_51_call = mutated_mod.get_global_var('func_51')
const_144 = relay.const([8.882529,-5.372614,3.675910,5.560336,1.080532,-3.681715,-0.004674,-4.809612,-3.723705,3.792257,8.561045,7.075120,2.672358,6.737890,-3.505797,-7.826651,-7.984501,6.647550,-0.477121,-6.113224,4.728487,9.131273,6.381508,-2.881997,-4.966937,-3.545052,-9.464416,4.621062,-2.795830,-7.328610,9.717557,-0.175966,8.932700,8.156978,9.701083,0.827487,8.715884,-9.861976,-1.988826,-8.409634,-8.194787,-1.467824,-2.605071,5.171540,9.891196,-6.785700,-8.367312,-2.499494,-1.732308,3.619516,-2.045279,7.312375,5.133698,-1.507343,-7.012608,-8.301167,7.066719,8.178424,6.833404,2.574176,-8.973414,1.442085,-1.800473,-3.218562,-4.458296,-6.097890,5.577768,-6.933726,-8.591170,-8.918394,5.891941,0.555428,-7.026093,5.798684,8.104264,-5.013313,-6.491948,-3.600357,5.640890,6.411141,-8.002010,-8.459123,0.123828,7.511532,9.842861,-5.045942,-4.912073,-4.478842,-9.768256,-6.864420,-9.445229,7.200655,1.395200,4.030382,9.397538,-7.301812,6.392179,5.458693,5.750700,-8.924002,-6.129827,7.607146,-3.931283,0.407382,1.191609,1.742570,-3.410806,-7.525178,-7.365918,0.630476,7.873463,-4.229014,-5.494613,2.723352,-6.815210,1.842343,7.757471,5.143790,-8.615538,-2.615027,3.408238,9.701350,4.818554,1.245083,9.603759,6.191211,-5.782165,3.893405,6.508108,-4.457202,-8.421709,-6.894959,-0.337881,-0.165635,6.677148,5.415073,-2.214659,-2.084309,-4.306607,9.239702,-5.690506,-1.908129,-2.322877,-3.485290,9.868778,5.025371,-7.011692,4.594234,-1.306689,1.770639,-7.025912,-9.404099,3.766021,-5.791191,-8.578333,3.581165,-2.366626,4.499251,-2.745309,-5.228180,-2.279807,3.050940,-1.671163,9.741257,-6.792658,-6.461750,6.258356,6.594952,7.826181,9.956953,-1.239690,0.354250,-0.433707,2.245942,-8.638562,-4.252490,-3.639117,1.367919,-6.976111,8.550430,7.289276,-0.849688,-2.753046,9.338231,5.286744,5.178480,0.535711,7.166219,6.651737,-3.359155,-4.931689,-5.378607,7.318834,4.199959,-9.789955,-4.744337,-8.782531,0.357964,5.398580,1.087886,2.815766,-1.917538,6.784308,-6.820787,-1.154165,-8.163201,-9.346838,1.510462,-7.265570,6.983345,4.499486,-7.340543,-9.294881,-7.427562,-9.492965,4.857984,-0.545727,-4.570327,8.725851,-8.650905,-4.407641,-8.627101,2.976960,-3.798923,2.513489,7.450203,9.477634,-6.064561,9.593429,3.302417,-5.410295,5.934415,-2.780981,-4.617038,-7.738716,-5.009752,1.936638,2.276142,-0.775876,-0.921950,-6.317350,0.099279,9.920303,2.907095,-2.920000,-8.511282,3.727042,-6.539430,-8.137744,5.381014,1.885236,7.582821,9.935144,-3.583645,-5.073738,8.285777,-5.175919,-0.760138,-1.026810,-8.611110,6.394856,-7.384692,-2.324256,-0.238703,2.056060,7.033949,3.682193,-3.699822,-8.249767,7.307843,7.669484,6.654032,0.616258,-6.646315,3.067605,-7.999058,1.331795,-0.488869,8.660458,-6.041128,-1.689901,-0.811110,-7.537058,-8.473600,4.000682,5.283289,-8.952968,-6.396424,6.536037,-3.264063,9.411592,0.009810,1.564520,-9.288572,-4.784151,8.325272,-5.222682,6.616390,-3.581246,0.541618,5.973532,3.269295,6.059465,2.392210,-7.519178,-6.924297,-8.826592,-1.735518,1.248488,9.900294,-8.714461,-3.489155,-6.388921,8.717144,-1.627732,-3.944149,-4.464360,5.363972,1.487108,-0.996061,-1.082530,1.121581,-0.525701,-6.889186,-6.309977,8.420223,7.269567,0.621280,7.251395,-7.288380,-2.367721,5.102905,-1.620937,-9.646088,9.918300,5.184287,9.883353,9.065435,5.274584,0.707227,1.223999,-2.837570,0.941418,-4.680206,-2.801400,-4.613155,2.840721,7.205047,-8.370046,9.924347,-5.091322,-0.376602,1.891257,9.036229,0.162697,-0.326799,-3.810225,3.869933,-3.362527,-9.315240,8.924623,5.138690,1.788313,-6.704559,7.684464,2.515918,7.487923,7.899870,9.481921,4.195087,-8.574557,8.616150,-7.603034,-2.744273,-0.344998,4.952951,3.631243,-9.721008,-1.205806,-5.262446,-4.020486,0.531292,1.686430,-7.545235,-5.014677,-9.123563,2.752114,5.882328,-4.230346,9.311223,-1.186689,-3.344972,3.520126,-7.199242,-4.783676,0.565390,5.185519,-2.030288,-1.496672,4.108902,-1.682343,1.421045,-0.261383,1.205206,-3.893018,4.850861,8.185313,-5.773707,5.435253,-5.765778,3.525811,-2.006911,6.090349,-1.070715,-1.468468,-8.436129,9.099804,-9.478266,-0.261780,-3.201078,-6.441626,7.878714,-5.013700,9.568687,0.221978,0.606546,8.736322,8.787761,-9.724655,-1.953503,0.977479,4.532453,-0.351635,-5.393703,6.637373,0.521116,7.851214,9.223976,-1.740795,0.120361,3.745269,4.804943,-4.467872,8.786743,-0.122112,8.330287,-7.005721,-1.642420,4.442434,7.649360,3.686769,-0.713553,6.236311,-9.230833,-1.697204,6.756810,-2.468824,8.552247,9.633007,3.689659,-4.375479,-1.819655,0.525338,-7.226238,1.600830,6.063340,-5.958748,6.262503,-6.242577,-9.810307,1.750688,-7.924999,-9.251002,9.674632,-1.512133,9.650114,7.872107,8.427435,-6.916144,4.738941,2.362615,-1.897248,5.303036,7.951871,-0.504789,-6.325849,-0.531428,5.028169,-8.287884,-8.145000,-9.756449,-9.327830,7.889123,-6.066953,7.251424,-2.289937,1.724270,-8.020873,-1.173007,-5.217906,8.700145,5.467367,0.643511,-4.534702], dtype = "float64")#candidate|144|(504,)|const|float64
call_143 = relay.TupleGetItem(func_49_call(relay.reshape(const_144.astype('float64'), [9, 7, 8])), 0)
call_145 = relay.TupleGetItem(func_51_call(relay.reshape(const_144.astype('float64'), [9, 7, 8])), 0)
bop_146 = relay.minimum(bop_116.astype('uint8'), relay.reshape(var_119.astype('uint8'), relay.shape_of(bop_116))) # shape=(14, 15, 7)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_153 = func_18_call(relay.reshape(call_141.astype('float32'), [9, 7]))
call_154 = func_18_call(relay.reshape(call_141.astype('float32'), [9, 7]))
var_155 = relay.var("var_155", dtype = "bool", shape = (14, 15, 7))#candidate|155|(14, 15, 7)|var|bool
bop_156 = relay.mod(bop_137.astype('float32'), relay.reshape(var_155.astype('float32'), relay.shape_of(bop_137))) # shape=(14, 15, 7)
output = relay.Tuple([bop_90,call_101,var_102,call_114,bop_120,bop_126,bop_134,call_141,call_143,const_144,bop_146,call_153,bop_156,])
output2 = relay.Tuple([bop_90,call_103,var_102,call_115,bop_120,bop_126,bop_134,call_142,call_145,const_144,bop_146,call_154,bop_156,])
func_160 = relay.Function([var_86,var_102,var_119,var_125,var_155,], output)
mod['func_160'] = func_160
mod = relay.transform.InferType()(mod)
var_161 = relay.var("var_161", dtype = "float32", shape = (14, 15, 7))#candidate|161|(14, 15, 7)|var|float32
var_162 = relay.var("var_162", dtype = "float32", shape = (63,))#candidate|162|(63,)|var|float32
var_163 = relay.var("var_163", dtype = "uint16", shape = (14, 15, 7))#candidate|163|(14, 15, 7)|var|uint16
var_164 = relay.var("var_164", dtype = "float32", shape = (14, 15, 7))#candidate|164|(14, 15, 7)|var|float32
var_165 = relay.var("var_165", dtype = "bool", shape = (14, 15, 7))#candidate|165|(14, 15, 7)|var|bool
output = func_160(var_161,var_162,var_163,var_164,var_165,)
func_166 = relay.Function([var_161,var_162,var_163,var_164,var_165,], output)
mutated_mod['func_166'] = func_166
mutated_mod = relay.transform.InferType()(mutated_mod)
var_181 = relay.var("var_181", dtype = "int32", shape = (7, 14))#candidate|181|(7, 14)|var|int32
var_182 = relay.var("var_182", dtype = "int32", shape = (7, 14))#candidate|182|(7, 14)|var|int32
bop_183 = relay.left_shift(var_181.astype('int32'), relay.reshape(var_182.astype('int32'), relay.shape_of(var_181))) # shape=(7, 14)
bop_186 = relay.greater(var_182.astype('bool'), relay.reshape(var_181.astype('bool'), relay.shape_of(var_182))) # shape=(7, 14)
func_160_call = mod.get_global_var('func_160')
func_166_call = mutated_mod.get_global_var('func_166')
const_190 = relay.const([[2.426151,1.818511,4.343700,3.785932,-4.938735,-5.625538,-8.543535,-1.215965,9.820249,-7.817496,-9.283227,3.203729,-4.097135,-2.272966,2.427598,9.165565,-2.480405,-1.232168,4.332004,-8.479286,-4.129789,-3.974409,2.053898,-3.200197,4.812098,-1.159532,1.848315,-7.969502,-5.405068,-7.073643,-1.387322,3.703285,-0.569785,-1.064132,1.359963,8.425082,2.338571,-5.285904,7.959321,-8.303406,-1.902639,-5.488349,-9.281652,6.052950,-8.189741,-1.340404,-3.520235,0.663900,-0.176975,-2.066538,-7.006300,0.668784,4.507256,-2.618818,-4.607488,-7.720444,6.527345,-6.229362,3.436366,9.814718,-5.556404,-2.740785,6.725585,0.101225,3.602761,1.158170,-7.435288,-4.151013,3.932798,-9.544797,9.844690,-4.990788,4.091373,-8.277005,-1.577046,-5.668616,-7.955752,8.759448,-1.321799,6.399213,0.243557,1.097191,2.273524,3.163548,8.676462,-3.178692,-3.457494,1.975824,8.106773,0.918673,6.098969,-9.517389,-5.421804,5.279320,9.856362,0.478546,-6.089393,-3.520220,-9.573363,-1.109203,3.787992,-6.695399,3.515816,8.835511,9.934628,-6.482245,0.339750,-6.527194,6.831914,-1.357329,-9.079183,2.648123,3.976769,-6.862739,7.191058,8.085416,2.910874,0.678602,8.904801,-8.085685,5.187012,-6.237026,2.149563,-0.720669,-0.594981,7.211635,-2.613525,5.638421,-6.800007,6.696238,-6.778597,-4.519838,-8.365247,-8.502265,0.683417,0.696134,-9.595332,8.382708,-0.418608,-1.583751,-0.689040,-2.518364,-8.160581,-3.702387,0.934486,-5.351679,-1.373220,-1.131450,-8.549859,1.522338,1.801498,-1.383109,-2.968166,0.116464,-2.383501,5.389755,-2.633571,5.527070,-5.007735,0.561529,-2.306978,9.938290,4.266654,4.951567,9.992974,4.199391,4.423976,-0.601186,5.100485,1.141531,8.660981,-0.808080,-7.941229,-6.026682,-5.941859,-8.058801,2.533012,1.862105,6.296666,9.592128,3.690405,8.223543,-7.719529,-8.054585,-1.072351,3.353732,4.856758,3.305803,-7.841623,-5.704605,1.720807,0.560185,-2.936595,0.353015,1.756639,-4.632933,1.529354,-6.575151,2.668777,3.041816,-5.224848,3.302711,0.099437,8.194363,-1.890162,-2.104104,-1.472835,1.120657,-3.410421,4.665143],[6.533877,5.965778,2.816743,-8.328558,-9.805951,-8.239333,3.694008,-7.827875,-5.678673,-3.035997,0.358323,0.854691,-2.796597,1.788072,8.982421,-6.479973,-5.458498,-7.187741,6.880409,5.396418,-3.455867,-9.939921,4.234678,-6.817833,-7.679124,9.661434,3.552596,-3.734761,9.885009,5.176256,-9.963490,6.834155,8.450136,-2.352465,-2.755148,-5.752952,-1.598847,-6.109352,-7.191101,8.308480,3.067029,-3.892820,4.730238,-3.792498,-1.513530,-1.190618,-3.504901,-3.782941,1.048517,-4.816557,-3.814118,-1.520088,-8.736133,-1.392893,-3.176108,6.513566,-4.299803,-0.167119,-0.288769,-8.338104,-4.494306,6.143253,-3.772213,-9.543418,5.339978,-2.506654,-0.603929,-4.342641,4.882914,0.703732,-7.648176,-0.815933,-8.552503,5.540055,0.622423,-7.496087,-1.830247,-0.558906,5.598790,-5.783001,-7.561910,-6.323157,4.621149,0.288358,7.439205,-4.670594,4.668057,4.756056,-2.221359,4.553746,-7.823772,1.846248,5.399718,-0.334788,1.054215,3.569006,3.647130,-6.551242,-5.693249,0.647141,-3.690523,-1.085142,-1.665913,3.316708,-2.759057,9.023953,-1.557401,2.411712,-2.303078,-8.708741,-9.898023,0.806801,1.109940,-0.692401,9.046386,-0.343197,-5.827362,-4.042505,-6.060917,0.921265,-4.279903,3.044042,0.789708,-0.185288,-9.257241,1.450604,3.305599,-9.664691,-0.949929,-6.989584,0.798950,1.384968,7.692334,-2.726870,-1.836313,-3.411571,-4.020358,4.184182,-6.096969,-3.428850,7.290080,7.648622,-9.455655,4.757779,5.626505,2.972810,-3.263868,-9.764638,-6.256819,6.036072,-0.962495,8.189383,-0.113977,-1.930314,-9.513025,2.828844,3.123356,-2.702690,5.590758,-8.431535,-7.386083,5.359509,1.157151,-7.492873,-4.554609,-2.888716,-5.804187,-4.741186,-7.244270,0.179738,5.140114,-9.813486,-0.044160,-9.029767,5.376537,-7.392775,-9.587563,-7.186564,2.102778,6.023660,7.701319,-3.187490,7.135770,-8.851293,8.411319,4.494390,-1.196769,7.048120,-2.688672,-0.674079,1.868848,5.384498,-4.617415,8.116268,3.006422,-3.690768,-0.911799,-2.018389,3.944016,4.747211,-3.972419,1.711859,2.238043,5.103711,-4.221397,1.248243,-9.917996,-4.844053,-0.242374,-0.150609],[-7.917477,-2.130384,4.681901,0.096285,1.436001,-0.163086,3.274762,0.096462,-9.797500,-6.188271,-3.997912,-2.019313,7.662735,-7.789453,-1.172307,1.840768,8.792532,3.659786,-8.753061,0.715476,-2.419489,0.435643,6.392895,-4.138232,-6.889136,-9.545499,-7.225074,0.766016,5.806432,9.852049,7.993613,7.689660,0.352654,0.765643,7.831786,0.104247,-0.675611,7.220798,2.860794,-2.393217,-0.937810,3.326697,3.311296,-0.188662,-8.973570,9.194301,-3.231713,-9.575918,4.704031,0.645409,-7.979598,-1.634901,-8.449948,-0.442705,9.099152,8.065925,1.697408,-2.891033,6.900978,-6.418680,0.982831,0.870094,-0.172592,5.893074,-5.387848,-5.864472,8.503811,7.310646,-4.106943,-7.607396,-6.621905,4.399007,-9.843092,4.076096,0.468970,7.756711,0.828281,-2.200192,-8.572904,5.173243,7.837179,5.768861,5.408815,-2.352210,-1.890660,2.677345,-9.085992,-5.529782,2.161530,-5.429737,5.714158,5.632655,5.630334,-1.260718,7.194740,-5.302433,8.516214,2.336466,-6.941373,-6.625603,-9.959341,-7.366210,1.206131,8.746248,-0.946179,5.895853,4.264715,-6.905964,-4.852734,-9.555811,-8.040282,-6.624915,-0.725875,-9.645659,3.116502,9.440810,9.569832,-2.931456,5.063074,5.935811,-3.735500,1.633172,9.834896,-1.645190,9.910490,9.498675,2.868806,5.788598,2.403137,-5.283532,2.376337,8.817417,5.697702,1.796251,0.342839,-3.282892,5.350841,-7.940047,7.999275,-7.889121,4.303545,1.464364,-2.520787,6.845385,-0.543485,-0.701368,3.446922,-0.017687,-5.109558,9.312151,-7.483607,7.330982,-7.957657,-1.343972,-5.484792,-4.585457,-3.064050,-9.989131,-8.088619,9.235598,3.530336,-4.582771,3.636880,-1.847917,-6.471292,3.513544,8.481438,-1.775313,-3.921602,-0.604965,-8.156592,4.806192,-4.186015,9.816628,0.180746,6.456260,-3.114225,7.564667,9.997248,4.109020,-5.271180,-0.762953,3.963311,6.183699,-3.242030,-8.805370,-0.052101,5.414811,3.865181,1.255619,2.402545,-2.521663,6.066253,4.239411,5.358577,-7.649380,-0.252409,3.855201,-6.224905,6.406907,-3.142785,5.250990,5.781158,7.879402,6.141091,3.177749,-5.356427,-1.181011,-1.105144,-1.238632],[6.644360,7.123967,0.657491,8.117978,1.496306,-7.235005,6.064928,-8.572936,9.006535,2.090701,-2.136887,5.843517,-6.338578,-5.543099,-7.481015,-4.781050,-1.220836,0.759722,4.633499,9.517138,7.770676,-7.768880,8.660008,-2.141918,3.701348,0.090828,-8.695539,-6.292777,-4.517159,0.956491,6.048243,-0.969084,4.467952,9.706969,5.395866,8.146622,4.339613,1.168053,-4.386315,5.678406,3.798335,-0.954217,0.238288,1.127587,4.870935,-0.243658,-5.945826,-4.415758,-4.156846,-8.518142,-7.410367,6.212040,-0.761390,-6.032175,-6.738649,-4.977737,-7.749989,9.081999,5.069787,-9.629331,-9.706787,2.726084,3.309198,-6.006002,3.317395,7.496872,6.065706,3.487401,2.182469,-6.464061,9.225848,-3.885258,8.358284,-4.115765,-4.130084,-5.172474,6.603755,5.025409,6.534392,2.945949,0.906254,7.012090,3.966856,-1.561449,-5.143819,-2.029587,7.194352,-9.320085,-5.300479,2.337611,9.766771,7.734728,7.397476,8.897273,1.223994,3.850567,-8.073387,3.754425,-9.028014,-3.208760,-7.490351,-8.924031,6.815706,0.005843,1.112964,-2.845810,-0.264953,-3.804313,1.338313,-2.726655,-6.576599,4.144585,-8.650944,-3.042362,-4.603299,-3.638853,6.298519,-6.657076,2.342975,-2.955675,-2.525084,3.986059,9.277029,-6.121915,9.207249,0.892879,-2.832229,-6.554622,4.720341,0.114052,-6.258249,-7.966910,6.232298,-0.122065,-4.106206,0.320697,-2.510540,7.809886,-1.000514,-5.290933,5.351902,0.482315,-9.120981,-3.627966,-7.808598,6.746542,5.114417,-3.826123,-7.666271,8.513653,-6.944172,1.606609,9.583025,-0.123884,-6.212653,-8.942027,-8.709598,1.748599,5.916610,-6.085267,-8.031118,-1.754361,0.796625,-3.651192,-8.860662,7.455180,-3.113184,6.379995,6.944226,-4.787105,-7.904606,0.995369,-1.816182,9.159931,7.575032,-9.958873,3.518774,5.355375,7.483098,-1.790113,-6.733680,-3.836322,-9.719389,-2.141838,3.153267,0.968325,2.913630,-0.594692,0.648122,-8.547400,8.445408,-7.012594,0.878059,-1.486364,1.667953,-8.453048,-9.568162,5.918414,-0.838174,-1.021820,-8.969591,0.694589,9.717733,4.448933,2.917886,8.878591,-1.674053,3.723930,3.607951,5.549458],[-7.018953,-7.112865,-2.733339,1.270952,-1.689619,7.361671,1.743829,-5.146256,-1.600972,-6.427833,9.691017,3.549782,7.609001,-3.197472,-9.882331,-5.651855,9.589397,5.156109,-3.415078,3.499426,-7.143649,1.194871,1.498266,-6.682172,3.931536,-4.082803,-7.394204,2.589731,-1.708281,6.212148,1.442901,-1.487475,-6.409315,-9.991928,-8.650741,0.282587,-1.532224,1.335581,7.628365,-3.277337,-5.332676,8.690747,-4.568293,-8.827657,-0.210225,1.845663,9.389369,7.803671,0.967766,-7.459909,0.839285,-7.107195,-6.134111,9.439387,-6.025734,4.195360,-2.704071,3.354425,6.473080,-5.638802,6.063654,5.927124,4.353407,3.610511,-3.010683,-8.694350,3.286145,-7.366906,-5.607317,4.908060,7.456421,2.044095,-2.976333,-4.339040,0.778364,5.927713,-7.581681,6.966891,6.703039,-6.759130,7.117351,4.938266,3.328060,-3.213164,-2.535194,-5.016711,-7.278285,8.340556,6.465280,-3.575028,-9.263188,5.113773,-6.514639,-4.120557,2.425371,-4.383008,-5.048724,-5.185937,6.839230,4.191534,-9.231135,8.212942,-5.491522,8.380289,-8.211492,-6.272047,-3.247384,9.445969,-6.098740,-8.824414,-1.151397,-0.880596,2.724289,-0.717711,-9.782562,-6.420682,-2.435726,7.392539,-9.878747,-8.406581,9.129399,-2.784786,-1.764323,-0.335719,6.471660,8.637088,2.607712,-8.583878,-1.622921,1.675642,3.222825,3.663565,5.106220,-8.309003,-4.618371,-1.819017,9.743074,7.364420,-7.354541,-4.866462,-3.309549,1.403636,-6.423698,-3.767805,1.263491,8.393953,0.748650,-8.492464,0.940693,2.429626,8.915411,4.389670,-8.562587,-7.712855,8.253856,-5.158912,-8.016862,0.100394,-1.898690,6.953387,-6.447050,-2.096696,-8.813736,-6.805908,3.560147,5.477213,-4.681370,0.463784,9.321469,4.180952,-5.057719,-9.174127,-7.537935,6.085811,-7.376160,-4.106206,5.898524,-3.822160,7.543495,-1.552577,-7.964069,2.002278,-2.293012,0.663800,-9.514567,-5.776195,9.095432,-0.617741,3.551545,-4.481211,-7.326173,-0.702069,7.356515,5.368902,5.208039,5.412531,0.504517,-3.283189,3.700305,8.717994,3.762424,-6.094721,9.604209,-1.010198,0.150253,-6.975105,4.303707,5.479176,9.352400,9.855904],[-6.439494,2.176620,5.632088,-4.728301,4.843098,-5.054585,3.056383,1.729597,9.149006,7.636851,-7.831320,4.956332,-6.454848,-4.637161,3.782193,9.187286,-2.924859,-3.401481,-4.366002,-6.626015,-2.697624,-8.249721,-5.460695,-0.884641,4.191312,-3.564321,1.369416,7.723688,-9.536239,-0.512881,6.657660,-2.410254,-6.757416,7.159582,5.695485,-7.498432,6.475592,9.835966,2.787086,2.427026,-9.359364,-0.901205,6.560509,5.930214,-8.066625,-5.613290,0.297250,1.242463,4.958289,0.808220,2.657983,-6.720501,-6.195993,-6.293812,-9.649228,8.497164,2.109238,-3.889993,6.832564,-3.557769,5.324534,-9.677026,5.061077,-4.442282,-0.947417,8.589377,-4.018490,-2.272123,-0.777406,-2.982501,9.488056,1.455628,6.739651,1.227563,2.696192,-4.396313,-7.118484,-8.918275,7.232722,-4.284545,-1.398351,8.046747,-1.053972,8.281878,-9.587894,7.996426,8.424535,-4.851785,-6.132433,-6.440279,2.488180,3.116281,9.276556,-7.766534,-3.062442,-9.604873,-8.003896,3.442048,-5.396631,4.351370,-2.842281,-1.392119,4.016782,3.931729,-5.085396,-4.249261,-6.372916,-1.783401,5.310069,-2.316901,2.974266,-9.089036,-4.655753,-1.790432,-5.888627,6.682528,-0.721888,1.026912,-9.684243,-3.528553,-0.720914,5.931642,-1.526629,-8.026108,-8.431968,9.890167,1.057241,3.445739,-0.194566,-2.408317,-0.990163,7.507225,4.171471,-4.424184,1.924889,1.862585,0.721747,6.659081,-4.401256,7.606527,-4.749500,-9.682924,-8.582317,-3.224488,-7.823221,-7.841482,-0.982293,0.069036,-2.970523,-7.114363,-0.696897,5.360209,-8.140174,5.167350,-6.765360,7.962600,-7.203766,-7.921316,0.992826,9.097432,-7.080313,-8.472374,4.891033,-3.666807,-4.495605,-2.064967,-6.951810,-3.560937,-9.524628,8.102985,8.564977,2.466668,0.357241,-9.669057,-5.995120,-5.158304,2.571261,-1.440086,-5.942169,-6.771483,3.448610,-3.395562,-9.500182,-1.693480,-3.837631,6.584417,-0.184624,0.431853,9.680169,-3.906196,3.256767,-5.161291,-7.932935,-1.207111,2.980666,6.595134,5.451606,4.824057,-1.953484,-4.891967,3.711250,-7.046558,-1.095595,2.058113,-7.906092,-2.474896,-9.609866,-1.641441,0.489144,-4.362270],[-1.992165,8.197006,9.149878,0.849313,-2.856410,-6.266752,-1.896959,9.693068,6.442820,-1.023919,-0.726515,9.369668,5.913694,0.241385,-6.161694,9.464569,4.467140,-9.432738,3.194250,3.849382,8.777755,-1.619289,-2.216246,1.815237,-3.045086,2.151342,-4.575173,-4.631882,5.902572,-6.554612,6.911786,-1.995700,-2.185831,3.115658,-4.201924,9.113935,-3.394253,7.224199,4.413410,-6.518819,-2.488330,-9.635437,5.705797,-1.457501,5.799214,-8.955708,0.982800,0.771875,-0.809052,1.819825,3.853669,-4.314704,-1.137979,2.052647,-2.621692,-7.363280,2.862953,9.228876,5.485469,3.050605,-8.549683,0.812382,-8.035116,0.562099,0.679379,-2.401878,1.955589,-6.869733,-2.872704,8.456980,-8.606357,-1.193652,7.904766,-5.408237,5.063962,4.648291,3.500890,5.164227,2.685911,-7.987680,-9.034428,-4.192420,-4.378763,9.892531,-3.272669,0.019065,-3.100695,-1.393300,-6.000379,-5.321685,1.693472,6.105903,-3.792900,-8.946784,-9.156525,-0.523971,9.404702,-4.665605,-1.986183,6.348006,4.110334,3.117595,-3.313160,7.569671,-2.314359,-4.867369,9.916991,-3.639061,5.251917,7.950067,-0.482264,-5.239971,-3.332700,5.552996,-7.337102,0.419464,3.889273,-9.052681,0.963156,-3.304205,4.710538,5.489729,4.165838,4.210784,-6.347286,-9.918873,-2.162296,8.166463,2.009431,2.450944,1.007215,7.464784,7.500349,-1.202194,8.733437,-2.435707,5.359476,3.985947,-1.142660,5.174553,-9.398639,0.040583,-8.261481,4.349361,9.449676,-5.944068,-8.376782,8.215405,7.450154,-6.999808,7.688743,0.527570,-2.368019,7.878040,3.294175,9.324172,-7.779227,2.827396,5.754949,-1.398074,7.235581,5.277761,7.764559,-8.762701,-8.928921,5.769045,7.546472,3.369529,-1.104731,-3.117671,7.121615,6.414615,-8.475291,1.945884,5.311910,-0.226307,-9.125837,-0.930840,1.459319,-8.830227,0.484678,0.391106,-1.505567,-8.049464,6.668000,3.512641,0.019464,-6.825852,5.169043,8.364651,0.266551,0.627760,-3.034696,0.473833,-5.091207,3.931664,-9.353445,7.204258,5.069496,9.695820,-7.742640,-9.672911,2.951319,-3.832012,-5.095349,4.309019,1.811260,7.044788,9.563588,0.376867]], dtype = "float32")#candidate|190|(7, 210)|const|float32
var_191 = relay.var("var_191", dtype = "float32", shape = (63,))#candidate|191|(63,)|var|float32
call_189 = relay.TupleGetItem(func_160_call(relay.reshape(const_190.astype('float32'), [14, 15, 7]), relay.reshape(var_191.astype('float32'), [63,]), relay.reshape(const_190.astype('uint16'), [14, 15, 7]), relay.reshape(const_190.astype('float32'), [14, 15, 7]), relay.reshape(const_190.astype('bool'), [14, 15, 7]), ), 10)
call_192 = relay.TupleGetItem(func_166_call(relay.reshape(const_190.astype('float32'), [14, 15, 7]), relay.reshape(var_191.astype('float32'), [63,]), relay.reshape(const_190.astype('uint16'), [14, 15, 7]), relay.reshape(const_190.astype('float32'), [14, 15, 7]), relay.reshape(const_190.astype('bool'), [14, 15, 7]), ), 10)
func_18_call = mod.get_global_var('func_18')
func_21_call = mutated_mod.get_global_var('func_21')
call_195 = func_18_call(relay.reshape(var_191.astype('float32'), [9, 7]))
call_196 = func_18_call(relay.reshape(var_191.astype('float32'), [9, 7]))
bop_197 = relay.add(var_181.astype('uint64'), relay.reshape(bop_186.astype('uint64'), relay.shape_of(var_181))) # shape=(7, 14)
bop_200 = relay.subtract(bop_183.astype('uint64'), relay.reshape(var_181.astype('uint64'), relay.shape_of(bop_183))) # shape=(7, 14)
bop_203 = relay.add(bop_197.astype('float64'), relay.reshape(bop_200.astype('float64'), relay.shape_of(bop_197))) # shape=(7, 14)
bop_206 = relay.maximum(bop_186.astype('uint8'), relay.reshape(var_182.astype('uint8'), relay.shape_of(bop_186))) # shape=(7, 14)
func_49_call = mod.get_global_var('func_49')
func_51_call = mutated_mod.get_global_var('func_51')
var_210 = relay.var("var_210", dtype = "float64", shape = (504,))#candidate|210|(504,)|var|float64
call_209 = relay.TupleGetItem(func_49_call(relay.reshape(var_210.astype('float64'), [9, 7, 8])), 0)
call_211 = relay.TupleGetItem(func_51_call(relay.reshape(var_210.astype('float64'), [9, 7, 8])), 0)
uop_212 = relay.acosh(var_182.astype('float32')) # shape=(7, 14)
bop_214 = relay.equal(uop_212.astype('bool'), relay.reshape(bop_197.astype('bool'), relay.shape_of(uop_212))) # shape=(7, 14)
uop_217 = relay.rsqrt(bop_214.astype('float64')) # shape=(7, 14)
output = relay.Tuple([call_189,const_190,var_191,call_195,bop_203,bop_206,call_209,var_210,uop_217,])
output2 = relay.Tuple([call_192,const_190,var_191,call_196,bop_203,bop_206,call_211,var_210,uop_217,])
func_224 = relay.Function([var_181,var_182,var_191,var_210,], output)
mod['func_224'] = func_224
mod = relay.transform.InferType()(mod)
mutated_mod['func_224'] = func_224
mutated_mod = relay.transform.InferType()(mutated_mod)
func_224_call = mutated_mod.get_global_var('func_224')
var_226 = relay.var("var_226", dtype = "int32", shape = (7, 14))#candidate|226|(7, 14)|var|int32
var_227 = relay.var("var_227", dtype = "int32", shape = (7, 14))#candidate|227|(7, 14)|var|int32
var_228 = relay.var("var_228", dtype = "float32", shape = (63,))#candidate|228|(63,)|var|float32
var_229 = relay.var("var_229", dtype = "float64", shape = (504,))#candidate|229|(504,)|var|float64
call_225 = func_224_call(var_226,var_227,var_228,var_229,)
output = call_225
func_230 = relay.Function([var_226,var_227,var_228,var_229,], output)
mutated_mod['func_230'] = func_230
mutated_mod = relay.transform.InferType()(mutated_mod)
var_246 = relay.var("var_246", dtype = "float64", shape = (5,))#candidate|246|(5,)|var|float64
var_247 = relay.var("var_247", dtype = "float64", shape = (5,))#candidate|247|(5,)|var|float64
bop_248 = relay.mod(var_246.astype('float64'), relay.reshape(var_247.astype('float64'), relay.shape_of(var_246))) # shape=(5,)
bop_251 = relay.subtract(bop_248.astype('uint64'), relay.reshape(var_247.astype('uint64'), relay.shape_of(bop_248))) # shape=(5,)
func_49_call = mod.get_global_var('func_49')
func_51_call = mutated_mod.get_global_var('func_51')
var_255 = relay.var("var_255", dtype = "float64", shape = (252, 2))#candidate|255|(252, 2)|var|float64
call_254 = relay.TupleGetItem(func_49_call(relay.reshape(var_255.astype('float64'), [9, 7, 8])), 1)
call_256 = relay.TupleGetItem(func_51_call(relay.reshape(var_255.astype('float64'), [9, 7, 8])), 1)
bop_258 = relay.power(bop_251.astype('float64'), relay.reshape(var_246.astype('float64'), relay.shape_of(bop_251))) # shape=(5,)
output = relay.Tuple([call_254,var_255,bop_258,])
output2 = relay.Tuple([call_256,var_255,bop_258,])
func_261 = relay.Function([var_246,var_247,var_255,], output)
mod['func_261'] = func_261
mod = relay.transform.InferType()(mod)
var_262 = relay.var("var_262", dtype = "float64", shape = (5,))#candidate|262|(5,)|var|float64
var_263 = relay.var("var_263", dtype = "float64", shape = (5,))#candidate|263|(5,)|var|float64
var_264 = relay.var("var_264", dtype = "float64", shape = (252, 2))#candidate|264|(252, 2)|var|float64
output = func_261(var_262,var_263,var_264,)
func_265 = relay.Function([var_262,var_263,var_264,], output)
mutated_mod['func_265'] = func_265
mutated_mod = relay.transform.InferType()(mutated_mod)
const_281 = relay.const([-1,-7,2,-8,-4,-5,-1,-3,9,-8,5,3,6,10,-10,-3], dtype = "uint16")#candidate|281|(16,)|const|uint16
var_282 = relay.var("var_282", dtype = "uint16", shape = (16,))#candidate|282|(16,)|var|uint16
bop_283 = relay.add(const_281.astype('uint16'), relay.reshape(var_282.astype('uint16'), relay.shape_of(const_281))) # shape=(16,)
bop_286 = relay.add(const_281.astype('int16'), relay.reshape(var_282.astype('int16'), relay.shape_of(const_281))) # shape=(16,)
uop_289 = relay.atan(var_282.astype('float32')) # shape=(16,)
uop_291 = relay.erf(uop_289.astype('float32')) # shape=(16,)
func_261_call = mod.get_global_var('func_261')
func_265_call = mutated_mod.get_global_var('func_265')
var_294 = relay.var("var_294", dtype = "float64", shape = (5,))#candidate|294|(5,)|var|float64
var_295 = relay.var("var_295", dtype = "float64", shape = (36, 14))#candidate|295|(36, 14)|var|float64
call_293 = relay.TupleGetItem(func_261_call(relay.reshape(var_294.astype('float64'), [5,]), relay.reshape(var_294.astype('float64'), [5,]), relay.reshape(var_295.astype('float64'), [252, 2]), ), 2)
call_296 = relay.TupleGetItem(func_265_call(relay.reshape(var_294.astype('float64'), [5,]), relay.reshape(var_294.astype('float64'), [5,]), relay.reshape(var_295.astype('float64'), [252, 2]), ), 2)
func_224_call = mod.get_global_var('func_224')
func_230_call = mutated_mod.get_global_var('func_230')
const_300 = relay.const([-10,4,1,2,-1,-4,7,8,-10,-3,1,-1,-8,-9,2,-7,-1,6,5,7,-6,6,5,-3,4,-9,6,10,-9,-10,-3,3,-8,-7,4,-8,7,4,-7,-6,2,10,7,1,-8,-7,8,6,-7,-10,7,3,-1,5,-3,2,6,3,-9,1,5,-10,-8,-10,7,7,-7,5,7,-7,1,-4,-1,-4,3,-8,5,-5,4,7,-5,-3,-5,2,10,-2,9,2,5,10,1,-10,8,1,-9,1,-5,8], dtype = "int32")#candidate|300|(98,)|const|int32
var_301 = relay.var("var_301", dtype = "float32", shape = (63,))#candidate|301|(63,)|var|float32
call_299 = relay.TupleGetItem(func_224_call(relay.reshape(const_300.astype('int32'), [7, 14]), relay.reshape(const_300.astype('int32'), [7, 14]), relay.reshape(var_301.astype('float32'), [63,]), relay.reshape(var_295.astype('float64'), [504,]), ), 8)
call_302 = relay.TupleGetItem(func_230_call(relay.reshape(const_300.astype('int32'), [7, 14]), relay.reshape(const_300.astype('int32'), [7, 14]), relay.reshape(var_301.astype('float32'), [63,]), relay.reshape(var_295.astype('float64'), [504,]), ), 8)
var_304 = relay.var("var_304", dtype = "float32", shape = (16,))#candidate|304|(16,)|var|float32
bop_305 = relay.logical_and(uop_291.astype('bool'), relay.reshape(var_304.astype('bool'), relay.shape_of(uop_291))) # shape=(16,)
uop_311 = relay.cos(uop_289.astype('float32')) # shape=(16,)
func_160_call = mod.get_global_var('func_160')
func_166_call = mutated_mod.get_global_var('func_166')
var_315 = relay.var("var_315", dtype = "float32", shape = (1470,))#candidate|315|(1470,)|var|float32
call_314 = relay.TupleGetItem(func_160_call(relay.reshape(var_315.astype('float32'), [14, 15, 7]), relay.reshape(var_301.astype('float32'), [63,]), relay.reshape(var_315.astype('uint16'), [14, 15, 7]), relay.reshape(var_315.astype('float32'), [14, 15, 7]), relay.reshape(var_315.astype('bool'), [14, 15, 7]), ), 5)
call_316 = relay.TupleGetItem(func_166_call(relay.reshape(var_315.astype('float32'), [14, 15, 7]), relay.reshape(var_301.astype('float32'), [63,]), relay.reshape(var_315.astype('uint16'), [14, 15, 7]), relay.reshape(var_315.astype('float32'), [14, 15, 7]), relay.reshape(var_315.astype('bool'), [14, 15, 7]), ), 5)
func_160_call = mod.get_global_var('func_160')
func_166_call = mutated_mod.get_global_var('func_166')
call_317 = relay.TupleGetItem(func_160_call(relay.reshape(var_315.astype('float32'), [14, 15, 7]), relay.reshape(var_301.astype('float32'), [63,]), relay.reshape(call_314.astype('uint16'), [14, 15, 7]), relay.reshape(call_314.astype('float32'), [14, 15, 7]), relay.reshape(call_314.astype('bool'), [14, 15, 7]), ), 10)
call_318 = relay.TupleGetItem(func_166_call(relay.reshape(var_315.astype('float32'), [14, 15, 7]), relay.reshape(var_301.astype('float32'), [63,]), relay.reshape(call_314.astype('uint16'), [14, 15, 7]), relay.reshape(call_314.astype('float32'), [14, 15, 7]), relay.reshape(call_314.astype('bool'), [14, 15, 7]), ), 10)
uop_320 = relay.sin(uop_291.astype('float32')) # shape=(16,)
bop_322 = relay.not_equal(bop_305.astype('bool'), relay.reshape(uop_311.astype('bool'), relay.shape_of(bop_305))) # shape=(16,)
uop_325 = relay.log10(uop_320.astype('float32')) # shape=(16,)
uop_331 = relay.rsqrt(uop_320.astype('float64')) # shape=(16,)
var_334 = relay.var("var_334", dtype = "float32", shape = (16,))#candidate|334|(16,)|var|float32
bop_335 = relay.logical_or(uop_320.astype('bool'), relay.reshape(var_334.astype('bool'), relay.shape_of(uop_320))) # shape=(16,)
output = relay.Tuple([bop_283,bop_286,call_293,var_294,var_295,call_299,const_300,var_301,call_314,var_315,call_317,bop_322,uop_325,uop_331,bop_335,])
output2 = relay.Tuple([bop_283,bop_286,call_296,var_294,var_295,call_302,const_300,var_301,call_316,var_315,call_318,bop_322,uop_325,uop_331,bop_335,])
func_340 = relay.Function([var_282,var_294,var_295,var_301,var_304,var_315,var_334,], output)
mod['func_340'] = func_340
mod = relay.transform.InferType()(mod)
var_341 = relay.var("var_341", dtype = "uint16", shape = (16,))#candidate|341|(16,)|var|uint16
var_342 = relay.var("var_342", dtype = "float64", shape = (5,))#candidate|342|(5,)|var|float64
var_343 = relay.var("var_343", dtype = "float64", shape = (36, 14))#candidate|343|(36, 14)|var|float64
var_344 = relay.var("var_344", dtype = "float32", shape = (63,))#candidate|344|(63,)|var|float32
var_345 = relay.var("var_345", dtype = "float32", shape = (16,))#candidate|345|(16,)|var|float32
var_346 = relay.var("var_346", dtype = "float32", shape = (1470,))#candidate|346|(1470,)|var|float32
var_347 = relay.var("var_347", dtype = "float32", shape = (16,))#candidate|347|(16,)|var|float32
output = func_340(var_341,var_342,var_343,var_344,var_345,var_346,var_347,)
func_348 = relay.Function([var_341,var_342,var_343,var_344,var_345,var_346,var_347,], output)
mutated_mod['func_348'] = func_348
mutated_mod = relay.transform.InferType()(mutated_mod)
var_350 = relay.var("var_350", dtype = "int64", shape = ())#candidate|350|()|var|int64
var_351 = relay.var("var_351", dtype = "int64", shape = (5, 11, 15))#candidate|351|(5, 11, 15)|var|int64
bop_352 = relay.logical_xor(var_350.astype('int64'), var_351.astype('int64')) # shape=(5, 11, 15)
uop_362 = relay.tan(bop_352.astype('float32')) # shape=(5, 11, 15)
output = uop_362
output2 = uop_362
func_364 = relay.Function([var_350,var_351,], output)
mod['func_364'] = func_364
mod = relay.transform.InferType()(mod)
mutated_mod['func_364'] = func_364
mutated_mod = relay.transform.InferType()(mutated_mod)
func_364_call = mutated_mod.get_global_var('func_364')
var_366 = relay.var("var_366", dtype = "int64", shape = ())#candidate|366|()|var|int64
var_367 = relay.var("var_367", dtype = "int64", shape = (5, 11, 15))#candidate|367|(5, 11, 15)|var|int64
call_365 = func_364_call(var_366,var_367,)
output = call_365
func_368 = relay.Function([var_366,var_367,], output)
mutated_mod['func_368'] = func_368
mutated_mod = relay.transform.InferType()(mutated_mod)
var_375 = relay.var("var_375", dtype = "float32", shape = (9,))#candidate|375|(9,)|var|float32
var_376 = relay.var("var_376", dtype = "float32", shape = (9,))#candidate|376|(9,)|var|float32
bop_377 = relay.greater(var_375.astype('bool'), relay.reshape(var_376.astype('bool'), relay.shape_of(var_375))) # shape=(9,)
var_380 = relay.var("var_380", dtype = "bool", shape = (9,))#candidate|380|(9,)|var|bool
bop_381 = relay.multiply(bop_377.astype('float64'), relay.reshape(var_380.astype('float64'), relay.shape_of(bop_377))) # shape=(9,)
uop_385 = relay.atan(bop_377.astype('float64')) # shape=(9,)
uop_387 = relay.log10(var_376.astype('float32')) # shape=(9,)
bop_392 = relay.equal(bop_377.astype('bool'), relay.reshape(uop_385.astype('bool'), relay.shape_of(bop_377))) # shape=(9,)
output = relay.Tuple([bop_381,uop_387,bop_392,])
output2 = relay.Tuple([bop_381,uop_387,bop_392,])
func_395 = relay.Function([var_375,var_376,var_380,], output)
mod['func_395'] = func_395
mod = relay.transform.InferType()(mod)
mutated_mod['func_395'] = func_395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_395_call = mutated_mod.get_global_var('func_395')
var_397 = relay.var("var_397", dtype = "float32", shape = (9,))#candidate|397|(9,)|var|float32
var_398 = relay.var("var_398", dtype = "float32", shape = (9,))#candidate|398|(9,)|var|float32
var_399 = relay.var("var_399", dtype = "bool", shape = (9,))#candidate|399|(9,)|var|bool
call_396 = func_395_call(var_397,var_398,var_399,)
output = call_396
func_400 = relay.Function([var_397,var_398,var_399,], output)
mutated_mod['func_400'] = func_400
mutated_mod = relay.transform.InferType()(mutated_mod)
const_408 = relay.const([[8.446638,-8.913380,-6.662325,9.835192,6.400311,-8.251480,7.160784,-5.256431,4.443885,3.734591,-3.139292,3.874582,-4.020650,-9.325173],[1.176292,-2.245684,-9.303490,1.278305,-9.924010,-4.339360,6.893107,4.354236,-8.533199,-9.745106,-7.881516,0.746444,6.385610,-7.096138],[7.966771,-0.466966,-5.966947,7.072803,7.409465,-7.800203,-8.878946,7.412614,6.312422,-8.284326,3.199481,9.854992,6.841728,-4.673297],[3.696698,-1.877516,9.620366,8.415230,1.312545,-7.964067,0.253228,-2.748637,6.255037,-0.303107,2.454853,-9.169259,3.694155,-3.292587],[5.843620,-1.629487,0.150560,4.524980,5.701433,3.251490,-3.699098,-4.426170,-5.103587,5.965645,-8.427298,-2.779581,-8.705776,-1.676574],[8.439561,-8.942591,-2.823703,2.293050,4.710628,-9.836682,-6.437315,-5.449033,-0.611360,-5.924495,2.597059,-9.043340,2.184185,3.101386],[-8.081759,-0.684514,-5.947808,-4.607944,4.768338,8.304041,-9.870459,3.861192,9.104408,0.679054,-9.671872,-5.508984,9.574214,-6.270078],[6.725577,4.425626,0.087301,5.345314,-6.373836,-4.512638,-5.680306,3.578816,-1.509182,7.527549,-9.900629,0.899409,-8.826487,-4.559219],[-5.768922,2.174243,7.784733,1.557534,-8.569124,-9.777957,-3.645541,-5.225035,-4.226028,-6.731972,-2.492856,-6.931558,-4.518303,-5.604296],[7.471681,5.639687,2.862766,-0.946652,7.358167,4.675863,-8.738926,-7.687970,6.861234,6.420807,-5.758296,-8.849956,5.059039,2.141424],[-2.860066,0.811604,8.219163,7.976806,3.946114,5.803005,-6.015680,-5.006755,-6.830888,3.649551,7.620725,-6.529773,-3.180247,-2.666396],[7.235380,-0.279177,1.658496,-7.965546,-3.497265,0.174774,9.734990,-9.201562,-0.926495,-3.459873,2.851683,-1.893206,8.153865,8.948591],[1.483722,1.810758,2.551774,-9.312780,9.205667,5.591582,-3.759542,2.085696,5.356535,5.194904,-7.852775,1.400856,-4.012783,-7.918397]], dtype = "float32")#candidate|408|(13, 14)|const|float32
var_409 = relay.var("var_409", dtype = "float32", shape = (13, 14))#candidate|409|(13, 14)|var|float32
bop_410 = relay.minimum(const_408.astype('float32'), relay.reshape(var_409.astype('float32'), relay.shape_of(const_408))) # shape=(13, 14)
bop_415 = relay.bitwise_or(const_408.astype('int16'), relay.reshape(var_409.astype('int16'), relay.shape_of(const_408))) # shape=(13, 14)
var_419 = relay.var("var_419", dtype = "float32", shape = (13, 14))#candidate|419|(13, 14)|var|float32
bop_420 = relay.add(const_408.astype('float32'), relay.reshape(var_419.astype('float32'), relay.shape_of(const_408))) # shape=(13, 14)
const_423 = relay.const([[-3.194469,-7.808077,5.414062,5.045349,-8.848018,3.099628,5.734678,-7.708905,8.399992,3.979190,-2.099009,0.256288,-6.622025,8.667825],[-4.121955,-3.219330,6.329789,-6.327795,7.413547,-8.482068,0.677498,6.439924,-1.737593,-1.659642,-2.692641,-1.005955,-3.197034,-6.827710],[1.201536,-0.245912,-3.190132,-9.721940,8.752969,-6.818506,-9.587310,-1.209714,-2.200003,-6.439546,1.583503,-1.716095,-8.827497,1.099122],[7.305304,0.718424,8.368188,-9.332524,-2.272982,1.879101,2.994216,8.834081,-7.976816,-4.008352,6.646724,-5.642868,3.372902,-6.599779],[0.059100,-7.063077,7.421320,1.989022,6.344154,8.203080,-8.779113,-3.440074,-7.628313,8.389574,4.027944,-9.095705,-8.770289,-6.448976],[3.931050,0.854791,-1.605337,3.886278,2.067845,-1.892752,3.876641,-8.537314,5.623821,5.438967,-0.759477,-8.998145,-6.855576,1.923946],[0.083173,-2.785999,-8.919382,5.879282,1.602257,8.777494,9.298863,-7.325508,7.621129,-4.860156,6.349098,-6.443716,-9.130620,3.121838],[7.700297,3.872748,-7.320152,-2.377618,6.486000,5.196751,-5.871712,0.831862,4.303435,-6.989690,9.679449,8.937814,6.021980,-4.259716],[-1.589899,-2.960494,-8.156289,6.715643,-0.535399,-1.728181,0.965704,-9.777150,-4.263681,-6.089415,0.567596,-6.553453,4.529438,0.275197],[8.620031,0.719451,-7.640355,-7.850484,7.278006,5.935194,2.532299,-3.599692,-9.957257,-7.324731,-0.114173,-5.298032,-7.824037,-4.303540],[-2.639513,-7.017904,-1.460238,5.652249,8.828557,3.786312,3.492644,-4.478209,-9.013939,-8.396250,-1.049225,1.217106,4.419260,-3.503422],[-4.347965,2.348889,8.029058,5.600722,0.426631,-6.517878,-6.034993,-2.783421,-5.996864,-3.758095,0.382695,8.839606,7.173417,-3.023064],[-4.385636,-8.155633,-0.481760,2.523760,7.943728,5.094613,-4.620666,-7.638567,3.800190,-8.931866,5.925916,7.172280,9.275377,-3.002283]], dtype = "float32")#candidate|423|(13, 14)|const|float32
bop_424 = relay.less_equal(bop_420.astype('bool'), relay.reshape(const_423.astype('bool'), relay.shape_of(bop_420))) # shape=(13, 14)
bop_431 = relay.not_equal(bop_424.astype('bool'), relay.reshape(var_419.astype('bool'), relay.shape_of(bop_424))) # shape=(13, 14)
uop_436 = relay.rsqrt(const_423.astype('float32')) # shape=(13, 14)
output = relay.Tuple([bop_410,bop_415,bop_431,uop_436,])
output2 = relay.Tuple([bop_410,bop_415,bop_431,uop_436,])
func_439 = relay.Function([var_409,var_419,], output)
mod['func_439'] = func_439
mod = relay.transform.InferType()(mod)
var_440 = relay.var("var_440", dtype = "float32", shape = (13, 14))#candidate|440|(13, 14)|var|float32
var_441 = relay.var("var_441", dtype = "float32", shape = (13, 14))#candidate|441|(13, 14)|var|float32
output = func_439(var_440,var_441,)
func_442 = relay.Function([var_440,var_441,], output)
mutated_mod['func_442'] = func_442
mutated_mod = relay.transform.InferType()(mutated_mod)
var_450 = relay.var("var_450", dtype = "uint64", shape = (9, 11, 1))#candidate|450|(9, 11, 1)|var|uint64
var_451 = relay.var("var_451", dtype = "uint64", shape = (9, 11, 8))#candidate|451|(9, 11, 8)|var|uint64
bop_452 = relay.bitwise_or(var_450.astype('uint64'), var_451.astype('uint64')) # shape=(9, 11, 8)
func_49_call = mod.get_global_var('func_49')
func_51_call = mutated_mod.get_global_var('func_51')
const_457 = relay.const([2.486553,-5.241118,-4.071528,7.581756,5.776020,-6.998787,-4.273289,-7.841313,-7.116486,0.376687,4.084079,0.506801,3.628236,-9.568317,6.677639,8.737106,6.876898,-1.404360,5.079654,-8.442171,0.006120,-3.016773,9.333132,-6.836896,7.406891,-9.387612,6.660769,-8.004209,3.151996,5.335608,7.242628,6.039077,-6.730645,-9.929682,-9.109337,-8.880315,3.781394,3.191199,-2.076267,-5.709396,-6.342480,-5.113306,-2.586141,-9.467064,2.652098,-3.585651,-1.536239,1.370898,7.104225,-3.797916,-4.362667,-6.221433,-5.811646,1.613357,2.431885,-1.998399,-1.759209,0.751650,5.995075,1.820133,5.473497,3.448095,6.278328,-9.806933,-4.722629,-9.313825,-7.475894,-0.570430,9.569983,3.334732,7.657536,-9.410368,-7.283326,-7.279564,7.344328,-2.497315,9.823486,-8.739581,4.366138,0.846686,-6.904172,-9.971949,-4.818418,5.628448,-2.931085,2.244661,-5.395511,-9.598555,3.992341,-8.566316,-2.864596,-8.697301,-5.631971,-0.218371,9.077509,7.686165,-7.989297,-0.104436,-1.877290,-5.529579,-7.348461,-8.706861,9.191974,0.365205,4.070216,8.417418,5.616374,2.897459,-4.875872,0.931734,1.513047,8.435835,-3.029339,4.478346,1.057396,-3.644779,7.157491,-2.000631,1.742225,1.391834,3.274926,-2.745822,-3.647909,-2.134661,5.182192,7.134041,-9.632149,-6.661486,-1.532370,9.803833,4.442143,-3.672733,-2.260592,2.207581,-0.174342,-0.096123,3.767083,-8.469267,-1.437353,3.370256,-9.035820,5.463391,5.343252,-7.981158,4.460410,-0.341266,0.260690,1.734335,3.223143,9.205130,6.155386,-1.267578,-4.482668,4.843530,0.622226,-5.277414,4.873418,3.885274,-7.384895,-0.126415,0.325332,-0.041907,0.642800,2.997138,5.260242,4.963106,-1.113510,4.537430,-0.264375,-8.043219,1.599203,-9.742129,-5.248494,-9.141110,3.195166,-3.455552,3.061300,4.801283,-6.546378,8.280672,6.174865,-9.867734,-8.358788,-2.743413,-3.355754,4.718256,4.365055,-6.200392,0.450509,-8.055207,-5.976594,6.284626,-1.505693,-1.612442,1.311062,-8.989223,-5.912438,9.425001,-9.181868,-6.622251,-0.480457,6.579561,9.980287,8.896922,-9.970399,5.028834,-2.856022,-3.240931,0.792662,8.404846,-9.223900,0.104926,-2.658798,-1.715796,-8.895940,-3.241917,-5.764201,-9.627269,8.659562,-8.996476,-5.232034,-0.150444,-3.594307,3.909161,-8.900898,1.164232,-7.357573,0.437516,4.592955,2.051204,-0.818133,-1.680747,9.344208,-2.265435,-1.701724,-7.140574,-7.384089,8.033252,7.719583,-4.253103,4.237797,7.919020,-8.593341,-8.008240,-0.497338,9.052931,1.687044,1.495611,2.569415,-8.834322,-5.843144,-5.918048,3.739628,7.138894,-3.128778,-6.267555,0.932471,8.374045,9.333165,8.823381,6.074125,-6.478463,-6.416704,-6.171015,-5.923249,9.363151,6.624415,4.891165,5.943043,-2.101756,0.377955,4.097226,-6.305769,-3.279054,0.165348,3.070176,5.948765,9.544157,5.454139,0.764503,-2.262968,-3.483268,-3.916351,9.499001,-5.439286,2.134830,-4.975895,7.234151,8.967526,-5.813664,9.862520,9.387212,-0.766216,7.000596,-8.749445,7.505302,1.183800,4.522720,8.016058,-6.800467,-8.909808,2.067350,-9.667132,0.831982,3.007904,-4.838688,8.938941,9.757791,6.120953,9.102375,9.765353,-3.980978,-3.925724,-0.031973,-9.199962,5.631860,-3.913566,-6.199132,3.067139,-4.494366,9.571093,-4.851233,-8.318180,-6.980952,-0.239777,-0.906437,-8.242057,-8.065340,-5.132784,2.369113,5.604304,4.815171,6.288207,4.304421,1.983734,1.509286,-5.980330,2.814114,9.696448,-7.843018,7.556049,1.106279,-9.620547,-5.938123,-9.588839,5.279744,-3.875354,2.568455,-1.873439,6.492634,-7.296984,1.218827,-7.188652,-0.892237,-7.007141,0.263000,1.841714,-5.482869,-0.623671,-6.708911,-9.321726,0.574060,-3.391461,-9.072586,3.099253,-5.191255,7.381727,-0.918872,-4.942663,5.983717,-2.353942,-0.286256,-9.308530,7.003604,7.293720,3.609295,3.240930,-5.733257,-0.914302,6.218168,-0.539697,9.398774,4.042295,2.770203,-4.397154,-3.037144,5.834724,-9.196969,5.662445,2.947918,1.680568,-9.572148,4.741769,-3.206818,-8.739736,1.056003,0.084472,-1.141452,-3.837771,-7.103443,-2.786726,4.284399,6.584217,2.359945,2.998931,4.706276,-9.473846,-9.111018,4.538482,8.179293,-4.659219,-2.468745,9.426309,-2.033517,0.565714,1.819266,4.471343,4.565378,-6.450684,-8.750902,1.773465,5.148530,9.648233,1.647757,-5.873138,-7.150154,6.050276,8.894775,6.604622,6.458944,-2.717279,2.493538,2.403427,0.979914,8.498434,-2.274760,9.130491,-6.952423,0.769736,5.391436,-6.771243,-7.574123,3.997392,8.247556,2.827374,9.478747,3.062288,5.785124,0.637259,-0.807905,-2.784237,-8.716561,-1.846265,1.197396,-1.198461,-7.289645,-3.082133,4.387336,-6.566415,1.986563,8.669742,7.119659,2.429558,9.760310,9.190825,4.523114,-3.347656,-3.925318,8.512659,-1.144637,-6.175321,-6.418488,6.342621,-4.919628,-3.154504,0.990662,-6.624884,-9.052281,-6.731561,5.055175,-5.075232,2.029419,-2.453870,7.410947,5.666084,8.207176,-0.490454,9.643380,4.003496,8.581981,1.749986,5.012824,-1.980023,1.271437,-8.275601,-2.727078,3.119691,7.758072,5.405268,3.484132,4.242744,0.851946,0.106992,6.503812], dtype = "float64")#candidate|457|(504,)|const|float64
call_456 = relay.TupleGetItem(func_49_call(relay.reshape(const_457.astype('float64'), [9, 7, 8])), 1)
call_458 = relay.TupleGetItem(func_51_call(relay.reshape(const_457.astype('float64'), [9, 7, 8])), 1)
const_460 = relay.const([[[6,-3,6,-10,-2,-7,-6,4],[-2,-1,-10,1,5,4,-10,4],[-6,10,2,-1,4,1,-6,3],[10,1,9,7,-8,10,3,-1],[-2,3,2,8,-9,5,-4,5],[4,-5,10,9,-2,-3,4,5],[8,9,9,-7,6,6,-4,-5],[9,-3,1,-6,-10,7,-6,9],[-10,7,8,8,7,4,-6,-2],[-9,5,-7,-3,1,-1,2,-2],[-10,2,2,2,3,-3,-6,-4]],[[-7,5,10,-1,7,8,3,4],[9,-1,-5,10,-8,-6,7,-9],[7,-8,-1,-7,-2,2,5,9],[1,4,-1,-5,-9,-5,-9,9],[-8,2,-10,2,4,-7,9,2],[4,-9,2,7,-2,-6,-5,-6],[5,-6,9,-5,1,1,-8,3],[10,-8,-3,2,5,6,-4,-7],[-2,-2,-1,3,10,4,-8,-9],[-9,1,-2,-7,2,9,6,4],[6,-1,4,-9,-10,2,1,6]],[[-8,2,-1,-7,4,8,-9,-10],[-8,-4,-4,7,-7,2,10,-8],[7,8,-10,-1,-10,-6,9,6],[6,-10,-2,-4,7,6,6,-6],[3,2,-9,-8,2,-10,10,10],[7,-6,-8,9,-6,3,-7,4],[-2,-3,-9,-2,9,-4,9,4],[-6,6,-1,-9,7,9,-10,-6],[-1,-5,-2,-3,-10,-9,-1,-6],[5,10,6,1,3,9,-4,6],[-4,8,-8,8,-10,-7,-9,-9]],[[-5,-10,-10,4,2,-7,-8,4],[3,-9,-4,1,1,-6,-10,-7],[-6,8,10,9,5,10,10,7],[-7,6,-1,-7,4,-7,8,1],[-2,10,-1,4,7,-3,-8,-10],[-5,6,5,10,-7,-6,-2,-1],[-8,-6,3,6,2,5,-8,-2],[-3,-10,-2,-8,9,7,2,6],[10,8,-10,3,4,1,-5,6],[5,-6,10,7,-9,1,-4,-1],[8,10,-4,9,1,9,-7,5]],[[4,-1,7,-4,-4,-8,-1,-5],[-8,7,5,7,10,-3,-4,-10],[-2,-3,-1,-9,-3,3,6,4],[-10,6,-9,-3,-3,-7,-7,-5],[8,-9,-8,-3,-5,-4,-6,-9],[-9,4,-9,6,-3,9,10,8],[6,8,-8,-3,-1,6,-7,-6],[9,6,-6,10,-5,-1,2,4],[1,-2,-7,1,-3,-5,-3,9],[-10,-10,7,-8,-8,1,2,-8],[9,1,-4,-4,-1,-9,8,6]],[[3,4,5,-6,5,-3,-3,10],[-10,10,5,-2,10,3,-9,6],[5,2,4,-3,5,5,-6,4],[8,-3,-7,-1,4,7,-5,5],[-4,1,7,6,1,-4,6,4],[-1,7,2,8,-4,-1,-9,10],[-5,3,7,8,3,-5,-9,3],[6,9,-9,-5,-4,-5,-3,8],[8,-2,3,2,-1,4,-6,9],[8,1,6,4,2,-3,-4,3],[-4,-6,-4,-4,-5,-4,-7,4]],[[-2,3,-3,-6,-6,-10,-1,2],[-9,-6,-7,7,-1,3,-3,-3],[4,-10,3,-1,-6,7,5,7],[-8,-6,-3,6,-3,2,-8,10],[-9,8,-10,-10,2,-8,-9,-1],[-5,-3,-10,-2,10,1,-9,1],[-3,1,-9,-2,10,-10,-2,-7],[7,-7,3,-10,-5,2,-3,-3],[1,2,9,-5,-3,-10,-5,3],[-9,1,-2,-6,3,3,10,-2],[2,-2,-7,9,-1,6,6,-10]],[[-2,8,5,2,-1,-3,1,-3],[-9,-3,2,-8,-1,-1,-6,3],[-3,5,-4,-5,2,-7,5,-7],[2,5,-3,9,7,-2,-2,-4],[-7,-4,-6,7,8,2,-1,2],[-8,-1,7,-7,-9,-1,4,-7],[-2,2,-1,7,-3,5,-7,-1],[-1,8,-2,6,3,-4,1,-8],[2,3,8,-3,9,7,4,-1],[-10,-4,-5,6,6,-5,-3,1],[2,1,4,-5,3,-8,-1,3]],[[-1,6,9,-4,-5,-3,-1,-6],[-8,6,-2,-6,-2,1,5,-7],[-2,10,8,-6,2,-9,-4,7],[1,-6,4,-7,4,4,-5,6],[5,-9,-10,3,-4,7,9,-2],[9,5,-7,4,2,3,-8,-5],[4,3,10,-10,-10,4,2,10],[-1,-9,-9,4,-8,1,7,-8],[-1,-7,-8,-5,5,-8,3,-10],[-4,7,-9,-7,7,4,5,4],[-6,-4,1,5,-7,1,-2,6]]], dtype = "uint64")#candidate|460|(9, 11, 8)|const|uint64
bop_461 = relay.less(bop_452.astype('bool'), relay.reshape(const_460.astype('bool'), relay.shape_of(bop_452))) # shape=(9, 11, 8)
func_261_call = mod.get_global_var('func_261')
func_265_call = mutated_mod.get_global_var('func_265')
const_465 = relay.const([-2.071423,1.431571,0.421316,1.411685,1.145159], dtype = "float64")#candidate|465|(5,)|const|float64
call_464 = relay.TupleGetItem(func_261_call(relay.reshape(const_465.astype('float64'), [5,]), relay.reshape(const_465.astype('float64'), [5,]), relay.reshape(const_457.astype('float64'), [252, 2]), ), 1)
call_466 = relay.TupleGetItem(func_265_call(relay.reshape(const_465.astype('float64'), [5,]), relay.reshape(const_465.astype('float64'), [5,]), relay.reshape(const_457.astype('float64'), [252, 2]), ), 1)
uop_467 = relay.log(bop_452.astype('float64')) # shape=(9, 11, 8)
uop_469 = relay.log2(uop_467.astype('float64')) # shape=(9, 11, 8)
uop_471 = relay.cos(uop_469.astype('float64')) # shape=(9, 11, 8)
uop_473 = relay.atan(uop_471.astype('float64')) # shape=(9, 11, 8)
uop_476 = relay.cosh(uop_471.astype('float64')) # shape=(9, 11, 8)
uop_480 = relay.sigmoid(uop_476.astype('float32')) # shape=(9, 11, 8)
bop_484 = relay.equal(uop_480.astype('bool'), relay.reshape(uop_476.astype('bool'), relay.shape_of(uop_480))) # shape=(9, 11, 8)
var_487 = relay.var("var_487", dtype = "bool", shape = (9, 11, 8))#candidate|487|(9, 11, 8)|var|bool
bop_488 = relay.not_equal(bop_484.astype('bool'), relay.reshape(var_487.astype('bool'), relay.shape_of(bop_484))) # shape=(9, 11, 8)
bop_496 = relay.less_equal(uop_471.astype('bool'), relay.reshape(bop_461.astype('bool'), relay.shape_of(uop_471))) # shape=(9, 11, 8)
output = relay.Tuple([call_456,const_457,call_464,const_465,uop_473,bop_488,bop_496,])
output2 = relay.Tuple([call_458,const_457,call_466,const_465,uop_473,bop_488,bop_496,])
func_500 = relay.Function([var_450,var_451,var_487,], output)
mod['func_500'] = func_500
mod = relay.transform.InferType()(mod)
var_501 = relay.var("var_501", dtype = "uint64", shape = (9, 11, 1))#candidate|501|(9, 11, 1)|var|uint64
var_502 = relay.var("var_502", dtype = "uint64", shape = (9, 11, 8))#candidate|502|(9, 11, 8)|var|uint64
var_503 = relay.var("var_503", dtype = "bool", shape = (9, 11, 8))#candidate|503|(9, 11, 8)|var|bool
output = func_500(var_501,var_502,var_503,)
func_504 = relay.Function([var_501,var_502,var_503,], output)
mutated_mod['func_504'] = func_504
mutated_mod = relay.transform.InferType()(mutated_mod)
var_516 = relay.var("var_516", dtype = "float32", shape = ())#candidate|516|()|var|float32
const_517 = relay.const([[[6.419590,0.321280,-7.517411,4.637159,6.695380,-1.035795,-7.710551,3.080537,4.040724],[-4.515289,4.653061,-6.810146,-5.099427,-5.827475,1.638555,1.913190,9.757800,-2.351899],[-1.968635,-4.849763,-1.229646,-0.068663,7.712663,8.892104,2.638685,-9.500550,-8.852053],[0.361212,1.941761,-6.660075,7.541034,7.392513,-0.798332,-9.999593,-4.139978,6.704182],[-1.002725,1.810671,2.182038,-3.127161,-9.568236,1.572910,-2.316218,-4.578507,2.364036],[-1.320643,-4.615677,2.745552,6.306614,0.303822,1.322518,-1.603168,4.865157,1.972730],[-3.079779,6.344575,5.726324,6.572223,6.195325,8.118579,1.376270,-2.737918,5.877584],[-0.618245,3.626224,-3.700273,-8.551806,-6.735346,-6.401074,9.060413,-4.011696,-5.516221],[6.563742,7.718523,4.896393,7.034681,-2.902394,-1.080098,-0.622073,-6.765021,-6.711809],[-0.452445,-2.741417,-2.562585,-6.884820,0.542002,-3.808336,-1.677207,-3.149106,7.088949],[-6.166023,-1.542758,-4.143118,1.242865,0.648647,-3.037712,-4.782951,0.252238,-2.595908],[-3.784536,2.035975,7.453908,8.127781,5.092211,5.115125,9.778263,-2.178097,-1.979727],[-7.827306,3.157024,4.656157,2.579052,-7.924123,-1.493859,7.583963,6.503679,3.018575]],[[-9.149427,1.844630,-1.834870,-4.157727,-2.283726,5.530659,9.125454,-9.768082,6.146304],[3.478170,-0.410139,2.443458,-9.728011,2.531469,9.053818,-8.819055,4.056181,-1.972704],[-0.807217,2.875240,7.243681,3.082924,-3.380811,4.142975,6.486497,-4.075356,-5.044196],[2.561120,-9.087866,-2.441827,4.417358,-5.765410,-0.809378,-4.922752,4.269372,-1.068558],[-5.297567,-3.516979,0.346764,-6.180306,-7.156153,-0.017284,1.720498,9.693857,-3.401021],[1.397774,-5.215090,-1.171540,-1.431296,5.505650,-3.204530,-0.816608,6.256756,6.355217],[-6.902247,6.242901,3.487724,0.194156,1.392096,-6.876568,1.062849,3.477815,3.411306],[-8.610080,-4.698852,-1.898205,3.560764,6.371747,2.092510,-3.262392,7.295752,-6.255989],[0.589551,2.423276,-4.043258,9.172348,3.975589,7.685531,-0.735713,1.843825,1.315634],[-2.999351,-4.931038,6.771318,-0.257519,-3.533751,4.854797,-0.732465,-3.265906,-5.205886],[-7.499510,-7.721461,-6.921256,-1.248151,-1.844812,-7.287128,0.032081,-3.235878,-3.873787],[7.313133,5.318222,-0.065376,-8.815088,-3.753961,-5.930414,6.822142,-7.558887,5.486803],[6.496530,2.971981,8.211260,2.501703,-1.009105,-4.777675,2.584730,-5.644556,6.487496]],[[-5.098421,1.220345,4.492410,2.552454,-9.793274,-3.267827,-3.078444,-0.684949,3.393917],[3.337859,-9.916859,4.140459,9.255853,2.830917,7.696268,-9.808650,-4.487745,-2.327420],[-5.134281,1.399386,6.201700,-0.227620,2.111962,-4.708904,-9.950951,-0.110180,1.842110],[6.892171,-2.486023,-4.034037,-6.271477,0.821846,2.047154,-6.686406,1.027973,-1.564970],[6.133497,5.260951,1.677174,-2.309711,6.378988,0.431974,-6.200261,9.871131,8.852665],[-5.968923,2.368399,-8.941930,-0.964270,-4.052114,-5.245869,-9.147804,3.700136,3.603474],[5.700957,-9.357700,-1.340774,-6.208508,-9.308960,8.002117,4.737854,6.097049,-8.314053],[5.670495,-6.264823,-8.635109,8.561384,5.072197,-2.157068,4.887412,-6.137851,5.933952],[4.785592,0.463529,6.638813,3.093494,-7.085790,8.066921,3.496385,0.812393,-4.108821],[-0.824889,7.298246,-1.217121,-8.701848,4.053202,4.485876,6.740545,-6.989030,1.314008],[-6.266268,3.572959,4.428213,3.589057,6.269227,6.174405,-6.466728,3.176768,9.021184],[-2.375582,-4.132844,-2.445379,-5.717507,-2.919868,-2.498661,-3.825169,3.806390,1.168410],[9.460512,1.067554,-4.589205,-1.690956,-4.166948,-6.757253,-5.630430,-3.485883,-4.715903]],[[-8.069884,-9.891845,-1.447141,-5.695519,4.852131,-8.813177,2.333270,8.436464,-4.561688],[6.545423,3.228088,8.468070,9.019526,-5.218704,-9.465488,-5.159283,5.704929,6.848014],[6.992458,-0.370670,1.566057,8.334037,-9.930843,1.367238,-8.993584,-6.250844,9.772677],[4.150493,5.671849,-7.054669,8.823608,-9.536965,4.632265,-6.718601,-8.178016,-8.362815],[2.255438,-4.679491,-4.287841,-3.592291,-5.822809,-1.212217,-9.050562,-6.271894,4.670320],[0.711583,3.450820,0.325907,-2.332273,6.788457,5.402598,-2.808206,5.693754,-7.270433],[9.377275,3.826452,6.366923,6.611445,0.917318,7.420414,-6.665440,1.501988,5.896266],[-0.135343,-2.869224,-0.442119,1.897902,-3.191665,2.515594,2.119244,-9.254359,-2.875570],[-0.552035,5.288610,1.779702,8.085253,-0.341898,3.625302,2.834595,5.400629,7.011736],[8.355981,-8.791388,8.306057,0.516461,-9.283327,4.756176,2.970719,-2.676090,-7.394949],[-4.577945,7.583495,-5.007779,-3.757231,5.716726,-1.293171,6.185967,5.682434,3.480281],[0.513145,7.391380,-3.077777,-3.588997,5.303175,7.153563,-9.221251,1.500735,-3.963362],[-3.232992,4.991814,-1.491292,-8.645804,-9.883475,6.529095,-7.032067,-7.695495,9.795527]],[[8.353852,-3.570100,-7.235062,-1.839057,2.335995,8.546843,9.272698,-7.732956,9.718198],[-1.609117,-1.421904,3.097072,1.944837,-9.268238,-0.211374,-1.023117,1.780638,-8.714309],[-7.872870,-0.095142,-1.849400,9.283944,4.100212,-4.602226,-2.753490,-0.833193,8.474909],[2.181859,-0.854751,-3.941736,8.488532,-1.035017,-4.130913,-4.389459,3.893670,-1.881884],[-1.631454,6.305686,-7.410885,-7.681897,4.993319,5.772365,9.348882,0.538101,6.209715],[-6.712559,-9.067211,3.468265,0.942270,-4.205935,4.338558,-7.806337,-0.934557,3.786197],[4.029720,-5.232354,8.668591,-4.704513,-9.561844,-5.018340,7.549377,-7.907921,9.052764],[-3.756217,4.227809,5.622125,-3.628606,8.830899,6.591392,3.043753,-5.100607,4.468618],[5.028138,-5.538180,3.402757,8.643629,4.509475,0.328729,-0.642145,6.082763,-1.459426],[-8.740133,-4.612239,7.239194,-3.647503,4.497404,-6.791217,-4.712174,-8.839206,7.198471],[0.336207,-1.446329,-6.987357,4.092521,-1.955923,2.549449,1.034678,6.806865,2.185196],[-6.507303,0.531602,-2.183131,-0.291062,4.022756,-6.456786,6.509442,-9.475648,-1.462501],[2.019725,3.461917,7.286852,-2.453360,-5.781408,-6.878092,-9.943344,7.025257,-7.625218]],[[-1.357219,5.615343,1.778091,-0.528140,4.712717,2.282083,-3.909921,-9.917020,-9.597670],[-8.296731,-5.231595,-2.230463,-7.433240,5.214284,-7.391419,8.199679,6.432788,-9.708671],[-6.589438,4.986724,5.098294,-2.089774,1.102521,5.607581,-3.503556,-4.986383,-8.952946],[4.923406,2.007051,9.956159,2.354859,-6.703713,9.908805,1.684145,-8.849599,6.098955],[0.203051,9.948330,-8.475569,-1.970043,-0.820977,-7.559442,6.845778,6.239361,-5.875945],[-8.205207,0.722502,-1.719508,-7.905567,0.403693,-6.983496,-9.366859,-4.160729,-8.887133],[1.571097,6.304590,8.264645,-5.927506,9.479903,-3.913884,-9.974186,2.788359,9.149796],[-8.763345,-0.412712,-2.573682,9.575096,-9.026692,-0.968287,-6.988327,-6.049598,8.871179],[6.782318,-8.651640,1.796588,6.499666,-1.665835,-2.793534,-2.904262,7.949258,-3.181943],[-2.390568,-6.568635,0.882863,8.374678,-0.536036,6.005869,-5.584852,-3.899468,7.507964],[0.799838,6.151096,-3.355494,2.629468,0.953095,3.343738,3.911512,0.874129,-8.829685],[-2.375155,-7.407902,1.051659,9.306756,0.577530,1.821861,5.496151,5.425382,-7.354829],[-9.616149,-5.087798,-0.599537,0.314521,3.944222,4.340819,6.821536,-4.154788,8.776678]],[[4.209583,3.041786,-5.000628,-7.475973,3.956843,-5.739407,1.213296,3.549048,-4.129938],[8.061161,9.585916,-0.468146,-5.149537,0.593186,-3.724113,9.293441,9.524440,-7.671193],[7.702320,7.946035,-3.339684,-6.037874,7.693452,2.102967,2.745173,8.942313,-0.952022],[2.826119,-0.789144,1.477473,8.014045,-2.287252,5.373492,-8.159050,3.152492,3.077878],[-1.565024,2.990582,6.455406,7.226371,4.104854,-6.016776,2.093548,6.632800,-7.703660],[-8.165734,1.300251,-1.764402,8.329490,2.042915,-0.240122,-3.147387,-5.500225,-5.587665],[-9.567161,-0.621082,9.546195,6.195257,-3.195232,-7.020536,9.134327,0.140140,5.601360],[9.907355,-2.782892,-0.916041,7.485446,6.823557,-9.828511,-0.657920,-6.285894,4.565215],[2.707227,-5.830691,9.041267,-3.737591,8.790887,6.391611,1.727353,0.237365,3.728367],[-1.371309,-5.191072,-1.318310,-3.835788,8.253843,8.391739,-5.335561,-0.326195,-4.768038],[5.607782,-7.481309,-7.287791,8.856147,5.446336,-1.890299,-0.907713,0.532840,-1.831002],[-2.729783,-8.861431,3.033471,-8.568192,-5.470389,-0.727182,-7.018269,4.049223,-5.750005],[-4.932145,1.912649,-8.349299,-5.389721,1.571166,1.275164,3.636609,-8.476434,-7.361287]],[[4.751145,8.271789,7.632216,-3.775319,8.979755,-7.679805,-0.722003,2.964204,-4.846206],[4.759927,6.692034,3.967571,-4.874636,-1.775359,-9.036201,1.662706,2.836480,-3.341535],[-5.693240,-8.623535,-3.613575,-5.853465,2.194468,9.966137,7.449982,-2.333806,4.473574],[-7.106252,-5.375239,-3.187883,7.260100,-5.651420,-8.116339,4.808027,3.670421,-0.522867],[-0.037068,-5.218008,-5.468283,-8.230317,-7.866633,-4.194732,-3.604222,-8.024212,7.015877],[4.936608,-7.440563,1.265997,-5.716112,1.430787,-6.977598,-7.435728,-3.139816,-5.847464],[-5.016889,3.909215,9.272051,-6.516266,-8.561915,-2.146904,4.366824,-5.830216,8.480068],[-1.062106,-3.461580,-7.959251,1.630398,4.818539,2.219279,-9.201263,-8.316330,6.410361],[-4.304891,6.105227,-8.015929,-0.681614,-3.200518,2.301357,6.266407,3.801261,0.154434],[-4.230177,-8.961689,3.820823,-8.968775,3.954992,0.852566,-1.006957,-4.372085,-2.037556],[-2.281215,-9.398889,1.518426,-5.662035,7.771680,-4.943241,3.092571,8.529455,-1.049409],[-1.702122,0.504553,-0.173759,-7.271445,-8.564037,-2.634930,4.252553,7.197061,9.843984],[5.139665,5.050453,-8.156292,8.874983,6.774163,4.254231,3.378810,-2.718196,-5.187684]],[[1.385188,4.369789,7.157538,-0.529032,-8.790382,0.706669,-2.668932,-9.366238,4.770534],[1.189456,-3.741508,-2.475591,0.156895,0.286945,-7.017242,-5.786764,-8.989075,0.167514],[6.839169,-8.388687,3.464972,-5.094772,-0.672565,-2.667311,7.598279,6.995914,-3.880085],[9.690571,5.775046,7.151689,-8.432414,-6.940419,6.718018,6.005827,6.269694,2.244730],[8.667428,2.243502,-3.781288,2.061781,6.873719,5.796034,-7.366337,1.174915,-1.941370],[8.364743,-5.886563,7.919835,1.794556,6.548048,3.121391,-4.332159,-1.760847,-0.926001],[5.519528,-5.575766,-4.437451,-3.574637,-7.231641,6.782081,-0.545304,-0.775577,-4.452495],[-4.664937,-3.330520,-4.044522,-6.404370,-0.352110,-7.646649,3.979594,-0.411792,3.392129],[-9.129123,-8.558822,2.909049,8.641821,-5.980553,5.846702,1.781566,5.846052,1.199703],[4.265037,-4.344635,-2.206640,2.946795,-2.104272,6.297073,-6.982507,0.529714,-8.164009],[-9.494540,-3.650287,3.601274,2.250651,2.412446,-2.368938,7.110951,4.469708,3.082027],[-9.280539,9.907189,4.147637,-4.692569,-8.423141,-9.069145,1.939587,-0.471680,5.087019],[5.533587,0.203896,5.326392,7.390955,1.152481,-5.464527,-7.233495,2.264872,0.659876]],[[-5.649118,0.525879,6.452848,0.131534,-8.883138,-7.194944,-4.296302,4.356161,4.405040],[0.170331,3.598440,0.448441,-6.174758,-4.507302,4.627262,-2.842776,-3.037006,9.699716],[2.982767,-5.331775,-3.076327,3.372664,-7.077352,-0.696664,-1.308084,-3.372090,9.059331],[1.445584,7.410586,7.011935,-1.414860,-6.906076,1.463779,-6.380294,-2.619373,3.383839],[-5.896023,3.929352,6.150894,-3.458424,-8.850348,4.404569,-7.710881,0.923517,-2.927149],[-5.952077,-0.104426,4.925541,-7.329516,-6.840064,-4.358620,-3.264791,-7.436407,5.231314],[4.882328,1.922062,-7.154517,6.796182,-7.518026,-2.104282,-6.016230,4.008554,0.508029],[-6.547682,-9.555785,9.791062,-3.884741,6.485899,1.581614,-6.238056,-4.226666,-2.008630],[-5.583090,5.907447,-3.922114,-3.289957,6.504227,2.674049,-0.582242,-3.142375,-0.878315],[-2.014619,0.615151,-8.256613,-1.323827,-3.618347,-2.373375,-1.252836,-5.444396,2.946171],[9.708958,6.699599,1.278965,-7.533876,6.983739,0.629148,-7.400503,-5.795309,9.310679],[-4.675677,-9.346870,2.843813,-8.829297,9.463475,2.273112,9.867629,-8.563614,9.600684],[-1.518899,-0.538898,3.662412,5.878559,7.608598,2.692486,-8.368512,-3.032869,-6.600228]],[[-2.312522,3.092057,-9.497227,-9.896699,-0.548623,-6.983509,7.528631,4.799344,-2.144976],[2.067357,-3.920632,-8.481270,3.643045,9.178961,5.617856,1.324105,-6.514528,8.293691],[-0.166273,8.400585,3.529556,-6.733659,-7.557182,-8.339836,-9.535702,-7.141819,-1.415810],[4.547782,-4.054210,4.762484,-1.136399,1.558266,-8.972344,4.969467,-8.841499,3.872705],[0.639390,-4.646347,3.505266,-3.790271,-0.624515,-9.306052,5.882082,7.119503,-2.677859],[4.288866,5.394347,-8.392418,-4.388939,-2.178612,-2.326669,-4.251472,-3.192301,0.385595],[1.780926,8.794000,-2.227983,-7.478316,9.580654,3.649738,-4.956274,6.216874,9.421859],[1.753201,4.245447,0.038539,2.320193,3.881986,-4.272292,3.432763,1.673246,-2.187907],[-9.090526,9.988811,-9.399076,-9.130247,-0.333043,-7.279275,0.110618,5.834565,-6.353346],[-7.638965,-5.696792,5.953753,-2.242305,-3.281313,9.464553,2.003664,2.625585,-0.073708],[-0.790890,-8.824676,-2.688427,-6.238392,3.377423,-6.619086,-6.880046,1.681562,9.023512],[-1.534928,-6.586356,4.293327,7.274509,2.281342,7.654020,-3.633635,-3.666911,-8.858893],[5.390876,-1.704859,-9.377015,-6.788096,1.332768,1.445180,-4.937254,-1.537982,-9.006784]],[[3.768884,8.233961,-0.677461,-9.307946,-0.708402,-7.476785,6.604282,4.386104,-7.078398],[-9.379948,4.419393,-3.408030,-2.634409,-7.529536,4.274253,-7.503769,-9.855355,-2.146300],[8.262144,2.706001,8.335358,-7.265521,1.089807,7.912804,-2.216486,0.239157,6.136371],[-3.846376,-8.136345,4.710107,-5.326320,-1.177595,9.884907,1.573432,3.670931,-3.864431],[-1.018002,1.770567,-1.109585,8.684303,6.803384,-8.801812,3.344307,-5.639307,8.568173],[5.451436,-7.610444,-5.602685,-4.089753,-0.002679,-4.186437,6.729958,2.807461,2.190945],[4.697828,-2.050308,6.677171,4.310528,-0.435473,-8.537582,4.131890,2.670521,-9.950398],[5.769099,8.340072,-4.642814,-2.912547,1.927762,9.908522,-0.928682,0.051496,8.488176],[6.992685,6.339226,-5.766993,-2.609854,-8.180933,9.999798,5.094974,0.639012,-7.936031],[9.153951,6.105879,6.790799,8.192462,6.921356,-8.129135,1.658722,-2.460979,0.137510],[-6.427947,-2.580362,8.561890,4.999506,6.833394,-6.058150,0.244625,-2.713558,-8.738415],[6.594290,5.935881,-6.541871,7.580881,-2.618060,2.368404,-5.006284,0.308102,-8.785864],[6.642080,4.118720,-5.836763,-8.371561,1.850158,6.400861,-6.951469,5.648859,0.706573]],[[-6.754860,1.645584,-2.646467,-4.595364,3.670961,-6.683909,2.803517,1.899340,-4.023851],[-5.022789,4.761057,6.639753,5.396427,3.639502,-8.549863,-8.363891,3.740316,4.087796],[-9.868187,8.177715,4.142633,6.675650,7.177454,2.957633,6.920797,-6.916512,-8.708175],[6.872762,-9.287698,-4.871087,8.060672,0.742432,1.740495,4.636069,-1.786174,8.663464],[-4.263168,-0.727181,6.738452,2.458171,2.980956,-7.409368,1.317234,4.905106,-7.885218],[-0.746254,9.179725,2.698129,-9.407178,-7.144422,3.373640,-9.882906,8.642984,4.376934],[1.436454,3.457736,-0.868989,-6.958451,5.722871,6.394224,6.566107,0.945704,5.886418],[7.921925,5.301272,7.295065,4.081544,-3.756717,-3.881220,-4.195657,-2.142981,7.092119],[9.615231,5.648532,7.713972,-9.963654,-0.778806,8.024052,-1.643899,-7.958439,2.437473],[-8.855280,5.714843,6.666262,-6.858561,6.497696,2.065405,-9.835323,-3.347886,9.717282],[-0.363684,5.243569,1.402271,0.127907,1.883255,-8.847210,6.212307,-2.545434,5.414128],[-1.236260,0.069731,5.534413,-9.270894,5.450606,5.477388,3.961342,-7.067873,-1.875680],[2.497943,-1.192681,4.500800,7.245310,3.032033,-6.476582,6.409411,5.702248,-5.399743]],[[3.220424,-0.198952,-5.697935,5.684594,5.396531,-9.865990,-1.452981,8.602899,-3.719550],[9.348302,8.172910,4.484645,3.791042,7.474285,0.532396,6.008031,-9.564047,4.859723],[3.330269,-6.360735,2.188503,6.488587,5.688463,-5.379451,2.108694,0.617095,-8.294433],[-8.656699,-9.106122,-0.073966,-0.948551,-4.727291,6.237972,6.986891,0.255245,-3.955593],[-3.023334,-3.405036,-1.259656,9.464938,-7.212545,6.134648,-8.377683,-2.732003,2.444810],[-4.924450,4.870226,-5.480541,7.327733,8.700994,-0.442971,1.216408,2.016398,-6.563188],[-7.763821,-0.469025,-1.650221,0.061186,2.500869,1.117603,1.625332,-0.513692,8.378006],[8.336962,-4.711301,8.719959,-5.110638,8.544240,-5.505670,-1.116983,-2.646820,0.720587],[-2.925528,1.833324,-6.755334,-4.946462,-7.387532,-2.924830,0.982048,-0.787113,8.096803],[-9.516683,-4.880605,8.695473,7.981165,1.401791,-7.370329,2.996380,-8.708937,8.367699],[4.182571,-7.395369,-3.079779,4.234567,-3.298781,-6.856319,1.843459,-6.869542,-0.484561],[-0.506477,4.165278,2.957994,-8.623542,-9.436854,6.694303,-3.905576,6.661781,3.736893],[9.204351,3.136275,-0.367460,8.333945,0.910618,-3.177697,-3.817017,6.275141,-2.157523]],[[8.060686,7.920638,4.720619,6.542279,-0.570887,-2.387641,1.567670,-8.619571,-9.139108],[-4.625879,8.013382,2.531478,9.474801,-6.869386,9.833791,-9.328021,-9.945001,-3.996422],[-1.041131,8.232027,-5.428614,-7.574390,9.342349,-8.252704,-0.818641,-5.843038,-5.864418],[7.841076,7.432487,7.427664,-8.959383,0.454455,5.160728,1.542632,-2.518178,-0.716612],[-9.057988,-5.121311,-7.587963,5.413216,4.467449,-3.147861,9.286068,6.981343,9.966475],[2.867879,-6.228278,-0.975962,-5.223325,-9.202216,-0.666567,4.146032,7.248112,1.143031],[3.357199,-2.070803,-8.384221,-8.277925,-4.839735,-7.198750,-8.532942,-9.712775,-5.443898],[0.135014,-2.647757,3.020990,-8.007168,0.720419,-6.907424,7.799938,-5.568174,-7.594343],[-6.849851,-0.156108,3.979044,9.403939,4.509011,-1.475854,-0.693867,-4.904306,1.388298],[-5.667503,2.584460,-1.464650,-2.496620,7.784419,0.731935,0.618755,-7.858075,7.995905],[-1.866692,-7.634158,-1.782902,1.855002,-5.787470,3.716968,-6.589832,6.710621,6.425699],[4.218777,-9.112555,-8.695937,0.579852,1.985192,-0.775714,2.592151,6.025989,-1.774801],[-5.094783,5.204999,5.866206,7.097227,-5.663038,2.178270,-5.932757,9.333170,9.822732]]], dtype = "float32")#candidate|517|(15, 13, 9)|const|float32
bop_518 = relay.greater_equal(var_516.astype('bool'), const_517.astype('bool')) # shape=(15, 13, 9)
output = relay.Tuple([bop_518,])
output2 = relay.Tuple([bop_518,])
func_522 = relay.Function([var_516,], output)
mod['func_522'] = func_522
mod = relay.transform.InferType()(mod)
mutated_mod['func_522'] = func_522
mutated_mod = relay.transform.InferType()(mutated_mod)
var_523 = relay.var("var_523", dtype = "float32", shape = ())#candidate|523|()|var|float32
func_522_call = mutated_mod.get_global_var('func_522')
call_524 = func_522_call(var_523)
output = call_524
func_525 = relay.Function([var_523], output)
mutated_mod['func_525'] = func_525
mutated_mod = relay.transform.InferType()(mutated_mod)
var_540 = relay.var("var_540", dtype = "int64", shape = ())#candidate|540|()|var|int64
var_541 = relay.var("var_541", dtype = "int64", shape = (10, 14))#candidate|541|(10, 14)|var|int64
bop_542 = relay.greater(var_540.astype('bool'), var_541.astype('bool')) # shape=(10, 14)
bop_545 = relay.bitwise_or(var_540.astype('uint32'), bop_542.astype('uint32')) # shape=(10, 14)
var_548 = relay.var("var_548", dtype = "uint32", shape = (10, 14))#candidate|548|(10, 14)|var|uint32
bop_549 = relay.floor_divide(bop_545.astype('float64'), relay.reshape(var_548.astype('float64'), relay.shape_of(bop_545))) # shape=(10, 14)
output = bop_549
output2 = bop_549
func_553 = relay.Function([var_540,var_541,var_548,], output)
mod['func_553'] = func_553
mod = relay.transform.InferType()(mod)
var_554 = relay.var("var_554", dtype = "int64", shape = ())#candidate|554|()|var|int64
var_555 = relay.var("var_555", dtype = "int64", shape = (10, 14))#candidate|555|(10, 14)|var|int64
var_556 = relay.var("var_556", dtype = "uint32", shape = (10, 14))#candidate|556|(10, 14)|var|uint32
output = func_553(var_554,var_555,var_556,)
func_557 = relay.Function([var_554,var_555,var_556,], output)
mutated_mod['func_557'] = func_557
mutated_mod = relay.transform.InferType()(mutated_mod)
var_561 = relay.var("var_561", dtype = "float64", shape = (4,))#candidate|561|(4,)|var|float64
uop_562 = relay.rsqrt(var_561.astype('float64')) # shape=(4,)
bop_564 = relay.bitwise_or(var_561.astype('int8'), relay.reshape(uop_562.astype('int8'), relay.shape_of(var_561))) # shape=(4,)
uop_570 = relay.atan(uop_562.astype('float64')) # shape=(4,)
bop_573 = relay.multiply(uop_570.astype('uint16'), relay.reshape(uop_562.astype('uint16'), relay.shape_of(uop_570))) # shape=(4,)
bop_576 = relay.less_equal(uop_562.astype('bool'), relay.reshape(var_561.astype('bool'), relay.shape_of(uop_562))) # shape=(4,)
bop_580 = relay.divide(bop_573.astype('float32'), relay.reshape(bop_564.astype('float32'), relay.shape_of(bop_573))) # shape=(4,)
uop_583 = relay.sinh(uop_570.astype('float32')) # shape=(4,)
uop_586 = relay.sin(uop_583.astype('float64')) # shape=(4,)
var_589 = relay.var("var_589", dtype = "float64", shape = (4,))#candidate|589|(4,)|var|float64
bop_590 = relay.greater(uop_586.astype('bool'), relay.reshape(var_589.astype('bool'), relay.shape_of(uop_586))) # shape=(4,)
uop_595 = relay.sqrt(bop_590.astype('float32')) # shape=(4,)
bop_597 = relay.floor_mod(uop_583.astype('float64'), relay.reshape(uop_570.astype('float64'), relay.shape_of(uop_583))) # shape=(4,)
bop_603 = relay.minimum(bop_590.astype('uint32'), relay.reshape(uop_570.astype('uint32'), relay.shape_of(bop_590))) # shape=(4,)
var_606 = relay.var("var_606", dtype = "float64", shape = (4,))#candidate|606|(4,)|var|float64
bop_607 = relay.bitwise_and(uop_562.astype('int32'), relay.reshape(var_606.astype('int32'), relay.shape_of(uop_562))) # shape=(4,)
uop_610 = relay.log10(bop_603.astype('float64')) # shape=(4,)
bop_616 = relay.bitwise_xor(uop_610.astype('uint8'), relay.reshape(uop_583.astype('uint8'), relay.shape_of(uop_610))) # shape=(4,)
uop_619 = relay.asinh(bop_616.astype('float64')) # shape=(4,)
var_621 = relay.var("var_621", dtype = "float64", shape = (4,))#candidate|621|(4,)|var|float64
bop_622 = relay.subtract(uop_619.astype('uint8'), relay.reshape(var_621.astype('uint8'), relay.shape_of(uop_619))) # shape=(4,)
bop_625 = relay.greater(bop_622.astype('bool'), relay.reshape(bop_580.astype('bool'), relay.shape_of(bop_622))) # shape=(4,)
uop_628 = relay.asinh(bop_597.astype('float32')) # shape=(4,)
bop_631 = relay.floor_divide(uop_595.astype('float32'), relay.reshape(bop_597.astype('float32'), relay.shape_of(uop_595))) # shape=(4,)
bop_634 = relay.not_equal(bop_625.astype('bool'), relay.reshape(bop_616.astype('bool'), relay.shape_of(bop_625))) # shape=(4,)
output = relay.Tuple([bop_576,bop_607,uop_628,bop_631,bop_634,])
output2 = relay.Tuple([bop_576,bop_607,uop_628,bop_631,bop_634,])
func_637 = relay.Function([var_561,var_589,var_606,var_621,], output)
mod['func_637'] = func_637
mod = relay.transform.InferType()(mod)
mutated_mod['func_637'] = func_637
mutated_mod = relay.transform.InferType()(mutated_mod)
func_637_call = mutated_mod.get_global_var('func_637')
var_639 = relay.var("var_639", dtype = "float64", shape = (4,))#candidate|639|(4,)|var|float64
var_640 = relay.var("var_640", dtype = "float64", shape = (4,))#candidate|640|(4,)|var|float64
var_641 = relay.var("var_641", dtype = "float64", shape = (4,))#candidate|641|(4,)|var|float64
var_642 = relay.var("var_642", dtype = "float64", shape = (4,))#candidate|642|(4,)|var|float64
call_638 = func_637_call(var_639,var_640,var_641,var_642,)
output = call_638
func_643 = relay.Function([var_639,var_640,var_641,var_642,], output)
mutated_mod['func_643'] = func_643
mutated_mod = relay.transform.InferType()(mutated_mod)
var_661 = relay.var("var_661", dtype = "float32", shape = (15, 8))#candidate|661|(15, 8)|var|float32
var_662 = relay.var("var_662", dtype = "float32", shape = (15, 8))#candidate|662|(15, 8)|var|float32
bop_663 = relay.maximum(var_661.astype('float32'), relay.reshape(var_662.astype('float32'), relay.shape_of(var_661))) # shape=(15, 8)
var_666 = relay.var("var_666", dtype = "float32", shape = (15, 8))#candidate|666|(15, 8)|var|float32
bop_667 = relay.less(var_661.astype('bool'), relay.reshape(var_666.astype('bool'), relay.shape_of(var_661))) # shape=(15, 8)
var_670 = relay.var("var_670", dtype = "float32", shape = (15, 8))#candidate|670|(15, 8)|var|float32
bop_671 = relay.logical_and(bop_663.astype('bool'), relay.reshape(var_670.astype('bool'), relay.shape_of(bop_663))) # shape=(15, 8)
uop_674 = relay.exp(bop_663.astype('float32')) # shape=(15, 8)
uop_676 = relay.log2(bop_671.astype('float64')) # shape=(15, 8)
uop_679 = relay.sinh(uop_674.astype('float64')) # shape=(15, 8)
bop_681 = relay.equal(uop_674.astype('bool'), relay.reshape(var_666.astype('bool'), relay.shape_of(uop_674))) # shape=(15, 8)
output = relay.Tuple([bop_667,uop_676,uop_679,bop_681,])
output2 = relay.Tuple([bop_667,uop_676,uop_679,bop_681,])
func_686 = relay.Function([var_661,var_662,var_666,var_670,], output)
mod['func_686'] = func_686
mod = relay.transform.InferType()(mod)
mutated_mod['func_686'] = func_686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_686_call = mutated_mod.get_global_var('func_686')
var_688 = relay.var("var_688", dtype = "float32", shape = (15, 8))#candidate|688|(15, 8)|var|float32
var_689 = relay.var("var_689", dtype = "float32", shape = (15, 8))#candidate|689|(15, 8)|var|float32
var_690 = relay.var("var_690", dtype = "float32", shape = (15, 8))#candidate|690|(15, 8)|var|float32
var_691 = relay.var("var_691", dtype = "float32", shape = (15, 8))#candidate|691|(15, 8)|var|float32
call_687 = func_686_call(var_688,var_689,var_690,var_691,)
output = call_687
func_692 = relay.Function([var_688,var_689,var_690,var_691,], output)
mutated_mod['func_692'] = func_692
mutated_mod = relay.transform.InferType()(mutated_mod)
var_696 = relay.var("var_696", dtype = "uint32", shape = (4, 15))#candidate|696|(4, 15)|var|uint32
var_697 = relay.var("var_697", dtype = "uint32", shape = (4, 15))#candidate|697|(4, 15)|var|uint32
bop_698 = relay.not_equal(var_696.astype('bool'), relay.reshape(var_697.astype('bool'), relay.shape_of(var_696))) # shape=(4, 15)
uop_701 = relay.tan(bop_698.astype('float64')) # shape=(4, 15)
uop_703 = relay.exp(uop_701.astype('float32')) # shape=(4, 15)
output = relay.Tuple([uop_703,])
output2 = relay.Tuple([uop_703,])
F = relay.Function([var_696,var_697,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_696,var_697,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_696= np.array([[-8,-6,-4,-1,-2,4,-5,2,7,7,-1,5,-4,-7,-5],[-3,9,-5,4,4,7,7,-9,7,10,-1,4,8,-7,5],[2,-3,5,-6,8,-5,7,8,-3,-2,-10,-2,1,2,-9],[-9,3,1,-2,9,4,6,7,9,-8,1,-4,-2,-6,-2]], dtype='uint32')
module1.set_input('var_696', input_696)
input_697= np.array([[-1,5,-3,-4,-1,8,6,-9,7,-1,7,-2,-6,5,-1],[7,7,6,8,8,10,7,9,6,-3,10,-10,2,-9,8],[-5,-1,-8,-6,-6,6,-2,3,10,-9,8,-5,-4,-4,6],[-2,-6,-7,10,1,-10,2,-1,-3,-4,-3,2,1,-9,-10]], dtype='uint32')
module1.set_input('var_697', input_697)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_696, input_697, )
res3 = intrp3.evaluate()(input_696, input_697, )
res4 = intrp4.evaluate()(input_696, input_697, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_696', input_696)
module5.set_input('var_697', input_697)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_696, input_697, )
res7 = intrp7.evaluate()(input_696, input_697, )
res8 = intrp8.evaluate()(input_696, input_697, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_696', input_696)
module9.set_input('var_697', input_697)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_696, input_697, )
res11 = intrp11.evaluate()(input_696, input_697, )
res12 = intrp12.evaluate()(input_696, input_697, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_696', input_696)
module13.set_input('var_697', input_697)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_696, input_697, )
res15 = intrp15.evaluate()(input_696, input_697, )
res16 = intrp16.evaluate()(input_696, input_697, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_696', input_696)
module17.set_input('var_697', input_697)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_696, input_697, )
res19 = intrp19.evaluate()(input_696, input_697, )
res20 = intrp20.evaluate()(input_696, input_697, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_696', input_696)
module21.set_input('var_697', input_697)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_696, input_697, )
res23 = intrp23.evaluate()(input_696, input_697, )
res24 = intrp24.evaluate()(input_696, input_697, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''49: TVMFuncCall
48: _ZNSt17_Function_handlerIFvN3tvm7run
47: tvm::runtime::TypedPackedFunc<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>::AssignTypedLambda<tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)>(tvm::runtime::TypedPackedFunc<tvm::runtime::ObjectRef (tvm::runtime::Array<tvm::RelayExpr, void>)> (*)(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
46: tvm::relay::EvalFunction(tvm::IRModule, tvm::RelayExpr, DLDevice, tvm::Target)
45: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
44: tvm::transform::Pass::operator()(tvm::IRModule) const
43: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
42: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
41: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
40: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
39: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
38: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
37: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
36: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
35: tvm::transform::Pass::operator()(tvm::IRModule) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
26: _ZN3tvm5relay9transform22Devic
25: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
24: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
21: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
20: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
19: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
18: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
17: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
16: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
15: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
14: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
13: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
12: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
11: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
9: tvm::relay::tec::TECompilerImpl::LowerShapeFunc(tvm::relay::tec::CCacheKey const&)
8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
2: _ZZN3tvm5relay11ExprFunctorIFNS_7runtime
1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
3: TVMFuncCall
2: _ZNSt17_Function_handlerIFvN3tvm7run
1: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
0: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
4: TVMFuncCall
3: _ZNSt17_Function_handlerIFvN3tvm7run
2: tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}>(tvm::tir::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#103}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
0: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const

'''