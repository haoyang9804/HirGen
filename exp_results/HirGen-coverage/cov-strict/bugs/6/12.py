import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = (1,))#candidate|0|(1,)|var|float64
uop_1 = relay.asinh(var_0.astype('float64')) # shape=(1,)
uop_3 = relay.atanh(uop_1.astype('float32')) # shape=(1,)
uop_5 = relay.atan(uop_3.astype('float32')) # shape=(1,)
uop_7 = relay.cos(uop_3.astype('float32')) # shape=(1,)
var_9 = relay.var("var_9", dtype = "float32", shape = (3,))#candidate|9|(3,)|var|float32
bop_10 = relay.bitwise_or(uop_5.astype('uint8'), var_9.astype('uint8')) # shape=(3,)
uop_13 = relay.sin(uop_3.astype('float64')) # shape=(1,)
uop_15 = relay.sigmoid(uop_3.astype('float32')) # shape=(1,)
uop_17 = relay.log(uop_13.astype('float32')) # shape=(1,)
uop_19 = relay.exp(bop_10.astype('float32')) # shape=(3,)
bop_21 = relay.subtract(uop_1.astype('uint64'), relay.reshape(uop_5.astype('uint64'), relay.shape_of(uop_1))) # shape=(1,)
var_24 = relay.var("var_24", dtype = "float64", shape = (6,))#candidate|24|(6,)|var|float64
bop_25 = relay.maximum(uop_13.astype('uint64'), var_24.astype('uint64')) # shape=(6,)
output = relay.Tuple([uop_7,uop_15,uop_17,uop_19,bop_21,bop_25,])
output2 = relay.Tuple([uop_7,uop_15,uop_17,uop_19,bop_21,bop_25,])
func_28 = relay.Function([var_0,var_9,var_24,], output)
mod['func_28'] = func_28
mod = relay.transform.InferType()(mod)
mutated_mod['func_28'] = func_28
mutated_mod = relay.transform.InferType()(mutated_mod)
func_28_call = mutated_mod.get_global_var('func_28')
var_30 = relay.var("var_30", dtype = "float64", shape = (1,))#candidate|30|(1,)|var|float64
var_31 = relay.var("var_31", dtype = "float32", shape = (3,))#candidate|31|(3,)|var|float32
var_32 = relay.var("var_32", dtype = "float64", shape = (6,))#candidate|32|(6,)|var|float64
call_29 = func_28_call(var_30,var_31,var_32,)
output = call_29
func_33 = relay.Function([var_30,var_31,var_32,], output)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
var_35 = relay.var("var_35", dtype = "float32", shape = ())#candidate|35|()|var|float32
uop_36 = relay.atanh(var_35.astype('float32')) # shape=()
var_38 = relay.var("var_38", dtype = "float32", shape = (10,))#candidate|38|(10,)|var|float32
bop_39 = relay.add(uop_36.astype('int32'), var_38.astype('int32')) # shape=(10,)
uop_42 = relay.log2(bop_39.astype('float64')) # shape=(10,)
var_44 = relay.var("var_44", dtype = "float32", shape = (5, 16, 3))#candidate|44|(5, 16, 3)|var|float32
bop_45 = relay.greater_equal(uop_36.astype('bool'), var_44.astype('bool')) # shape=(5, 16, 3)
bop_48 = relay.divide(uop_42.astype('float64'), relay.reshape(var_38.astype('float64'), relay.shape_of(uop_42))) # shape=(10,)
var_51 = relay.var("var_51", dtype = "float32", shape = (5, 11))#candidate|51|(5, 11)|var|float32
bop_52 = relay.bitwise_or(uop_36.astype('int8'), var_51.astype('int8')) # shape=(5, 11)
bop_55 = relay.bitwise_or(bop_39.astype('int16'), var_35.astype('int16')) # shape=(10,)
bop_58 = relay.mod(bop_39.astype('float32'), relay.reshape(bop_55.astype('float32'), relay.shape_of(bop_39))) # shape=(10,)
bop_61 = relay.left_shift(uop_36.astype('int64'), bop_48.astype('int64')) # shape=(10,)
uop_64 = relay.sigmoid(bop_48.astype('float64')) # shape=(10,)
output = relay.Tuple([bop_45,bop_52,bop_58,bop_61,uop_64,])
output2 = relay.Tuple([bop_45,bop_52,bop_58,bop_61,uop_64,])
func_66 = relay.Function([var_35,var_38,var_44,var_51,], output)
mod['func_66'] = func_66
mod = relay.transform.InferType()(mod)
var_67 = relay.var("var_67", dtype = "float32", shape = ())#candidate|67|()|var|float32
var_68 = relay.var("var_68", dtype = "float32", shape = (10,))#candidate|68|(10,)|var|float32
var_69 = relay.var("var_69", dtype = "float32", shape = (5, 16, 3))#candidate|69|(5, 16, 3)|var|float32
var_70 = relay.var("var_70", dtype = "float32", shape = (5, 11))#candidate|70|(5, 11)|var|float32
output = func_66(var_67,var_68,var_69,var_70,)
func_71 = relay.Function([var_67,var_68,var_69,var_70,], output)
mutated_mod['func_71'] = func_71
mutated_mod = relay.transform.InferType()(mutated_mod)
var_73 = relay.var("var_73", dtype = "float32", shape = (15,))#candidate|73|(15,)|var|float32
uop_74 = relay.sigmoid(var_73.astype('float32')) # shape=(15,)
uop_76 = relay.asinh(uop_74.astype('float32')) # shape=(15,)
uop_78 = relay.log2(uop_74.astype('float64')) # shape=(15,)
bop_80 = relay.multiply(var_73.astype('float64'), relay.reshape(uop_74.astype('float64'), relay.shape_of(var_73))) # shape=(15,)
bop_83 = relay.equal(uop_78.astype('bool'), relay.reshape(uop_74.astype('bool'), relay.shape_of(uop_78))) # shape=(15,)
var_86 = relay.var("var_86", dtype = "float64", shape = (15,))#candidate|86|(15,)|var|float64
bop_87 = relay.minimum(bop_80.astype('uint8'), relay.reshape(var_86.astype('uint8'), relay.shape_of(bop_80))) # shape=(15,)
var_90 = relay.var("var_90", dtype = "float64", shape = (15,))#candidate|90|(15,)|var|float64
bop_91 = relay.divide(bop_80.astype('float64'), relay.reshape(var_90.astype('float64'), relay.shape_of(bop_80))) # shape=(15,)
var_94 = relay.var("var_94", dtype = "float64", shape = (15,))#candidate|94|(15,)|var|float64
bop_95 = relay.logical_or(uop_78.astype('bool'), relay.reshape(var_94.astype('bool'), relay.shape_of(uop_78))) # shape=(15,)
var_98 = relay.var("var_98", dtype = "float64", shape = (15,))#candidate|98|(15,)|var|float64
bop_99 = relay.left_shift(bop_91.astype('int8'), relay.reshape(var_98.astype('int8'), relay.shape_of(bop_91))) # shape=(15,)
var_102 = relay.var("var_102", dtype = "float32", shape = (15,))#candidate|102|(15,)|var|float32
bop_103 = relay.greater(uop_76.astype('bool'), relay.reshape(var_102.astype('bool'), relay.shape_of(uop_76))) # shape=(15,)
var_106 = relay.var("var_106", dtype = "bool", shape = (15,))#candidate|106|(15,)|var|bool
bop_107 = relay.bitwise_or(bop_103.astype('uint8'), relay.reshape(var_106.astype('uint8'), relay.shape_of(bop_103))) # shape=(15,)
const_110 = relay.const([False,True,False,False,False,True,False,True,True,False,False,True,False,True,False], dtype = "bool")#candidate|110|(15,)|const|bool
bop_111 = relay.minimum(bop_103.astype('uint8'), relay.reshape(const_110.astype('uint8'), relay.shape_of(bop_103))) # shape=(15,)
uop_114 = relay.atanh(bop_87.astype('float64')) # shape=(15,)
uop_116 = relay.log(bop_80.astype('float64')) # shape=(15,)
func_28_call = mod.get_global_var('func_28')
func_33_call = mutated_mod.get_global_var('func_33')
var_119 = relay.var("var_119", dtype = "float64", shape = (1, 1))#candidate|119|(1, 1)|var|float64
const_120 = relay.const([[-7.940401,-8.937731,8.116458]], dtype = "float32")#candidate|120|(1, 3)|const|float32
var_121 = relay.var("var_121", dtype = "float64", shape = (6,))#candidate|121|(6,)|var|float64
call_118 = relay.TupleGetItem(func_28_call(relay.reshape(var_119.astype('float64'), [1,]), relay.reshape(const_120.astype('float32'), [3,]), relay.reshape(var_121.astype('float64'), [6,]), ), 3)
call_122 = relay.TupleGetItem(func_33_call(relay.reshape(var_119.astype('float64'), [1,]), relay.reshape(const_120.astype('float32'), [3,]), relay.reshape(var_121.astype('float64'), [6,]), ), 3)
const_123 = relay.const([-4.275142,8.739574,5.670979,-5.811900,2.251429,-0.523245,-2.836839,-1.853413,-9.756403,-3.823083,8.780309,-8.732286,-1.962874,-3.488785,-2.592829], dtype = "float64")#candidate|123|(15,)|const|float64
bop_124 = relay.mod(uop_114.astype('float64'), relay.reshape(const_123.astype('float64'), relay.shape_of(uop_114))) # shape=(15,)
bop_127 = relay.bitwise_xor(bop_124.astype('uint16'), relay.reshape(uop_114.astype('uint16'), relay.shape_of(bop_124))) # shape=(15,)
uop_130 = relay.sqrt(bop_91.astype('float64')) # shape=(15,)
uop_132 = relay.atan(bop_80.astype('float64')) # shape=(15,)
var_134 = relay.var("var_134", dtype = "uint8", shape = (15,))#candidate|134|(15,)|var|uint8
bop_135 = relay.equal(bop_87.astype('bool'), relay.reshape(var_134.astype('bool'), relay.shape_of(bop_87))) # shape=(15,)
uop_138 = relay.log10(const_123.astype('float64')) # shape=(15,)
uop_140 = relay.log(uop_74.astype('float32')) # shape=(15,)
bop_142 = relay.logical_and(call_118.astype('bool'), relay.reshape(const_120.astype('bool'), relay.shape_of(call_118))) # shape=(3,)
bop_145 = relay.logical_and(call_122.astype('bool'), relay.reshape(const_120.astype('bool'), relay.shape_of(call_122))) # shape=(3,)
uop_146 = relay.exp(uop_140.astype('float64')) # shape=(15,)
bop_148 = relay.not_equal(uop_146.astype('bool'), relay.reshape(bop_135.astype('bool'), relay.shape_of(uop_146))) # shape=(15,)
uop_151 = relay.log2(bop_91.astype('float64')) # shape=(15,)
uop_153 = relay.atan(bop_103.astype('float32')) # shape=(15,)
uop_155 = relay.log(bop_91.astype('float32')) # shape=(15,)
bop_157 = relay.add(var_119.astype('float32'), var_102.astype('float32')) # shape=(1, 15)
var_160 = relay.var("var_160", dtype = "float64", shape = (15,))#candidate|160|(15,)|var|float64
bop_161 = relay.less_equal(uop_130.astype('bool'), relay.reshape(var_160.astype('bool'), relay.shape_of(uop_130))) # shape=(15,)
uop_164 = relay.cos(bop_142.astype('float64')) # shape=(3,)
uop_166 = relay.cos(bop_145.astype('float64')) # shape=(3,)
bop_167 = relay.power(uop_146.astype('float64'), relay.reshape(bop_148.astype('float64'), relay.shape_of(uop_146))) # shape=(15,)
bop_170 = relay.bitwise_xor(bop_87.astype('int8'), relay.reshape(var_86.astype('int8'), relay.shape_of(bop_87))) # shape=(15,)
const_173 = relay.const([-1.494474,8.342800,0.520301,-3.532623,-4.544413,-1.173982,5.567539,1.923805,-2.300866,2.765008,8.152557,6.785080,-9.847960,4.208674,3.480990], dtype = "float32")#candidate|173|(15,)|const|float32
bop_174 = relay.add(uop_153.astype('int8'), relay.reshape(const_173.astype('int8'), relay.shape_of(uop_153))) # shape=(15,)
var_177 = relay.var("var_177", dtype = "uint8", shape = (15,))#candidate|177|(15,)|var|uint8
bop_178 = relay.subtract(bop_111.astype('int16'), relay.reshape(var_177.astype('int16'), relay.shape_of(bop_111))) # shape=(15,)
bop_181 = relay.logical_and(bop_174.astype('bool'), relay.reshape(bop_107.astype('bool'), relay.shape_of(bop_174))) # shape=(15,)
uop_184 = relay.log2(uop_153.astype('float64')) # shape=(15,)
uop_186 = relay.log(uop_184.astype('float32')) # shape=(15,)
bop_188 = relay.logical_or(uop_186.astype('bool'), relay.reshape(bop_99.astype('bool'), relay.shape_of(uop_186))) # shape=(15,)
bop_191 = relay.floor_mod(uop_186.astype('float64'), relay.reshape(var_160.astype('float64'), relay.shape_of(uop_186))) # shape=(15,)
bop_194 = relay.logical_and(uop_186.astype('bool'), relay.reshape(uop_130.astype('bool'), relay.shape_of(uop_186))) # shape=(15,)
uop_197 = relay.rsqrt(uop_184.astype('float32')) # shape=(15,)
bop_199 = relay.mod(uop_184.astype('float64'), relay.reshape(var_102.astype('float64'), relay.shape_of(uop_184))) # shape=(15,)
bop_202 = relay.floor_mod(bop_199.astype('float64'), relay.reshape(uop_186.astype('float64'), relay.shape_of(bop_199))) # shape=(15,)
bop_205 = relay.bitwise_or(uop_197.astype('uint32'), relay.reshape(var_160.astype('uint32'), relay.shape_of(uop_197))) # shape=(15,)
var_208 = relay.var("var_208", dtype = "bool", shape = (15,))#candidate|208|(15,)|var|bool
bop_209 = relay.maximum(bop_188.astype('int64'), relay.reshape(var_208.astype('int64'), relay.shape_of(bop_188))) # shape=(15,)
uop_212 = relay.sqrt(uop_184.astype('float32')) # shape=(15,)
output = relay.Tuple([bop_83,bop_95,uop_116,var_121,bop_127,uop_132,uop_138,uop_151,uop_155,bop_157,bop_161,uop_164,bop_167,bop_170,bop_178,bop_181,bop_191,bop_194,bop_202,bop_205,bop_209,uop_212,])
output2 = relay.Tuple([bop_83,bop_95,uop_116,var_121,bop_127,uop_132,uop_138,uop_151,uop_155,bop_157,bop_161,uop_166,bop_167,bop_170,bop_178,bop_181,bop_191,bop_194,bop_202,bop_205,bop_209,uop_212,])
func_214 = relay.Function([var_73,var_86,var_90,var_94,var_98,var_102,var_106,var_119,var_121,var_134,var_160,var_177,var_208,], output)
mod['func_214'] = func_214
mod = relay.transform.InferType()(mod)
var_215 = relay.var("var_215", dtype = "float32", shape = (15,))#candidate|215|(15,)|var|float32
var_216 = relay.var("var_216", dtype = "float64", shape = (15,))#candidate|216|(15,)|var|float64
var_217 = relay.var("var_217", dtype = "float64", shape = (15,))#candidate|217|(15,)|var|float64
var_218 = relay.var("var_218", dtype = "float64", shape = (15,))#candidate|218|(15,)|var|float64
var_219 = relay.var("var_219", dtype = "float64", shape = (15,))#candidate|219|(15,)|var|float64
var_220 = relay.var("var_220", dtype = "float32", shape = (15,))#candidate|220|(15,)|var|float32
var_221 = relay.var("var_221", dtype = "bool", shape = (15,))#candidate|221|(15,)|var|bool
var_222 = relay.var("var_222", dtype = "float64", shape = (1, 1))#candidate|222|(1, 1)|var|float64
var_223 = relay.var("var_223", dtype = "float64", shape = (6,))#candidate|223|(6,)|var|float64
var_224 = relay.var("var_224", dtype = "uint8", shape = (15,))#candidate|224|(15,)|var|uint8
var_225 = relay.var("var_225", dtype = "float64", shape = (15,))#candidate|225|(15,)|var|float64
var_226 = relay.var("var_226", dtype = "uint8", shape = (15,))#candidate|226|(15,)|var|uint8
var_227 = relay.var("var_227", dtype = "bool", shape = (15,))#candidate|227|(15,)|var|bool
output = func_214(var_215,var_216,var_217,var_218,var_219,var_220,var_221,var_222,var_223,var_224,var_225,var_226,var_227,)
func_228 = relay.Function([var_215,var_216,var_217,var_218,var_219,var_220,var_221,var_222,var_223,var_224,var_225,var_226,var_227,], output)
mutated_mod['func_228'] = func_228
mutated_mod = relay.transform.InferType()(mutated_mod)
const_230 = relay.const(-6.005535, dtype = "float64")#candidate|230|()|const|float64
var_231 = relay.var("var_231", dtype = "float64", shape = ())#candidate|231|()|var|float64
bop_232 = relay.less_equal(const_230.astype('bool'), var_231.astype('bool')) # shape=()
bop_235 = relay.floor_divide(const_230.astype('float32'), var_231.astype('float32')) # shape=()
uop_238 = relay.acosh(var_231.astype('float32')) # shape=()
bop_240 = relay.left_shift(uop_238.astype('int64'), const_230.astype('int64')) # shape=()
bop_243 = relay.multiply(const_230.astype('float32'), bop_235.astype('float32')) # shape=()
const_246 = relay.const([[-4.229185,-7.589535,6.232010],[-1.598457,-0.600400,-2.334274]], dtype = "float64")#candidate|246|(2, 3)|const|float64
bop_247 = relay.maximum(const_230.astype('int16'), const_246.astype('int16')) # shape=(2, 3)
bop_250 = relay.minimum(uop_238.astype('int64'), bop_240.astype('int64')) # shape=()
bop_253 = relay.greater_equal(bop_247.astype('bool'), bop_240.astype('bool')) # shape=(2, 3)
uop_256 = relay.rsqrt(bop_240.astype('float32')) # shape=()
uop_258 = relay.log2(uop_256.astype('float32')) # shape=()
bop_260 = relay.equal(uop_258.astype('bool'), bop_235.astype('bool')) # shape=()
bop_263 = relay.subtract(uop_258.astype('int64'), bop_235.astype('int64')) # shape=()
uop_266 = relay.sinh(bop_253.astype('float64')) # shape=(2, 3)
uop_268 = relay.rsqrt(bop_247.astype('float64')) # shape=(2, 3)
uop_270 = relay.sinh(bop_263.astype('float32')) # shape=()
bop_272 = relay.add(uop_270.astype('uint16'), uop_268.astype('uint16')) # shape=(2, 3)
bop_275 = relay.left_shift(uop_258.astype('uint16'), bop_272.astype('uint16')) # shape=(2, 3)
bop_278 = relay.maximum(const_230.astype('int8'), const_246.astype('int8')) # shape=(2, 3)
bop_281 = relay.divide(bop_275.astype('float32'), uop_256.astype('float32')) # shape=(2, 3)
bop_284 = relay.floor_mod(uop_266.astype('float32'), bop_250.astype('float32')) # shape=(2, 3)
uop_287 = relay.acosh(bop_263.astype('float64')) # shape=()
bop_289 = relay.left_shift(uop_270.astype('int32'), bop_275.astype('int32')) # shape=(2, 3)
uop_292 = relay.log10(uop_270.astype('float32')) # shape=()
bop_294 = relay.greater(uop_292.astype('bool'), bop_243.astype('bool')) # shape=()
bop_297 = relay.logical_xor(bop_294.astype('uint32'), uop_238.astype('uint32')) # shape=()
uop_300 = relay.sin(bop_294.astype('float64')) # shape=()
uop_302 = relay.sqrt(uop_300.astype('float64')) # shape=()
uop_304 = relay.log(uop_300.astype('float32')) # shape=()
bop_306 = relay.left_shift(bop_294.astype('uint32'), uop_287.astype('uint32')) # shape=()
uop_309 = relay.erf(uop_300.astype('float64')) # shape=()
uop_311 = relay.log(uop_302.astype('float64')) # shape=()
bop_313 = relay.bitwise_and(uop_311.astype('uint32'), bop_275.astype('uint32')) # shape=(2, 3)
var_316 = relay.var("var_316", dtype = "uint32", shape = (2, 3))#candidate|316|(2, 3)|var|uint32
bop_317 = relay.power(bop_313.astype('float32'), relay.reshape(var_316.astype('float32'), relay.shape_of(bop_313))) # shape=(2, 3)
output = relay.Tuple([bop_232,bop_260,bop_278,bop_281,bop_284,bop_289,bop_297,uop_304,bop_306,uop_309,bop_317,])
output2 = relay.Tuple([bop_232,bop_260,bop_278,bop_281,bop_284,bop_289,bop_297,uop_304,bop_306,uop_309,bop_317,])
F = relay.Function([var_231,var_316,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_231,var_316,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_231= np.array(7.301550, dtype='float64')
module1.set_input('var_231', input_231)
input_316= np.array([[-7,-7,-9],[-4,-9,4]], dtype='uint32')
module1.set_input('var_316', input_316)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_231, input_316, )
res3 = intrp3.evaluate()(input_231, input_316, )
res4 = intrp4.evaluate()(input_231, input_316, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_231', input_231)
module5.set_input('var_316', input_316)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_231, input_316, )
res7 = intrp7.evaluate()(input_231, input_316, )
res8 = intrp8.evaluate()(input_231, input_316, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_231', input_231)
module9.set_input('var_316', input_316)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_231, input_316, )
res11 = intrp11.evaluate()(input_231, input_316, )
res12 = intrp12.evaluate()(input_231, input_316, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_231', input_231)
module13.set_input('var_316', input_316)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_231, input_316, )
res15 = intrp15.evaluate()(input_231, input_316, )
res16 = intrp16.evaluate()(input_231, input_316, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_231', input_231)
module17.set_input('var_316', input_316)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_231, input_316, )
res19 = intrp19.evaluate()(input_231, input_316, )
res20 = intrp20.evaluate()(input_231, input_316, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_231', input_231)
module21.set_input('var_316', input_316)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_231, input_316, )
res23 = intrp23.evaluate()(input_231, input_316, )
res24 = intrp24.evaluate()(input_231, input_316, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''70: TVMFuncCall
69: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
68: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
67: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
66: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
65: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
64: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
63: tvm::transform::Pass::operator()(tvm::IRModule) const
62: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
61: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
60: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
59: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
57: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
56: tvm::transform::Pass::operator()(tvm::IRModule) const
55: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
54: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
53: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
52: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
51: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
50: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
49: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
48: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
47: _ZN3tvm5relay9transform22Devic
46: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
45: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
44: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
43: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
42: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
41: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
40: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
39: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
38: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
37: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
36: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
35: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
34: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
33: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
32: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
26: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
25: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
24: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
23: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
22: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
20: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
19: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
18: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
17: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
16: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
15: tvm::transform::Pass::operator()(tvm::IRModule) const
14: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
13: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
12: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
11: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
10: _ZNSt17_Function_handlerIFvN3tvm7
9: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
8: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
7: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
6: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
1: tvm::operator<<(tvm::PrimExpr, tvm::PrimExpr)
0: tvm::left_shift(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)

'''