import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "bool", shape = (8, 8))#candidate|0|(8, 8)|var|bool
var_1 = relay.var("var_1", dtype = "bool", shape = (8, 8))#candidate|1|(8, 8)|var|bool
bop_2 = relay.logical_and(var_0.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(var_0))) # shape=(8, 8)
uop_5 = relay.atan(bop_2.astype('float64')) # shape=(8, 8)
uop_7 = relay.cosh(uop_5.astype('float64')) # shape=(8, 8)
var_9 = relay.var("var_9", dtype = "bool", shape = (8, 8))#candidate|9|(8, 8)|var|bool
bop_10 = relay.bitwise_xor(var_1.astype('uint32'), relay.reshape(var_9.astype('uint32'), relay.shape_of(var_1))) # shape=(8, 8)
uop_13 = relay.sigmoid(uop_7.astype('float64')) # shape=(8, 8)
bop_15 = relay.less_equal(uop_13.astype('bool'), relay.reshape(uop_7.astype('bool'), relay.shape_of(uop_13))) # shape=(8, 8)
var_18 = relay.var("var_18", dtype = "uint32", shape = (8, 8))#candidate|18|(8, 8)|var|uint32
bop_19 = relay.greater_equal(bop_10.astype('bool'), relay.reshape(var_18.astype('bool'), relay.shape_of(bop_10))) # shape=(8, 8)
var_22 = relay.var("var_22", dtype = "float64", shape = (8, 8))#candidate|22|(8, 8)|var|float64
bop_23 = relay.greater_equal(uop_7.astype('bool'), relay.reshape(var_22.astype('bool'), relay.shape_of(uop_7))) # shape=(8, 8)
uop_26 = relay.acos(uop_13.astype('float32')) # shape=(8, 8)
uop_28 = relay.cos(uop_26.astype('float32')) # shape=(8, 8)
bop_30 = relay.logical_xor(uop_28.astype('int32'), relay.reshape(uop_13.astype('int32'), relay.shape_of(uop_28))) # shape=(8, 8)
bop_33 = relay.equal(uop_13.astype('bool'), relay.reshape(var_1.astype('bool'), relay.shape_of(uop_13))) # shape=(8, 8)
uop_36 = relay.exp(bop_33.astype('float64')) # shape=(8, 8)
uop_38 = relay.sinh(uop_26.astype('float64')) # shape=(8, 8)
uop_40 = relay.log10(bop_15.astype('float64')) # shape=(8, 8)
uop_42 = relay.log2(bop_30.astype('float32')) # shape=(8, 8)
output = relay.Tuple([bop_19,bop_23,uop_36,uop_38,uop_40,uop_42,])
output2 = relay.Tuple([bop_19,bop_23,uop_36,uop_38,uop_40,uop_42,])
func_44 = relay.Function([var_0,var_1,var_9,var_18,var_22,], output)
mod['func_44'] = func_44
mod = relay.transform.InferType()(mod)
mutated_mod['func_44'] = func_44
mutated_mod = relay.transform.InferType()(mutated_mod)
func_44_call = mutated_mod.get_global_var('func_44')
var_46 = relay.var("var_46", dtype = "bool", shape = (8, 8))#candidate|46|(8, 8)|var|bool
var_47 = relay.var("var_47", dtype = "bool", shape = (8, 8))#candidate|47|(8, 8)|var|bool
var_48 = relay.var("var_48", dtype = "bool", shape = (8, 8))#candidate|48|(8, 8)|var|bool
var_49 = relay.var("var_49", dtype = "uint32", shape = (8, 8))#candidate|49|(8, 8)|var|uint32
var_50 = relay.var("var_50", dtype = "float64", shape = (8, 8))#candidate|50|(8, 8)|var|float64
call_45 = func_44_call(var_46,var_47,var_48,var_49,var_50,)
output = call_45
func_51 = relay.Function([var_46,var_47,var_48,var_49,var_50,], output)
mutated_mod['func_51'] = func_51
mutated_mod = relay.transform.InferType()(mutated_mod)
const_53 = relay.const([[[-6.608725,-9.434582,3.012882,7.013889,-3.201136]],[[8.664824,-3.687095,9.303852,6.066372,-4.307110]],[[2.676622,3.232637,-3.459626,-7.219593,-0.518945]],[[-5.814417,-5.447964,5.695680,7.569788,-5.788973]],[[-9.762879,-4.639293,2.497394,-2.490184,6.100894]],[[4.652834,7.817559,-7.577647,7.931881,6.008211]],[[-5.267592,1.275476,-2.084784,-3.621319,9.112021]],[[-9.139226,-1.075309,0.358069,-5.506625,-6.196292]],[[-5.583837,-8.213027,-0.254672,-7.611843,1.577661]],[[-1.184421,3.798391,3.365185,-6.382049,6.992558]],[[-2.704080,-7.778687,-7.655513,-1.387647,4.108500]],[[-9.756074,-6.354883,5.610542,6.559362,9.911326]],[[-0.668601,-1.340895,7.281261,3.036027,7.026597]],[[0.150279,-3.620440,-0.706942,1.983998,5.695359]],[[-2.297278,6.491072,-5.494700,7.528027,-5.286429]],[[1.503286,-1.682397,-6.409168,6.624022,-6.899659]]], dtype = "float64")#candidate|53|(16, 1, 5)|const|float64
uop_54 = relay.atan(const_53.astype('float64')) # shape=(16, 1, 5)
uop_56 = relay.log(uop_54.astype('float64')) # shape=(16, 1, 5)
var_58 = relay.var("var_58", dtype = "float64", shape = (16, 2, 5))#candidate|58|(16, 2, 5)|var|float64
bop_59 = relay.floor_mod(uop_56.astype('float64'), var_58.astype('float64')) # shape=(16, 2, 5)
uop_62 = relay.log10(bop_59.astype('float32')) # shape=(16, 2, 5)
bop_64 = relay.greater_equal(uop_54.astype('bool'), relay.reshape(const_53.astype('bool'), relay.shape_of(uop_54))) # shape=(16, 1, 5)
uop_67 = relay.asinh(uop_62.astype('float64')) # shape=(16, 2, 5)
bop_69 = relay.mod(uop_62.astype('float32'), uop_54.astype('float32')) # shape=(16, 2, 5)
func_44_call = mod.get_global_var('func_44')
func_51_call = mutated_mod.get_global_var('func_51')
var_73 = relay.var("var_73", dtype = "bool", shape = (64, 1))#candidate|73|(64, 1)|var|bool
call_72 = relay.TupleGetItem(func_44_call(relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(var_73.astype('uint32'), [8, 8]), relay.reshape(var_73.astype('float64'), [8, 8]), ), 3)
call_74 = relay.TupleGetItem(func_51_call(relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(var_73.astype('uint32'), [8, 8]), relay.reshape(var_73.astype('float64'), [8, 8]), ), 3)
uop_75 = relay.log2(uop_67.astype('float64')) # shape=(16, 2, 5)
uop_77 = relay.exp(bop_59.astype('float64')) # shape=(16, 2, 5)
bop_79 = relay.logical_xor(uop_75.astype('uint16'), bop_64.astype('uint16')) # shape=(16, 2, 5)
uop_82 = relay.rsqrt(uop_75.astype('float64')) # shape=(16, 2, 5)
uop_84 = relay.cosh(bop_79.astype('float64')) # shape=(16, 2, 5)
uop_86 = relay.atanh(uop_84.astype('float32')) # shape=(16, 2, 5)
func_44_call = mod.get_global_var('func_44')
func_51_call = mutated_mod.get_global_var('func_51')
call_88 = relay.TupleGetItem(func_44_call(relay.reshape(call_72.astype('bool'), [8, 8]), relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(call_72.astype('bool'), [8, 8]), relay.reshape(call_72.astype('uint32'), [8, 8]), relay.reshape(var_73.astype('float64'), [8, 8]), ), 5)
call_89 = relay.TupleGetItem(func_51_call(relay.reshape(call_72.astype('bool'), [8, 8]), relay.reshape(var_73.astype('bool'), [8, 8]), relay.reshape(call_72.astype('bool'), [8, 8]), relay.reshape(call_72.astype('uint32'), [8, 8]), relay.reshape(var_73.astype('float64'), [8, 8]), ), 5)
func_44_call = mod.get_global_var('func_44')
func_51_call = mutated_mod.get_global_var('func_51')
call_90 = relay.TupleGetItem(func_44_call(relay.reshape(call_88.astype('bool'), [8, 8]), relay.reshape(call_88.astype('bool'), [8, 8]), relay.reshape(call_72.astype('bool'), [8, 8]), relay.reshape(call_72.astype('uint32'), [8, 8]), relay.reshape(call_88.astype('float64'), [8, 8]), ), 0)
call_91 = relay.TupleGetItem(func_51_call(relay.reshape(call_88.astype('bool'), [8, 8]), relay.reshape(call_88.astype('bool'), [8, 8]), relay.reshape(call_72.astype('bool'), [8, 8]), relay.reshape(call_72.astype('uint32'), [8, 8]), relay.reshape(call_88.astype('float64'), [8, 8]), ), 0)
uop_92 = relay.rsqrt(uop_86.astype('float64')) # shape=(16, 2, 5)
uop_94 = relay.rsqrt(uop_56.astype('float64')) # shape=(16, 1, 5)
output = relay.Tuple([bop_69,call_72,var_73,uop_77,uop_82,call_88,call_90,uop_92,uop_94,])
output2 = relay.Tuple([bop_69,call_74,var_73,uop_77,uop_82,call_89,call_91,uop_92,uop_94,])
func_96 = relay.Function([var_58,var_73,], output)
mod['func_96'] = func_96
mod = relay.transform.InferType()(mod)
var_97 = relay.var("var_97", dtype = "float64", shape = (16, 2, 5))#candidate|97|(16, 2, 5)|var|float64
var_98 = relay.var("var_98", dtype = "bool", shape = (64, 1))#candidate|98|(64, 1)|var|bool
output = func_96(var_97,var_98,)
func_99 = relay.Function([var_97,var_98,], output)
mutated_mod['func_99'] = func_99
mutated_mod = relay.transform.InferType()(mutated_mod)
var_101 = relay.var("var_101", dtype = "float32", shape = (1,))#candidate|101|(1,)|var|float32
uop_102 = relay.erf(var_101.astype('float32')) # shape=(1,)
bop_104 = relay.add(uop_102.astype('int8'), relay.reshape(var_101.astype('int8'), relay.shape_of(uop_102))) # shape=(1,)
var_107 = relay.var("var_107", dtype = "int8", shape = (1,))#candidate|107|(1,)|var|int8
bop_108 = relay.add(bop_104.astype('uint32'), relay.reshape(var_107.astype('uint32'), relay.shape_of(bop_104))) # shape=(1,)
uop_111 = relay.log10(var_101.astype('float64')) # shape=(1,)
bop_113 = relay.not_equal(uop_102.astype('bool'), relay.reshape(var_107.astype('bool'), relay.shape_of(uop_102))) # shape=(1,)
bop_116 = relay.divide(uop_102.astype('float64'), relay.reshape(var_107.astype('float64'), relay.shape_of(uop_102))) # shape=(1,)
bop_119 = relay.mod(uop_102.astype('float32'), relay.reshape(uop_111.astype('float32'), relay.shape_of(uop_102))) # shape=(1,)
bop_122 = relay.minimum(uop_111.astype('float64'), relay.reshape(bop_119.astype('float64'), relay.shape_of(uop_111))) # shape=(1,)
uop_125 = relay.sin(bop_108.astype('float64')) # shape=(1,)
uop_127 = relay.cos(uop_125.astype('float64')) # shape=(1,)
output = relay.Tuple([bop_113,bop_116,bop_122,uop_127,])
output2 = relay.Tuple([bop_113,bop_116,bop_122,uop_127,])
func_129 = relay.Function([var_101,var_107,], output)
mod['func_129'] = func_129
mod = relay.transform.InferType()(mod)
var_130 = relay.var("var_130", dtype = "float32", shape = (1,))#candidate|130|(1,)|var|float32
var_131 = relay.var("var_131", dtype = "int8", shape = (1,))#candidate|131|(1,)|var|int8
output = func_129(var_130,var_131,)
func_132 = relay.Function([var_130,var_131,], output)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_134 = relay.var("var_134", dtype = "float32", shape = (6, 3, 7))#candidate|134|(6, 3, 7)|var|float32
var_135 = relay.var("var_135", dtype = "float32", shape = (6, 3, 7))#candidate|135|(6, 3, 7)|var|float32
bop_136 = relay.power(var_134.astype('float32'), relay.reshape(var_135.astype('float32'), relay.shape_of(var_134))) # shape=(6, 3, 7)
const_139 = relay.const([[[0.078964,-9.926827,9.081295,9.446578,7.610808,7.884065,-8.193594],[9.174753,7.210501,-5.472175,0.372513,8.077209,-2.826119,-1.613856],[9.137343,-1.905494,8.967243,9.721582,3.053794,-6.194251,-0.281474]],[[8.155817,-1.161360,8.906162,9.770057,-8.023953,1.743645,-7.063924],[-9.676939,-5.163811,-3.033002,9.163659,6.964811,-3.131899,6.650933],[-5.641870,-0.079361,-1.546070,-4.754887,-4.668556,1.501184,2.496108]],[[-2.269939,-9.812161,-8.898507,-0.965448,0.593842,-7.633617,-5.520449],[-7.808624,-7.041174,-3.968260,-8.516498,1.254059,-4.325010,-0.695231],[7.138490,-9.138018,2.052567,-5.544948,7.534559,-3.387973,-7.473656]],[[-2.319047,3.762501,-2.382857,9.007910,-3.353055,4.763398,-5.845738],[7.833122,2.524519,-9.367897,-2.540038,7.910429,7.291316,8.460795],[3.356038,4.002768,2.494137,-0.400506,-1.208763,-5.814184,-5.605001]],[[-1.788044,7.155432,7.377569,-9.729188,-7.504820,-7.331636,-1.809752],[1.850180,7.271030,3.484030,-5.573098,-0.629769,2.849121,-6.651625],[1.263888,0.959298,8.189939,-3.958865,-9.102690,3.143023,5.442626]],[[-0.954820,0.800124,-8.496917,-8.993134,2.340162,-7.618152,-6.270293],[-1.210465,7.170514,1.174935,-0.251072,7.735914,6.353641,0.587624],[-2.952521,-5.455720,-7.590693,-7.366536,8.452238,9.661744,1.310279]]], dtype = "float32")#candidate|139|(6, 3, 7)|const|float32
bop_140 = relay.greater_equal(bop_136.astype('bool'), relay.reshape(const_139.astype('bool'), relay.shape_of(bop_136))) # shape=(6, 3, 7)
bop_143 = relay.add(var_135.astype('uint64'), relay.reshape(const_139.astype('uint64'), relay.shape_of(var_135))) # shape=(6, 3, 7)
uop_146 = relay.sqrt(var_134.astype('float64')) # shape=(6, 3, 7)
var_148 = relay.var("var_148", dtype = "float64", shape = (6, 3, 7))#candidate|148|(6, 3, 7)|var|float64
bop_149 = relay.add(uop_146.astype('int16'), relay.reshape(var_148.astype('int16'), relay.shape_of(uop_146))) # shape=(6, 3, 7)
uop_152 = relay.asin(bop_149.astype('float32')) # shape=(6, 3, 7)
func_44_call = mod.get_global_var('func_44')
func_51_call = mutated_mod.get_global_var('func_51')
var_155 = relay.var("var_155", dtype = "bool", shape = (64,))#candidate|155|(64,)|var|bool
call_154 = relay.TupleGetItem(func_44_call(relay.reshape(var_155.astype('bool'), [8, 8]), relay.reshape(var_155.astype('bool'), [8, 8]), relay.reshape(var_155.astype('bool'), [8, 8]), relay.reshape(var_155.astype('uint32'), [8, 8]), relay.reshape(var_155.astype('float64'), [8, 8]), ), 0)
call_156 = relay.TupleGetItem(func_51_call(relay.reshape(var_155.astype('bool'), [8, 8]), relay.reshape(var_155.astype('bool'), [8, 8]), relay.reshape(var_155.astype('bool'), [8, 8]), relay.reshape(var_155.astype('uint32'), [8, 8]), relay.reshape(var_155.astype('float64'), [8, 8]), ), 0)
uop_157 = relay.erf(bop_149.astype('float32')) # shape=(6, 3, 7)
uop_159 = relay.asin(uop_152.astype('float64')) # shape=(6, 3, 7)
bop_161 = relay.floor_divide(uop_146.astype('float64'), relay.reshape(bop_149.astype('float64'), relay.shape_of(uop_146))) # shape=(6, 3, 7)
var_164 = relay.var("var_164", dtype = "float64", shape = (6, 3, 7))#candidate|164|(6, 3, 7)|var|float64
bop_165 = relay.mod(uop_159.astype('float64'), relay.reshape(var_164.astype('float64'), relay.shape_of(uop_159))) # shape=(6, 3, 7)
uop_168 = relay.atan(uop_159.astype('float64')) # shape=(6, 3, 7)
uop_170 = relay.sigmoid(uop_168.astype('float32')) # shape=(6, 3, 7)
uop_172 = relay.rsqrt(uop_170.astype('float64')) # shape=(6, 3, 7)
func_44_call = mod.get_global_var('func_44')
func_51_call = mutated_mod.get_global_var('func_51')
call_174 = relay.TupleGetItem(func_44_call(relay.reshape(call_154.astype('bool'), [8, 8]), relay.reshape(call_154.astype('bool'), [8, 8]), relay.reshape(call_154.astype('bool'), [8, 8]), relay.reshape(call_154.astype('uint32'), [8, 8]), relay.reshape(call_154.astype('float64'), [8, 8]), ), 5)
call_175 = relay.TupleGetItem(func_51_call(relay.reshape(call_154.astype('bool'), [8, 8]), relay.reshape(call_154.astype('bool'), [8, 8]), relay.reshape(call_154.astype('bool'), [8, 8]), relay.reshape(call_154.astype('uint32'), [8, 8]), relay.reshape(call_154.astype('float64'), [8, 8]), ), 5)
const_176 = relay.const([[[8.533612,0.714778,6.390406,0.384167,-6.100798,-8.890884,9.319954],[-4.229940,5.252438,-5.909307,-4.647969,-5.940202,4.232018,-0.101810],[5.521828,-3.788073,-7.024984,-6.270359,-1.104671,1.569080,1.337681]],[[4.290591,8.831691,-8.032272,-0.889305,6.738570,7.840269,-4.805209],[-9.694342,-8.701774,-0.983519,-5.080878,-7.403990,5.256103,-6.479712],[8.084998,-3.415407,-9.383523,-7.926767,-1.771548,-8.873554,-4.307020]],[[6.017793,-8.361200,3.023619,1.909362,-9.063482,-8.441572,-0.558245],[9.757361,7.674361,-7.696332,-1.397497,1.500939,-2.868113,4.019859],[1.665972,-3.248552,6.799231,-8.586381,3.804570,-8.606327,4.039955]],[[-3.375862,-2.186125,9.373237,-8.530505,9.403686,-3.030016,-7.817508],[-5.063792,1.782757,4.845346,-7.819712,6.704044,3.082624,-6.014762],[-9.257016,0.345174,8.590775,-2.378312,5.850958,7.135314,5.886681]],[[0.056710,-5.986100,-6.180894,9.437954,1.032874,-6.180283,0.082805],[-1.260381,6.328009,2.343607,1.315832,2.354810,7.731961,9.731599],[0.169587,2.726859,-5.174548,4.142044,1.325906,-0.332685,-4.582472]],[[0.504252,-3.815735,-1.654879,-9.810395,-4.383862,-5.541390,-7.083263],[-4.851314,-3.339462,-5.673801,-1.827331,2.469104,3.962170,7.974714],[-5.319509,-0.555813,9.719643,6.189193,6.300900,9.199497,6.609404]]], dtype = "float64")#candidate|176|(6, 3, 7)|const|float64
bop_177 = relay.bitwise_xor(uop_159.astype('uint32'), relay.reshape(const_176.astype('uint32'), relay.shape_of(uop_159))) # shape=(6, 3, 7)
uop_180 = relay.log2(uop_170.astype('float32')) # shape=(6, 3, 7)
uop_182 = relay.rsqrt(uop_170.astype('float64')) # shape=(6, 3, 7)
var_184 = relay.var("var_184", dtype = "float32", shape = (6, 3, 7))#candidate|184|(6, 3, 7)|var|float32
bop_185 = relay.minimum(uop_180.astype('float64'), relay.reshape(var_184.astype('float64'), relay.shape_of(uop_180))) # shape=(6, 3, 7)
uop_188 = relay.sigmoid(uop_170.astype('float32')) # shape=(6, 3, 7)
uop_190 = relay.log2(uop_170.astype('float64')) # shape=(6, 3, 7)
bop_192 = relay.bitwise_or(uop_168.astype('uint16'), relay.reshape(var_134.astype('uint16'), relay.shape_of(uop_168))) # shape=(6, 3, 7)
const_195 = relay.const([[[4.267566,-1.458836,1.560526,9.119369,9.494781,7.597710,4.903485],[1.098971,1.345692,-2.943014,8.395058,1.290244,-6.022956,-5.562098],[-9.427608,7.170146,4.320479,-4.758081,3.892919,0.674535,-6.668614]],[[-4.458776,4.485906,-7.179637,-8.609038,0.801235,-2.951858,6.640259],[9.223885,0.086463,-9.674718,-1.285837,-9.072206,-5.989905,-5.203024],[-0.352008,-1.424925,-3.004616,5.721673,9.879489,1.554349,5.301632]],[[2.772112,1.460871,-5.801660,-0.479265,0.528732,3.928083,7.685750],[8.676733,7.864188,-4.453554,7.643882,7.395579,0.046614,-9.243343],[2.262865,1.098222,8.695987,-1.811082,0.084424,-3.845146,1.825575]],[[3.599017,2.556664,-8.129833,-5.067461,4.805984,-2.797563,-8.141533],[6.077390,-3.247954,6.450485,6.648332,-3.394610,-9.117654,7.627960],[-5.108875,-6.712488,0.406171,2.808895,-7.454066,7.586998,1.561167]],[[-8.314486,7.631555,-8.583808,5.391793,2.563562,-1.295382,-7.896024],[-0.412222,5.268129,-4.553061,-2.746759,-0.798781,4.253224,0.786941],[-8.484931,-8.208827,9.414818,-3.224882,-2.932073,3.639975,-8.330047]],[[6.575259,-9.224085,-8.362113,2.497852,-0.783358,4.172405,5.309582],[8.826007,6.123549,0.504497,3.345801,4.783015,-8.808533,2.487990],[-6.850782,-2.646051,-1.023579,0.936780,-5.494159,8.098754,-4.757191]]], dtype = "float32")#candidate|195|(6, 3, 7)|const|float32
bop_196 = relay.logical_xor(uop_188.astype('int16'), relay.reshape(const_195.astype('int16'), relay.shape_of(uop_188))) # shape=(6, 3, 7)
var_199 = relay.var("var_199", dtype = "float32", shape = (6, 3, 7))#candidate|199|(6, 3, 7)|var|float32
bop_200 = relay.left_shift(uop_170.astype('uint8'), relay.reshape(var_199.astype('uint8'), relay.shape_of(uop_170))) # shape=(6, 3, 7)
bop_203 = relay.greater(bop_200.astype('bool'), relay.reshape(const_195.astype('bool'), relay.shape_of(bop_200))) # shape=(6, 3, 7)
var_206 = relay.var("var_206", dtype = "float64", shape = (6, 3, 7))#candidate|206|(6, 3, 7)|var|float64
bop_207 = relay.less_equal(uop_190.astype('bool'), relay.reshape(var_206.astype('bool'), relay.shape_of(uop_190))) # shape=(6, 3, 7)
bop_210 = relay.subtract(uop_170.astype('int32'), relay.reshape(uop_152.astype('int32'), relay.shape_of(uop_170))) # shape=(6, 3, 7)
bop_213 = relay.bitwise_xor(bop_196.astype('int8'), relay.reshape(uop_168.astype('int8'), relay.shape_of(bop_196))) # shape=(6, 3, 7)
bop_216 = relay.maximum(bop_192.astype('uint16'), relay.reshape(uop_159.astype('uint16'), relay.shape_of(bop_192))) # shape=(6, 3, 7)
output = relay.Tuple([bop_140,bop_143,call_154,var_155,uop_157,bop_161,bop_165,uop_172,call_174,bop_177,uop_182,bop_185,bop_203,bop_207,bop_210,bop_213,bop_216,])
output2 = relay.Tuple([bop_140,bop_143,call_156,var_155,uop_157,bop_161,bop_165,uop_172,call_175,bop_177,uop_182,bop_185,bop_203,bop_207,bop_210,bop_213,bop_216,])
func_219 = relay.Function([var_134,var_135,var_148,var_155,var_164,var_184,var_199,var_206,], output)
mod['func_219'] = func_219
mod = relay.transform.InferType()(mod)
mutated_mod['func_219'] = func_219
mutated_mod = relay.transform.InferType()(mutated_mod)
func_219_call = mutated_mod.get_global_var('func_219')
var_221 = relay.var("var_221", dtype = "float32", shape = (6, 3, 7))#candidate|221|(6, 3, 7)|var|float32
var_222 = relay.var("var_222", dtype = "float32", shape = (6, 3, 7))#candidate|222|(6, 3, 7)|var|float32
var_223 = relay.var("var_223", dtype = "float64", shape = (6, 3, 7))#candidate|223|(6, 3, 7)|var|float64
var_224 = relay.var("var_224", dtype = "bool", shape = (64,))#candidate|224|(64,)|var|bool
var_225 = relay.var("var_225", dtype = "float64", shape = (6, 3, 7))#candidate|225|(6, 3, 7)|var|float64
var_226 = relay.var("var_226", dtype = "float32", shape = (6, 3, 7))#candidate|226|(6, 3, 7)|var|float32
var_227 = relay.var("var_227", dtype = "float32", shape = (6, 3, 7))#candidate|227|(6, 3, 7)|var|float32
var_228 = relay.var("var_228", dtype = "float64", shape = (6, 3, 7))#candidate|228|(6, 3, 7)|var|float64
call_220 = func_219_call(var_221,var_222,var_223,var_224,var_225,var_226,var_227,var_228,)
output = call_220
func_229 = relay.Function([var_221,var_222,var_223,var_224,var_225,var_226,var_227,var_228,], output)
mutated_mod['func_229'] = func_229
mutated_mod = relay.transform.InferType()(mutated_mod)
const_231 = relay.const([-0.361037,3.296832,1.877814,6.430428,-5.853583,-9.589882,2.227459,6.359962,0.164707,-5.185631,4.219204,8.112554,-5.458195], dtype = "float32")#candidate|231|(13,)|const|float32
uop_232 = relay.log10(const_231.astype('float32')) # shape=(13,)
var_234 = relay.var("var_234", dtype = "float32", shape = (13,))#candidate|234|(13,)|var|float32
bop_235 = relay.right_shift(uop_232.astype('int16'), relay.reshape(var_234.astype('int16'), relay.shape_of(uop_232))) # shape=(13,)
var_238 = relay.var("var_238", dtype = "float32", shape = (13,))#candidate|238|(13,)|var|float32
bop_239 = relay.add(var_234.astype('uint64'), relay.reshape(var_238.astype('uint64'), relay.shape_of(var_234))) # shape=(13,)
uop_242 = relay.exp(bop_239.astype('float64')) # shape=(13,)
bop_244 = relay.logical_xor(bop_235.astype('int8'), relay.reshape(var_234.astype('int8'), relay.shape_of(bop_235))) # shape=(13,)
bop_247 = relay.equal(uop_232.astype('bool'), relay.reshape(var_234.astype('bool'), relay.shape_of(uop_232))) # shape=(13,)
var_250 = relay.var("var_250", dtype = "int8", shape = (13,))#candidate|250|(13,)|var|int8
bop_251 = relay.bitwise_and(bop_244.astype('uint64'), relay.reshape(var_250.astype('uint64'), relay.shape_of(bop_244))) # shape=(13,)
uop_254 = relay.exp(bop_251.astype('float64')) # shape=(13,)
bop_256 = relay.mod(uop_254.astype('float64'), relay.reshape(bop_251.astype('float64'), relay.shape_of(uop_254))) # shape=(13,)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
var_260 = relay.var("var_260", dtype = "float32", shape = (1,))#candidate|260|(1,)|var|float32
call_259 = relay.TupleGetItem(func_129_call(relay.reshape(var_260.astype('float32'), [1,]), relay.reshape(var_260.astype('int8'), [1,]), ), 1)
call_261 = relay.TupleGetItem(func_132_call(relay.reshape(var_260.astype('float32'), [1,]), relay.reshape(var_260.astype('int8'), [1,]), ), 1)
uop_262 = relay.sqrt(uop_254.astype('float64')) # shape=(13,)
bop_264 = relay.equal(uop_262.astype('bool'), relay.reshape(bop_239.astype('bool'), relay.shape_of(uop_262))) # shape=(13,)
bop_267 = relay.floor_mod(bop_264.astype('float64'), relay.reshape(var_234.astype('float64'), relay.shape_of(bop_264))) # shape=(13,)
uop_270 = relay.asin(uop_254.astype('float32')) # shape=(13,)
const_272 = relay.const([-5.100482,-6.561575,-8.480223,-5.725963,7.479991,5.042508,1.467423,6.759144,4.895181,7.598862,-0.575245,-9.442508,-3.940857], dtype = "float32")#candidate|272|(13,)|const|float32
bop_273 = relay.minimum(uop_270.astype('uint8'), relay.reshape(const_272.astype('uint8'), relay.shape_of(uop_270))) # shape=(13,)
uop_276 = relay.asin(uop_254.astype('float32')) # shape=(13,)
uop_278 = relay.log10(uop_276.astype('float64')) # shape=(13,)
uop_280 = relay.log(uop_242.astype('float32')) # shape=(13,)
bop_282 = relay.not_equal(uop_278.astype('bool'), relay.reshape(uop_232.astype('bool'), relay.shape_of(uop_278))) # shape=(13,)
uop_285 = relay.rsqrt(bop_282.astype('float32')) # shape=(13,)
uop_287 = relay.acos(uop_285.astype('float64')) # shape=(13,)
bop_289 = relay.maximum(uop_285.astype('int32'), var_260.astype('int32')) # shape=(13,)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
call_292 = relay.TupleGetItem(func_129_call(relay.reshape(var_260.astype('float32'), [1,]), relay.reshape(call_259.astype('int8'), [1,]), ), 0)
call_293 = relay.TupleGetItem(func_132_call(relay.reshape(var_260.astype('float32'), [1,]), relay.reshape(call_259.astype('int8'), [1,]), ), 0)
uop_294 = relay.acos(uop_285.astype('float64')) # shape=(13,)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
call_296 = relay.TupleGetItem(func_129_call(relay.reshape(var_260.astype('float32'), [1,]), relay.reshape(var_260.astype('int8'), [1,]), ), 2)
call_297 = relay.TupleGetItem(func_132_call(relay.reshape(var_260.astype('float32'), [1,]), relay.reshape(var_260.astype('int8'), [1,]), ), 2)
uop_298 = relay.atanh(uop_278.astype('float64')) # shape=(13,)
bop_300 = relay.add(uop_287.astype('int32'), relay.reshape(var_238.astype('int32'), relay.shape_of(uop_287))) # shape=(13,)
const_303 = relay.const([8.425829,3.021120,-0.226194,5.341399,-9.839356,9.563825,-2.426931,-9.357535,0.374312,-3.482742,5.376789,-0.344188,-1.493964], dtype = "float64")#candidate|303|(13,)|const|float64
bop_304 = relay.multiply(uop_287.astype('uint32'), relay.reshape(const_303.astype('uint32'), relay.shape_of(uop_287))) # shape=(13,)
var_307 = relay.var("var_307", dtype = "int32", shape = (13,))#candidate|307|(13,)|var|int32
bop_308 = relay.divide(bop_300.astype('float64'), relay.reshape(var_307.astype('float64'), relay.shape_of(bop_300))) # shape=(13,)
uop_311 = relay.rsqrt(bop_308.astype('float64')) # shape=(13,)
bop_313 = relay.right_shift(uop_311.astype('uint8'), relay.reshape(uop_287.astype('uint8'), relay.shape_of(uop_311))) # shape=(13,)
uop_316 = relay.sqrt(uop_294.astype('float32')) # shape=(13,)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
call_318 = relay.TupleGetItem(func_129_call(relay.reshape(call_292.astype('float32'), [1,]), relay.reshape(call_259.astype('int8'), [1,]), ), 2)
call_319 = relay.TupleGetItem(func_132_call(relay.reshape(call_292.astype('float32'), [1,]), relay.reshape(call_259.astype('int8'), [1,]), ), 2)
var_320 = relay.var("var_320", dtype = "float64", shape = (13,))#candidate|320|(13,)|var|float64
bop_321 = relay.power(uop_278.astype('float64'), relay.reshape(var_320.astype('float64'), relay.shape_of(uop_278))) # shape=(13,)
bop_324 = relay.logical_or(bop_300.astype('bool'), call_318.astype('bool')) # shape=(13,)
bop_327 = relay.logical_or(bop_300.astype('bool'), call_319.astype('bool')) # shape=(13,)
bop_328 = relay.power(bop_300.astype('float64'), relay.reshape(bop_256.astype('float64'), relay.shape_of(bop_300))) # shape=(13,)
output = relay.Tuple([bop_247,call_259,bop_267,bop_273,uop_280,bop_289,call_292,call_296,uop_298,bop_304,bop_313,uop_316,bop_321,bop_324,bop_328,])
output2 = relay.Tuple([bop_247,call_261,bop_267,bop_273,uop_280,bop_289,call_293,call_297,uop_298,bop_304,bop_313,uop_316,bop_321,bop_327,bop_328,])
F = relay.Function([var_234,var_238,var_250,var_260,var_307,var_320,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_234,var_238,var_250,var_260,var_307,var_320,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_234= np.array([4.967147,9.263032,6.498283,-5.450957,-8.721494,-0.694049,-2.316170,-5.644098,-5.129023,-3.145537,-9.885875,-0.037597,1.660574], dtype='float32')
module1.set_input('var_234', input_234)
input_238= np.array([-8.470173,-2.977013,1.346911,-2.560455,-3.233720,-8.788406,-8.396260,-9.410461,-3.824737,3.906678,4.112796,0.833691,-3.898577], dtype='float32')
module1.set_input('var_238', input_238)
input_250= np.array([-10,-4,1,3,-4,8,3,6,-10,-6,10,-1,-2], dtype='int8')
module1.set_input('var_250', input_250)
input_260= np.array([4.598049], dtype='float32')
module1.set_input('var_260', input_260)
input_307= np.array([-7,-5,-7,-5,7,4,-3,1,10,-5,-9,-9,4], dtype='int32')
module1.set_input('var_307', input_307)
input_320= np.array([-4.695729,6.706991,2.843596,2.784584,5.584881,2.393506,-2.215687,6.061152,-3.424231,-1.430625,1.659828,-8.128510,1.375634], dtype='float64')
module1.set_input('var_320', input_320)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res3 = intrp3.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res4 = intrp4.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
res1_11 = module1.get_output(11).asnumpy()
res2_11 = res2[11].asnumpy()
res3_11 = res3[11].asnumpy()
res4_11 = res4[11].asnumpy()
np.testing.assert_allclose(res1_11 ,res2_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res3_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_11 ,res4_11, atol=1e-3, rtol=1e-3)
(res1_11 == res2_11).all()
(res1_11 == res3_11).all()
(res1_11 == res4_11).all()
res1_12 = module1.get_output(12).asnumpy()
res2_12 = res2[12].asnumpy()
res3_12 = res3[12].asnumpy()
res4_12 = res4[12].asnumpy()
np.testing.assert_allclose(res1_12 ,res2_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res3_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_12 ,res4_12, atol=1e-3, rtol=1e-3)
(res1_12 == res2_12).all()
(res1_12 == res3_12).all()
(res1_12 == res4_12).all()
res1_13 = module1.get_output(13).asnumpy()
res2_13 = res2[13].asnumpy()
res3_13 = res3[13].asnumpy()
res4_13 = res4[13].asnumpy()
np.testing.assert_allclose(res1_13 ,res2_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res3_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_13 ,res4_13, atol=1e-3, rtol=1e-3)
(res1_13 == res2_13).all()
(res1_13 == res3_13).all()
(res1_13 == res4_13).all()
res1_14 = module1.get_output(14).asnumpy()
res2_14 = res2[14].asnumpy()
res3_14 = res3[14].asnumpy()
res4_14 = res4[14].asnumpy()
np.testing.assert_allclose(res1_14 ,res2_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res3_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_14 ,res4_14, atol=1e-3, rtol=1e-3)
(res1_14 == res2_14).all()
(res1_14 == res3_14).all()
(res1_14 == res4_14).all()
module5.set_input('var_234', input_234)
module5.set_input('var_238', input_238)
module5.set_input('var_250', input_250)
module5.set_input('var_260', input_260)
module5.set_input('var_307', input_307)
module5.set_input('var_320', input_320)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res7 = intrp7.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res8 = intrp8.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
res5_11 = module5.get_output(11).asnumpy()
res6_11 = res6[11].asnumpy()
res7_11 = res7[11].asnumpy()
res8_11 = res8[11].asnumpy()
np.testing.assert_allclose(res5_11 ,res6_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res7_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_11 ,res8_11, atol=1e-3, rtol=1e-3)
(res5_11 == res6_11).all()
(res5_11 == res7_11).all()
(res5_11 == res8_11).all()
res5_12 = module5.get_output(12).asnumpy()
res6_12 = res6[12].asnumpy()
res7_12 = res7[12].asnumpy()
res8_12 = res8[12].asnumpy()
np.testing.assert_allclose(res5_12 ,res6_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res7_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_12 ,res8_12, atol=1e-3, rtol=1e-3)
(res5_12 == res6_12).all()
(res5_12 == res7_12).all()
(res5_12 == res8_12).all()
res5_13 = module5.get_output(13).asnumpy()
res6_13 = res6[13].asnumpy()
res7_13 = res7[13].asnumpy()
res8_13 = res8[13].asnumpy()
np.testing.assert_allclose(res5_13 ,res6_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res7_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_13 ,res8_13, atol=1e-3, rtol=1e-3)
(res5_13 == res6_13).all()
(res5_13 == res7_13).all()
(res5_13 == res8_13).all()
res5_14 = module5.get_output(14).asnumpy()
res6_14 = res6[14].asnumpy()
res7_14 = res7[14].asnumpy()
res8_14 = res8[14].asnumpy()
np.testing.assert_allclose(res5_14 ,res6_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res7_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_14 ,res8_14, atol=1e-3, rtol=1e-3)
(res5_14 == res6_14).all()
(res5_14 == res7_14).all()
(res5_14 == res8_14).all()
module9.set_input('var_234', input_234)
module9.set_input('var_238', input_238)
module9.set_input('var_250', input_250)
module9.set_input('var_260', input_260)
module9.set_input('var_307', input_307)
module9.set_input('var_320', input_320)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res11 = intrp11.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res12 = intrp12.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
res9_11 = module9.get_output(11).asnumpy()
res10_11 = res10[11].asnumpy()
res11_11 = res11[11].asnumpy()
res12_11 = res12[11].asnumpy()
np.testing.assert_allclose(res9_11 ,res10_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res11_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_11 ,res12_11, atol=1e-3, rtol=1e-3)
(res9_11 == res10_11).all()
(res9_11 == res11_11).all()
(res9_11 == res12_11).all()
res9_12 = module9.get_output(12).asnumpy()
res10_12 = res10[12].asnumpy()
res11_12 = res11[12].asnumpy()
res12_12 = res12[12].asnumpy()
np.testing.assert_allclose(res9_12 ,res10_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res11_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_12 ,res12_12, atol=1e-3, rtol=1e-3)
(res9_12 == res10_12).all()
(res9_12 == res11_12).all()
(res9_12 == res12_12).all()
res9_13 = module9.get_output(13).asnumpy()
res10_13 = res10[13].asnumpy()
res11_13 = res11[13].asnumpy()
res12_13 = res12[13].asnumpy()
np.testing.assert_allclose(res9_13 ,res10_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res11_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_13 ,res12_13, atol=1e-3, rtol=1e-3)
(res9_13 == res10_13).all()
(res9_13 == res11_13).all()
(res9_13 == res12_13).all()
res9_14 = module9.get_output(14).asnumpy()
res10_14 = res10[14].asnumpy()
res11_14 = res11[14].asnumpy()
res12_14 = res12[14].asnumpy()
np.testing.assert_allclose(res9_14 ,res10_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res11_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_14 ,res12_14, atol=1e-3, rtol=1e-3)
(res9_14 == res10_14).all()
(res9_14 == res11_14).all()
(res9_14 == res12_14).all()
module13.set_input('var_234', input_234)
module13.set_input('var_238', input_238)
module13.set_input('var_250', input_250)
module13.set_input('var_260', input_260)
module13.set_input('var_307', input_307)
module13.set_input('var_320', input_320)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res15 = intrp15.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res16 = intrp16.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
res13_11 = module13.get_output(11).asnumpy()
res14_11 = res14[11].asnumpy()
res15_11 = res15[11].asnumpy()
res16_11 = res16[11].asnumpy()
np.testing.assert_allclose(res13_11 ,res14_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res15_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_11 ,res16_11, atol=1e-3, rtol=1e-3)
(res13_11 == res14_11).all()
(res13_11 == res15_11).all()
(res13_11 == res16_11).all()
res13_12 = module13.get_output(12).asnumpy()
res14_12 = res14[12].asnumpy()
res15_12 = res15[12].asnumpy()
res16_12 = res16[12].asnumpy()
np.testing.assert_allclose(res13_12 ,res14_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res15_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_12 ,res16_12, atol=1e-3, rtol=1e-3)
(res13_12 == res14_12).all()
(res13_12 == res15_12).all()
(res13_12 == res16_12).all()
res13_13 = module13.get_output(13).asnumpy()
res14_13 = res14[13].asnumpy()
res15_13 = res15[13].asnumpy()
res16_13 = res16[13].asnumpy()
np.testing.assert_allclose(res13_13 ,res14_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res15_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_13 ,res16_13, atol=1e-3, rtol=1e-3)
(res13_13 == res14_13).all()
(res13_13 == res15_13).all()
(res13_13 == res16_13).all()
res13_14 = module13.get_output(14).asnumpy()
res14_14 = res14[14].asnumpy()
res15_14 = res15[14].asnumpy()
res16_14 = res16[14].asnumpy()
np.testing.assert_allclose(res13_14 ,res14_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res15_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_14 ,res16_14, atol=1e-3, rtol=1e-3)
(res13_14 == res14_14).all()
(res13_14 == res15_14).all()
(res13_14 == res16_14).all()
module17.set_input('var_234', input_234)
module17.set_input('var_238', input_238)
module17.set_input('var_250', input_250)
module17.set_input('var_260', input_260)
module17.set_input('var_307', input_307)
module17.set_input('var_320', input_320)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res19 = intrp19.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res20 = intrp20.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
res17_11 = module17.get_output(11).asnumpy()
res18_11 = res18[11].asnumpy()
res19_11 = res19[11].asnumpy()
res20_11 = res20[11].asnumpy()
np.testing.assert_allclose(res17_11 ,res18_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res19_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_11 ,res20_11, atol=1e-3, rtol=1e-3)
(res17_11 == res18_11).all()
(res17_11 == res19_11).all()
(res17_11 == res20_11).all()
res17_12 = module17.get_output(12).asnumpy()
res18_12 = res18[12].asnumpy()
res19_12 = res19[12].asnumpy()
res20_12 = res20[12].asnumpy()
np.testing.assert_allclose(res17_12 ,res18_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res19_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_12 ,res20_12, atol=1e-3, rtol=1e-3)
(res17_12 == res18_12).all()
(res17_12 == res19_12).all()
(res17_12 == res20_12).all()
res17_13 = module17.get_output(13).asnumpy()
res18_13 = res18[13].asnumpy()
res19_13 = res19[13].asnumpy()
res20_13 = res20[13].asnumpy()
np.testing.assert_allclose(res17_13 ,res18_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res19_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_13 ,res20_13, atol=1e-3, rtol=1e-3)
(res17_13 == res18_13).all()
(res17_13 == res19_13).all()
(res17_13 == res20_13).all()
res17_14 = module17.get_output(14).asnumpy()
res18_14 = res18[14].asnumpy()
res19_14 = res19[14].asnumpy()
res20_14 = res20[14].asnumpy()
np.testing.assert_allclose(res17_14 ,res18_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res19_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_14 ,res20_14, atol=1e-3, rtol=1e-3)
(res17_14 == res18_14).all()
(res17_14 == res19_14).all()
(res17_14 == res20_14).all()
module21.set_input('var_234', input_234)
module21.set_input('var_238', input_238)
module21.set_input('var_250', input_250)
module21.set_input('var_260', input_260)
module21.set_input('var_307', input_307)
module21.set_input('var_320', input_320)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res23 = intrp23.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res24 = intrp24.evaluate()(input_234, input_238, input_250, input_260, input_307, input_320, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()
res21_11 = module21.get_output(11).asnumpy()
res22_11 = res22[11].asnumpy()
res23_11 = res23[11].asnumpy()
res24_11 = res24[11].asnumpy()
np.testing.assert_allclose(res21_11 ,res22_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res23_11, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_11 ,res24_11, atol=1e-3, rtol=1e-3)
(res21_11 == res22_11).all()
(res21_11 == res23_11).all()
(res21_11 == res24_11).all()
res21_12 = module21.get_output(12).asnumpy()
res22_12 = res22[12].asnumpy()
res23_12 = res23[12].asnumpy()
res24_12 = res24[12].asnumpy()
np.testing.assert_allclose(res21_12 ,res22_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res23_12, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_12 ,res24_12, atol=1e-3, rtol=1e-3)
(res21_12 == res22_12).all()
(res21_12 == res23_12).all()
(res21_12 == res24_12).all()
res21_13 = module21.get_output(13).asnumpy()
res22_13 = res22[13].asnumpy()
res23_13 = res23[13].asnumpy()
res24_13 = res24[13].asnumpy()
np.testing.assert_allclose(res21_13 ,res22_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res23_13, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_13 ,res24_13, atol=1e-3, rtol=1e-3)
(res21_13 == res22_13).all()
(res21_13 == res23_13).all()
(res21_13 == res24_13).all()
res21_14 = module21.get_output(14).asnumpy()
res22_14 = res22[14].asnumpy()
res23_14 = res23[14].asnumpy()
res24_14 = res24[14].asnumpy()
np.testing.assert_allclose(res21_14 ,res22_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res23_14, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_14 ,res24_14, atol=1e-3, rtol=1e-3)
(res21_14 == res22_14).all()
(res21_14 == res23_14).all()
(res21_14 == res24_14).all()

'''33: TVMFuncCall
32: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
31: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
30: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
29: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
28: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
27: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
26: tvm::relay::GraphPlanMemory(tvm::relay::Function const&)
25: tvm::relay::StorageAllocator::Plan(tvm::relay::Function const&)
24: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
23: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
22: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
21: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::FunctionNode const*)
20: tvm::relay::StorageAllocaBaseVisitor::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
19: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
18: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
15: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
13: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
12: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
11: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
10: tvm::relay::StorageAllocaBaseVisitor::VisitExpr_(tvm::relay::TupleGetItemNode const*)
9: tvm::relay::StorageAllocaBaseVisitor::GetToken(tvm::RelayExpr const&)
8: tvm::relay::ExprVisitor::VisitExpr(tvm::RelayExpr const&)
7: tvm::relay::ExprFunctor<void (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
6: _ZZN3tvm5relay11ExprFunctorIFvRKNS_9Rela
5: tvm::relay::transform::DeviceAwareExprVisitor::VisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::StorageAllocator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
3: tvm::relay::StorageAllocaBaseVisitor::CreateToken(tvm::RelayExprNode const*, bool)
2: tvm::relay::StorageAllocator::CreateTokenOnDevice(tvm::RelayExprNode const*, tvm::VirtualDevice const&, bool)
1: tvm::relay::StorageAllocator::Request(tvm::relay::StorageToken*)
0: tvm::relay::StorageAllocator::GetMemorySize(tvm::relay::StorageToken*)

'''