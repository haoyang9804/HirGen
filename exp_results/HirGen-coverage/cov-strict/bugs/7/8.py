import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_52 = relay.var("var_52", dtype = "uint8", shape = (6, 2))#candidate|52|(6, 2)|var|uint8
var_53 = relay.var("var_53", dtype = "uint8", shape = (6, 2))#candidate|53|(6, 2)|var|uint8
bop_54 = relay.greater(var_52.astype('bool'), relay.reshape(var_53.astype('bool'), relay.shape_of(var_52))) # shape=(6, 2)
output = bop_54
output2 = bop_54
func_61 = relay.Function([var_52,var_53,], output)
mod['func_61'] = func_61
mod = relay.transform.InferType()(mod)
var_62 = relay.var("var_62", dtype = "uint8", shape = (6, 2))#candidate|62|(6, 2)|var|uint8
var_63 = relay.var("var_63", dtype = "uint8", shape = (6, 2))#candidate|63|(6, 2)|var|uint8
output = func_61(var_62,var_63,)
func_64 = relay.Function([var_62,var_63,], output)
mutated_mod['func_64'] = func_64
mutated_mod = relay.transform.InferType()(mutated_mod)
var_106 = relay.var("var_106", dtype = "float64", shape = (3, 10, 13))#candidate|106|(3, 10, 13)|var|float64
uop_107 = relay.rsqrt(var_106.astype('float64')) # shape=(3, 10, 13)
bop_109 = relay.add(uop_107.astype('float64'), relay.reshape(var_106.astype('float64'), relay.shape_of(uop_107))) # shape=(3, 10, 13)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
var_114 = relay.var("var_114", dtype = "uint8", shape = (12,))#candidate|114|(12,)|var|uint8
call_113 = func_61_call(relay.reshape(var_114.astype('uint8'), [6, 2]), relay.reshape(var_114.astype('uint8'), [6, 2]), )
call_115 = func_61_call(relay.reshape(var_114.astype('uint8'), [6, 2]), relay.reshape(var_114.astype('uint8'), [6, 2]), )
bop_119 = relay.bitwise_and(bop_109.astype('uint16'), relay.reshape(uop_107.astype('uint16'), relay.shape_of(bop_109))) # shape=(3, 10, 13)
output = relay.Tuple([call_113,var_114,bop_119,])
output2 = relay.Tuple([call_115,var_114,bop_119,])
func_122 = relay.Function([var_106,var_114,], output)
mod['func_122'] = func_122
mod = relay.transform.InferType()(mod)
var_123 = relay.var("var_123", dtype = "float64", shape = (3, 10, 13))#candidate|123|(3, 10, 13)|var|float64
var_124 = relay.var("var_124", dtype = "uint8", shape = (12,))#candidate|124|(12,)|var|uint8
output = func_122(var_123,var_124,)
func_125 = relay.Function([var_123,var_124,], output)
mutated_mod['func_125'] = func_125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_127 = relay.var("var_127", dtype = "float64", shape = (2, 13))#candidate|127|(2, 13)|var|float64
uop_128 = relay.asin(var_127.astype('float64')) # shape=(2, 13)
uop_136 = relay.exp(uop_128.astype('float64')) # shape=(2, 13)
output = relay.Tuple([uop_136,])
output2 = relay.Tuple([uop_136,])
func_139 = relay.Function([var_127,], output)
mod['func_139'] = func_139
mod = relay.transform.InferType()(mod)
var_140 = relay.var("var_140", dtype = "float64", shape = (2, 13))#candidate|140|(2, 13)|var|float64
output = func_139(var_140)
func_141 = relay.Function([var_140], output)
mutated_mod['func_141'] = func_141
mutated_mod = relay.transform.InferType()(mutated_mod)
var_151 = relay.var("var_151", dtype = "uint16", shape = (14, 11, 12))#candidate|151|(14, 11, 12)|var|uint16
var_152 = relay.var("var_152", dtype = "uint16", shape = (14, 11, 12))#candidate|152|(14, 11, 12)|var|uint16
bop_153 = relay.subtract(var_151.astype('uint16'), relay.reshape(var_152.astype('uint16'), relay.shape_of(var_151))) # shape=(14, 11, 12)
bop_156 = relay.greater(var_151.astype('bool'), relay.reshape(bop_153.astype('bool'), relay.shape_of(var_151))) # shape=(14, 11, 12)
output = relay.Tuple([bop_156,])
output2 = relay.Tuple([bop_156,])
func_164 = relay.Function([var_151,var_152,], output)
mod['func_164'] = func_164
mod = relay.transform.InferType()(mod)
var_165 = relay.var("var_165", dtype = "uint16", shape = (14, 11, 12))#candidate|165|(14, 11, 12)|var|uint16
var_166 = relay.var("var_166", dtype = "uint16", shape = (14, 11, 12))#candidate|166|(14, 11, 12)|var|uint16
output = func_164(var_165,var_166,)
func_167 = relay.Function([var_165,var_166,], output)
mutated_mod['func_167'] = func_167
mutated_mod = relay.transform.InferType()(mutated_mod)
var_220 = relay.var("var_220", dtype = "uint8", shape = (6, 7, 14))#candidate|220|(6, 7, 14)|var|uint8
var_221 = relay.var("var_221", dtype = "uint8", shape = (6, 7, 14))#candidate|221|(6, 7, 14)|var|uint8
bop_222 = relay.add(var_220.astype('uint8'), relay.reshape(var_221.astype('uint8'), relay.shape_of(var_220))) # shape=(6, 7, 14)
func_164_call = mod.get_global_var('func_164')
func_167_call = mutated_mod.get_global_var('func_167')
const_227 = relay.const([-5,-3,-5,-7,9,-6,8,10,8,1,7,-3,7,2,4,1,4,-6,4,-7,-7,4,9,-9,-4,-2,-2,5,-10,-9,10,-4,5,-5,-7,-3,-5,2,-3,-10,3,9,6,-5,10,-3,-5,7,8,8,-4,10,8,-3,2,9,7,3,3,-2,-3,5,3,-7,-6,8,5,-9,-1,3,8,-1,3,10,1,9,6,-1,6,2,4,-1,-8,-2,-5,-2,-1,9,8,-8,-1,2,-10,8,2,7,-8,3,-9,4,-1,8,-1,6,6,8,-2,7,-5,8,-5,-1,5,8,2,9,-10,7,-6,3,-6,1,3,-10,5,6,-4,2,3,-5,-3,10,3,-9,8,-3,4,2,4,-8,9,8,10,-5,9,8,4,7,3,8,-7,8,7,-1,-4,-1,-2,8,-8,-3,-3,-8,8,6,-1,-7,-7,2,-8,6,-3,-3,-7,-4,-4,-1,9,3,7,3,6,-8,6,7,-2,-4,-4,-9,9,-6,-2,7,-8,-1,10,5,-3,-8,-3,-10,2,2,-2,4,4,-4,9,-8,-2,6,-2,-9,-5,3,-4,5,-9,-1,-7,2,-7,10,8,4,6,3,10,2,-8,3,7,7,2,7,-3,3,-5,-5,-10,2,-7,-5,-6,-2,3,6,3,6,-1,7,3,-3,2,3,7,7,10,-2,-10,-3,-10,-2,2,8,-4,7,-4,8,-10,-7,6,-10,-7,-5,7,-9,6,-9,3,4,-4,-7,-3,4,7,8,-5,-2,-1,9,-4,6,-4,-8,4,-6,-3,7,-9,-9,4,2,8,-4,-10,8,3,-3,8,-8,5,1,9,6,-10,-6,4,6,3,-2,2,8,3,4,5,4,-6,-10,4,4,-2,-8,10,8,-3,8,-10,1,-8,-7,-9,-4,7,-1,-1,4,-7,2,8,1,-2,-7,5,-6,-6,-7,5,3,9,-2,1,6,2,-5,9,4,-7,4,10,5,4,-3,5,-10,2,-5,-9,10,10,-2,5,8,6,4,-1,-3,2,3,-4,4,-4,8,3,-3,-5,-9,2,2,1,-5,6,-7,-6,10,3,5,-4,-1,10,7,10,6,7,-1,2,1,5,-8,10,10,-1,-1,9,1,7,-5,-8,-10,-8,1,8,-10,10,4,6,-5,1,4,-9,1,7,-4,8,-7,-4,6,2,5,-6,4,-2,-2,5,5,3,10,4,2,-8,8,-1,4,-2,7,-7,-1,10,-4,-7,8,6,9,-2,2,4,-1,-4,-8,3,4,8,1,-7,2,-5,-6,-10,9,-8,1,-8,-6,-5,-9,-2,2,-8,-6,7,1,-10,-1,5,-2,10,4,-6,-4,-7,-1,8,6,6,3,4,5,2,-6,-9,-10,4,9,-8,-2,8,3,9,-1,3,-10,9,-3,-3,-8,9,-1,5,4,-5,-8,10,-8,-1,5,5,1,1,5,-4,6,2,-8,-1,10,-9,-10,10,-9,9,2,-7,5,8,-2,2,6,7,-3,-6,-6,-3,-5,4,-3,8,-4,10,-5,-1,1,-6,7,2,-4,5,5,-4,-1,6,1,1,3,7,2,-4,1,-1,-5,-8,-1,-9,-3,9,-3,-7,-1,2,-10,1,-6,4,-6,6,7,-10,-9,5,4,-5,10,-1,-2,2,-1,3,-7,5,-3,-5,-4,-9,6,4,-9,-6,3,-10,10,7,5,1,9,7,6,2,-7,-5,-6,-2,10,-4,5,7,5,1,6,-6,-7,-6,-5,4,-9,6,8,2,3,-10,-9,-6,-1,-8,8,-1,-7,7,-5,-5,-10,10,6,-7,-8,-9,-5,3,3,-4,-5,5,2,-3,5,-1,-8,4,-3,-3,1,9,-9,4,6,-3,3,-3,10,-1,-4,1,-5,6,-9,10,2,-5,-2,3,9,8,-3,-6,-7,-9,1,-4,6,-4,-10,-4,4,3,10,-3,-1,-10,4,-9,-5,3,-10,-2,-9,-1,3,-1,-7,-2,-10,8,7,-8,-4,-1,7,6,-5,4,-7,4,4,-6,2,10,4,-5,-5,-4,-2,-7,1,8,4,-1,-1,-2,2,8,7,-6,-5,3,-8,9,2,-10,-1,-2,-2,-7,-9,10,6,-5,-5,3,-6,1,3,-5,-8,-9,-5,6,-5,-2,10,6,-9,9,6,5,-6,7,6,4,6,3,-6,1,-1,-6,9,9,6,4,-7,3,5,5,-1,5,4,-9,8,4,6,-10,-3,-3,-6,9,5,-9,4,-4,-4,-2,-9,-1,-4,-6,-6,-3,5,7,2,5,10,10,7,-10,-2,-1,5,8,8,8,-2,2,9,-9,5,-8,9,10,-1,8,3,8,3,5,-2,5,6,-9,7,5,3,9,-3,-9,9,10,9,10,-4,3,-10,7,-8,-10,-6,10,-8,3,-8,-6,2,-1,-3,-4,5,-4,8,10,10,4,5,-9,-3,-2,7,-7,3,-1,-8,7,2,10,-3,-7,-2,-2,5,8,4,-8,-8,-1,5,-9,-8,-8,-6,-10,3,-5,-10,-10,6,2,7,-2,-5,6,-6,-4,-1,-5,-3,7,4,-10,7,-1,7,-5,-3,1,-10,9,2,-10,-6,-2,-10,6,1,10,6,-2,-7,9,-6,2,-7,-3,4,4,8,2,4,-4,4,2,-9,2,3,-8,2,-4,10,-10,1,-6,-1,-1,-4,10,10,7,10,7,-9,-2,-4,-9,-4,-9,-4,-7,1,10,2,-5,-5,6,-2,-9,-8,1,7,-6,-1,-9,-10,-10,4,-8,3,3,-8,1,9,-10,-1,1,-2,-3,4,8,10,-6,-1,3,10,9,-4,-7,-2,-2,-9,-5,1,-6,9,10,-3,4,-1,-5,4,10,-6,-2,7,5,8,6,7,-6,-5,8,1,3,10,4,4,1,-4,-2,7,-6,7,-6,-4,-3,-7,1,2,3,-2,5,2,7,8,-6,7,10,3,-8,-8,-10,-1,-6,-2,4,-5,-9,-4,-4,6,-9,-1,-6,-7,-5,-7,-10,3,3,5,1,-6,-1,-7,-7,7,7,-7,4,9,-6,4,7,6,-5,7,2,-4,-8,-10,-7,10,-4,-7,8,-10,2,-4,1,9,10,-10,1,-5,-9,5,1,8,-2,-6,10,-9,-7,-3,3,-4,10,-5,-10,-2,-7,-2,4,-4,4,-1,3,9,2,-10,-6,8,-8,8,7,-4,-1,-5,-8,-1,8,-9,1,2,-1,-10,7,-4,-5,1,-4,-6,-3,10,-9,-4,-3,9,2,-9,6,-2,9,7,10,-6,5,1,-5,1,-2,-3,9,-10,3,-8,1,1,-7,6,6,-2,-5,1,4,4,-7,2,8,1,-3,2,8,-8,2,10,7,1,7,-2,3,6,2,10,-1,-3,7,-10,9,-9,3,8,-3,2,2,10,1,-7,-3,-2,5,9,-1,8,9,8,5,4,9,-8,9,6,2,-2,8,9,9,7,9,7,-1,1,-5,5,-10,-2,-1,-8,2,9,-4,-3,-8,-3,6,-6,7,6,-2,-5,-4,-9,7,-7,7,-7,6,-4,-4,1,6,-8,5,-6,-5,-9,-10,-3,6,-6,-5,4,4,-8,-4,8,-8,-3,-2,-10,-2,5,7,-10,7,-8,8,-6,9,-3,-2,-2,-7,3,-6,6,4,-1,-7,-6,7,-7,-7,9,6,8,3,10,5,-1,10,10,-9,5,-5,10,-6,-9,3,-10,2,-9,-7,6,6,-6,5,10,-10,1,7,-7,2,7,-4,4,-4,10,4,7,3,6,-1,3,-1,-5,6,1,-8,1,7,7,-8,7,2,4,7,-3,-4,10,-9,-2,-8,4,5,-7,3,-6,-2,-5,-4,10,-6,-2,7,6,8,2,-4,4,-4,-2,7,-7,8,5,-10,-5,-8,-9,-10,3,-4,6,3,-7,-10,-3,-4,8,-4,-4,-8,5,8,10,-10,6,10,-1,-9,-10,-5,6,5,1,-8,6,-6,1,4,1,-6,7,6,-9,-6,4,3,-1,7,-8,9,-1,4,8,-5,1,6,7,5,9,-6,3,6,-8,7,7,9,-2,2,-2,-1,-8,2,-8,-1,8,-1,-7,-6,9,-10,-1,6,3,-3,5,-9,-10,-8,7,7,-5,8,-5,-6,10,-1,-4,-4,5,3,1,2,-2,-10,-8,-4,-7,-6,9,-7,7,-9,6,-1,9,8,-5,-1,-1,-5,10,-5,-4,-9,4,-1,5,3,1,2,-9,2,-3,2,-6,4,-6,4,9,-2,-1,-3,3,10,1,4,4,-5,-10,10,1,1,2,-9,1,1,4,-10,1,1,-4,1,2,5,-2,8,-1,-3,6,-2,-3,1,-9,4,-3,-2,-1,-4,-1,-5,-6,-6,-3,9,-1,8,-8,-3,10,-6,4,9,-3,8,-4,6,-7,-8,-1,2,10,6,-7,-4,8,-9,10,-6,10,6,9,5,-2,6,2,5,-6,-1,-2,9,4,10,3,-6,4,-9,4,6,-7,-9,-10,2,-5,-8,-7,-7,-6,-7,-7,-4,-5,-1,-4,-4,1,1,-8,-7,5,2,-4,-5,7,9,-4,-6,-5,9,6,-2,9,-6,6,1,-9,-5,1,-3,-1,6,-5,-8,9,-10,1,10,5,6,-1,5,10,-5,8,-1,8,6,-10,-2,2,-2,3,-4,1,-10,-6,6,-4,7,9,-3,-5,-10,5,-4,5,-9,-1,9,-2,-6,-5,-4,-3,3,9,9,-6,1,-5,8,2,-10,-2,-4,-9,5,-3,3,8,-8,-3,-2,-7,2,-9,-4,10,5,5,6,-10,-8,-10,8,8,-6,2,3,5,1,-8,7,1,9,9,-9,-8,1,7,-5,-5,7,-1,9,8,9,5,3,8,-1,7,6,-5,1,-8,9,9,3,6,7,-1,9,4,3,2,-9,-4,-6,3,2,-6,-7,7], dtype = "uint16")#candidate|227|(1848,)|const|uint16
call_226 = relay.TupleGetItem(func_164_call(relay.reshape(const_227.astype('uint16'), [14, 11, 12]), relay.reshape(const_227.astype('uint16'), [14, 11, 12]), ), 0)
call_228 = relay.TupleGetItem(func_167_call(relay.reshape(const_227.astype('uint16'), [14, 11, 12]), relay.reshape(const_227.astype('uint16'), [14, 11, 12]), ), 0)
output = relay.Tuple([bop_222,call_226,const_227,])
output2 = relay.Tuple([bop_222,call_228,const_227,])
func_232 = relay.Function([var_220,var_221,], output)
mod['func_232'] = func_232
mod = relay.transform.InferType()(mod)
var_233 = relay.var("var_233", dtype = "uint8", shape = (6, 7, 14))#candidate|233|(6, 7, 14)|var|uint8
var_234 = relay.var("var_234", dtype = "uint8", shape = (6, 7, 14))#candidate|234|(6, 7, 14)|var|uint8
output = func_232(var_233,var_234,)
func_235 = relay.Function([var_233,var_234,], output)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
var_253 = relay.var("var_253", dtype = "float64", shape = (4, 9))#candidate|253|(4, 9)|var|float64
uop_254 = relay.sinh(var_253.astype('float64')) # shape=(4, 9)
func_122_call = mod.get_global_var('func_122')
func_125_call = mutated_mod.get_global_var('func_125')
var_260 = relay.var("var_260", dtype = "float64", shape = (390,))#candidate|260|(390,)|var|float64
var_261 = relay.var("var_261", dtype = "uint8", shape = (12,))#candidate|261|(12,)|var|uint8
call_259 = relay.TupleGetItem(func_122_call(relay.reshape(var_260.astype('float64'), [3, 10, 13]), relay.reshape(var_261.astype('uint8'), [12,]), ), 1)
call_262 = relay.TupleGetItem(func_125_call(relay.reshape(var_260.astype('float64'), [3, 10, 13]), relay.reshape(var_261.astype('uint8'), [12,]), ), 1)
func_164_call = mod.get_global_var('func_164')
func_167_call = mutated_mod.get_global_var('func_167')
const_272 = relay.const([7,4,-10,-6,5,5,-6,-7,-7,3,9,-2,10,-2,-3,8,10,3,4,-1,9,-10,10,4,-10,-5,6,1,-7,10,-5,-4,-10,-2,-8,7,8,-2,7,-4,-2,7,10,4,10,-1,-4,-1,-2,3,6,7,9,2,5,2,-9,-5,-6,8,5,-2,-4,5,8,6,-8,-9,10,1,-1,1,4,9,-7,8,6,-10,5,-4,3,-6,-1,-6,-8,8,-1,-9,7,7,-5,-5,-4,-1,2,1,-5,6,4,1,-10,1,-8,-8,-8,-8,-9,6,-9,2,2,9,-10,7,9,-4,-5,-2,-7,7,-7,-10,9,10,3,-1,3,4,7,7,-9,4,-8,-6,-9,2,-9,2,10,-8,-4,-10,1,2,7,-3,-10,8,-5,3,-1,-2,9,10,8,2,9,10,-8,-9,2,9,2,10,-6,-3,-9,-9,1,-6,9,2,2,9,4,4,1,6,3,-3,10,-5,-1,7,-6,-2,3,-3,5,4,2,-3,-3,8,-6,4,7,3,6,1,-3,6,-6,-10,1,-8,5,-7,2,-4,-8,-2,-10,2,-7,7,-5,-7,-10,-2,4,-7,3,5,1,2,10,2,-1,5,9,-9,2,5,-2,6,-9,4,9,7,-1,-7,3,10,-6,-3,4,9,-5,-2,3,4,3,4,-7,9,-8,-8,8,6,-2,10,10,-6,4,-5,-7,9,-6,9,-1,-3,7,-1,-9,2,7,-9,-1,-3,2,2,-6,-7,-3,6,-9,5,2,2,5,5,5,-1,7,-1,-2,8,5,2,4,-4,-7,-8,4,-2,-5,3,9,8,7,-6,-4,1,-2,9,-9,8,1,6,-9,6,-5,5,2,1,3,-10,-2,6,2,-9,-6,10,4,-5,-6,8,-8,5,-4,-9,2,4,2,7,3,6,4,9,6,4,2,3,-2,-10,-3,-5,-10,-2,-9,8,-6,3,2,1,-5,10,-4,1,-1,6,2,2,10,-6,-2,1,9,-9,6,-9,-4,2,3,-6,4,2,-3,10,8,-2,-2,-10,7,-4,-1,7,3,3,-3,-2,-1,5,-1,-7,2,-1,4,-5,-3,5,-3,1,-10,-4,3,9,2,-10,-10,-2,-8,-7,4,-1,-3,3,7,-2,8,1,1,7,-6,6,4,8,-1,-4,1,2,-2,-9,-8,-9,6,8,-1,-3,-2,5,-7,9,10,-2,9,-2,-2,-1,2,7,-9,5,9,-9,9,8,6,5,-1,4,3,-10,-9,-5,10,-10,6,10,-5,8,-2,-9,6,-4,-1,6,8,-10,6,7,7,6,3,1,-7,-2,-7,-7,5,9,-2,1,-2,7,4,7,-3,7,1,6,4,8,10,-6,9,-10,-2,-10,-2,4,3,9,4,-2,1,4,-7,-9,-8,-10,10,-7,-3,-9,-6,-2,4,-4,9,-5,3,8,-2,7,-3,8,-10,-10,-5,-7,1,9,3,6,-9,-2,10,4,-10,5,-7,9,-1,-10,7,7,-1,3,-10,-7,10,3,1,6,-6,7,8,-3,-6,-7,-2,-10,3,-8,4,3,-5,8,2,7,6,3,1,-3,1,-9,4,-8,7,-1,-1,7,-9,-2,-10,8,5,10,-9,3,2,-3,-3,5,-8,1,9,5,-4,8,6,-9,-7,-8,-3,4,-3,4,-1,4,-5,9,6,3,-1,-3,7,9,-3,10,-6,-1,-5,-4,6,-6,-4,9,6,-9,3,5,6,-3,1,-4,8,-7,-2,9,-1,-1,7,7,1,2,10,1,-3,4,8,2,-3,10,10,-5,4,7,5,-9,-10,8,10,5,-6,7,6,1,-10,5,2,-2,8,-10,-3,-9,1,4,-9,-7,7,8,-5,3,1,7,9,-10,9,10,-10,-9,-6,-4,-2,-1,-5,4,-9,-7,-6,2,4,-2,1,-6,-1,-1,8,4,-6,-10,-4,-3,3,3,-2,7,-6,-8,-3,9,-9,-10,6,6,-7,-3,5,5,-3,1,3,3,9,10,8,-5,-10,4,9,5,10,-8,-3,-5,1,-4,-4,-6,8,4,-3,-3,-3,8,8,-7,-1,-3,6,-1,-4,1,-1,8,3,5,10,-9,-6,-3,2,3,5,-8,-4,9,-5,5,-7,5,-4,6,-10,-6,-3,1,9,9,-9,-6,-9,2,-5,-9,-9,-2,7,-6,-4,3,1,3,7,-5,-10,-3,6,-10,-4,3,5,6,-7,9,3,1,6,-6,-5,-3,-4,3,-4,10,5,-9,3,10,-6,-1,3,-4,5,3,-3,-8,-5,-4,7,-4,1,1,-9,-4,-2,-7,-9,3,1,6,4,-10,7,7,9,-4,-5,4,8,10,-5,4,-7,7,-2,-3,-9,7,-6,7,6,-8,8,6,2,-3,-4,-10,-3,3,4,-4,-9,-8,-5,-2,10,-1,-4,2,4,2,4,9,2,5,-7,10,1,-5,-5,-9,-9,-3,7,8,3,-9,5,-6,-1,-3,-1,-6,-1,1,8,-2,10,9,-1,9,6,-10,-8,-7,7,-7,5,3,4,3,-3,8,-8,-1,1,-2,-1,-9,-1,10,-8,-8,-2,-6,-4,8,-4,1,1,-1,-3,1,-5,3,-9,-6,9,8,5,-8,5,-6,-2,8,-10,-8,-2,-7,1,5,-4,-7,-6,-4,10,-10,8,3,5,-3,-2,8,-2,-3,6,3,2,2,-4,9,-2,9,6,-2,-5,8,6,1,10,10,-5,-7,-2,3,7,2,-2,9,-2,3,-6,5,6,9,-2,-3,4,4,-8,2,10,7,4,1,7,-5,4,6,-8,5,5,-8,9,5,-10,5,10,3,-7,1,-8,-8,8,2,8,7,9,-2,-5,8,-3,-5,-4,-8,3,-7,-8,5,7,-4,-9,8,-4,6,5,-7,6,1,2,-1,9,-10,-2,-4,4,-4,7,-9,-2,2,-9,-6,-3,-5,6,-2,3,-1,6,-4,3,3,9,3,-7,9,-4,-10,-1,3,-10,-2,6,-10,1,3,1,6,-8,-1,3,-2,4,5,-7,-3,-1,2,10,-10,-7,7,-8,7,-1,10,8,-3,4,-8,-4,9,-7,5,-6,-10,-7,-8,9,9,-6,6,-3,-8,6,-9,8,8,-3,-3,-5,10,10,-6,-7,-1,-6,-9,-7,-5,5,-3,-3,10,-3,5,-8,1,4,10,-2,4,-9,6,-2,-9,6,1,3,5,8,4,-6,-5,10,-2,6,2,-1,-3,9,1,4,-5,7,2,2,3,-1,-8,4,5,10,-9,-6,-5,4,10,-1,-4,-5,-4,-2,-6,-7,-6,-6,5,8,6,-4,-9,-8,6,-4,-8,9,-7,-2,4,7,2,-2,-7,9,-6,-6,-3,4,6,2,-6,-9,-3,-5,-10,-8,-4,-7,1,-8,-3,2,1,-7,-3,-2,-1,-3,1,1,8,4,-10,-7,-9,7,-9,7,-4,-8,5,-7,10,1,8,3,-3,-10,-7,3,-1,-7,-1,10,-1,4,6,-4,-3,-8,-9,9,-7,5,5,10,-10,6,-3,9,-3,-10,8,9,-9,2,-9,7,9,10,2,10,6,3,10,-5,-7,-6,-9,6,-2,-5,9,-7,-6,2,6,9,-8,3,-6,-3,-3,10,3,-1,6,6,-10,6,9,-5,10,6,8,-5,8,-9,-8,5,7,-6,4,8,4,-1,2,7,1,1,3,-4,-6,3,2,-5,6,1,3,3,5,-2,1,2,-5,1,-9,-10,-8,8,5,-8,-5,10,-10,9,8,-4,-3,10,7,7,-6,2,-1,3,-6,-6,10,10,10,7,3,6,-6,-7,10,1,-10,-10,-7,-9,-4,5,3,-7,-7,1,-4,9,5,-2,-9,-3,-8,-1,7,-8,-9,8,10,-4,-8,8,-2,-3,-2,-6,-10,1,-3,4,4,-3,-7,-6,-6,6,5,-7,3,-8,7,-8,-4,-8,1,8,-6,-10,-4,1,-9,6,-3,3,-5,10,6,2,9,6,1,-7,7,-3,-6,-2,3,10,-1,9,5,-9,-1,10,10,-10,-2,-10,-6,1,-7,-10,-1,6,5,-7,9,1,6,8,9,-6,6,-1,9,8,-7,10,-9,9,2,-4,3,-10,9,4,7,1,8,-10,6,-6,-6,-10,-1,-9,-4,-5,-8,-5,-3,7,10,5,-1,-6,-3,-1,-9,6,-7,-6,-5,7,5,2,-2,-10,-8,2,-2,-8,3,5,-10,3,-5,-10,9,4,9,2,5,-4,6,2,-4,-6,2,8,-2,9,9,8,7,10,7,7,-3,-5,-7,-9,-9,-8,6,-1,7,6,1,2,5,4,-3,6,-10,-4,-9,-7,-10,9,1,4,4,-1,-3,3,-4,-2,7,-2,-10,-5,-1,-9,-7,7,-2,3,-1,1,9,6,2,-10,-7,-8,-1,7,-5,-5,9,-10,2,-7,10,-1,-3,-2,-4,-3,-9,7,4,-3,2,-3,7,10,-9,-4,-4,-9,1,-9,6,-3,5,-4,-4,9,-5,5,-8,-3,3,-7,4,3,7,-8,5,9,-1,-8,2,-1,2,10,2,-8,-3,-1,10,2,-5,4,2,-10,6,10,-7,-6,-6,8,2,-2,-10,-3,4,-10,6,8,5,2,6,-1,2,2,4,9,-6,10,-3,-4,8,7,6,-1,5,-6,7,4,7,-9,-5,-6,9,-5,-10,-1,-3,-10,6,-1,7,2,5,5,-1,2,5,9,5,-8,2,-3,10,5,-7,8,6,-1,-5,4,1,6,-5,9,6,6,9,-7,3,6,10,7,4,-10,4,-9,-9,10,7,-5,7,4,-1,4,3,-7,3,-3,-1,8,-7,10,-9,2,-10,-2,8,-2,7,4,-9,6,-4,1,-2,-3,-3,6,1,-1,-7,-9,-8,-6,8,-6,-1,-9,1,-2,-8,-1,6,-4,-5], dtype = "uint16")#candidate|272|(1848,)|const|uint16
call_271 = relay.TupleGetItem(func_164_call(relay.reshape(const_272.astype('uint16'), [14, 11, 12]), relay.reshape(const_272.astype('uint16'), [14, 11, 12]), ), 0)
call_273 = relay.TupleGetItem(func_167_call(relay.reshape(const_272.astype('uint16'), [14, 11, 12]), relay.reshape(const_272.astype('uint16'), [14, 11, 12]), ), 0)
uop_276 = relay.sin(uop_254.astype('float64')) # shape=(4, 9)
bop_286 = relay.less_equal(uop_276.astype('bool'), relay.reshape(uop_254.astype('bool'), relay.shape_of(uop_276))) # shape=(4, 9)
output = relay.Tuple([call_259,var_260,var_261,call_271,const_272,bop_286,])
output2 = relay.Tuple([call_262,var_260,var_261,call_273,const_272,bop_286,])
func_289 = relay.Function([var_253,var_260,var_261,], output)
mod['func_289'] = func_289
mod = relay.transform.InferType()(mod)
mutated_mod['func_289'] = func_289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_289_call = mutated_mod.get_global_var('func_289')
var_291 = relay.var("var_291", dtype = "float64", shape = (4, 9))#candidate|291|(4, 9)|var|float64
var_292 = relay.var("var_292", dtype = "float64", shape = (390,))#candidate|292|(390,)|var|float64
var_293 = relay.var("var_293", dtype = "uint8", shape = (12,))#candidate|293|(12,)|var|uint8
call_290 = func_289_call(var_291,var_292,var_293,)
output = call_290
func_294 = relay.Function([var_291,var_292,var_293,], output)
mutated_mod['func_294'] = func_294
mutated_mod = relay.transform.InferType()(mutated_mod)
var_315 = relay.var("var_315", dtype = "float64", shape = (3, 6, 3))#candidate|315|(3, 6, 3)|var|float64
uop_316 = relay.erf(var_315.astype('float64')) # shape=(3, 6, 3)
bop_319 = relay.divide(uop_316.astype('float32'), relay.reshape(var_315.astype('float32'), relay.shape_of(uop_316))) # shape=(3, 6, 3)
bop_324 = relay.right_shift(uop_316.astype('int64'), relay.reshape(bop_319.astype('int64'), relay.shape_of(uop_316))) # shape=(3, 6, 3)
func_139_call = mod.get_global_var('func_139')
func_141_call = mutated_mod.get_global_var('func_141')
var_333 = relay.var("var_333", dtype = "float64", shape = (26,))#candidate|333|(26,)|var|float64
call_332 = relay.TupleGetItem(func_139_call(relay.reshape(var_333.astype('float64'), [2, 13])), 0)
call_334 = relay.TupleGetItem(func_141_call(relay.reshape(var_333.astype('float64'), [2, 13])), 0)
output = relay.Tuple([bop_324,call_332,var_333,])
output2 = relay.Tuple([bop_324,call_334,var_333,])
func_340 = relay.Function([var_315,var_333,], output)
mod['func_340'] = func_340
mod = relay.transform.InferType()(mod)
mutated_mod['func_340'] = func_340
mutated_mod = relay.transform.InferType()(mutated_mod)
func_340_call = mutated_mod.get_global_var('func_340')
var_342 = relay.var("var_342", dtype = "float64", shape = (3, 6, 3))#candidate|342|(3, 6, 3)|var|float64
var_343 = relay.var("var_343", dtype = "float64", shape = (26,))#candidate|343|(26,)|var|float64
call_341 = func_340_call(var_342,var_343,)
output = call_341
func_344 = relay.Function([var_342,var_343,], output)
mutated_mod['func_344'] = func_344
mutated_mod = relay.transform.InferType()(mutated_mod)
var_363 = relay.var("var_363", dtype = "bool", shape = (12, 7, 13))#candidate|363|(12, 7, 13)|var|bool
var_364 = relay.var("var_364", dtype = "bool", shape = (12, 7, 13))#candidate|364|(12, 7, 13)|var|bool
bop_365 = relay.logical_or(var_363.astype('bool'), relay.reshape(var_364.astype('bool'), relay.shape_of(var_363))) # shape=(12, 7, 13)
func_122_call = mod.get_global_var('func_122')
func_125_call = mutated_mod.get_global_var('func_125')
var_370 = relay.var("var_370", dtype = "float64", shape = (390,))#candidate|370|(390,)|var|float64
var_371 = relay.var("var_371", dtype = "uint8", shape = (12,))#candidate|371|(12,)|var|uint8
call_369 = relay.TupleGetItem(func_122_call(relay.reshape(var_370.astype('float64'), [3, 10, 13]), relay.reshape(var_371.astype('uint8'), [12,]), ), 2)
call_372 = relay.TupleGetItem(func_125_call(relay.reshape(var_370.astype('float64'), [3, 10, 13]), relay.reshape(var_371.astype('uint8'), [12,]), ), 2)
func_122_call = mod.get_global_var('func_122')
func_125_call = mutated_mod.get_global_var('func_125')
call_374 = relay.TupleGetItem(func_122_call(relay.reshape(call_369.astype('float64'), [3, 10, 13]), relay.reshape(var_371.astype('uint8'), [12,]), ), 2)
call_375 = relay.TupleGetItem(func_125_call(relay.reshape(call_369.astype('float64'), [3, 10, 13]), relay.reshape(var_371.astype('uint8'), [12,]), ), 2)
func_232_call = mod.get_global_var('func_232')
func_235_call = mutated_mod.get_global_var('func_235')
const_385 = relay.const([-3,-7,-10,-5,5,-8,5,-9,5,-6,-8,-9,-4,6,-9,-3,9,-3,5,1,-7,2,-5,8,4,-10,5,-1,-6,-8,-9,9,3,9,1,9,-9,10,1,3,2,-10,-5,-5,-5,7,-3,5,10,3,6,-9,-2,8,-7,-3,-8,-5,3,5,-4,-5,1,-5,4,4,2,6,2,-1,8,-7,6,-1,-3,-6,-1,6,-1,-4,-10,6,2,10,-7,-1,5,-3,-10,-10,3,10,9,7,-8,6,7,-2,5,3,2,-8,1,-8,6,-4,5,2,-1,-5,-9,-8,2,-7,1,10,-3,-2,2,5,-9,-8,4,-10,8,-3,6,-5,-1,-5,10,8,6,8,-10,-5,-2,5,2,1,1,-8,5,-5,-6,9,-10,1,-6,5,4,5,4,1,7,7,-6,-7,8,5,6,2,-2,-1,4,4,-5,-3,1,4,-6,8,-6,2,6,-2,3,8,8,4,7,-9,7,3,6,5,-8,5,-7,2,6,6,7,-7,-7,-9,6,-7,2,8,7,1,6,3,-4,-7,-8,-10,-10,10,-5,-2,-6,4,10,5,9,5,3,9,3,-8,2,4,6,-9,-4,3,-1,10,-1,9,5,5,3,7,-3,-5,-4,7,6,10,9,1,-2,-1,10,-3,5,-2,6,-4,-4,-4,-9,-6,-8,-4,2,5,8,5,8,-2,-9,-3,4,4,6,6,-8,10,-1,-3,10,6,-5,-6,10,8,-2,4,8,-8,5,-2,8,-1,4,3,3,2,10,-1,-5,2,9,5,-4,-6,9,-6,-9,8,-2,-9,-10,-2,-8,1,-3,-3,8,4,3,3,-7,8,9,-9,-5,-7,-9,5,4,-1,8,-1,-1,10,-2,-5,3,5,7,2,-2,9,10,9,2,10,3,6,-6,-8,-1,-9,4,8,-10,5,1,-5,8,4,-5,9,6,2,4,-2,4,-1,5,-4,-2,-7,3,-2,6,-10,-10,9,-6,2,4,7,5,-10,7,-5,1,2,6,6,9,2,-6,-9,-3,-4,-5,7,-1,2,9,9,-1,-5,-4,-8,-8,6,3,-8,-8,-5,5,3,-9,6,-4,9,7,-10,-6,7,1,7,1,-10,8,-10,-9,1,-9,7,5,9,-1,-4,-9,8,4,-4,1,-4,1,-5,8,-8,4,-2,-1,-10,10,-9,5,-9,-5,4,8,6,-1,-2,7,-9,7,-4,2,1,10,-3,7,3,-6,9,-6,-3,-6,-7,-7,7,-8,10,-5,-2,-1,9,6,2,-1,-7,-6,6,-5,8,-9,-6,6,-9,-9,7,5,-9,-9,6,-4,9,-3,-3,-7,-2,7,-7,4,-5,6,-2,-9,-3,-6,10,-2,-9,3,-3,2,-9,1,-2,-2,7,-1,9,2,8,-3,-7,7,-7,-9,-1,6,-1,-5,-2,-4,-5,8,4,-7,1,1,4,5,6,-2,6,-6,4,4,10,-5,-10,10,6,-6,-7,4,-3,-3,-4,6,4,8,5,4,-9,-10,-3,-3,-8,-5,-6,-6,-7,-9,-7,-2,7,9,-4,-9,1,2,-2], dtype = "uint8")#candidate|385|(588,)|const|uint8
call_384 = relay.TupleGetItem(func_232_call(relay.reshape(const_385.astype('uint8'), [6, 7, 14]), relay.reshape(const_385.astype('uint8'), [6, 7, 14]), ), 2)
call_386 = relay.TupleGetItem(func_235_call(relay.reshape(const_385.astype('uint8'), [6, 7, 14]), relay.reshape(const_385.astype('uint8'), [6, 7, 14]), ), 2)
bop_393 = relay.greater_equal(var_370.astype('bool'), relay.reshape(call_369.astype('bool'), relay.shape_of(var_370))) # shape=(390,)
bop_396 = relay.greater_equal(var_370.astype('bool'), relay.reshape(call_372.astype('bool'), relay.shape_of(var_370))) # shape=(390,)
func_139_call = mod.get_global_var('func_139')
func_141_call = mutated_mod.get_global_var('func_141')
const_398 = relay.const([2.571335,-4.390103,-0.122151,-7.103968,7.683686,-9.199016,0.490962,2.080098,-8.499025,-3.203645,0.924981,2.307168,-0.021420,-4.325839,2.210221,7.249009,2.462375,-5.087572,2.701945,-0.985710,2.588977,-0.193595,-4.244075,6.047150,-9.066914,3.131856], dtype = "float64")#candidate|398|(26,)|const|float64
call_397 = relay.TupleGetItem(func_139_call(relay.reshape(const_398.astype('float64'), [2, 13])), 0)
call_399 = relay.TupleGetItem(func_141_call(relay.reshape(const_398.astype('float64'), [2, 13])), 0)
output = relay.Tuple([bop_365,var_371,call_374,call_384,const_385,bop_393,call_397,const_398,])
output2 = relay.Tuple([bop_365,var_371,call_375,call_386,const_385,bop_396,call_399,const_398,])
func_402 = relay.Function([var_363,var_364,var_370,var_371,], output)
mod['func_402'] = func_402
mod = relay.transform.InferType()(mod)
var_403 = relay.var("var_403", dtype = "bool", shape = (12, 7, 13))#candidate|403|(12, 7, 13)|var|bool
var_404 = relay.var("var_404", dtype = "bool", shape = (12, 7, 13))#candidate|404|(12, 7, 13)|var|bool
var_405 = relay.var("var_405", dtype = "float64", shape = (390,))#candidate|405|(390,)|var|float64
var_406 = relay.var("var_406", dtype = "uint8", shape = (12,))#candidate|406|(12,)|var|uint8
output = func_402(var_403,var_404,var_405,var_406,)
func_407 = relay.Function([var_403,var_404,var_405,var_406,], output)
mutated_mod['func_407'] = func_407
mutated_mod = relay.transform.InferType()(mutated_mod)
var_416 = relay.var("var_416", dtype = "float64", shape = (7, 3, 6))#candidate|416|(7, 3, 6)|var|float64
uop_417 = relay.log2(var_416.astype('float64')) # shape=(7, 3, 6)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
const_420 = relay.const([[-3,6],[-1,-6],[5,-6],[8,10],[6,7],[-8,5]], dtype = "uint8")#candidate|420|(6, 2)|const|uint8
call_419 = func_61_call(relay.reshape(const_420.astype('uint8'), [6, 2]), relay.reshape(const_420.astype('uint8'), [6, 2]), )
call_421 = func_61_call(relay.reshape(const_420.astype('uint8'), [6, 2]), relay.reshape(const_420.astype('uint8'), [6, 2]), )
output = relay.Tuple([uop_417,call_419,const_420,])
output2 = relay.Tuple([uop_417,call_421,const_420,])
func_422 = relay.Function([var_416,], output)
mod['func_422'] = func_422
mod = relay.transform.InferType()(mod)
mutated_mod['func_422'] = func_422
mutated_mod = relay.transform.InferType()(mutated_mod)
var_423 = relay.var("var_423", dtype = "float64", shape = (7, 3, 6))#candidate|423|(7, 3, 6)|var|float64
func_422_call = mutated_mod.get_global_var('func_422')
call_424 = func_422_call(var_423)
output = call_424
func_425 = relay.Function([var_423], output)
mutated_mod['func_425'] = func_425
mutated_mod = relay.transform.InferType()(mutated_mod)
var_502 = relay.var("var_502", dtype = "float32", shape = (1,))#candidate|502|(1,)|var|float32
uop_503 = relay.asin(var_502.astype('float32')) # shape=(1,)
bop_510 = relay.less_equal(uop_503.astype('bool'), relay.reshape(var_502.astype('bool'), relay.shape_of(uop_503))) # shape=(1,)
func_422_call = mod.get_global_var('func_422')
func_425_call = mutated_mod.get_global_var('func_425')
var_515 = relay.var("var_515", dtype = "float64", shape = (126,))#candidate|515|(126,)|var|float64
call_514 = relay.TupleGetItem(func_422_call(relay.reshape(var_515.astype('float64'), [7, 3, 6])), 0)
call_516 = relay.TupleGetItem(func_425_call(relay.reshape(var_515.astype('float64'), [7, 3, 6])), 0)
bop_520 = relay.left_shift(var_502.astype('int32'), relay.reshape(bop_510.astype('int32'), relay.shape_of(var_502))) # shape=(1,)
output = relay.Tuple([call_514,var_515,bop_520,])
output2 = relay.Tuple([call_516,var_515,bop_520,])
func_524 = relay.Function([var_502,var_515,], output)
mod['func_524'] = func_524
mod = relay.transform.InferType()(mod)
mutated_mod['func_524'] = func_524
mutated_mod = relay.transform.InferType()(mutated_mod)
func_524_call = mutated_mod.get_global_var('func_524')
var_526 = relay.var("var_526", dtype = "float32", shape = (1,))#candidate|526|(1,)|var|float32
var_527 = relay.var("var_527", dtype = "float64", shape = (126,))#candidate|527|(126,)|var|float64
call_525 = func_524_call(var_526,var_527,)
output = call_525
func_528 = relay.Function([var_526,var_527,], output)
mutated_mod['func_528'] = func_528
mutated_mod = relay.transform.InferType()(mutated_mod)
const_557 = relay.const([[[2.537696,-4.682142,3.203404,8.752115,-8.807439,6.216882,-4.695335,8.093964,9.871533,2.999614,-6.460587,-5.540377,0.405089],[7.733243,6.858438,1.890814,-9.958802,1.752583,8.695682,4.328929,-2.201815,-6.168980,-2.608438,5.548813,-3.959871,8.363990],[-4.060875,2.568068,-9.328847,-3.358717,-4.440216,-0.372710,6.092314,-8.476046,-3.839704,-9.790240,-3.152489,-5.283607,-2.866335],[-8.199443,-7.928054,-9.039732,6.492439,1.797807,-0.570661,-2.908562,3.959570,-8.086359,-8.257770,7.174881,-4.872921,9.796597]],[[-4.416747,8.838532,4.590116,8.905622,8.637239,-9.638491,4.498138,-4.757409,0.269953,-4.937648,-2.752935,5.931421,-3.453727],[4.752444,-6.297734,6.071642,-2.955766,-0.573949,5.739081,-6.486058,1.360912,3.271519,-8.630285,-2.648632,-9.821181,-9.494294],[8.107219,-6.606804,-1.641210,1.270491,-6.071930,5.754177,4.770975,9.228357,4.097238,-7.310287,-5.896052,1.782310,1.336959],[4.515058,8.105686,-4.391337,9.021991,-0.183063,3.797466,4.153182,-1.198094,-5.172803,-9.683359,-1.494499,8.089194,-2.269266]],[[7.405370,-0.881786,9.242149,-7.008364,4.588145,-6.442861,8.424986,-7.595563,-5.878940,6.576963,-8.761516,-0.325085,8.730014],[-8.690644,3.247136,-8.942428,1.040661,-7.012584,-3.620757,6.507392,4.466176,9.174477,-0.448933,3.101393,3.958726,6.763428],[7.504660,-9.007416,0.674790,5.007044,8.176366,9.954411,2.876091,1.890329,-1.511078,0.710481,-5.858957,4.315110,5.732379],[9.204906,3.749190,-7.159425,3.814857,1.765471,-4.581748,9.774067,-0.342660,-0.766718,-9.644115,-8.971141,-6.325640,3.029183]],[[-9.501929,1.533638,1.776185,-9.559278,4.997966,4.574644,5.879759,7.576932,-7.794950,0.823536,3.763555,-6.793967,9.720588],[9.940930,-6.158375,2.198199,7.033178,-5.222552,7.125272,9.284078,-0.044155,8.861799,7.277468,8.423063,-3.048608,-5.410059],[-1.879743,0.235591,9.275864,1.478877,4.887470,-6.127115,7.131524,-7.471739,5.839760,5.288615,-2.286124,0.810122,-0.977572],[7.730735,2.588301,-9.221901,-4.844990,-6.553757,-3.521870,-5.299693,-1.159572,-9.445377,3.595354,-4.261463,-6.852424,-8.463447]],[[1.583085,-4.455633,-7.512229,-4.241075,-7.744724,1.193605,-4.321391,-8.536265,3.008791,7.204879,-2.352924,0.702488,-2.006340],[-4.960771,-8.748079,5.254614,5.391931,7.070360,-7.163592,9.660759,-8.268269,4.751719,-0.323261,-0.137611,-0.536883,5.689060],[0.005263,6.845572,3.887464,8.603856,-8.677432,7.913163,-8.347248,-1.906991,-9.040522,7.071369,-0.362866,9.741909,3.959007],[0.884380,7.753461,-4.230302,8.201400,-6.611036,5.621946,-5.096862,3.779394,1.958701,-4.961248,-0.122486,-5.454714,-3.728334]],[[-9.478340,1.097100,4.028750,-2.318416,-9.088914,7.077729,-1.856609,-9.699978,5.988745,4.082256,-0.719474,4.791260,-4.528518],[4.387814,1.175937,-5.608967,7.608593,5.357412,-4.674713,-0.207306,-0.226848,-2.228812,6.583638,5.723210,-9.972850,2.866565],[7.073876,2.221922,-6.131312,-7.330686,-3.273663,-8.240375,8.848409,-3.985906,9.392317,-6.096026,5.152454,-2.792241,3.145467],[3.377449,-6.216444,-9.936076,3.234565,-3.950345,-9.609544,-3.257943,3.019876,-8.291680,-4.642700,-5.501377,1.059462,-0.590216]],[[3.963914,-3.521393,-2.509736,-9.560928,-4.474391,-9.878188,0.186419,-6.158392,-5.612352,-6.523562,7.919899,-3.321581,-1.370355],[0.101034,1.746192,-7.012184,-8.977239,7.548338,-6.988963,7.900422,-0.099001,5.962824,-3.602523,4.729529,-4.325302,-7.371547],[-3.746805,7.189645,0.238182,0.274886,-8.107970,-2.713282,-4.792241,6.237982,6.762208,6.124808,9.555684,7.241845,-9.648182],[-3.855049,8.294943,-1.404967,5.968550,-3.047685,-7.560072,6.409972,6.689514,6.026036,2.541854,-1.342965,-4.967971,-7.657900]],[[-6.266935,5.701465,-4.964269,1.311761,5.754267,1.259111,-9.098070,0.572964,1.568018,8.618940,-2.651267,-3.300300,-9.998523],[5.193960,4.380270,-1.264622,8.473898,-3.348951,3.025885,9.273110,-7.986818,9.456500,-7.372809,5.585459,5.455522,-6.372289],[-0.147921,9.345047,-2.076880,9.407633,-9.268296,2.748787,3.905417,3.931816,-6.822424,7.666513,6.172273,0.292220,-5.921978],[-2.306702,1.458010,5.850819,1.076678,-9.436592,7.981565,2.393252,9.225733,-1.803522,5.227856,7.062363,-2.338323,-2.496083]],[[8.443468,-0.494208,-4.002989,4.168121,5.587896,7.765672,4.747260,-4.153976,7.127746,-0.870339,6.807603,-9.919669,-2.267849],[-7.398891,-0.007413,7.162902,-5.955851,1.006852,-9.152767,-2.968707,-8.835016,-6.159836,-9.015150,-9.607422,0.746996,-8.366088],[2.702391,7.576287,7.222759,0.948644,-6.534941,3.585481,-3.829143,7.483646,-6.654550,-2.902877,-8.090652,-3.682759,-7.107461],[-9.746219,-9.322984,-8.429077,3.570275,3.376951,8.466666,4.237065,4.952604,-0.930357,0.106299,-6.464248,2.074914,-1.176198]],[[-1.528150,-4.386014,-9.047576,-0.442511,-4.114480,-4.490826,-9.564830,-7.553273,-8.841997,9.845292,-5.344219,3.350827,0.998706],[5.049919,3.831609,-0.817952,4.658369,-6.815611,-6.120918,-6.078358,3.450597,-4.383190,-3.258307,9.124082,-1.817687,2.744306],[-9.480102,6.477972,-5.998574,-1.464782,-6.578758,5.539132,-5.351498,8.096088,-0.947502,4.697369,8.651367,4.640599,-2.123075],[-0.890815,1.140893,3.500670,4.166528,-2.024667,-3.735501,1.068251,3.248339,-3.493782,-3.473474,-5.793552,7.875341,-2.914482]],[[-8.729544,-8.168000,-6.608623,0.024536,-8.160890,1.264378,0.755547,-3.586114,-8.910939,0.465432,-0.780516,4.661296,3.290366],[-3.782722,6.199240,9.761173,-7.855215,-8.570297,1.786051,4.394731,4.324690,0.331887,-9.963684,-7.104445,1.231084,-9.642697],[0.304470,-8.445964,-9.390258,9.766945,5.980959,3.798138,-0.282722,-2.439589,8.896596,-8.546468,-6.558235,-2.615567,9.670405],[9.117644,-6.093273,-4.299574,-0.474779,-8.480927,4.034634,-7.707570,4.484299,7.845892,-5.684099,7.979972,8.940916,-4.692925]],[[8.105082,-5.813880,8.095040,9.313802,2.639970,6.741338,-0.302688,-0.648439,5.062667,-9.765031,-4.218131,-1.733314,2.383597],[2.287766,9.539685,-1.420347,-6.767136,4.870384,-0.120968,7.061960,4.419722,7.038824,-2.444222,8.672956,7.961368,-0.710538],[5.636343,-4.852113,-4.555749,0.458439,8.347140,-2.512650,-8.875690,8.066117,-0.490604,8.051061,3.173501,0.523091,-8.836048],[6.438648,-9.569229,-9.754708,-3.098952,-0.326107,-7.770274,1.876156,4.964296,9.450744,4.126978,9.936966,6.461354,0.309184]],[[6.032670,-0.196747,-2.855821,1.944958,-5.927701,-9.963158,-4.949193,6.673621,5.750828,-6.360470,2.515913,-6.744414,-7.465176],[-2.221916,-2.834671,-7.514898,3.100323,-3.475659,-0.508598,-4.720921,7.838670,-3.394449,-3.220691,-9.174284,-0.115056,-4.547065],[-8.086635,-0.574529,-0.683785,-9.325221,0.598919,4.924273,4.909264,-0.471878,8.018250,-9.961567,3.192449,0.428477,0.267930],[1.733227,-1.349302,8.803968,4.829240,-5.905436,-9.636030,-0.627428,2.813197,-4.953577,0.436389,0.963504,-5.259747,5.303221]],[[-1.631414,3.339640,-6.990959,2.311883,-4.853086,2.044724,-3.630624,-1.175525,-5.235823,-7.675250,-8.645429,5.525064,3.356142],[-3.984607,-8.156811,-3.121135,-5.511670,-9.347005,-1.007100,-1.037115,-2.587970,-2.899944,0.514462,-8.748368,-3.366173,5.795773],[7.094942,-7.459932,6.257438,-1.713632,8.505563,-3.581964,-7.358314,-5.661455,-7.298205,-7.493805,4.957365,-2.295489,8.074280],[-7.151760,3.996637,-5.898088,-9.097064,-1.344505,1.302246,-4.404041,8.065193,9.663274,8.424582,-6.062359,-3.655319,4.223908]]], dtype = "float32")#candidate|557|(14, 4, 13)|const|float32
uop_558 = relay.cosh(const_557.astype('float32')) # shape=(14, 4, 13)
const_567 = relay.const([[[2.276279,-6.916688,-8.207421,-7.172274,-9.887747,8.870593,-5.650556,-9.308968,7.355541,8.988132,-9.897022,8.994090,2.193803],[-0.768008,-4.215189,0.549912,-7.120104,-7.049534,1.546802,-1.230295,2.826442,3.954858,-7.017812,-5.057683,-4.161792,-0.506713],[-9.214390,0.578863,7.404026,0.493105,8.053326,-9.513823,-4.636550,4.076950,7.277817,7.822988,9.201031,6.675952,3.720265],[2.155984,5.411436,-8.597900,9.682046,0.772764,-2.102204,4.189344,-4.763544,0.005798,-5.614508,-8.319345,0.561403,9.807073]],[[-1.050994,-1.912006,-5.631845,5.320542,7.832990,7.762566,-6.257277,1.089827,1.842592,-2.931059,-4.277494,-2.193162,-9.411459],[2.918885,2.286959,-0.161360,1.983670,0.351330,-5.864100,4.827454,-6.131008,0.429942,3.078825,0.820557,8.482897,-2.716511],[-2.669331,-7.000018,-2.886213,-1.588718,-7.364591,1.600162,8.111828,-3.344484,-7.522540,7.054637,-7.297220,5.515358,8.935205],[4.336195,-4.289754,9.654610,-6.481652,-5.035302,4.538738,-9.957913,3.206579,8.956603,-9.391241,0.263983,2.018801,-8.900299]],[[7.570595,2.936088,-0.031611,1.401240,0.992886,6.648055,-8.166185,-6.571514,-7.753258,-6.085378,-1.592032,-3.179597,8.333724],[3.619018,-4.204555,-3.559545,5.535963,9.391601,-4.325473,5.018403,1.397757,-3.577365,-8.517940,3.439200,2.925309,-4.396564],[5.922395,8.817317,-9.831432,1.888002,-9.568693,-7.968132,2.620956,6.359226,-5.034750,6.604507,-7.781307,-6.655419,-1.844912],[4.807459,5.655830,-9.152042,1.733587,1.259825,-3.887488,-7.831081,-4.262707,7.865320,-7.483103,-3.027527,6.480760,-6.878278]],[[7.488821,-4.053062,-6.534242,7.534551,8.303269,-6.522674,6.082046,9.364262,-5.892032,-4.171724,-5.660900,7.449953,2.265186],[-9.799640,4.204867,-7.787188,0.347169,2.529458,-7.869604,2.439423,-8.386881,-1.905784,1.766979,0.940823,-7.082377,-5.706199],[1.608116,1.855387,9.612866,1.845052,7.302073,7.407434,-1.112898,-6.140297,-4.511068,5.651090,-9.299133,-2.119813,1.585891],[1.311159,-5.849355,-9.024202,2.919848,-8.793792,8.969294,-3.755539,6.506292,8.651620,-2.405429,-0.318621,1.877614,4.363656]],[[-2.079436,7.618616,5.901743,5.117248,3.038642,-3.995432,2.292476,2.934862,-9.679581,4.267215,-3.167632,-9.497926,1.697161],[1.558021,-0.649648,-3.818139,-9.314452,-6.806189,-9.508668,4.408033,7.554323,3.033471,-3.185082,-8.102802,-6.187124,-8.959033],[-5.863922,0.490640,-0.910282,5.021910,5.890467,2.783660,2.226170,0.406778,7.334443,2.821405,-4.150201,3.526144,-2.068169],[-6.539410,-8.196071,0.285342,1.594114,-7.643236,3.248224,-8.126120,7.558502,-8.898663,2.577797,-2.305496,8.738129,9.102374]],[[-6.025308,-8.966321,-6.195076,8.501161,-5.107333,-8.107101,9.086574,0.782166,-2.091347,2.274818,5.777040,-2.007156,-2.086515],[3.955696,5.555919,1.360338,4.544730,-8.588744,-5.904862,-1.557084,-9.042830,-3.308751,2.577314,-3.573600,2.215862,3.030626],[5.505811,5.942505,6.383450,7.946392,-5.383048,-1.876284,4.253631,7.779244,3.479832,-8.026663,-6.542417,6.866533,-3.951798],[4.413960,-5.238945,-3.069665,8.991939,8.904825,-0.810010,1.733771,2.173776,-6.805152,-4.165574,2.377353,-1.873572,8.591634]],[[-1.272652,-7.582769,-4.299185,2.031563,6.498666,-5.264717,0.598711,3.127630,0.663244,-5.575586,-7.218015,9.384515,5.685972],[-0.243936,-1.084125,-4.299385,8.314818,3.269867,8.126574,-1.027628,-5.869471,2.509095,-9.223747,6.785086,7.737435,-8.328723],[-3.232667,-3.533103,-1.638908,9.823596,-7.545914,-6.817352,4.599202,2.132617,-7.882554,9.880511,-5.291545,-4.091900,4.985191],[-8.468802,-9.326199,-5.694314,-1.713153,-5.099772,-7.073993,7.196498,4.950840,-4.581166,8.270747,7.342176,4.510063,-3.855506]],[[9.951591,-2.026067,-3.868705,7.719329,1.533556,-0.125230,-5.183139,4.173945,-8.578367,1.724890,-1.916146,-5.650148,6.064852],[4.071931,-5.950863,7.644809,-5.608418,-4.227409,-3.072933,4.608045,-4.805525,-6.623550,-6.751274,6.681252,-6.480860,9.712690],[-5.145899,7.654077,1.778091,-8.142168,-9.936911,-2.099111,7.013019,-2.731661,-4.881251,4.478486,1.646541,-0.725699,1.746226],[-4.729655,-2.766554,-6.375727,-7.566610,4.150321,-8.910009,2.842777,9.799841,-1.495785,8.761483,-4.077618,-7.205548,-1.333538]],[[1.986886,-7.043301,-6.662168,0.053179,-5.084542,3.041665,7.507872,-5.929954,-9.739359,-1.825297,4.877456,-3.403096,1.688313],[3.949834,-8.162638,7.316186,-0.812066,9.013653,6.745151,6.933718,-4.080614,-4.071385,2.131976,-0.033010,-6.344887,1.671181],[8.986767,-7.541506,4.506448,-7.368368,3.842204,7.767714,1.364526,-8.770596,3.671717,-1.969126,-0.825098,9.144845,-2.371015],[8.788498,9.758662,-3.911418,-6.057289,8.232511,-7.987682,-1.552570,-6.450761,1.257935,-9.258809,-1.345574,-0.368837,7.496702]],[[4.159746,-1.968590,-8.057960,-3.041015,5.185408,-4.980351,-8.464777,0.155236,-5.798594,-3.611294,1.728667,-9.372421,-8.225298],[-6.492569,-7.461104,8.598355,-3.267978,2.035811,-3.478366,-5.681344,-6.941020,5.633398,3.408626,-3.340170,-6.471281,-1.649368],[-2.284077,3.625975,1.481591,5.271730,-4.865619,8.605096,6.404190,1.695319,-5.812840,3.731699,4.207675,4.451529,1.892895],[-3.253691,1.266563,7.191073,3.590193,-2.847846,-0.214312,-3.752093,-5.591152,-6.310156,-4.050807,0.848832,5.317021,-2.448689]],[[-1.023719,8.974352,2.131686,7.711207,-4.868080,-0.849143,-9.801025,-6.165625,3.828991,0.213840,-8.920204,5.090011,1.501937],[-3.153064,5.163088,2.316481,-5.073180,0.343898,-2.730067,-5.630257,8.486838,0.871254,5.261023,3.307594,-1.163019,3.691054],[-9.513381,-7.402975,5.270429,-1.888555,4.315811,-3.010615,2.155497,6.225571,0.884720,-2.695745,-6.691435,-5.337353,-6.614938],[-1.958490,-8.080329,9.498426,-1.841893,-5.120209,-2.375548,-1.694478,5.466308,-4.358935,-9.816486,-0.983453,9.086504,5.349580]],[[-8.127992,-0.566348,6.289964,-5.919389,-9.401938,-5.361536,0.612152,-6.123668,8.677346,6.894638,-1.933520,7.749357,8.845239],[-5.592910,0.450250,-8.068084,1.359524,-1.581830,-2.683330,-3.587398,-0.373084,2.349510,1.117185,-6.533288,4.658258,2.020423],[7.176191,-8.808805,6.569634,4.807244,-1.080038,-0.392560,-3.982165,-5.582171,6.166612,6.999401,9.678960,0.415345,6.601037],[-9.718638,7.697627,-7.354659,-9.997383,6.029745,8.214366,-7.086261,0.117057,2.522116,6.523698,-8.457848,-1.974785,2.346017]],[[-8.486909,-6.928197,-6.162748,-8.016465,9.472753,-1.106093,-6.688417,7.055205,-6.684094,4.196560,-9.089326,-2.115110,1.328603],[3.439455,-8.252734,7.347843,1.907281,-1.905364,-8.202951,-7.267533,5.303135,-5.508393,-3.164759,6.182604,4.246185,-6.201544],[2.171470,-2.274532,3.116603,-5.919397,-9.118210,1.922009,-5.632981,9.020020,-4.042485,-1.388694,-6.108917,5.037540,-9.175367],[7.672837,-9.154156,0.269504,-9.302561,-0.085623,7.687624,-4.775998,-1.669544,-6.935967,3.794288,-3.775363,3.251180,-4.686870]],[[3.206519,-0.080783,-3.643475,6.088044,-6.582035,5.634299,-7.735814,-9.341188,-8.536183,3.621946,-5.174075,3.822190,1.165274],[-2.383613,-6.420929,-9.512759,-8.395360,8.653802,1.062123,6.059120,-8.904673,-3.373685,-0.067264,-1.641184,9.402551,-4.082628],[3.711284,-3.109697,2.509582,2.643737,8.276499,7.779151,2.643027,-3.322308,9.186063,-5.397762,-4.961599,4.339365,2.882335],[-8.410028,1.857827,0.129505,-5.216844,-4.086481,-8.622129,-8.869131,1.101997,5.566602,-2.647928,3.887431,-4.757003,4.416319]]], dtype = "float32")#candidate|567|(14, 4, 13)|const|float32
bop_568 = relay.minimum(uop_558.astype('int32'), relay.reshape(const_567.astype('int32'), relay.shape_of(uop_558))) # shape=(14, 4, 13)
bop_575 = relay.divide(const_557.astype('float64'), relay.reshape(bop_568.astype('float64'), relay.shape_of(const_557))) # shape=(14, 4, 13)
uop_582 = relay.sin(const_557.astype('float32')) # shape=(14, 4, 13)
output = relay.Tuple([bop_575,uop_582,])
output2 = relay.Tuple([bop_575,uop_582,])
func_588 = relay.Function([], output)
mod['func_588'] = func_588
mod = relay.transform.InferType()(mod)
output = func_588()
func_589 = relay.Function([], output)
mutated_mod['func_589'] = func_589
mutated_mod = relay.transform.InferType()(mutated_mod)
var_595 = relay.var("var_595", dtype = "bool", shape = (8, 7, 9))#candidate|595|(8, 7, 9)|var|bool
var_596 = relay.var("var_596", dtype = "bool", shape = (8, 7, 9))#candidate|596|(8, 7, 9)|var|bool
bop_597 = relay.logical_or(var_595.astype('bool'), relay.reshape(var_596.astype('bool'), relay.shape_of(var_595))) # shape=(8, 7, 9)
bop_600 = relay.divide(var_595.astype('float32'), relay.reshape(bop_597.astype('float32'), relay.shape_of(var_595))) # shape=(8, 7, 9)
bop_617 = relay.bitwise_xor(bop_597.astype('uint16'), relay.reshape(bop_600.astype('uint16'), relay.shape_of(bop_597))) # shape=(8, 7, 9)
bop_623 = relay.right_shift(bop_600.astype('int64'), relay.reshape(bop_597.astype('int64'), relay.shape_of(bop_600))) # shape=(8, 7, 9)
output = relay.Tuple([bop_617,bop_623,])
output2 = relay.Tuple([bop_617,bop_623,])
func_633 = relay.Function([var_595,var_596,], output)
mod['func_633'] = func_633
mod = relay.transform.InferType()(mod)
var_634 = relay.var("var_634", dtype = "bool", shape = (8, 7, 9))#candidate|634|(8, 7, 9)|var|bool
var_635 = relay.var("var_635", dtype = "bool", shape = (8, 7, 9))#candidate|635|(8, 7, 9)|var|bool
output = func_633(var_634,var_635,)
func_636 = relay.Function([var_634,var_635,], output)
mutated_mod['func_636'] = func_636
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_641 = relay.TupleGetItem(func_588_call(), 1)
call_642 = relay.TupleGetItem(func_589_call(), 1)
func_289_call = mod.get_global_var('func_289')
func_294_call = mutated_mod.get_global_var('func_294')
var_650 = relay.var("var_650", dtype = "float64", shape = (3, 12))#candidate|650|(3, 12)|var|float64
const_651 = relay.const([-9.167743,3.969884,0.676819,-5.866607,-6.135831,3.527862,8.568982,-1.119327,-5.530097,-9.838378,0.425675,3.602264,-0.115372,1.307916,-8.954747,9.228736,1.726043,-2.944329,8.052004,-1.311684,9.056396,-7.751910,-0.064578,1.525970,2.178551,-1.819898,-3.917937,-1.086744,1.865783,-5.853065,5.241663,-9.721803,1.755911,-8.201347,8.740669,-9.183563,-4.111569,2.131833,8.503980,8.488869,8.631875,0.658660,9.272509,-7.630022,-2.378394,-8.497847,-7.964145,-8.465767,2.446661,7.217047,-2.127860,-3.761704,-3.141057,1.075285,-0.413039,-3.434296,9.419070,-2.139557,9.853589,7.744343,7.245099,-3.949808,1.701383,1.515914,9.242162,2.875004,0.291438,-3.536100,-1.845230,0.258484,-1.613053,-7.292594,-8.472873,5.085080,2.503694,0.783322,-7.586512,-7.825137,-5.696884,6.107308,-1.275927,6.461433,-1.796992,7.884664,-8.811711,9.825504,-6.121636,-3.913206,-4.516047,3.208983,-2.801605,2.046906,-0.181048,-8.970069,8.418105,-6.673965,3.171936,8.959515,3.359763,-7.613135,-9.590526,-8.309555,8.896787,6.298909,-8.333947,3.914932,8.355887,-3.431351,-4.744801,-7.495809,-3.232505,-1.625318,6.467327,7.580365,-6.634050,-8.903132,9.275557,-4.997166,0.132920,5.013046,-1.541743,-4.443659,3.693878,6.873664,-9.652211,9.600664,-0.180226,-4.561252,-8.066197,-2.972821,6.407350,0.598097,8.635657,5.448522,4.975396,2.277507,6.605053,9.175229,-0.962568,-0.226133,-3.286961,4.522636,0.941488,-3.838389,6.241275,8.023822,7.492003,7.464189,-8.794551,3.533647,1.045117,9.332426,0.250853,3.006572,9.992769,-3.304739,-1.086721,-7.500471,3.761361,2.298678,4.533847,3.969602,6.499094,4.124302,2.704933,0.276630,6.436897,7.415728,3.144665,-2.513598,-5.566060,-4.836604,-5.843104,0.994576,-2.220035,-1.552331,6.466196,-7.805288,3.561184,-0.861120,6.215982,9.810931,-6.102889,6.210561,-9.776555,-0.663425,-7.845427,4.214330,7.195320,-1.973464,7.113772,9.028565,-6.301540,4.823966,9.689437,-8.079480,5.352900,-5.834244,-6.933354,8.053695,1.681974,1.853047,-5.237131,2.112781,5.213499,2.536356,-8.047191,4.340825,3.561666,-1.346776,-9.030657,1.370019,8.235474,0.219010,3.280390,-3.011920,-9.224537,-8.143138,-5.861034,-0.742631,1.182683,-6.879684,-3.254895,-7.979734,-3.794076,4.839934,8.380436,-9.700838,-8.970784,-2.041142,-9.211327,-7.424798,-5.892241,6.562808,-9.111662,6.969884,-0.845168,-0.278568,8.140385,-4.518957,0.468739,0.766786,-2.634257,2.777617,2.314595,-5.021743,-7.526849,7.299273,3.985779,1.570499,-4.265089,3.057017,-4.012063,-2.691024,-2.316538,9.221732,-8.820441,-4.559442,-1.432844,9.266213,0.323689,6.035498,-0.979883,-7.008073,-8.701513,-6.584860,-8.957176,5.847635,7.951053,4.314009,-1.940004,6.636046,2.622323,6.906529,-7.964717,5.380871,-8.153186,0.329875,5.726832,-3.773454,-5.997617,3.711236,-2.265527,7.116814,-8.409022,5.223029,-2.572234,6.385293,-5.706547,1.977523,6.983109,-6.534430,-7.431939,-2.996748,6.027582,2.265862,9.770935,8.151899,5.524104,0.938992,6.353963,-7.583124,-7.866566,2.669982,-9.906201,2.323292,8.114958,4.937164,0.641741,-3.468225,-8.753036,-6.955056,-9.678189,7.173163,5.936848,3.618409,7.630301,-9.769723,8.935609,-9.459063,-3.380428,5.590011,6.615931,5.598243,-3.301022,9.965938,5.288387,7.637247,1.539377,0.669300,6.027133,1.425225,-9.704438,-5.439755,1.543379,2.779985,-5.379726,-4.452727,9.625297,0.959299,8.082648,-5.072429,-8.590116,-1.302815,-2.758437,-0.259332,-3.563181,-1.961328,6.327574,-9.565194,5.200734,0.341712,-4.059754,1.734872,9.561183,7.308632,-3.102043,-7.103767,4.393551,-1.434338,-8.120716,-0.423194,1.924314,-5.955255,5.961742,7.808753,-8.404837,7.683728,-9.545871,6.885186,1.775193,-1.397864,-1.366788,-6.293065,6.541502,-9.933566,-8.367339,-5.262274,3.805348,-8.172534,1.472251,-0.686289,-3.618380,-3.565553,-7.374258,4.789589,5.816230,3.834993,-5.368405,1.688527], dtype = "float64")#candidate|651|(390,)|const|float64
const_652 = relay.const([6,2,-9,3,8,4,4,2,2,3,-4,10], dtype = "uint8")#candidate|652|(12,)|const|uint8
call_649 = relay.TupleGetItem(func_289_call(relay.reshape(var_650.astype('float64'), [4, 9]), relay.reshape(const_651.astype('float64'), [390,]), relay.reshape(const_652.astype('uint8'), [12,]), ), 4)
call_653 = relay.TupleGetItem(func_294_call(relay.reshape(var_650.astype('float64'), [4, 9]), relay.reshape(const_651.astype('float64'), [390,]), relay.reshape(const_652.astype('uint8'), [12,]), ), 4)
func_139_call = mod.get_global_var('func_139')
func_141_call = mutated_mod.get_global_var('func_141')
var_663 = relay.var("var_663", dtype = "float64", shape = (26,))#candidate|663|(26,)|var|float64
call_662 = relay.TupleGetItem(func_139_call(relay.reshape(var_663.astype('float64'), [2, 13])), 0)
call_664 = relay.TupleGetItem(func_141_call(relay.reshape(var_663.astype('float64'), [2, 13])), 0)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_665 = relay.TupleGetItem(func_588_call(), 1)
call_666 = relay.TupleGetItem(func_589_call(), 1)
func_633_call = mod.get_global_var('func_633')
func_636_call = mutated_mod.get_global_var('func_636')
var_668 = relay.var("var_668", dtype = "bool", shape = (504,))#candidate|668|(504,)|var|bool
call_667 = relay.TupleGetItem(func_633_call(relay.reshape(var_668.astype('bool'), [8, 7, 9]), relay.reshape(var_668.astype('bool'), [8, 7, 9]), ), 1)
call_669 = relay.TupleGetItem(func_636_call(relay.reshape(var_668.astype('bool'), [8, 7, 9]), relay.reshape(var_668.astype('bool'), [8, 7, 9]), ), 1)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
call_670 = func_61_call(relay.reshape(const_652.astype('uint8'), [6, 2]), relay.reshape(const_652.astype('uint8'), [6, 2]), )
call_671 = func_61_call(relay.reshape(const_652.astype('uint8'), [6, 2]), relay.reshape(const_652.astype('uint8'), [6, 2]), )
var_673 = relay.var("var_673", dtype = "float64", shape = (390,))#candidate|673|(390,)|var|float64
bop_674 = relay.bitwise_or(const_651.astype('uint16'), relay.reshape(var_673.astype('uint16'), relay.shape_of(const_651))) # shape=(390,)
func_402_call = mod.get_global_var('func_402')
func_407_call = mutated_mod.get_global_var('func_407')
var_685 = relay.var("var_685", dtype = "bool", shape = (1092,))#candidate|685|(1092,)|var|bool
call_684 = relay.TupleGetItem(func_402_call(relay.reshape(var_685.astype('bool'), [12, 7, 13]), relay.reshape(var_685.astype('bool'), [12, 7, 13]), relay.reshape(bop_674.astype('float64'), [390,]), relay.reshape(call_670.astype('uint8'), [12,]), ), 0)
call_686 = relay.TupleGetItem(func_407_call(relay.reshape(var_685.astype('bool'), [12, 7, 13]), relay.reshape(var_685.astype('bool'), [12, 7, 13]), relay.reshape(bop_674.astype('float64'), [390,]), relay.reshape(call_670.astype('uint8'), [12,]), ), 0)
func_633_call = mod.get_global_var('func_633')
func_636_call = mutated_mod.get_global_var('func_636')
call_687 = relay.TupleGetItem(func_633_call(relay.reshape(var_668.astype('bool'), [8, 7, 9]), relay.reshape(call_667.astype('bool'), [8, 7, 9]), ), 0)
call_688 = relay.TupleGetItem(func_636_call(relay.reshape(var_668.astype('bool'), [8, 7, 9]), relay.reshape(call_667.astype('bool'), [8, 7, 9]), ), 0)
bop_693 = relay.less(call_667.astype('bool'), relay.reshape(call_687.astype('bool'), relay.shape_of(call_667))) # shape=(8, 7, 9)
bop_696 = relay.less(call_669.astype('bool'), relay.reshape(call_688.astype('bool'), relay.shape_of(call_669))) # shape=(8, 7, 9)
output = relay.Tuple([call_641,call_649,var_650,const_652,call_662,var_663,call_665,var_668,call_670,bop_674,call_684,var_685,bop_693,])
output2 = relay.Tuple([call_642,call_653,var_650,const_652,call_664,var_663,call_666,var_668,call_671,bop_674,call_686,var_685,bop_696,])
func_697 = relay.Function([var_650,var_663,var_668,var_673,var_685,], output)
mod['func_697'] = func_697
mod = relay.transform.InferType()(mod)
var_698 = relay.var("var_698", dtype = "float64", shape = (3, 12))#candidate|698|(3, 12)|var|float64
var_699 = relay.var("var_699", dtype = "float64", shape = (26,))#candidate|699|(26,)|var|float64
var_700 = relay.var("var_700", dtype = "bool", shape = (504,))#candidate|700|(504,)|var|bool
var_701 = relay.var("var_701", dtype = "float64", shape = (390,))#candidate|701|(390,)|var|float64
var_702 = relay.var("var_702", dtype = "bool", shape = (1092,))#candidate|702|(1092,)|var|bool
output = func_697(var_698,var_699,var_700,var_701,var_702,)
func_703 = relay.Function([var_698,var_699,var_700,var_701,var_702,], output)
mutated_mod['func_703'] = func_703
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_751 = relay.TupleGetItem(func_588_call(), 0)
call_752 = relay.TupleGetItem(func_589_call(), 0)
var_758 = relay.var("var_758", dtype = "float64", shape = (14, 4, 13))#candidate|758|(14, 4, 13)|var|float64
bop_759 = relay.multiply(call_751.astype('uint32'), relay.reshape(var_758.astype('uint32'), relay.shape_of(call_751))) # shape=(14, 4, 13)
bop_762 = relay.multiply(call_752.astype('uint32'), relay.reshape(var_758.astype('uint32'), relay.shape_of(call_752))) # shape=(14, 4, 13)
func_697_call = mod.get_global_var('func_697')
func_703_call = mutated_mod.get_global_var('func_703')
const_766 = relay.const([8.250388,4.917358,2.059572,-5.416108,-1.977972,-3.786641,-3.157714,7.860758,5.160478,-6.498267,-9.450277,-8.548879,8.072330,-2.704844,-0.068845,9.514240,-7.469717,-5.464922,-1.963455,-1.440157,-1.603092,-2.741907,3.969099,-7.572933,4.404988,-0.333069,5.464424,-6.600110,-4.418055,3.572213,0.477955,2.856150,0.350391,-0.061901,-6.607192,1.364805], dtype = "float64")#candidate|766|(36,)|const|float64
const_767 = relay.const([6.786567,7.327158,-1.471717,-1.572654,-3.325526,2.127963,1.983044,4.156420,0.085399,6.610863,-7.116152,6.521721,-4.056977,-6.093923,-3.887386,-0.537099,0.378279,-4.050952,8.657294,8.116960,7.416194,-0.554439,-5.978242,7.003952,-0.967864,-3.431454], dtype = "float64")#candidate|767|(26,)|const|float64
var_768 = relay.var("var_768", dtype = "bool", shape = (504,))#candidate|768|(504,)|var|bool
var_769 = relay.var("var_769", dtype = "float64", shape = (390,))#candidate|769|(390,)|var|float64
var_770 = relay.var("var_770", dtype = "bool", shape = (1092, 1))#candidate|770|(1092, 1)|var|bool
call_765 = relay.TupleGetItem(func_697_call(relay.reshape(const_766.astype('float64'), [3, 12]), relay.reshape(const_767.astype('float64'), [26,]), relay.reshape(var_768.astype('bool'), [504,]), relay.reshape(var_769.astype('float64'), [390,]), relay.reshape(var_770.astype('bool'), [1092,]), ), 0)
call_771 = relay.TupleGetItem(func_703_call(relay.reshape(const_766.astype('float64'), [3, 12]), relay.reshape(const_767.astype('float64'), [26,]), relay.reshape(var_768.astype('bool'), [504,]), relay.reshape(var_769.astype('float64'), [390,]), relay.reshape(var_770.astype('bool'), [1092,]), ), 0)
output = relay.Tuple([bop_759,call_765,const_766,const_767,var_768,var_769,var_770,])
output2 = relay.Tuple([bop_762,call_771,const_766,const_767,var_768,var_769,var_770,])
func_776 = relay.Function([var_758,var_768,var_769,var_770,], output)
mod['func_776'] = func_776
mod = relay.transform.InferType()(mod)
var_777 = relay.var("var_777", dtype = "float64", shape = (14, 4, 13))#candidate|777|(14, 4, 13)|var|float64
var_778 = relay.var("var_778", dtype = "bool", shape = (504,))#candidate|778|(504,)|var|bool
var_779 = relay.var("var_779", dtype = "float64", shape = (390,))#candidate|779|(390,)|var|float64
var_780 = relay.var("var_780", dtype = "bool", shape = (1092, 1))#candidate|780|(1092, 1)|var|bool
output = func_776(var_777,var_778,var_779,var_780,)
func_781 = relay.Function([var_777,var_778,var_779,var_780,], output)
mutated_mod['func_781'] = func_781
mutated_mod = relay.transform.InferType()(mutated_mod)
var_788 = relay.var("var_788", dtype = "float64", shape = (9, 7))#candidate|788|(9, 7)|var|float64
uop_789 = relay.sinh(var_788.astype('float64')) # shape=(9, 7)
func_232_call = mod.get_global_var('func_232')
func_235_call = mutated_mod.get_global_var('func_235')
var_794 = relay.var("var_794", dtype = "uint8", shape = (588,))#candidate|794|(588,)|var|uint8
call_793 = relay.TupleGetItem(func_232_call(relay.reshape(var_794.astype('uint8'), [6, 7, 14]), relay.reshape(var_794.astype('uint8'), [6, 7, 14]), ), 2)
call_795 = relay.TupleGetItem(func_235_call(relay.reshape(var_794.astype('uint8'), [6, 7, 14]), relay.reshape(var_794.astype('uint8'), [6, 7, 14]), ), 2)
func_122_call = mod.get_global_var('func_122')
func_125_call = mutated_mod.get_global_var('func_125')
const_799 = relay.const([[0.427818,7.652468,-7.980545,1.605646,5.567000,-3.461988,-2.918080,-5.374691,-8.806375,1.163773,5.329556,-1.179782,-1.146989,8.684823,-5.450888,7.192105,6.587609,6.673559,6.822162,7.104302,-5.969387,-0.177435,9.971031,-3.144819,-6.920667,-0.609045,2.131205,-3.740861,-2.534585,0.364076,-2.925981,-8.071009,5.778698,0.438592,-0.865268,5.677615,6.395714,-2.203879,9.187271,-6.474939,-9.451206,1.539335,5.274971,-5.258275,1.160628,-3.662273,-8.583192,0.888688,-7.352608,-6.920424,2.198244,6.487085,8.141320,8.196249,-2.610627,-8.666747,-8.376089,6.970504,6.004273,-4.459939,4.240751,-9.755348,6.724952,1.839340,9.522194,5.645283,-9.751934,5.842790,-1.467811,-3.960628,-0.491830,7.550073,-4.805584,-5.601837,-3.341228,-9.301472,9.209454,4.636066,-2.672197,-5.326350,7.378162,-3.263629,-2.629945,4.015662,-4.076304,5.133078,9.674183,8.601335,7.398499,0.862084,-2.684304,0.999160,3.350974,3.920559,-0.795783,6.271289,1.737601,9.258864,3.780747,-4.371749,-3.698774,-5.979306,-5.394415,7.201640,1.449411,-9.022477,-1.779644,1.581405,-4.736854,5.830621,-0.230645,-9.983600,-9.623998,1.908734,0.804507,0.041268,6.061590,0.070888,7.110803,-6.563240,9.281250,0.494902,-3.405623,0.625937,4.404921,8.014741,9.231824,6.540336,8.776199,3.060401,-0.421330,-5.997770,-1.157996,2.232032,-9.313266,-3.397050,-4.018965,2.916311,-1.128068,-3.479087,7.250910,9.965456,1.108074,-3.622730,1.276405,5.744801,-7.834284,-9.630161,0.205772,5.124358,3.998680,-9.583054,4.685800,-4.707918,-0.693811,0.969613,5.394202,2.325839,8.952789,4.293124,4.568608,-7.423197,0.188883,1.277728,-6.623274,-1.256457,-5.958038,-7.933645,1.728202,-8.288463,3.007994,5.353433,-7.981122,2.849138,2.650749,8.674544,-5.384139,-4.452079,-5.752587,-4.214169,-7.102608,-5.669772,7.813182,-1.671708,1.645753,9.459591,-5.414238,6.054011,8.740721,-7.295411,-6.857492,5.546961,2.191354,-3.242887,0.211045,8.050168,9.811716,7.855541,-7.546558,7.036815,-2.932408,-8.837958,-6.105508,4.832368,-2.596101,-8.808766,2.617731,4.348756,5.940392,-9.565246,5.087387,0.136254,3.622738,2.051661,-3.879850,-4.851282,5.071767,-7.466353,-3.985205,0.328625,4.276878,0.094626,-1.058978,-3.792841,-1.777797,-8.137024,-8.814162,2.649587,-8.861564,0.262966,9.490338,7.346964,-3.798778,-6.063016,-0.982067,2.986616,7.527030,-8.666297,-5.467612,-7.459524,-9.467882,-4.218588,-7.592172,-6.173316,-0.625087,2.530994,0.765242,9.293623,-8.144291,8.444945,5.724818,5.670441,7.677647,-4.602188,-7.531749,8.612713,-2.650255,6.779577,5.637688,4.523182,5.747321,1.588693,-1.387124,-6.635124,3.133608,7.260407,-6.930315,5.853007,-6.689739,7.997479,-7.962905,0.665773,-2.164373,4.530480,4.516776,-4.011191,-7.430023,6.522547,-6.433369,3.686803,4.460667,-7.694258,5.975676,-4.379384,-2.506093,-4.907125,-5.027642,5.461834,-2.087698,-5.552914,2.403030,-3.235906,-7.432667,-1.326419,8.470125,-8.943680,-4.880491,7.458876,1.650888,-9.901237,0.890807,-6.395051,-3.089963,8.004613,5.131586,-2.990955,-3.776389,-2.637840,6.626052,4.227520,-5.162878,5.781314,-6.107428,7.908923,-7.909784,7.386539,-7.689239,7.511546,5.828135,-8.818332,-7.772418,-6.581964,2.380266,-3.045597,7.074500,-8.048470,0.562725,2.425103,-5.467348,2.619947,-2.069431,-3.981061,2.812447,3.889882,-9.752168,9.013310,2.527634,1.734177,-0.813661,9.875753,0.419948,0.097327,9.116259,1.387733,2.693972,2.090705,6.774758,0.695732,6.191491,-5.872659,-6.333404,0.854180,9.387980,-2.417714,-6.250848,4.624918,9.110273,-3.399033,0.890860,-8.135472,0.371477,-3.809732,-7.757532,2.495509,0.268709,7.240277,1.718468,2.894555,-6.928177,-7.524386,5.635935,-6.973157,-2.305072,2.619959,-4.456681,5.994826,1.260177,2.818220,5.486496,-9.531448,-9.300708,-7.492108,-8.278581,-9.374233,1.698621,0.439681,-4.964687,-4.661267,-3.927080,8.003710]], dtype = "float64")#candidate|799|(1, 390)|const|float64
const_800 = relay.const([-10,-4,-9,-4,-7,5,9,7,5,-4,8,-9], dtype = "uint8")#candidate|800|(12,)|const|uint8
call_798 = relay.TupleGetItem(func_122_call(relay.reshape(const_799.astype('float64'), [3, 10, 13]), relay.reshape(const_800.astype('uint8'), [12,]), ), 1)
call_801 = relay.TupleGetItem(func_125_call(relay.reshape(const_799.astype('float64'), [3, 10, 13]), relay.reshape(const_800.astype('uint8'), [12,]), ), 1)
uop_803 = relay.asin(uop_789.astype('float32')) # shape=(9, 7)
uop_805 = relay.tan(uop_803.astype('float64')) # shape=(9, 7)
bop_808 = relay.logical_xor(uop_805.astype('int16'), relay.reshape(uop_803.astype('int16'), relay.shape_of(uop_805))) # shape=(9, 7)
output = relay.Tuple([call_793,var_794,call_798,const_799,const_800,bop_808,])
output2 = relay.Tuple([call_795,var_794,call_801,const_799,const_800,bop_808,])
func_821 = relay.Function([var_788,var_794,], output)
mod['func_821'] = func_821
mod = relay.transform.InferType()(mod)
var_822 = relay.var("var_822", dtype = "float64", shape = (9, 7))#candidate|822|(9, 7)|var|float64
var_823 = relay.var("var_823", dtype = "uint8", shape = (588,))#candidate|823|(588,)|var|uint8
output = func_821(var_822,var_823,)
func_824 = relay.Function([var_822,var_823,], output)
mutated_mod['func_824'] = func_824
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_841 = relay.TupleGetItem(func_588_call(), 1)
call_842 = relay.TupleGetItem(func_589_call(), 1)
uop_862 = relay.sinh(call_841.astype('float32')) # shape=(14, 4, 13)
uop_864 = relay.sinh(call_842.astype('float32')) # shape=(14, 4, 13)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_865 = relay.TupleGetItem(func_588_call(), 0)
call_866 = relay.TupleGetItem(func_589_call(), 0)
var_867 = relay.var("var_867", dtype = "float32", shape = (14, 4, 13))#candidate|867|(14, 4, 13)|var|float32
bop_868 = relay.floor_mod(uop_862.astype('float64'), relay.reshape(var_867.astype('float64'), relay.shape_of(uop_862))) # shape=(14, 4, 13)
bop_871 = relay.floor_mod(uop_864.astype('float64'), relay.reshape(var_867.astype('float64'), relay.shape_of(uop_864))) # shape=(14, 4, 13)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
var_876 = relay.var("var_876", dtype = "uint8", shape = (12,))#candidate|876|(12,)|var|uint8
call_875 = func_61_call(relay.reshape(var_876.astype('uint8'), [6, 2]), relay.reshape(var_876.astype('uint8'), [6, 2]), )
call_877 = func_61_call(relay.reshape(var_876.astype('uint8'), [6, 2]), relay.reshape(var_876.astype('uint8'), [6, 2]), )
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
call_880 = func_61_call(relay.reshape(var_876.astype('uint8'), [6, 2]), relay.reshape(call_875.astype('uint8'), [6, 2]), )
call_881 = func_61_call(relay.reshape(var_876.astype('uint8'), [6, 2]), relay.reshape(call_875.astype('uint8'), [6, 2]), )
uop_882 = relay.sigmoid(bop_868.astype('float64')) # shape=(14, 4, 13)
uop_884 = relay.sigmoid(bop_871.astype('float64')) # shape=(14, 4, 13)
func_821_call = mod.get_global_var('func_821')
func_824_call = mutated_mod.get_global_var('func_824')
const_891 = relay.const([[-9.394974,3.744496,6.142969,-4.190759,-0.017960,7.566996,2.771634,-5.168346,1.648742],[-6.982839,-5.334447,-8.145981,2.855112,-0.519471,7.077777,-7.744704,7.399640,4.669699],[1.701855,1.796602,5.086042,-6.330294,1.435099,-1.907370,-0.524499,-8.085876,-6.612258],[1.224179,-6.691693,6.139964,-5.613114,1.578267,4.110786,6.414847,-2.355731,0.479226],[4.653168,6.311283,-9.466842,8.404961,-0.093361,0.764119,-4.937301,-7.566203,8.793337],[6.870916,-1.077598,5.718864,9.202337,-2.681920,9.089960,-3.684996,5.481875,7.899396],[0.849260,6.802778,-3.267467,-7.353327,0.249927,3.638934,-1.968039,4.995304,-8.420904]], dtype = "float64")#candidate|891|(7, 9)|const|float64
const_892 = relay.const([9,9,-2,3,-7,1,7,2,3,7,7,-6,-4,-5,3,-8,-9,4,-1,-5,10,-4,5,8,1,9,-7,-10,7,-1,-3,-3,-4,-4,-4,3,8,-8,-5,-10,-4,-8,-3,6,-6,-10,-4,1,-10,4,7,-9,-7,5,-5,-10,-1,2,9,-4,4,3,-9,-9,1,-4,-1,1,-9,-9,9,-5,-10,-4,6,-1,4,-2,8,1,-5,6,-9,1,3,-4,1,-5,-8,-7,9,-9,-2,3,2,-9,-10,-4,-4,-6,-7,9,2,9,5,6,-4,4,-6,7,-2,7,-3,-2,6,-4,-2,10,-9,2,5,-5,-3,-6,-7,-6,-9,-4,6,1,-7,4,8,-1,-5,2,-3,6,7,4,4,6,5,-10,-7,2,4,3,-1,2,1,3,-10,-9,-4,-10,3,4,7,8,2,7,-7,1,-9,6,-4,4,-2,10,6,-4,7,8,1,7,-7,1,-9,3,-7,7,-8,5,6,3,9,-10,5,-10,5,2,-4,-7,7,-10,-9,-6,-10,8,-10,7,-10,6,4,-4,3,-10,-8,9,-6,-10,8,3,-10,-5,4,10,10,9,-9,-4,6,-9,-10,2,9,-3,1,-6,-9,-1,-4,4,4,7,-6,-8,-4,9,-7,-2,-4,-3,2,-5,-10,-1,7,6,1,-7,-6,-3,3,-6,4,7,4,-4,9,7,-6,-2,8,-4,-3,7,-7,-10,2,-3,6,6,-1,-10,8,10,8,6,-1,-4,-3,-6,9,3,3,-10,5,3,-4,6,10,7,7,-3,-8,-5,-8,-3,8,-10,1,2,-4,2,9,4,-4,-7,-6,1,9,-7,8,4,8,-7,-2,7,-5,5,-6,5,-2,3,5,4,-2,1,-4,4,-6,3,1,5,-6,1,-9,-6,-9,9,-2,9,5,-4,2,-3,8,-6,3,-4,-2,-2,3,4,-6,-7,-7,4,6,-2,-3,-9,-8,-1,-8,1,2,-5,-1,7,1,8,10,-3,-10,-7,10,6,-4,-1,2,4,-7,-6,-5,8,7,-7,9,-5,5,-2,9,4,-4,6,9,9,9,4,8,-4,-9,-4,-9,9,-3,10,10,-7,-1,10,5,7,7,-9,-5,-2,2,-5,6,-4,5,-1,7,9,1,9,-1,9,8,-6,9,-9,5,3,-10,-8,-10,-9,-7,9,10,-3,4,2,9,7,6,-10,-2,10,-9,-4,-7,10,-3,-1,6,-7,-7,-4,-7,-6,-9,-1,9,-10,10,-9,-8,3,7,8,10,-6,6,-5,5,5,-2,-2,8,1,-7,-6,-9,-8,-3,-2,6,1,-1,5,2,7,-6,4,10,-3,6,-2,10,-3,-10,7,-6,6,-9,-3,-10,-4,1,10,5,-10,5,-8,-4,10,-8,8,7,1,-6,4,7,2,-8,-1,8,-4,3,-9,-2,1,-8,-4,-4,9,-3,5,3,-8,-10,3,-10,2,-6,-10,-2,8,7,-2,-1,10,6,-4,3,-1,2,-10,1,-6,2,5,5,3,7,5,-8,2,2,-4,-7,-7,-7,3,-8,-6,5,4,7,5,5,-4], dtype = "uint8")#candidate|892|(588,)|const|uint8
call_890 = relay.TupleGetItem(func_821_call(relay.reshape(const_891.astype('float64'), [9, 7]), relay.reshape(const_892.astype('uint8'), [588,]), ), 1)
call_893 = relay.TupleGetItem(func_824_call(relay.reshape(const_891.astype('float64'), [9, 7]), relay.reshape(const_892.astype('uint8'), [588,]), ), 1)
output = relay.Tuple([call_865,call_875,var_876,call_880,uop_882,call_890,const_891,const_892,])
output2 = relay.Tuple([call_866,call_877,var_876,call_881,uop_884,call_893,const_891,const_892,])
func_902 = relay.Function([var_867,var_876,], output)
mod['func_902'] = func_902
mod = relay.transform.InferType()(mod)
mutated_mod['func_902'] = func_902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_902_call = mutated_mod.get_global_var('func_902')
var_904 = relay.var("var_904", dtype = "float32", shape = (14, 4, 13))#candidate|904|(14, 4, 13)|var|float32
var_905 = relay.var("var_905", dtype = "uint8", shape = (12,))#candidate|905|(12,)|var|uint8
call_903 = func_902_call(var_904,var_905,)
output = call_903
func_906 = relay.Function([var_904,var_905,], output)
mutated_mod['func_906'] = func_906
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_918 = relay.TupleGetItem(func_588_call(), 1)
call_919 = relay.TupleGetItem(func_589_call(), 1)
output = relay.Tuple([call_918,])
output2 = relay.Tuple([call_919,])
func_948 = relay.Function([], output)
mod['func_948'] = func_948
mod = relay.transform.InferType()(mod)
output = func_948()
func_949 = relay.Function([], output)
mutated_mod['func_949'] = func_949
mutated_mod = relay.transform.InferType()(mutated_mod)
func_948_call = mod.get_global_var('func_948')
func_949_call = mutated_mod.get_global_var('func_949')
call_953 = relay.TupleGetItem(func_948_call(), 0)
call_954 = relay.TupleGetItem(func_949_call(), 0)
var_964 = relay.var("var_964", dtype = "float32", shape = (14, 4, 13))#candidate|964|(14, 4, 13)|var|float32
bop_965 = relay.bitwise_or(call_953.astype('int16'), relay.reshape(var_964.astype('int16'), relay.shape_of(call_953))) # shape=(14, 4, 13)
bop_968 = relay.bitwise_or(call_954.astype('int16'), relay.reshape(var_964.astype('int16'), relay.shape_of(call_954))) # shape=(14, 4, 13)
bop_972 = relay.not_equal(var_964.astype('bool'), relay.reshape(call_953.astype('bool'), relay.shape_of(var_964))) # shape=(14, 4, 13)
bop_975 = relay.not_equal(var_964.astype('bool'), relay.reshape(call_954.astype('bool'), relay.shape_of(var_964))) # shape=(14, 4, 13)
func_122_call = mod.get_global_var('func_122')
func_125_call = mutated_mod.get_global_var('func_125')
const_977 = relay.const([-4.590073,-4.189085,-0.487932,-8.864006,-2.127026,5.880529,-2.615013,8.763166,-1.278407,6.297301,4.823316,-7.250321,8.270238,-3.762355,-9.580299,-8.272275,-4.492045,-3.452404,-7.727193,9.389479,7.320584,-6.890226,-3.602913,5.915919,6.290276,-9.359860,-2.042830,-2.249135,-4.519102,-6.707982,-9.825229,6.243123,7.453198,-8.334923,-7.456102,8.520285,-9.045217,-6.572834,8.705657,4.169005,-2.184187,-8.471685,-6.500092,9.369620,0.487567,9.857737,-0.810834,-2.715621,-2.448305,7.683779,-9.596678,-1.133096,-7.434932,4.527007,-7.705021,0.775233,-0.187014,6.605903,-4.577570,-1.408808,-0.249633,-5.859106,-9.122960,5.471438,2.852223,-1.545828,6.989135,-0.492768,7.774352,0.019160,-6.928302,-1.402523,-7.309743,6.098461,-5.197419,9.587689,2.391924,5.098799,-7.323241,-7.949845,-7.491469,-5.343797,-1.057241,6.555435,-6.538106,4.181747,4.696703,-0.397063,-9.833214,0.778542,1.826904,9.770452,-2.463995,-2.153412,0.261666,-8.358388,3.780213,9.194850,3.682953,5.265635,-8.676475,-5.502219,7.046243,0.869817,-0.921040,-0.270742,5.783236,-5.278317,7.417408,5.075395,2.238372,-8.511176,-8.482679,-0.262120,-6.887474,4.163849,4.487797,9.895384,-0.857656,-9.644478,0.467209,-7.008100,-5.886166,-7.560473,-2.544115,9.006677,1.272342,-3.973068,4.492204,2.749702,6.698214,-1.301786,-3.700964,4.172213,2.300193,2.813583,-5.799688,4.901382,-2.261683,-0.228258,1.596302,-4.378373,0.088705,-4.254955,-6.517819,2.209059,3.541228,-5.569820,1.036437,-6.605082,9.172718,1.367493,-8.018918,-7.966951,-5.714639,5.598348,-7.186858,-2.983619,-9.505804,0.095790,-7.845849,-5.094018,-9.129992,5.704927,-7.772531,-4.030056,6.860789,-3.016433,8.634386,-0.168899,2.902311,8.819621,3.907658,-8.808827,6.759304,-9.833733,-4.926858,4.267364,6.841622,-8.068534,-5.809761,0.849146,-3.309586,0.304536,3.778949,7.462885,2.428506,-2.715698,-2.929738,5.597763,-9.511568,8.367144,-0.334474,-0.340351,5.671834,-0.542713,0.083913,4.240724,8.623220,9.572574,-2.871639,9.348301,-9.727023,-4.518486,-2.674690,-7.889756,-1.503256,7.393527,-4.369875,-0.212791,-1.606300,9.597769,5.559952,9.647664,-6.778009,6.641436,6.784377,-5.149989,-3.585222,-1.570455,-0.998186,-6.042125,-6.122515,-2.702480,9.696461,-2.280459,8.478882,3.517503,-8.530842,0.451757,-1.356624,7.394666,3.581609,4.174727,3.572463,5.165534,-4.591678,-0.397816,5.506951,1.666838,1.874949,4.127243,6.236757,9.606327,9.465872,-9.874904,5.664605,-4.987202,-3.827768,6.526901,1.642739,2.835426,-5.723703,8.067900,-9.052614,-8.517692,-6.587695,-8.835263,-9.662279,-6.260865,-9.329682,2.786055,-2.920849,8.667245,3.371252,-0.675973,3.448736,-5.565488,0.961616,5.496789,-0.049174,-6.900988,9.865375,0.348481,-9.060121,-2.116752,-1.505844,0.010614,2.062068,8.081943,9.904492,2.617793,-8.861504,-9.158879,3.247638,9.706353,2.154861,4.759100,5.534473,-5.630314,-8.009624,-0.010073,9.758784,6.919639,-0.420546,1.515375,2.505750,-6.661446,3.800418,1.336540,5.624338,-9.373992,-3.001206,5.348378,-6.626129,-1.402049,-6.427885,-9.967145,-4.343831,-7.882146,-0.734901,-9.300071,0.180381,5.460017,6.293977,9.561510,-4.040229,8.712542,3.685105,-6.801402,-5.020977,-9.654910,0.716334,-4.554797,7.136304,5.822346,4.307087,0.361899,-5.335420,2.588218,2.150401,-1.488998,-3.926257,0.827940,9.014987,-8.256745,-6.341749,-0.360206,4.076812,2.005366,-9.933176,-4.201273,-7.559943,-7.237681,1.637550,-2.154237,-6.325228,-7.908855,-8.883924,8.322678,8.628340,9.362246,-6.716040,2.419950,8.224872,-1.380253,0.204631,4.233150,-1.441601,0.739013,2.076403,9.678547,-9.362093,-5.109023,7.976547,-2.641481,8.092894,-2.251029,-9.262887,4.006273,-2.889846,1.652283,2.647146,8.824664,-0.480346,6.266604,-3.186214,9.655298,-9.708564,6.191815,5.083690,-8.462362,4.042287,8.357831,-6.219832,7.694979,-2.323744,7.516054,6.418650,-4.119975], dtype = "float64")#candidate|977|(390,)|const|float64
const_978 = relay.const([-10,-5,2,3,-6,-7,-2,10,8,9,4,1], dtype = "uint8")#candidate|978|(12,)|const|uint8
call_976 = relay.TupleGetItem(func_122_call(relay.reshape(const_977.astype('float64'), [3, 10, 13]), relay.reshape(const_978.astype('uint8'), [12,]), ), 0)
call_979 = relay.TupleGetItem(func_125_call(relay.reshape(const_977.astype('float64'), [3, 10, 13]), relay.reshape(const_978.astype('uint8'), [12,]), ), 0)
bop_980 = relay.equal(bop_965.astype('bool'), relay.reshape(var_964.astype('bool'), relay.shape_of(bop_965))) # shape=(14, 4, 13)
bop_983 = relay.equal(bop_968.astype('bool'), relay.reshape(var_964.astype('bool'), relay.shape_of(bop_968))) # shape=(14, 4, 13)
bop_989 = relay.greater(call_953.astype('bool'), relay.reshape(bop_980.astype('bool'), relay.shape_of(call_953))) # shape=(14, 4, 13)
bop_992 = relay.greater(call_954.astype('bool'), relay.reshape(bop_983.astype('bool'), relay.shape_of(call_954))) # shape=(14, 4, 13)
output = relay.Tuple([bop_972,call_976,const_977,const_978,bop_989,])
output2 = relay.Tuple([bop_975,call_979,const_977,const_978,bop_992,])
func_1001 = relay.Function([var_964,], output)
mod['func_1001'] = func_1001
mod = relay.transform.InferType()(mod)
mutated_mod['func_1001'] = func_1001
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1002 = relay.var("var_1002", dtype = "float32", shape = (14, 4, 13))#candidate|1002|(14, 4, 13)|var|float32
func_1001_call = mutated_mod.get_global_var('func_1001')
call_1003 = func_1001_call(var_1002)
output = call_1003
func_1004 = relay.Function([var_1002], output)
mutated_mod['func_1004'] = func_1004
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1014 = relay.var("var_1014", dtype = "float32", shape = (1, 8, 8))#candidate|1014|(1, 8, 8)|var|float32
uop_1015 = relay.sigmoid(var_1014.astype('float32')) # shape=(1, 8, 8)
func_1001_call = mod.get_global_var('func_1001')
func_1004_call = mutated_mod.get_global_var('func_1004')
var_1020 = relay.var("var_1020", dtype = "float32", shape = (728,))#candidate|1020|(728,)|var|float32
call_1019 = relay.TupleGetItem(func_1001_call(relay.reshape(var_1020.astype('float32'), [14, 4, 13])), 3)
call_1021 = relay.TupleGetItem(func_1004_call(relay.reshape(var_1020.astype('float32'), [14, 4, 13])), 3)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_1024 = relay.TupleGetItem(func_588_call(), 0)
call_1025 = relay.TupleGetItem(func_589_call(), 0)
output = relay.Tuple([uop_1015,call_1019,var_1020,call_1024,])
output2 = relay.Tuple([uop_1015,call_1021,var_1020,call_1025,])
func_1026 = relay.Function([var_1014,var_1020,], output)
mod['func_1026'] = func_1026
mod = relay.transform.InferType()(mod)
var_1027 = relay.var("var_1027", dtype = "float32", shape = (1, 8, 8))#candidate|1027|(1, 8, 8)|var|float32
var_1028 = relay.var("var_1028", dtype = "float32", shape = (728,))#candidate|1028|(728,)|var|float32
output = func_1026(var_1027,var_1028,)
func_1029 = relay.Function([var_1027,var_1028,], output)
mutated_mod['func_1029'] = func_1029
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_1058 = relay.TupleGetItem(func_588_call(), 0)
call_1059 = relay.TupleGetItem(func_589_call(), 0)
output = relay.Tuple([call_1058,])
output2 = relay.Tuple([call_1059,])
func_1065 = relay.Function([], output)
mod['func_1065'] = func_1065
mod = relay.transform.InferType()(mod)
mutated_mod['func_1065'] = func_1065
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1065_call = mutated_mod.get_global_var('func_1065')
call_1066 = func_1065_call()
output = call_1066
func_1067 = relay.Function([], output)
mutated_mod['func_1067'] = func_1067
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1084 = relay.var("var_1084", dtype = "int32", shape = ())#candidate|1084|()|var|int32
var_1085 = relay.var("var_1085", dtype = "int32", shape = (10, 4))#candidate|1085|(10, 4)|var|int32
bop_1086 = relay.bitwise_xor(var_1084.astype('int32'), var_1085.astype('int32')) # shape=(10, 4)
uop_1092 = relay.cos(var_1085.astype('float32')) # shape=(10, 4)
bop_1095 = relay.equal(uop_1092.astype('bool'), relay.reshape(bop_1086.astype('bool'), relay.shape_of(uop_1092))) # shape=(10, 4)
output = relay.Tuple([bop_1095,])
output2 = relay.Tuple([bop_1095,])
func_1101 = relay.Function([var_1084,var_1085,], output)
mod['func_1101'] = func_1101
mod = relay.transform.InferType()(mod)
var_1102 = relay.var("var_1102", dtype = "int32", shape = ())#candidate|1102|()|var|int32
var_1103 = relay.var("var_1103", dtype = "int32", shape = (10, 4))#candidate|1103|(10, 4)|var|int32
output = func_1101(var_1102,var_1103,)
func_1104 = relay.Function([var_1102,var_1103,], output)
mutated_mod['func_1104'] = func_1104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_948_call = mod.get_global_var('func_948')
func_949_call = mutated_mod.get_global_var('func_949')
call_1106 = relay.TupleGetItem(func_948_call(), 0)
call_1107 = relay.TupleGetItem(func_949_call(), 0)
func_164_call = mod.get_global_var('func_164')
func_167_call = mutated_mod.get_global_var('func_167')
var_1124 = relay.var("var_1124", dtype = "uint16", shape = (1848,))#candidate|1124|(1848,)|var|uint16
call_1123 = relay.TupleGetItem(func_164_call(relay.reshape(var_1124.astype('uint16'), [14, 11, 12]), relay.reshape(var_1124.astype('uint16'), [14, 11, 12]), ), 0)
call_1125 = relay.TupleGetItem(func_167_call(relay.reshape(var_1124.astype('uint16'), [14, 11, 12]), relay.reshape(var_1124.astype('uint16'), [14, 11, 12]), ), 0)
output = relay.Tuple([call_1106,call_1123,var_1124,])
output2 = relay.Tuple([call_1107,call_1125,var_1124,])
func_1130 = relay.Function([var_1124,], output)
mod['func_1130'] = func_1130
mod = relay.transform.InferType()(mod)
var_1131 = relay.var("var_1131", dtype = "uint16", shape = (1848,))#candidate|1131|(1848,)|var|uint16
output = func_1130(var_1131)
func_1132 = relay.Function([var_1131], output)
mutated_mod['func_1132'] = func_1132
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1136 = relay.constdtype = "float64")#candidate|1136|(14, 9, 13)|const|float64
const_1137 = relay.constdtype = "float64")#candidate|1137|(14, 9, 13)|const|float64
bop_1138 = relay.power(const_1136.astype('float64'), relay.reshape(const_1137.astype('float64'), relay.shape_of(const_1136))) # shape=(14, 9, 13)
var_1148 = relay.var("var_1148", dtype = "float64", shape = (14, 9, 13))#candidate|1148|(14, 9, 13)|var|float64
bop_1149 = relay.greater_equal(bop_1138.astype('bool'), relay.reshape(var_1148.astype('bool'), relay.shape_of(bop_1138))) # shape=(14, 9, 13)
uop_1154 = relay.sinh(var_1148.astype('float64')) # shape=(14, 9, 13)
uop_1156 = relay.atanh(bop_1149.astype('float64')) # shape=(14, 9, 13)
func_1101_call = mod.get_global_var('func_1101')
func_1104_call = mutated_mod.get_global_var('func_1104')
var_1161 = relay.var("var_1161", dtype = "int32", shape = ())#candidate|1161|()|var|int32
var_1162 = relay.var("var_1162", dtype = "int32", shape = (40,))#candidate|1162|(40,)|var|int32
call_1160 = relay.TupleGetItem(func_1101_call(relay.reshape(var_1161.astype('int32'), []), relay.reshape(var_1162.astype('int32'), [10, 4]), ), 0)
call_1163 = relay.TupleGetItem(func_1104_call(relay.reshape(var_1161.astype('int32'), []), relay.reshape(var_1162.astype('int32'), [10, 4]), ), 0)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
const_1165 = relay.const([-8,-7,3,-3,7,-7,10,1,-8,-1,10,10], dtype = "uint8")#candidate|1165|(12,)|const|uint8
call_1164 = func_61_call(relay.reshape(const_1165.astype('uint8'), [6, 2]), relay.reshape(const_1165.astype('uint8'), [6, 2]), )
call_1166 = func_61_call(relay.reshape(const_1165.astype('uint8'), [6, 2]), relay.reshape(const_1165.astype('uint8'), [6, 2]), )
output = relay.Tuple([uop_1154,uop_1156,call_1160,var_1161,var_1162,call_1164,const_1165,])
output2 = relay.Tuple([uop_1154,uop_1156,call_1163,var_1161,var_1162,call_1166,const_1165,])
func_1167 = relay.Function([var_1148,var_1161,var_1162,], output)
mod['func_1167'] = func_1167
mod = relay.transform.InferType()(mod)
var_1168 = relay.var("var_1168", dtype = "float64", shape = (14, 9, 13))#candidate|1168|(14, 9, 13)|var|float64
var_1169 = relay.var("var_1169", dtype = "int32", shape = ())#candidate|1169|()|var|int32
var_1170 = relay.var("var_1170", dtype = "int32", shape = (40,))#candidate|1170|(40,)|var|int32
output = func_1167(var_1168,var_1169,var_1170,)
func_1171 = relay.Function([var_1168,var_1169,var_1170,], output)
mutated_mod['func_1171'] = func_1171
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1178 = relay.const([[[0.487927,-1.503974,-1.298061,2.607759,4.233264,3.254135,8.595502,3.579420],[1.646181,1.603929,5.538010,-0.081740,9.634266,2.736589,-3.248647,1.126295],[2.135003,-8.965653,7.487587,4.575893,9.093542,-6.928116,-8.697050,-8.653352]],[[-0.753327,2.964332,0.863768,7.914687,-0.791368,-2.288583,3.903446,-4.081015],[6.322341,5.856461,-2.523703,3.778668,3.130022,4.204415,-8.752295,-8.923679],[2.188798,-2.495053,3.287107,0.198760,-9.850532,-1.881794,1.032016,9.878234]],[[9.072027,8.825783,7.710922,-9.969867,-5.126434,-3.641911,8.136853,1.183912],[9.697266,1.154505,4.486266,-9.526944,-9.750371,-1.429436,4.764286,-6.957495],[-1.184466,3.869584,-3.754820,-3.666295,4.421576,5.429899,1.606321,1.783056]],[[-3.102132,7.288582,9.985225,-5.689622,5.949897,2.690085,-2.664482,5.956358],[-9.026610,-0.291899,-3.823005,4.816296,-5.995216,-0.260938,-0.276447,-9.354909],[-1.935945,-8.336953,1.093754,0.350595,2.490577,3.897135,-9.030754,-3.699459]],[[5.330483,-6.284204,-7.156619,9.853780,-3.832043,-8.285840,1.380579,-8.958058],[7.829505,1.094669,3.170193,1.626967,-5.254858,-4.554006,1.498586,2.754837],[2.258839,1.041193,8.722935,-7.202560,-1.412309,-7.285537,6.994175,-8.582730]],[[-4.408121,9.301316,-1.353710,-9.166919,-6.951193,-0.163025,-5.709731,-5.854104],[5.284631,2.272947,5.752368,-8.977342,-5.555400,0.736547,2.872818,-2.201231],[-7.566476,9.867949,-4.773687,0.138324,-0.703314,3.719545,1.845439,2.333871]]], dtype = "float32")#candidate|1178|(6, 3, 8)|const|float32
uop_1179 = relay.log10(const_1178.astype('float32')) # shape=(6, 3, 8)
bop_1186 = relay.bitwise_and(uop_1179.astype('int64'), relay.reshape(const_1178.astype('int64'), relay.shape_of(uop_1179))) # shape=(6, 3, 8)
func_948_call = mod.get_global_var('func_948')
func_949_call = mutated_mod.get_global_var('func_949')
call_1192 = relay.TupleGetItem(func_948_call(), 0)
call_1193 = relay.TupleGetItem(func_949_call(), 0)
var_1199 = relay.var("var_1199", dtype = "int64", shape = (6, 3, 8))#candidate|1199|(6, 3, 8)|var|int64
bop_1200 = relay.less_equal(bop_1186.astype('bool'), relay.reshape(var_1199.astype('bool'), relay.shape_of(bop_1186))) # shape=(6, 3, 8)
func_902_call = mod.get_global_var('func_902')
func_906_call = mutated_mod.get_global_var('func_906')
var_1208 = relay.var("var_1208", dtype = "uint8", shape = (12,))#candidate|1208|(12,)|var|uint8
call_1207 = relay.TupleGetItem(func_902_call(relay.reshape(call_1192.astype('float32'), [14, 4, 13]), relay.reshape(var_1208.astype('uint8'), [12,]), ), 4)
call_1209 = relay.TupleGetItem(func_906_call(relay.reshape(call_1192.astype('float32'), [14, 4, 13]), relay.reshape(var_1208.astype('uint8'), [12,]), ), 4)
uop_1210 = relay.cos(bop_1186.astype('float32')) # shape=(6, 3, 8)
bop_1212 = relay.bitwise_or(uop_1210.astype('int8'), relay.reshape(bop_1186.astype('int8'), relay.shape_of(uop_1210))) # shape=(6, 3, 8)
bop_1215 = relay.add(uop_1210.astype('int16'), relay.reshape(bop_1186.astype('int16'), relay.shape_of(uop_1210))) # shape=(6, 3, 8)
output = relay.Tuple([call_1192,bop_1200,call_1207,var_1208,bop_1212,bop_1215,])
output2 = relay.Tuple([call_1193,bop_1200,call_1209,var_1208,bop_1212,bop_1215,])
func_1222 = relay.Function([var_1199,var_1208,], output)
mod['func_1222'] = func_1222
mod = relay.transform.InferType()(mod)
var_1223 = relay.var("var_1223", dtype = "int64", shape = (6, 3, 8))#candidate|1223|(6, 3, 8)|var|int64
var_1224 = relay.var("var_1224", dtype = "uint8", shape = (12,))#candidate|1224|(12,)|var|uint8
output = func_1222(var_1223,var_1224,)
func_1225 = relay.Function([var_1223,var_1224,], output)
mutated_mod['func_1225'] = func_1225
mutated_mod = relay.transform.InferType()(mutated_mod)
func_948_call = mod.get_global_var('func_948')
func_949_call = mutated_mod.get_global_var('func_949')
call_1236 = relay.TupleGetItem(func_948_call(), 0)
call_1237 = relay.TupleGetItem(func_949_call(), 0)
const_1253 = relay.const([[[0.378654,8.321542,9.159581,-9.927769,-6.737878,-2.011757,3.508754,3.125807,-5.959941,-3.069272,4.693055,-0.154705,-1.391788],[-9.832364,0.742739,6.770218,9.550270,-8.888526,3.159673,0.674569,-3.701086,5.220970,8.362568,6.919330,-9.591181,-5.577537],[-3.183840,-8.531610,-0.819231,5.691238,-8.591490,-2.414958,4.336176,-7.542077,-8.292377,4.311693,1.429754,-0.242501,2.163607],[-1.521046,0.539651,2.916543,-5.180944,-5.270964,8.238053,-9.924526,-7.225251,6.439015,7.267546,-0.300534,2.168685,-7.919335]],[[8.555688,1.319148,6.998866,-9.984207,-1.852790,-8.934329,0.337114,3.816331,-0.004090,-0.890503,9.663410,9.634730,8.116322],[-0.952696,2.472354,9.402175,6.970024,5.460720,0.080124,-2.413753,-1.373681,-1.851560,7.069145,-3.083801,4.075386,4.729414],[-9.532400,4.328681,-7.639398,-5.634830,7.966530,-0.704638,-0.631732,3.301797,5.614474,1.917805,-8.437509,9.811993,-7.023770],[-7.279533,-1.183932,-2.670781,-2.701902,-0.710839,3.645316,-8.240433,0.547891,6.937796,-6.121365,1.981894,-7.483660,6.163500]],[[-0.788778,9.694533,-1.027956,-0.006002,7.087738,0.609013,-3.848132,-3.970115,-0.747186,-1.044252,-9.075412,3.610046,-7.355149],[-1.790240,-5.322396,-4.443490,7.665473,2.441111,8.743749,-6.119495,-8.192697,-2.320959,-4.766275,-2.898409,8.729573,-1.386819],[-2.028868,-7.748133,-6.075058,-3.322849,0.780464,1.628624,-1.769046,-1.069640,-0.643960,-5.865186,8.116041,7.909970,0.915293],[-3.615316,8.766864,-0.614719,7.387635,-5.213762,-5.238832,-4.277615,2.500215,-1.753456,-5.925708,8.725061,2.674386,1.902685]],[[-0.808086,-2.377380,-9.691010,-9.328492,6.249470,2.042241,-9.703647,-8.608073,-8.663084,-1.601196,-0.464277,4.931789,8.379071],[7.836026,-0.717274,5.026098,-6.989328,8.846558,4.540069,-3.060130,-3.067915,7.615524,6.608162,1.088297,-6.625991,-2.329198],[-1.326644,2.224912,-9.297653,2.611712,1.357821,-3.711893,-9.838230,-1.567583,0.565120,4.902158,-2.782216,-8.995162,-0.147703],[-8.649892,1.510045,-8.956821,-4.339889,-3.494601,-0.155348,-5.683245,-8.342698,3.521714,-3.063127,-8.843677,-1.932679,6.563881]],[[-3.099487,2.788200,-4.398297,8.764457,-6.026501,0.690750,2.785219,9.906480,9.980128,2.627345,-0.518066,3.845488,-6.844910],[1.550563,8.283558,-3.523799,-2.607401,-3.294800,8.538172,1.950442,6.530944,-1.332928,-6.302646,6.831356,6.249634,6.124336],[8.764205,-4.222318,4.755228,4.372847,4.601396,-1.018001,0.139612,-3.683774,5.715413,-1.848576,-6.034877,5.616113,-3.079848],[7.267285,-4.734387,-0.810853,7.558737,8.609495,-0.097825,5.653485,-7.546864,5.518455,-7.060344,-4.555173,3.711610,6.619447]],[[-4.607875,-4.260782,8.628090,-7.744932,7.332105,5.353022,-0.646609,6.075322,8.723859,-7.696954,-6.562134,7.434638,8.864450],[-1.196651,-5.928975,-7.868072,4.349106,-2.125142,-3.498599,-1.467386,2.277365,-0.024724,-9.388638,-1.859533,-9.969130,-7.116484],[-7.465202,-9.544793,7.776935,3.076111,-9.953365,-8.640655,-6.795465,-9.670999,-1.724203,-1.131566,-9.106860,2.101404,-3.854059],[0.911983,-4.383059,-3.214273,2.824780,-8.590810,6.333081,6.240408,7.021018,8.858244,-5.604472,1.932848,-1.648131,-2.717080]],[[-9.471517,-0.069937,5.188133,-3.607041,8.942580,-4.455832,2.628271,8.545580,-4.220504,-9.820632,1.253164,-5.495758,7.540668],[-1.981268,9.357525,-6.402358,-0.202952,5.365721,-1.397573,9.055228,-1.712853,1.181543,-0.017658,-3.938405,9.365522,-3.093678],[5.932393,-3.166215,-1.295818,-3.261329,6.346648,-9.551378,3.857179,9.810937,8.916195,7.525433,-3.187909,9.890108,-1.637978],[-9.882923,-4.842621,-1.270008,8.336592,-5.423807,4.759450,8.493939,0.667696,-2.421724,5.811692,2.165145,-1.242470,-4.217389]],[[6.244044,4.730622,-7.680842,2.647879,-4.257190,-6.063886,-8.575834,-3.968703,0.568207,-2.540760,6.623799,-1.543959,-4.941135],[7.953259,-5.514767,7.357541,4.064985,0.946078,-9.973614,-5.886782,-4.847091,-2.683277,2.119822,-5.415494,9.981040,0.412949],[9.033681,6.102631,1.856625,-9.476960,7.648016,7.975848,-8.485186,-1.460835,5.417257,-8.810415,0.736808,-2.388556,0.770231],[9.042936,4.452259,8.127208,-2.699662,-0.010673,4.578242,-3.270202,7.725574,1.053860,-6.499903,-9.909593,-4.295886,-7.205283]],[[-5.430148,-8.646493,9.809704,-3.641408,-0.322194,-6.457237,-3.085758,4.573725,9.169190,-8.787886,5.323792,7.731406,2.169705],[-2.274438,-9.427742,3.069947,9.512735,-6.079602,-6.776204,-1.425954,-3.343882,4.531982,0.180091,-7.149693,-0.704983,1.064466],[-5.815390,-3.745152,1.182291,6.075871,8.485188,-8.880531,-0.115949,5.343831,0.598287,3.019392,-2.374556,-7.417421,1.547235],[0.451148,-7.884821,-9.246407,1.083560,-8.529239,6.594214,-7.465311,9.034338,5.290513,2.506402,-7.388605,-7.095316,-7.715699]],[[-2.996002,3.847487,9.866824,-7.461711,1.725444,-7.833515,3.630489,3.547680,-9.711573,0.571096,-0.716849,5.591451,5.303293],[-8.949060,9.493346,7.269560,-6.372476,-1.029345,3.729730,0.857469,7.288079,7.089120,-2.588671,8.185290,-2.977256,-8.493237],[0.449974,-7.333633,8.686308,5.214284,0.050737,9.737226,7.512041,7.728720,-0.045400,6.890160,-5.721001,-3.835058,-9.077569],[4.514843,-4.866953,3.549379,3.632150,-3.927160,0.723646,8.690220,-5.105869,-0.097593,-9.636632,-9.317668,-1.818709,-2.593056]],[[-8.639268,4.499564,-5.406067,5.264965,9.780637,9.304738,-7.183604,2.126135,9.030837,-7.490212,3.369680,8.499599,-5.129239],[-3.748829,6.874549,7.591277,7.023682,-8.839065,2.280220,-1.789058,3.825285,6.814011,-5.003752,8.554944,-2.503033,3.706096],[-1.928219,0.382188,5.899634,9.027311,8.941205,-8.592844,2.192372,-2.233197,9.043768,7.799737,-7.319526,-6.643825,-6.551256],[-8.070206,-4.281437,-6.208887,-8.204788,4.316601,-4.447719,8.298663,-8.505563,-3.300072,-1.876653,-7.624405,-9.799303,-2.809906]],[[4.737810,4.296457,-0.061439,-6.268535,7.118237,0.856724,-5.188911,7.843785,8.281184,-4.288183,4.716818,-7.077601,-4.397426],[8.703920,-9.238179,3.113594,-4.638986,4.151501,4.505700,3.830772,8.957796,-7.028268,-1.785368,-3.945949,-0.071592,7.928215],[9.107982,-3.730889,-6.013869,-4.561101,0.231054,-8.381973,-7.601582,8.837734,1.068194,5.390147,0.734327,5.209705,4.518148],[-1.173981,-6.271786,1.238435,5.742581,0.015173,6.175047,-3.628063,-8.613404,6.305891,8.555321,-3.343004,0.981003,4.426186]],[[7.999973,-6.840419,-3.792002,8.033728,-7.641518,-0.683142,-9.985289,-3.067451,-5.582405,-9.302638,8.406233,0.066446,-0.031703],[-1.137563,7.326081,9.619102,-4.532508,-3.916034,-1.456894,2.803431,-8.211449,-6.831755,-0.293833,9.321850,4.528551,6.034904],[8.927522,3.597158,-8.846652,5.430145,3.933200,-8.916197,9.011641,-6.133326,-8.355921,-1.138516,-8.382773,1.036436,6.784055],[5.185206,5.982064,-3.019231,4.909535,-4.448959,8.458566,-7.511223,-1.679189,-9.234380,3.439325,5.096025,-2.374237,-3.104317]],[[-6.157193,4.147071,-8.056270,9.669499,7.666342,-9.565759,2.018419,-6.150511,7.604190,-9.009771,-1.078081,7.939559,4.097343],[0.383020,-2.415430,-7.966745,-5.079634,1.539392,-6.454739,-9.483732,-0.352563,1.708399,2.942338,-6.790769,-0.685504,3.363703],[9.037657,-8.725463,7.832240,-0.915756,2.122177,6.795326,2.933205,8.219311,0.919017,8.460351,-2.562107,3.712845,2.839245],[-8.947656,-4.595699,-3.202618,-7.201542,0.636985,-7.233345,-5.593331,-1.559498,9.996043,-2.734632,-3.677504,-6.974125,4.274581]]], dtype = "float32")#candidate|1253|(14, 4, 13)|const|float32
bop_1254 = relay.greater_equal(call_1236.astype('bool'), relay.reshape(const_1253.astype('bool'), relay.shape_of(call_1236))) # shape=(14, 4, 13)
bop_1257 = relay.greater_equal(call_1237.astype('bool'), relay.reshape(const_1253.astype('bool'), relay.shape_of(call_1237))) # shape=(14, 4, 13)
output = relay.Tuple([bop_1254,])
output2 = relay.Tuple([bop_1257,])
func_1263 = relay.Function([], output)
mod['func_1263'] = func_1263
mod = relay.transform.InferType()(mod)
output = func_1263()
func_1264 = relay.Function([], output)
mutated_mod['func_1264'] = func_1264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_1287 = relay.TupleGetItem(func_588_call(), 0)
call_1288 = relay.TupleGetItem(func_589_call(), 0)
func_776_call = mod.get_global_var('func_776')
func_781_call = mutated_mod.get_global_var('func_781')
var_1290 = relay.var("var_1290", dtype = "bool", shape = (6, 84))#candidate|1290|(6, 84)|var|bool
const_1291 = relay.const([-3.191453,7.062695,3.681892,-0.641023,4.048870,7.080912,-0.228495,0.516708,-9.936329,-7.938018,9.429940,5.230247,-6.501141,-5.540268,-0.007109,-1.717456,-8.218836,-6.133471,9.376429,-7.015883,-3.594443,2.834686,-2.952702,-3.883557,6.586437,-1.164944,0.299958,-0.014004,-8.109960,-1.151246,9.375582,3.700829,-3.047062,0.617598,-3.693804,-1.964992,7.462944,-5.287806,-4.413368,-9.933604,5.557219,-2.441525,2.271979,-2.218062,-7.568997,-4.782405,2.536945,7.535027,8.296673,0.393121,2.552249,-6.521818,-6.990636,-4.726627,-6.791126,-8.565377,5.157846,-6.010985,4.190405,9.556324,3.591913,8.376611,0.362089,2.092175,0.598125,0.021042,-5.398000,-0.451926,-1.568998,-7.522868,6.291536,-8.336704,8.315544,6.248469,8.792680,-4.570460,-5.477174,3.053775,8.921668,-0.850229,-6.491001,3.723114,-3.365745,6.959908,-8.109897,9.743174,-3.487991,-6.399742,-0.234837,-1.929192,-0.092948,3.203455,-7.547216,5.071813,2.199214,-9.327095,3.027335,-8.020123,2.041942,-9.682430,5.573187,-3.224158,1.886350,-5.755704,-3.638700,7.313210,8.023114,-3.965383,1.424595,7.313041,4.601412,-5.924788,8.412545,-7.068981,-3.006106,-7.671410,-4.828249,2.224539,-8.634032,-4.070492,-5.893968,6.553411,-6.891823,7.320081,3.239100,-7.782578,9.144281,9.550976,7.582675,3.590795,-3.607458,-4.867006,-0.491302,-4.039670,6.554931,-9.289189,-3.533267,6.825046,9.863078,1.188717,-4.538158,6.153765,-4.015231,-9.579698,9.714923,-1.163169,-5.744942,-3.394812,-2.498692,7.999850,2.314345,-5.064861,9.722882,-3.512296,-5.164707,-0.113936,9.054367,-3.224633,-8.850490,-8.278584,1.623009,-5.681538,0.450973,-4.482311,6.359380,8.823798,0.533278,0.390030,1.186374,2.907846,9.489144,-8.571010,-2.965961,-9.843334,-0.939566,-8.985595,8.511942,7.175951,0.833896,0.417742,8.908709,-4.874759,-9.018966,7.480939,7.400141,8.308901,-7.603755,-2.098110,7.155176,-6.486447,5.155526,7.903963,6.084486,2.695053,-9.906412,0.582118,7.872537,8.137684,9.411790,6.869083,3.274843,5.999945,6.821341,-4.010050,6.389801,-6.044127,9.460301,7.559398,-7.895307,-5.574820,6.266060,-9.691182,2.439005,-3.653865,-4.336518,6.887734,7.521568,-4.575763,-6.802248,7.111673,8.438053,-5.434635,0.204543,3.876804,-6.956787,-4.676533,2.668408,-2.699846,-4.166101,-0.651519,7.106606,7.865355,-2.999764,1.599693,-3.969909,-1.094224,-2.168305,1.633898,3.218073,5.581202,-9.563244,1.715802,-3.867226,-9.410411,9.033683,4.135166,-5.487073,7.726802,-8.465015,-1.787166,7.762293,-4.080217,2.313029,0.965945,-6.331179,4.039559,-1.376664,2.495180,-6.784984,-8.931498,-5.575211,-4.019373,-7.226527,7.496203,-1.773662,5.527272,7.718211,9.687855,8.498582,5.954889,3.488191,-0.256338,3.261160,-9.292840,4.876561,7.984398,5.527872,1.018088,0.437020,-4.812217,-0.515965,9.340797,-5.201236,-8.995451,1.970795,0.844997,-6.213962,9.002129,2.782296,-5.215528,-5.365703,-1.857953,4.887982,8.085494,6.051325,5.626746,7.238700,4.445894,7.938153,-6.006218,9.264985,-6.959999,7.535129,5.083660,7.268031,-9.398542,-0.684114,5.194310,-7.804568,-6.487458,6.725361,7.134135,3.608740,-7.027368,-1.639551,6.602555,-2.897768,-2.852062,3.876155,1.446840,7.233766,-5.736569,-8.685027,2.353371,-8.966572,-6.618406,7.865764,4.676900,-1.225198,-7.815935,-8.126025,-8.509659,5.496539,-6.887691,0.076380,0.385800,7.601800,-6.652945,-5.029476,-0.293730,5.280471,-6.692421,-6.110738,7.143545,6.921201,-9.821279,-6.027120,-2.497579,2.144604,-2.497794,-1.507265,3.198990,-3.189074,-8.885798,2.864111,6.253836,5.659050,-0.520714,6.729134,3.732857,0.315729,-0.481628,-4.089112,2.029021,-7.249007,-7.051445,2.929713,-0.206519,1.052794,-1.691412,-4.845229,-7.703502,3.523809,9.632674,-3.703230,7.504913,-2.155634,5.724108,6.240325,-6.912476,1.777632,-3.350085,-6.141701,-3.980143,0.141349,1.647322,-9.721553,-9.889157,-4.800886,9.681199], dtype = "float64")#candidate|1291|(390,)|const|float64
var_1292 = relay.var("var_1292", dtype = "bool", shape = (1092,))#candidate|1292|(1092,)|var|bool
call_1289 = relay.TupleGetItem(func_776_call(relay.reshape(call_1287.astype('float64'), [14, 4, 13]), relay.reshape(var_1290.astype('bool'), [504,]), relay.reshape(const_1291.astype('float64'), [390,]), relay.reshape(var_1292.astype('bool'), [1092, 1]), ), 3)
call_1293 = relay.TupleGetItem(func_781_call(relay.reshape(call_1287.astype('float64'), [14, 4, 13]), relay.reshape(var_1290.astype('bool'), [504,]), relay.reshape(const_1291.astype('float64'), [390,]), relay.reshape(var_1292.astype('bool'), [1092, 1]), ), 3)
output = relay.Tuple([call_1287,call_1289,var_1290,const_1291,var_1292,])
output2 = relay.Tuple([call_1288,call_1293,var_1290,const_1291,var_1292,])
func_1301 = relay.Function([var_1290,var_1292,], output)
mod['func_1301'] = func_1301
mod = relay.transform.InferType()(mod)
var_1302 = relay.var("var_1302", dtype = "bool", shape = (6, 84))#candidate|1302|(6, 84)|var|bool
var_1303 = relay.var("var_1303", dtype = "bool", shape = (1092,))#candidate|1303|(1092,)|var|bool
output = func_1301(var_1302,var_1303,)
func_1304 = relay.Function([var_1302,var_1303,], output)
mutated_mod['func_1304'] = func_1304
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1306 = relay.var("var_1306", dtype = "float64", shape = (4, 5))#candidate|1306|(4, 5)|var|float64
uop_1307 = relay.sqrt(var_1306.astype('float64')) # shape=(4, 5)
output = uop_1307
output2 = uop_1307
func_1309 = relay.Function([var_1306,], output)
mod['func_1309'] = func_1309
mod = relay.transform.InferType()(mod)
mutated_mod['func_1309'] = func_1309
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1310 = relay.var("var_1310", dtype = "float64", shape = (4, 5))#candidate|1310|(4, 5)|var|float64
func_1309_call = mutated_mod.get_global_var('func_1309')
call_1311 = func_1309_call(var_1310)
output = call_1311
func_1312 = relay.Function([var_1310], output)
mutated_mod['func_1312'] = func_1312
mutated_mod = relay.transform.InferType()(mutated_mod)
func_948_call = mod.get_global_var('func_948')
func_949_call = mutated_mod.get_global_var('func_949')
call_1343 = relay.TupleGetItem(func_948_call(), 0)
call_1344 = relay.TupleGetItem(func_949_call(), 0)
output = relay.Tuple([call_1343,])
output2 = relay.Tuple([call_1344,])
func_1359 = relay.Function([], output)
mod['func_1359'] = func_1359
mod = relay.transform.InferType()(mod)
output = func_1359()
func_1360 = relay.Function([], output)
mutated_mod['func_1360'] = func_1360
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1436 = relay.var("var_1436", dtype = "uint8", shape = (11, 10))#candidate|1436|(11, 10)|var|uint8
const_1437 = relay.const([[-1,-10,-3,-5,-6,3,-5,4,5,6],[3,-5,-7,8,-5,5,-1,-4,-2,1],[-7,2,3,7,2,-2,-7,3,3,3],[4,3,-3,-8,-7,4,3,-8,-10,8],[10,8,-8,-3,-10,-10,-6,-2,3,3],[8,6,3,-2,8,-6,10,8,-5,-3],[-9,1,-8,-4,4,-1,-5,6,8,3],[-9,-8,3,9,7,4,4,1,10,-1],[3,7,-8,7,4,-5,9,2,-9,1],[-4,4,-2,-10,-10,-7,4,2,10,9],[9,6,7,-9,10,4,5,-4,5,-9]], dtype = "uint8")#candidate|1437|(11, 10)|const|uint8
bop_1438 = relay.logical_xor(var_1436.astype('uint8'), relay.reshape(const_1437.astype('uint8'), relay.shape_of(var_1436))) # shape=(11, 10)
bop_1449 = relay.divide(var_1436.astype('float32'), relay.reshape(bop_1438.astype('float32'), relay.shape_of(var_1436))) # shape=(11, 10)
uop_1452 = relay.log10(bop_1449.astype('float32')) # shape=(11, 10)
func_402_call = mod.get_global_var('func_402')
func_407_call = mutated_mod.get_global_var('func_407')
var_1461 = relay.var("var_1461", dtype = "bool", shape = (1092,))#candidate|1461|(1092,)|var|bool
const_1462 = relay.const([6.872641,-6.969810,2.309648,0.930310,4.773827,6.008055,-9.975663,0.174664,5.990134,4.262899,-0.877819,-6.275467,-5.343085,0.848749,9.586459,-0.726021,-8.324388,6.092088,-2.981467,-0.245400,-3.288798,-7.306626,-8.217119,-1.030221,8.231163,-6.555783,0.132538,6.863191,8.748828,9.886741,3.763370,0.262617,0.464204,5.640229,7.343319,6.939783,3.681103,5.313540,4.518444,2.873117,3.631589,-3.954485,-4.079285,-3.112038,-1.903789,6.877850,-8.853303,-8.045303,2.965185,8.071734,4.721502,-2.862494,-4.245092,5.651037,-1.063644,5.855296,-0.509534,-7.385878,1.302938,-8.323127,2.442972,6.067523,5.958024,2.775191,3.574469,7.796286,4.147355,8.998873,3.080017,5.870768,-4.069477,-0.795430,-3.185074,6.005722,8.852444,0.715202,2.318509,-7.982607,-3.190022,0.334128,-3.316755,1.242595,6.898671,-8.584542,5.870303,-1.016164,-0.143744,-1.652496,0.674180,-9.694589,4.080167,4.932740,-3.333359,1.295007,9.971549,-5.543214,-5.732246,2.346662,-0.501234,-6.187362,4.894108,9.104957,7.664959,-2.922356,-3.134341,-0.293213,9.841302,-7.649514,0.355777,-3.029233,7.356231,1.964973,-7.313063,5.228607,-4.773706,-9.205979,-8.607385,7.211768,0.492549,-6.474278,-7.310217,-5.408633,2.532488,1.636216,-3.205804,3.709326,-6.525146,5.706660,-6.756558,9.621390,5.457419,-4.445863,-2.165594,2.495274,-1.292713,6.315184,-1.055377,-4.051033,-4.675546,8.645328,8.392973,-3.568578,6.960057,0.987680,-6.714210,-6.080239,-0.934774,1.917154,-1.567928,4.767445,1.696610,4.897423,-5.900313,4.949431,1.589097,7.741980,6.116383,-7.192331,-4.538966,-2.160310,-4.561733,-5.460562,-9.390190,5.178072,-2.068269,3.425991,1.057326,-5.834298,-1.305843,3.274566,-9.443544,-9.385266,-8.088363,-9.279094,-1.952232,-3.800117,7.030376,-0.316002,-7.830693,-5.326791,-3.610696,-1.990288,-9.994902,5.731131,-5.234767,-6.483680,8.815174,1.883929,0.281158,-2.028070,-8.639018,-4.563613,6.943431,1.279122,3.274685,7.225891,1.189205,3.462526,-0.267947,-0.898481,8.507768,2.544177,-9.008359,2.818775,-2.211889,1.966390,-7.088914,-2.216703,-6.474295,8.489455,8.727436,8.708145,8.237436,-7.250797,7.767131,-7.275662,1.633903,-7.345155,-8.088851,3.707074,1.836147,-3.376404,-7.469949,-0.813717,-4.759663,-6.675276,-7.434871,8.856485,7.214118,3.760771,-2.633844,0.474483,4.834419,5.579441,2.466247,-9.713777,-6.349039,-4.100225,0.866470,0.732654,0.156407,8.023679,-7.655743,2.548328,-7.002835,-7.412776,-0.022518,-0.475399,7.279351,-6.008312,-8.680702,-3.341262,5.433844,1.161760,4.925364,-2.105308,6.643689,-0.837345,-7.233195,9.602945,-1.293724,-3.446953,0.823115,-4.083758,-4.106558,-5.436868,5.748371,7.156455,5.142800,8.559625,-1.627659,0.162924,4.412114,2.096502,4.596542,-8.776221,-7.859501,1.556177,9.299245,8.476265,-3.067113,-2.955895,-1.541253,-8.512100,-1.858932,-5.087693,3.990573,-6.227019,3.870785,0.003212,-9.930721,-1.740518,-1.427303,5.064418,4.566117,9.946467,-9.463642,5.041767,-3.949925,-8.267430,6.383880,5.300761,2.770438,9.585888,4.917825,4.857983,-1.922138,-7.681994,2.751940,-4.662593,-1.046575,-0.993554,6.415378,9.359988,9.106358,-4.595573,-8.692338,-5.799947,-2.589096,-5.451752,-4.404711,4.073174,6.659060,7.911623,3.282320,0.635044,1.514920,-6.946312,6.389349,-4.345917,-7.585187,8.033544,-6.709403,-7.170097,3.720955,-2.775754,-7.263354,-7.376003,-8.599699,7.999131,8.131156,0.594819,-1.165176,5.760895,-9.280477,1.524272,1.335688,0.489416,-8.777385,-2.321089,6.200591,9.491451,-1.186365,7.331726,8.906243,6.165518,-8.929912,8.724375,-6.364872,-9.049871,3.329154,4.814450,1.762223,-2.392768,-0.704577,7.046976,-6.441669,-0.140352,1.948069,3.705285,-7.259125,7.990007,9.980267,2.324151,-1.811422,-3.462478,3.527724,-2.615893,6.466048,-0.147210,3.216802,7.855852,-3.113175,-1.881455,9.633922,-4.575281,-8.425277,-6.088856,0.980184,-5.760593], dtype = "float64")#candidate|1462|(390,)|const|float64
var_1463 = relay.var("var_1463", dtype = "uint8", shape = (12,))#candidate|1463|(12,)|var|uint8
call_1460 = relay.TupleGetItem(func_402_call(relay.reshape(var_1461.astype('bool'), [12, 7, 13]), relay.reshape(var_1461.astype('bool'), [12, 7, 13]), relay.reshape(const_1462.astype('float64'), [390,]), relay.reshape(var_1463.astype('uint8'), [12,]), ), 3)
call_1464 = relay.TupleGetItem(func_407_call(relay.reshape(var_1461.astype('bool'), [12, 7, 13]), relay.reshape(var_1461.astype('bool'), [12, 7, 13]), relay.reshape(const_1462.astype('float64'), [390,]), relay.reshape(var_1463.astype('uint8'), [12,]), ), 3)
output = relay.Tuple([uop_1452,call_1460,var_1461,const_1462,var_1463,])
output2 = relay.Tuple([uop_1452,call_1464,var_1461,const_1462,var_1463,])
func_1480 = relay.Function([var_1436,var_1461,var_1463,], output)
mod['func_1480'] = func_1480
mod = relay.transform.InferType()(mod)
mutated_mod['func_1480'] = func_1480
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1480_call = mutated_mod.get_global_var('func_1480')
var_1482 = relay.var("var_1482", dtype = "uint8", shape = (11, 10))#candidate|1482|(11, 10)|var|uint8
var_1483 = relay.var("var_1483", dtype = "bool", shape = (1092,))#candidate|1483|(1092,)|var|bool
var_1484 = relay.var("var_1484", dtype = "uint8", shape = (12,))#candidate|1484|(12,)|var|uint8
call_1481 = func_1480_call(var_1482,var_1483,var_1484,)
output = call_1481
func_1485 = relay.Function([var_1482,var_1483,var_1484,], output)
mutated_mod['func_1485'] = func_1485
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1495 = relay.var("var_1495", dtype = "bool", shape = (1, 2))#candidate|1495|(1, 2)|var|bool
var_1496 = relay.var("var_1496", dtype = "bool", shape = (7, 2))#candidate|1496|(7, 2)|var|bool
bop_1497 = relay.logical_and(var_1495.astype('bool'), var_1496.astype('bool')) # shape=(7, 2)
output = relay.Tuple([bop_1497,])
output2 = relay.Tuple([bop_1497,])
func_1504 = relay.Function([var_1495,var_1496,], output)
mod['func_1504'] = func_1504
mod = relay.transform.InferType()(mod)
var_1505 = relay.var("var_1505", dtype = "bool", shape = (1, 2))#candidate|1505|(1, 2)|var|bool
var_1506 = relay.var("var_1506", dtype = "bool", shape = (7, 2))#candidate|1506|(7, 2)|var|bool
output = func_1504(var_1505,var_1506,)
func_1507 = relay.Function([var_1505,var_1506,], output)
mutated_mod['func_1507'] = func_1507
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1517 = relay.var("var_1517", dtype = "float32", shape = (6, 1))#candidate|1517|(6, 1)|var|float32
uop_1518 = relay.cos(var_1517.astype('float32')) # shape=(6, 1)
uop_1522 = relay.sigmoid(uop_1518.astype('float64')) # shape=(6, 1)
output = uop_1522
output2 = uop_1522
func_1529 = relay.Function([var_1517,], output)
mod['func_1529'] = func_1529
mod = relay.transform.InferType()(mod)
var_1530 = relay.var("var_1530", dtype = "float32", shape = (6, 1))#candidate|1530|(6, 1)|var|float32
output = func_1529(var_1530)
func_1531 = relay.Function([var_1530], output)
mutated_mod['func_1531'] = func_1531
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1065_call = mod.get_global_var('func_1065')
func_1067_call = mutated_mod.get_global_var('func_1067')
call_1542 = relay.TupleGetItem(func_1065_call(), 0)
call_1543 = relay.TupleGetItem(func_1067_call(), 0)
uop_1555 = relay.atanh(call_1542.astype('float64')) # shape=(14, 4, 13)
uop_1557 = relay.atanh(call_1543.astype('float64')) # shape=(14, 4, 13)
bop_1566 = relay.less_equal(call_1542.astype('bool'), relay.reshape(uop_1555.astype('bool'), relay.shape_of(call_1542))) # shape=(14, 4, 13)
bop_1569 = relay.less_equal(call_1543.astype('bool'), relay.reshape(uop_1557.astype('bool'), relay.shape_of(call_1543))) # shape=(14, 4, 13)
output = bop_1566
output2 = bop_1569
func_1571 = relay.Function([], output)
mod['func_1571'] = func_1571
mod = relay.transform.InferType()(mod)
mutated_mod['func_1571'] = func_1571
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1571_call = mutated_mod.get_global_var('func_1571')
call_1572 = func_1571_call()
output = call_1572
func_1573 = relay.Function([], output)
mutated_mod['func_1573'] = func_1573
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_1574 = relay.TupleGetItem(func_588_call(), 1)
call_1575 = relay.TupleGetItem(func_589_call(), 1)
output = relay.Tuple([call_1574,])
output2 = relay.Tuple([call_1575,])
func_1585 = relay.Function([], output)
mod['func_1585'] = func_1585
mod = relay.transform.InferType()(mod)
output = func_1585()
func_1586 = relay.Function([], output)
mutated_mod['func_1586'] = func_1586
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_1607 = relay.TupleGetItem(func_588_call(), 1)
call_1608 = relay.TupleGetItem(func_589_call(), 1)
const_1613 = relay.const([[[5.961067,-3.903795,-5.174016,-4.826082,-1.575225,-6.231041,-5.602736,9.874719,-9.769622,7.256590,-3.422438,-3.205927,-0.945777],[-0.166955,0.832729,-5.983933,6.736326,-9.842192,8.249275,0.681905,6.009477,5.695444,9.366399,-7.485501,0.988814,1.209824],[-7.730895,-4.081915,-3.412430,-8.997219,-8.523258,-9.381336,-1.108671,2.520071,-8.841229,9.933083,-8.128067,7.640973,-2.103490],[-6.570224,8.648679,7.623617,2.419260,-3.072653,-2.966065,-5.030173,6.851697,-3.875090,0.732918,-8.843998,6.667164,6.956323]],[[-3.580892,4.295261,-8.963913,8.060802,0.547477,9.979981,-7.085366,2.405821,6.154270,-4.192436,-7.713183,-3.511513,-7.953030],[0.420362,-5.043670,-3.355323,6.737750,6.901617,8.217832,1.215292,4.069382,7.725091,0.810850,-4.068084,-7.704171,9.077227],[-6.398436,-5.460542,-2.526437,-9.274293,-0.578920,-6.000686,-8.479005,8.673475,-5.247993,-4.245317,-3.205305,4.139699,-3.384558],[-8.517210,-1.834826,-8.579709,9.697197,-2.046577,-3.067381,-0.983476,0.812875,6.144805,9.424673,4.050062,6.789733,5.065210]],[[0.004494,4.396156,9.280431,2.227623,-3.988606,-1.138607,-5.510099,5.899000,3.049479,-4.780639,-3.049077,-1.999574,-4.558944],[3.696865,0.059007,2.676858,-0.470181,3.645445,-5.074225,6.802540,-7.922618,-0.084436,-2.217339,0.920856,-3.595533,-9.115277],[7.070093,-2.500620,-3.743418,-3.744915,-7.077920,2.675968,-0.911166,-7.061179,3.889237,8.229293,5.965231,-0.234617,-9.564262],[1.620871,7.683008,9.860696,-7.115475,6.334369,-4.710967,7.297155,2.051566,4.711849,7.032518,9.918741,3.877515,-3.409395]],[[-6.528771,8.615763,-0.804401,2.600819,-1.805531,8.067279,-0.492383,-8.372764,-5.096524,-6.079695,-6.494660,8.850897,5.795762],[-2.346706,-2.986935,-5.961836,5.374684,0.409665,-7.035556,-3.889791,5.289332,-1.735677,-9.906311,-5.648434,-4.150515,-2.123112],[-9.721351,-9.716393,-9.648896,8.459107,2.880812,-0.743423,7.609055,-4.971337,-4.149982,-4.258031,-7.499436,-1.123572,6.532885],[7.364598,4.247046,-9.675916,-1.657215,3.864036,7.234508,8.683422,-5.301318,-9.410581,6.813431,-0.212853,6.342672,3.205221]],[[2.459706,-6.217342,4.301996,-9.763859,1.366655,-8.013996,4.912615,9.081938,-0.121952,0.966643,-2.345928,-3.635070,-6.788727],[3.987776,-3.291906,-4.988375,-3.986333,-5.959558,-4.702500,-6.817235,-9.467277,9.582743,6.454521,-5.489513,7.321131,-2.358926],[9.606391,8.661917,9.973592,8.273783,-7.515508,8.358740,-3.438301,-9.641092,-7.656000,3.734355,5.391898,-5.930399,5.446627],[3.535111,-4.819623,-5.321646,-8.957245,-1.607795,-0.970880,0.750691,3.007404,-6.440125,2.734238,-0.669077,3.235396,-9.689122]],[[7.531783,9.278926,8.751767,9.364653,9.810300,-0.229507,-3.805547,6.095702,-0.858660,1.955775,-6.214759,-4.429013,-9.543694],[9.723147,-0.890009,-7.422422,3.550078,-1.256578,-6.557998,-7.183798,8.962459,-0.916722,0.147379,-8.875364,-9.236525,9.771608],[7.892724,-3.222159,9.172219,-4.855230,5.643177,3.030786,-8.719741,-0.418972,5.791721,-0.363305,5.017674,-5.860381,3.566493],[-8.052406,-2.825056,-1.229701,1.251174,4.652970,-9.764741,-8.639884,4.462936,-7.507839,2.997021,-0.358349,-3.427474,2.940777]],[[8.824619,-6.628868,4.733888,9.881779,7.402801,3.266225,-3.002199,2.846835,-8.439039,1.936706,2.761509,-4.600950,-2.068979],[3.927200,7.449064,-6.091227,1.250327,0.684520,7.212803,-6.958202,-4.391441,-3.203170,7.391340,-0.538999,7.743315,1.593198],[4.284414,-0.177995,-3.848237,-7.203239,-8.695151,4.909335,-4.925895,-5.116465,7.387773,-3.927498,2.472548,-0.977526,-9.112129],[-7.627617,-0.682424,-5.511131,1.372726,3.049638,-5.964955,-0.973479,-6.927024,-9.728682,-4.247923,8.805260,-1.933335,-9.768849]],[[-3.321316,-0.735326,6.018546,-1.905619,-3.224696,0.312898,4.696426,4.035165,0.227000,9.696130,6.100783,-7.312041,-4.192785],[1.664324,6.027429,-7.357029,1.274484,-4.407321,-7.310148,-5.728604,4.633250,-9.388279,3.318432,-9.876610,0.437732,-9.360399],[-5.880564,5.702792,-1.665934,8.216315,-1.846945,0.031334,-9.908892,-9.501907,0.990585,5.447811,-4.733536,4.702016,5.764858],[-1.351702,1.278660,-5.756757,2.338896,2.109859,-5.004456,1.925737,-7.929690,-8.866147,-3.926964,0.957024,-6.182830,-1.072184]],[[0.368153,-7.095503,-4.856397,5.353265,8.441243,2.009649,6.827865,2.470538,9.094161,-2.858871,3.720434,-1.337495,4.411197],[2.489453,-6.939812,5.613340,-8.073502,-5.173337,-0.416784,-1.844831,9.598835,2.411942,-7.490448,4.095846,2.524296,-9.758067],[-8.293593,5.028384,-1.477751,1.451662,-2.249994,-3.314717,-8.112307,1.231729,8.748897,2.087760,1.041822,5.410249,4.709884],[3.260490,6.740447,1.505693,-5.887579,7.764961,-0.400563,1.637640,2.611176,2.312624,0.426364,7.278355,-5.616633,2.790829]],[[9.063175,-5.250977,0.739436,9.003602,2.036470,5.613657,6.274986,-2.232714,1.977756,3.741525,-9.683903,5.356705,0.469045],[-3.773866,9.092747,-4.300191,-9.802474,5.551416,-8.986716,-8.028177,3.987700,-9.224533,1.291366,-2.110833,-1.420078,7.605263],[-3.408347,-5.590358,6.963542,-0.746738,0.645331,2.885900,8.297130,5.374612,-1.353851,8.931241,6.220630,-1.942784,-6.264963],[-3.007601,-3.519682,5.010467,-6.763086,0.300509,-9.438134,-1.329022,-7.494791,-2.388593,-6.457035,9.016576,0.773816,-6.838365]],[[-3.464536,3.870351,-0.600055,-6.266936,-3.478856,4.575122,5.521713,-3.123605,-1.305249,8.756830,8.424678,-5.437340,-8.567605],[-0.294432,-7.647483,-7.662489,9.818487,-8.626062,1.384780,2.611898,-9.947128,-5.721079,8.418798,-0.644223,9.971894,-8.446379],[1.406306,-7.814498,-2.515508,7.340356,-1.564068,-7.815704,-1.930441,7.944988,6.520454,1.298205,7.449049,8.250399,-9.892670],[6.702756,-9.040020,-6.625771,-3.833393,4.122850,4.555028,-6.891559,-0.001705,-6.177594,7.838190,6.519234,-8.041094,-5.242163]],[[-6.525874,-8.230727,5.903605,5.538382,0.812094,5.183552,-4.713013,-4.724269,-7.020437,2.222437,7.703579,1.687811,4.837764],[0.653906,4.250168,-7.034261,-8.537821,-0.949953,-5.808985,5.578890,-7.871374,3.604567,0.751518,-9.383563,-7.952069,-3.148794],[0.712362,-5.476273,-8.933815,-7.988220,-6.255057,-7.498086,7.051682,-5.666524,-1.284098,8.685584,3.120857,5.412042,2.816871],[-5.439812,-9.739539,9.409561,-7.314282,-0.529625,-9.778519,-8.449781,5.706138,7.348746,9.551804,-8.884121,3.073977,-8.833075]],[[8.206075,9.350010,-4.758631,-9.948038,-6.911626,-3.390127,-4.486037,-2.666467,-2.030085,9.075774,1.651372,-6.929430,-4.679347],[-4.301755,1.711856,-4.642036,-2.164870,7.410515,2.722780,3.902541,6.119544,-1.265379,4.717417,-4.063848,3.384712,1.242486],[-5.388684,-8.949659,3.222241,-4.475485,0.101202,6.437981,-2.596139,-3.507060,-4.949099,-3.751101,-7.007748,0.832913,3.798907],[9.443378,6.282025,3.858206,-5.381359,0.165358,-4.055379,-7.251242,-6.692634,8.773816,-2.836678,7.101143,-4.805483,3.291228]],[[-8.203386,-3.228819,-4.579922,3.697484,-8.820543,-8.669741,-4.541650,-9.537548,7.150960,-0.599013,-4.899366,4.522540,-3.151112],[-5.963193,-8.041928,1.572609,-6.223329,-7.294256,7.719477,7.400664,-2.326730,-8.323733,5.912567,1.234914,-0.340091,-1.753994],[1.203296,7.858532,-2.801151,-3.419229,8.471246,-2.142641,6.653423,5.803783,-0.642113,9.660586,-6.354090,6.926829,-3.472832],[-3.512547,-5.038868,-6.452186,-0.427239,1.954357,6.026156,5.617087,1.756628,-6.095734,-5.999160,8.064980,-7.524385,6.738900]]], dtype = "float32")#candidate|1613|(14, 4, 13)|const|float32
bop_1614 = relay.less(call_1607.astype('bool'), relay.reshape(const_1613.astype('bool'), relay.shape_of(call_1607))) # shape=(14, 4, 13)
bop_1617 = relay.less(call_1608.astype('bool'), relay.reshape(const_1613.astype('bool'), relay.shape_of(call_1608))) # shape=(14, 4, 13)
uop_1619 = relay.exp(bop_1614.astype('float32')) # shape=(14, 4, 13)
uop_1621 = relay.exp(bop_1617.astype('float32')) # shape=(14, 4, 13)
output = uop_1619
output2 = uop_1621
func_1623 = relay.Function([], output)
mod['func_1623'] = func_1623
mod = relay.transform.InferType()(mod)
mutated_mod['func_1623'] = func_1623
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1623_call = mutated_mod.get_global_var('func_1623')
call_1624 = func_1623_call()
output = call_1624
func_1625 = relay.Function([], output)
mutated_mod['func_1625'] = func_1625
mutated_mod = relay.transform.InferType()(mutated_mod)
func_588_call = mod.get_global_var('func_588')
func_589_call = mutated_mod.get_global_var('func_589')
call_1698 = relay.TupleGetItem(func_588_call(), 0)
call_1699 = relay.TupleGetItem(func_589_call(), 0)
uop_1706 = relay.asin(call_1698.astype('float32')) # shape=(14, 4, 13)
uop_1708 = relay.asin(call_1699.astype('float32')) # shape=(14, 4, 13)
uop_1709 = relay.rsqrt(uop_1706.astype('float64')) # shape=(14, 4, 13)
uop_1711 = relay.rsqrt(uop_1708.astype('float64')) # shape=(14, 4, 13)
func_422_call = mod.get_global_var('func_422')
func_425_call = mutated_mod.get_global_var('func_425')
const_1717 = relay.const([-8.005193,9.261465,-5.550761,-2.501122,-3.236670,2.689316,3.406952,8.884146,-8.313941,1.449777,-4.527407,-1.253865,-6.957403,-4.680370,-4.028794,-9.166738,-6.962402,-1.558636,-1.754487,-1.028000,-6.517486,1.635078,0.858937,8.446575,8.680890,-9.944293,-4.288609,-3.244833,-3.613155,-5.460593,4.887189,4.529046,-1.187176,-3.580213,1.409345,-8.559493,4.042115,5.550525,-7.798356,-4.993294,2.234538,9.832394,9.147121,-9.419465,-1.789387,-0.924450,1.740539,-3.057344,3.889903,9.625903,4.274457,0.589177,3.831678,-9.976083,3.225930,8.737786,7.038161,-8.437585,-5.541822,-6.726799,2.054900,5.056226,4.724087,0.488558,-3.741355,1.984105,-3.246283,-1.643962,3.030499,8.501987,0.313599,-9.457380,8.013850,7.754865,2.726069,1.033260,-2.813323,-0.665247,-5.358000,3.005468,-1.324320,-8.733150,0.487698,-6.015346,6.725987,4.598054,-4.053635,-3.374516,-5.272029,-0.336740,3.886197,-0.452581,-6.350071,9.303300,-1.213295,3.015631,2.611161,5.537135,6.706862,-2.242392,8.397049,2.062861,5.851182,-3.826598,-6.940307,1.641998,-2.222958,4.354676,-7.962299,0.919310,7.141052,2.556070,-2.415026,1.966959,-2.933340,3.903205,9.980779,-6.845817,-4.715232,-2.483580,3.527955,-0.836147,-2.481422,-5.997919,6.165564,9.709139], dtype = "float64")#candidate|1717|(126,)|const|float64
call_1716 = relay.TupleGetItem(func_422_call(relay.reshape(const_1717.astype('float64'), [7, 3, 6])), 0)
call_1718 = relay.TupleGetItem(func_425_call(relay.reshape(const_1717.astype('float64'), [7, 3, 6])), 0)
output = relay.Tuple([uop_1709,call_1716,const_1717,])
output2 = relay.Tuple([uop_1711,call_1718,const_1717,])
func_1730 = relay.Function([], output)
mod['func_1730'] = func_1730
mod = relay.transform.InferType()(mod)
mutated_mod['func_1730'] = func_1730
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1730_call = mutated_mod.get_global_var('func_1730')
call_1731 = func_1730_call()
output = call_1731
func_1732 = relay.Function([], output)
mutated_mod['func_1732'] = func_1732
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1733 = relay.const([[[-8,10,9,-9,2,-3,-2,6,8,-6,1,9,-4,-5,-4,-7],[-7,8,-8,1,6,5,-10,-9,9,3,3,-4,-4,-3,7,1],[-7,-1,7,9,8,3,-6,-4,8,-7,-1,1,7,6,-4,-7],[5,9,2,7,-1,5,3,-4,-1,3,1,7,-7,-3,9,3],[-10,10,-8,9,5,9,-7,8,-4,-8,-4,5,10,-2,8,7],[-6,1,3,-5,5,-6,-7,-10,7,7,7,-3,-8,7,10,5],[2,10,-5,6,1,4,-8,10,-4,-7,9,-7,-4,-4,-2,-10]],[[6,-10,7,2,-7,7,-3,-1,5,6,-9,-10,9,7,4,4],[9,2,-1,7,3,3,2,2,1,9,3,3,3,1,-9,-9],[10,-8,6,-1,9,6,8,-7,8,-9,7,-10,3,-10,-8,-3],[-10,1,8,8,6,1,4,2,-5,-2,2,5,-5,10,-3,4],[-5,3,9,-3,7,-8,1,2,3,-10,-6,-2,9,-6,6,8],[-9,7,4,4,5,2,-3,3,8,1,-6,7,-7,-8,5,6],[-10,-1,-4,-6,8,-4,2,-5,9,-4,-2,-2,4,-2,7,2]],[[-1,-2,7,-2,7,5,1,2,7,7,-9,-8,9,9,-6,-5],[-3,9,-6,6,-7,7,-1,10,-6,-7,7,5,5,-6,-6,-7],[-8,10,9,9,5,6,4,-3,-6,-5,-8,-1,-6,-4,-7,-1],[7,-1,7,4,6,9,-7,-2,5,-6,-6,5,-3,4,10,-7],[9,5,7,-10,-9,-5,-3,9,-2,2,9,2,8,4,-3,9],[8,-10,3,-10,-10,1,1,5,3,3,-7,-6,3,5,4,10],[7,-8,1,-5,4,6,5,1,9,2,3,2,-1,-1,-10,6]],[[10,-10,-4,2,2,-5,9,7,-2,-5,6,-10,-2,-1,-4,2],[10,5,-6,10,-6,4,-1,-5,-9,-7,-6,1,9,-2,8,-5],[5,-10,8,8,-7,9,-3,-2,-5,-7,-5,8,-2,-5,6,9],[-1,-2,-1,4,3,7,-10,-8,5,5,-8,5,5,2,-1,3],[-2,-4,-5,4,-2,4,7,6,-1,-5,5,-1,-10,-2,-6,7],[-9,-2,9,-2,6,-4,2,-6,-2,2,-8,8,5,-3,4,-10],[2,7,7,-4,-5,-7,-10,-8,1,2,4,-9,9,-2,3,5]],[[-4,-9,-10,-6,-3,2,4,-10,1,-6,9,5,-1,-10,-9,-2],[-7,-5,-5,-4,4,4,5,4,-3,10,-8,-1,-4,-5,-7,-5],[7,-3,-1,-1,-2,-4,8,-2,2,4,-9,-1,7,5,3,8],[1,2,-8,-8,9,-7,4,1,-3,6,-1,4,-2,-10,10,3],[-1,3,10,-2,-5,-8,-10,3,-4,-5,5,-3,-10,-10,-2,10],[-9,-3,-4,8,3,6,-4,7,9,3,3,1,-10,6,5,5],[10,-3,-2,4,6,1,1,10,-3,-4,-8,2,5,9,-3,-3]],[[2,-7,-4,4,-3,2,6,-3,-4,5,-3,9,6,-9,-2,-4],[-6,-1,-2,-2,9,-8,-7,-3,-10,-2,-7,3,1,-2,2,-9],[7,-1,-4,-3,-9,9,-3,-7,-1,8,-2,-1,10,-9,-9,3],[10,-4,-6,-9,-7,-3,1,3,-8,1,-1,6,6,-8,-4,9],[-4,8,10,-9,6,-7,-1,-10,-3,-1,-3,-10,2,4,-8,8],[7,-3,3,-4,-3,7,-5,-3,8,-7,-2,-10,4,10,6,-5],[4,-10,2,-6,-8,9,10,2,-7,-10,5,-5,5,-2,-5,-6]],[[4,8,1,-1,8,2,1,9,2,-10,1,-5,-3,9,-3,9],[-10,-3,2,2,3,10,-6,5,8,7,3,6,-9,5,10,9],[-10,5,-8,4,8,9,-10,-4,-2,-8,2,-2,-10,5,1,-2],[-8,-5,-3,-8,-10,7,-1,-10,3,-9,-3,10,-8,-3,-8,-9],[1,1,-2,5,7,-4,4,-3,-4,-3,-3,-2,7,9,-10,2],[-2,-7,3,6,5,-8,6,7,-6,-8,-5,-10,-6,8,7,9],[-2,-2,8,2,-10,2,4,9,-10,-10,7,-9,-9,1,6,5]]], dtype = "int32")#candidate|1733|(7, 7, 16)|const|int32
var_1734 = relay.var("var_1734", dtype = "int32", shape = (7, 7, 16))#candidate|1734|(7, 7, 16)|var|int32
bop_1735 = relay.greater(const_1733.astype('bool'), relay.reshape(var_1734.astype('bool'), relay.shape_of(const_1733))) # shape=(7, 7, 16)
func_1309_call = mod.get_global_var('func_1309')
func_1312_call = mutated_mod.get_global_var('func_1312')
var_1741 = relay.var("var_1741", dtype = "float64", shape = (10, 2))#candidate|1741|(10, 2)|var|float64
call_1740 = func_1309_call(relay.reshape(var_1741.astype('float64'), [4, 5]))
call_1742 = func_1309_call(relay.reshape(var_1741.astype('float64'), [4, 5]))
func_1480_call = mod.get_global_var('func_1480')
func_1485_call = mutated_mod.get_global_var('func_1485')
var_1747 = relay.var("var_1747", dtype = "uint8", shape = (22, 5))#candidate|1747|(22, 5)|var|uint8
const_1748 = relay.const([[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[True]], dtype = "bool")#candidate|1748|(1092, 1)|const|bool
const_1749 = relay.const([[3,2,1,-2,-8,5,-9,-6,-2,-8,-7,-7]], dtype = "uint8")#candidate|1749|(1, 12)|const|uint8
call_1746 = relay.TupleGetItem(func_1480_call(relay.reshape(var_1747.astype('uint8'), [11, 10]), relay.reshape(const_1748.astype('bool'), [1092,]), relay.reshape(const_1749.astype('uint8'), [12,]), ), 1)
call_1750 = relay.TupleGetItem(func_1485_call(relay.reshape(var_1747.astype('uint8'), [11, 10]), relay.reshape(const_1748.astype('bool'), [1092,]), relay.reshape(const_1749.astype('uint8'), [12,]), ), 1)
func_1529_call = mod.get_global_var('func_1529')
func_1531_call = mutated_mod.get_global_var('func_1531')
const_1754 = relay.const([6.278192,8.816115,1.874366,6.205883,-6.722625,0.876644], dtype = "float32")#candidate|1754|(6,)|const|float32
call_1753 = func_1529_call(relay.reshape(const_1754.astype('float32'), [6, 1]))
call_1755 = func_1529_call(relay.reshape(const_1754.astype('float32'), [6, 1]))
output = relay.Tuple([bop_1735,call_1740,var_1741,call_1746,var_1747,const_1748,const_1749,call_1753,const_1754,])
output2 = relay.Tuple([bop_1735,call_1742,var_1741,call_1750,var_1747,const_1748,const_1749,call_1755,const_1754,])
func_1765 = relay.Function([var_1734,var_1741,var_1747,], output)
mod['func_1765'] = func_1765
mod = relay.transform.InferType()(mod)
mutated_mod['func_1765'] = func_1765
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1765_call = mutated_mod.get_global_var('func_1765')
var_1767 = relay.var("var_1767", dtype = "int32", shape = (7, 7, 16))#candidate|1767|(7, 7, 16)|var|int32
var_1768 = relay.var("var_1768", dtype = "float64", shape = (10, 2))#candidate|1768|(10, 2)|var|float64
var_1769 = relay.var("var_1769", dtype = "uint8", shape = (22, 5))#candidate|1769|(22, 5)|var|uint8
call_1766 = func_1765_call(var_1767,var_1768,var_1769,)
output = call_1766
func_1770 = relay.Function([var_1767,var_1768,var_1769,], output)
mutated_mod['func_1770'] = func_1770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1065_call = mod.get_global_var('func_1065')
func_1067_call = mutated_mod.get_global_var('func_1067')
call_1805 = relay.TupleGetItem(func_1065_call(), 0)
call_1806 = relay.TupleGetItem(func_1067_call(), 0)
output = relay.Tuple([call_1805,])
output2 = relay.Tuple([call_1806,])
func_1813 = relay.Function([], output)
mod['func_1813'] = func_1813
mod = relay.transform.InferType()(mod)
output = func_1813()
func_1814 = relay.Function([], output)
mutated_mod['func_1814'] = func_1814
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1359_call = mod.get_global_var('func_1359')
func_1360_call = mutated_mod.get_global_var('func_1360')
call_1815 = relay.TupleGetItem(func_1359_call(), 0)
call_1816 = relay.TupleGetItem(func_1360_call(), 0)
func_61_call = mod.get_global_var('func_61')
func_64_call = mutated_mod.get_global_var('func_64')
const_1818 = relay.const([-5,-5,-1,1,-1,-2,4,5,9,-1,-10,-1], dtype = "uint8")#candidate|1818|(12,)|const|uint8
call_1817 = func_61_call(relay.reshape(const_1818.astype('uint8'), [6, 2]), relay.reshape(const_1818.astype('uint8'), [6, 2]), )
call_1819 = func_61_call(relay.reshape(const_1818.astype('uint8'), [6, 2]), relay.reshape(const_1818.astype('uint8'), [6, 2]), )
uop_1823 = relay.cosh(call_1817.astype('float32')) # shape=(6, 2)
uop_1825 = relay.cosh(call_1819.astype('float32')) # shape=(6, 2)
func_1480_call = mod.get_global_var('func_1480')
func_1485_call = mutated_mod.get_global_var('func_1485')
var_1836 = relay.var("var_1836", dtype = "uint8", shape = (1, 110))#candidate|1836|(1, 110)|var|uint8
const_1837 = relay.const([[False,True,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False]], dtype = "bool")#candidate|1837|(1, 1092)|const|bool
call_1835 = relay.TupleGetItem(func_1480_call(relay.reshape(var_1836.astype('uint8'), [11, 10]), relay.reshape(const_1837.astype('bool'), [1092,]), relay.reshape(call_1817.astype('uint8'), [12,]), ), 4)
call_1838 = relay.TupleGetItem(func_1485_call(relay.reshape(var_1836.astype('uint8'), [11, 10]), relay.reshape(const_1837.astype('bool'), [1092,]), relay.reshape(call_1817.astype('uint8'), [12,]), ), 4)
var_1844 = relay.var("var_1844", dtype = "uint8", shape = (15, 110))#candidate|1844|(15, 110)|var|uint8
bop_1845 = relay.logical_and(var_1836.astype('bool'), var_1844.astype('bool')) # shape=(15, 110)
func_776_call = mod.get_global_var('func_776')
func_781_call = mutated_mod.get_global_var('func_781')
const_1849 = relay.const([[True],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True]], dtype = "bool")#candidate|1849|(504, 1)|const|bool
var_1850 = relay.var("var_1850", dtype = "float64", shape = (390,))#candidate|1850|(390,)|var|float64
call_1848 = relay.TupleGetItem(func_776_call(relay.reshape(call_1815.astype('float64'), [14, 4, 13]), relay.reshape(const_1849.astype('bool'), [504,]), relay.reshape(var_1850.astype('float64'), [390,]), relay.reshape(const_1837.astype('bool'), [1092, 1]), ), 6)
call_1851 = relay.TupleGetItem(func_781_call(relay.reshape(call_1815.astype('float64'), [14, 4, 13]), relay.reshape(const_1849.astype('bool'), [504,]), relay.reshape(var_1850.astype('float64'), [390,]), relay.reshape(const_1837.astype('bool'), [1092, 1]), ), 6)
output = relay.Tuple([call_1815,const_1818,uop_1823,call_1835,const_1837,bop_1845,call_1848,const_1849,var_1850,])
output2 = relay.Tuple([call_1816,const_1818,uop_1825,call_1838,const_1837,bop_1845,call_1851,const_1849,var_1850,])
func_1854 = relay.Function([var_1836,var_1844,var_1850,], output)
mod['func_1854'] = func_1854
mod = relay.transform.InferType()(mod)
mutated_mod['func_1854'] = func_1854
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1854_call = mutated_mod.get_global_var('func_1854')
var_1856 = relay.var("var_1856", dtype = "uint8", shape = (1, 110))#candidate|1856|(1, 110)|var|uint8
var_1857 = relay.var("var_1857", dtype = "uint8", shape = (15, 110))#candidate|1857|(15, 110)|var|uint8
var_1858 = relay.var("var_1858", dtype = "float64", shape = (390,))#candidate|1858|(390,)|var|float64
call_1855 = func_1854_call(var_1856,var_1857,var_1858,)
output = call_1855
func_1859 = relay.Function([var_1856,var_1857,var_1858,], output)
mutated_mod['func_1859'] = func_1859
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1874 = relay.var("var_1874", dtype = "uint16", shape = ())#candidate|1874|()|var|uint16
var_1875 = relay.var("var_1875", dtype = "uint16", shape = (7, 2, 1))#candidate|1875|(7, 2, 1)|var|uint16
bop_1876 = relay.minimum(var_1874.astype('uint16'), var_1875.astype('uint16')) # shape=(7, 2, 1)
var_1886 = relay.var("var_1886", dtype = "uint16", shape = (7, 2, 13))#candidate|1886|(7, 2, 13)|var|uint16
bop_1887 = relay.logical_or(bop_1876.astype('bool'), var_1886.astype('bool')) # shape=(7, 2, 13)
bop_1890 = relay.right_shift(bop_1876.astype('uint8'), var_1874.astype('uint8')) # shape=(7, 2, 1)
uop_1897 = relay.tan(var_1875.astype('float32')) # shape=(7, 2, 1)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_1909 = relay.TupleGetItem(func_1585_call(), 0)
call_1910 = relay.TupleGetItem(func_1586_call(), 0)
var_1911 = relay.var("var_1911", dtype = "float32", shape = (7, 2, 5))#candidate|1911|(7, 2, 5)|var|float32
bop_1912 = relay.left_shift(uop_1897.astype('uint8'), var_1911.astype('uint8')) # shape=(7, 2, 5)
output = relay.Tuple([bop_1887,bop_1890,call_1909,bop_1912,])
output2 = relay.Tuple([bop_1887,bop_1890,call_1910,bop_1912,])
func_1916 = relay.Function([var_1874,var_1875,var_1886,var_1911,], output)
mod['func_1916'] = func_1916
mod = relay.transform.InferType()(mod)
var_1917 = relay.var("var_1917", dtype = "uint16", shape = ())#candidate|1917|()|var|uint16
var_1918 = relay.var("var_1918", dtype = "uint16", shape = (7, 2, 1))#candidate|1918|(7, 2, 1)|var|uint16
var_1919 = relay.var("var_1919", dtype = "uint16", shape = (7, 2, 13))#candidate|1919|(7, 2, 13)|var|uint16
var_1920 = relay.var("var_1920", dtype = "float32", shape = (7, 2, 5))#candidate|1920|(7, 2, 5)|var|float32
output = func_1916(var_1917,var_1918,var_1919,var_1920,)
func_1921 = relay.Function([var_1917,var_1918,var_1919,var_1920,], output)
mutated_mod['func_1921'] = func_1921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1585_call = mod.get_global_var('func_1585')
func_1586_call = mutated_mod.get_global_var('func_1586')
call_1923 = relay.TupleGetItem(func_1585_call(), 0)
call_1924 = relay.TupleGetItem(func_1586_call(), 0)
const_1942 = relay.const([[[0.126117,0.014450,3.286640,0.512358,-3.968607,8.365363,-3.920078,3.116569,-0.177732,2.002438,5.954294,2.628729,7.991408],[-5.848138,-3.121626,1.176618,7.372914,6.199214,-3.644920,-9.067987,-6.731449,8.490511,6.135154,-9.298136,-4.966403,8.693954],[-0.425032,8.514030,4.864312,-2.496004,5.576996,2.035032,-8.503881,9.599833,-6.034907,-8.997000,4.477327,8.525832,-6.279858],[-3.335520,7.308050,-8.679355,7.777042,5.858348,-6.821754,-7.191876,3.760215,-2.086372,-8.489416,-3.368556,-7.271508,8.575634]],[[4.120059,-3.362887,6.501671,-6.448336,-5.758067,-9.648820,-1.308905,4.994152,1.779419,-4.414967,7.727093,8.181770,2.296354],[-9.560502,-3.711299,1.947406,2.337498,2.261501,0.587270,0.928925,-4.265681,2.719555,-3.244861,2.340993,-4.986532,-1.232844],[4.722767,4.013370,-8.346783,-4.933786,-9.578427,-0.711622,0.988071,-0.629629,1.692940,-6.594095,2.532704,-5.144179,-7.311550],[1.722515,7.400147,3.604259,8.018545,3.805027,-8.433738,-5.397842,-6.753134,-4.321931,-2.379118,-5.612976,0.437941,-6.523228]],[[-7.032683,-0.573229,-3.357559,1.545520,5.482780,-9.869826,0.697750,-7.526372,5.442825,-9.730941,3.758552,1.181431,4.658160],[5.888409,3.738715,7.578308,-4.612787,-4.551955,-1.667657,1.773281,-0.093542,-0.474162,7.749594,-6.279295,-9.867373,-6.413829],[6.519697,8.728116,1.162175,0.781849,-2.238306,-9.508810,-2.677687,-1.480346,-6.505835,4.675402,5.098648,7.223853,-6.471053],[-3.121018,-4.033579,2.947752,-3.829538,8.409226,2.084129,-1.109969,6.271203,8.119558,-2.999627,-3.282452,7.469736,9.118720]],[[-0.704233,1.633628,-5.663947,2.341646,4.805168,1.078882,1.201919,5.176845,7.814784,2.483146,6.565481,2.868855,-6.630667],[-5.721974,6.763891,-6.584426,-9.616112,-9.684404,7.915913,-2.575745,-4.395341,0.190122,-0.168878,5.098546,-5.329306,-4.245087],[3.934532,8.144666,-4.743914,0.681038,-9.901538,9.955415,2.091772,5.985563,1.060649,1.639787,4.001315,1.455859,-6.511005],[-2.576639,0.522780,-0.364707,-4.921108,-4.653834,6.597809,-0.393026,-5.468347,4.454840,3.887835,-7.512778,-4.233226,8.396501]],[[-5.175408,0.299886,5.043218,-2.319924,-5.736051,9.168214,-9.245044,9.965879,1.983856,7.305066,5.164315,3.880661,-6.301386],[0.914016,-0.053474,-2.815804,-4.213247,2.547753,9.486818,-5.391852,-8.152106,-3.415752,-8.697967,-3.115222,3.810187,3.933390],[-9.776265,-6.142837,-9.190526,5.171924,-9.978580,-4.117293,5.756356,-0.998924,6.838388,6.890550,-3.438067,-6.323401,0.093647],[-2.634060,1.393952,-1.140216,-2.538048,-5.192136,-5.447428,0.009720,0.035716,3.947136,9.641799,-4.485977,2.163028,-9.744557]],[[9.513707,-3.023181,-4.484401,-4.491984,-9.833406,1.457142,8.026081,1.635826,-1.134100,-9.093286,-2.838832,-1.738740,5.828354],[-7.957669,-9.883155,-0.135963,-1.952722,4.555958,0.956721,-2.333834,-1.545849,-7.021678,1.018384,4.879827,5.594426,2.681438],[-4.533140,8.682836,-3.091168,-0.745742,7.454525,5.006403,5.348046,-3.619544,-2.651865,-8.792827,-8.494431,-0.938021,-5.754189],[3.762674,5.095839,-1.787189,6.269805,7.365922,8.964421,-1.225897,-1.551792,-7.529092,-0.520698,-0.909452,5.336507,9.433140]],[[2.683864,6.709748,-8.879196,6.899210,-6.984042,5.856034,-7.988024,2.527788,-0.282762,-2.979171,3.586111,-1.590083,1.646264],[-8.833079,6.412159,-1.263040,8.933336,-4.909167,0.042346,0.318782,9.276765,5.333206,2.365088,-3.887051,-4.967963,-1.441229],[0.253023,-6.026595,6.011102,-2.969585,-3.284525,-1.632887,-1.207952,5.365377,-0.307681,2.231402,2.608164,1.006393,-7.760559],[-9.562959,-3.529752,-2.031628,9.253901,-8.300423,-3.678065,0.826166,-0.997068,-7.522307,9.667030,-9.547452,0.553908,9.726015]],[[-7.793790,6.397950,-4.065424,5.250241,7.182360,5.677511,-4.540963,6.087042,-5.323425,-4.949542,-3.451314,1.149982,-9.094215],[-4.654257,-3.228984,9.520469,-2.349279,6.476506,-0.734721,-4.696131,-9.084512,2.079234,9.437577,9.968915,9.513118,-0.920527],[1.642241,8.366124,0.971432,4.079603,-3.107503,-7.418701,1.021593,3.530769,5.006399,0.746542,3.362205,-7.228973,-1.612529],[-3.950024,6.644383,7.351941,0.792161,7.388364,-4.785425,-6.094275,5.065394,-2.352059,-4.179623,-6.842250,5.217565,8.933958]],[[-6.734887,5.815689,-1.677361,4.804378,1.515084,-1.858672,6.080557,6.671499,-5.638349,-7.287535,4.623682,-9.266585,4.578914],[2.143797,7.174006,9.189015,-7.428054,-6.848290,7.735481,9.990739,-0.152993,5.028435,7.190960,-0.381450,-6.066100,7.041337],[9.391492,5.511051,-0.745587,4.807337,4.891168,-8.314214,8.421352,-6.462697,-4.294524,9.810048,0.343389,-1.956343,-2.419686],[-9.294911,-2.678730,-5.730527,-9.416953,-2.722918,-6.882252,-4.198626,-9.016958,4.080862,2.670669,-1.067135,6.333174,-7.107339]],[[-4.011838,7.387403,8.055924,6.005477,6.107217,3.012410,0.507609,1.248525,3.371069,-6.230453,-2.398024,-8.364078,9.390148],[0.174990,-3.820778,-8.063652,-8.911814,8.561371,2.701489,5.971748,-7.847890,-5.722065,-6.144484,1.656267,8.906311,-4.152961],[-7.790736,2.758329,4.614274,-1.630031,5.956628,5.713635,2.679208,5.691428,8.812765,4.005117,-8.507472,-5.267803,9.443957],[-7.321832,3.311037,-3.656047,0.960830,0.897753,-6.357476,9.015484,-8.610059,-6.628763,6.165315,6.076604,-3.720738,5.777492]],[[-1.465560,-5.531536,0.116513,2.327107,3.415555,-3.476320,1.149333,2.369171,-2.585937,1.687725,8.346375,-3.516981,-0.037095],[-0.671936,-4.167938,7.764636,7.986229,3.795082,-7.616041,1.812659,-1.030757,5.027748,6.060709,-3.933403,8.340403,4.667653],[3.020818,7.875363,8.328026,-9.273620,2.454553,-6.533645,8.702755,-2.720735,-4.466924,8.768919,1.122659,1.320408,-8.418825],[-9.984511,8.577590,-5.971227,1.815205,-2.729200,3.852731,2.936492,-1.727695,0.255150,6.133831,-1.788245,5.027259,-2.146692]],[[-4.048765,-5.644146,3.454547,-6.373678,-9.369927,4.329936,-9.482619,-5.529581,0.717982,4.305639,1.437437,3.958594,-3.824985],[6.403692,-5.914543,-8.193567,3.074344,0.306442,-4.674917,7.051281,-7.038995,-3.008740,0.657067,0.157308,-5.195351,-6.921109],[7.591338,-8.951191,6.008355,-1.825114,-9.655713,-1.471604,4.515297,-8.678988,1.693917,-6.204791,5.727072,3.203834,6.879515],[2.773703,0.975419,7.224921,5.860020,-3.269091,5.343234,-1.852422,9.222174,1.078025,-2.737726,-0.675115,-6.862155,-6.391323]],[[-5.323021,-3.301674,-2.112736,7.071096,6.457120,-8.527385,6.879266,-7.362813,0.281909,-6.339290,8.669232,5.898759,6.022992],[-4.604272,-1.550387,6.351840,-3.699128,-9.663027,5.574460,-0.202095,8.584855,-4.195276,3.430812,7.172122,1.372361,4.337126],[-2.628773,9.335820,3.513366,3.184122,-4.440062,-5.537008,-6.998912,9.417894,-6.834695,-2.076286,-4.446912,-2.621754,2.374171],[4.307829,9.468611,-9.855751,4.969139,-8.786942,6.200001,2.926292,-1.510063,-6.499645,-8.877039,1.531687,9.891434,-8.409335]],[[-3.531421,1.665389,2.907805,-7.389744,1.866800,-6.193556,-6.220192,6.487386,-7.000533,5.225846,-3.245461,2.473759,4.845486],[-9.306822,-0.387085,2.406918,0.042384,1.268288,9.418627,-2.743085,-4.856309,8.963353,3.696173,-0.811583,6.314292,-5.381880],[2.354277,8.358757,-1.161947,5.129476,-6.845951,2.680735,8.212633,-7.082910,6.026936,3.800706,1.156231,-7.924357,-6.236066],[-0.439854,2.824326,7.546462,-7.710188,8.763872,-9.328177,-0.367131,8.655485,0.302506,-8.069118,6.642001,-8.943067,8.105013]]], dtype = "float32")#candidate|1942|(14, 4, 13)|const|float32
bop_1943 = relay.bitwise_xor(call_1923.astype('uint64'), relay.reshape(const_1942.astype('uint64'), relay.shape_of(call_1923))) # shape=(14, 4, 13)
bop_1946 = relay.bitwise_xor(call_1924.astype('uint64'), relay.reshape(const_1942.astype('uint64'), relay.shape_of(call_1924))) # shape=(14, 4, 13)
output = bop_1943
output2 = bop_1946
func_1950 = relay.Function([], output)
mod['func_1950'] = func_1950
mod = relay.transform.InferType()(mod)
mutated_mod['func_1950'] = func_1950
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1950_call = mutated_mod.get_global_var('func_1950')
call_1951 = func_1950_call()
output = call_1951
func_1952 = relay.Function([], output)
mutated_mod['func_1952'] = func_1952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1950_call = mod.get_global_var('func_1950')
func_1952_call = mutated_mod.get_global_var('func_1952')
call_1988 = func_1950_call()
call_1989 = func_1950_call()
output = call_1988
output2 = call_1989
func_2011 = relay.Function([], output)
mod['func_2011'] = func_2011
mod = relay.transform.InferType()(mod)
mutated_mod['func_2011'] = func_2011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2011_call = mutated_mod.get_global_var('func_2011')
call_2012 = func_2011_call()
output = call_2012
func_2013 = relay.Function([], output)
mutated_mod['func_2013'] = func_2013
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2046 = relay.var("var_2046", dtype = "float64", shape = (12, 13))#candidate|2046|(12, 13)|var|float64
uop_2047 = relay.rsqrt(var_2046.astype('float64')) # shape=(12, 13)
bop_2049 = relay.mod(var_2046.astype('float32'), relay.reshape(uop_2047.astype('float32'), relay.shape_of(var_2046))) # shape=(12, 13)
bop_2052 = relay.divide(var_2046.astype('float64'), relay.reshape(bop_2049.astype('float64'), relay.shape_of(var_2046))) # shape=(12, 13)
uop_2057 = relay.erf(bop_2052.astype('float32')) # shape=(12, 13)
bop_2060 = relay.minimum(bop_2049.astype('uint16'), relay.reshape(bop_2052.astype('uint16'), relay.shape_of(bop_2049))) # shape=(12, 13)
output = relay.Tuple([uop_2057,bop_2060,])
output2 = relay.Tuple([uop_2057,bop_2060,])
func_2064 = relay.Function([var_2046,], output)
mod['func_2064'] = func_2064
mod = relay.transform.InferType()(mod)
mutated_mod['func_2064'] = func_2064
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2065 = relay.var("var_2065", dtype = "float64", shape = (12, 13))#candidate|2065|(12, 13)|var|float64
func_2064_call = mutated_mod.get_global_var('func_2064')
call_2066 = func_2064_call(var_2065)
output = call_2066
func_2067 = relay.Function([var_2065], output)
mutated_mod['func_2067'] = func_2067
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1571_call = mod.get_global_var('func_1571')
func_1573_call = mutated_mod.get_global_var('func_1573')
call_2073 = func_1571_call()
call_2074 = func_1571_call()
func_2011_call = mod.get_global_var('func_2011')
func_2013_call = mutated_mod.get_global_var('func_2013')
call_2107 = func_2011_call()
call_2108 = func_2011_call()
output = relay.Tuple([call_2073,call_2107,])
output2 = relay.Tuple([call_2074,call_2108,])
func_2109 = relay.Function([], output)
mod['func_2109'] = func_2109
mod = relay.transform.InferType()(mod)
mutated_mod['func_2109'] = func_2109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2109_call = mutated_mod.get_global_var('func_2109')
call_2110 = func_2109_call()
output = call_2110
func_2111 = relay.Function([], output)
mutated_mod['func_2111'] = func_2111
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1623_call = mod.get_global_var('func_1623')
func_1625_call = mutated_mod.get_global_var('func_1625')
call_2116 = func_1623_call()
call_2117 = func_1623_call()
output = call_2116
output2 = call_2117
func_2125 = relay.Function([], output)
mod['func_2125'] = func_2125
mod = relay.transform.InferType()(mod)
mutated_mod['func_2125'] = func_2125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2125_call = mutated_mod.get_global_var('func_2125')
call_2126 = func_2125_call()
output = call_2126
func_2127 = relay.Function([], output)
mutated_mod['func_2127'] = func_2127
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2143 = relay.var("var_2143", dtype = "float64", shape = (11,))#candidate|2143|(11,)|var|float64
uop_2144 = relay.sinh(var_2143.astype('float64')) # shape=(11,)
output = uop_2144
output2 = uop_2144
func_2146 = relay.Function([var_2143,], output)
mod['func_2146'] = func_2146
mod = relay.transform.InferType()(mod)
var_2147 = relay.var("var_2147", dtype = "float64", shape = (11,))#candidate|2147|(11,)|var|float64
output = func_2146(var_2147)
func_2148 = relay.Function([var_2147], output)
mutated_mod['func_2148'] = func_2148
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2227 = relay.var("var_2227", dtype = "int16", shape = (13, 11, 10))#candidate|2227|(13, 11, 10)|var|int16
var_2228 = relay.var("var_2228", dtype = "int16", shape = (13, 11, 10))#candidate|2228|(13, 11, 10)|var|int16
bop_2229 = relay.minimum(var_2227.astype('int16'), relay.reshape(var_2228.astype('int16'), relay.shape_of(var_2227))) # shape=(13, 11, 10)
func_902_call = mod.get_global_var('func_902')
func_906_call = mutated_mod.get_global_var('func_906')
const_2233 = relay.const([3.180764,-3.182718,-3.985735,-3.526891,-6.033336,3.027454,-9.459741,4.273077,-8.694537,-5.289817,9.439589,-1.375312,7.598150,-6.377947,3.513331,-8.371219,-6.059238,2.762250,-3.037445,-3.942108,9.292561,0.592029,3.275915,4.115307,-3.766571,-4.106409,5.969685,-7.190115,0.909803,6.284573,-0.832275,-0.678737,4.548173,-0.602144,9.031230,-8.951751,-3.958392,-3.971862,-1.401891,3.795464,1.044098,-4.140688,-8.104575,-7.138402,4.101944,-9.542126,4.641999,-9.407210,-9.207343,-6.995183,0.670084,5.747658,-1.266518,0.256432,1.224592,-7.027872,-5.684073,-1.000676,9.346544,3.589261,-6.115751,-8.737874,-7.917692,-4.352266,1.631219,-2.060250,2.374860,7.675518,-0.369207,-0.517814,8.008583,-1.537211,9.458734,4.162933,4.208761,8.486860,-7.089370,8.332547,8.955843,-9.943312,7.717569,4.787828,-1.344270,-2.369067,-9.651936,-1.254242,4.130501,3.358757,7.310453,8.173617,9.703503,0.537211,1.109224,-0.854607,-4.762111,0.718852,-5.997214,6.704134,8.093735,2.275309,-4.988050,-7.416027,-0.360702,7.152574,-9.307333,6.121214,3.458540,3.653707,5.734607,6.387606,-5.667415,8.976251,-7.127060,3.161359,7.823059,0.279530,5.791566,0.746882,9.107238,8.309002,-4.858504,-9.965072,9.026534,-1.993753,1.789243,3.916697,-0.606644,-4.352962,1.010959,7.896662,-9.092798,-5.418118,-2.350011,-1.013913,-0.722623,3.892018,-0.365125,5.665743,0.958442,-8.209633,2.131073,2.982531,6.924299,-0.728886,2.659122,7.902080,-4.174378,8.707389,3.082257,9.509117,-6.655921,-7.306880,-9.633947,-3.619086,3.087793,-0.773755,-9.348147,8.545148,-8.281219,-5.568636,1.314323,8.528632,-8.732605,-5.817854,-2.431641,6.206462,-3.638635,7.694656,0.581311,-2.103745,4.576277,-0.948550,-3.692243,2.453578,4.491422,0.125376,9.140980,9.185198,0.105290,6.735960,1.893466,-0.528446,4.286970,-7.912331,-1.789208,4.938952,5.126876,6.382357,2.489264,-8.642791,2.736548,1.065618,9.704862,-4.404827,-1.337344,-5.619596,-5.903421,5.751304,0.971241,9.511401,1.862286,7.974073,-0.372836,-5.693077,2.013775,-1.093313,-8.611427,1.567465,-0.833101,2.900760,1.906566,-3.412869,-1.625082,3.353797,1.225405,9.256960,-7.400068,-5.344355,-7.584773,-2.601875,2.951125,-2.881633,8.253870,8.977762,3.307885,-6.722165,1.064680,-9.680451,8.095965,7.840448,-1.285564,9.900792,0.936655,5.537648,-6.727908,5.655138,7.879707,-1.886234,1.578574,-6.423946,-4.305936,5.702870,-1.971990,4.396984,-2.855674,-3.582806,-4.756094,0.016531,2.440580,5.789135,-5.594039,-6.933375,-0.847633,-0.880820,-9.891867,-1.824477,-1.813833,-6.019438,2.237163,-2.577463,-1.963076,5.761733,-1.941648,-7.750706,6.622589,1.701484,-9.098298,1.586455,-4.469011,-9.630758,6.028044,9.549656,8.896297,-6.389402,-0.587404,-7.637901,5.150324,0.539730,-8.806869,-0.140185,6.508486,8.247708,7.602145,-8.889058,6.126819,-0.901976,4.822915,-2.824836,-1.485020,6.135785,1.336312,7.553274,7.421898,-3.519018,2.649579,-1.584177,-4.559907,-6.231663,-3.065925,-1.103474,-1.212914,-0.991595,-6.206196,-1.013582,8.628022,1.417509,9.615519,-8.943221,2.397926,-2.295963,9.862241,4.333385,-0.933026,1.079449,-2.645519,-8.423139,-0.428597,-8.719043,3.772264,6.600157,9.774303,1.178828,-7.698009,7.183291,-7.525501,-6.664425,-3.209824,-5.263057,9.192075,-9.786351,5.020305,-1.094279,5.548770,-6.166200,0.906253,-6.566189,7.379665,2.798470,8.017421,5.199688,-1.527453,0.484744,-9.369443,-4.680010,5.410508,9.074292,0.437101,-2.579744,4.068855,-0.243925,0.182340,5.601396,-3.170955,-2.771069,7.507416,-5.603938,2.517033,5.262629,4.274611,9.746464,-0.919413,8.199898,6.961624,-6.086020,-4.527976,9.383046,0.794824,-0.477357,-5.846222,8.888108,6.856402,5.831426,1.036762,-1.272699,-3.227379,9.974726,-0.077110,2.643615,7.859938,-7.211594,-1.987839,8.149282,-9.023875,1.261261,-4.827158,4.305580,-2.116760,-3.441290,0.512133,-1.919869,-3.871555,-5.194197,-4.164735,-0.644935,9.501467,-9.047950,4.837541,-7.115382,6.521354,-4.423465,-5.953989,4.759599,-8.411380,3.597588,-8.362836,-8.479462,0.184461,-5.301775,-4.830826,3.044135,3.958281,1.863700,1.432924,9.711532,5.688100,-3.294424,0.957082,0.743650,0.696840,4.378724,-5.285732,7.162115,-7.203768,-6.529486,-1.452620,-9.755454,4.916388,-8.948382,3.648769,9.787427,3.097224,6.467498,-5.875911,3.568599,8.810343,9.688334,-0.473848,9.890802,-5.483360,2.165797,-8.858015,6.101529,4.542341,-3.291229,8.275849,0.272158,-1.392354,3.076405,3.184160,-1.965355,5.561624,8.566800,-0.367310,-6.910680,-5.864550,-5.929418,7.376922,-3.635334,3.851950,-0.046440,-0.685949,-1.805713,-2.170154,8.528054,-7.801078,-7.573801,-2.787117,7.056720,-0.494573,4.247171,7.031368,2.577990,3.645487,4.133494,3.468876,3.248082,7.938889,-9.834796,4.312257,-1.603284,8.957877,1.895398,-6.222831,7.718104,-3.939559,3.292455,-3.677927,9.644221,-8.017125,-1.653235,-8.969458,6.395818,4.844554,6.780977,-5.800022,-1.207979,-8.036641,2.703954,-1.066226,0.905541,9.249829,-2.915212,-2.901859,-1.071262,-6.662117,-4.478386,-3.243037,9.970162,6.005332,7.319124,-9.289145,8.703265,1.256590,9.308671,8.410592,3.883148,3.422395,-3.363213,1.049819,-8.633450,-7.156330,-9.632027,-5.610595,-5.312381,-3.239029,3.025420,-5.952962,4.889142,2.504241,5.459993,0.280406,-3.650283,5.825721,-4.512697,9.657406,-2.831494,3.279175,-2.534547,-4.341660,9.007656,-9.382366,5.018835,-1.667328,7.638467,6.545782,-5.097585,7.563508,5.866315,-8.620959,5.778137,-6.712323,4.123527,-8.901502,-1.236986,-3.978099,0.805843,-1.277208,3.578791,8.261683,2.480390,-1.170104,6.356413,-0.180587,-9.676418,5.918924,-1.225694,9.128224,2.789633,7.499155,1.891008,-4.597502,2.176627,5.828462,1.712319,3.766818,-9.275468,-9.621576,7.077262,-0.758884,8.065055,3.161548,-6.004789,1.784692,-9.223461,9.840279,5.167064,-0.870445,-1.607801,3.893950,-6.061284,-0.418233,-0.815302,-4.849081,4.166873,1.398982,-4.665017,-1.420628,-1.122740,0.078932,7.196911,-5.554126,-8.107589,9.632055,-0.371862,-4.153273,9.338321,1.204569,1.009972,9.875636,3.102849,-6.315841,6.535590,-8.093842,-9.148023,-3.467228,-3.928851,-3.208871,3.149638,1.765096,4.520606,-3.377996,7.103311,-7.412034,6.682061,2.228580,0.940856,0.222326,8.789079,-7.858361,5.945243,6.831353,6.680097,-7.296133,3.975094,-7.377451,6.857068,3.443566,7.514368,3.749591,7.102216,8.287616,-6.073505,7.792426,-4.342673,-7.949268,-7.668661,8.400009,4.367240,-7.163006,6.627862,9.676264,0.507562,8.966475,9.814803,7.221435,-9.243588,7.546498,9.425922,-9.338714,-1.445066,8.439210,-8.708133,-5.300775,-6.232171,-8.542808,1.553064,-1.614235,-6.731792,1.060622,3.893477,-0.799478,6.160756,-9.764401,-6.893889,-8.470561,7.339754,2.990640,-3.790871,-1.827153,-6.411706,9.914372,-7.108935,-5.706495,2.185708,-4.985798,-2.695856,-5.148599,-5.322945,3.591048,7.661471,9.005767,5.953021,-5.232555,-6.652177,7.765576,8.236379,4.456454,-9.716314,-8.076694,6.763013,-7.541630,8.081163,-5.840634,-8.585927,-2.989765,9.469783,-7.733185,-6.784671,7.926406,9.473383,6.928877,2.666677,2.584549,-4.014937,7.163320,-4.469027,-2.583343,6.407643,-1.054206,-1.816755,2.604002,-2.761724,-8.060280,0.731942,-1.364452,-7.667755,2.815291,-3.172090], dtype = "float32")#candidate|2233|(728,)|const|float32
var_2234 = relay.var("var_2234", dtype = "uint8", shape = (12,))#candidate|2234|(12,)|var|uint8
call_2232 = relay.TupleGetItem(func_902_call(relay.reshape(const_2233.astype('float32'), [14, 4, 13]), relay.reshape(var_2234.astype('uint8'), [12,]), ), 7)
call_2235 = relay.TupleGetItem(func_906_call(relay.reshape(const_2233.astype('float32'), [14, 4, 13]), relay.reshape(var_2234.astype('uint8'), [12,]), ), 7)
uop_2238 = relay.asin(const_2233.astype('float32')) # shape=(728,)
func_1222_call = mod.get_global_var('func_1222')
func_1225_call = mutated_mod.get_global_var('func_1225')
var_2241 = relay.var("var_2241", dtype = "int64", shape = (144,))#candidate|2241|(144,)|var|int64
call_2240 = relay.TupleGetItem(func_1222_call(relay.reshape(var_2241.astype('int64'), [6, 3, 8]), relay.reshape(var_2234.astype('uint8'), [12,]), ), 0)
call_2242 = relay.TupleGetItem(func_1225_call(relay.reshape(var_2241.astype('int64'), [6, 3, 8]), relay.reshape(var_2234.astype('uint8'), [12,]), ), 0)
var_2243 = relay.var("var_2243", dtype = "float32", shape = (728,))#candidate|2243|(728,)|var|float32
bop_2244 = relay.logical_or(uop_2238.astype('bool'), relay.reshape(var_2243.astype('bool'), relay.shape_of(uop_2238))) # shape=(728,)
bop_2250 = relay.multiply(uop_2238.astype('uint16'), relay.reshape(var_2243.astype('uint16'), relay.shape_of(uop_2238))) # shape=(728,)
func_821_call = mod.get_global_var('func_821')
func_824_call = mutated_mod.get_global_var('func_824')
var_2256 = relay.var("var_2256", dtype = "float64", shape = (63,))#candidate|2256|(63,)|var|float64
call_2255 = relay.TupleGetItem(func_821_call(relay.reshape(var_2256.astype('float64'), [9, 7]), relay.reshape(call_2232.astype('uint8'), [588,]), ), 1)
call_2257 = relay.TupleGetItem(func_824_call(relay.reshape(var_2256.astype('float64'), [9, 7]), relay.reshape(call_2232.astype('uint8'), [588,]), ), 1)
output = relay.Tuple([bop_2229,call_2232,var_2234,call_2240,var_2241,bop_2244,bop_2250,call_2255,var_2256,])
output2 = relay.Tuple([bop_2229,call_2235,var_2234,call_2242,var_2241,bop_2244,bop_2250,call_2257,var_2256,])
func_2262 = relay.Function([var_2227,var_2228,var_2234,var_2241,var_2243,var_2256,], output)
mod['func_2262'] = func_2262
mod = relay.transform.InferType()(mod)
mutated_mod['func_2262'] = func_2262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2262_call = mutated_mod.get_global_var('func_2262')
var_2264 = relay.var("var_2264", dtype = "int16", shape = (13, 11, 10))#candidate|2264|(13, 11, 10)|var|int16
var_2265 = relay.var("var_2265", dtype = "int16", shape = (13, 11, 10))#candidate|2265|(13, 11, 10)|var|int16
var_2266 = relay.var("var_2266", dtype = "uint8", shape = (12,))#candidate|2266|(12,)|var|uint8
var_2267 = relay.var("var_2267", dtype = "int64", shape = (144,))#candidate|2267|(144,)|var|int64
var_2268 = relay.var("var_2268", dtype = "float32", shape = (728,))#candidate|2268|(728,)|var|float32
var_2269 = relay.var("var_2269", dtype = "float64", shape = (63,))#candidate|2269|(63,)|var|float64
call_2263 = func_2262_call(var_2264,var_2265,var_2266,var_2267,var_2268,var_2269,)
output = call_2263
func_2270 = relay.Function([var_2264,var_2265,var_2266,var_2267,var_2268,var_2269,], output)
mutated_mod['func_2270'] = func_2270
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2277 = relay.var("var_2277", dtype = "bool", shape = (2, 2))#candidate|2277|(2, 2)|var|bool
const_2278 = relay.const([[True,False],[False,False]], dtype = "bool")#candidate|2278|(2, 2)|const|bool
bop_2279 = relay.logical_and(var_2277.astype('bool'), relay.reshape(const_2278.astype('bool'), relay.shape_of(var_2277))) # shape=(2, 2)
bop_2285 = relay.multiply(const_2278.astype('uint8'), relay.reshape(var_2277.astype('uint8'), relay.shape_of(const_2278))) # shape=(2, 2)
bop_2291 = relay.right_shift(bop_2279.astype('uint8'), relay.reshape(const_2278.astype('uint8'), relay.shape_of(bop_2279))) # shape=(2, 2)
uop_2299 = relay.acosh(bop_2285.astype('float32')) # shape=(2, 2)
func_340_call = mod.get_global_var('func_340')
func_344_call = mutated_mod.get_global_var('func_344')
const_2318 = relay.const([2.673211,8.116581,0.846804,-3.147942,-8.309613,9.707666,8.018841,-9.746651,5.044574,6.194583,-9.647273,-7.228724,-6.426384,6.868150,-2.254635,-8.106269,-3.802694,-4.387286,4.904662,-2.512563,-1.910766,-7.830185,-6.524135,8.473572,-2.905135,7.329607,-7.896046,-9.888264,-6.702035,-1.402364,-8.746710,-0.374554,-5.592043,3.199995,8.512653,-2.066334,3.317490,-0.302250,9.796802,-8.945246,-9.939860,-9.780469,0.825360,-0.096008,1.681306,-3.344543,1.005176,-6.855530,3.905534,2.399653,9.120867,5.512906,-1.465678,7.261520], dtype = "float64")#candidate|2318|(54,)|const|float64
const_2319 = relay.const([4.569633,-6.857255,9.699911,-8.978916,-4.359795,-1.220295,1.056012,6.962962,-9.816338,4.130981,-7.724287,1.165199,-0.454100,-3.453947,-6.712990,-1.325927,-5.038090,-3.741017,4.961926,-7.210913,3.489444,8.312201,6.166453,9.848625,2.544372,-2.172398], dtype = "float64")#candidate|2319|(26,)|const|float64
call_2317 = relay.TupleGetItem(func_340_call(relay.reshape(const_2318.astype('float64'), [3, 6, 3]), relay.reshape(const_2319.astype('float64'), [26,]), ), 0)
call_2320 = relay.TupleGetItem(func_344_call(relay.reshape(const_2318.astype('float64'), [3, 6, 3]), relay.reshape(const_2319.astype('float64'), [26,]), ), 0)
var_2321 = relay.var("var_2321", dtype = "uint8", shape = (2, 2))#candidate|2321|(2, 2)|var|uint8
bop_2322 = relay.mod(bop_2285.astype('float32'), relay.reshape(var_2321.astype('float32'), relay.shape_of(bop_2285))) # shape=(2, 2)
output = relay.Tuple([bop_2291,uop_2299,call_2317,const_2318,const_2319,bop_2322,])
output2 = relay.Tuple([bop_2291,uop_2299,call_2320,const_2318,const_2319,bop_2322,])
func_2325 = relay.Function([var_2277,var_2321,], output)
mod['func_2325'] = func_2325
mod = relay.transform.InferType()(mod)
mutated_mod['func_2325'] = func_2325
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2325_call = mutated_mod.get_global_var('func_2325')
var_2327 = relay.var("var_2327", dtype = "bool", shape = (2, 2))#candidate|2327|(2, 2)|var|bool
var_2328 = relay.var("var_2328", dtype = "uint8", shape = (2, 2))#candidate|2328|(2, 2)|var|uint8
call_2326 = func_2325_call(var_2327,var_2328,)
output = call_2326
func_2329 = relay.Function([var_2327,var_2328,], output)
mutated_mod['func_2329'] = func_2329
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2355 = relay.var("var_2355", dtype = "int8", shape = (9, 4))#candidate|2355|(9, 4)|var|int8
var_2356 = relay.var("var_2356", dtype = "int8", shape = (9, 4))#candidate|2356|(9, 4)|var|int8
bop_2357 = relay.bitwise_or(var_2355.astype('int8'), relay.reshape(var_2356.astype('int8'), relay.shape_of(var_2355))) # shape=(9, 4)
output = bop_2357
output2 = bop_2357
func_2366 = relay.Function([var_2355,var_2356,], output)
mod['func_2366'] = func_2366
mod = relay.transform.InferType()(mod)
mutated_mod['func_2366'] = func_2366
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2366_call = mutated_mod.get_global_var('func_2366')
var_2368 = relay.var("var_2368", dtype = "int8", shape = (9, 4))#candidate|2368|(9, 4)|var|int8
var_2369 = relay.var("var_2369", dtype = "int8", shape = (9, 4))#candidate|2369|(9, 4)|var|int8
call_2367 = func_2366_call(var_2368,var_2369,)
output = call_2367
func_2370 = relay.Function([var_2368,var_2369,], output)
mutated_mod['func_2370'] = func_2370
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2387 = relay.var("var_2387", dtype = "float32", shape = (9, 6, 2))#candidate|2387|(9, 6, 2)|var|float32
uop_2388 = relay.log(var_2387.astype('float32')) # shape=(9, 6, 2)
output = relay.Tuple([uop_2388,])
output2 = relay.Tuple([uop_2388,])
func_2395 = relay.Function([var_2387,], output)
mod['func_2395'] = func_2395
mod = relay.transform.InferType()(mod)
var_2396 = relay.var("var_2396", dtype = "float32", shape = (9, 6, 2))#candidate|2396|(9, 6, 2)|var|float32
output = func_2395(var_2396)
func_2397 = relay.Function([var_2396], output)
mutated_mod['func_2397'] = func_2397
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2406 = relay.const([[[-7.083151,-2.655904,-0.257066,3.947674,-1.863227,-3.402166,6.656082,5.256145,-4.080868],[-0.682595,2.882606,-3.016239,-5.824257,-8.276581,-1.454128,-9.480569,-0.937598,8.901359],[1.743515,3.879531,6.926089,8.355873,7.785852,-2.623904,-9.543127,-4.326554,-6.953495]],[[-3.198921,4.203019,-2.875226,-1.454395,-5.917231,8.449917,2.275527,6.564927,5.236931],[0.051764,0.157604,7.762307,-6.674922,5.649878,-4.321694,4.859992,-6.273764,5.458188],[-8.926538,-5.936559,8.707856,-1.786639,-3.600767,7.002761,-0.154495,-4.900521,6.682626]],[[-1.706125,2.485003,4.401492,5.309050,-2.923113,6.381334,-2.370111,3.691866,-6.100742],[1.983128,-5.926990,-5.987070,4.449724,-9.756583,6.527540,2.596551,4.630221,5.714291],[-5.731096,4.991798,-8.611423,7.218055,-8.494229,3.366509,3.417461,5.419446,-1.403317]],[[2.368546,4.059137,-3.595537,9.379836,-4.181266,-5.900836,0.600375,-8.781746,-0.880274],[1.921559,2.629176,-2.417614,2.836481,3.575856,0.684617,-0.642988,2.945220,-6.079668],[-3.924806,-3.212761,-0.560769,-3.243305,6.577700,-2.304674,-7.089730,0.782603,7.260917]],[[-8.569012,5.811505,-1.420757,-2.248593,2.283649,-7.127222,3.020345,-2.913406,7.111250],[-6.171841,-8.538942,-8.092073,3.894582,1.220776,-8.226791,2.095082,7.931547,6.796823],[4.772439,-6.753087,0.462803,7.664676,-4.642947,-5.812306,-9.755870,0.606752,5.280850]],[[-6.678833,-8.283042,4.205241,-0.372118,-0.549445,-4.406419,9.867705,8.337552,-3.342632],[-4.283843,9.007554,1.591433,-0.057942,-3.229695,2.617675,6.210323,6.537590,8.765912],[6.280617,9.074805,7.981662,4.854711,1.323806,-6.162107,7.143919,0.006675,4.329010]],[[7.993091,0.589026,-0.632175,9.104691,-3.126806,6.655552,5.988186,7.536159,-4.299009],[-8.494466,-4.043590,-9.456299,-6.191854,9.339149,-8.836859,-9.691303,9.326735,-8.030330],[-2.491464,2.088175,-4.805732,-8.977727,0.422563,-9.378827,-3.867920,9.646579,-5.173663]],[[-1.750265,-8.823701,7.978928,-5.812384,-1.582434,0.411396,7.527240,-0.557389,-4.608410],[-2.540362,-7.066379,-5.586858,3.867853,-8.290023,4.315740,3.022535,5.004466,-5.296400],[-9.426100,-1.763632,-4.014767,7.443086,-6.849554,-0.618249,-6.008940,1.856214,1.173058]],[[1.344668,5.358762,4.262621,7.314900,-3.407112,-4.904566,5.404702,8.081144,0.471046],[7.190461,-7.371405,-0.285748,-0.192051,4.174069,-0.066652,7.816284,4.013656,3.741720],[-4.038805,8.773832,0.981751,4.512506,2.375401,-4.238512,-6.104955,7.537271,1.691173]],[[8.976941,4.809948,-1.996219,6.688412,7.647780,-7.157756,-6.995593,4.948231,3.542123],[2.091527,3.338467,3.427883,-8.878084,4.172200,-7.741340,3.432389,-6.477584,-7.494572],[-8.535685,7.437898,2.536952,-5.125275,-7.302263,8.924106,-8.983462,-7.856903,2.813143]],[[-5.440126,3.060275,-9.965041,-2.391266,9.240858,-0.488668,0.200937,-8.653635,-8.403588],[-8.155984,6.356945,8.094586,-0.051029,2.342773,1.762665,6.207184,-3.159077,-6.780129],[-8.583049,2.301122,1.933654,-6.861093,-8.806026,6.300588,-5.189980,-9.601762,-9.163353]]], dtype = "float32")#candidate|2406|(11, 3, 9)|const|float32
uop_2407 = relay.cos(const_2406.astype('float32')) # shape=(11, 3, 9)
uop_2416 = relay.rsqrt(uop_2407.astype('float64')) # shape=(11, 3, 9)
uop_2419 = relay.acosh(const_2406.astype('float32')) # shape=(11, 3, 9)
output = relay.Tuple([uop_2416,uop_2419,])
output2 = relay.Tuple([uop_2416,uop_2419,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()()
res3 = intrp3.evaluate()()
res4 = intrp4.evaluate()()
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()()
res7 = intrp7.evaluate()()
res8 = intrp8.evaluate()()
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()()
res11 = intrp11.evaluate()()
res12 = intrp12.evaluate()()
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()()
res15 = intrp15.evaluate()()
res16 = intrp16.evaluate()()
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()()
res19 = intrp19.evaluate()()
res20 = intrp20.evaluate()()
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()()
res23 = intrp23.evaluate()()
res24 = intrp24.evaluate()()
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()

'''9: TVMFuncCall
8: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::transform::Pass, tvm::IRModule)>::AssignTypedLambda<tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}>(tvm::transform::{lambda(tvm::transform::Pass, tvm::IRModule)#7}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
7: tvm::transform::Pass::operator()(tvm::IRModule) const
6: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::LazyGradientInit()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::LazyGradientInit(tvm::RelayExpr const&, tvm::IRModule)
0: tvm::relay::CheckFeature(tvm::RelayExpr const&, tvm::relay::FeatureSet const&)

'''