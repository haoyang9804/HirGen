import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_26 = relay.const([[[9.952448,8.689594,-9.350409],[-2.124814,-0.239395,8.887459],[8.400895,3.611605,-8.433952],[-3.798891,8.151476,3.871836],[-4.242592,-9.492832,2.239314],[0.792130,9.515924,0.126609],[-5.941189,7.939676,8.504082],[-9.358993,5.037149,9.994161],[-4.937178,-6.340613,8.583782],[3.043507,-4.144387,7.761741],[4.307339,-2.695969,-1.342638]],[[-3.449078,9.436974,3.471199],[-6.545740,5.081127,0.200450],[-4.335612,9.789529,8.488336],[-9.115088,-2.175319,6.489983],[5.263227,1.590218,1.349116],[8.790354,-5.934655,-8.325645],[4.642726,2.449344,-8.933028],[4.718916,-1.860150,2.063020],[5.173202,8.483809,-2.459825],[-6.959072,9.423985,-0.872702],[5.515663,0.690952,-4.755264]],[[5.014602,-4.720463,0.576933],[-8.599624,0.106503,2.118300],[-2.594419,0.798353,-2.609127],[-9.384308,5.672099,-4.577656],[0.073572,2.380753,0.939173],[-3.873203,9.685828,-2.317162],[0.120692,5.480945,2.822331],[-1.516842,-6.152650,9.438095],[9.001819,1.654709,-1.129385],[-9.863848,5.086927,-6.571878],[-5.872846,0.518331,9.205095]],[[-1.890850,-8.276705,-4.492485],[-1.605554,-0.599815,-2.653073],[6.123887,3.610272,-7.531140],[4.314953,8.262884,-7.559871],[8.287303,-5.739601,-8.072731],[-1.289367,4.601264,-4.873678],[6.291631,-2.845116,2.806804],[7.809156,-2.155878,9.331382],[-7.621900,-9.473891,0.923317],[3.728740,2.575525,-2.413078],[-1.577442,-4.534430,7.564921]],[[6.572961,8.350900,-6.186033],[-4.670210,7.014992,7.175847],[1.032422,6.916213,9.141601],[-3.196521,-2.612235,0.348044],[5.884894,0.437007,2.624058],[-4.752195,0.036483,-5.024889],[6.546198,-4.523242,1.644683],[2.858464,4.402979,-3.153433],[-2.275312,-5.410447,-7.767811],[2.126292,9.827493,8.009214],[1.791343,3.484055,1.586131]],[[1.287910,-1.357415,-7.546507],[2.698427,-4.986978,-9.419035],[6.473541,4.760227,7.519625],[2.956196,1.699532,-2.155524],[2.048499,-0.890877,-9.055755],[-8.437027,-1.134006,6.180522],[3.001181,0.348161,-3.423924],[-6.122855,-7.310546,0.828339],[-8.863795,-9.800069,5.127134],[-2.884880,-2.208020,9.482813],[4.007696,-1.491793,-2.517679]],[[-3.465693,-8.802308,9.779346],[0.762871,4.013664,4.120871],[-0.778617,2.427666,9.863041],[6.197452,-1.218847,-1.140715],[-3.991358,2.220374,-5.779648],[7.073980,7.565236,-8.984904],[-9.753295,6.316699,7.560871],[-7.307689,-3.197352,-9.483150],[-7.172903,2.057615,2.962673],[-8.519869,3.451626,5.050363],[6.842346,-4.927551,-6.939266]],[[6.208399,6.078849,-0.858346],[3.567444,-0.420165,1.590983],[1.098147,-1.198586,-0.585357],[-1.970615,2.505770,-5.418208],[3.263563,9.599542,7.046457],[-0.850079,-9.850919,2.857486],[-2.902545,3.183493,-5.678439],[0.346161,-6.126168,-5.977305],[-2.024846,0.736912,1.887823],[-4.753084,4.931943,-8.051053],[6.608598,7.641074,-8.283341]],[[9.249862,4.304299,5.410072],[3.591642,9.584548,-0.738769],[-4.342231,7.344408,1.057411],[8.890457,4.256158,2.826822],[2.763220,5.337449,0.409722],[7.574279,-2.181406,9.757652],[-1.932269,2.079699,9.364506],[-9.927741,-6.880222,7.540178],[-5.279937,9.630094,-0.118980],[2.252961,3.825183,-8.571213],[6.849495,8.319784,3.548465]],[[1.617608,7.549019,3.286259],[2.665044,-8.773336,5.369337],[9.586328,5.729238,-4.046130],[0.496855,6.357679,-9.468223],[7.407454,-1.846801,4.473739],[-6.411815,9.937506,5.308091],[-0.937925,-0.263455,-4.592476],[-8.197987,9.456703,-4.427913],[7.389265,-9.466418,0.672815],[2.633900,-8.758816,9.696190],[0.009188,-0.711514,-5.215683]],[[0.208557,-9.233510,2.384587],[-3.511218,-5.490503,2.960528],[0.143711,5.414770,-2.072649],[-5.781387,6.974218,6.893445],[-2.845588,-5.510862,8.763095],[5.607437,9.434472,3.850263],[-9.291480,9.893094,2.437152],[-3.176572,0.144358,-2.722033],[-9.826493,7.856237,9.207669],[-1.646131,9.860944,6.109117],[6.006187,-2.547027,-4.920455]],[[-3.727593,6.232604,-2.165686],[-0.816583,2.043984,-1.696067],[0.749203,-4.515121,-6.148192],[5.628626,8.165952,-6.861669],[-2.719111,8.007695,-0.839044],[-8.358955,9.246651,-0.059181],[-4.756293,-8.628977,4.357797],[-8.341329,3.976299,9.985355],[-5.782088,-4.543305,-5.876623],[-5.922479,5.193860,1.627226],[-0.923734,-2.184750,6.589707]]], dtype = "float64")#candidate|26|(12, 11, 3)|const|float64
var_27 = relay.var("var_27", dtype = "float64", shape = (12, 11, 3))#candidate|27|(12, 11, 3)|var|float64
bop_28 = relay.divide(const_26.astype('float64'), relay.reshape(var_27.astype('float64'), relay.shape_of(const_26))) # shape=(12, 11, 3)
output = bop_28
output2 = bop_28
func_43 = relay.Function([var_27,], output)
mod['func_43'] = func_43
mod = relay.transform.InferType()(mod)
mutated_mod['func_43'] = func_43
mutated_mod = relay.transform.InferType()(mutated_mod)
var_44 = relay.var("var_44", dtype = "float64", shape = (12, 11, 3))#candidate|44|(12, 11, 3)|var|float64
func_43_call = mutated_mod.get_global_var('func_43')
call_45 = func_43_call(var_44)
output = call_45
func_46 = relay.Function([var_44], output)
mutated_mod['func_46'] = func_46
mutated_mod = relay.transform.InferType()(mutated_mod)
var_92 = relay.var("var_92", dtype = "float32", shape = (11, 16))#candidate|92|(11, 16)|var|float32
uop_93 = relay.exp(var_92.astype('float32')) # shape=(11, 16)
func_43_call = mod.get_global_var('func_43')
func_46_call = mutated_mod.get_global_var('func_46')
var_96 = relay.var("var_96", dtype = "float64", shape = (396,))#candidate|96|(396,)|var|float64
call_95 = func_43_call(relay.reshape(var_96.astype('float64'), [12, 11, 3]))
call_97 = func_43_call(relay.reshape(var_96.astype('float64'), [12, 11, 3]))
bop_98 = relay.divide(uop_93.astype('float64'), relay.reshape(var_92.astype('float64'), relay.shape_of(uop_93))) # shape=(11, 16)
bop_103 = relay.logical_and(uop_93.astype('bool'), relay.reshape(var_92.astype('bool'), relay.shape_of(uop_93))) # shape=(11, 16)
var_108 = relay.var("var_108", dtype = "bool", shape = (11, 16))#candidate|108|(11, 16)|var|bool
bop_109 = relay.less_equal(bop_103.astype('bool'), relay.reshape(var_108.astype('bool'), relay.shape_of(bop_103))) # shape=(11, 16)
output = relay.Tuple([call_95,var_96,bop_98,bop_109,])
output2 = relay.Tuple([call_97,var_96,bop_98,bop_109,])
func_120 = relay.Function([var_92,var_96,var_108,], output)
mod['func_120'] = func_120
mod = relay.transform.InferType()(mod)
mutated_mod['func_120'] = func_120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_120_call = mutated_mod.get_global_var('func_120')
var_122 = relay.var("var_122", dtype = "float32", shape = (11, 16))#candidate|122|(11, 16)|var|float32
var_123 = relay.var("var_123", dtype = "float64", shape = (396,))#candidate|123|(396,)|var|float64
var_124 = relay.var("var_124", dtype = "bool", shape = (11, 16))#candidate|124|(11, 16)|var|bool
call_121 = func_120_call(var_122,var_123,var_124,)
output = call_121
func_125 = relay.Function([var_122,var_123,var_124,], output)
mutated_mod['func_125'] = func_125
mutated_mod = relay.transform.InferType()(mutated_mod)
var_254 = relay.var("var_254", dtype = "int64", shape = (1, 14))#candidate|254|(1, 14)|var|int64
var_255 = relay.var("var_255", dtype = "int64", shape = (6, 14))#candidate|255|(6, 14)|var|int64
bop_256 = relay.logical_xor(var_254.astype('int64'), var_255.astype('int64')) # shape=(6, 14)
bop_264 = relay.divide(bop_256.astype('float64'), relay.reshape(var_255.astype('float64'), relay.shape_of(bop_256))) # shape=(6, 14)
func_43_call = mod.get_global_var('func_43')
func_46_call = mutated_mod.get_global_var('func_46')
const_280 = relay.const([9.924945,0.627814,-0.734342,-9.521287,6.213715,9.535045,-0.897993,5.180549,-8.178020,-7.773900,3.722743,-9.947860,2.647498,6.296546,-0.228951,-9.501592,-7.027330,7.260627,9.529551,4.271259,1.300483,9.182186,7.699384,-6.414891,-2.577876,-8.385245,4.642762,-5.569778,-9.856908,3.529522,-6.315318,3.853545,-3.442212,6.026946,-8.916834,-5.433671,9.729729,2.903222,-5.062206,1.127855,-2.623700,-8.986911,-4.328351,-8.357473,8.981378,7.508572,4.617669,-1.478566,0.629756,2.177088,-7.608935,0.517213,9.441203,-0.186949,-3.072225,-6.217274,3.759622,-9.120778,0.379329,0.560866,6.291032,-5.642845,2.260150,-4.260496,6.354205,-3.952328,3.045565,6.954926,-9.776623,-7.635439,2.688086,2.421293,-2.476961,-1.817012,6.378406,-0.700739,-8.350616,7.243458,1.400953,7.940741,-8.634392,-7.287466,0.842582,-3.058990,5.916646,2.555397,-3.307872,5.889440,-8.340410,-0.552245,1.723582,-5.793229,-3.012761,3.013798,8.406565,-9.723746,-8.986919,6.147780,-1.612088,6.370978,5.571008,2.243549,-4.171038,-2.130062,-4.340660,-5.960902,0.285283,-0.480297,-2.868903,3.222820,-2.705025,6.299362,-7.913968,-1.167355,1.587117,-2.531359,-2.763524,-5.822407,-1.645305,-4.701636,5.908369,4.560495,9.981794,-3.412848,1.387260,-1.340832,7.830142,6.082360,-9.887585,2.969218,1.145806,-2.392451,3.708320,-2.764642,8.543155,-9.360805,8.347587,9.072683,8.096741,9.932224,5.671989,-6.028804,3.135517,-6.944944,-7.877077,2.897984,6.383646,5.969742,-3.928272,8.673695,-2.049146,2.121634,4.057170,7.181320,-5.772718,3.388582,-4.115567,7.202395,4.386889,9.053031,6.995510,-3.054643,0.311749,8.282673,0.575987,7.985393,-8.101083,-1.572690,-3.396064,0.479932,-0.769794,-3.595075,-8.039229,-0.929599,-7.813463,5.725000,8.291903,-3.647526,-5.198567,-4.580530,-6.679781,5.996456,-6.681137,-7.157503,8.484523,-8.812115,5.961461,-5.865605,-1.865619,0.847438,9.781601,-6.935698,-6.888301,3.478876,-2.552465,3.155436,6.076822,3.913026,-5.528167,-4.414057,1.772224,5.901783,-9.304732,2.460568,-2.484542,4.989161,4.601593,-7.271149,-9.610799,-9.702245,-9.206081,-2.590618,4.608628,3.854775,8.681279,8.615810,-7.664282,5.715909,1.137605,7.289397,-9.204952,7.069778,-7.440628,3.006751,0.469789,0.842626,7.363628,5.079169,-4.208932,-6.279981,9.107204,-6.129769,-9.282162,-4.666579,-5.570069,-6.999908,-4.817481,2.065689,5.450417,3.713905,-0.662773,-5.463201,-2.282778,-2.945539,1.780316,9.493140,2.749075,-0.076446,2.883336,5.341300,2.184730,-9.723200,7.864563,-7.110036,1.616621,8.705647,0.441897,0.935605,5.005880,-4.559080,7.964349,2.993576,3.310055,-3.381726,-9.365523,7.698965,9.310742,0.956544,7.876799,-2.198574,-5.536834,-0.976614,2.105299,8.992941,-1.501600,5.188682,7.816865,-4.184159,1.063068,-3.824084,-8.128776,1.140524,8.869236,-8.741251,-8.326305,0.446159,-7.511561,-6.933258,-1.352829,-7.978584,7.225137,-7.303640,9.922814,-8.351125,2.788083,-0.059656,-7.528621,-0.484680,3.890584,-7.664202,1.760386,-0.290762,7.785990,8.979818,-5.073332,-3.476732,-2.720147,2.325143,4.936524,-3.475191,-7.686839,-7.322036,-8.141120,-6.133625,0.039080,6.003850,1.837913,-3.106369,3.175422,-7.749284,-8.771528,4.287125,4.955092,-4.757227,-9.110409,7.897049,1.863715,8.327095,-8.015530,5.971266,-3.636756,-7.915025,-5.774998,7.287386,9.381141,-8.312034,-3.842140,-6.355071,-1.044884,0.058148,2.050647,6.533409,-5.131731,-0.874247,-4.097216,7.507468,-6.578651,-0.667129,-5.797274,-0.209217,0.007460,2.374318,1.156319,5.660732,-8.726473,-4.684221,-1.281826,0.428989,6.703676,8.494603,6.734548,-3.417439,4.534845,3.781003,-9.903619,9.866943,-2.529755,-9.285728,-8.155543,7.678452,-2.581230,-9.719787,3.099120,1.332448,9.737762,-1.671988,5.342383,-0.301482,-0.605904,5.154042,-5.355907,-9.168496,5.309242,-5.169836,9.886840,1.826735,9.962201,-6.389156,6.966540,3.533454,-7.867617,7.500019,0.699062,-2.557691,4.377001,-3.478989], dtype = "float64")#candidate|280|(396,)|const|float64
call_279 = func_43_call(relay.reshape(const_280.astype('float64'), [12, 11, 3]))
call_281 = func_43_call(relay.reshape(const_280.astype('float64'), [12, 11, 3]))
uop_284 = relay.sin(bop_256.astype('float64')) # shape=(6, 14)
var_289 = relay.var("var_289", dtype = "float64", shape = (6, 14))#candidate|289|(6, 14)|var|float64
bop_290 = relay.logical_or(uop_284.astype('bool'), relay.reshape(var_289.astype('bool'), relay.shape_of(uop_284))) # shape=(6, 14)
uop_297 = relay.exp(uop_284.astype('float32')) # shape=(6, 14)
func_120_call = mod.get_global_var('func_120')
func_125_call = mutated_mod.get_global_var('func_125')
const_300 = relay.const([4.872056,4.844545,-4.497640,2.750922,9.650381,-2.993316,-9.807303,-4.634825,2.703442,8.095553,2.831311,1.863296,-8.314679,8.516109,-9.341837,9.203129,3.526536,7.619714,-9.319763,9.029707,-7.977549,7.647842,-4.497736,4.531752,-1.263128,-9.232711,-2.796458,0.702013,9.486690,-3.303842,0.010712,9.115389,4.178095,1.615585,-8.830068,8.052179,-6.191422,3.048164,-2.797498,-6.098278,9.129474,-7.422448,-1.148737,-5.911014,-9.491119,-4.832275,1.223555,-6.736407,-7.986820,-1.945638,-2.317236,9.642668,1.722787,-9.542724,-4.609509,-3.423304,8.472071,9.495676,-5.654750,2.198932,7.390282,4.272676,8.613858,4.607378,6.805954,-1.309587,7.440255,-5.456087,-7.845300,-3.390093,6.595442,1.243173,-8.285831,-5.714223,-9.141589,7.884632,7.069830,-8.161132,8.308269,9.799136,-3.613011,-3.908931,5.869442,-8.592281,8.320929,-4.511520,0.847222,0.861763,9.553604,-4.829780,2.321227,1.936371,-2.883928,-3.488553,5.887193,-8.183677,2.336728,0.684972,0.659640,3.907572,-5.979935,8.398800,6.222940,3.558118,1.405963,-1.680286,-9.625479,4.327686,-8.596663,-0.632649,5.581102,4.854244,1.265494,-8.220926,-2.987189,-4.558452,0.931420,-9.177348,-4.374085,9.628845,2.801804,6.432025,6.449107,0.753218,-2.014281,2.289958,-8.241871,-9.569232,6.860949,3.092362,-4.347124,9.149683,2.779205,-2.875558,9.171252,8.766536,-6.438464,-2.496760,-3.366729,9.924680,3.733819,-5.139143,1.605274,-8.988587,0.510677,-6.309996,9.705096,-0.986646,3.776345,-9.005903,-9.218346,0.741439,-1.229553,8.426017,7.657612,0.940447,7.707146,8.658798,3.033404,-4.154762,6.501380,-8.075514,-8.313171,9.734910,-6.725499,-7.272095,-0.124000,2.628126,-9.842041,6.960047,9.535005,-0.731806,-3.616007,7.676260,7.674741,4.096596], dtype = "float32")#candidate|300|(176,)|const|float32
call_299 = relay.TupleGetItem(func_120_call(relay.reshape(const_300.astype('float32'), [11, 16]), relay.reshape(call_279.astype('float64'), [396,]), relay.reshape(const_300.astype('bool'), [11, 16]), ), 3)
call_301 = relay.TupleGetItem(func_125_call(relay.reshape(const_300.astype('float32'), [11, 16]), relay.reshape(call_279.astype('float64'), [396,]), relay.reshape(const_300.astype('bool'), [11, 16]), ), 3)
output = relay.Tuple([bop_264,call_279,const_280,bop_290,uop_297,call_299,const_300,])
output2 = relay.Tuple([bop_264,call_281,const_280,bop_290,uop_297,call_301,const_300,])
func_306 = relay.Function([var_254,var_255,var_289,], output)
mod['func_306'] = func_306
mod = relay.transform.InferType()(mod)
mutated_mod['func_306'] = func_306
mutated_mod = relay.transform.InferType()(mutated_mod)
func_306_call = mutated_mod.get_global_var('func_306')
var_308 = relay.var("var_308", dtype = "int64", shape = (1, 14))#candidate|308|(1, 14)|var|int64
var_309 = relay.var("var_309", dtype = "int64", shape = (6, 14))#candidate|309|(6, 14)|var|int64
var_310 = relay.var("var_310", dtype = "float64", shape = (6, 14))#candidate|310|(6, 14)|var|float64
call_307 = func_306_call(var_308,var_309,var_310,)
output = call_307
func_311 = relay.Function([var_308,var_309,var_310,], output)
mutated_mod['func_311'] = func_311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_339 = relay.var("var_339", dtype = "uint64", shape = (16, 8, 2))#candidate|339|(16, 8, 2)|var|uint64
var_340 = relay.var("var_340", dtype = "uint64", shape = (16, 8, 2))#candidate|340|(16, 8, 2)|var|uint64
bop_341 = relay.add(var_339.astype('uint64'), relay.reshape(var_340.astype('uint64'), relay.shape_of(var_339))) # shape=(16, 8, 2)
bop_345 = relay.bitwise_and(var_339.astype('int8'), relay.reshape(var_340.astype('int8'), relay.shape_of(var_339))) # shape=(16, 8, 2)
bop_350 = relay.greater(bop_345.astype('bool'), relay.reshape(bop_341.astype('bool'), relay.shape_of(bop_345))) # shape=(16, 8, 2)
bop_353 = relay.left_shift(bop_345.astype('uint64'), relay.reshape(bop_341.astype('uint64'), relay.shape_of(bop_345))) # shape=(16, 8, 2)
bop_356 = relay.logical_or(var_340.astype('bool'), relay.reshape(bop_345.astype('bool'), relay.shape_of(var_340))) # shape=(16, 8, 2)
uop_360 = relay.cos(bop_353.astype('float64')) # shape=(16, 8, 2)
bop_363 = relay.bitwise_xor(uop_360.astype('int16'), relay.reshape(bop_345.astype('int16'), relay.shape_of(uop_360))) # shape=(16, 8, 2)
output = relay.Tuple([bop_350,bop_356,bop_363,])
output2 = relay.Tuple([bop_350,bop_356,bop_363,])
func_368 = relay.Function([var_339,var_340,], output)
mod['func_368'] = func_368
mod = relay.transform.InferType()(mod)
var_369 = relay.var("var_369", dtype = "uint64", shape = (16, 8, 2))#candidate|369|(16, 8, 2)|var|uint64
var_370 = relay.var("var_370", dtype = "uint64", shape = (16, 8, 2))#candidate|370|(16, 8, 2)|var|uint64
output = func_368(var_369,var_370,)
func_371 = relay.Function([var_369,var_370,], output)
mutated_mod['func_371'] = func_371
mutated_mod = relay.transform.InferType()(mutated_mod)
var_405 = relay.var("var_405", dtype = "float64", shape = (16, 13))#candidate|405|(16, 13)|var|float64
const_406 = relay.const([[-0.352198,6.786273,3.319184,3.596551,-5.221929,-0.391884,0.153460,0.169791,0.213213,2.973164,-7.528469,-1.504690,-5.120168],[6.960762,-4.695045,-6.548268,0.891393,-8.419097,1.783166,9.672888,0.209581,-9.063044,8.462790,4.882653,2.416855,5.718190],[-1.886823,0.071744,9.594057,1.770352,8.375474,3.150461,2.728782,-7.245613,7.461380,-6.691968,1.855638,-6.947174,-4.544421],[0.316492,-1.596871,7.414205,7.690014,3.130329,1.407357,-8.464804,5.492485,5.908637,4.640719,0.698014,-3.875385,5.122399],[-2.144464,-9.831538,5.939252,-3.228968,9.778515,-4.603658,-1.695183,2.975286,-1.183192,6.371444,9.043957,-7.057250,-8.997696],[-3.016533,2.682113,-7.328267,1.679807,-2.431682,-6.461574,-0.694901,-7.602031,-5.870985,-5.265233,-3.044928,5.666013,-5.648256],[8.251291,1.766482,-8.969318,-6.002957,8.013659,4.015755,8.484106,-7.384587,9.011821,3.119011,1.330825,-1.607723,-3.256583],[7.152165,-6.462944,-8.441054,-7.101547,9.834496,7.977109,3.986115,-5.243541,4.030780,-5.362349,-9.037745,-2.723568,-0.724197],[1.606940,-3.131153,7.320547,-5.729590,1.010716,7.137398,-6.106431,6.600127,-9.629977,8.040737,0.771897,9.431684,-3.499814],[9.586366,3.297029,-6.166438,7.772246,-9.986271,-8.786451,-9.433841,-6.763899,-7.648838,7.969495,-4.527431,-6.674808,-2.714532],[5.397901,9.556899,0.840525,-9.948401,-1.740322,-0.494310,2.283747,7.040844,6.361929,-5.123352,9.282243,-2.917429,-1.301618],[8.863527,-5.557854,-4.683433,5.677049,1.912998,7.744054,8.853524,0.509006,4.720905,1.446549,-2.625684,-5.847077,-5.535753],[2.032664,-2.622374,5.827140,-2.557092,-3.584397,7.721096,4.358236,-8.805196,1.795672,-3.484772,8.415002,4.894343,-9.315251],[7.368122,-0.704885,0.675839,0.296772,7.047514,6.852216,-9.953439,1.164319,2.247045,5.288968,1.560017,1.671716,6.014256],[5.386496,3.182417,-5.554296,-6.063850,-8.093743,0.606461,-5.533171,3.834513,-0.305575,0.962890,7.152879,-3.479848,-7.980708],[9.918826,-3.902482,4.425950,-8.264595,8.887339,2.986625,5.917136,2.728010,9.074044,-1.197321,2.358186,6.069940,-1.201323]], dtype = "float64")#candidate|406|(16, 13)|const|float64
bop_407 = relay.power(var_405.astype('float64'), relay.reshape(const_406.astype('float64'), relay.shape_of(var_405))) # shape=(16, 13)
func_306_call = mod.get_global_var('func_306')
func_311_call = mutated_mod.get_global_var('func_311')
const_421 = relay.const([[1,1],[9,8],[-5,1],[4,-7],[5,-1],[4,2],[-3,-1]], dtype = "int64")#candidate|421|(7, 2)|const|int64
var_422 = relay.var("var_422", dtype = "int64", shape = (84, 1))#candidate|422|(84, 1)|var|int64
call_420 = relay.TupleGetItem(func_306_call(relay.reshape(const_421.astype('int64'), [1, 14]), relay.reshape(var_422.astype('int64'), [6, 14]), relay.reshape(var_422.astype('float64'), [6, 14]), ), 6)
call_423 = relay.TupleGetItem(func_311_call(relay.reshape(const_421.astype('int64'), [1, 14]), relay.reshape(var_422.astype('int64'), [6, 14]), relay.reshape(var_422.astype('float64'), [6, 14]), ), 6)
output = relay.Tuple([bop_407,call_420,const_421,var_422,])
output2 = relay.Tuple([bop_407,call_423,const_421,var_422,])
func_425 = relay.Function([var_405,var_422,], output)
mod['func_425'] = func_425
mod = relay.transform.InferType()(mod)
var_426 = relay.var("var_426", dtype = "float64", shape = (16, 13))#candidate|426|(16, 13)|var|float64
var_427 = relay.var("var_427", dtype = "int64", shape = (84, 1))#candidate|427|(84, 1)|var|int64
output = func_425(var_426,var_427,)
func_428 = relay.Function([var_426,var_427,], output)
mutated_mod['func_428'] = func_428
mutated_mod = relay.transform.InferType()(mutated_mod)
var_438 = relay.var("var_438", dtype = "int32", shape = ())#candidate|438|()|var|int32
var_439 = relay.var("var_439", dtype = "int32", shape = (1, 5))#candidate|439|(1, 5)|var|int32
bop_440 = relay.bitwise_xor(var_438.astype('int32'), var_439.astype('int32')) # shape=(1, 5)
bop_443 = relay.equal(bop_440.astype('bool'), var_438.astype('bool')) # shape=(1, 5)
uop_449 = relay.log2(bop_443.astype('float64')) # shape=(1, 5)
output = uop_449
output2 = uop_449
func_460 = relay.Function([var_438,var_439,], output)
mod['func_460'] = func_460
mod = relay.transform.InferType()(mod)
var_461 = relay.var("var_461", dtype = "int32", shape = ())#candidate|461|()|var|int32
var_462 = relay.var("var_462", dtype = "int32", shape = (1, 5))#candidate|462|(1, 5)|var|int32
output = func_460(var_461,var_462,)
func_463 = relay.Function([var_461,var_462,], output)
mutated_mod['func_463'] = func_463
mutated_mod = relay.transform.InferType()(mutated_mod)
var_551 = relay.var("var_551", dtype = "float64", shape = (6, 15, 11))#candidate|551|(6, 15, 11)|var|float64
uop_552 = relay.sin(var_551.astype('float64')) # shape=(6, 15, 11)
output = relay.Tuple([uop_552,])
output2 = relay.Tuple([uop_552,])
func_554 = relay.Function([var_551,], output)
mod['func_554'] = func_554
mod = relay.transform.InferType()(mod)
var_555 = relay.var("var_555", dtype = "float64", shape = (6, 15, 11))#candidate|555|(6, 15, 11)|var|float64
output = func_554(var_555)
func_556 = relay.Function([var_555], output)
mutated_mod['func_556'] = func_556
mutated_mod = relay.transform.InferType()(mutated_mod)
var_596 = relay.var("var_596", dtype = "int64", shape = (5, 8))#candidate|596|(5, 8)|var|int64
var_597 = relay.var("var_597", dtype = "int64", shape = (5, 8))#candidate|597|(5, 8)|var|int64
bop_598 = relay.bitwise_or(var_596.astype('int64'), relay.reshape(var_597.astype('int64'), relay.shape_of(var_596))) # shape=(5, 8)
output = relay.Tuple([bop_598,])
output2 = relay.Tuple([bop_598,])
func_605 = relay.Function([var_596,var_597,], output)
mod['func_605'] = func_605
mod = relay.transform.InferType()(mod)
var_606 = relay.var("var_606", dtype = "int64", shape = (5, 8))#candidate|606|(5, 8)|var|int64
var_607 = relay.var("var_607", dtype = "int64", shape = (5, 8))#candidate|607|(5, 8)|var|int64
output = func_605(var_606,var_607,)
func_608 = relay.Function([var_606,var_607,], output)
mutated_mod['func_608'] = func_608
mutated_mod = relay.transform.InferType()(mutated_mod)
var_625 = relay.var("var_625", dtype = "uint8", shape = (15, 8))#candidate|625|(15, 8)|var|uint8
var_626 = relay.var("var_626", dtype = "uint8", shape = (15, 8))#candidate|626|(15, 8)|var|uint8
bop_627 = relay.subtract(var_625.astype('uint8'), relay.reshape(var_626.astype('uint8'), relay.shape_of(var_625))) # shape=(15, 8)
bop_649 = relay.mod(var_626.astype('float64'), relay.reshape(bop_627.astype('float64'), relay.shape_of(var_626))) # shape=(15, 8)
bop_656 = relay.greater(bop_649.astype('bool'), relay.reshape(bop_627.astype('bool'), relay.shape_of(bop_649))) # shape=(15, 8)
uop_663 = relay.sigmoid(var_625.astype('float64')) # shape=(15, 8)
bop_668 = relay.bitwise_xor(uop_663.astype('int32'), relay.reshape(var_625.astype('int32'), relay.shape_of(uop_663))) # shape=(15, 8)
output = relay.Tuple([bop_656,bop_668,])
output2 = relay.Tuple([bop_656,bop_668,])
func_671 = relay.Function([var_625,var_626,], output)
mod['func_671'] = func_671
mod = relay.transform.InferType()(mod)
mutated_mod['func_671'] = func_671
mutated_mod = relay.transform.InferType()(mutated_mod)
func_671_call = mutated_mod.get_global_var('func_671')
var_673 = relay.var("var_673", dtype = "uint8", shape = (15, 8))#candidate|673|(15, 8)|var|uint8
var_674 = relay.var("var_674", dtype = "uint8", shape = (15, 8))#candidate|674|(15, 8)|var|uint8
call_672 = func_671_call(var_673,var_674,)
output = call_672
func_675 = relay.Function([var_673,var_674,], output)
mutated_mod['func_675'] = func_675
mutated_mod = relay.transform.InferType()(mutated_mod)
const_687 = relay.const([-6.129409,0.013685,3.768490,-7.278747,9.441641,0.178242,5.298212,-5.799364,6.238227], dtype = "float32")#candidate|687|(9,)|const|float32
uop_688 = relay.sigmoid(const_687.astype('float32')) # shape=(9,)
output = relay.Tuple([uop_688,])
output2 = relay.Tuple([uop_688,])
func_710 = relay.Function([], output)
mod['func_710'] = func_710
mod = relay.transform.InferType()(mod)
mutated_mod['func_710'] = func_710
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mutated_mod.get_global_var('func_710')
call_711 = func_710_call()
output = call_711
func_712 = relay.Function([], output)
mutated_mod['func_712'] = func_712
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_712_call = mutated_mod.get_global_var('func_712')
call_718 = relay.TupleGetItem(func_710_call(), 0)
call_719 = relay.TupleGetItem(func_712_call(), 0)
func_120_call = mod.get_global_var('func_120')
func_125_call = mutated_mod.get_global_var('func_125')
const_735 = relay.const([3.100987,6.232094,-4.125100,0.158557,-2.684169,-7.223057,5.097978,9.795557,-4.056342,6.823446,-5.394102,4.371624,1.582042,6.601376,-5.277254,4.335958,-6.705891,9.287889,4.039389,4.022589,8.923836,-8.400565,0.529531,-9.880179,1.600011,-0.293395,8.341413,-9.205198,-0.889088,-8.660210,-2.157395,-0.490470,-7.179159,9.679969,-2.717549,-9.156758,-0.922639,-3.935266,-0.179005,3.413387,-7.601792,3.343042,8.706217,3.832829,7.450635,7.075829,5.158124,5.556316,8.829037,-4.207342,0.748401,4.606467,3.516111,1.017311,-5.943885,1.500142,-0.375054,-0.416372,3.419479,5.314883,9.336817,-9.417423,-8.131186,5.103888,-6.065652,1.847094,-9.528828,4.074542,-3.483104,8.978884,3.651811,0.958128,-6.894293,7.707143,1.968177,-3.782384,1.265373,-5.293329,-6.909715,7.769884,3.030313,-7.256122,2.925405,0.212921,-2.091878,-9.894388,8.562736,4.602164,-7.670823,4.801088,2.800896,-2.962079,-6.350839,-1.158610,-0.930667,6.827888,-1.981600,5.709759,2.459324,7.504419,-6.833404,1.002155,-1.863239,7.692923,-6.948896,-8.086419,-4.205206,-9.244992,6.932547,-9.213088,7.730716,2.358993,0.577783,7.124283,7.609348,7.578073,1.543952,-4.568798,2.644823,-0.505575,-4.126322,-4.676500,6.579600,-7.357831,6.049506,4.691279,-2.546352,3.738165,6.421461,4.266348,8.735613,-0.802242,3.874463,-9.463052,-5.732578,-1.261149,-7.062652,-7.464857,-6.735185,-3.905589,4.962508,-0.627211,4.023215,7.491212,-4.684655,2.148649,7.621001,-3.513607,-0.248130,-2.847052,7.249773,-3.863061,3.129441,-8.064187,0.650266,1.418642,-8.510705,-1.424670,0.222863,-6.672920,-7.361134,-3.553431,-2.154426,7.881712,7.449364,4.251896,-9.093637,-6.943915,-0.940295,0.432840,-3.275657,-9.383294,-1.708098,-9.695417,2.388489,-2.139650], dtype = "float32")#candidate|735|(176,)|const|float32
var_736 = relay.var("var_736", dtype = "float64", shape = (396,))#candidate|736|(396,)|var|float64
call_734 = relay.TupleGetItem(func_120_call(relay.reshape(const_735.astype('float32'), [11, 16]), relay.reshape(var_736.astype('float64'), [396,]), relay.reshape(const_735.astype('bool'), [11, 16]), ), 2)
call_737 = relay.TupleGetItem(func_125_call(relay.reshape(const_735.astype('float32'), [11, 16]), relay.reshape(var_736.astype('float64'), [396,]), relay.reshape(const_735.astype('bool'), [11, 16]), ), 2)
output = relay.Tuple([call_718,call_734,const_735,var_736,])
output2 = relay.Tuple([call_719,call_737,const_735,var_736,])
func_740 = relay.Function([var_736,], output)
mod['func_740'] = func_740
mod = relay.transform.InferType()(mod)
mutated_mod['func_740'] = func_740
mutated_mod = relay.transform.InferType()(mutated_mod)
var_741 = relay.var("var_741", dtype = "float64", shape = (396,))#candidate|741|(396,)|var|float64
func_740_call = mutated_mod.get_global_var('func_740')
call_742 = func_740_call(var_741)
output = call_742
func_743 = relay.Function([var_741], output)
mutated_mod['func_743'] = func_743
mutated_mod = relay.transform.InferType()(mutated_mod)
var_762 = relay.var("var_762", dtype = "int16", shape = (9, 10, 16))#candidate|762|(9, 10, 16)|var|int16
var_763 = relay.var("var_763", dtype = "int16", shape = (9, 10, 16))#candidate|763|(9, 10, 16)|var|int16
bop_764 = relay.logical_xor(var_762.astype('int16'), relay.reshape(var_763.astype('int16'), relay.shape_of(var_762))) # shape=(9, 10, 16)
output = bop_764
output2 = bop_764
func_778 = relay.Function([var_762,var_763,], output)
mod['func_778'] = func_778
mod = relay.transform.InferType()(mod)
var_779 = relay.var("var_779", dtype = "int16", shape = (9, 10, 16))#candidate|779|(9, 10, 16)|var|int16
var_780 = relay.var("var_780", dtype = "int16", shape = (9, 10, 16))#candidate|780|(9, 10, 16)|var|int16
output = func_778(var_779,var_780,)
func_781 = relay.Function([var_779,var_780,], output)
mutated_mod['func_781'] = func_781
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_712_call = mutated_mod.get_global_var('func_712')
call_790 = relay.TupleGetItem(func_710_call(), 0)
call_791 = relay.TupleGetItem(func_712_call(), 0)
uop_797 = relay.acosh(call_790.astype('float64')) # shape=(9,)
uop_799 = relay.acosh(call_791.astype('float64')) # shape=(9,)
output = relay.Tuple([uop_797,])
output2 = relay.Tuple([uop_799,])
func_801 = relay.Function([], output)
mod['func_801'] = func_801
mod = relay.transform.InferType()(mod)
output = func_801()
func_802 = relay.Function([], output)
mutated_mod['func_802'] = func_802
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_712_call = mutated_mod.get_global_var('func_712')
call_867 = relay.TupleGetItem(func_710_call(), 0)
call_868 = relay.TupleGetItem(func_712_call(), 0)
func_710_call = mod.get_global_var('func_710')
func_712_call = mutated_mod.get_global_var('func_712')
call_910 = relay.TupleGetItem(func_710_call(), 0)
call_911 = relay.TupleGetItem(func_712_call(), 0)
func_120_call = mod.get_global_var('func_120')
func_125_call = mutated_mod.get_global_var('func_125')
const_926 = relay.const([0.420435,6.191542,3.327592,-8.527540,8.915292,9.645072,0.921237,-4.912709,3.114745,1.422100,-7.375296,-9.458219,-7.449775,0.728546,8.935853,6.131776,4.157885,5.996538,9.736587,-4.525769,-3.738404,5.586477,-6.892131,3.704738,-6.293285,-7.289478,7.220080,7.009910,2.870009,6.649223,4.658589,-0.719998,1.588375,8.861100,1.528359,-6.631351,-5.170475,-8.707860,2.044301,-4.735267,-4.375343,-7.002643,5.822335,2.683757,-6.416665,1.185676,5.874930,-3.724080,-9.312998,8.280044,8.875766,1.508881,-4.625357,2.412133,7.358789,7.973825,-6.051139,2.405929,-5.778472,-8.121799,4.112924,-0.869491,7.803983,-3.683752,-0.290350,-5.919691,3.340991,1.360862,7.729365,6.480443,4.393438,-6.473899,3.158026,5.890444,-5.618008,-8.932793,-2.959094,-6.876193,-7.315314,2.620999,1.793524,-4.427976,2.764095,-8.959699,-9.011224,-9.093381,-9.331416,6.799676,-5.746676,0.767300,6.060476,8.038208,-7.572205,8.965115,-0.637187,-6.456262,-5.177952,-8.116709,-9.790364,-0.460094,-4.886007,-2.536739,5.201815,-2.212420,2.343088,-3.979287,-7.445120,-3.314306,-7.545102,7.070490,-3.389725,-0.474627,-4.627270,-4.691312,2.754112,-7.788263,4.324674,-1.524862,-6.408665,1.517535,5.981699,-6.656665,6.346367,-8.662680,6.559700,-5.184829,3.297248,-6.145649,9.898454,6.790941,-5.171760,-4.661896,-5.508009,-6.713725,-3.490205,-4.301604,-4.406927,8.930358,0.972968,7.334442,2.949046,-5.002128,-9.004485,-5.355532,-5.810143,-6.287010,8.423184,-8.188705,7.979563,4.997078,-5.770974,0.186030,-5.314061,-4.471267,6.483193,-6.415386,1.707340,7.307458,-7.790910,1.522555,5.985289,3.561748,4.428896,3.814687,-8.160134,-6.774697,-5.345334,1.915471,-9.675054,9.959707,6.451755,-9.257411,-9.627573,-7.643454,2.705182,0.285345], dtype = "float32")#candidate|926|(176,)|const|float32
const_927 = relay.const([2.353406,-2.501006,-5.269386,-8.324353,-1.488888,2.051290,-3.129697,-6.655484,4.279368,-2.021985,0.485995,-0.629590,2.534367,6.839443,-6.993563,9.614455,2.734253,2.529501,-1.410685,9.507220,-1.789988,6.581768,2.303640,-8.368626,-2.920079,-2.164440,-5.547452,-4.185270,1.604352,-8.454442,5.057606,7.173302,3.964165,-1.351269,-8.178290,0.078637,2.393842,1.107170,-4.436380,8.474854,8.399833,-7.801195,-9.641472,0.279758,5.784237,1.797376,1.613841,1.091982,0.127992,-1.624469,5.968354,-5.628463,-6.606748,0.372632,-9.717386,1.415846,8.976740,5.174789,-2.694929,5.708044,-6.125398,2.184387,7.978920,1.660362,-6.399791,-4.519952,0.174856,-2.813617,5.192407,-6.296119,-9.296630,7.244791,-6.712258,2.789635,7.921890,-7.325149,8.752908,2.208017,-1.930221,-8.226184,-2.927637,5.397600,8.621576,5.833641,3.700394,-6.149840,1.778840,4.253963,-3.208213,-4.431909,4.027873,-1.089474,-0.183413,5.385835,-6.198203,-5.762069,7.010009,-4.156199,8.643692,1.111836,4.986068,4.851171,0.206982,-4.428784,8.930345,2.345822,0.471728,-5.553792,2.087079,0.621337,8.572233,-4.995354,0.789369,4.907862,-4.052592,9.103437,6.264257,-0.520444,-5.101593,-8.118077,0.010265,-9.820558,9.771961,2.124774,0.545694,-7.459492,-5.992374,5.938823,9.385515,-9.532188,1.557633,-1.029904,-7.380551,3.859263,1.654451,7.282243,7.549494,-1.633159,-6.214168,1.771254,-0.639250,-1.307576,-6.238182,-0.280103,-5.537782,6.356013,-5.800954,-1.574285,-1.446359,2.610219,-2.866371,-3.913591,3.475123,-6.177479,-6.579488,8.427323,-7.711449,0.325868,7.901545,-9.838987,3.649369,4.785631,1.739542,-4.140329,7.157779,-2.539471,-8.257407,8.728410,2.236805,1.238278,0.456494,-3.208610,-4.813009,-4.117380,2.764850,-3.316642,-8.646693,-0.154103,0.820011,8.979460,9.566081,-4.686758,-7.026818,3.661489,-6.827080,-3.753343,7.956261,7.900216,-7.029493,5.563997,-7.978842,-0.976209,9.971812,7.456262,-0.337584,3.512135,-9.171111,2.013493,2.211597,-3.591979,-3.693792,8.054063,5.299382,1.901379,-0.798369,1.783758,-4.759635,7.752502,-4.403985,9.574898,7.538929,-2.869516,-5.801503,-5.567809,-4.175615,6.279318,0.776882,-1.383697,4.945346,2.172888,-1.795815,3.603271,-7.147574,-4.629264,3.269558,6.651208,-2.231983,-8.518568,-8.828286,-6.924938,2.000387,4.609072,-8.910351,1.910018,1.601134,6.034454,7.284153,3.231160,0.652867,-5.099711,7.042690,1.872838,-6.619513,-5.858876,0.649910,6.414991,4.647102,6.622817,3.079945,8.773095,1.732149,-9.180076,6.031437,0.107685,-4.260086,7.123208,1.164651,0.575210,-6.272643,-4.129722,0.282937,-8.180488,-4.478260,-8.142150,-9.247244,3.195702,0.865172,-3.551370,2.259731,3.302087,-2.979347,7.267980,-7.347854,9.540943,-9.391308,-9.849582,9.806808,-9.718017,-6.240295,8.661348,7.363274,6.271834,1.788843,0.546269,9.507579,-8.966109,-1.514662,8.559214,-2.784158,8.356535,6.684514,-8.085153,3.045108,-5.347857,-3.747182,-7.937737,-1.341930,-6.544392,-8.767162,-6.855092,-6.013697,7.953908,-6.119274,2.490870,8.636522,-0.406777,-9.048572,7.826282,5.720662,-8.873900,-3.916860,0.442877,-3.096300,-1.056674,-4.844119,-1.239622,1.885644,8.880561,-1.233649,-1.452279,4.440695,-5.342232,-6.447875,6.364553,-7.864684,0.350151,2.684262,8.687567,-8.850739,-4.533093,5.001345,2.368900,-8.462728,-0.967635,-0.835324,-0.481410,3.690299,2.528948,-6.249606,-2.474749,-9.743028,1.578486,-4.835520,3.015353,-3.929541,5.047038,-4.755605,-4.419399,9.676415,-3.697697,-7.206079,-7.888043,1.308594,6.125978,-2.567501,-7.200667,1.936352,-0.877736,5.536247,-7.815681,7.323799,0.228541,-3.197076,-4.758034,-6.345050,1.022468,0.906357,9.694347,-6.343359,8.105599,-4.383316,7.641292,8.101044,1.209650,-0.829256,5.120876,-2.872595,7.675215,-0.005978,-9.979752,-0.634672,4.349586,9.821445,3.963124,1.471339,6.415635,-7.191079,9.028591,-1.857601,-2.282367,-0.450959,4.900795,-3.465827,-1.677904,-7.649836,-9.479156], dtype = "float64")#candidate|927|(396,)|const|float64
call_925 = relay.TupleGetItem(func_120_call(relay.reshape(const_926.astype('float32'), [11, 16]), relay.reshape(const_927.astype('float64'), [396,]), relay.reshape(const_926.astype('bool'), [11, 16]), ), 1)
call_928 = relay.TupleGetItem(func_125_call(relay.reshape(const_926.astype('float32'), [11, 16]), relay.reshape(const_927.astype('float64'), [396,]), relay.reshape(const_926.astype('bool'), [11, 16]), ), 1)
bop_932 = relay.bitwise_or(const_927.astype('uint32'), relay.reshape(call_925.astype('uint32'), relay.shape_of(const_927))) # shape=(396,)
bop_935 = relay.bitwise_or(const_927.astype('uint32'), relay.reshape(call_928.astype('uint32'), relay.shape_of(const_927))) # shape=(396,)
var_954 = relay.var("var_954", dtype = "uint32", shape = (396,))#candidate|954|(396,)|var|uint32
bop_955 = relay.equal(bop_932.astype('bool'), relay.reshape(var_954.astype('bool'), relay.shape_of(bop_932))) # shape=(396,)
bop_958 = relay.equal(bop_935.astype('bool'), relay.reshape(var_954.astype('bool'), relay.shape_of(bop_935))) # shape=(396,)
bop_962 = relay.greater_equal(const_927.astype('bool'), relay.reshape(bop_955.astype('bool'), relay.shape_of(const_927))) # shape=(396,)
bop_965 = relay.greater_equal(const_927.astype('bool'), relay.reshape(bop_958.astype('bool'), relay.shape_of(const_927))) # shape=(396,)
output = relay.Tuple([call_867,call_910,const_926,bop_962,])
output2 = relay.Tuple([call_868,call_911,const_926,bop_965,])
func_970 = relay.Function([var_954,], output)
mod['func_970'] = func_970
mod = relay.transform.InferType()(mod)
mutated_mod['func_970'] = func_970
mutated_mod = relay.transform.InferType()(mutated_mod)
var_971 = relay.var("var_971", dtype = "uint32", shape = (396,))#candidate|971|(396,)|var|uint32
func_970_call = mutated_mod.get_global_var('func_970')
call_972 = func_970_call(var_971)
output = call_972
func_973 = relay.Function([var_971], output)
mutated_mod['func_973'] = func_973
mutated_mod = relay.transform.InferType()(mutated_mod)
var_980 = relay.var("var_980", dtype = "float32", shape = (14, 16))#candidate|980|(14, 16)|var|float32
var_981 = relay.var("var_981", dtype = "float32", shape = (14, 16))#candidate|981|(14, 16)|var|float32
bop_982 = relay.mod(var_980.astype('float32'), relay.reshape(var_981.astype('float32'), relay.shape_of(var_980))) # shape=(14, 16)
func_306_call = mod.get_global_var('func_306')
func_311_call = mutated_mod.get_global_var('func_311')
const_989 = relay.const([-6,-3,-3,-7,3,9,-2,4,-7,4,-10,10,2,4], dtype = "int64")#candidate|989|(14,)|const|int64
const_990 = relay.const([-9,-6,-10,-3,3,8,-6,6,6,1,-3,10,-10,-9,8,-4,3,-1,6,-9,10,3,-6,9,2,5,-1,-9,9,-7,-1,6,-10,6,1,-9,1,-8,-10,-2,-7,10,-3,-8,8,-9,-6,-3,-2,-6,-2,-3,-4,-3,-7,1,-5,-1,9,-1,7,-5,7,-3,7,-1,2,-6,-6,-3,6,-9,4,-9,1,9,2,-3,4,-7,5,1,-1,-6], dtype = "int64")#candidate|990|(84,)|const|int64
call_988 = relay.TupleGetItem(func_306_call(relay.reshape(const_989.astype('int64'), [1, 14]), relay.reshape(const_990.astype('int64'), [6, 14]), relay.reshape(const_990.astype('float64'), [6, 14]), ), 0)
call_991 = relay.TupleGetItem(func_311_call(relay.reshape(const_989.astype('int64'), [1, 14]), relay.reshape(const_990.astype('int64'), [6, 14]), relay.reshape(const_990.astype('float64'), [6, 14]), ), 0)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_996 = relay.TupleGetItem(func_801_call(), 0)
call_997 = relay.TupleGetItem(func_802_call(), 0)
uop_998 = relay.atan(call_988.astype('float32')) # shape=(6, 14)
uop_1000 = relay.atan(call_991.astype('float32')) # shape=(6, 14)
uop_1010 = relay.log(uop_998.astype('float64')) # shape=(6, 14)
uop_1012 = relay.log(uop_1000.astype('float64')) # shape=(6, 14)
output = relay.Tuple([bop_982,const_989,const_990,call_996,uop_1010,])
output2 = relay.Tuple([bop_982,const_989,const_990,call_997,uop_1012,])
func_1013 = relay.Function([var_980,var_981,], output)
mod['func_1013'] = func_1013
mod = relay.transform.InferType()(mod)
mutated_mod['func_1013'] = func_1013
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1013_call = mutated_mod.get_global_var('func_1013')
var_1015 = relay.var("var_1015", dtype = "float32", shape = (14, 16))#candidate|1015|(14, 16)|var|float32
var_1016 = relay.var("var_1016", dtype = "float32", shape = (14, 16))#candidate|1016|(14, 16)|var|float32
call_1014 = func_1013_call(var_1015,var_1016,)
output = call_1014
func_1017 = relay.Function([var_1015,var_1016,], output)
mutated_mod['func_1017'] = func_1017
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1031 = relay.var("var_1031", dtype = "uint16", shape = (14, 13, 7))#candidate|1031|(14, 13, 7)|var|uint16
var_1032 = relay.var("var_1032", dtype = "uint16", shape = (14, 13, 7))#candidate|1032|(14, 13, 7)|var|uint16
bop_1033 = relay.logical_xor(var_1031.astype('uint16'), relay.reshape(var_1032.astype('uint16'), relay.shape_of(var_1031))) # shape=(14, 13, 7)
bop_1037 = relay.subtract(var_1032.astype('float32'), relay.reshape(var_1031.astype('float32'), relay.shape_of(var_1032))) # shape=(14, 13, 7)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_1041 = relay.TupleGetItem(func_801_call(), 0)
call_1042 = relay.TupleGetItem(func_802_call(), 0)
output = relay.Tuple([bop_1033,bop_1037,call_1041,])
output2 = relay.Tuple([bop_1033,bop_1037,call_1042,])
func_1043 = relay.Function([var_1031,var_1032,], output)
mod['func_1043'] = func_1043
mod = relay.transform.InferType()(mod)
mutated_mod['func_1043'] = func_1043
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1043_call = mutated_mod.get_global_var('func_1043')
var_1045 = relay.var("var_1045", dtype = "uint16", shape = (14, 13, 7))#candidate|1045|(14, 13, 7)|var|uint16
var_1046 = relay.var("var_1046", dtype = "uint16", shape = (14, 13, 7))#candidate|1046|(14, 13, 7)|var|uint16
call_1044 = func_1043_call(var_1045,var_1046,)
output = call_1044
func_1047 = relay.Function([var_1045,var_1046,], output)
mutated_mod['func_1047'] = func_1047
mutated_mod = relay.transform.InferType()(mutated_mod)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_1074 = relay.TupleGetItem(func_801_call(), 0)
call_1075 = relay.TupleGetItem(func_802_call(), 0)
func_368_call = mod.get_global_var('func_368')
func_371_call = mutated_mod.get_global_var('func_371')
const_1085 = relay.const([-10,9,-3,-8,-9,-9,3,-2,9,1,8,4,1,-8,-5,3,3,3,-2,-5,1,1,-7,6,-7,-7,10,-8,9,-5,2,-10,-1,-10,-3,6,-1,9,-10,-8,-3,-1,-4,7,4,10,1,2,4,-8,1,10,-1,-1,-7,5,4,6,-6,3,-4,-7,-4,6,2,-4,8,-4,4,-1,4,10,3,-8,-8,8,-6,4,3,-8,4,8,8,2,-7,3,-10,-3,-1,-9,-4,9,-3,1,-5,-2,3,-2,2,-2,-8,2,10,-10,-6,7,7,1,-9,5,-3,2,7,-8,-9,-7,5,-6,7,-3,-6,-7,8,-4,-2,10,5,3,7,10,2,-4,1,4,-5,-2,-9,5,-7,-4,-7,-4,8,6,-9,-3,6,-9,-7,-4,2,-7,-3,8,-1,-8,-7,-3,-10,-2,5,-9,1,7,-3,-4,7,5,2,-1,-6,-3,1,-9,5,7,5,3,8,-7,1,5,1,-9,5,-7,-8,3,-6,-8,6,-1,5,-8,-5,3,4,-3,10,-7,-3,6,-5,-1,-3,-2,-6,9,-8,-4,2,9,7,-3,6,-4,6,-10,-10,4,10,4,10,7,2,10,-1,4,-3,-7,-8,-9,2,5,-8,7,4,4,-7,-1,4,-7,-4,-5,7,-7,-6,9,-4,1,-5,2,2,-3,-8,-1], dtype = "uint64")#candidate|1085|(256,)|const|uint64
call_1084 = relay.TupleGetItem(func_368_call(relay.reshape(const_1085.astype('uint64'), [16, 8, 2]), relay.reshape(const_1085.astype('uint64'), [16, 8, 2]), ), 2)
call_1086 = relay.TupleGetItem(func_371_call(relay.reshape(const_1085.astype('uint64'), [16, 8, 2]), relay.reshape(const_1085.astype('uint64'), [16, 8, 2]), ), 2)
output = relay.Tuple([call_1074,call_1084,const_1085,])
output2 = relay.Tuple([call_1075,call_1086,const_1085,])
func_1104 = relay.Function([], output)
mod['func_1104'] = func_1104
mod = relay.transform.InferType()(mod)
mutated_mod['func_1104'] = func_1104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1104_call = mutated_mod.get_global_var('func_1104')
call_1105 = func_1104_call()
output = call_1105
func_1106 = relay.Function([], output)
mutated_mod['func_1106'] = func_1106
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1110 = relay.var("var_1110", dtype = "int8", shape = (9,))#candidate|1110|(9,)|var|int8
var_1111 = relay.var("var_1111", dtype = "int8", shape = (9,))#candidate|1111|(9,)|var|int8
bop_1112 = relay.minimum(var_1110.astype('int8'), relay.reshape(var_1111.astype('int8'), relay.shape_of(var_1110))) # shape=(9,)
output = bop_1112
output2 = bop_1112
func_1116 = relay.Function([var_1110,var_1111,], output)
mod['func_1116'] = func_1116
mod = relay.transform.InferType()(mod)
mutated_mod['func_1116'] = func_1116
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1116_call = mutated_mod.get_global_var('func_1116')
var_1118 = relay.var("var_1118", dtype = "int8", shape = (9,))#candidate|1118|(9,)|var|int8
var_1119 = relay.var("var_1119", dtype = "int8", shape = (9,))#candidate|1119|(9,)|var|int8
call_1117 = func_1116_call(var_1118,var_1119,)
output = call_1117
func_1120 = relay.Function([var_1118,var_1119,], output)
mutated_mod['func_1120'] = func_1120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1104_call = mod.get_global_var('func_1104')
func_1106_call = mutated_mod.get_global_var('func_1106')
call_1143 = relay.TupleGetItem(func_1104_call(), 0)
call_1144 = relay.TupleGetItem(func_1106_call(), 0)
func_1104_call = mod.get_global_var('func_1104')
func_1106_call = mutated_mod.get_global_var('func_1106')
call_1149 = relay.TupleGetItem(func_1104_call(), 2)
call_1150 = relay.TupleGetItem(func_1106_call(), 2)
func_306_call = mod.get_global_var('func_306')
func_311_call = mutated_mod.get_global_var('func_311')
const_1154 = relay.const([8,1,3,-10,7,-1,3,-9,-10,4,2,-10,-6,-2], dtype = "int64")#candidate|1154|(14,)|const|int64
var_1155 = relay.var("var_1155", dtype = "int64", shape = (84,))#candidate|1155|(84,)|var|int64
call_1153 = relay.TupleGetItem(func_306_call(relay.reshape(const_1154.astype('int64'), [1, 14]), relay.reshape(var_1155.astype('int64'), [6, 14]), relay.reshape(var_1155.astype('float64'), [6, 14]), ), 1)
call_1156 = relay.TupleGetItem(func_311_call(relay.reshape(const_1154.astype('int64'), [1, 14]), relay.reshape(var_1155.astype('int64'), [6, 14]), relay.reshape(var_1155.astype('float64'), [6, 14]), ), 1)
func_671_call = mod.get_global_var('func_671')
func_675_call = mutated_mod.get_global_var('func_675')
const_1162 = relay.const([-5,-4,10,-7,2,-8,-5,8,-10,3,2,-10,-3,7,3,4,6,4,8,6,9,-10,7,-2,-3,-10,10,-3,9,9,-7,-9,-2,9,-8,2,1,4,10,-6,-4,9,6,-7,9,6,-8,8,-2,10,4,-7,-3,-2,6,5,4,-4,-5,5,4,9,8,1,-4,10,-2,2,8,10,2,6,1,-6,10,2,5,-7,9,-5,-9,-3,-1,-8,-9,-5,-6,-6,-2,5,4,-5,9,1,9,4,-10,1,-4,-2,-9,-5,-9,-6,-3,-10,-8,-5,-8,6,-4,-7,7,-8,9,3,7,7,-9,5], dtype = "uint8")#candidate|1162|(120,)|const|uint8
call_1161 = relay.TupleGetItem(func_671_call(relay.reshape(const_1162.astype('uint8'), [15, 8]), relay.reshape(const_1162.astype('uint8'), [15, 8]), ), 0)
call_1163 = relay.TupleGetItem(func_675_call(relay.reshape(const_1162.astype('uint8'), [15, 8]), relay.reshape(const_1162.astype('uint8'), [15, 8]), ), 0)
output = relay.Tuple([call_1143,call_1149,call_1153,const_1154,var_1155,call_1161,const_1162,])
output2 = relay.Tuple([call_1144,call_1150,call_1156,const_1154,var_1155,call_1163,const_1162,])
func_1167 = relay.Function([var_1155,], output)
mod['func_1167'] = func_1167
mod = relay.transform.InferType()(mod)
var_1168 = relay.var("var_1168", dtype = "int64", shape = (84,))#candidate|1168|(84,)|var|int64
output = func_1167(var_1168)
func_1169 = relay.Function([var_1168], output)
mutated_mod['func_1169'] = func_1169
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1171 = relay.var("var_1171", dtype = "int64", shape = (16, 1, 6))#candidate|1171|(16, 1, 6)|var|int64
var_1172 = relay.var("var_1172", dtype = "int64", shape = (16, 3, 6))#candidate|1172|(16, 3, 6)|var|int64
bop_1173 = relay.bitwise_or(var_1171.astype('int64'), var_1172.astype('int64')) # shape=(16, 3, 6)
uop_1181 = relay.log2(bop_1173.astype('float32')) # shape=(16, 3, 6)
uop_1191 = relay.tan(uop_1181.astype('float64')) # shape=(16, 3, 6)
bop_1195 = relay.floor_mod(uop_1191.astype('float64'), relay.reshape(bop_1173.astype('float64'), relay.shape_of(uop_1191))) # shape=(16, 3, 6)
output = relay.Tuple([bop_1195,])
output2 = relay.Tuple([bop_1195,])
func_1201 = relay.Function([var_1171,var_1172,], output)
mod['func_1201'] = func_1201
mod = relay.transform.InferType()(mod)
var_1202 = relay.var("var_1202", dtype = "int64", shape = (16, 1, 6))#candidate|1202|(16, 1, 6)|var|int64
var_1203 = relay.var("var_1203", dtype = "int64", shape = (16, 3, 6))#candidate|1203|(16, 3, 6)|var|int64
output = func_1201(var_1202,var_1203,)
func_1204 = relay.Function([var_1202,var_1203,], output)
mutated_mod['func_1204'] = func_1204
mutated_mod = relay.transform.InferType()(mutated_mod)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_1215 = relay.TupleGetItem(func_801_call(), 0)
call_1216 = relay.TupleGetItem(func_802_call(), 0)
func_43_call = mod.get_global_var('func_43')
func_46_call = mutated_mod.get_global_var('func_46')
const_1224 = relay.const([2.826444,-3.206251,-3.619790,6.508108,-0.381359,7.304271,0.752145,1.199469,-2.226357,-5.713106,-4.274941,-0.781646,8.150199,7.263398,8.801312,7.440429,1.160588,-1.223394,4.618855,8.119484,4.863466,-8.188881,9.197983,-5.405425,9.088686,8.064692,-4.512690,-6.444296,5.665326,-6.351390,-4.764885,2.589143,8.653532,4.411147,0.494586,-3.061059,6.359698,0.220719,0.880510,0.625090,-3.669373,-0.801574,-8.293224,-8.934470,-9.261300,-2.479816,-1.899649,9.163708,0.041149,-9.045256,5.284742,0.595075,-5.662837,2.999836,-4.914354,-9.224175,5.673125,-0.875461,6.236860,1.341361,9.336955,-5.755976,3.736551,-4.881652,3.582285,4.948234,4.794345,3.406157,1.331439,0.126715,6.352622,-7.415128,0.036628,-8.268904,-3.438081,-2.123787,7.604180,4.685597,-1.233082,6.829373,7.059466,2.017619,-0.430763,-6.829817,3.169235,0.778987,8.598669,-5.407271,-9.775540,0.502816,-4.479400,1.455149,-2.272413,2.442357,-8.041936,-7.919456,2.459962,-5.526979,0.744462,-0.650611,1.398589,9.865799,2.072226,4.282803,2.303811,-4.650382,-4.469828,2.329813,7.605070,-7.781636,-5.947952,7.441778,-3.841464,4.630610,-0.101730,-3.905286,2.674054,-5.818002,2.961667,6.316405,-8.357340,5.742430,4.575675,4.618584,3.155063,-0.102171,9.710901,2.818380,4.954112,3.830362,-7.543165,1.911637,7.969086,3.041582,2.454617,2.950778,-4.207004,4.031868,-1.434213,-3.005953,-2.494778,3.348647,-8.154726,3.939018,8.611069,9.970505,-6.472600,8.606214,-5.615802,5.258883,4.124986,4.431641,2.007484,6.258447,-8.757719,8.854808,-7.584671,-1.719347,1.660526,2.835025,-6.232494,9.091163,5.792088,-4.528491,0.477220,-0.296725,2.515942,-9.269291,-1.566661,-8.219601,-7.304337,1.175213,-3.348459,8.603854,3.307222,-1.941893,-5.800397,-2.627582,-5.195902,1.815198,-5.822790,5.318609,-1.278146,-1.536365,6.410278,9.442625,-4.211712,9.435343,-5.094741,4.483048,1.297547,3.938608,0.772130,0.169033,-3.224859,1.536606,-6.382136,-9.419325,-8.548076,1.155288,9.382042,6.580701,7.855838,-4.235105,-0.656071,9.495581,4.312364,7.345361,2.355660,2.620330,8.465861,-5.578083,7.229963,-0.246452,-2.020757,1.904406,-2.586327,9.654675,4.665163,2.205374,3.955129,5.330435,3.490906,6.501376,-5.060326,2.180592,0.364016,2.974684,-2.362787,8.231137,-0.194803,1.963894,1.949372,-8.225307,-0.762581,-6.670521,0.635431,0.751480,-1.406813,7.704812,8.352847,5.794755,-0.194567,5.655031,-8.792778,1.540995,3.892957,-0.492747,-4.978773,-7.145472,-0.740198,-2.692691,-3.182489,7.651724,8.626606,1.680649,3.496450,0.210114,-0.472840,-4.759593,3.115643,4.102661,-9.305147,-1.212616,-4.449306,-1.037446,0.029200,-8.758154,-3.087893,8.183699,-7.990230,-8.114008,6.511087,-5.707755,-4.295470,-2.563013,-4.677627,-1.539115,3.295679,6.215485,6.795282,8.893881,3.356344,8.195657,4.524859,2.372762,3.006737,6.830511,2.471924,-6.783466,-0.198581,-2.334289,-8.224090,-6.088236,2.787771,-6.002593,5.733148,8.049339,1.521690,-0.492623,2.896458,7.483232,9.557104,6.517987,-2.119276,-6.320965,4.532229,3.386012,6.368004,5.478215,-6.013314,-6.704473,6.136812,-5.365541,-1.614108,0.347816,-0.194186,-2.746362,1.460017,-7.327566,-4.732962,3.301062,2.232917,4.597796,-8.305046,5.945105,-4.050544,-4.593854,-6.309318,2.911365,2.720444,-9.737290,9.071608,3.822528,8.763357,-3.732828,-1.071045,7.507929,-8.845392,-3.569077,5.656413,8.896372,4.515812,-6.925836,-4.744793,-3.685701,-3.080242,4.938399,-9.219093,3.206245,9.508636,8.963671,4.390295,5.245179,0.170888,-5.362979,-4.849708,1.356807,9.397345,0.135432,6.164491,4.002614,-7.141926,8.513264,9.328721,-7.857566,-8.375121,-3.049230,-2.979826,6.417527,2.908088,8.141581,-8.531837,-8.471788,-2.831070,7.727455,5.178715,6.004389,-2.508201,-3.777375,4.557562,-8.046861,-1.531411,6.468750,-4.682752,3.820831,-3.258041,2.899439,1.416196,-5.635272,5.541214,0.628220,-2.281074,4.996977,9.857142,-9.687754], dtype = "float64")#candidate|1224|(396,)|const|float64
call_1223 = func_43_call(relay.reshape(const_1224.astype('float64'), [12, 11, 3]))
call_1225 = func_43_call(relay.reshape(const_1224.astype('float64'), [12, 11, 3]))
bop_1237 = relay.multiply(const_1224.astype('int32'), relay.reshape(call_1223.astype('int32'), relay.shape_of(const_1224))) # shape=(396,)
bop_1240 = relay.multiply(const_1224.astype('int32'), relay.reshape(call_1225.astype('int32'), relay.shape_of(const_1224))) # shape=(396,)
func_554_call = mod.get_global_var('func_554')
func_556_call = mutated_mod.get_global_var('func_556')
var_1245 = relay.var("var_1245", dtype = "float64", shape = (990,))#candidate|1245|(990,)|var|float64
call_1244 = relay.TupleGetItem(func_554_call(relay.reshape(var_1245.astype('float64'), [6, 15, 11])), 0)
call_1246 = relay.TupleGetItem(func_556_call(relay.reshape(var_1245.astype('float64'), [6, 15, 11])), 0)
output = relay.Tuple([call_1215,bop_1237,call_1244,var_1245,])
output2 = relay.Tuple([call_1216,bop_1240,call_1246,var_1245,])
func_1248 = relay.Function([var_1245,], output)
mod['func_1248'] = func_1248
mod = relay.transform.InferType()(mod)
var_1249 = relay.var("var_1249", dtype = "float64", shape = (990,))#candidate|1249|(990,)|var|float64
output = func_1248(var_1249)
func_1250 = relay.Function([var_1249], output)
mutated_mod['func_1250'] = func_1250
mutated_mod = relay.transform.InferType()(mutated_mod)
func_710_call = mod.get_global_var('func_710')
func_712_call = mutated_mod.get_global_var('func_712')
call_1312 = relay.TupleGetItem(func_710_call(), 0)
call_1313 = relay.TupleGetItem(func_712_call(), 0)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_1334 = relay.TupleGetItem(func_801_call(), 0)
call_1335 = relay.TupleGetItem(func_802_call(), 0)
func_740_call = mod.get_global_var('func_740')
func_743_call = mutated_mod.get_global_var('func_743')
const_1352 = relay.const([-1.543042,-5.707838,8.996099,4.294766,-4.157652,4.876565,9.859715,-7.628230,2.747948,-5.049558,-6.024036,-6.374497,-4.456544,-1.140043,6.947829,7.591859,-9.241591,7.172008,-2.971355,3.702292,8.314732,3.625787,-8.377861,-2.828210,-5.363179,2.164431,1.070337,-3.543184,-7.307262,1.194977,8.285645,6.094952,-9.316278,-7.807211,-3.536769,4.915788,-9.658107,-5.805015,3.059219,-2.969482,7.523563,-7.460241,-0.546572,0.657759,0.484827,-5.370190,7.735925,-1.681759,-8.253214,2.057840,-3.822672,-5.771157,0.064278,-6.524150,-7.759429,3.227532,-7.944521,-8.608418,-9.735256,2.642330,-1.300987,-9.207219,1.109893,8.741656,2.243546,-2.384329,-1.177993,9.020859,-6.873773,-2.673166,-9.425104,-1.036675,8.152980,1.892650,-2.131116,9.913483,1.614422,8.995737,-0.190291,-4.663254,6.739103,3.595838,-5.313528,4.637143,-1.571058,8.552676,1.756575,9.587604,-0.035193,-8.552078,5.811566,0.935117,-4.087155,-4.510545,3.445017,-1.710927,2.677641,-8.814805,-4.663506,-5.494386,3.892510,-2.924508,-7.580206,7.505030,-4.858204,0.800237,9.641397,-7.996957,3.799599,-3.024601,-7.650134,6.883149,9.582123,1.040756,-0.525325,-8.329910,4.369718,-7.140065,0.099282,-9.576674,-3.804997,3.901846,-1.572063,2.947575,-5.079006,-5.187477,-2.417720,0.357769,-7.261780,-1.489526,-6.283399,-3.357092,8.789109,6.971679,0.239823,-3.866533,-3.705566,8.518477,-9.955161,-0.150334,8.554167,0.157061,0.741541,4.494340,7.757930,-3.235520,-5.633337,6.828791,2.365184,-6.975377,-4.903925,-1.765528,7.923144,6.659902,-4.482479,-4.482899,-1.597117,-4.733004,-0.064031,7.231237,6.854110,-7.413217,4.454498,1.696646,-0.729498,0.392526,-8.324475,9.852148,8.457444,6.129157,5.054196,7.765670,3.547665,0.537266,5.000039,9.686855,-2.550137,8.835281,4.147701,-2.955269,-3.037952,-5.953554,-1.192246,-0.769287,-4.454311,1.143107,-4.009631,-7.572750,-3.489519,8.475403,-6.076491,-8.836964,-1.205142,-4.942312,-6.261219,-3.133346,-5.911253,-4.223098,-3.408079,2.583698,-0.432794,-2.799111,0.916053,8.055828,-4.260694,-5.340991,2.673636,1.372269,-7.915863,-8.371749,6.975522,6.886306,2.555533,-1.571931,2.262217,7.923773,-8.233410,-8.553688,-9.938837,-4.459220,-8.125540,3.728081,1.462168,-1.334935,1.474749,3.213574,3.979426,-9.494857,-5.997866,-4.138037,-5.993516,8.676299,-1.591736,7.824936,0.986536,1.276042,-6.950285,-1.432307,-1.278643,1.156571,7.466522,-6.610843,6.316591,5.110809,2.554926,2.739024,7.606302,-9.143335,-3.945557,-5.702086,0.158892,-2.534814,1.361023,-0.647843,7.109167,6.791102,-6.712217,5.939484,-0.017087,1.982419,-5.692372,-1.637487,7.468475,4.676228,-9.170412,-8.339358,-0.039149,2.560459,7.169731,2.461967,8.603415,5.739724,-9.053765,4.124335,0.372048,-5.073087,-3.239243,-8.109273,3.993587,6.907852,8.722948,-4.049074,-3.093449,8.075191,6.954546,-1.457334,8.339661,-7.589398,-7.856951,5.380118,-3.681148,-5.656123,-0.588095,-4.615046,-1.925324,8.129851,5.713708,2.062014,3.060762,2.127032,2.142413,0.778725,0.843850,-4.695717,3.063253,-5.916924,1.884012,-5.357645,6.431081,-9.017274,3.709897,2.831054,6.248160,-5.770180,-2.012173,3.483490,-8.023920,-0.322086,-6.054030,5.239381,-8.936576,0.676351,-0.673888,3.610978,-4.644630,-2.168469,8.969454,2.880711,-8.386976,3.107760,9.969696,8.692630,1.254346,-1.109850,-4.550406,-9.178393,4.624640,7.681939,7.780964,9.972601,-1.985911,8.422520,6.241067,-6.126017,6.136757,-9.511203,-5.091312,-1.563278,-6.166277,4.292771,-7.760213,3.211033,1.250150,-9.051021,-0.150191,-5.343322,7.466374,-0.979793,-1.128733,-2.768466,3.490712,5.395462,-9.433902,7.963054,-5.900558,-4.804735,-9.157058,-6.486429,-7.909550,3.335756,-9.298540,2.080315,0.911480,-1.787447,-5.860003,1.732242,-5.366769,3.231726,-1.412783,4.554240,2.740289,-6.368693,3.900034,0.072639,7.604171,-6.098383,-5.907768,0.918205,-3.576093,-4.161370,-2.478648,-5.760980,-7.044269,-8.024141,-9.961625,2.890021], dtype = "float64")#candidate|1352|(396,)|const|float64
call_1351 = relay.TupleGetItem(func_740_call(relay.reshape(const_1352.astype('float64'), [396,])), 1)
call_1353 = relay.TupleGetItem(func_743_call(relay.reshape(const_1352.astype('float64'), [396,])), 1)
func_1248_call = mod.get_global_var('func_1248')
func_1250_call = mutated_mod.get_global_var('func_1250')
var_1360 = relay.var("var_1360", dtype = "float64", shape = (990,))#candidate|1360|(990,)|var|float64
call_1359 = relay.TupleGetItem(func_1248_call(relay.reshape(var_1360.astype('float64'), [990,])), 2)
call_1361 = relay.TupleGetItem(func_1250_call(relay.reshape(var_1360.astype('float64'), [990,])), 2)
output = relay.Tuple([call_1312,call_1334,call_1351,const_1352,call_1359,var_1360,])
output2 = relay.Tuple([call_1313,call_1335,call_1353,const_1352,call_1361,var_1360,])
func_1371 = relay.Function([var_1360,], output)
mod['func_1371'] = func_1371
mod = relay.transform.InferType()(mod)
mutated_mod['func_1371'] = func_1371
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1372 = relay.var("var_1372", dtype = "float64", shape = (990,))#candidate|1372|(990,)|var|float64
func_1371_call = mutated_mod.get_global_var('func_1371')
call_1373 = func_1371_call(var_1372)
output = call_1373
func_1374 = relay.Function([var_1372], output)
mutated_mod['func_1374'] = func_1374
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1104_call = mod.get_global_var('func_1104')
func_1106_call = mutated_mod.get_global_var('func_1106')
call_1385 = relay.TupleGetItem(func_1104_call(), 2)
call_1386 = relay.TupleGetItem(func_1106_call(), 2)
const_1401 = relay.const([-7,7,8,9,-8,-2,-1,5,-9,4,3,-1,-4,9,1,2,-4,8,-4,3,-1,6,-10,-5,-6,-6,1,-5,2,-6,10,5,-9,-6,-1,7,-4,7,2,4,-1,8,-8,4,8,7,8,-2,4,-9,6,10,-9,-3,6,-2,8,6,2,5,10,10,3,-6,-9,-3,-1,5,7,4,7,-10,-5,-10,6,8,9,-5,-1,9,-6,-3,5,-8,7,-8,9,9,4,-10,5,8,8,-8,6,9,2,-8,1,1,-1,4,7,-3,-1,3,3,-3,7,-1,7,-5,-1,5,-3,4,5,2,-9,3,8,-9,-7,3,2,-5,4,-9,4,-9,-10,9,-10,9,7,-1,-8,-7,1,-9,4,3,5,-2,-5,4,-5,5,3,3,6,7,4,-8,-4,9,10,-5,-3,-4,8,-8,-8,-8,-4,4,-5,-3,5,-6,-10,-6,-7,5,-5,-10,6,8,10,-6,-7,4,1,2,1,-4,3,1,-10,1,7,2,1,7,8,-6,6,-8,7,5,-10,-9,1,-2,-8,8,-6,9,2,7,-1,-4,2,6,-4,9,7,6,10,1,-10,-3,1,2,-10,-3,3,-10,3,-4,4,-2,1,-1,5,9,10,4,8,5,6,-10,9,-3,5,-1,1,2,-1,-3,4,6,5,-7,5,-10], dtype = "uint64")#candidate|1401|(256,)|const|uint64
bop_1402 = relay.multiply(call_1385.astype('uint64'), relay.reshape(const_1401.astype('uint64'), relay.shape_of(call_1385))) # shape=(256,)
bop_1405 = relay.multiply(call_1386.astype('uint64'), relay.reshape(const_1401.astype('uint64'), relay.shape_of(call_1386))) # shape=(256,)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
var_1408 = relay.var("var_1408", dtype = "int64", shape = (21, 4))#candidate|1408|(21, 4)|var|int64
call_1407 = relay.TupleGetItem(func_1167_call(relay.reshape(var_1408.astype('int64'), [84,])), 4)
call_1409 = relay.TupleGetItem(func_1169_call(relay.reshape(var_1408.astype('int64'), [84,])), 4)
func_306_call = mod.get_global_var('func_306')
func_311_call = mutated_mod.get_global_var('func_311')
var_1412 = relay.var("var_1412", dtype = "int64", shape = (14,))#candidate|1412|(14,)|var|int64
call_1411 = relay.TupleGetItem(func_306_call(relay.reshape(var_1412.astype('int64'), [1, 14]), relay.reshape(call_1407.astype('int64'), [6, 14]), relay.reshape(call_1407.astype('float64'), [6, 14]), ), 2)
call_1413 = relay.TupleGetItem(func_311_call(relay.reshape(var_1412.astype('int64'), [1, 14]), relay.reshape(call_1407.astype('int64'), [6, 14]), relay.reshape(call_1407.astype('float64'), [6, 14]), ), 2)
output = relay.Tuple([bop_1402,call_1407,var_1408,call_1411,var_1412,])
output2 = relay.Tuple([bop_1405,call_1409,var_1408,call_1413,var_1412,])
func_1416 = relay.Function([var_1408,var_1412,], output)
mod['func_1416'] = func_1416
mod = relay.transform.InferType()(mod)
var_1417 = relay.var("var_1417", dtype = "int64", shape = (21, 4))#candidate|1417|(21, 4)|var|int64
var_1418 = relay.var("var_1418", dtype = "int64", shape = (14,))#candidate|1418|(14,)|var|int64
output = func_1416(var_1417,var_1418,)
func_1419 = relay.Function([var_1417,var_1418,], output)
mutated_mod['func_1419'] = func_1419
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1491 = relay.const([[2.500339,-9.314974],[3.092298,2.957689],[-4.663209,8.609912]], dtype = "float64")#candidate|1491|(3, 2)|const|float64
var_1492 = relay.var("var_1492", dtype = "float64", shape = (3, 2))#candidate|1492|(3, 2)|var|float64
bop_1493 = relay.multiply(const_1491.astype('float64'), relay.reshape(var_1492.astype('float64'), relay.shape_of(const_1491))) # shape=(3, 2)
var_1496 = relay.var("var_1496", dtype = "float64", shape = (3, 2))#candidate|1496|(3, 2)|var|float64
bop_1497 = relay.logical_xor(bop_1493.astype('int32'), relay.reshape(var_1496.astype('int32'), relay.shape_of(bop_1493))) # shape=(3, 2)
func_1116_call = mod.get_global_var('func_1116')
func_1120_call = mutated_mod.get_global_var('func_1120')
const_1510 = relay.const([-10,-6,8,8,-8,7,2,-6,8], dtype = "int8")#candidate|1510|(9,)|const|int8
call_1509 = func_1116_call(relay.reshape(const_1510.astype('int8'), [9,]), relay.reshape(const_1510.astype('int8'), [9,]), )
call_1511 = func_1116_call(relay.reshape(const_1510.astype('int8'), [9,]), relay.reshape(const_1510.astype('int8'), [9,]), )
uop_1514 = relay.tan(bop_1497.astype('float32')) # shape=(3, 2)
bop_1519 = relay.equal(uop_1514.astype('bool'), relay.reshape(var_1496.astype('bool'), relay.shape_of(uop_1514))) # shape=(3, 2)
bop_1522 = relay.less_equal(bop_1519.astype('bool'), relay.reshape(bop_1493.astype('bool'), relay.shape_of(bop_1519))) # shape=(3, 2)
output = relay.Tuple([call_1509,const_1510,bop_1522,])
output2 = relay.Tuple([call_1511,const_1510,bop_1522,])
func_1530 = relay.Function([var_1492,var_1496,], output)
mod['func_1530'] = func_1530
mod = relay.transform.InferType()(mod)
var_1531 = relay.var("var_1531", dtype = "float64", shape = (3, 2))#candidate|1531|(3, 2)|var|float64
var_1532 = relay.var("var_1532", dtype = "float64", shape = (3, 2))#candidate|1532|(3, 2)|var|float64
output = func_1530(var_1531,var_1532,)
func_1533 = relay.Function([var_1531,var_1532,], output)
mutated_mod['func_1533'] = func_1533
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1571 = relay.var("var_1571", dtype = "float32", shape = (7, 7))#candidate|1571|(7, 7)|var|float32
uop_1572 = relay.cosh(var_1571.astype('float32')) # shape=(7, 7)
bop_1575 = relay.bitwise_and(uop_1572.astype('uint32'), relay.reshape(var_1571.astype('uint32'), relay.shape_of(uop_1572))) # shape=(7, 7)
output = bop_1575
output2 = bop_1575
func_1578 = relay.Function([var_1571,], output)
mod['func_1578'] = func_1578
mod = relay.transform.InferType()(mod)
mutated_mod['func_1578'] = func_1578
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1579 = relay.var("var_1579", dtype = "float32", shape = (7, 7))#candidate|1579|(7, 7)|var|float32
func_1578_call = mutated_mod.get_global_var('func_1578')
call_1580 = func_1578_call(var_1579)
output = call_1580
func_1581 = relay.Function([var_1579], output)
mutated_mod['func_1581'] = func_1581
mutated_mod = relay.transform.InferType()(mutated_mod)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_1603 = relay.TupleGetItem(func_801_call(), 0)
call_1604 = relay.TupleGetItem(func_802_call(), 0)
output = relay.Tuple([call_1603,])
output2 = relay.Tuple([call_1604,])
func_1619 = relay.Function([], output)
mod['func_1619'] = func_1619
mod = relay.transform.InferType()(mod)
mutated_mod['func_1619'] = func_1619
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1619_call = mutated_mod.get_global_var('func_1619')
call_1620 = func_1619_call()
output = call_1620
func_1621 = relay.Function([], output)
mutated_mod['func_1621'] = func_1621
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1619_call = mod.get_global_var('func_1619')
func_1621_call = mutated_mod.get_global_var('func_1621')
call_1622 = relay.TupleGetItem(func_1619_call(), 0)
call_1623 = relay.TupleGetItem(func_1621_call(), 0)
func_970_call = mod.get_global_var('func_970')
func_973_call = mutated_mod.get_global_var('func_973')
const_1638 = relay.const([[1,6,-7,-3,-8,-1,-7,-2,6,-2,-7,-1,3,7,1,-7,1,-2,-4,-5,5,1,-5,-6,6,-7,6,-7,5,-4,7,-9,-5,-9,7,3,9,5,-6,4,-10,-6,-3,7,7,4,-3,4,-3,8,6,3,5,1,10,-3,8,-9,2,-1,-7,5,-8,-9,4,1],[1,5,-4,7,-2,6,-10,5,3,5,8,10,-10,7,8,-4,-3,-5,7,-3,-2,1,8,-8,-9,-10,4,5,9,-10,1,6,-4,1,4,-10,-6,10,8,-2,-2,6,-2,-10,4,-8,5,-8,-6,10,-4,-6,-3,2,-8,-10,9,-6,8,2,7,6,-7,-1,-5,2],[-3,-10,9,-10,8,-7,8,8,1,-10,1,2,-2,10,4,-7,-2,-5,-8,-10,-7,-5,-2,10,2,-6,10,10,9,-1,2,1,-6,-7,-1,3,3,2,-1,-3,-6,6,4,-10,-6,7,-1,-3,5,1,6,6,4,-7,2,-9,-8,4,3,-7,7,6,-2,-4,7,-7],[-1,-4,-2,-1,-10,3,-5,2,-3,6,10,-7,-9,3,6,2,-4,-4,7,3,6,-7,-4,-9,-5,6,-5,2,-2,3,-7,-9,1,-9,9,-6,-9,5,2,-8,-9,4,7,-9,1,1,8,10,1,6,3,-4,6,4,5,7,-10,7,9,8,-9,9,-7,7,-10,10],[8,8,7,-4,-5,4,3,3,-7,-1,10,-8,-3,-6,9,-8,4,-10,7,-1,4,10,-7,9,-3,-4,2,-1,6,-10,5,-1,2,-8,-5,3,-4,-9,5,-7,-10,-3,-1,-9,-2,-2,-5,-6,6,7,-2,-3,5,-5,1,1,3,4,-10,10,2,-1,-7,-5,10,4],[-4,6,2,10,-5,3,-4,-1,1,-8,-5,9,5,-5,-6,5,-8,7,-4,3,7,7,-4,6,10,-8,5,7,1,-5,10,7,2,-10,-1,6,-9,-9,-1,-10,-1,8,-8,-5,6,8,-9,6,8,-10,6,-5,10,10,9,4,2,7,6,1,-2,-8,1,-4,9,-8]], dtype = "uint32")#candidate|1638|(6, 66)|const|uint32
call_1637 = relay.TupleGetItem(func_970_call(relay.reshape(const_1638.astype('uint32'), [396,])), 2)
call_1639 = relay.TupleGetItem(func_973_call(relay.reshape(const_1638.astype('uint32'), [396,])), 2)
uop_1650 = relay.sigmoid(const_1638.astype('float64')) # shape=(6, 66)
uop_1653 = relay.sin(uop_1650.astype('float64')) # shape=(6, 66)
func_1043_call = mod.get_global_var('func_1043')
func_1047_call = mutated_mod.get_global_var('func_1047')
var_1656 = relay.var("var_1656", dtype = "uint16", shape = (1274,))#candidate|1656|(1274,)|var|uint16
call_1655 = relay.TupleGetItem(func_1043_call(relay.reshape(var_1656.astype('uint16'), [14, 13, 7]), relay.reshape(var_1656.astype('uint16'), [14, 13, 7]), ), 1)
call_1657 = relay.TupleGetItem(func_1047_call(relay.reshape(var_1656.astype('uint16'), [14, 13, 7]), relay.reshape(var_1656.astype('uint16'), [14, 13, 7]), ), 1)
uop_1658 = relay.sqrt(uop_1653.astype('float64')) # shape=(6, 66)
uop_1661 = relay.atan(uop_1658.astype('float32')) # shape=(6, 66)
var_1663 = relay.var("var_1663", dtype = "float32", shape = (6, 66))#candidate|1663|(6, 66)|var|float32
bop_1664 = relay.logical_and(uop_1661.astype('bool'), relay.reshape(var_1663.astype('bool'), relay.shape_of(uop_1661))) # shape=(6, 66)
bop_1670 = relay.equal(uop_1653.astype('bool'), relay.reshape(uop_1661.astype('bool'), relay.shape_of(uop_1653))) # shape=(6, 66)
uop_1673 = relay.cosh(uop_1661.astype('float32')) # shape=(6, 66)
bop_1675 = relay.minimum(uop_1673.astype('int32'), relay.reshape(uop_1661.astype('int32'), relay.shape_of(uop_1673))) # shape=(6, 66)
uop_1686 = relay.acosh(bop_1664.astype('float64')) # shape=(6, 66)
var_1689 = relay.var("var_1689", dtype = "float32", shape = (6, 66))#candidate|1689|(6, 66)|var|float32
bop_1690 = relay.subtract(uop_1673.astype('float64'), relay.reshape(var_1689.astype('float64'), relay.shape_of(uop_1673))) # shape=(6, 66)
func_1167_call = mod.get_global_var('func_1167')
func_1169_call = mutated_mod.get_global_var('func_1169')
const_1697 = relay.const([7,10,-6,7,-8,-6,10,10,-6,-8,3,4,8,-10,-4,-9,-8,4,-4,7,5,1,-5,9,8,-4,1,-6,6,9,2,3,-7,-4,-8,-2,-6,8,8,3,-7,4,6,8,-4,4,-3,6,3,-2,10,-6,9,-10,-3,10,9,-7,-3,-9,-2,-5,-1,6,2,7,-3,10,8,8,2,-1,-3,-6,-5,-3,7,1,-10,3,6,4,2,-1], dtype = "int64")#candidate|1697|(84,)|const|int64
call_1696 = relay.TupleGetItem(func_1167_call(relay.reshape(const_1697.astype('int64'), [84,])), 6)
call_1698 = relay.TupleGetItem(func_1169_call(relay.reshape(const_1697.astype('int64'), [84,])), 6)
bop_1701 = relay.mod(uop_1653.astype('float64'), relay.reshape(var_1663.astype('float64'), relay.shape_of(uop_1653))) # shape=(6, 66)
output = relay.Tuple([call_1622,call_1637,call_1655,var_1656,bop_1670,bop_1675,uop_1686,bop_1690,call_1696,const_1697,bop_1701,])
output2 = relay.Tuple([call_1623,call_1639,call_1657,var_1656,bop_1670,bop_1675,uop_1686,bop_1690,call_1698,const_1697,bop_1701,])
func_1704 = relay.Function([var_1656,var_1663,var_1689,], output)
mod['func_1704'] = func_1704
mod = relay.transform.InferType()(mod)
mutated_mod['func_1704'] = func_1704
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1704_call = mutated_mod.get_global_var('func_1704')
var_1706 = relay.var("var_1706", dtype = "uint16", shape = (1274,))#candidate|1706|(1274,)|var|uint16
var_1707 = relay.var("var_1707", dtype = "float32", shape = (6, 66))#candidate|1707|(6, 66)|var|float32
var_1708 = relay.var("var_1708", dtype = "float32", shape = (6, 66))#candidate|1708|(6, 66)|var|float32
call_1705 = func_1704_call(var_1706,var_1707,var_1708,)
output = call_1705
func_1709 = relay.Function([var_1706,var_1707,var_1708,], output)
mutated_mod['func_1709'] = func_1709
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1754 = relay.var("var_1754", dtype = "uint16", shape = (14, 2, 16))#candidate|1754|(14, 2, 16)|var|uint16
var_1755 = relay.var("var_1755", dtype = "uint16", shape = (14, 2, 16))#candidate|1755|(14, 2, 16)|var|uint16
bop_1756 = relay.minimum(var_1754.astype('uint16'), relay.reshape(var_1755.astype('uint16'), relay.shape_of(var_1754))) # shape=(14, 2, 16)
bop_1761 = relay.floor_divide(var_1755.astype('float32'), relay.reshape(bop_1756.astype('float32'), relay.shape_of(var_1755))) # shape=(14, 2, 16)
func_1043_call = mod.get_global_var('func_1043')
func_1047_call = mutated_mod.get_global_var('func_1047')
const_1770 = relay.const([[8],[2],[-7],[-6],[-3],[6],[-6],[8],[8],[6],[5],[-3],[-5],[-2],[6],[3],[-5],[3],[1],[2],[-4],[4],[7],[-1],[2],[-2],[-9],[7],[-10],[6],[-4],[2],[-8],[-5],[4],[1],[-4],[-8],[-8],[8],[4],[6],[-5],[-7],[9],[10],[6],[5],[7],[-3],[7],[-7],[-10],[4],[5],[8],[1],[5],[7],[10],[-7],[1],[4],[-7],[6],[-10],[-3],[-4],[5],[1],[-7],[9],[10],[-4],[6],[-3],[8],[-6],[2],[3],[-3],[-10],[1],[7],[3],[6],[-6],[-10],[1],[-3],[9],[9],[4],[2],[-1],[3],[-8],[-8],[9],[7],[-5],[4],[9],[8],[-7],[4],[9],[-5],[-3],[8],[-10],[7],[5],[6],[-3],[6],[5],[-9],[-3],[2],[-10],[-5],[-4],[-3],[-7],[-10],[-1],[6],[-2],[-10],[7],[-5],[7],[7],[-3],[-7],[9],[-3],[4],[9],[-6],[-10],[-6],[2],[1],[3],[9],[2],[-3],[5],[2],[-8],[-6],[4],[-6],[3],[2],[8],[-2],[-5],[4],[2],[-7],[-1],[-5],[-8],[-2],[8],[7],[8],[-4],[5],[6],[3],[-6],[2],[-6],[7],[-9],[6],[7],[-3],[-10],[7],[-2],[1],[7],[4],[-3],[-3],[5],[1],[10],[-7],[-6],[-6],[-6],[-2],[-7],[-4],[-5],[5],[-2],[9],[-5],[-4],[-8],[4],[-3],[-8],[3],[-2],[1],[3],[-4],[-9],[1],[4],[2],[-1],[-6],[9],[-10],[-1],[-3],[3],[-4],[-3],[10],[5],[3],[2],[-7],[-7],[10],[7],[-3],[-7],[1],[-9],[10],[10],[-7],[-9],[1],[9],[-7],[7],[-9],[-2],[-4],[-4],[-7],[-3],[2],[3],[-2],[-4],[-6],[-5],[8],[-8],[-9],[8],[1],[9],[-2],[4],[6],[8],[-9],[-10],[5],[-1],[-10],[5],[-2],[-2],[2],[-9],[1],[-10],[-10],[2],[2],[-6],[2],[4],[-3],[-6],[1],[8],[8],[2],[-9],[5],[-8],[-2],[-9],[-6],[4],[-4],[9],[2],[2],[4],[3],[7],[-3],[1],[10],[3],[1],[6],[-8],[3],[-6],[8],[6],[9],[2],[-3],[9],[-6],[1],[-6],[5],[10],[-7],[-8],[-1],[-8],[-9],[-4],[8],[6],[9],[5],[-1],[2],[-2],[4],[-10],[-3],[-3],[3],[-3],[2],[-9],[10],[-2],[-7],[8],[-10],[-7],[-3],[-1],[-6],[3],[7],[2],[3],[2],[7],[2],[7],[4],[6],[8],[-2],[-6],[-3],[4],[-7],[9],[-5],[5],[6],[3],[-7],[3],[-10],[9],[-10],[2],[3],[-7],[-7],[6],[-7],[8],[-9],[2],[-8],[-1],[2],[8],[2],[8],[6],[3],[9],[8],[8],[8],[2],[-1],[-8],[-6],[-8],[1],[4],[9],[-1],[-7],[-8],[8],[8],[-1],[-3],[-6],[-6],[-6],[10],[3],[3],[-7],[5],[1],[5],[-5],[-8],[-10],[1],[7],[-2],[-9],[-9],[-5],[8],[-6],[-1],[-6],[-1],[4],[-6],[-8],[-4],[-3],[10],[10],[-4],[-2],[-5],[4],[4],[4],[3],[4],[8],[-9],[-9],[-1],[5],[-9],[-5],[-9],[-10],[-1],[-10],[10],[-5],[9],[-6],[-3],[3],[1],[10],[6],[-7],[2],[-7],[-2],[-4],[2],[8],[-7],[-6],[-2],[-9],[9],[10],[5],[-5],[7],[9],[-5],[-2],[3],[-9],[-9],[-7],[-1],[-3],[9],[9],[-4],[-1],[9],[2],[-7],[5],[7],[-8],[3],[-5],[6],[1],[7],[10],[5],[-6],[-10],[-2],[1],[5],[6],[10],[9],[-4],[-7],[9],[1],[9],[-3],[5],[-10],[-9],[-6],[-9],[6],[6],[6],[-3],[-8],[-9],[6],[-8],[-5],[4],[-8],[8],[-10],[8],[9],[-6],[1],[-4],[10],[4],[-6],[10],[-9],[8],[7],[-4],[3],[-3],[-10],[-2],[6],[3],[-9],[-6],[8],[-4],[-1],[6],[-5],[7],[-10],[-7],[4],[9],[-8],[-4],[-8],[4],[6],[4],[-8],[-8],[-3],[10],[-1],[-9],[8],[6],[-3],[8],[4],[8],[9],[-9],[1],[-8],[-2],[-9],[-3],[4],[-6],[6],[9],[5],[-7],[-7],[-5],[4],[6],[10],[7],[-8],[4],[-5],[-4],[2],[-3],[3],[-10],[-6],[-3],[7],[8],[3],[-5],[3],[1],[-2],[-7],[-4],[5],[3],[2],[-2],[6],[1],[-10],[7],[-2],[-2],[-3],[10],[6],[-9],[-6],[-6],[-6],[-10],[6],[-5],[7],[2],[-4],[5],[-1],[-2],[4],[6],[-1],[-5],[-7],[9],[1],[-6],[-1],[-9],[-4],[-8],[-2],[-4],[-2],[5],[8],[7],[8],[8],[2],[-1],[-7],[10],[-5],[-6],[10],[7],[9],[-4],[8],[8],[-3],[-5],[7],[-6],[-1],[2],[1],[5],[2],[5],[7],[3],[3],[-6],[7],[7],[7],[10],[-7],[4],[3],[-5],[-9],[10],[-2],[-3],[-9],[5],[-6],[-5],[5],[4],[5],[-7],[-10],[10],[7],[8],[4],[9],[-5],[8],[-1],[-9],[6],[-1],[-5],[-6],[-8],[-5],[-5],[10],[8],[10],[-7],[1],[1],[7],[-4],[8],[-10],[2],[1],[8],[-2],[8],[5],[1],[-7],[7],[-10],[-6],[-8],[3],[-9],[2],[8],[-5],[-2],[10],[7],[3],[-5],[7],[-3],[-4],[3],[-6],[-4],[2],[7],[-3],[10],[8],[4],[-7],[-6],[-2],[3],[3],[-4],[-1],[-10],[9],[-5],[5],[7],[-9],[-7],[-10],[-4],[1],[5],[3],[5],[-8],[-6],[7],[5],[9],[-10],[-1],[4],[5],[-8],[-4],[10],[-4],[-9],[5],[-6],[2],[-1],[7],[-6],[7],[1],[-3],[10],[8],[-1],[-2],[-8],[-7],[5],[10],[6],[-3],[-2],[6],[-7],[5],[3],[-2],[-6],[-2],[-3],[-1],[3],[7],[-2],[9],[-10],[9],[-5],[3],[8],[-9],[-4],[3],[-3],[8],[-1],[4],[-6],[10],[-9],[-10],[-3],[2],[-3],[-9],[1],[-3],[3],[6],[3],[10],[4],[6],[5],[10],[8],[5],[-8],[-1],[-2],[-4],[-10],[-9],[-5],[9],[-10],[1],[-2],[-3],[-4],[-3],[2],[6],[-4],[5],[-7],[8],[-5],[2],[-3],[-7],[-7],[8],[7],[10],[-4],[-4],[10],[-10],[-6],[10],[-3],[-3],[-9],[-10],[4],[-7],[8],[-4],[-5],[-6],[7],[9],[1],[2],[2],[1],[4],[6],[6],[6],[-5],[-5],[-6],[-10],[3],[-2],[-8],[-10],[10],[-6],[-5],[10],[10],[-3],[-3],[-10],[-1],[3],[-6],[-10],[1],[-1],[-3],[-1],[2],[7],[-6],[-9],[4],[5],[-2],[-8],[-2],[2],[-6],[-6],[4],[-9],[6],[-2],[-7],[6],[-8],[2],[-8],[1],[-3],[-4],[-4],[10],[-7],[-8],[-2],[2],[6],[8],[4],[9],[-10],[8],[-7],[9],[10],[3],[-10],[-5],[-1],[-9],[-1],[-3],[-6],[-2],[-5],[-4],[3],[7],[1],[-10],[-9],[-6],[-7],[-7],[-3],[3],[9],[2],[-7],[6],[7],[-8],[-2],[-10],[1],[5],[-4],[1],[1],[2],[-6],[7],[-9],[1],[-5],[-9],[-6],[3],[-4],[-10],[-5],[-6],[-7],[2],[7],[-1],[7],[8],[-9],[3],[3],[6],[-10],[7],[2],[-10],[-4],[7],[5],[7],[-1],[5],[-8],[-3],[2],[-9],[-7],[6],[4],[3],[3],[-4],[-10],[-8],[10],[9],[6],[9],[-8],[1],[8],[9],[-6],[7],[10],[-9],[-1],[-2],[4],[10],[-7],[-5],[-2],[9],[7],[-2],[-3],[-4],[-7],[1],[9],[2],[3],[-5],[-4],[-2],[1],[-8],[-2],[-6],[8],[-5],[10],[9],[10],[-5],[-2],[-1],[1],[-1],[-10],[-7],[-2],[5],[-1],[-4],[9],[-9],[-1],[-6],[-2],[10],[-6],[-6],[-8],[1],[4],[8],[-5],[10],[3],[7],[5],[3],[-8],[-7],[-8],[2],[-1],[-2],[-7],[-4],[4],[-7],[-4],[-7],[4],[3],[1],[7],[4],[10],[2],[-7],[-2],[1],[-1],[2],[-8],[4],[-7],[1],[4],[3],[7],[-7],[-4],[3],[10],[-9],[9],[4],[7],[-7],[7],[7],[4],[-7],[1],[6],[-8],[10],[-1],[-7],[5],[5],[-8],[-5],[-5],[7],[6],[5],[-1],[8],[10],[9],[8],[-1],[-2],[-2],[-6],[10],[4],[-8],[10],[8],[-9],[-3],[5],[4],[5],[7],[-5],[-4],[7],[-6],[1],[-5],[-3],[-3],[-10],[8],[5],[-2],[3],[10],[-1],[3],[5],[5],[-1],[5],[6],[8],[-4],[-10],[-3],[-4],[10],[-1],[-3],[-4],[9],[-10],[-5],[8],[-5],[2],[4],[-9]], dtype = "uint16")#candidate|1770|(1274, 1)|const|uint16
call_1769 = relay.TupleGetItem(func_1043_call(relay.reshape(const_1770.astype('uint16'), [14, 13, 7]), relay.reshape(const_1770.astype('uint16'), [14, 13, 7]), ), 0)
call_1771 = relay.TupleGetItem(func_1047_call(relay.reshape(const_1770.astype('uint16'), [14, 13, 7]), relay.reshape(const_1770.astype('uint16'), [14, 13, 7]), ), 0)
output = relay.Tuple([bop_1761,call_1769,const_1770,])
output2 = relay.Tuple([bop_1761,call_1771,const_1770,])
func_1776 = relay.Function([var_1754,var_1755,], output)
mod['func_1776'] = func_1776
mod = relay.transform.InferType()(mod)
var_1777 = relay.var("var_1777", dtype = "uint16", shape = (14, 2, 16))#candidate|1777|(14, 2, 16)|var|uint16
var_1778 = relay.var("var_1778", dtype = "uint16", shape = (14, 2, 16))#candidate|1778|(14, 2, 16)|var|uint16
output = func_1776(var_1777,var_1778,)
func_1779 = relay.Function([var_1777,var_1778,], output)
mutated_mod['func_1779'] = func_1779
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1619_call = mod.get_global_var('func_1619')
func_1621_call = mutated_mod.get_global_var('func_1621')
call_1784 = relay.TupleGetItem(func_1619_call(), 0)
call_1785 = relay.TupleGetItem(func_1621_call(), 0)
output = relay.Tuple([call_1784,])
output2 = relay.Tuple([call_1785,])
func_1788 = relay.Function([], output)
mod['func_1788'] = func_1788
mod = relay.transform.InferType()(mod)
mutated_mod['func_1788'] = func_1788
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1788_call = mutated_mod.get_global_var('func_1788')
call_1789 = func_1788_call()
output = call_1789
func_1790 = relay.Function([], output)
mutated_mod['func_1790'] = func_1790
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1791 = relay.var("var_1791", dtype = "int16", shape = (9, 14, 6))#candidate|1791|(9, 14, 6)|var|int16
var_1792 = relay.var("var_1792", dtype = "int16", shape = (9, 14, 6))#candidate|1792|(9, 14, 6)|var|int16
bop_1793 = relay.bitwise_and(var_1791.astype('int16'), relay.reshape(var_1792.astype('int16'), relay.shape_of(var_1791))) # shape=(9, 14, 6)
func_368_call = mod.get_global_var('func_368')
func_371_call = mutated_mod.get_global_var('func_371')
var_1802 = relay.var("var_1802", dtype = "uint64", shape = (2, 128))#candidate|1802|(2, 128)|var|uint64
call_1801 = relay.TupleGetItem(func_368_call(relay.reshape(var_1802.astype('uint64'), [16, 8, 2]), relay.reshape(var_1802.astype('uint64'), [16, 8, 2]), ), 2)
call_1803 = relay.TupleGetItem(func_371_call(relay.reshape(var_1802.astype('uint64'), [16, 8, 2]), relay.reshape(var_1802.astype('uint64'), [16, 8, 2]), ), 2)
output = relay.Tuple([bop_1793,call_1801,var_1802,])
output2 = relay.Tuple([bop_1793,call_1803,var_1802,])
func_1804 = relay.Function([var_1791,var_1792,var_1802,], output)
mod['func_1804'] = func_1804
mod = relay.transform.InferType()(mod)
mutated_mod['func_1804'] = func_1804
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1804_call = mutated_mod.get_global_var('func_1804')
var_1806 = relay.var("var_1806", dtype = "int16", shape = (9, 14, 6))#candidate|1806|(9, 14, 6)|var|int16
var_1807 = relay.var("var_1807", dtype = "int16", shape = (9, 14, 6))#candidate|1807|(9, 14, 6)|var|int16
var_1808 = relay.var("var_1808", dtype = "uint64", shape = (2, 128))#candidate|1808|(2, 128)|var|uint64
call_1805 = func_1804_call(var_1806,var_1807,var_1808,)
output = call_1805
func_1809 = relay.Function([var_1806,var_1807,var_1808,], output)
mutated_mod['func_1809'] = func_1809
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1788_call = mod.get_global_var('func_1788')
func_1790_call = mutated_mod.get_global_var('func_1790')
call_1811 = relay.TupleGetItem(func_1788_call(), 0)
call_1812 = relay.TupleGetItem(func_1790_call(), 0)
output = relay.Tuple([call_1811,])
output2 = relay.Tuple([call_1812,])
func_1820 = relay.Function([], output)
mod['func_1820'] = func_1820
mod = relay.transform.InferType()(mod)
mutated_mod['func_1820'] = func_1820
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1820_call = mutated_mod.get_global_var('func_1820')
call_1821 = func_1820_call()
output = call_1821
func_1822 = relay.Function([], output)
mutated_mod['func_1822'] = func_1822
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1836 = relay.var("var_1836", dtype = "float32", shape = (13, 9))#candidate|1836|(13, 9)|var|float32
uop_1837 = relay.acosh(var_1836.astype('float32')) # shape=(13, 9)
func_970_call = mod.get_global_var('func_970')
func_973_call = mutated_mod.get_global_var('func_973')
var_1842 = relay.var("var_1842", dtype = "uint32", shape = (396,))#candidate|1842|(396,)|var|uint32
call_1841 = relay.TupleGetItem(func_970_call(relay.reshape(var_1842.astype('uint32'), [396,])), 2)
call_1843 = relay.TupleGetItem(func_973_call(relay.reshape(var_1842.astype('uint32'), [396,])), 2)
bop_1852 = relay.minimum(uop_1837.astype('uint64'), relay.reshape(var_1836.astype('uint64'), relay.shape_of(uop_1837))) # shape=(13, 9)
uop_1857 = relay.atan(call_1841.astype('float64')) # shape=(176,)
uop_1859 = relay.atan(call_1843.astype('float64')) # shape=(176,)
output = relay.Tuple([var_1842,bop_1852,uop_1857,])
output2 = relay.Tuple([var_1842,bop_1852,uop_1859,])
func_1860 = relay.Function([var_1836,var_1842,], output)
mod['func_1860'] = func_1860
mod = relay.transform.InferType()(mod)
var_1861 = relay.var("var_1861", dtype = "float32", shape = (13, 9))#candidate|1861|(13, 9)|var|float32
var_1862 = relay.var("var_1862", dtype = "uint32", shape = (396,))#candidate|1862|(396,)|var|uint32
output = func_1860(var_1861,var_1862,)
func_1863 = relay.Function([var_1861,var_1862,], output)
mutated_mod['func_1863'] = func_1863
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1874 = relay.var("var_1874", dtype = "float32", shape = (13, 11, 13))#candidate|1874|(13, 11, 13)|var|float32
var_1875 = relay.var("var_1875", dtype = "float32", shape = (13, 11, 13))#candidate|1875|(13, 11, 13)|var|float32
bop_1876 = relay.greater_equal(var_1874.astype('bool'), relay.reshape(var_1875.astype('bool'), relay.shape_of(var_1874))) # shape=(13, 11, 13)
bop_1880 = relay.less_equal(bop_1876.astype('bool'), relay.reshape(var_1874.astype('bool'), relay.shape_of(bop_1876))) # shape=(13, 11, 13)
bop_1886 = relay.maximum(var_1875.astype('uint8'), relay.reshape(bop_1880.astype('uint8'), relay.shape_of(var_1875))) # shape=(13, 11, 13)
func_605_call = mod.get_global_var('func_605')
func_608_call = mutated_mod.get_global_var('func_608')
var_1891 = relay.var("var_1891", dtype = "int64", shape = (40,))#candidate|1891|(40,)|var|int64
call_1890 = relay.TupleGetItem(func_605_call(relay.reshape(var_1891.astype('int64'), [5, 8]), relay.reshape(var_1891.astype('int64'), [5, 8]), ), 0)
call_1892 = relay.TupleGetItem(func_608_call(relay.reshape(var_1891.astype('int64'), [5, 8]), relay.reshape(var_1891.astype('int64'), [5, 8]), ), 0)
func_425_call = mod.get_global_var('func_425')
func_428_call = mutated_mod.get_global_var('func_428')
var_1895 = relay.var("var_1895", dtype = "float64", shape = (208,))#candidate|1895|(208,)|var|float64
var_1896 = relay.var("var_1896", dtype = "int64", shape = (84,))#candidate|1896|(84,)|var|int64
call_1894 = relay.TupleGetItem(func_425_call(relay.reshape(var_1895.astype('float64'), [16, 13]), relay.reshape(var_1896.astype('int64'), [84, 1]), ), 1)
call_1897 = relay.TupleGetItem(func_428_call(relay.reshape(var_1895.astype('float64'), [16, 13]), relay.reshape(var_1896.astype('int64'), [84, 1]), ), 1)
bop_1903 = relay.less(bop_1880.astype('bool'), relay.reshape(bop_1886.astype('bool'), relay.shape_of(bop_1880))) # shape=(13, 11, 13)
bop_1907 = relay.less(var_1891.astype('bool'), relay.reshape(call_1890.astype('bool'), relay.shape_of(var_1891))) # shape=(40,)
bop_1910 = relay.less(var_1891.astype('bool'), relay.reshape(call_1892.astype('bool'), relay.shape_of(var_1891))) # shape=(40,)
var_1913 = relay.var("var_1913", dtype = "int64", shape = (84,))#candidate|1913|(84,)|var|int64
bop_1914 = relay.right_shift(var_1896.astype('int32'), relay.reshape(var_1913.astype('int32'), relay.shape_of(var_1896))) # shape=(84,)
func_1776_call = mod.get_global_var('func_1776')
func_1779_call = mutated_mod.get_global_var('func_1779')
const_1923 = relay.const([-7,5,-6,-3,10,4,-8,3,10,-8,1,-3,8,5,-9,-1,-7,-10,-1,-10,4,4,-8,8,3,10,5,-6,-5,-6,9,3,-6,-9,-5,-7,4,3,-6,-9,8,2,5,6,-7,6,-2,4,-1,2,-3,-5,10,-10,-10,7,10,-1,7,5,-2,4,10,-1,-2,-5,1,3,-9,-10,-3,4,8,8,-5,-1,-6,10,-2,6,-3,8,-2,-7,-3,-7,6,10,7,7,-3,-8,1,6,6,-7,3,-2,6,6,-6,8,4,-6,-7,4,1,-10,7,-8,-10,-3,2,-9,-5,-2,8,5,-7,3,-3,-6,9,1,-4,1,7,8,-9,10,2,7,9,9,2,-1,-1,3,3,-7,4,2,4,-1,-6,9,10,-7,-9,-8,-10,-7,-6,-2,6,-7,-7,-2,-10,4,-1,-4,-10,-1,-7,9,7,-10,-8,-3,2,-5,-10,2,7,6,10,10,-10,6,-9,7,-2,-9,1,-7,2,4,6,-2,1,-4,7,-10,4,-4,-2,8,-8,-6,-1,-2,4,6,1,6,7,4,1,-3,-1,-7,10,8,-4,-8,9,7,7,3,3,-1,-7,-8,-8,-3,-10,1,6,7,-6,-5,7,8,5,-2,-1,3,-6,10,2,3,6,1,5,-1,4,-6,8,-5,-5,5,7,-8,9,-7,1,-4,-5,-10,2,1,-7,-9,1,2,-8,-4,5,10,-9,-8,8,-7,6,5,-1,5,3,5,-7,-10,3,2,5,5,-10,4,2,4,1,5,-6,-9,6,5,-10,8,10,-3,-3,-8,-1,2,-6,-3,-4,8,-1,-10,-1,-10,-9,-8,10,3,2,-6,-4,6,5,-8,10,-10,2,-7,5,6,6,5,7,-9,1,-10,4,-6,7,-9,-9,7,-10,-4,2,1,6,-5,-5,-2,2,3,9,-6,-3,-3,-5,-4,5,-10,-2,6,-6,-2,7,-7,-7,-8,2,-3,10,-9,-6,-2,3,-7,-2,4,6,-10,2,-6,10,5,10,6,6,7,-8,-3,10,7,-7,-1,-9,-9,-8,1,-9,-1,6,10,-1,-4,-5,-2,-10,-6,-10,-1,-8,1,5,6,-8,-4,-4,-6,1,-6,10,-3,6,9,-8,4,-1,4,5,-10,6,-7,8,5,-5,8,-8,-8,-2,-10,-7,8,9,4,9,9,7,6,-1,-5], dtype = "uint16")#candidate|1923|(448,)|const|uint16
call_1922 = relay.TupleGetItem(func_1776_call(relay.reshape(const_1923.astype('uint16'), [14, 2, 16]), relay.reshape(const_1923.astype('uint16'), [14, 2, 16]), ), 1)
call_1924 = relay.TupleGetItem(func_1779_call(relay.reshape(const_1923.astype('uint16'), [14, 2, 16]), relay.reshape(const_1923.astype('uint16'), [14, 2, 16]), ), 1)
output = relay.Tuple([call_1894,var_1895,bop_1903,bop_1907,bop_1914,call_1922,const_1923,])
output2 = relay.Tuple([call_1897,var_1895,bop_1903,bop_1910,bop_1914,call_1924,const_1923,])
func_1928 = relay.Function([var_1874,var_1875,var_1891,var_1895,var_1896,var_1913,], output)
mod['func_1928'] = func_1928
mod = relay.transform.InferType()(mod)
var_1929 = relay.var("var_1929", dtype = "float32", shape = (13, 11, 13))#candidate|1929|(13, 11, 13)|var|float32
var_1930 = relay.var("var_1930", dtype = "float32", shape = (13, 11, 13))#candidate|1930|(13, 11, 13)|var|float32
var_1931 = relay.var("var_1931", dtype = "int64", shape = (40,))#candidate|1931|(40,)|var|int64
var_1932 = relay.var("var_1932", dtype = "float64", shape = (208,))#candidate|1932|(208,)|var|float64
var_1933 = relay.var("var_1933", dtype = "int64", shape = (84,))#candidate|1933|(84,)|var|int64
var_1934 = relay.var("var_1934", dtype = "int64", shape = (84,))#candidate|1934|(84,)|var|int64
output = func_1928(var_1929,var_1930,var_1931,var_1932,var_1933,var_1934,)
func_1935 = relay.Function([var_1929,var_1930,var_1931,var_1932,var_1933,var_1934,], output)
mutated_mod['func_1935'] = func_1935
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1820_call = mod.get_global_var('func_1820')
func_1822_call = mutated_mod.get_global_var('func_1822')
call_1956 = relay.TupleGetItem(func_1820_call(), 0)
call_1957 = relay.TupleGetItem(func_1822_call(), 0)
uop_1969 = relay.atanh(call_1956.astype('float32')) # shape=(9,)
uop_1971 = relay.atanh(call_1957.astype('float32')) # shape=(9,)
uop_1976 = relay.log(uop_1969.astype('float32')) # shape=(9,)
uop_1978 = relay.log(uop_1971.astype('float32')) # shape=(9,)
func_671_call = mod.get_global_var('func_671')
func_675_call = mutated_mod.get_global_var('func_675')
var_1980 = relay.var("var_1980", dtype = "uint8", shape = (120,))#candidate|1980|(120,)|var|uint8
call_1979 = relay.TupleGetItem(func_671_call(relay.reshape(var_1980.astype('uint8'), [15, 8]), relay.reshape(var_1980.astype('uint8'), [15, 8]), ), 0)
call_1981 = relay.TupleGetItem(func_675_call(relay.reshape(var_1980.astype('uint8'), [15, 8]), relay.reshape(var_1980.astype('uint8'), [15, 8]), ), 0)
func_1013_call = mod.get_global_var('func_1013')
func_1017_call = mutated_mod.get_global_var('func_1017')
var_1985 = relay.var("var_1985", dtype = "float32", shape = (224,))#candidate|1985|(224,)|var|float32
call_1984 = relay.TupleGetItem(func_1013_call(relay.reshape(var_1985.astype('float32'), [14, 16]), relay.reshape(var_1985.astype('float32'), [14, 16]), ), 2)
call_1986 = relay.TupleGetItem(func_1017_call(relay.reshape(var_1985.astype('float32'), [14, 16]), relay.reshape(var_1985.astype('float32'), [14, 16]), ), 2)
uop_1989 = relay.exp(uop_1976.astype('float32')) # shape=(9,)
uop_1991 = relay.exp(uop_1978.astype('float32')) # shape=(9,)
func_605_call = mod.get_global_var('func_605')
func_608_call = mutated_mod.get_global_var('func_608')
const_2010 = relay.const([-1,6,-1,7,-8,-2,-2,1,7,-5,8,-9,-6,8,2,6,6,7,-7,-9,3,-7,-4,-3,10,-1,-7,1,3,-1,-7,-8,1,10,4,-6,-3,-4,-1,9], dtype = "int64")#candidate|2010|(40,)|const|int64
call_2009 = relay.TupleGetItem(func_605_call(relay.reshape(const_2010.astype('int64'), [5, 8]), relay.reshape(const_2010.astype('int64'), [5, 8]), ), 0)
call_2011 = relay.TupleGetItem(func_608_call(relay.reshape(const_2010.astype('int64'), [5, 8]), relay.reshape(const_2010.astype('int64'), [5, 8]), ), 0)
func_43_call = mod.get_global_var('func_43')
func_46_call = mutated_mod.get_global_var('func_46')
var_2014 = relay.var("var_2014", dtype = "float64", shape = (396,))#candidate|2014|(396,)|var|float64
call_2013 = func_43_call(relay.reshape(var_2014.astype('float64'), [12, 11, 3]))
call_2015 = func_43_call(relay.reshape(var_2014.astype('float64'), [12, 11, 3]))
output = relay.Tuple([call_1979,var_1980,call_1984,var_1985,uop_1989,call_2009,const_2010,call_2013,var_2014,])
output2 = relay.Tuple([call_1981,var_1980,call_1986,var_1985,uop_1991,call_2011,const_2010,call_2015,var_2014,])
func_2031 = relay.Function([var_1980,var_1985,var_2014,], output)
mod['func_2031'] = func_2031
mod = relay.transform.InferType()(mod)
var_2032 = relay.var("var_2032", dtype = "uint8", shape = (120,))#candidate|2032|(120,)|var|uint8
var_2033 = relay.var("var_2033", dtype = "float32", shape = (224,))#candidate|2033|(224,)|var|float32
var_2034 = relay.var("var_2034", dtype = "float64", shape = (396,))#candidate|2034|(396,)|var|float64
output = func_2031(var_2032,var_2033,var_2034,)
func_2035 = relay.Function([var_2032,var_2033,var_2034,], output)
mutated_mod['func_2035'] = func_2035
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2047 = relay.var("var_2047", dtype = "uint8", shape = (7, 1, 5))#candidate|2047|(7, 1, 5)|var|uint8
var_2048 = relay.var("var_2048", dtype = "uint8", shape = (7, 10, 5))#candidate|2048|(7, 10, 5)|var|uint8
bop_2049 = relay.right_shift(var_2047.astype('uint8'), var_2048.astype('uint8')) # shape=(7, 10, 5)
var_2052 = relay.var("var_2052", dtype = "uint8", shape = (7, 10, 5))#candidate|2052|(7, 10, 5)|var|uint8
bop_2053 = relay.equal(bop_2049.astype('bool'), relay.reshape(var_2052.astype('bool'), relay.shape_of(bop_2049))) # shape=(7, 10, 5)
uop_2058 = relay.atan(bop_2053.astype('float32')) # shape=(7, 10, 5)
uop_2061 = relay.rsqrt(uop_2058.astype('float32')) # shape=(7, 10, 5)
uop_2068 = relay.sinh(uop_2061.astype('float64')) # shape=(7, 10, 5)
output = relay.Tuple([uop_2068,])
output2 = relay.Tuple([uop_2068,])
func_2070 = relay.Function([var_2047,var_2048,var_2052,], output)
mod['func_2070'] = func_2070
mod = relay.transform.InferType()(mod)
var_2071 = relay.var("var_2071", dtype = "uint8", shape = (7, 1, 5))#candidate|2071|(7, 1, 5)|var|uint8
var_2072 = relay.var("var_2072", dtype = "uint8", shape = (7, 10, 5))#candidate|2072|(7, 10, 5)|var|uint8
var_2073 = relay.var("var_2073", dtype = "uint8", shape = (7, 10, 5))#candidate|2073|(7, 10, 5)|var|uint8
output = func_2070(var_2071,var_2072,var_2073,)
func_2074 = relay.Function([var_2071,var_2072,var_2073,], output)
mutated_mod['func_2074'] = func_2074
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1104_call = mod.get_global_var('func_1104')
func_1106_call = mutated_mod.get_global_var('func_1106')
call_2103 = relay.TupleGetItem(func_1104_call(), 0)
call_2104 = relay.TupleGetItem(func_1106_call(), 0)
uop_2105 = relay.asin(call_2103.astype('float64')) # shape=(9,)
uop_2107 = relay.asin(call_2104.astype('float64')) # shape=(9,)
output = relay.Tuple([uop_2105,])
output2 = relay.Tuple([uop_2107,])
func_2112 = relay.Function([], output)
mod['func_2112'] = func_2112
mod = relay.transform.InferType()(mod)
mutated_mod['func_2112'] = func_2112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2112_call = mutated_mod.get_global_var('func_2112')
call_2113 = func_2112_call()
output = call_2113
func_2114 = relay.Function([], output)
mutated_mod['func_2114'] = func_2114
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2134 = relay.var("var_2134", dtype = "uint32", shape = ())#candidate|2134|()|var|uint32
const_2135 = relay.const([[3,-5,-4,-1,8,6,-9,2,9,10],[-8,3,-9,7,-3,7,-8,6,-9,-4],[-4,-6,7,4,-8,2,-7,2,-5,8],[-7,1,-7,-9,3,-1,8,-2,5,-10]], dtype = "uint32")#candidate|2135|(4, 10)|const|uint32
bop_2136 = relay.bitwise_and(var_2134.astype('uint32'), const_2135.astype('uint32')) # shape=(4, 10)
bop_2139 = relay.bitwise_or(bop_2136.astype('int8'), var_2134.astype('int8')) # shape=(4, 10)
bop_2146 = relay.subtract(bop_2139.astype('uint32'), var_2134.astype('uint32')) # shape=(4, 10)
bop_2153 = relay.bitwise_xor(bop_2136.astype('uint16'), relay.reshape(bop_2139.astype('uint16'), relay.shape_of(bop_2136))) # shape=(4, 10)
func_1776_call = mod.get_global_var('func_1776')
func_1779_call = mutated_mod.get_global_var('func_1779')
const_2161 = relay.const([7,3,7,-2,-7,-5,10,-9,-1,6,4,1,-4,10,-3,2,-10,-2,7,10,-1,-6,-10,-9,-5,10,10,1,-2,-8,5,-4,4,-3,-4,-6,7,-5,9,5,10,3,7,-5,-6,-5,-10,-9,-5,-7,5,-3,5,7,-1,-10,-8,-2,-1,-5,8,10,-8,-4,1,-3,7,9,5,10,10,6,4,-4,-5,-2,8,-2,-2,1,-10,-10,-2,10,6,-3,9,4,-9,6,7,8,-1,4,-7,-7,-3,5,-7,-3,7,9,7,-9,4,-2,-5,-8,9,10,-9,4,-5,7,5,4,8,-6,-1,-3,2,5,4,-4,5,2,10,-6,-4,-6,7,-1,-7,9,-3,2,8,3,-9,8,2,8,3,-8,10,-7,5,-1,-6,10,-7,-7,10,-8,6,4,5,9,-7,6,-10,-6,3,-9,2,-10,-4,3,-6,4,6,-9,10,-8,4,8,-8,-1,4,2,3,-4,-9,-2,9,-9,4,5,-6,2,-8,6,-5,-7,-10,4,2,-10,-6,-8,-8,9,2,7,6,10,2,-9,4,5,-6,-7,8,9,-2,8,-1,4,-10,3,-2,1,10,10,-6,10,-3,-10,6,4,4,10,8,1,8,-5,7,-4,-6,3,-1,-3,1,5,1,-7,-3,2,-10,-1,-7,9,-2,10,-1,-9,-7,-7,8,-6,-3,-5,10,8,-10,-10,-7,10,-6,-9,-5,-9,3,-1,-8,-1,1,-5,-3,3,-6,-8,-4,4,9,8,2,-6,-1,-7,5,-10,-3,-9,10,8,7,-8,-6,-4,4,9,-7,-4,-4,-9,-10,-7,-4,9,-10,-9,-5,-1,-7,-6,-5,8,1,-4,4,6,-2,7,1,1,5,10,5,2,6,-5,-4,5,-7,-10,4,-7,9,2,1,1,3,7,3,-4,-1,10,-3,1,-5,3,9,6,3,5,-3,-2,-8,-6,10,9,-8,7,7,-1,10,-4,3,4,9,-2,8,1,-2,-8,-9,-4,-10,-8,8,1,-5,-5,-2,6,10,6,-1,5,-5,6,2,3,-2,8,2,7,4,-8,3,-10,2,-1,4,-6,1,-3,3,-4,8,-4,3,10,3,4,3,-9,9,-10,5,1,10,-8,1,8,6,-2,3,-6,3,2,-5,3,-10,8,2,3,7,-7,-5,-10,6,2,5,8,2,-5], dtype = "uint16")#candidate|2161|(448,)|const|uint16
call_2160 = relay.TupleGetItem(func_1776_call(relay.reshape(const_2161.astype('uint16'), [14, 2, 16]), relay.reshape(const_2161.astype('uint16'), [14, 2, 16]), ), 1)
call_2162 = relay.TupleGetItem(func_1779_call(relay.reshape(const_2161.astype('uint16'), [14, 2, 16]), relay.reshape(const_2161.astype('uint16'), [14, 2, 16]), ), 1)
output = relay.Tuple([bop_2146,bop_2153,call_2160,const_2161,])
output2 = relay.Tuple([bop_2146,bop_2153,call_2162,const_2161,])
func_2165 = relay.Function([var_2134,], output)
mod['func_2165'] = func_2165
mod = relay.transform.InferType()(mod)
mutated_mod['func_2165'] = func_2165
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2166 = relay.var("var_2166", dtype = "uint32", shape = ())#candidate|2166|()|var|uint32
func_2165_call = mutated_mod.get_global_var('func_2165')
call_2167 = func_2165_call(var_2166)
output = call_2167
func_2168 = relay.Function([var_2166], output)
mutated_mod['func_2168'] = func_2168
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2215 = relay.var("var_2215", dtype = "float32", shape = (13, 12, 16))#candidate|2215|(13, 12, 16)|var|float32
uop_2216 = relay.cosh(var_2215.astype('float32')) # shape=(13, 12, 16)
uop_2221 = relay.asinh(uop_2216.astype('float32')) # shape=(13, 12, 16)
uop_2223 = relay.atan(uop_2216.astype('float64')) # shape=(13, 12, 16)
bop_2226 = relay.bitwise_or(var_2215.astype('uint8'), relay.reshape(uop_2223.astype('uint8'), relay.shape_of(var_2215))) # shape=(13, 12, 16)
var_2233 = relay.var("var_2233", dtype = "float32", shape = (13, 12, 16))#candidate|2233|(13, 12, 16)|var|float32
bop_2234 = relay.less_equal(uop_2216.astype('bool'), relay.reshape(var_2233.astype('bool'), relay.shape_of(uop_2216))) # shape=(13, 12, 16)
output = relay.Tuple([uop_2221,bop_2226,bop_2234,])
output2 = relay.Tuple([uop_2221,bop_2226,bop_2234,])
func_2237 = relay.Function([var_2215,var_2233,], output)
mod['func_2237'] = func_2237
mod = relay.transform.InferType()(mod)
var_2238 = relay.var("var_2238", dtype = "float32", shape = (13, 12, 16))#candidate|2238|(13, 12, 16)|var|float32
var_2239 = relay.var("var_2239", dtype = "float32", shape = (13, 12, 16))#candidate|2239|(13, 12, 16)|var|float32
output = func_2237(var_2238,var_2239,)
func_2240 = relay.Function([var_2238,var_2239,], output)
mutated_mod['func_2240'] = func_2240
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1788_call = mod.get_global_var('func_1788')
func_1790_call = mutated_mod.get_global_var('func_1790')
call_2254 = relay.TupleGetItem(func_1788_call(), 0)
call_2255 = relay.TupleGetItem(func_1790_call(), 0)
func_120_call = mod.get_global_var('func_120')
func_125_call = mutated_mod.get_global_var('func_125')
var_2285 = relay.var("var_2285", dtype = "float32", shape = (88, 2))#candidate|2285|(88, 2)|var|float32
const_2286 = relay.const([8.136607,5.371601,-3.556984,2.712940,9.443333,6.500517,0.991109,8.894006,-0.679056,6.293501,-2.971978,-3.474682,-7.186486,-8.840608,0.126177,9.574588,-2.137156,3.396912,3.562342,-3.395202,-1.155002,-0.276778,-4.540675,6.199384,0.300104,1.580458,1.176688,-0.541801,7.978793,1.997074,-3.165514,3.298935,4.226482,4.685600,5.117503,4.776858,7.068407,3.404546,0.325300,-0.243702,1.781491,-8.660058,6.765311,4.241467,4.004746,9.936224,9.969695,1.482474,-5.556991,-7.228160,-7.437944,0.509643,8.637675,7.491523,-4.647597,0.729108,3.893487,-0.838783,6.113518,7.332794,-8.225825,-7.730618,6.281098,-2.791637,5.156101,-7.018564,8.521313,7.186088,-9.940462,7.461915,1.559577,3.302551,1.045429,3.393591,2.551485,4.802532,-0.189792,3.902104,1.991029,6.062250,-3.022380,0.824319,1.102571,-0.712353,7.201718,-6.636132,0.230537,-5.009660,7.551414,0.591840,-1.257285,-7.608370,-6.833460,9.005236,-9.830932,-2.969983,-8.477246,-7.744219,0.806022,1.387011,-9.973449,6.986369,2.864018,-2.399014,2.489977,7.313329,0.370630,-1.239217,-0.925658,1.628057,-3.326282,9.002901,3.186497,2.495063,0.302045,-1.986678,-6.963810,2.632395,0.266631,1.105745,0.532781,-9.240414,-2.822026,-3.744734,-2.637577,5.805777,-2.189295,0.007245,-5.571255,-2.698409,-3.209035,-5.718468,-1.848566,-4.585617,2.843815,-0.750836,5.582953,0.786364,-9.259118,-8.090715,-8.113041,8.716088,-0.743111,-2.834891,6.123395,-1.922795,0.737243,8.790684,-7.452887,3.835818,6.627851,-3.090128,6.406147,-0.034915,-5.737433,-2.677979,5.557602,2.533140,9.201022,-8.882175,-7.209646,-4.373971,3.770193,5.211343,0.032318,-5.921845,-4.871666,8.644389,-8.730575,8.221907,-2.665103,7.616639,-4.574681,-9.440670,7.493024,-4.027946,4.361151,4.802852,-9.358783,2.579920,-3.835838,-6.224195,-9.077483,-6.480399,-1.775492,1.988575,0.471625,-6.810679,3.810271,0.282476,8.187046,-8.668132,-9.713391,-5.225931,-0.890856,2.509326,5.270404,-2.609389,5.039162,-7.193585,-9.680265,3.570005,4.207114,3.099193,-1.167949,8.530820,0.671930,-9.802387,8.387103,-2.821641,-4.630676,-0.875783,-3.877789,-0.918459,8.881190,9.133669,-6.262527,-7.931074,-8.105745,5.285353,-4.690757,-3.783679,-1.604509,-5.375759,1.417414,-7.648932,-1.657045,4.250792,7.629949,-7.129397,3.504158,-1.386111,-5.070224,9.237330,6.552093,2.526793,2.772590,4.082005,3.255874,7.032521,-7.803889,-4.582413,0.187200,5.314150,2.380052,5.147366,0.366194,6.821978,-3.817564,-9.656373,2.407605,-5.489878,-1.806305,-9.799715,8.916256,-2.203249,7.931033,-6.526658,7.083777,8.257671,3.301557,9.218657,8.065697,3.870199,6.239564,5.497410,6.886215,9.549081,0.565369,9.320330,7.305435,-3.953112,6.328022,2.169270,0.929938,7.166121,-8.819621,5.900029,3.171995,5.868652,5.977135,3.414097,-5.327507,-8.964009,2.654508,-9.950567,5.588438,9.528187,3.198463,0.205163,-5.746477,-2.346068,1.003022,-8.667825,-1.099008,1.166025,-0.844288,-4.376867,8.407364,-6.897235,3.404637,-9.606343,5.975436,0.139617,-6.954320,8.493466,9.372657,9.881604,-1.078283,-7.213329,-0.256038,-0.287884,-4.697937,0.114093,6.610950,-1.209829,7.245213,9.486134,4.544433,3.014344,-4.606358,-8.067508,-1.034246,-6.175662,8.221703,2.104332,1.777393,-7.662992,2.293830,8.248179,6.809467,4.708322,-8.118210,8.070759,2.018739,-4.723044,-7.500299,9.830370,-6.797926,9.015626,-0.562216,1.966519,-8.158297,-4.369725,-0.156886,-6.124790,8.610986,-6.326226,-7.984923,0.898817,-5.897789,4.322662,-6.358296,-9.922104,7.377511,-1.762714,-4.879344,4.743410,2.498687,-8.544594,5.110908,8.223987,-8.573083,5.683318,-5.132606,-3.646684,-2.979488,9.050971,8.010363,4.239662,1.150466,-5.495208,-4.855287,-2.374828,9.259449,9.315264,0.468052,-2.612816,-3.801622,-2.330220,-9.978376,8.676873,6.465641,-6.177825,-9.752697,2.399301,1.963114,-0.048847,1.330427,-7.495108,8.528298,3.421749,-9.016811,3.681610,8.476155,4.354710], dtype = "float64")#candidate|2286|(396,)|const|float64
call_2284 = relay.TupleGetItem(func_120_call(relay.reshape(var_2285.astype('float32'), [11, 16]), relay.reshape(const_2286.astype('float64'), [396,]), relay.reshape(var_2285.astype('bool'), [11, 16]), ), 3)
call_2287 = relay.TupleGetItem(func_125_call(relay.reshape(var_2285.astype('float32'), [11, 16]), relay.reshape(const_2286.astype('float64'), [396,]), relay.reshape(var_2285.astype('bool'), [11, 16]), ), 3)
output = relay.Tuple([call_2254,call_2284,var_2285,const_2286,])
output2 = relay.Tuple([call_2255,call_2287,var_2285,const_2286,])
func_2294 = relay.Function([var_2285,], output)
mod['func_2294'] = func_2294
mod = relay.transform.InferType()(mod)
var_2295 = relay.var("var_2295", dtype = "float32", shape = (88, 2))#candidate|2295|(88, 2)|var|float32
output = func_2294(var_2295)
func_2296 = relay.Function([var_2295], output)
mutated_mod['func_2296'] = func_2296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1788_call = mod.get_global_var('func_1788')
func_1790_call = mutated_mod.get_global_var('func_1790')
call_2300 = relay.TupleGetItem(func_1788_call(), 0)
call_2301 = relay.TupleGetItem(func_1790_call(), 0)
func_1371_call = mod.get_global_var('func_1371')
func_1374_call = mutated_mod.get_global_var('func_1374')
const_2307 = relay.const([9.368201,6.634507,-0.327280,-1.302641,-6.080292,2.204890,-0.941210,-2.005591,-6.012305,-0.795453,-9.006508,6.099761,1.474520,-4.300317,-9.138224,-9.155128,5.525325,2.769536,-7.539147,4.813958,-8.087784,-2.355788,1.711020,2.750741,-7.899030,-6.583722,-9.354459,4.879953,2.545975,-5.924950,4.296578,5.730716,-1.034927,-6.064545,-1.005303,3.688342,-0.360787,5.029917,-7.974701,-9.780028,-2.111551,-6.584612,-6.031882,-5.990126,9.704273,5.105897,-7.097102,5.391101,-1.703911,9.976220,-8.012305,9.650344,-9.955064,-1.651265,1.550494,-8.156179,-7.684198,-8.315787,-6.257119,-7.382897,1.935798,-5.501597,-0.512826,-3.825812,-8.719069,9.454231,9.749086,3.125942,5.178584,-0.118344,-4.979624,7.527700,1.021474,-0.005618,-3.838652,3.866333,-5.096396,4.028027,-6.202699,8.056889,8.724203,7.225412,0.808779,0.182972,-7.522542,-9.834968,-0.137478,8.965596,9.880011,2.213217,-5.579879,-3.735916,-0.910918,7.109167,4.375654,9.824127,1.452364,2.250872,-0.558231,-9.957453,5.139009,8.855137,-7.187858,0.206106,-8.853149,7.344010,-0.273346,-6.648134,-5.407177,8.491860,-1.399715,-3.276347,2.612041,2.818079,-8.999539,-5.038523,-2.126779,7.080178,3.147385,-7.773956,1.987827,-8.181938,2.742368,9.046272,6.331530,-6.011417,6.691433,6.076294,-2.642897,-3.807664,-8.263845,-7.299038,3.003911,7.860457,5.292845,-0.325755,-1.084603,-3.645337,8.090972,3.947950,-8.668337,0.129917,-9.327245,-1.930763,4.354246,-7.109817,3.238928,-6.338605,-1.677640,4.703484,7.638714,5.015001,9.476916,-4.052939,1.379356,4.177750,1.631124,5.601900,6.008387,-7.811246,8.256932,9.676310,-6.447579,3.832676,3.088870,-6.344069,-4.329309,-2.133389,0.732926,4.218736,-7.661687,-3.075216,7.863165,-7.999616,4.982437,5.324683,5.400599,9.046960,-3.680055,-2.369276,-9.997050,-9.699133,-1.657410,-1.532410,1.279172,-4.982051,-9.428211,9.780607,0.545725,-9.583491,9.979455,3.105014,-8.968299,-8.650519,4.125761,8.340093,5.821200,-0.081115,-0.930775,3.863037,-6.469900,-2.012397,-4.783130,-5.838542,1.114595,-8.375417,-5.840280,1.299255,-8.836555,7.366857,-9.395975,8.423355,4.051667,-0.229491,-9.221572,4.701956,8.702932,0.955087,-5.794188,1.200873,2.075098,-0.879158,8.162303,-7.684837,3.840453,5.399598,-8.845127,0.082105,3.476745,-0.222351,3.127116,-2.070847,6.408796,-5.608816,-6.192388,4.834643,2.048176,8.513610,1.195524,-4.927962,-2.726726,-4.762603,7.689907,-3.845766,7.932376,-8.463646,-9.062593,-6.150120,8.059973,8.443689,-7.923751,2.789509,-7.798791,0.291006,-7.308470,-9.716497,4.519135,-6.419889,-9.281139,1.879479,7.234707,-5.558107,4.249983,1.167751,3.527782,-5.053059,9.482223,3.027792,-9.043149,6.528797,0.940832,0.386571,-5.706247,7.746390,-0.085625,2.010313,-7.571703,-0.223411,-1.861022,-9.899123,-9.386087,1.319233,-8.555950,-9.045954,8.630993,-3.350275,3.026147,-5.258791,1.171812,9.066091,-1.124559,5.723330,-7.336538,-9.561656,5.478511,5.267795,8.456007,3.903833,2.630977,3.135526,5.663308,2.586964,5.318790,-7.226077,0.663400,7.853171,-8.174961,8.216484,-3.595848,4.683060,-5.797053,1.530223,-6.274191,-6.085693,-7.664054,-5.094784,5.844718,5.429102,9.284018,5.530554,4.529928,5.945825,6.830783,-6.570777,-5.240042,2.150940,-1.878680,9.731896,1.024049,9.321788,2.195906,7.343129,7.239503,5.453497,-7.795493,-4.280024,9.228636,-7.282967,-9.831825,-1.410195,-7.907945,0.218354,2.530886,6.504515,-4.979816,-1.208466,2.623286,-4.887261,-8.573449,3.465981,-1.388187,-9.478747,5.447895,-9.735873,-4.235392,7.510229,-9.528018,7.647117,0.565088,-5.422413,5.181831,1.693642,-2.760691,-6.557732,0.550598,-3.450075,4.121715,-9.535401,9.299671,-9.027405,9.503248,-2.031283,-1.284744,9.495913,3.463403,-4.879941,9.844680,6.919124,8.922187,-8.472965,0.028202,3.634040,-8.037815,-3.348236,-5.864320,7.455951,-3.936663,-0.252834,3.364817,-3.615438,4.248187,-6.071088,-9.993582,7.403437,7.656015,-0.430789,-8.034265,9.243368,8.433120,-5.606166,-5.777039,-4.639398,8.449546,1.021515,-7.376070,2.361107,-4.648146,-2.229847,6.094338,3.541397,-5.496060,-8.437412,9.514291,9.080165,8.487904,-2.557096,0.386799,-1.510893,6.444398,7.845086,3.982186,-8.889897,-7.841701,-8.843977,-4.745546,-7.029093,5.422144,6.309549,-4.266232,-5.626403,-0.361871,6.991066,3.323382,-5.964719,-0.210469,-9.580011,1.428504,8.211061,-3.570658,0.239769,7.618831,6.295416,-6.761512,0.390002,8.197557,-4.010860,1.417339,0.430152,5.585866,1.315265,7.399213,8.694876,-1.834568,2.054060,-7.110248,5.256734,-6.990174,4.963995,7.988075,-3.446133,-8.630975,-1.588095,-5.628298,-7.201650,-7.754346,3.409617,0.793854,-9.727805,-9.814891,-6.033017,-1.267454,-7.085581,-5.541700,-4.120936,7.913964,-5.181633,2.862070,8.392697,-4.295025,-9.594295,8.403829,7.683129,-4.809285,2.608816,7.730045,-2.541152,7.266883,-8.954852,-4.017023,-7.625633,7.945276,8.151285,6.134507,4.002762,-0.657678,-3.158198,0.121322,-0.530494,9.189498,-3.188733,-5.541310,1.673265,-3.557639,9.723116,-9.239586,-4.699278,0.502052,-3.538778,-5.017983,-1.915694,0.356985,-4.500102,-5.789717,9.274341,-9.692214,-7.536582,-6.450603,3.758553,-0.827820,2.625671,-8.139817,-4.413977,9.109957,-4.629540,-9.627953,-1.563374,-7.212761,8.969443,2.028947,-7.368774,-7.482143,-4.586568,-8.528049,7.875309,9.567700,1.342825,-8.767048,5.580182,3.601031,7.600019,-9.275661,1.296907,7.102206,-0.077054,4.940680,-5.413641,2.069034,-1.548988,-4.553258,-3.648292,-4.062458,5.453538,-4.991502,-5.863829,0.921050,3.026982,0.024659,-5.895067,0.781874,-6.967594,8.836193,0.020242,5.192932,8.690095,2.064642,7.027869,0.187448,1.326194,9.573226,9.966191,0.227361,8.929810,-8.420737,7.263628,-1.586867,-5.333180,1.214173,-5.280217,-6.249021,-2.371077,-4.575258,1.066039,5.793944,0.766020,5.067386,1.270423,8.784952,5.070663,-8.268407,-0.085440,-8.852675,-2.756352,-6.429978,7.037473,-4.519576,-1.109519,2.341579,9.334004,-0.261781,-2.994484,0.993086,3.791197,-2.696771,-7.729315,3.853593,7.317579,-6.582924,0.664605,-8.250902,7.638504,7.175629,4.806391,3.477033,0.148974,1.387448,8.301815,9.899199,-0.036989,-2.734814,-4.523132,7.313999,5.453379,1.791567,-0.881579,4.962285,1.974164,8.157319,-7.057475,3.931693,2.408427,9.335165,1.404779,2.617358,-8.780005,7.477510,9.614811,-4.550498,-5.199629,-3.647231,2.504489,-7.480496,-0.548170,-1.723363,-1.433705,-8.148034,-9.984559,7.534036,-9.098019,1.361950,-2.039598,4.224411,2.262148,-6.896343,3.484764,-9.902612,4.194299,9.521020,0.585959,-8.817858,8.302417,9.505210,-1.487270,-1.742282,5.690959,9.231398,-9.562431,0.824915,-6.659465,0.809767,-8.293925,-3.525978,-0.997398,1.400404,3.715329,6.511849,-9.686677,8.608349,4.165195,2.126716,0.544552,-9.151158,1.774738,-9.524422,-8.411386,-1.669083,6.880005,-7.385511,-1.706618,3.089269,9.891568,2.930938,1.926084,-1.788451,-8.135528,1.026790,-0.413368,4.674625,-5.527020,9.907966,6.843989,6.118758,-5.833665,-9.512329,-5.862003,1.224578,-7.962905,6.449563,5.012994,3.299054,-3.537454,1.895853,-7.564913,-7.356145,-2.056197,4.752977,1.022768,6.342109,-7.477201,3.089283,3.437093,-0.290953,6.129886,-7.500195,5.685139,-1.077724,-4.589676,-2.524852,-5.004066,1.881716,-6.054685,-8.287289,-2.247910,-4.692961,0.639279,6.912963,-7.768428,-0.096762,8.014749,-2.889082,-8.252106,-3.711139,-0.847695,-4.237361,-8.134074,-2.441728,-2.836952,-7.559187,-3.539975,-4.961407,-0.732320,-8.710706,3.835131,-0.965300,6.178856,-2.508106,4.132343,6.363051,1.187748,-3.156636,8.233577,0.853099,3.883608,-1.557348,-7.918416,8.767604,-2.852121,2.101388,2.223520,0.161402,-8.098085,-5.597934,-5.484666,4.458216,0.203609,1.709833,-7.367104,3.651522,1.158219,7.851117,-9.891050,-4.110741,0.844286,-9.949651,-3.537599,6.652920,2.718841,-6.796595,2.343673,-7.856192,-9.886327,-7.826207,-8.507798,-1.396595,3.472129,9.811534,0.786687,2.191708,0.139083,2.978095,0.217844,-6.670153,-8.625565,-8.093600,-8.788849,0.923119,4.120750,-3.054944,5.067413,6.390948,-1.995861,-4.221454,-8.048243,-4.173173,3.557491,2.860784,3.066437,-2.546341,0.975155,4.004410,1.113535,-1.527938,-3.436259,-3.196630,1.154237,9.131953,-3.278562,0.001799,3.046197,-3.466911,9.427260,3.208248,4.382524,0.389100,-9.608657,-0.742634,8.537835,-4.018952,0.758071,8.842948,-6.431023,1.595450,-6.281446,-2.020464,-2.077924,-2.022855,-3.632659,-9.107065,6.257219,-2.763656,3.770391,9.950445,3.627351,-3.357326,-7.977750,-8.713514,-0.856784,3.847165,-3.411486,-4.145154,-5.988015,8.193253,-6.760758,-3.049297,7.709021,-2.996509,-7.267446,8.779335,6.016924,-1.745600,4.810305,1.545427,-8.829332,-5.160046,-9.781799,-1.625023,3.061606,1.100681,9.152592,-1.924225,8.909648,6.417032,-9.813635,9.546241,3.694748,-3.622248,-4.764241,-9.109258,-1.324021,-2.204097,-0.748319,-8.836315,-4.359099,9.634261,1.297562,-8.627698,-0.719669,-3.657588,-7.543058,8.134124,-5.731486,-6.827826,6.678741,5.844091,3.462531,-5.231311,-0.718006,9.913561,-1.314475,4.927069,-3.672406,-6.555296,4.753898,-1.676447,7.743757,3.719030,5.456420,-9.933808,2.718565,-6.767141,4.193372,-7.270506,7.237126,-8.984393,-5.324987,-8.726712,8.089773,-5.159644,9.788876,-2.977353,-1.011465,-8.048137,5.312927,-3.676328,8.056485,1.662354,0.592948,-7.605693,-5.581485,-6.267483,-2.572152,7.904884,-4.302223,1.414703,-7.777961,-8.817843,2.319821,-1.516976,7.142409,4.234295,-1.032708,-7.182358,-9.638026,-0.600318,5.557176,-8.417483,6.394221,-1.356512,1.584402,-1.124622,5.500849,-1.547850,3.206606,-6.815309,1.322160,7.045783,-4.935662,1.502329,2.657443,1.084380,-4.975785,-8.039243,-6.404294,3.523078,-4.442518,9.919549,-5.068941,7.449256,7.102593,9.609404,9.280367,-1.063555,-0.582243,5.390221,5.994868,-9.768418,-0.839898,-3.545330,9.682735,-0.537765,2.210728], dtype = "float64")#candidate|2307|(990,)|const|float64
call_2306 = relay.TupleGetItem(func_1371_call(relay.reshape(const_2307.astype('float64'), [990,])), 2)
call_2308 = relay.TupleGetItem(func_1374_call(relay.reshape(const_2307.astype('float64'), [990,])), 2)
func_1776_call = mod.get_global_var('func_1776')
func_1779_call = mutated_mod.get_global_var('func_1779')
const_2310 = relay.const([-8,-9,-3,-9,9,-6,-3,8,9,-3,-5,5,1,10,-9,-7,2,-7,-7,1,-2,-8,-2,-8,2,-5,2,5,-1,-5,-2,7,-10,-8,-1,-6,-7,-5,-9,-8,-4,-8,-5,2,-9,-6,1,4,8,-2,-2,1,1,8,8,-10,9,3,-2,9,1,-2,-1,-6,10,-9,6,-2,7,-4,-6,-9,4,-10,-6,8,8,-10,8,-1,5,3,-1,6,-6,3,7,-8,6,7,-9,-9,-5,-8,-6,1,9,3,-10,-8,-3,8,-2,3,4,-10,-5,4,8,4,10,-7,1,9,-3,8,7,-6,-4,-7,-8,-3,-5,-4,-8,-1,6,-7,10,-10,4,-6,6,10,-10,-8,3,3,10,-3,8,7,1,-4,-4,3,4,9,-3,10,5,4,-1,5,6,10,-1,-1,4,3,-10,6,-8,-4,1,4,1,-3,7,-4,8,-1,2,3,-7,-4,3,-1,-2,-1,6,-10,-5,9,-2,7,8,3,9,-6,2,-3,9,-5,-6,5,-2,-1,7,-9,5,-1,3,5,-9,10,2,-4,7,3,8,7,10,-8,-10,-7,4,-9,1,-1,-6,2,4,10,-7,-7,8,6,-2,6,1,6,-1,-2,-9,-5,-4,5,-2,9,6,6,-10,6,5,5,-7,-1,7,3,8,3,4,10,-2,7,7,-4,4,-10,-1,-6,7,7,5,-2,-9,-3,-2,10,5,4,9,-8,5,5,-4,-4,-10,-7,-2,-8,-3,-3,5,10,1,2,1,4,-10,4,9,5,1,-6,10,-4,-6,-1,-2,-1,-7,2,2,6,4,6,-9,7,-4,5,-7,-10,-7,4,-3,10,-9,-8,8,-5,-5,10,-5,-4,-9,4,9,1,-6,-5,1,9,-10,10,-2,-2,7,10,8,10,4,-5,1,-9,10,-6,-9,-10,-3,-7,-9,-3,-1,-8,-9,-8,6,6,-9,2,6,10,-4,-4,-3,5,2,-8,-3,3,7,-4,5,8,-2,-3,10,-8,6,-1,-5,-2,-4,-1,9,8,-7,8,-10,-6,-9,-5,-6,1,-6,-4,-1,-9,9,2,4,-5,-2,-3,-9,7,1,7,6,9,4,-3,2,-10,2,10,-3,6,-7,-10,-9,-6,-10,6,-1,-7,10,10,4,4,3,9,-6,1,-6,-10,7,-3,-9,2,8,6,3,-2,5,10], dtype = "uint16")#candidate|2310|(448,)|const|uint16
call_2309 = relay.TupleGetItem(func_1776_call(relay.reshape(const_2310.astype('uint16'), [14, 2, 16]), relay.reshape(const_2310.astype('uint16'), [14, 2, 16]), ), 2)
call_2311 = relay.TupleGetItem(func_1779_call(relay.reshape(const_2310.astype('uint16'), [14, 2, 16]), relay.reshape(const_2310.astype('uint16'), [14, 2, 16]), ), 2)
uop_2314 = relay.asinh(const_2310.astype('float32')) # shape=(448,)
bop_2318 = relay.left_shift(uop_2314.astype('int16'), call_2309.astype('int16')) # shape=(1274, 448)
bop_2321 = relay.left_shift(uop_2314.astype('int16'), call_2311.astype('int16')) # shape=(1274, 448)
output = relay.Tuple([call_2300,call_2306,const_2307,bop_2318,])
output2 = relay.Tuple([call_2301,call_2308,const_2307,bop_2321,])
func_2322 = relay.Function([], output)
mod['func_2322'] = func_2322
mod = relay.transform.InferType()(mod)
mutated_mod['func_2322'] = func_2322
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2322_call = mutated_mod.get_global_var('func_2322')
call_2323 = func_2322_call()
output = call_2323
func_2324 = relay.Function([], output)
mutated_mod['func_2324'] = func_2324
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2112_call = mod.get_global_var('func_2112')
func_2114_call = mutated_mod.get_global_var('func_2114')
call_2393 = relay.TupleGetItem(func_2112_call(), 0)
call_2394 = relay.TupleGetItem(func_2114_call(), 0)
output = relay.Tuple([call_2393,])
output2 = relay.Tuple([call_2394,])
func_2406 = relay.Function([], output)
mod['func_2406'] = func_2406
mod = relay.transform.InferType()(mod)
output = func_2406()
func_2407 = relay.Function([], output)
mutated_mod['func_2407'] = func_2407
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1104_call = mod.get_global_var('func_1104')
func_1106_call = mutated_mod.get_global_var('func_1106')
call_2408 = relay.TupleGetItem(func_1104_call(), 0)
call_2409 = relay.TupleGetItem(func_1106_call(), 0)
func_2237_call = mod.get_global_var('func_2237')
func_2240_call = mutated_mod.get_global_var('func_2240')
const_2430 = relay.const([6.677612,3.196759,-9.543982,-6.817863,-4.988664,-0.880600,-0.335251,0.378766,4.619506,-2.764792,8.994894,0.621226,-8.538430,-1.970026,8.779796,8.686811,9.354142,-3.104925,0.533379,-0.254382,-3.160060,-1.817894,-7.223254,-4.412096,9.184866,-6.169261,1.703475,7.812693,-3.126418,2.156722,8.277121,4.601915,-8.534030,-1.448083,-1.758553,4.749203,6.931386,-5.881947,-9.595822,1.781203,9.841359,-7.972010,1.042734,3.906623,7.992015,3.235389,9.532001,8.497897,6.827920,-8.070835,-0.544581,-5.937078,3.516595,7.578355,4.806449,3.010781,-5.757133,2.923577,2.163129,-5.869257,-0.395683,0.892304,-5.949107,4.097312,2.740071,0.167763,4.524794,8.635381,-1.419133,-7.312074,-9.587268,5.381677,4.320018,-1.341183,7.451488,-8.075542,2.620668,1.217514,-8.159129,6.211459,-6.903658,-3.731129,-5.444464,4.377344,-7.276743,-6.688172,1.893487,-4.672227,3.064792,-7.703465,6.232525,-3.840985,-6.841301,-0.955607,-2.107607,-7.691573,-8.991024,-0.347453,2.887163,-0.971175,-9.830894,-5.423433,-7.651020,-6.327184,8.208851,-2.556841,1.226571,7.062894,-3.791652,8.766181,7.872856,-1.173942,-2.750607,-0.862609,-2.052424,5.000328,-6.695421,-3.669338,-8.159940,-9.761928,2.966655,-0.263580,1.204632,2.044458,6.304182,-6.021790,-6.965171,7.242642,0.487975,-8.705820,-5.937583,-7.300752,6.681540,7.933992,-7.300556,-5.912226,-5.441455,-4.386921,-8.330014,0.436182,-6.037518,4.600247,-9.206025,2.179285,-2.656132,0.921087,-0.746351,0.915927,2.907889,4.284016,-7.585663,6.582056,1.402094,-1.621033,1.955335,4.002950,2.155233,7.414247,3.340438,-8.115034,-5.868151,-1.471824,9.335057,6.634997,-0.906614,-0.815814,-0.572604,0.260853,-9.674469,5.258336,-2.389751,8.368858,9.103355,0.520501,-8.688347,1.150368,-3.410098,7.376514,4.971844,-6.908196,3.409484,8.238092,-9.326760,0.480804,-5.659863,0.510256,-6.876834,6.130525,0.958446,-7.841252,-3.436458,-4.563973,-2.996901,-8.711551,-2.510601,7.327245,-5.976981,2.926707,-0.762416,8.588879,-4.613722,3.251995,4.191030,-4.602546,1.265385,-7.272737,-6.000154,-1.350109,-5.568834,5.149042,0.685661,7.452971,9.055882,5.370132,5.926586,-3.743078,4.783411,-7.253177,-7.609644,4.798068,-4.399008,0.761535,-6.665830,9.665247,8.443049,-7.820699,0.537759,-4.214796,-8.897464,-4.507081,-8.399133,2.082895,-7.110283,-7.275668,0.027911,7.247888,-5.064427,-0.732779,-4.774483,8.138195,-1.468321,8.078620,6.973440,-0.314480,9.640364,-4.144130,-9.980433,0.110274,6.185906,5.288171,2.384150,-7.084257,-8.728256,-9.359725,-6.815060,-7.411262,9.390257,1.172080,1.362540,9.923885,-1.060232,-5.710016,0.096019,-8.777580,5.091441,6.255966,-0.942166,-9.563306,8.753545,0.572935,7.088930,-2.934182,8.664820,6.636346,-5.180962,3.964118,-1.794614,1.469284,4.719183,8.254737,7.322163,9.071816,-0.566295,-3.070178,8.076036,-9.241821,3.775514,0.580518,-2.095473,3.934034,7.284434,5.134293,-4.110545,-5.182644,-6.275562,5.743397,-6.111547,4.249388,-3.997200,-2.652068,-4.153167,-6.753892,-1.242754,-5.438211,1.907332,8.586513,7.212961,-4.533360,1.501896,6.552245,-5.283894,7.483390,-2.599469,-2.787012,7.638112,-7.982607,6.327453,9.822836,-0.677410,-1.336842,-9.714693,4.837260,-8.130077,1.850765,-1.731719,-6.595949,8.496676,6.435459,-4.652264,6.123087,9.887544,9.090766,-0.912543,-3.336924,7.322872,-8.203215,-8.744897,8.333491,-2.870484,-2.848428,2.686734,4.607432,-5.308486,-9.916576,-5.494839,-7.701980,3.964114,-5.670404,6.215197,4.338123,1.516677,-1.494379,1.255093,9.709506,-3.566015,-3.065300,-3.128076,1.869929,-6.058660,4.892820,4.085686,-2.202522,-1.897138,-0.211950,5.948233,-7.516461,-7.553660,-3.061778,-5.243258,7.203704,1.262429,-4.164250,6.986591,8.055379,-0.653391,1.899502,-6.330275,-8.492234,-9.343787,-2.954118,-4.493252,8.028974,1.341239,-1.894206,2.398460,4.869974,8.793338,-1.508920,0.688741,6.866806,-8.812916,6.045034,-2.878240,8.306359,-6.714126,6.000151,-4.203235,5.718123,-7.525724,7.252882,1.952821,2.827897,6.816615,-1.905133,4.158369,-0.163153,-0.184095,-0.262345,5.100264,6.148819,-9.025711,8.537693,9.561654,-3.847395,-2.567996,7.553245,-5.225667,2.984322,-8.137229,-5.057802,2.193005,-1.966903,-7.233528,-8.604286,-1.342954,-2.677139,-7.826186,-0.267158,-4.999448,-8.219120,-7.464109,8.712445,-9.337968,-3.377168,-5.824473,-3.582254,6.807207,2.575099,0.805271,-6.752030,8.890853,-0.175065,-8.979479,-6.681466,-3.336653,6.304538,-4.545072,7.668954,6.898799,-8.942076,8.127276,5.132880,4.596138,-0.666618,4.378657,-9.560659,5.937591,-4.719254,8.322730,0.099336,3.891320,2.378268,6.111954,-8.622909,-9.957462,-7.222079,3.067428,9.597406,-8.435811,-0.508877,-0.409737,-7.806918,5.413738,9.137258,4.910972,-6.953625,6.806076,5.823836,1.819087,-7.853525,-0.920801,1.414052,-6.853427,-7.394677,-4.175777,-7.393421,3.133039,5.480161,-6.764255,-9.770934,5.815550,-9.532176,-0.265709,6.662467,-4.932527,3.168330,-5.433666,-8.336177,3.252506,8.055352,2.535939,-0.614020,-4.260651,-0.518393,-1.848552,0.967058,4.733035,7.414802,9.384721,5.862023,-5.173343,-4.387245,9.686216,5.800509,3.035907,4.847010,4.751143,0.590299,1.697223,-6.869170,-9.869045,7.287131,3.389132,2.896365,4.516954,-8.511663,-5.673897,-7.987524,-3.672765,-8.240551,-9.319157,-5.373286,-6.414003,7.630070,2.743162,8.984252,8.399801,-9.248653,3.325763,6.437976,-6.686700,-3.831266,-8.288965,0.934962,3.035962,-1.869212,8.485463,3.248298,7.705964,5.478273,-4.323109,-5.299625,2.971975,-2.690125,6.614974,9.259792,-8.289718,-0.646894,-9.150298,1.128530,6.042248,1.447417,-6.811235,-4.201961,7.463395,5.142259,0.672224,-7.607705,-2.164643,5.562523,-5.893106,1.094120,8.520961,-0.811076,3.596011,4.949217,5.371729,9.226711,2.404137,9.884585,8.757862,-1.368808,2.648648,9.509970,2.692610,4.279605,1.564954,-5.256173,-5.633185,-3.066725,-7.693037,-6.578315,-1.572838,-7.442869,-2.231516,8.168201,-6.263909,-5.031999,-5.041454,7.147990,-5.475301,0.296635,2.106995,-0.217933,-2.405144,-5.288632,-9.135183,6.289904,-6.263067,-7.108762,9.059267,4.093235,4.436345,8.551101,2.852905,-3.700489,3.997311,-6.653204,6.078258,-1.731280,4.144976,1.354940,-9.810310,2.887506,-0.189731,4.149391,8.995277,0.953212,-7.999589,-4.885704,5.055711,5.583383,-9.548919,0.965681,6.522218,-3.463572,-8.237525,-2.608947,-0.236717,-2.789936,-0.499110,-8.245881,-2.092809,-4.981877,7.952721,-9.444765,7.271627,2.719808,3.099892,-6.457432,6.077693,-7.358998,-5.368775,-9.089685,-6.010910,5.101413,-3.750272,-3.915485,2.522907,0.687330,6.979430,4.415483,8.348477,-1.690011,9.406425,0.541388,3.725483,2.592611,5.569916,-1.284851,-0.867982,-0.188736,-2.703585,0.251061,8.580568,-4.546916,-9.699345,-8.958984,-3.334848,2.884764,2.110665,-3.877933,-2.152418,-4.277764,7.577353,5.453431,-7.691322,-8.391525,-0.762358,-0.982906,-1.830329,-2.178791,-0.471044,0.481476,7.787162,-3.611542,0.608220,-0.749708,-9.159038,6.186061,9.112382,5.410200,-7.062146,-6.064524,6.729975,4.881263,2.330350,4.336049,-0.401479,0.242833,6.094553,-4.502429,-2.256635,-9.663830,1.985572,0.672815,-7.820217,-5.909667,-3.756556,9.133585,7.061224,-3.982663,-1.001818,-7.353848,-8.961192,-1.006405,1.032903,-1.010920,8.559643,5.339661,0.662193,-9.468899,4.406637,-9.509820,1.398507,-0.528620,-0.753881,-8.906369,-5.111270,1.933041,-6.368835,-0.739367,-7.911980,8.555120,6.492288,-0.856158,9.919727,-4.883099,5.194872,1.729484,-2.144043,6.295278,-1.506123,9.904189,-1.373878,8.091863,-9.315621,0.952509,-8.512021,9.542313,7.133053,-8.216138,-4.603325,1.679851,-5.466212,-7.945208,-3.120126,6.706478,1.937487,9.713197,-4.082508,-3.266641,-8.067141,8.558916,7.843860,-3.580243,7.694030,7.003178,3.315704,3.968276,0.966068,-1.648758,-5.967386,-3.330089,-4.595823,7.414708,-8.555750,-7.901589,9.911073,-2.197979,-0.832157,9.026500,3.496921,7.744447,-6.886780,-8.817003,-6.785055,1.590381,7.768340,5.096275,-9.802594,-6.961967,-9.359684,5.995403,-5.215259,-5.226271,6.052111,-5.707247,5.774398,5.746780,9.161682,1.275441,5.046588,-0.561518,2.614406,-1.139193,-9.181661,-2.050258,3.230204,9.863983,7.977373,-4.336206,3.171463,-4.568946,-5.310373,-9.277568,0.451050,-7.199286,9.932823,7.236708,-9.945978,-0.723543,-4.960952,5.854954,-7.540609,-7.747606,9.857398,-5.849630,7.311340,7.309621,0.222861,7.704465,8.408983,0.903928,-8.961869,2.964075,-1.783260,-7.598895,1.937397,4.740459,-1.789114,3.484865,-7.987065,-2.123645,-9.224314,-2.466514,-7.432227,6.553989,3.348916,-9.980579,2.432332,-0.200557,5.274508,1.704923,-0.095810,-2.055912,-1.826136,-0.658057,-1.494489,-9.944791,-1.053512,-5.133968,9.519252,5.091302,-4.975090,-8.977947,0.935290,4.140856,2.417946,1.128397,0.855879,-2.499287,-7.335666,3.719190,-0.705918,9.500968,-0.605608,2.944241,4.963330,-8.469320,-3.307794,-2.773640,5.330208,-1.095007,-5.587715,-7.465554,1.021504,0.783581,-6.456060,-9.343132,-3.877611,0.438665,8.059648,-1.060957,0.447576,-8.995374,-5.588367,-7.052019,4.140185,-5.575167,-0.112641,9.437327,-4.733947,1.866970,0.716225,0.192505,-3.518328,-4.542162,0.788188,-3.895856,3.138779,-8.106351,4.725040,8.308431,0.201454,-0.619714,9.864376,5.849579,-8.135576,-3.424678,2.913915,-2.110152,-5.864713,3.837957,1.968038,0.010567,2.156654,-2.823896,-8.097103,7.444858,-8.045363,8.644295,2.590474,5.993630,-7.985140,-9.612163,6.391692,4.818833,3.590373,0.730960,-7.374574,-9.805625,-4.348074,3.960210,-0.759376,-6.464420,-8.194021,-5.318576,-0.666327,-9.579514,7.718934,-9.214283,7.370928,9.545341,7.558785,9.079764,8.376427,1.237354,9.338319,-1.787416,7.828193,-1.554160,-9.056169,8.486095,-2.973356,0.333185,-2.734180,-7.498937,7.453259,9.633881,-3.073611,2.364218,-7.913251,8.436123,3.270548,7.002170,-0.788528,-9.210630,1.477772,1.356729,0.382975,3.117261,1.744759,2.404724,3.350046,9.087338,-3.628885,8.260331,8.812946,-0.118844,-1.892281,7.203390,0.085479,-3.109332,6.506483,-9.853012,-6.136656,5.703744,6.621891,7.541270,6.163563,-1.447687,8.554970,-4.649659,-0.236884,1.482331,-3.795225,3.875082,-6.033839,-1.396876,6.787069,4.032358,0.269899,3.995697,9.844824,9.277240,7.408837,-8.588780,-6.673197,3.195905,6.954996,8.416420,7.463908,7.452694,-3.317928,-0.968519,-9.125638,-9.542146,-4.347845,-5.854852,-8.149807,-0.916005,5.614450,-6.390019,2.752778,-5.229534,-8.014451,-3.191570,-6.089722,0.628544,-0.547720,0.616015,6.508953,-3.583227,2.061261,-7.241091,-1.835207,-8.831592,2.917354,8.947282,-3.552459,-6.934960,-2.545564,2.599081,-5.975809,8.022786,-5.343629,-4.937251,-3.786999,1.382625,6.372597,4.461950,-3.541713,-3.568770,-6.984062,-2.258823,4.243863,9.931623,8.846508,6.472341,-1.676671,-6.155146,2.311015,-6.390243,1.869547,2.780012,8.429138,8.659726,-9.586289,-1.766189,8.619464,-9.681915,4.241401,-2.506103,-6.625018,-2.177780,6.945543,4.509858,5.175019,-2.299740,8.287850,-9.408236,8.526540,-3.748993,2.292664,-0.505819,8.309236,6.128824,6.591322,6.740074,0.084904,-1.835084,2.233059,7.355856,3.719499,7.242637,-3.764846,-7.291676,3.166118,5.565874,7.885860,-1.077002,-0.122341,3.806331,3.763644,7.972991,-4.979539,9.885476,9.637843,0.420577,1.263895,0.942212,-2.822610,7.782316,-2.652951,-8.839051,-5.457363,-4.593839,-0.020670,-1.989516,0.116989,3.205887,3.320726,7.810194,8.712200,-9.447801,9.454503,-4.504175,5.106307,-4.431779,6.796635,0.404336,6.796911,-5.973076,5.198159,2.560899,1.569802,-4.183552,-2.008954,7.073339,-0.469389,-6.928357,-6.048683,1.461123,-3.010316,3.080697,-8.004642,5.222333,2.317471,-0.698123,1.402828,3.149685,-2.268093,1.857966,4.798539,-0.293615,-2.859211,0.004307,-8.980599,-6.719206,-7.003445,-6.154236,-5.955665,-7.935547,3.092124,-1.586495,6.510723,2.649772,-3.544947,-1.372878,-8.036429,8.803368,3.539122,4.870736,-4.767745,-7.173948,5.634755,0.929214,-6.209301,4.887869,-2.397595,-1.472937,4.354236,0.281710,3.707457,5.167113,9.823031,-5.810663,-3.098440,-7.615426,-5.415019,4.924215,9.214066,3.867298,2.777677,0.552778,7.111854,2.068664,-5.304601,-1.846694,-2.715239,7.269276,-6.965593,-1.385654,7.104603,9.704533,5.309802,5.360698,-3.824746,-3.888350,-8.365995,3.338920,-5.225397,-0.028158,-8.267212,-8.832290,8.186591,-9.932177,7.158286,-4.691017,3.986849,-0.659230,-3.291803,4.677980,8.647526,-4.201926,9.939492,1.143288,-6.668790,-9.659173,-1.402280,5.137720,-4.675273,5.317183,-1.687159,-5.370428,-6.685355,-7.228031,5.788684,9.263789,-5.436404,-3.194617,4.525755,4.313407,6.954382,-3.020364,-5.879095,2.301444,8.557960,-3.225684,-1.208264,3.425087,-9.742998,-8.842786,0.756317,-1.231077,0.793961,-7.058199,-2.280079,1.593339,4.518494,9.829722,5.268498,1.201728,1.828150,7.168945,-2.650468,-6.384521,-5.449541,-9.927512,-1.448170,2.919886,4.679231,1.959391,9.726688,-7.546582,-3.710688,-8.201032,-2.728573,5.981086,-5.107561,-2.626452,4.266541,1.500477,5.586736,-8.314100,-6.448106,8.399363,7.906833,5.461872,9.107167,3.431975,8.113165,-9.229638,2.178895,1.458768,-6.290206,9.576436,4.883492,5.321905,-3.523472,-0.722552,-7.768561,2.090868,-4.594979,-8.866800,-3.246754,-7.805347,-2.107898,7.901588,-2.208778,7.102401,-7.869616,-5.883069,6.689121,-6.910221,7.568956,-4.098178,7.153112,3.037339,-4.947627,1.070812,-8.570165,-2.942531,-2.942131,-3.513465,-0.702767,1.247643,-0.979099,-0.080147,-4.828418,-8.520015,-7.000620,8.017230,-6.858913,0.274276,-9.481649,8.776629,-7.967630,3.058417,5.325535,2.298498,9.114518,3.368839,8.686662,1.988671,-7.727553,5.398121,-2.034136,-1.803175,-9.605711,3.988190,9.614163,3.805963,-2.151864,-6.082565,-8.734067,-4.995515,0.557447,-7.030940,2.979006,-1.154598,8.299337,-3.249219,-6.680430,-1.901839,6.394791,0.534673,-3.512887,-3.518772,-1.209232,-9.488784,5.772378,-9.876648,-3.457442,4.458146,9.177556,-6.628105,4.557181,-6.125255,8.508483,-3.619285,6.021981,9.120853,-6.859520,-2.325053,7.929549,-5.441524,5.518405,8.467662,6.492996,-1.586350,-7.563477,4.623042,0.391500,0.498785,-7.505483,8.211940,1.683408,0.475004,5.300503,-7.304478,-6.155990,7.510948,-5.402453,-4.271451,5.583043,-6.520211,7.058455,7.181008,3.410435,2.132570,7.883232,2.153396,-1.304742,-6.599824,4.532854,-2.743519,2.303695,7.505869,-8.306547,9.028109,-5.088685,9.435629,6.052712,3.775537,1.177651,-5.551031,4.390132,7.690042,-1.549245,8.073437,7.086396,-8.498195,7.883998,-7.856604,3.379817,4.529016,5.457660,8.383464,-1.363282,6.229535,5.429567,-0.179086,-5.502205,-1.639427,9.585260,-6.695269,4.909263,-8.784985,-6.302061,-9.579146,-8.901321,-4.835556,-5.130713,3.897026,-1.039968,-7.301707,-6.655075,-4.862577,7.037517,-6.284783,8.762308,5.667943,6.050680,0.991951,-6.850889,7.701835,-0.049019,-5.720750,5.960728,5.664836,-8.651538,3.655207,-6.338044,3.895352,8.457001,-0.318064,-4.945453,9.957488,4.039012,-1.416121,6.758810,1.072550,0.215743,-7.872623,4.230205,-8.245572,-9.960760,-3.304603,4.663953,-7.837731,8.125191,6.042802,-3.909734,2.397103,-6.643985,3.870749,5.132712,8.140035,-1.180682,5.354487,0.630171,5.094672,-0.039749,-3.280656,-4.801378,-7.073817,2.295911,9.437210,-8.237188,-2.736113,-9.146818,-8.812010,-8.320748,-8.830676,-5.006443,-4.625569,5.978501,7.548637,7.474513,-0.270268,-4.052917,-0.595742,-9.089805,8.611632,-2.796442,6.723475,5.600876,0.854041,5.235523,-8.917124,2.602967,6.656309,-0.121229,-4.549276,-7.654923,0.802175,5.919151,3.108020,-6.481879,2.296143,-1.480969,5.215989,-3.644153,7.514346,0.880464,0.079771,-3.446609,1.851486,3.068341,-4.691526,-4.300838,-2.960890,0.748918,-1.871088,-2.651798,7.357024,-8.092687,-2.928499,5.830114,3.779425,8.662690,7.322272,2.362458,5.362403,7.121367,7.465126,8.506046,2.071595,2.865737,-8.898653,2.692535,-4.967390,4.623565,7.261851,-9.610794,3.437162,6.072073,4.981400,9.201596,-7.624003,-5.110862,3.266297,1.947895,9.066218,-2.011969,3.007754,5.497005,8.165650,-1.443215,8.285025,4.576301,9.963651,3.601952,-5.586508,6.691466,6.170434,-5.763690,0.450961,-2.942280,-7.938704,9.757641,-0.413576,2.502124,1.418929,-8.216199,-8.452534,5.111694,6.534497,-2.831079,7.006331,-0.113869,9.474468,8.040567,-3.249282,7.965992,-0.246584,-1.020385,3.803540,0.427813,-7.058025,3.277324,4.520639,-3.434998,-1.468201,-8.121076,-5.220869,-3.324040,0.372568,-7.085070,3.096409,-1.642141,-9.014027,8.809925,-2.987716,-8.267868,-2.340882,5.368832,-7.393261,-0.606693,-2.428074,0.095224,5.116133,1.620242,4.271052,2.481671,5.030546,7.073525,-9.765313,-0.355963,6.657495,2.857202,-8.656299,5.347774,-6.918186,1.363073,4.501902,6.413419,0.478769,7.011023,4.511119,3.142678,7.445793,-8.440544,5.550966,-8.360021,-3.046192,5.661572,1.838933,7.967313,-9.128166,-6.353443,4.809433,3.832823,-1.752392,-5.280708,7.655591,6.357157,-9.676463,-3.211893,-3.480414,-9.936203,9.691073,1.624737,-7.401612,-5.313595,-7.557753,-6.379993,7.053021,-5.433142,2.232053,9.210405,-4.599113,8.278633,-9.370108,3.589509,-0.079380,5.329263,7.360074,-5.546845,-2.990516,-1.777749,-5.470367,-0.539276,-0.481681,1.957090,4.269586,-3.703348,1.545321,-7.344632,-7.453625,-1.739310,1.554656,-5.122839,7.909206,7.997364,8.232347,-4.058725,-1.073385,9.454583,7.777500,-3.933606,9.900598,-7.298879,-9.843777,3.168886,-1.720550,-6.185648,3.255291,-2.389984,0.491994,-4.126732,-8.548715,-9.240433,-2.513756,1.474961,1.336875,-0.856878,9.954011,2.168721,-1.528548,-7.979531,7.716602,-0.736572,4.323419,6.433228,-8.646805,9.625639,-0.238698,-8.938295,-9.415420,-2.375835,9.500997,-1.794208,1.874561,4.488947,-3.852832,6.046222,-3.815681,0.134340,-5.467233,-9.514079,-4.496814,2.030453,-5.371242,3.041362,-2.961084,-8.029819,5.325314,-6.874031,-9.159053,-9.574993,9.725956,-9.614513,9.775127,9.100698,-0.159542,7.333854,3.049604,2.143833,-0.394043,-3.143651,-0.315700,-3.555611,-0.650781,5.440129,-5.778947,9.190595,6.938648,2.237960,1.676647,-9.685040,0.970040,7.178164,0.185814,-9.377697,5.798463,-4.762675,0.399216,6.080056,7.838215,-1.431033,-4.841699,9.519410,-4.538758,2.971532,0.026259,0.359860,0.287327,0.849545,-2.547267,-4.125370,7.128114,2.683340,3.500614,-4.824361,4.245145,6.212717,-7.174479,0.849787,9.137698,7.410705,1.189468,3.876559,3.312467,8.882378,-9.593145,9.785849,-9.327221,-5.105364,-2.348660,-4.528494,-6.005819,8.631179,-4.240063,6.734440,2.602390,-9.287708,1.782360,2.105390,-5.125556,-1.556082,-4.376741,-1.500429,6.223868,0.503824,6.163239,4.352090,4.985766,3.492473,-4.812201,3.470036,3.000946,-0.726299,-2.547136,6.784784,-7.634183,5.902519,7.033273,8.223798,0.848466,-7.660313,-6.974950,-1.225568,9.430143,0.794479,-7.381307,7.122548,-5.337047,-3.750165,-3.643977,3.910063,-7.104480,3.955865,9.133499,-0.251656,5.144553,6.483908,-8.120258,1.194283,8.831772,1.486714,-0.698760,3.902350,-9.839250,1.395605,7.021833,1.219468,9.153362,-8.430421,8.030187,9.585809,1.090226,-6.805669,-2.749443,9.010374,-0.041736,2.037251,-9.731102,0.532886,9.994894,3.709937,-7.596099,-7.432653,3.438259,-1.875471,6.294255,-4.462510,-5.625122,-0.797624,-8.006812,8.931371,5.173592,5.000483,2.493865,-6.398854,1.035450,-8.861015,9.716769,-7.367937,6.755782,7.142252,-6.629843,6.794281,5.471253,-2.693971,-6.371945,-5.525871,-2.121751,5.612570,8.873425,-4.558545,3.499442,-9.281683,4.970424,1.145571,3.576908,2.912224,-0.706058,-9.045724,9.039707,-1.370659,-4.586226,7.399643,-5.710744,1.728229,-7.444993,4.765640,-5.892360,-5.742649,-9.816309,-4.347618,1.639285,3.830678,-9.629343,6.164950,-6.545070,8.224250,-4.553366,-8.180742,1.447968,-8.224674,7.371699,8.826975,8.058297,-9.681248,-1.931090,9.649066,-8.079519,3.630299,9.137174,-8.622263,-3.563817,-0.019054,-3.383463,-0.268377,-1.259627,-3.271243,-4.095189,0.593906,7.000937,4.707211,-4.614372,0.969198,1.952369,-9.481304,3.113332,5.007692,-3.828047,9.133298,-9.788190,6.631755,-9.554661,-8.103345,9.160125,9.939883,4.608389,-8.036882,8.515052,5.388623,3.880309,4.654935,-9.414630,-7.793364,5.676306,-3.657155,2.743283,-1.382571,3.321973,-2.626864,8.559445,6.771436,-3.321766,-9.839110,-7.980976,9.023874,3.547460,-6.973001,4.229252,5.286314,-0.695743,-4.166917,9.949435,-2.209989,7.219177,1.397601,-3.826303,-2.553647,3.140143,-3.000786,-9.138997,6.604201,0.661318,9.666806,-2.782684,3.593735,-0.907994,5.681390,-4.011653,-1.767093,-5.544904,-8.460191,6.488013,-9.647421,-3.042194,-7.532079,-4.871290,-4.885570,4.583955,-9.032207,-8.430659,0.393219,0.394688,-1.641003,-4.956964,6.392022,7.317484,0.840404,-3.871326,8.398683,-3.902733,7.355008,9.542193,-5.552480,-7.643815,-7.185091,-1.057209,5.432283,-6.551893,-6.971263,7.329051,-3.817390,6.289755,1.579897,1.246373,-8.741518,-9.649609,-1.332128,-3.070989,-5.319864,3.432067,1.303501,-8.176656,9.097116,9.494482,7.659641,4.586756,1.968675,0.492343,6.849276,0.930860,3.208252,9.638545,0.892688,-3.258643,-0.278481,-7.443694,-6.512931,5.092736,-1.760817,3.958123,9.768847,9.305987,7.027324,3.046675,3.530700,3.253390,-3.952727,-1.557554,-5.489902,3.905973,-0.199824,-7.248225,1.501904,-3.884488,-5.519432,3.219400,-2.690148,-6.721790,-4.792437,-4.310369,-9.287916,-0.789488,5.608727,-5.663311,4.507194,-1.377796,-6.193367,-8.635002,-7.672307,7.646693,-0.312887,-3.978066,9.696853,1.711526,-4.335482,6.896023,4.444454,5.079258,-0.438130,-5.348750,-3.117643,9.505162,1.385280,-8.210119,-2.243458,2.671495,-0.773953,0.447442,-0.250176,8.885197,1.399815,-2.974838,-3.472456,2.510495,5.263570,4.188354,-7.277281,-8.009326,-1.022549,-2.570699,-8.720824,-7.862968,0.478785,-9.394324,-9.846963,3.124270,-6.153710,-8.388344,7.983734,3.641858,3.773740,-1.487929,2.963551,7.051832,9.552920,-1.717505,6.785917,7.137027,4.764721,3.105688,9.986519,9.724128,-1.547537,7.795762,3.568776,-7.185895,7.162175,-6.870010,-8.351989,-5.342106,9.766473,0.332424,0.036772,-5.190581,8.818278,-4.907663,-9.096878,-4.928159,1.048510,-1.948173,2.652305,2.809695,-5.201504,1.070238,-3.974278,-5.829835,1.164611,-5.662040,-6.731548,9.914211,-4.427680,2.898781,8.654630,7.890783,7.676104,5.174256,5.063759,3.389680,-7.890950,-8.589463,-0.360706,8.652045,-1.870179,5.430603,-6.992728,-0.893819,-3.743800,2.504985,-7.657003,6.704551,-5.821142,-3.170787,7.820205,9.434611,-7.261989,-6.858315,1.096332,-8.546584,-0.721226,-5.009494,-4.156283,7.688615,-1.459724,-9.263714,-8.249704,-4.474298,-3.090415,-1.769431,-3.922488,-2.200895,5.298965,-8.889213,-7.616469,-5.241070,-5.877150,3.815226,-7.933464,4.248022,7.270655,9.804674,9.777768,-7.030380,-7.915985,-6.334403,2.913942,9.918675,9.081711,0.320533,6.037539,-4.410375,-4.362684,-0.137424,7.752664,-2.516798,-6.990943,-5.558188,0.627060,1.568549,6.407129,5.129314,-4.949337,4.082287,-0.645644,3.522457,-8.654612,3.504018,8.542791,4.212889,0.195503,3.490302,2.679404,-7.082300,8.263524,-0.570911,4.556973,7.992123,2.613508,0.945875,4.333578,1.746144,0.739979,-6.758222,-3.020115,0.983744,9.435385,8.165226,-4.568703,-9.260751,-0.141198,-7.208581,-9.603154,2.801253,-8.712203,7.710846,-4.102194,6.463057,7.797513,-1.769128,-6.747580,8.013962,4.825258,-5.400538,-1.470088,4.075637,-5.328265,-1.508111,9.995557,-9.770252,7.658756,0.616938,-4.786223,2.099556,-2.761556,4.276801,3.272269,5.287965,-3.414976,-7.589485,-5.351629,6.100519,5.309950,2.194189,7.298396,-7.355033,8.225445,-1.695186,-3.305727,3.569823,-4.479028,7.959882,6.312717,-3.129710,4.184028,7.112985,-5.542678,-0.150868,-3.976567,-7.920770,8.535655,-7.180574,-8.007132,-4.268022,-5.026278,9.172926,-2.264330,-9.653160,0.267608,0.849119,0.395366,-3.290639,9.431953,8.062430,-4.814513,-7.964128,-0.604967,-7.585183,5.891126,-4.646475,-2.926393,-6.552267,-2.326538,3.896010,8.788908,-3.572649,9.058357,-9.886660,1.236956,-4.237227,6.305651,3.046097,-3.990554,-9.123180,-3.919188,4.617987,4.295126,-9.723275,0.859307,0.487229,-1.472631,6.840298,4.284063,8.159206,-6.739494,-0.422106,-1.834725,4.345019,-2.947374,-8.966166,-6.964330,7.660597,-1.052436,-2.759466,5.693957,-6.098045,1.041042,8.933845,-0.170004,-8.028945,6.633066,-9.007330,-5.318460,-5.529623,-7.145490,-2.560188,-0.824677,-1.127962,6.031295,-7.304301,-7.044925,-4.176910,5.545156,-6.506612,-7.254734,-4.442416,-1.636813,3.321785,-4.219897,5.222417,5.284041,-4.075345,0.255722,-8.871581,6.765797,-2.068236,9.130426,0.912803,-4.956545,-7.630542,-6.710809,-2.085655,-0.735419,-5.074750,5.204552,7.030160,7.629542,6.444710,-8.561424,5.801530,-2.489571,3.493175,-9.653353,-2.454325,8.463561,-6.074118,9.461464,-5.208676,-0.692178,1.849379,-6.888132,-5.395270,-4.747918,-5.022295,1.098004,-4.144516], dtype = "float32")#candidate|2430|(2496,)|const|float32
call_2429 = relay.TupleGetItem(func_2237_call(relay.reshape(const_2430.astype('float32'), [13, 12, 16]), relay.reshape(const_2430.astype('float32'), [13, 12, 16]), ), 0)
call_2431 = relay.TupleGetItem(func_2240_call(relay.reshape(const_2430.astype('float32'), [13, 12, 16]), relay.reshape(const_2430.astype('float32'), [13, 12, 16]), ), 0)
uop_2432 = relay.sigmoid(call_2429.astype('float32')) # shape=(13, 12, 16)
uop_2434 = relay.sigmoid(call_2431.astype('float32')) # shape=(13, 12, 16)
output = relay.Tuple([call_2408,const_2430,uop_2432,])
output2 = relay.Tuple([call_2409,const_2430,uop_2434,])
func_2438 = relay.Function([], output)
mod['func_2438'] = func_2438
mod = relay.transform.InferType()(mod)
mutated_mod['func_2438'] = func_2438
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2438_call = mutated_mod.get_global_var('func_2438')
call_2439 = func_2438_call()
output = call_2439
func_2440 = relay.Function([], output)
mutated_mod['func_2440'] = func_2440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2406_call = mod.get_global_var('func_2406')
func_2407_call = mutated_mod.get_global_var('func_2407')
call_2492 = relay.TupleGetItem(func_2406_call(), 0)
call_2493 = relay.TupleGetItem(func_2407_call(), 0)
func_1371_call = mod.get_global_var('func_1371')
func_1374_call = mutated_mod.get_global_var('func_1374')
const_2497 = relay.const([-3.518823,0.743604,-3.113412,-1.408383,-8.078643,8.537521,0.070674,3.831726,-5.639898,-0.621625,-6.199150,-3.471971,1.212955,6.632478,9.435565,4.597058,-5.728103,-9.813477,8.409248,-6.530047,2.517767,3.502924,-7.206043,-0.445427,1.409670,8.679969,3.751713,-4.701624,-9.000203,0.895558,-6.235686,7.754638,-1.145901,-6.361410,-8.670395,2.717438,-3.546596,-4.227455,6.003352,9.634988,-4.385909,0.828215,-3.619933,-4.928952,4.854370,3.358086,-9.482165,-2.397519,-3.162089,-1.135378,4.654450,-7.984517,-5.446360,5.950359,-0.587627,2.767666,8.270998,-9.859376,-6.179795,-3.932091,6.379351,-5.060757,-4.715065,-3.185164,2.031560,2.511092,-2.662374,-1.940765,-9.538112,0.473089,5.655206,8.924022,9.239480,-9.245601,-6.473663,0.355335,-9.021806,2.452686,-2.148258,-8.456013,-2.417950,7.649779,8.116270,-5.628225,8.703659,-4.955869,-4.484292,3.978290,-3.335754,4.676089,-5.309837,-6.611997,-4.783810,4.410373,8.199728,-0.968850,5.753104,-4.036629,-6.310271,-3.096936,-3.623428,-8.719181,8.023918,-8.223779,9.256921,-9.390549,-1.887187,0.946698,2.777137,-7.703672,-0.788225,-9.544301,-8.355336,-6.613594,6.564032,-9.243520,-2.852384,-0.791792,-5.300839,1.062810,8.223255,4.999872,-0.906414,-8.352990,5.939912,-9.927014,-6.359584,9.999063,4.503778,5.199014,-2.039014,7.252201,-3.029681,-0.410924,-8.240835,-3.123208,-3.222730,-2.463135,-8.029597,-6.154765,6.342330,5.397177,3.730072,-7.755734,3.408117,-7.403447,8.281731,-0.097926,5.772643,-0.367254,-6.393010,9.642567,-8.789799,5.489038,7.589357,-9.584856,-6.665427,-1.618053,-0.579044,-8.873750,-5.893356,3.038805,-6.867499,1.496554,2.831094,-1.061961,-0.656403,-2.485592,7.680077,-6.258808,6.189393,9.045024,-5.558351,6.025835,-1.947047,-3.986157,-7.991813,-8.469392,8.829253,2.940259,0.361735,-4.874821,3.224357,-3.335329,-1.783801,0.353157,1.135252,7.308633,-7.833930,-1.073788,4.702938,2.396118,-9.979140,-6.626357,4.563435,-5.387248,4.911613,6.673250,3.401336,6.803303,-8.710395,6.071368,1.875224,2.245120,-3.732575,-5.254310,7.373196,0.540115,9.083822,5.345013,8.755532,0.974777,8.450006,-2.909053,-3.244324,-9.938635,-7.627457,-4.445491,8.804692,-0.242481,3.110836,3.299603,-7.789039,6.430204,-7.134743,6.484509,-5.234884,8.726895,4.130266,6.393866,7.911662,-2.970000,0.335370,-1.726858,-4.284099,-9.957124,1.393061,-2.693121,6.253586,-1.414839,0.103599,1.913921,-8.102630,2.262554,-3.513011,-6.621097,-3.301962,-5.985759,4.738942,-4.001729,0.454556,-2.967070,-6.961359,-0.683722,-8.093766,-7.966348,-1.124724,4.716419,-0.359820,-2.703954,8.248838,-3.132258,4.247434,-5.873682,9.350563,4.369449,7.033945,-1.022559,-0.033890,6.767786,0.955380,-8.740566,-8.236568,-2.422997,-4.793488,0.645557,5.932260,-7.440608,-8.496347,-2.560927,9.902141,-7.106458,8.849276,3.030439,-6.258958,-4.553035,-5.931810,4.408540,-6.955115,3.898810,5.711548,2.293629,-6.228474,2.298450,-8.875285,5.729173,0.951703,-6.833399,-8.245483,1.411343,4.934623,-2.460131,-0.671747,-5.967776,2.205887,-7.654457,-4.377600,-9.394107,4.758604,-1.063264,2.607274,4.958063,4.468900,4.686401,2.371530,-4.867578,-2.272690,-5.540895,0.878115,1.811426,-5.801739,7.959515,1.354852,-6.078531,6.275098,-9.377149,-3.685735,-9.843896,-3.377399,7.446967,-1.235303,-4.260442,-2.652686,2.447137,1.145111,-6.081384,-1.111105,-7.795929,3.845594,-6.253796,7.248668,0.833542,1.193158,-1.935805,9.334702,4.130028,9.721871,-2.502368,8.176318,2.112960,0.161439,-7.040919,8.096103,6.842470,7.409072,-6.201616,9.424475,-4.084754,6.950749,-4.044144,-0.853403,-1.257736,6.506512,0.548224,-3.359868,3.037509,0.448613,-6.501917,-9.721540,4.639068,8.248492,5.708626,-0.800330,6.440385,-5.159288,-4.199167,-2.819997,-5.397958,-9.431053,-4.920765,6.856256,-6.570059,8.041507,1.180571,-7.551092,-1.146724,-6.623018,-1.578476,7.413586,-1.978287,5.879599,0.986756,4.525235,9.117093,1.974212,2.974398,9.259814,3.000612,-0.459635,1.983245,-5.526116,-2.638472,2.858357,8.261163,8.388261,-8.514006,-0.230594,-0.435647,8.183269,7.153073,3.050473,7.431006,-6.707334,3.491753,-3.730584,-1.864628,-6.812400,5.024007,1.354447,5.573839,5.290269,-0.622832,4.776499,7.157204,-2.483713,0.940372,3.038918,2.826585,-6.399662,-0.370579,8.447293,1.428987,-5.160192,6.780279,0.063584,-9.920395,-7.782925,-6.484266,1.930580,-7.153303,3.483742,2.852936,9.866739,-0.077504,2.809945,-2.329913,0.708837,1.900257,-5.009427,-3.017826,2.354178,-6.311484,5.711351,9.429562,2.032965,-1.617423,8.612288,0.056271,-0.382201,-5.427774,3.945225,-5.641828,-9.612998,-9.094629,-7.924951,-5.592686,8.879145,2.765303,-2.150610,8.066363,1.976759,-6.807347,4.274254,1.815670,8.933118,9.735924,-5.721185,-7.571561,7.909449,4.109651,8.226811,0.831618,5.473048,5.886587,9.815816,9.312106,-8.507416,-3.412991,4.392222,-8.897657,2.816561,8.749071,5.512754,3.451182,-3.348546,0.079496,-6.220474,-9.592064,6.410004,8.360120,-5.022332,3.344314,-8.764446,-8.842704,3.305637,9.155932,2.303333,-9.461536,-0.278194,8.930936,5.476777,-6.068517,-8.110436,3.699883,-5.124387,-3.524801,5.075021,2.338124,8.623459,3.287978,-4.629498,-0.054399,-4.623526,1.093300,-6.595232,2.890803,5.696179,6.190476,4.202828,7.293816,-0.342724,-5.183010,-0.196544,2.657887,-8.790388,-3.021147,2.237506,-2.382311,-7.335354,-7.151719,-6.515820,-9.395659,6.240345,5.804036,-3.504585,-0.998189,5.545048,-6.675098,7.486519,7.085515,-5.156595,-1.321235,-1.792621,5.586619,-2.657002,7.884380,-2.197559,-3.148687,-6.089067,-3.912202,3.926566,7.156140,1.353182,-9.614080,7.005864,-9.504224,6.992215,-8.368849,0.238110,-3.190832,4.855468,6.824893,2.499091,-9.166226,4.278330,-2.925480,6.252869,2.139460,5.390726,3.527759,-6.353676,9.777898,9.585709,3.118225,3.835415,-0.047542,-8.820801,-3.163316,-5.189947,3.476838,7.687530,-7.794339,8.586297,-6.031773,7.522425,7.048060,7.486714,1.747250,-7.229256,-2.605515,7.074511,7.965290,-0.061483,0.354265,-7.571724,-8.343836,6.304252,-3.320518,5.909681,2.038841,8.022556,-9.157927,5.693029,0.930161,-7.600623,-3.867909,-5.370850,0.186550,4.250603,3.030535,4.088955,-9.505532,-2.640971,7.494260,2.306625,-3.178981,-7.627455,7.041309,6.288742,0.309904,-0.568831,5.756864,6.680863,0.228836,9.171503,-4.134571,4.392814,1.457254,-1.702464,0.560273,-3.409443,-8.716851,-2.280253,-4.253720,-7.554648,9.122577,5.332343,8.023516,-9.596043,-5.372990,-3.228818,-9.892028,6.710532,5.742703,6.897026,0.352564,3.373025,-5.251192,7.885028,8.257653,-9.304538,3.442670,6.198398,9.744841,9.958734,6.742897,-8.779292,7.675146,-7.786680,5.813329,5.084500,3.055377,-6.642217,-1.521038,-4.245971,9.593016,3.358901,9.400738,-6.191560,-2.789617,-5.228750,9.610222,5.802538,-2.689150,8.946171,0.178858,-8.639412,1.550722,-2.078533,-0.340881,6.741965,-1.186154,-1.315490,0.240263,-1.155002,9.883114,-4.258801,1.862689,4.855978,2.920692,-4.608321,-6.554464,6.028484,4.123052,0.801260,-4.951489,-3.129193,3.086989,-8.589557,6.082376,-7.936474,7.674214,5.938333,1.950919,-7.254244,9.383369,4.371803,8.048223,-9.697828,2.418928,0.685233,-2.857265,-1.650788,-7.446116,5.569334,5.558748,-6.181848,-6.784327,5.259876,0.212332,-8.760926,-1.564722,-9.020133,-1.273971,4.680041,-2.960363,9.557714,-9.162634,5.931388,5.436499,-9.943676,-9.581149,7.061057,-2.119888,-3.830682,1.393805,-9.847781,3.141636,6.171419,1.365891,9.719921,9.171952,1.011627,-1.568716,3.977985,3.487751,-8.926470,-4.558041,-6.516512,-0.561754,-0.112160,9.678558,-6.589808,8.403134,-8.001067,-6.772095,8.964126,-1.750085,0.028960,3.712945,-9.946449,-9.532866,-0.012779,4.213755,2.340579,-5.560501,2.721901,-4.106634,-6.954725,2.909698,1.284245,-2.434358,-5.380220,7.350655,1.956879,-4.358761,2.576932,-2.962457,0.572551,-8.455378,8.689405,1.944337,-2.199992,-7.960900,6.530185,7.216953,0.480351,5.721805,-9.187328,6.435862,1.072971,-7.529267,-6.939703,6.782391,-0.826729,-3.338597,-7.720148,-7.080864,-6.839844,1.244553,-3.219619,-3.427638,-2.041773,5.403569,-9.932428,-4.697239,-9.293790,-6.903246,7.680545,2.832293,8.561919,0.745789,0.282259,-2.572089,6.349255,8.724708,-9.097382,5.309756,-7.649614,6.294806,-3.400417,-8.405032,-3.413872,0.403910,-6.308116,2.453045,1.295521,9.432713,-1.488896,-6.585066,7.643891,-8.805089,2.734620,-4.856559,-6.861318,-1.928699,0.088000,-6.620223,1.915045,2.214107,-6.780130,7.593397,-6.508103,-1.508117,-3.550348,-8.457530,-5.223429,4.191897,-7.251048,5.970213,3.495194,2.338024,4.585152,0.524498,-9.313226,-4.386826,2.943363,-6.633539,6.336593,8.362184,3.043566,4.970588,-0.816015,1.244742,6.681410,9.297935,-7.578641,7.650550,-4.683879,-3.764059,-0.457254,1.372350,-4.351401,4.649717,-8.333065,5.286984,-5.133046,-5.218326,3.441160,7.043835,-8.393821,6.210692,-8.641057,-6.700075,7.824155,5.647284,-5.933552,-2.481396,-7.299456,-2.400223,-1.345478,-2.357044,-1.070995,9.677282,-0.893703,-8.292679,3.869971,6.800469,9.293645,9.678910,-2.391214,-1.050762,6.121710,1.431147,-3.783235,2.670719,4.942929,1.052701,-3.028387,7.128171,4.963227,0.698644,4.805427,-4.359664,3.020810,-2.847844,-5.466477,-8.470721,5.745274,9.430871,3.609203,-4.251523,-1.188409,-5.132423,-0.363864,2.602704,-7.974251,-2.599344,5.985790,-7.446594,-1.162243,-6.029692,2.145654,7.192719,-8.389382,-7.383971,0.152999,-5.807139,-4.882320,-4.696518,-4.050698,-2.698203,-9.400349,1.284060,-5.657988,-4.874880,-3.808068,4.542368,8.906632,-1.240897,-4.982100,7.665802,7.301894,5.535008,9.592960,-4.353216,-4.622282,-0.966059,8.253915,-4.843061,1.140113,8.472959,-8.818411,2.382907,7.665092,1.056982,-6.269158,5.532079,9.465886,3.021963,-8.939975,-1.108513,-0.704063,3.540561,-5.784054,8.169305,3.057549,0.096823,-4.073039,5.460719], dtype = "float64")#candidate|2497|(990,)|const|float64
call_2496 = relay.TupleGetItem(func_1371_call(relay.reshape(const_2497.astype('float64'), [990,])), 3)
call_2498 = relay.TupleGetItem(func_1374_call(relay.reshape(const_2497.astype('float64'), [990,])), 3)
output = relay.Tuple([call_2492,call_2496,const_2497,])
output2 = relay.Tuple([call_2493,call_2498,const_2497,])
func_2500 = relay.Function([], output)
mod['func_2500'] = func_2500
mod = relay.transform.InferType()(mod)
mutated_mod['func_2500'] = func_2500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2500_call = mutated_mod.get_global_var('func_2500')
call_2501 = func_2500_call()
output = call_2501
func_2502 = relay.Function([], output)
mutated_mod['func_2502'] = func_2502
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2597 = relay.var("var_2597", dtype = "int64", shape = (9, 14))#candidate|2597|(9, 14)|var|int64
var_2598 = relay.var("var_2598", dtype = "int64", shape = (9, 14))#candidate|2598|(9, 14)|var|int64
bop_2599 = relay.bitwise_xor(var_2597.astype('int64'), relay.reshape(var_2598.astype('int64'), relay.shape_of(var_2597))) # shape=(9, 14)
output = relay.Tuple([bop_2599,])
output2 = relay.Tuple([bop_2599,])
func_2602 = relay.Function([var_2597,var_2598,], output)
mod['func_2602'] = func_2602
mod = relay.transform.InferType()(mod)
mutated_mod['func_2602'] = func_2602
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2602_call = mutated_mod.get_global_var('func_2602')
var_2604 = relay.var("var_2604", dtype = "int64", shape = (9, 14))#candidate|2604|(9, 14)|var|int64
var_2605 = relay.var("var_2605", dtype = "int64", shape = (9, 14))#candidate|2605|(9, 14)|var|int64
call_2603 = func_2602_call(var_2604,var_2605,)
output = call_2603
func_2606 = relay.Function([var_2604,var_2605,], output)
mutated_mod['func_2606'] = func_2606
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2635 = relay.var("var_2635", dtype = "float64", shape = (2, 1))#candidate|2635|(2, 1)|var|float64
uop_2636 = relay.asinh(var_2635.astype('float64')) # shape=(2, 1)
output = uop_2636
output2 = uop_2636
func_2645 = relay.Function([var_2635,], output)
mod['func_2645'] = func_2645
mod = relay.transform.InferType()(mod)
var_2646 = relay.var("var_2646", dtype = "float64", shape = (2, 1))#candidate|2646|(2, 1)|var|float64
output = func_2645(var_2646)
func_2647 = relay.Function([var_2646], output)
mutated_mod['func_2647'] = func_2647
mutated_mod = relay.transform.InferType()(mutated_mod)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_2661 = relay.TupleGetItem(func_801_call(), 0)
call_2662 = relay.TupleGetItem(func_802_call(), 0)
func_1788_call = mod.get_global_var('func_1788')
func_1790_call = mutated_mod.get_global_var('func_1790')
call_2665 = relay.TupleGetItem(func_1788_call(), 0)
call_2666 = relay.TupleGetItem(func_1790_call(), 0)
output = relay.Tuple([call_2661,call_2665,])
output2 = relay.Tuple([call_2662,call_2666,])
func_2689 = relay.Function([], output)
mod['func_2689'] = func_2689
mod = relay.transform.InferType()(mod)
output = func_2689()
func_2690 = relay.Function([], output)
mutated_mod['func_2690'] = func_2690
mutated_mod = relay.transform.InferType()(mutated_mod)
func_801_call = mod.get_global_var('func_801')
func_802_call = mutated_mod.get_global_var('func_802')
call_2727 = relay.TupleGetItem(func_801_call(), 0)
call_2728 = relay.TupleGetItem(func_802_call(), 0)
func_1043_call = mod.get_global_var('func_1043')
func_1047_call = mutated_mod.get_global_var('func_1047')
var_2740 = relay.var("var_2740", dtype = "uint16", shape = (1274,))#candidate|2740|(1274,)|var|uint16
call_2739 = relay.TupleGetItem(func_1043_call(relay.reshape(var_2740.astype('uint16'), [14, 13, 7]), relay.reshape(var_2740.astype('uint16'), [14, 13, 7]), ), 0)
call_2741 = relay.TupleGetItem(func_1047_call(relay.reshape(var_2740.astype('uint16'), [14, 13, 7]), relay.reshape(var_2740.astype('uint16'), [14, 13, 7]), ), 0)
func_460_call = mod.get_global_var('func_460')
func_463_call = mutated_mod.get_global_var('func_463')
const_2746 = relay.const(7, dtype = "int32")#candidate|2746|()|const|int32
var_2747 = relay.var("var_2747", dtype = "int32", shape = (5,))#candidate|2747|(5,)|var|int32
call_2745 = func_460_call(relay.reshape(const_2746.astype('int32'), []), relay.reshape(var_2747.astype('int32'), [1, 5]), )
call_2748 = func_460_call(relay.reshape(const_2746.astype('int32'), []), relay.reshape(var_2747.astype('int32'), [1, 5]), )
func_460_call = mod.get_global_var('func_460')
func_463_call = mutated_mod.get_global_var('func_463')
call_2750 = func_460_call(relay.reshape(const_2746.astype('int32'), []), relay.reshape(var_2747.astype('int32'), [1, 5]), )
call_2751 = func_460_call(relay.reshape(const_2746.astype('int32'), []), relay.reshape(var_2747.astype('int32'), [1, 5]), )
output = relay.Tuple([call_2727,call_2739,var_2740,call_2745,const_2746,var_2747,call_2750,])
output2 = relay.Tuple([call_2728,call_2741,var_2740,call_2748,const_2746,var_2747,call_2751,])
func_2752 = relay.Function([var_2740,var_2747,], output)
mod['func_2752'] = func_2752
mod = relay.transform.InferType()(mod)
var_2753 = relay.var("var_2753", dtype = "uint16", shape = (1274,))#candidate|2753|(1274,)|var|uint16
var_2754 = relay.var("var_2754", dtype = "int32", shape = (5,))#candidate|2754|(5,)|var|int32
output = func_2752(var_2753,var_2754,)
func_2755 = relay.Function([var_2753,var_2754,], output)
mutated_mod['func_2755'] = func_2755
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2406_call = mod.get_global_var('func_2406')
func_2407_call = mutated_mod.get_global_var('func_2407')
call_2757 = relay.TupleGetItem(func_2406_call(), 0)
call_2758 = relay.TupleGetItem(func_2407_call(), 0)
output = call_2757
output2 = call_2758
func_2767 = relay.Function([], output)
mod['func_2767'] = func_2767
mod = relay.transform.InferType()(mod)
mutated_mod['func_2767'] = func_2767
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2767_call = mutated_mod.get_global_var('func_2767')
call_2768 = func_2767_call()
output = call_2768
func_2769 = relay.Function([], output)
mutated_mod['func_2769'] = func_2769
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2438_call = mod.get_global_var('func_2438')
func_2440_call = mutated_mod.get_global_var('func_2440')
call_2770 = relay.TupleGetItem(func_2438_call(), 2)
call_2771 = relay.TupleGetItem(func_2440_call(), 2)
output = relay.Tuple([call_2770,])
output2 = relay.Tuple([call_2771,])
func_2772 = relay.Function([], output)
mod['func_2772'] = func_2772
mod = relay.transform.InferType()(mod)
output = func_2772()
func_2773 = relay.Function([], output)
mutated_mod['func_2773'] = func_2773
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2774 = relay.var("var_2774", dtype = "float64", shape = (8, 12, 8))#candidate|2774|(8, 12, 8)|var|float64
uop_2775 = relay.tan(var_2774.astype('float64')) # shape=(8, 12, 8)
output = uop_2775
output2 = uop_2775
F = relay.Function([var_2774,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_2774,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
	relay.transform.FuseOps(3),
	relay.transform.DefuseOps(),
	relay.transform.SimplifyExpr(),
	relay.transform.InferType(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_2774= np.array([[[6.102363,-5.477251,0.753821,-9.942187,9.442907,-9.483269,-9.878504,-2.143660],[0.851607,-4.293080,0.576383,-2.509179,-3.774637,8.324200,-6.402147,7.211738],[-7.236785,2.920262,1.340180,8.585216,-0.686058,-8.267823,-0.580784,-4.201662],[7.639607,0.376068,7.958575,7.685441,-0.956431,6.375610,-8.763382,5.408881],[-7.022000,9.810973,-8.930120,5.328012,-2.423199,0.370866,-5.338506,1.907767],[-3.167560,-1.732611,-8.088506,-9.613966,-4.890391,-1.558281,-0.991203,6.584993],[-0.128795,-0.133188,-4.340459,5.550692,-4.020609,7.758090,-5.730664,-7.933120],[8.406099,9.543118,-5.520047,-8.663615,3.154939,-6.950939,-2.879910,5.021579],[-7.169876,7.806440,3.287345,4.760029,8.307655,-5.584180,9.661249,9.025825],[-1.769059,7.612894,-8.934397,2.860240,-3.635376,6.720170,-6.187488,8.374235],[-1.519450,7.592832,5.092903,1.547224,0.578822,1.663559,8.626725,3.755421],[7.122756,-2.329090,-3.837021,5.527255,2.960577,-4.008378,0.500750,-3.684021]],[[-4.884509,3.173992,6.404088,6.714211,0.950574,2.414519,8.054283,-5.337259],[9.122290,-3.038870,-0.248050,-6.200217,-5.534639,1.639319,-5.344011,4.516611],[1.081893,5.473118,-8.795488,3.685435,9.362775,-4.400600,3.575933,8.346466],[5.629899,2.570191,9.348708,-6.780203,-5.823076,-0.546822,3.786657,8.634694],[-3.158651,1.887724,5.494894,-7.151843,-9.507085,4.321505,0.072572,-7.481338],[-7.669141,8.787959,-9.590246,1.147822,1.810846,6.639226,-8.979197,-7.351112],[8.279008,1.504893,-1.087130,3.925373,-8.730541,9.756203,5.429885,-2.863602],[1.048085,-2.312342,0.178970,-5.060659,7.603340,-3.377666,-1.336876,-2.621082],[-9.699834,7.998742,-9.933847,1.428265,3.758843,-3.899869,9.767764,2.345534],[-3.717784,-4.217171,3.714827,3.238107,-1.931846,-6.294193,-2.567375,2.073923],[-2.302819,7.634729,6.371914,0.807993,0.894709,-3.278986,8.665591,9.343346],[5.603967,9.934079,-9.206095,4.325371,-9.599399,-3.653776,-5.546866,-1.375174]],[[-7.351629,0.249165,-1.241270,-5.569792,4.319412,-7.546522,-6.453731,-3.237734],[5.352980,5.714434,-1.474530,0.402574,-1.902263,2.926946,5.432985,-4.157027],[-0.916470,3.483207,-1.166608,-7.795095,-9.312527,-1.389983,7.839172,-1.473120],[5.117795,-1.198936,-2.461596,-4.735307,3.868608,-9.443297,4.388874,-8.306719],[-9.259940,0.231829,-5.500073,-4.600618,-5.074294,6.755515,-5.983807,8.844938],[7.153319,4.227230,1.998303,7.024311,-3.928094,4.077171,-0.744723,3.477645],[1.192596,2.223064,-0.653860,5.027680,9.860993,-0.399847,-6.011317,4.695943],[-6.146396,-8.406651,-4.862146,-8.417400,8.736683,0.707970,-8.076661,-4.750141],[1.342389,4.433172,-4.299493,-7.019483,6.033435,5.054778,-9.480552,-9.307849],[8.324996,-3.755241,-4.858631,-8.460430,-9.357101,8.182743,-5.739682,5.676237],[2.367935,-8.372576,5.726988,3.790832,0.787129,-7.726723,4.877533,-3.548185],[4.792319,9.339883,-3.251931,5.968146,3.017538,1.418446,0.081267,5.269727]],[[3.085741,-4.840667,-8.380231,0.686375,-9.066604,-6.529208,-9.346563,-9.843188],[9.556744,7.162939,-4.818409,9.626821,0.750269,6.872195,3.428136,-4.353351],[-8.490636,5.785317,-0.526463,9.561092,-6.426900,1.524397,-1.621678,3.495487],[5.553337,3.812763,3.832214,7.290420,0.846776,6.545451,0.549417,9.092320],[-8.695991,-5.548720,-4.607493,6.601481,0.675036,0.388177,0.630274,-6.312105],[-2.766430,-6.745748,-3.364205,-9.666617,-4.114392,-8.954356,3.763782,-6.674766],[-2.422768,9.176323,-1.483270,4.850348,1.067406,3.429611,2.559431,3.597386],[-4.320304,-8.007181,4.627923,-5.514646,-6.610792,9.478093,6.989116,-8.446792],[-8.212784,-0.651364,-4.586188,9.022506,-0.073285,-9.508227,-4.741113,0.424376],[4.932603,2.333088,5.159028,6.111813,-5.616032,1.331381,-8.472829,2.997341],[3.083757,8.515697,6.461995,1.462527,0.002374,-3.739771,9.352753,-0.498371],[8.784387,3.198064,-9.401348,-8.712915,0.134093,-3.502194,5.892572,3.673167]],[[9.205758,7.446903,9.491073,-1.330495,-1.542689,-4.807663,3.014353,3.799568],[-6.434201,9.223526,5.048824,2.916869,1.138810,-9.523014,4.986292,-6.671959],[-6.085900,2.190696,-8.990974,-0.749623,-6.714817,8.466911,-2.927062,-3.110367],[2.136969,3.539920,-7.741689,-3.377265,-7.600122,-9.354539,-2.204248,-0.225351],[-6.912508,-9.549103,5.355341,-3.165400,6.082144,2.727646,-1.056841,-7.799316],[5.733868,-2.553972,-1.858216,-9.449212,9.356706,-6.778177,0.156783,-8.393706],[-5.296985,-0.411168,5.547027,-2.747014,-0.510641,-5.515467,2.391355,7.507939],[-1.136601,-7.271394,-4.258688,7.056229,-3.682842,6.123696,-7.139977,6.526547],[-5.123884,1.030071,-4.521692,-1.291461,5.214663,9.162393,7.886633,-8.267683],[-1.948360,-1.864268,1.266499,-1.138240,1.164021,7.871876,8.848727,-2.223674],[-0.480196,-3.305761,3.458002,-8.798535,2.472998,-7.286195,-0.829407,4.024149],[2.179492,4.067524,6.163688,-5.176673,7.732194,3.106466,9.635526,-1.458813]],[[9.902904,-0.432795,0.866407,7.098314,8.855373,2.470215,-3.086593,-2.236745],[-3.987478,-0.793139,-9.212339,-9.528811,-5.399423,-1.612228,8.225003,-3.381484],[5.913195,-9.948021,5.333155,-4.571462,7.483124,-0.822185,-5.603954,5.914149],[-9.996037,-3.398521,1.885708,-9.595517,-3.876285,6.846371,6.033440,-7.434604],[-2.083566,9.817514,7.491251,-6.288726,5.647602,-1.245062,-4.782660,-7.653014],[-7.292955,8.289584,8.324429,5.841262,-6.842628,8.923375,-8.885855,7.362083],[-5.712682,-8.363793,-0.420969,-0.975426,4.709860,6.907226,2.508953,-9.848676],[-1.309493,5.858622,9.809638,-8.928321,3.878781,5.761519,4.201973,-8.051339],[3.049565,3.763159,-6.692998,6.561388,5.945474,2.323589,-1.758812,-7.518120],[3.888862,-7.993312,-8.977522,-9.090232,1.743679,-3.334889,-9.517464,-7.188455],[6.405409,4.384366,-3.123320,-5.625804,9.508173,-9.019257,8.974790,3.444352],[-0.375010,-4.302601,-1.509841,-1.483317,-9.472988,-5.995026,3.146189,2.051181]],[[9.590423,-4.074082,5.985131,1.107737,-9.662709,3.867610,-4.365152,-7.863685],[-5.606369,7.451602,-5.777454,-9.313867,-9.771437,3.447691,-2.690908,5.139811],[-1.865882,0.430827,-9.304757,-5.646218,-9.402749,-8.587905,-6.516763,6.052393],[6.054090,8.835026,-9.830778,9.843223,7.566864,-9.850684,8.386347,5.693065],[-6.757732,9.684477,1.946086,6.992745,3.810703,-3.369608,5.997360,2.391711],[-3.067916,-6.690856,-3.402451,-9.017517,-0.843080,3.372077,-6.101639,7.363834],[8.139845,0.247507,9.915690,-1.242813,-8.991614,-0.212168,-2.098259,9.338250],[2.602697,5.653118,7.533209,6.811433,4.376637,4.727118,2.220825,-1.696968],[7.457589,5.652516,-0.533945,-6.444643,-0.054879,-2.920775,-5.131895,7.991522],[5.078986,0.326492,-4.928890,4.881712,-3.389971,1.470437,2.831008,-3.751216],[5.352110,7.077750,-9.742864,4.819971,3.196081,5.288861,4.130173,5.479704],[-6.599168,3.405876,4.074607,-3.603115,1.828680,8.232225,8.202378,7.266021]],[[1.418057,-4.765903,-9.942805,-2.136694,-8.172887,5.467104,-6.682216,-7.331297],[-2.666911,-2.876614,-2.569165,8.908266,-0.970422,0.198515,-5.591034,9.352148],[9.021878,5.351018,4.566192,4.289655,-6.226985,3.220963,1.028580,4.488831],[0.702293,9.678153,-8.522146,2.003065,9.129604,-3.616601,9.941132,6.015125],[6.203133,9.994855,-5.516841,-7.689339,0.419115,-8.151325,-7.154763,-7.473295],[0.892547,0.275322,-4.589563,-1.291563,9.523001,-6.713973,-3.476648,-8.889637],[-7.127177,-8.196417,-8.989254,3.280335,-8.581002,7.588903,1.264565,-3.412554],[9.681846,-7.902811,-4.129908,-0.625721,7.093356,7.520352,-1.898639,-7.517831],[6.324366,-9.716494,9.144243,4.569307,5.405895,-3.555268,6.383793,7.671131],[9.655980,-2.122557,-1.916628,7.131590,7.100036,-2.014207,-5.374240,5.740922],[5.634703,-2.645115,3.640200,7.100196,-8.623635,-7.036297,-0.116207,-6.384138],[1.009536,-0.460233,4.245076,-4.089646,-9.780450,8.482500,6.030433,-0.148715]]], dtype='float64')
module1.set_input('var_2774', input_2774)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_2774, )
res3 = intrp3.evaluate()(input_2774, )
res4 = intrp4.evaluate()(input_2774, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
module5.set_input('var_2774', input_2774)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_2774, )
res7 = intrp7.evaluate()(input_2774, )
res8 = intrp8.evaluate()(input_2774, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
module9.set_input('var_2774', input_2774)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_2774, )
res11 = intrp11.evaluate()(input_2774, )
res12 = intrp12.evaluate()(input_2774, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
module13.set_input('var_2774', input_2774)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_2774, )
res15 = intrp15.evaluate()(input_2774, )
res16 = intrp16.evaluate()(input_2774, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
module17.set_input('var_2774', input_2774)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_2774, )
res19 = intrp19.evaluate()(input_2774, )
res20 = intrp20.evaluate()(input_2774, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
module21.set_input('var_2774', input_2774)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_2774, )
res23 = intrp23.evaluate()(input_2774, )
res24 = intrp24.evaluate()(input_2774, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()

'''43: TVMFuncCall
42: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
41: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
40: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
39: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
38: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
37: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
36: tvm::transform::Pass::operator()(tvm::IRModule) const
35: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
30: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
29: tvm::transform::Pass::operator()(tvm::IRModule) const
28: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
27: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
20: _ZN3tvm5relay9transform22Devic
19: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
16: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
15: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
12: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
9: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
8: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
7: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
6: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
5: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
4: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
3: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
2: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
1: tvm::relay::tec::PrimFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
0: tvm::relay::tec::ScheduleBuilder::Create(tvm::relay::Function const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)

'''