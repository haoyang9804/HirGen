import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_44 = relay.var("var_44", dtype = "uint64", shape = (14, 8, 1))#candidate|44|(14, 8, 1)|var|uint64
var_45 = relay.var("var_45", dtype = "uint64", shape = (14, 8, 8))#candidate|45|(14, 8, 8)|var|uint64
bop_46 = relay.subtract(var_44.astype('uint64'), var_45.astype('uint64')) # shape=(14, 8, 8)
output = bop_46
output2 = bop_46
func_58 = relay.Function([var_44,var_45,], output)
mod['func_58'] = func_58
mod = relay.transform.InferType()(mod)
mutated_mod['func_58'] = func_58
mutated_mod = relay.transform.InferType()(mutated_mod)
func_58_call = mutated_mod.get_global_var('func_58')
var_60 = relay.var("var_60", dtype = "uint64", shape = (14, 8, 1))#candidate|60|(14, 8, 1)|var|uint64
var_61 = relay.var("var_61", dtype = "uint64", shape = (14, 8, 8))#candidate|61|(14, 8, 8)|var|uint64
call_59 = func_58_call(var_60,var_61,)
output = call_59
func_62 = relay.Function([var_60,var_61,], output)
mutated_mod['func_62'] = func_62
mutated_mod = relay.transform.InferType()(mutated_mod)
const_83 = relay.const([2,5,-3,-3,-10,6], dtype = "int16")#candidate|83|(6,)|const|int16
var_84 = relay.var("var_84", dtype = "int16", shape = (6,))#candidate|84|(6,)|var|int16
bop_85 = relay.right_shift(const_83.astype('int16'), relay.reshape(var_84.astype('int16'), relay.shape_of(const_83))) # shape=(6,)
func_58_call = mod.get_global_var('func_58')
func_62_call = mutated_mod.get_global_var('func_62')
const_92 = relay.const([[-9,5],[2,10],[-10,5],[3,7],[-1,2],[8,-7],[6,4],[-3,3],[-7,5],[4,1],[-6,-5],[2,2],[3,-5],[7,5],[9,7],[6,-3],[-8,10],[4,7],[-10,3],[-6,-5],[9,10],[-1,1],[4,1],[-8,3],[-5,-8],[-6,2],[-7,8],[-10,-2],[3,6],[9,-6],[-5,-3],[3,1],[-10,-10],[-3,-2],[7,-6],[3,5],[4,-1],[-9,3],[4,-9],[3,9],[-8,-10],[1,-3],[-6,-3],[-1,-6],[-10,-5],[4,2],[-6,-6],[-10,2],[6,-9],[8,5],[-5,2],[7,-8],[-4,5],[-2,7],[10,9],[-10,8]], dtype = "uint64")#candidate|92|(56, 2)|const|uint64
const_93 = relay.const([-3,2,-10,6,-10,1,-1,2,-3,5,-6,-3,4,10,-9,2,-3,-8,9,6,-7,1,1,4,-10,4,-3,-3,-10,3,-1,1,-7,-8,3,10,-2,-7,-4,9,-9,2,-9,3,9,1,8,5,-1,6,10,3,4,-4,-1,4,5,-4,-2,-6,-2,2,-10,-9,-3,-4,-8,-4,-9,3,-1,-9,-5,-3,-1,-2,7,-5,3,10,7,-7,-3,7,9,-1,9,9,3,2,10,-7,10,-5,-3,8,-9,5,6,-3,6,-7,3,10,7,-2,-8,5,-10,-8,5,3,1,-5,1,-5,-1,-1,-8,2,5,-2,10,10,8,-3,5,7,3,6,10,-3,4,7,7,7,1,4,9,-3,3,9,1,6,8,2,-1,-8,8,-7,5,6,5,9,-3,2,8,4,7,-5,-9,-10,-1,5,6,-4,-8,-8,10,9,-2,9,-2,1,-10,2,-3,-2,-5,-6,9,-5,-10,-9,10,4,-9,-2,-4,10,-9,-5,-9,1,-4,-6,-8,-1,3,9,-10,-7,-5,-9,4,-7,6,-9,1,-8,6,-7,4,-3,7,-2,6,-5,-10,4,-8,9,2,-6,8,7,9,-8,-3,-1,4,7,-5,-5,-9,-1,9,-10,7,-6,-1,1,-7,4,-2,10,10,-8,-2,-2,-1,9,-2,-10,4,-8,-9,4,9,-7,2,-7,-7,-9,-7,3,1,-7,-10,4,3,8,10,-9,9,-10,-3,5,-1,2,-3,-7,8,9,-2,-3,-4,8,-4,-5,-3,4,-9,10,3,-1,9,-1,3,-9,3,-2,5,-3,9,4,2,-9,-8,2,-3,6,-2,-2,-6,-1,-3,8,-5,8,10,5,9,2,5,9,-8,1,-1,-6,-4,-6,2,-6,6,2,-8,-5,-2,-6,-10,6,-9,7,-2,7,-9,-4,8,9,-5,-7,7,10,8,8,-1,5,3,-10,-4,-10,1,-6,-5,-10,-4,-1,-10,10,-9,7,3,9,-3,-1,-7,1,-7,4,10,10,2,4,-4,-9,3,2,7,9,2,8,1,5,4,9,5,9,1,-9,-8,-10,4,6,-3,1,5,5,9,-5,9,-9,3,2,-1,-1,-7,1,-2,3,2,-1,5,4,-5,-7,2,1,-3,-9,1,-7,-8,-2,-5,-6,-10,5,-4,-9,7,5,1,-3,8,9,10,2,4,10,10,8,6,7,-2,1,2,9,4,8,-3,-3,-2,-3,-8,8,3,-10,-9,9,5,1,5,-1,-1,1,5,-7,9,-5,-6,-5,-7,6,-3,-9,4,-8,-9,10,-9,4,-6,-2,2,2,-10,-5,-5,3,7,-8,2,-9,-4,-1,-1,6,-5,-2,8,4,-4,-5,1,9,-1,-8,3,-4,-8,10,1,9,-6,4,9,-2,-1,2,-4,-2,7,10,9,7,-10,-9,4,-8,8,-6,3,10,6,6,4,-7,-7,-3,10,6,-6,10,10,2,-3,7,-8,-10,10,4,-3,6,-5,-8,8,4,8,6,5,8,-8,-4,3,-9,-9,8,6,-5,3,-8,7,7,-8,-3,-10,-1,-7,5,10,-2,8,2,-4,-7,-10,9,6,3,10,-7,9,1,4,8,1,-2,2,5,2,-6,-6,2,-3,-4,-4,-7,10,1,-3,7,-10,5,6,1,-3,-2,2,-10,2,-1,-6,9,6,9,10,-5,8,4,3,4,2,4,-2,10,10,-10,10,2,9,5,-1,2,2,3,-3,1,3,-1,10,10,-5,-8,-8,-10,4,-10,6,4,2,-1,-6,-2,8,5,7,1,6,6,10,4,-1,-10,-6,5,6,3,-10,3,10,-9,-5,-10,10,6,-4,-5,-3,-2,-1,-7,2,-9,6,-2,3,-5,2,1,1,-3,6,-10,2,9,8,2,-9,4,-6,2,-10,8,-2,5,4,8,5,-10,1,-4,-7,-1,-9,2,3,-5,-10,-6,-1,6,10,-7,6,-4,9,6,-4,4,1,-9,9,9,6,-4,8,-6,5,-3,-3,8,3,-9,10,-10,-9,-5,-4,10,2,9,-5,8,8,-1,-8,-4,2,10,9,2,1,-8,4,7,3,7,2,-8,-7,-5,9,-6,5,4,7,1,3,-5,9,-4,9,-8,7,3,-6,-10,8,-7,-3,-6,-7,8,-8,9,-6,-10,6,-8,-6,8,-1,-9,6,3,-7,10,10,3,3,-7,-7,-4,7,-8,2,6,-6,-2,1,2,8,1,1,6,-6,-1,-2,-5,-6,3,-1,-1,4,-9,-3,-2,-4,7,-4,9,7,-4,6,7,4,-2,-7,-2,-8,-5,-4,10,-9,-5,-1,5,-8,-5,10,-8,10,-9,-3,-9,2,4,2,-3,-2,-5,5,-10,-1,-9], dtype = "uint64")#candidate|93|(896,)|const|uint64
call_91 = func_58_call(relay.reshape(const_92.astype('uint64'), [14, 8, 1]), relay.reshape(const_93.astype('uint64'), [14, 8, 8]), )
call_94 = func_58_call(relay.reshape(const_92.astype('uint64'), [14, 8, 1]), relay.reshape(const_93.astype('uint64'), [14, 8, 8]), )
bop_95 = relay.right_shift(call_91.astype('int64'), relay.reshape(const_93.astype('int64'), relay.shape_of(call_91))) # shape=(14, 8, 8)
bop_98 = relay.right_shift(call_94.astype('int64'), relay.reshape(const_93.astype('int64'), relay.shape_of(call_94))) # shape=(14, 8, 8)
output = relay.Tuple([bop_85,const_92,bop_95,])
output2 = relay.Tuple([bop_85,const_92,bop_98,])
func_111 = relay.Function([var_84,], output)
mod['func_111'] = func_111
mod = relay.transform.InferType()(mod)
var_112 = relay.var("var_112", dtype = "int16", shape = (6,))#candidate|112|(6,)|var|int16
output = func_111(var_112)
func_113 = relay.Function([var_112], output)
mutated_mod['func_113'] = func_113
mutated_mod = relay.transform.InferType()(mutated_mod)
var_166 = relay.var("var_166", dtype = "float32", shape = (12, 12, 9))#candidate|166|(12, 12, 9)|var|float32
uop_167 = relay.exp(var_166.astype('float32')) # shape=(12, 12, 9)
var_171 = relay.var("var_171", dtype = "float32", shape = (12, 12, 9))#candidate|171|(12, 12, 9)|var|float32
bop_172 = relay.minimum(uop_167.astype('float32'), relay.reshape(var_171.astype('float32'), relay.shape_of(uop_167))) # shape=(12, 12, 9)
bop_178 = relay.subtract(bop_172.astype('int8'), relay.reshape(uop_167.astype('int8'), relay.shape_of(bop_172))) # shape=(12, 12, 9)
uop_181 = relay.asinh(uop_167.astype('float32')) # shape=(12, 12, 9)
bop_185 = relay.bitwise_or(uop_181.astype('int8'), relay.reshape(var_166.astype('int8'), relay.shape_of(uop_181))) # shape=(12, 12, 9)
bop_188 = relay.logical_and(uop_181.astype('bool'), relay.reshape(bop_178.astype('bool'), relay.shape_of(uop_181))) # shape=(12, 12, 9)
var_193 = relay.var("var_193", dtype = "float32", shape = (12, 12, 9))#candidate|193|(12, 12, 9)|var|float32
bop_194 = relay.floor_mod(bop_172.astype('float64'), relay.reshape(var_193.astype('float64'), relay.shape_of(bop_172))) # shape=(12, 12, 9)
uop_198 = relay.sqrt(uop_167.astype('float64')) # shape=(12, 12, 9)
func_111_call = mod.get_global_var('func_111')
func_113_call = mutated_mod.get_global_var('func_113')
var_202 = relay.var("var_202", dtype = "int16", shape = (6,))#candidate|202|(6,)|var|int16
call_201 = relay.TupleGetItem(func_111_call(relay.reshape(var_202.astype('int16'), [6,])), 0)
call_203 = relay.TupleGetItem(func_113_call(relay.reshape(var_202.astype('int16'), [6,])), 0)
uop_212 = relay.log2(uop_198.astype('float32')) # shape=(12, 12, 9)
uop_215 = relay.cosh(uop_212.astype('float64')) # shape=(12, 12, 9)
uop_217 = relay.tan(uop_212.astype('float64')) # shape=(12, 12, 9)
uop_220 = relay.rsqrt(uop_198.astype('float64')) # shape=(12, 12, 9)
var_223 = relay.var("var_223", dtype = "float64", shape = (12, 12, 9))#candidate|223|(12, 12, 9)|var|float64
bop_224 = relay.greater(uop_215.astype('bool'), relay.reshape(var_223.astype('bool'), relay.shape_of(uop_215))) # shape=(12, 12, 9)
output = relay.Tuple([bop_185,bop_188,bop_194,call_201,var_202,uop_217,uop_220,bop_224,])
output2 = relay.Tuple([bop_185,bop_188,bop_194,call_203,var_202,uop_217,uop_220,bop_224,])
func_229 = relay.Function([var_166,var_171,var_193,var_202,var_223,], output)
mod['func_229'] = func_229
mod = relay.transform.InferType()(mod)
mutated_mod['func_229'] = func_229
mutated_mod = relay.transform.InferType()(mutated_mod)
func_229_call = mutated_mod.get_global_var('func_229')
var_231 = relay.var("var_231", dtype = "float32", shape = (12, 12, 9))#candidate|231|(12, 12, 9)|var|float32
var_232 = relay.var("var_232", dtype = "float32", shape = (12, 12, 9))#candidate|232|(12, 12, 9)|var|float32
var_233 = relay.var("var_233", dtype = "float32", shape = (12, 12, 9))#candidate|233|(12, 12, 9)|var|float32
var_234 = relay.var("var_234", dtype = "int16", shape = (6,))#candidate|234|(6,)|var|int16
var_235 = relay.var("var_235", dtype = "float64", shape = (12, 12, 9))#candidate|235|(12, 12, 9)|var|float64
call_230 = func_229_call(var_231,var_232,var_233,var_234,var_235,)
output = call_230
func_236 = relay.Function([var_231,var_232,var_233,var_234,var_235,], output)
mutated_mod['func_236'] = func_236
mutated_mod = relay.transform.InferType()(mutated_mod)
var_267 = relay.var("var_267", dtype = "int32", shape = ())#candidate|267|()|var|int32
var_268 = relay.var("var_268", dtype = "int32", shape = (2, 13, 8))#candidate|268|(2, 13, 8)|var|int32
bop_269 = relay.maximum(var_267.astype('int32'), var_268.astype('int32')) # shape=(2, 13, 8)
output = relay.Tuple([bop_269,])
output2 = relay.Tuple([bop_269,])
func_274 = relay.Function([var_267,var_268,], output)
mod['func_274'] = func_274
mod = relay.transform.InferType()(mod)
mutated_mod['func_274'] = func_274
mutated_mod = relay.transform.InferType()(mutated_mod)
func_274_call = mutated_mod.get_global_var('func_274')
var_276 = relay.var("var_276", dtype = "int32", shape = ())#candidate|276|()|var|int32
var_277 = relay.var("var_277", dtype = "int32", shape = (2, 13, 8))#candidate|277|(2, 13, 8)|var|int32
call_275 = func_274_call(var_276,var_277,)
output = call_275
func_278 = relay.Function([var_276,var_277,], output)
mutated_mod['func_278'] = func_278
mutated_mod = relay.transform.InferType()(mutated_mod)
var_290 = relay.var("var_290", dtype = "int32", shape = (3,))#candidate|290|(3,)|var|int32
var_291 = relay.var("var_291", dtype = "int32", shape = (3,))#candidate|291|(3,)|var|int32
bop_292 = relay.right_shift(var_290.astype('int32'), relay.reshape(var_291.astype('int32'), relay.shape_of(var_290))) # shape=(3,)
output = relay.Tuple([bop_292,])
output2 = relay.Tuple([bop_292,])
func_298 = relay.Function([var_290,var_291,], output)
mod['func_298'] = func_298
mod = relay.transform.InferType()(mod)
var_299 = relay.var("var_299", dtype = "int32", shape = (3,))#candidate|299|(3,)|var|int32
var_300 = relay.var("var_300", dtype = "int32", shape = (3,))#candidate|300|(3,)|var|int32
output = func_298(var_299,var_300,)
func_301 = relay.Function([var_299,var_300,], output)
mutated_mod['func_301'] = func_301
mutated_mod = relay.transform.InferType()(mutated_mod)
var_306 = relay.var("var_306", dtype = "float32", shape = (4, 7))#candidate|306|(4, 7)|var|float32
uop_307 = relay.erf(var_306.astype('float32')) # shape=(4, 7)
bop_312 = relay.less_equal(uop_307.astype('bool'), relay.reshape(var_306.astype('bool'), relay.shape_of(uop_307))) # shape=(4, 7)
var_316 = relay.var("var_316", dtype = "float32", shape = (4, 7))#candidate|316|(4, 7)|var|float32
bop_317 = relay.subtract(uop_307.astype('float64'), relay.reshape(var_316.astype('float64'), relay.shape_of(uop_307))) # shape=(4, 7)
output = relay.Tuple([bop_312,bop_317,])
output2 = relay.Tuple([bop_312,bop_317,])
func_320 = relay.Function([var_306,var_316,], output)
mod['func_320'] = func_320
mod = relay.transform.InferType()(mod)
var_321 = relay.var("var_321", dtype = "float32", shape = (4, 7))#candidate|321|(4, 7)|var|float32
var_322 = relay.var("var_322", dtype = "float32", shape = (4, 7))#candidate|322|(4, 7)|var|float32
output = func_320(var_321,var_322,)
func_323 = relay.Function([var_321,var_322,], output)
mutated_mod['func_323'] = func_323
mutated_mod = relay.transform.InferType()(mutated_mod)
var_382 = relay.var("var_382", dtype = "float32", shape = (5, 11))#candidate|382|(5, 11)|var|float32
uop_383 = relay.atan(var_382.astype('float32')) # shape=(5, 11)
const_390 = relay.const([[4.027616,-9.249451,5.204480,3.149557,3.712527,-1.375123,-9.921907,-8.015173,-1.143894,-6.831387,7.129276],[4.672055,-9.029004,-7.951490,-1.333899,6.972683,1.665777,8.310905,-9.955883,6.589735,-5.960981,1.153532],[9.928547,-1.323611,1.929954,9.820101,0.840342,-7.289821,8.131875,-9.056306,-5.386626,5.570541,6.392077],[-5.536909,6.224817,3.182344,2.287702,-9.151764,-1.962280,9.836107,7.399541,-2.697919,4.869355,-2.816055],[-3.062671,-6.521274,-7.864405,-9.255473,-2.962455,-8.490673,-0.247010,4.226384,-3.204451,-0.283484,3.857009]], dtype = "float32")#candidate|390|(5, 11)|const|float32
bop_391 = relay.minimum(uop_383.astype('int64'), relay.reshape(const_390.astype('int64'), relay.shape_of(uop_383))) # shape=(5, 11)
bop_396 = relay.equal(bop_391.astype('bool'), relay.reshape(uop_383.astype('bool'), relay.shape_of(bop_391))) # shape=(5, 11)
func_111_call = mod.get_global_var('func_111')
func_113_call = mutated_mod.get_global_var('func_113')
var_406 = relay.var("var_406", dtype = "int16", shape = (6,))#candidate|406|(6,)|var|int16
call_405 = relay.TupleGetItem(func_111_call(relay.reshape(var_406.astype('int16'), [6,])), 2)
call_407 = relay.TupleGetItem(func_113_call(relay.reshape(var_406.astype('int16'), [6,])), 2)
func_274_call = mod.get_global_var('func_274')
func_278_call = mutated_mod.get_global_var('func_278')
const_409 = relay.const(-4, dtype = "int32")#candidate|409|()|const|int32
var_410 = relay.var("var_410", dtype = "int32", shape = (208,))#candidate|410|(208,)|var|int32
call_408 = relay.TupleGetItem(func_274_call(relay.reshape(const_409.astype('int32'), []), relay.reshape(var_410.astype('int32'), [2, 13, 8]), ), 0)
call_411 = relay.TupleGetItem(func_278_call(relay.reshape(const_409.astype('int32'), []), relay.reshape(var_410.astype('int32'), [2, 13, 8]), ), 0)
bop_412 = relay.add(uop_383.astype('int64'), relay.reshape(bop_396.astype('int64'), relay.shape_of(uop_383))) # shape=(5, 11)
uop_416 = relay.sigmoid(bop_391.astype('float64')) # shape=(5, 11)
uop_418 = relay.rsqrt(uop_416.astype('float64')) # shape=(5, 11)
const_420 = relay.const([[-6.167531,6.236211,-5.167711,5.146685,2.037750,7.352175,8.457008,0.274513,4.491557,-6.316882,-5.571308],[8.072221,3.284343,-1.090326,-3.506484,0.011581,-7.403327,0.569087,-2.121338,-0.334754,-5.631436,-1.049252],[-2.931571,8.018870,-5.943203,-5.413598,4.823433,3.584440,-2.584994,-9.210902,4.625984,6.713726,9.862358],[1.989709,-3.734115,5.362577,6.397888,-5.459669,-8.363947,4.973781,-3.024041,2.262678,2.460019,-9.286716],[-0.362700,-1.836812,-4.269535,5.109199,5.579453,2.160724,2.533092,-5.631250,-1.774805,-1.916579,-3.198546]], dtype = "float64")#candidate|420|(5, 11)|const|float64
bop_421 = relay.subtract(uop_418.astype('uint64'), relay.reshape(const_420.astype('uint64'), relay.shape_of(uop_418))) # shape=(5, 11)
uop_424 = relay.tan(bop_421.astype('float32')) # shape=(5, 11)
output = relay.Tuple([call_405,var_406,call_408,const_409,var_410,bop_412,uop_424,])
output2 = relay.Tuple([call_407,var_406,call_411,const_409,var_410,bop_412,uop_424,])
func_428 = relay.Function([var_382,var_406,var_410,], output)
mod['func_428'] = func_428
mod = relay.transform.InferType()(mod)
mutated_mod['func_428'] = func_428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_428_call = mutated_mod.get_global_var('func_428')
var_430 = relay.var("var_430", dtype = "float32", shape = (5, 11))#candidate|430|(5, 11)|var|float32
var_431 = relay.var("var_431", dtype = "int16", shape = (6,))#candidate|431|(6,)|var|int16
var_432 = relay.var("var_432", dtype = "int32", shape = (208,))#candidate|432|(208,)|var|int32
call_429 = func_428_call(var_430,var_431,var_432,)
output = call_429
func_433 = relay.Function([var_430,var_431,var_432,], output)
mutated_mod['func_433'] = func_433
mutated_mod = relay.transform.InferType()(mutated_mod)
var_454 = relay.var("var_454", dtype = "float32", shape = (13, 9, 8))#candidate|454|(13, 9, 8)|var|float32
uop_455 = relay.asin(var_454.astype('float32')) # shape=(13, 9, 8)
output = uop_455
output2 = uop_455
func_457 = relay.Function([var_454,], output)
mod['func_457'] = func_457
mod = relay.transform.InferType()(mod)
var_458 = relay.var("var_458", dtype = "float32", shape = (13, 9, 8))#candidate|458|(13, 9, 8)|var|float32
output = func_457(var_458)
func_459 = relay.Function([var_458], output)
mutated_mod['func_459'] = func_459
mutated_mod = relay.transform.InferType()(mutated_mod)
const_467 = relay.const([[[7.600711,2.534923,-6.820655,-3.369051,7.921406,5.375917,3.008654,-0.994525],[3.733517,2.031125,-5.265202,6.964158,4.223253,-1.716749,8.991077,1.462664],[5.751567,2.791386,9.918779,-3.435838,2.270396,1.187243,7.359578,-4.045621],[7.829560,7.705905,7.434623,2.740116,-9.968773,-5.921320,-8.425643,-2.699756],[-8.795596,3.567750,-3.903653,-4.702321,-7.660295,-9.619639,8.925446,-9.913898],[-3.999978,2.873917,-4.173907,-9.850920,-1.832582,-7.463059,5.785453,8.233297]],[[-5.911154,5.413234,-3.716460,2.544118,3.250686,-6.570473,-9.849427,1.972929],[-7.788469,-4.500896,-6.417671,3.140426,7.114721,1.909662,0.451793,9.091965],[3.828101,-8.977425,-6.732402,-4.503556,3.378515,8.272057,-0.925508,-1.232401],[0.483607,5.575182,9.493441,-8.269573,0.358931,8.777179,-8.074048,-1.029316],[6.558313,3.042224,-8.609329,-7.634066,9.821332,9.728816,-4.800120,-4.069990],[-3.146024,2.438898,5.227944,0.004052,0.987198,6.230873,9.288394,-0.119226]],[[-3.532149,-5.978059,6.662567,-3.634315,-0.580759,-0.393613,6.803414,-1.413604],[5.783407,0.815615,-5.616879,4.096706,-3.757265,6.478880,-2.041116,-4.325710],[-7.504349,-5.707998,2.492645,-0.325469,-7.741891,6.755999,0.988968,-3.577220],[4.253373,2.341604,-5.952504,-6.757386,4.375862,-4.052731,0.102641,-3.927682],[7.995209,5.544985,1.777008,2.537913,1.514696,0.112384,-9.600368,8.302047],[-4.495283,9.203389,0.013825,0.092707,-1.238298,-6.306866,-3.783499,8.724055]],[[4.263969,4.174963,-8.010129,1.723372,5.969676,-8.442425,-5.401172,4.820601],[0.474286,7.289091,-8.333775,8.277315,-6.010607,-8.270246,5.475704,-7.314890],[8.933073,6.187026,-4.394117,6.861203,-4.398428,-8.104744,8.507081,3.626047],[-0.833140,1.961350,7.670535,7.410047,-7.061264,-9.265720,8.639231,7.020507],[-7.948024,-6.556664,4.547647,-4.145583,-5.573491,-3.112172,2.069103,-9.333288],[-8.196632,-9.366388,-9.567800,6.534637,-3.503954,-4.636168,-3.321344,-5.795891]],[[9.768379,-9.303392,-8.555149,-9.789529,5.834950,-2.806632,-5.716118,-6.501616],[-1.042473,-2.226295,8.332476,2.681432,5.353103,2.405915,1.162134,3.371200],[8.133539,1.777170,-9.741782,-7.520983,-6.094770,-8.057997,5.223075,8.974063],[-8.762784,-8.801305,0.310042,8.491004,-4.515706,5.197301,-9.915977,-9.889993],[-0.180679,7.786260,2.589895,-5.938175,-8.530721,-9.178797,6.540174,3.851170],[9.857105,5.388011,7.158140,4.479131,-0.358474,-0.217059,6.852197,-1.884308]]], dtype = "float32")#candidate|467|(5, 6, 8)|const|float32
uop_468 = relay.atanh(const_467.astype('float32')) # shape=(5, 6, 8)
func_298_call = mod.get_global_var('func_298')
func_301_call = mutated_mod.get_global_var('func_301')
var_471 = relay.var("var_471", dtype = "int32", shape = (3,))#candidate|471|(3,)|var|int32
call_470 = relay.TupleGetItem(func_298_call(relay.reshape(var_471.astype('int32'), [3,]), relay.reshape(var_471.astype('int32'), [3,]), ), 0)
call_472 = relay.TupleGetItem(func_301_call(relay.reshape(var_471.astype('int32'), [3,]), relay.reshape(var_471.astype('int32'), [3,]), ), 0)
uop_477 = relay.asinh(const_467.astype('float64')) # shape=(5, 6, 8)
output = relay.Tuple([uop_468,call_470,var_471,uop_477,])
output2 = relay.Tuple([uop_468,call_472,var_471,uop_477,])
func_479 = relay.Function([var_471,], output)
mod['func_479'] = func_479
mod = relay.transform.InferType()(mod)
var_480 = relay.var("var_480", dtype = "int32", shape = (3,))#candidate|480|(3,)|var|int32
output = func_479(var_480)
func_481 = relay.Function([var_480], output)
mutated_mod['func_481'] = func_481
mutated_mod = relay.transform.InferType()(mutated_mod)
var_495 = relay.var("var_495", dtype = "float32", shape = ())#candidate|495|()|var|float32
const_496 = relay.const([[-8.785435,-6.991318,-4.516152,8.272056,-0.133276,-6.175348,2.893732,6.931193,1.093743,-9.608074,1.894853,4.508622,-9.412703,5.794353,-0.680155,-2.446186],[-2.728095,-9.063445,-9.226290,-2.223542,-8.033702,5.283476,-7.524968,7.003604,-7.627858,-2.667633,2.968110,-1.650364,7.497334,5.961988,5.729407,-8.843696],[-0.234049,-6.896120,4.747814,1.735019,-8.666006,4.733684,0.022572,-0.353326,0.503525,-8.738398,-5.098711,-7.724552,-3.059563,-5.264614,3.288452,-1.653974],[7.752785,-3.964997,2.321394,-0.784339,-7.544114,-0.250067,-2.423447,3.752373,5.556209,2.782303,7.294064,1.721158,5.471249,3.532803,0.945629,-4.035951],[-3.487225,9.637135,3.277001,9.833609,1.217093,6.376051,-4.485657,0.916925,-9.685049,-5.220911,-3.304755,-7.940554,1.439349,0.401279,6.808397,0.586316],[-4.560327,0.718796,9.042314,-3.452851,-6.535079,-6.356577,-5.327820,-0.299260,-0.304994,-8.356114,6.305690,-9.413815,-6.696884,5.032784,-6.142258,-8.658603],[7.342839,-9.329995,-1.296273,6.469837,-2.082050,-3.127983,-9.476180,-6.991631,0.866051,7.764745,8.186933,7.772929,4.922503,6.742513,2.520542,0.912927],[8.971775,4.979155,-9.639070,-7.477693,8.942896,9.613890,8.560020,-0.220587,2.231563,6.884741,-8.021437,-1.020535,0.547731,8.138108,8.419218,0.908511],[-9.769205,3.529253,-6.681097,9.077035,-8.417471,3.600644,-5.302551,-5.524805,5.000734,-2.859866,-1.451958,-5.371422,-9.016542,-4.432787,-7.025418,-0.924292]], dtype = "float32")#candidate|496|(9, 16)|const|float32
bop_497 = relay.equal(var_495.astype('bool'), const_496.astype('bool')) # shape=(9, 16)
func_479_call = mod.get_global_var('func_479')
func_481_call = mutated_mod.get_global_var('func_481')
const_501 = relay.const([2,10,9], dtype = "int32")#candidate|501|(3,)|const|int32
call_500 = relay.TupleGetItem(func_479_call(relay.reshape(const_501.astype('int32'), [3,])), 2)
call_502 = relay.TupleGetItem(func_481_call(relay.reshape(const_501.astype('int32'), [3,])), 2)
func_274_call = mod.get_global_var('func_274')
func_278_call = mutated_mod.get_global_var('func_278')
var_507 = relay.var("var_507", dtype = "int32", shape = (208,))#candidate|507|(208,)|var|int32
call_506 = relay.TupleGetItem(func_274_call(relay.reshape(var_495.astype('int32'), []), relay.reshape(var_507.astype('int32'), [2, 13, 8]), ), 0)
call_508 = relay.TupleGetItem(func_278_call(relay.reshape(var_495.astype('int32'), []), relay.reshape(var_507.astype('int32'), [2, 13, 8]), ), 0)
bop_509 = relay.greater(const_496.astype('bool'), relay.reshape(bop_497.astype('bool'), relay.shape_of(const_496))) # shape=(9, 16)
uop_512 = relay.asin(bop_509.astype('float32')) # shape=(9, 16)
bop_515 = relay.minimum(uop_512.astype('uint8'), relay.reshape(const_496.astype('uint8'), relay.shape_of(uop_512))) # shape=(9, 16)
var_520 = relay.var("var_520", dtype = "uint8", shape = (9, 16))#candidate|520|(9, 16)|var|uint8
bop_521 = relay.mod(bop_515.astype('float64'), relay.reshape(var_520.astype('float64'), relay.shape_of(bop_515))) # shape=(9, 16)
output = relay.Tuple([call_500,const_501,call_506,var_507,bop_521,])
output2 = relay.Tuple([call_502,const_501,call_508,var_507,bop_521,])
func_525 = relay.Function([var_495,var_507,var_520,], output)
mod['func_525'] = func_525
mod = relay.transform.InferType()(mod)
var_526 = relay.var("var_526", dtype = "float32", shape = ())#candidate|526|()|var|float32
var_527 = relay.var("var_527", dtype = "int32", shape = (208,))#candidate|527|(208,)|var|int32
var_528 = relay.var("var_528", dtype = "uint8", shape = (9, 16))#candidate|528|(9, 16)|var|uint8
output = func_525(var_526,var_527,var_528,)
func_529 = relay.Function([var_526,var_527,var_528,], output)
mutated_mod['func_529'] = func_529
mutated_mod = relay.transform.InferType()(mutated_mod)
var_544 = relay.var("var_544", dtype = "float64", shape = (16, 8, 3))#candidate|544|(16, 8, 3)|var|float64
var_545 = relay.var("var_545", dtype = "float64", shape = (16, 8, 3))#candidate|545|(16, 8, 3)|var|float64
bop_546 = relay.multiply(var_544.astype('float64'), relay.reshape(var_545.astype('float64'), relay.shape_of(var_544))) # shape=(16, 8, 3)
bop_550 = relay.logical_xor(var_544.astype('uint16'), relay.reshape(var_545.astype('uint16'), relay.shape_of(var_544))) # shape=(16, 8, 3)
bop_555 = relay.left_shift(bop_550.astype('uint32'), relay.reshape(var_544.astype('uint32'), relay.shape_of(bop_550))) # shape=(16, 8, 3)
func_111_call = mod.get_global_var('func_111')
func_113_call = mutated_mod.get_global_var('func_113')
const_559 = relay.const([7,4,-9,4,8,1], dtype = "int16")#candidate|559|(6,)|const|int16
call_558 = relay.TupleGetItem(func_111_call(relay.reshape(const_559.astype('int16'), [6,])), 1)
call_560 = relay.TupleGetItem(func_113_call(relay.reshape(const_559.astype('int16'), [6,])), 1)
output = relay.Tuple([bop_546,bop_555,call_558,const_559,])
output2 = relay.Tuple([bop_546,bop_555,call_560,const_559,])
func_572 = relay.Function([var_544,var_545,], output)
mod['func_572'] = func_572
mod = relay.transform.InferType()(mod)
var_573 = relay.var("var_573", dtype = "float64", shape = (16, 8, 3))#candidate|573|(16, 8, 3)|var|float64
var_574 = relay.var("var_574", dtype = "float64", shape = (16, 8, 3))#candidate|574|(16, 8, 3)|var|float64
output = func_572(var_573,var_574,)
func_575 = relay.Function([var_573,var_574,], output)
mutated_mod['func_575'] = func_575
mutated_mod = relay.transform.InferType()(mutated_mod)
var_622 = relay.var("var_622", dtype = "float32", shape = (9, 15, 4))#candidate|622|(9, 15, 4)|var|float32
uop_623 = relay.sqrt(var_622.astype('float32')) # shape=(9, 15, 4)
bop_625 = relay.left_shift(uop_623.astype('uint16'), relay.reshape(var_622.astype('uint16'), relay.shape_of(uop_623))) # shape=(9, 15, 4)
bop_637 = relay.subtract(uop_623.astype('int8'), relay.reshape(bop_625.astype('int8'), relay.shape_of(uop_623))) # shape=(9, 15, 4)
func_572_call = mod.get_global_var('func_572')
func_575_call = mutated_mod.get_global_var('func_575')
var_641 = relay.var("var_641", dtype = "float64", shape = (24, 16))#candidate|641|(24, 16)|var|float64
call_640 = relay.TupleGetItem(func_572_call(relay.reshape(var_641.astype('float64'), [16, 8, 3]), relay.reshape(var_641.astype('float64'), [16, 8, 3]), ), 2)
call_642 = relay.TupleGetItem(func_575_call(relay.reshape(var_641.astype('float64'), [16, 8, 3]), relay.reshape(var_641.astype('float64'), [16, 8, 3]), ), 2)
bop_644 = relay.multiply(bop_637.astype('uint64'), relay.reshape(bop_625.astype('uint64'), relay.shape_of(bop_637))) # shape=(9, 15, 4)
uop_648 = relay.log2(bop_637.astype('float32')) # shape=(9, 15, 4)
uop_653 = relay.erf(bop_637.astype('float32')) # shape=(9, 15, 4)
uop_657 = relay.asin(uop_653.astype('float32')) # shape=(9, 15, 4)
uop_659 = relay.log(uop_623.astype('float64')) # shape=(9, 15, 4)
bop_662 = relay.greater_equal(uop_657.astype('bool'), relay.reshape(var_622.astype('bool'), relay.shape_of(uop_657))) # shape=(9, 15, 4)
func_111_call = mod.get_global_var('func_111')
func_113_call = mutated_mod.get_global_var('func_113')
var_666 = relay.var("var_666", dtype = "int16", shape = (6,))#candidate|666|(6,)|var|int16
call_665 = relay.TupleGetItem(func_111_call(relay.reshape(var_666.astype('int16'), [6,])), 0)
call_667 = relay.TupleGetItem(func_113_call(relay.reshape(var_666.astype('int16'), [6,])), 0)
func_229_call = mod.get_global_var('func_229')
func_236_call = mutated_mod.get_global_var('func_236')
var_669 = relay.var("var_669", dtype = "float32", shape = (1296,))#candidate|669|(1296,)|var|float32
call_668 = relay.TupleGetItem(func_229_call(relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(call_665.astype('int16'), [6,]), relay.reshape(var_669.astype('float64'), [12, 12, 9]), ), 3)
call_670 = relay.TupleGetItem(func_236_call(relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(call_665.astype('int16'), [6,]), relay.reshape(var_669.astype('float64'), [12, 12, 9]), ), 3)
func_229_call = mod.get_global_var('func_229')
func_236_call = mutated_mod.get_global_var('func_236')
call_671 = relay.TupleGetItem(func_229_call(relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(call_665.astype('int16'), [6,]), relay.reshape(var_669.astype('float64'), [12, 12, 9]), ), 5)
call_672 = relay.TupleGetItem(func_236_call(relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(var_669.astype('float32'), [12, 12, 9]), relay.reshape(call_665.astype('int16'), [6,]), relay.reshape(var_669.astype('float64'), [12, 12, 9]), ), 5)
var_673 = relay.var("var_673", dtype = "float32", shape = (9, 15, 4))#candidate|673|(9, 15, 4)|var|float32
bop_674 = relay.maximum(uop_653.astype('int16'), relay.reshape(var_673.astype('int16'), relay.shape_of(uop_653))) # shape=(9, 15, 4)
func_572_call = mod.get_global_var('func_572')
func_575_call = mutated_mod.get_global_var('func_575')
call_677 = relay.TupleGetItem(func_572_call(relay.reshape(var_641.astype('float64'), [16, 8, 3]), relay.reshape(var_641.astype('float64'), [16, 8, 3]), ), 2)
call_678 = relay.TupleGetItem(func_575_call(relay.reshape(var_641.astype('float64'), [16, 8, 3]), relay.reshape(var_641.astype('float64'), [16, 8, 3]), ), 2)
uop_682 = relay.sin(uop_657.astype('float32')) # shape=(9, 15, 4)
var_688 = relay.var("var_688", dtype = "float32", shape = (9, 15, 4))#candidate|688|(9, 15, 4)|var|float32
bop_689 = relay.not_equal(uop_682.astype('bool'), relay.reshape(var_688.astype('bool'), relay.shape_of(uop_682))) # shape=(9, 15, 4)
bop_692 = relay.bitwise_and(uop_648.astype('uint16'), relay.reshape(bop_689.astype('uint16'), relay.shape_of(uop_648))) # shape=(9, 15, 4)
var_696 = relay.var("var_696", dtype = "float32", shape = (9, 15, 4))#candidate|696|(9, 15, 4)|var|float32
bop_697 = relay.add(uop_657.astype('int64'), relay.reshape(var_696.astype('int64'), relay.shape_of(uop_657))) # shape=(9, 15, 4)
uop_702 = relay.atan(uop_682.astype('float32')) # shape=(9, 15, 4)
output = relay.Tuple([call_640,var_641,bop_644,uop_659,bop_662,call_665,var_666,call_668,var_669,call_671,bop_674,call_677,bop_692,bop_697,uop_702,])
output2 = relay.Tuple([call_642,var_641,bop_644,uop_659,bop_662,call_667,var_666,call_670,var_669,call_672,bop_674,call_678,bop_692,bop_697,uop_702,])
func_708 = relay.Function([var_622,var_641,var_666,var_669,var_673,var_688,var_696,], output)
mod['func_708'] = func_708
mod = relay.transform.InferType()(mod)
var_709 = relay.var("var_709", dtype = "float32", shape = (9, 15, 4))#candidate|709|(9, 15, 4)|var|float32
var_710 = relay.var("var_710", dtype = "float64", shape = (24, 16))#candidate|710|(24, 16)|var|float64
var_711 = relay.var("var_711", dtype = "int16", shape = (6,))#candidate|711|(6,)|var|int16
var_712 = relay.var("var_712", dtype = "float32", shape = (1296,))#candidate|712|(1296,)|var|float32
var_713 = relay.var("var_713", dtype = "float32", shape = (9, 15, 4))#candidate|713|(9, 15, 4)|var|float32
var_714 = relay.var("var_714", dtype = "float32", shape = (9, 15, 4))#candidate|714|(9, 15, 4)|var|float32
var_715 = relay.var("var_715", dtype = "float32", shape = (9, 15, 4))#candidate|715|(9, 15, 4)|var|float32
output = func_708(var_709,var_710,var_711,var_712,var_713,var_714,var_715,)
func_716 = relay.Function([var_709,var_710,var_711,var_712,var_713,var_714,var_715,], output)
mutated_mod['func_716'] = func_716
mutated_mod = relay.transform.InferType()(mutated_mod)
var_754 = relay.var("var_754", dtype = "int32", shape = (7, 14))#candidate|754|(7, 14)|var|int32
var_755 = relay.var("var_755", dtype = "int32", shape = (7, 14))#candidate|755|(7, 14)|var|int32
bop_756 = relay.minimum(var_754.astype('int32'), relay.reshape(var_755.astype('int32'), relay.shape_of(var_754))) # shape=(7, 14)
func_274_call = mod.get_global_var('func_274')
func_278_call = mutated_mod.get_global_var('func_278')
const_762 = relay.const(9, dtype = "int32")#candidate|762|()|const|int32
const_763 = relay.const([[-5,-6,-2,10,2,-2,-5,-8,-8,-2,7,-4,10,-8,-3,1,-3,-5,-10,4,6,-8,7,-7,4,-9,5,9,9,10,4,-10,-8,3,-1,-1,-1,7,-6,-2,-4,-3,-6,-4,-2,7,-6,2,-3,4,-9,8,-4,7,-9,-2,2,2,10,5,10,7,-10,-8,3,6,6,4,-10,4,4,4,3,-5,4,4,-3,-8,7,7,-9,-6,8,-9,-2,2,10,1,-4,6,-6,9,-9,-4,4,-10,4,-10,-5,3,-1,-3,-10,4],[-3,-1,-1,10,-1,10,-6,10,4,4,-8,-7,3,2,6,-9,-8,-8,5,1,-4,1,1,2,1,7,7,10,7,5,-8,2,7,5,10,5,-8,6,8,-5,7,8,-7,4,-10,7,5,4,-1,-3,-4,5,-9,-1,8,-5,9,9,-4,10,-3,-4,8,2,6,8,-8,-1,-3,-3,8,6,-3,-3,-9,3,-2,4,-4,9,4,9,10,10,-2,-6,2,6,-8,-4,-4,3,-5,-7,-3,-10,-4,10,9,-9,6,-1,-1,4]], dtype = "int32")#candidate|763|(2, 104)|const|int32
call_761 = relay.TupleGetItem(func_274_call(relay.reshape(const_762.astype('int32'), []), relay.reshape(const_763.astype('int32'), [2, 13, 8]), ), 0)
call_764 = relay.TupleGetItem(func_278_call(relay.reshape(const_762.astype('int32'), []), relay.reshape(const_763.astype('int32'), [2, 13, 8]), ), 0)
output = relay.Tuple([bop_756,call_761,const_762,const_763,])
output2 = relay.Tuple([bop_756,call_764,const_762,const_763,])
func_771 = relay.Function([var_754,var_755,], output)
mod['func_771'] = func_771
mod = relay.transform.InferType()(mod)
var_772 = relay.var("var_772", dtype = "int32", shape = (7, 14))#candidate|772|(7, 14)|var|int32
var_773 = relay.var("var_773", dtype = "int32", shape = (7, 14))#candidate|773|(7, 14)|var|int32
output = func_771(var_772,var_773,)
func_774 = relay.Function([var_772,var_773,], output)
mutated_mod['func_774'] = func_774
mutated_mod = relay.transform.InferType()(mutated_mod)
const_776 = relay.const([[[2.555869,-1.654549,-6.745773,-8.556491,-5.042851,9.436768,6.251316,6.016625,-9.396583,-6.372789,-8.002456,3.487558],[6.095075,-8.877053,3.813310,4.238162,0.715821,0.473959,4.175774,-4.030568,0.589308,5.220711,0.577426,-4.579823],[-7.065467,3.202319,3.712245,7.811302,-5.118263,0.209331,6.740048,-5.574407,-3.027878,0.363188,-8.526154,6.771178],[3.242638,-7.622874,9.686400,-0.883322,0.455949,-2.765921,-4.251178,8.675535,-3.163509,2.735366,9.787588,-3.777563],[6.744593,2.610383,2.610715,6.967137,1.936580,-4.823714,7.193566,9.872807,-6.055307,4.831752,0.548594,4.432264],[0.028664,-3.534452,6.091547,3.244608,-0.333327,-5.181823,0.798344,-2.593233,4.513397,-2.140165,-9.774982,7.148154]],[[5.510195,1.461671,7.372184,-3.639141,7.793332,-1.883324,-7.612266,2.277122,-7.790814,-4.453662,-1.028699,0.590644],[1.513206,-7.950404,8.159282,-7.601351,-1.902378,2.862467,5.050472,3.309042,-8.515497,4.470313,5.462712,8.164767],[-6.075247,8.442911,9.701095,-2.271587,-2.708821,-2.625861,-1.300919,7.826357,-8.359831,-4.899546,-8.748126,6.928891],[0.176624,3.607318,9.833134,8.186705,6.469765,-3.531945,5.764733,6.343294,1.958937,8.735740,9.540624,1.504395],[4.954744,8.698980,5.791917,0.372703,1.094057,4.877528,7.517628,-4.545345,5.696509,9.708835,3.295873,9.620365],[-1.532483,-8.110914,0.116128,-4.032289,7.072537,-5.467052,-9.427600,-3.369517,6.439503,-3.220644,-5.635758,3.420393]],[[-1.642250,-7.289992,5.838608,-6.042552,-2.421644,3.947944,-9.438121,-4.569098,8.061291,-9.703072,-3.548865,2.938278],[-6.071936,7.121309,-5.602266,6.848510,7.770608,-9.227228,4.158167,4.053928,8.329083,6.366704,-8.750035,-7.850134],[-7.384506,1.156617,1.464259,-8.847495,-5.947499,-0.271688,-5.288834,1.116205,2.458774,1.524552,6.927017,-3.065098],[3.093707,-2.560992,1.583198,-7.238575,-2.827458,1.338237,-0.097679,5.502966,6.212055,-5.969223,3.109977,6.606686],[6.290449,5.566544,3.224275,-8.078122,9.055400,-1.519737,2.460797,7.905692,-4.217217,9.744030,-9.335164,-2.562592],[-7.968513,-6.415905,-7.727269,-9.386155,-7.314889,-6.876291,3.453680,-3.610048,-5.406237,4.125407,0.035833,8.135534]],[[3.513611,9.388717,6.203842,1.627575,-2.873822,-9.493292,-6.099252,-7.148318,-8.092303,-5.283127,9.777563,2.316447],[-2.736128,3.815264,7.991275,0.782802,1.161688,-6.862830,-9.162132,-5.155603,7.784242,-9.183104,9.282351,-0.466091],[7.310975,3.453306,-7.639565,-5.374909,-0.586600,-3.363888,-6.889016,-0.762066,-7.600553,1.465952,6.039814,9.660643],[-1.886368,-3.316030,7.060749,4.293203,3.039762,8.228767,0.948989,-9.110015,-2.444287,1.061553,4.388755,-0.063512],[5.872694,-3.192846,-4.694447,3.346463,0.857007,-5.429064,5.820017,-6.545860,8.202276,-1.586388,4.040444,-1.290575],[5.392931,6.266951,8.622550,2.810550,7.370484,5.310684,4.188789,-8.467845,-1.700186,4.734712,-0.126448,4.055306]],[[-5.650343,4.179082,-5.683073,1.779916,3.460529,-0.696226,-4.704991,1.004156,-7.412035,6.256073,-5.842699,-2.284152],[1.494100,-3.437935,0.170237,1.649276,8.871694,-7.442896,-6.678595,1.232237,-8.036320,-4.368127,4.620918,-2.502697],[2.406952,-3.122846,8.879201,-2.671796,-8.062985,-7.806907,-4.411443,1.969353,-3.397757,-9.275255,0.137422,9.898952],[4.720519,7.962182,0.755926,-3.112243,1.256608,-4.321732,-0.483704,7.044069,7.722588,-9.189939,8.986428,1.685671],[9.400078,-4.701848,-1.030624,-9.347886,-5.628140,-0.179296,2.664756,-5.210851,5.176254,6.739608,1.852886,9.468626],[6.288505,5.934133,6.711892,-8.426105,-8.340154,-9.630096,-4.533919,-2.270662,-2.004110,3.772339,-8.711372,-6.749617]],[[-8.541832,8.419020,2.034265,3.699767,-1.527904,9.282841,2.026211,3.996715,3.062532,-6.677270,-6.687261,-7.273014],[-4.539334,4.644356,9.823168,-2.271681,0.765936,9.028540,-5.050377,1.198059,3.730496,6.713020,2.950448,-1.431187],[-4.838150,-7.660477,-4.751647,4.355445,-2.807123,4.165922,-8.793855,-5.436665,4.379753,-5.522103,-9.703520,-8.469210],[0.044933,-1.671120,-5.261433,9.758313,-4.650284,-4.785256,-3.123492,6.856965,-3.646752,-3.630301,-2.701058,-5.351500],[-6.204693,-4.793249,5.557820,6.693753,-2.162497,1.080725,-1.107610,4.820650,-6.301564,5.296988,9.947799,-8.901337],[3.223367,-5.590697,6.107536,1.441799,-5.687729,-7.981453,3.662658,-0.549325,2.385660,-2.353384,-8.537391,-7.263478]],[[7.823101,8.745724,-2.203753,-3.568671,-1.930906,-0.490155,-6.799227,6.874084,8.826741,-9.631917,6.340005,-7.130704],[-1.788864,0.185718,-3.078919,4.314458,7.892751,-0.060688,-5.891094,-6.872019,0.727949,-9.616980,-9.768098,-7.641453],[7.902993,-6.776725,9.171433,-4.799736,-2.896921,-6.397515,0.819594,-2.764198,-9.819166,2.181647,-6.314549,6.217072],[-2.343614,9.593188,-4.768221,-5.043224,-0.610264,-1.592354,2.300986,2.723691,-9.218394,-7.465360,1.395827,5.728294],[8.103470,5.057658,-1.090930,6.819855,-3.598031,1.107328,2.892284,7.330529,5.147321,0.957371,-5.987879,-0.957973],[7.530222,-9.694821,1.650383,-9.273728,-6.610752,-8.209501,2.474615,3.738646,-8.733900,-7.646218,-3.340953,4.286447]],[[0.253286,-3.506447,2.868251,5.314217,0.122561,-7.395420,2.063042,5.386202,-2.925070,-0.255524,-6.010431,1.119718],[-8.332060,-4.560038,0.144339,-7.372966,-9.761302,-2.019937,0.402270,-6.550218,-5.603310,-6.257528,-2.076279,4.769484],[0.241346,-6.050232,-3.951522,4.032572,6.655768,2.448442,4.646776,4.110313,5.973414,-5.223088,4.616738,5.596726],[2.807245,7.543626,-5.438064,-1.411287,-0.145377,1.164215,-3.326561,-5.750062,-5.138903,5.119525,9.614248,5.560193],[-3.800679,-0.608215,9.708284,0.140175,8.584994,-6.791677,-7.087428,6.845597,4.517620,7.413063,0.995875,5.936503],[1.498285,-8.488586,7.121697,7.141728,1.246026,-8.835407,-6.576763,2.660833,-5.446707,2.179549,-5.671220,-9.130686]],[[0.537048,2.303762,3.736672,-8.260153,6.131945,0.905203,-1.705012,2.993335,-6.013332,-6.453784,4.815799,-1.406355],[5.904872,-3.592378,7.855090,1.877235,-3.113418,4.370574,3.412807,1.619255,-9.584114,-6.346097,6.350980,-5.732724],[4.864136,-2.251920,-8.232494,-2.308093,-4.704163,5.892326,4.333559,-1.053972,-3.736737,8.972704,1.464332,-4.816395],[-0.598437,6.644597,-7.999268,5.062000,-4.292827,2.171876,9.825289,6.132817,-5.615121,5.181021,5.248127,-9.485323],[0.986697,-2.538122,-5.749332,9.428480,0.948472,-4.316599,-7.369521,0.531022,-4.900938,-1.255415,-3.129603,5.596005],[-7.059539,0.855948,4.430532,8.327105,7.058280,5.700189,3.680308,-0.999543,2.660157,-5.204050,1.200418,0.840648]],[[-8.216754,5.907098,4.466724,-6.709033,2.839698,9.819627,5.658208,3.659982,-0.013284,-1.162229,5.115321,-0.878757],[6.227283,1.547514,-5.370524,-5.378875,-2.323476,-5.706461,1.207217,3.648239,-2.572527,6.947519,-2.589922,-7.207857],[7.471007,-5.518029,-4.846643,-4.345370,0.042465,-8.821067,-7.156339,0.191724,-3.643745,-3.351929,-8.843076,-5.298713],[-5.500213,-4.529203,-2.993665,-4.444825,5.583891,3.968336,1.153669,8.055869,9.893315,0.267564,6.468953,-8.935324],[-8.347566,9.358631,-4.476970,4.147654,2.320032,6.042541,-1.707712,9.680875,-6.939336,8.079285,-8.177806,1.906291],[-0.290517,3.528892,7.563426,9.696588,-3.179572,-9.668882,-4.527091,-7.626000,6.557783,-4.072932,5.007696,8.011343]],[[-0.156232,9.313806,3.798991,-1.423375,6.833914,6.204960,5.349794,-8.195208,3.121164,-1.153540,-6.632204,2.486865],[1.741565,-3.184600,-1.495311,-3.296467,-0.870440,8.491088,-1.329878,-1.178033,-0.622988,-6.952227,-1.414613,4.020192],[9.669979,-7.096695,-0.679832,3.070007,8.885909,-0.787144,7.491575,-4.992827,9.063462,-6.556982,4.557465,0.899915],[-1.838441,1.546006,0.105182,8.338995,-6.553484,-2.483726,0.006097,-8.000413,4.814791,-0.464528,-6.245108,9.512293],[9.222700,6.396952,-0.305082,-3.512723,8.495604,6.419035,-6.914180,8.079361,-5.339681,-0.143751,-4.464405,-3.493381],[8.276808,-2.456425,0.776406,1.453431,7.133003,2.175718,-2.984501,1.270969,2.307444,-5.973345,5.931944,5.675980]],[[7.853490,5.237894,-1.206663,-1.416826,2.135873,9.893714,-1.029550,8.813703,-3.551861,5.728071,-2.651629,-3.977175],[9.168920,7.092252,-7.501114,9.685754,-9.015070,0.476285,-9.878530,1.111635,0.694364,8.651102,7.246071,2.337970],[6.518963,-5.975045,2.297621,-2.327819,0.733543,7.399326,-9.068272,-1.230060,-1.839408,5.671308,2.429296,-5.315785],[-8.468763,-9.765569,-0.933593,6.406284,-6.643097,6.724517,-5.431750,-3.679607,1.936438,7.729982,-0.028528,6.422102],[-6.265083,-6.887898,8.614033,-6.329381,-5.262839,1.532120,-8.279509,-3.545785,1.188642,2.584357,0.627984,0.029967],[5.906174,-9.849710,-3.515801,-3.523284,1.648105,-6.286775,7.984179,-8.861005,4.897719,-9.725825,-8.084942,-8.245995]]], dtype = "float32")#candidate|776|(12, 6, 12)|const|float32
uop_777 = relay.sin(const_776.astype('float32')) # shape=(12, 6, 12)
bop_780 = relay.bitwise_xor(const_776.astype('uint64'), relay.reshape(uop_777.astype('uint64'), relay.shape_of(const_776))) # shape=(12, 6, 12)
bop_784 = relay.floor_divide(uop_777.astype('float64'), relay.reshape(const_776.astype('float64'), relay.shape_of(uop_777))) # shape=(12, 6, 12)
bop_789 = relay.minimum(const_776.astype('int8'), relay.reshape(bop_780.astype('int8'), relay.shape_of(const_776))) # shape=(12, 6, 12)
func_274_call = mod.get_global_var('func_274')
func_278_call = mutated_mod.get_global_var('func_278')
var_794 = relay.var("var_794", dtype = "int32", shape = ())#candidate|794|()|var|int32
var_795 = relay.var("var_795", dtype = "int32", shape = (208, 1))#candidate|795|(208, 1)|var|int32
call_793 = relay.TupleGetItem(func_274_call(relay.reshape(var_794.astype('int32'), []), relay.reshape(var_795.astype('int32'), [2, 13, 8]), ), 0)
call_796 = relay.TupleGetItem(func_278_call(relay.reshape(var_794.astype('int32'), []), relay.reshape(var_795.astype('int32'), [2, 13, 8]), ), 0)
bop_798 = relay.floor_mod(var_794.astype('float64'), bop_780.astype('float64')) # shape=(12, 6, 12)
output = relay.Tuple([bop_784,bop_789,call_793,var_795,bop_798,])
output2 = relay.Tuple([bop_784,bop_789,call_796,var_795,bop_798,])
func_807 = relay.Function([var_794,var_795,], output)
mod['func_807'] = func_807
mod = relay.transform.InferType()(mod)
var_808 = relay.var("var_808", dtype = "int32", shape = ())#candidate|808|()|var|int32
var_809 = relay.var("var_809", dtype = "int32", shape = (208, 1))#candidate|809|(208, 1)|var|int32
output = func_807(var_808,var_809,)
func_810 = relay.Function([var_808,var_809,], output)
mutated_mod['func_810'] = func_810
mutated_mod = relay.transform.InferType()(mutated_mod)
var_818 = relay.var("var_818", dtype = "float32", shape = (11,))#candidate|818|(11,)|var|float32
uop_819 = relay.sqrt(var_818.astype('float32')) # shape=(11,)
bop_821 = relay.bitwise_and(uop_819.astype('uint16'), relay.reshape(var_818.astype('uint16'), relay.shape_of(uop_819))) # shape=(11,)
var_826 = relay.var("var_826", dtype = "float32", shape = (11,))#candidate|826|(11,)|var|float32
bop_827 = relay.floor_mod(uop_819.astype('float32'), relay.reshape(var_826.astype('float32'), relay.shape_of(uop_819))) # shape=(11,)
uop_835 = relay.atanh(bop_827.astype('float32')) # shape=(11,)
output = relay.Tuple([bop_821,uop_835,])
output2 = relay.Tuple([bop_821,uop_835,])
func_840 = relay.Function([var_818,var_826,], output)
mod['func_840'] = func_840
mod = relay.transform.InferType()(mod)
var_841 = relay.var("var_841", dtype = "float32", shape = (11,))#candidate|841|(11,)|var|float32
var_842 = relay.var("var_842", dtype = "float32", shape = (11,))#candidate|842|(11,)|var|float32
output = func_840(var_841,var_842,)
func_843 = relay.Function([var_841,var_842,], output)
mutated_mod['func_843'] = func_843
mutated_mod = relay.transform.InferType()(mutated_mod)
var_879 = relay.var("var_879", dtype = "int16", shape = ())#candidate|879|()|var|int16
var_880 = relay.var("var_880", dtype = "int16", shape = (13,))#candidate|880|(13,)|var|int16
bop_881 = relay.maximum(var_879.astype('int16'), var_880.astype('int16')) # shape=(13,)
func_708_call = mod.get_global_var('func_708')
func_716_call = mutated_mod.get_global_var('func_716')
var_886 = relay.var("var_886", dtype = "float32", shape = (540, 1))#candidate|886|(540, 1)|var|float32
var_887 = relay.var("var_887", dtype = "float64", shape = (384,))#candidate|887|(384,)|var|float64
const_888 = relay.const([[7,-2],[-4,-10],[6,2]], dtype = "int16")#candidate|888|(3, 2)|const|int16
var_889 = relay.var("var_889", dtype = "float32", shape = (1296, 1))#candidate|889|(1296, 1)|var|float32
call_885 = relay.TupleGetItem(func_708_call(relay.reshape(var_886.astype('float32'), [9, 15, 4]), relay.reshape(var_887.astype('float64'), [24, 16]), relay.reshape(const_888.astype('int16'), [6,]), relay.reshape(var_889.astype('float32'), [1296,]), relay.reshape(var_886.astype('float32'), [9, 15, 4]), relay.reshape(var_886.astype('float32'), [9, 15, 4]), relay.reshape(var_886.astype('float32'), [9, 15, 4]), ), 12)
call_890 = relay.TupleGetItem(func_716_call(relay.reshape(var_886.astype('float32'), [9, 15, 4]), relay.reshape(var_887.astype('float64'), [24, 16]), relay.reshape(const_888.astype('int16'), [6,]), relay.reshape(var_889.astype('float32'), [1296,]), relay.reshape(var_886.astype('float32'), [9, 15, 4]), relay.reshape(var_886.astype('float32'), [9, 15, 4]), relay.reshape(var_886.astype('float32'), [9, 15, 4]), ), 12)
func_572_call = mod.get_global_var('func_572')
func_575_call = mutated_mod.get_global_var('func_575')
call_891 = relay.TupleGetItem(func_572_call(relay.reshape(var_887.astype('float64'), [16, 8, 3]), relay.reshape(var_887.astype('float64'), [16, 8, 3]), ), 3)
call_892 = relay.TupleGetItem(func_575_call(relay.reshape(var_887.astype('float64'), [16, 8, 3]), relay.reshape(var_887.astype('float64'), [16, 8, 3]), ), 3)
output = relay.Tuple([bop_881,call_885,var_886,var_887,const_888,var_889,call_891,])
output2 = relay.Tuple([bop_881,call_890,var_886,var_887,const_888,var_889,call_892,])
func_901 = relay.Function([var_879,var_880,var_886,var_887,var_889,], output)
mod['func_901'] = func_901
mod = relay.transform.InferType()(mod)
var_902 = relay.var("var_902", dtype = "int16", shape = ())#candidate|902|()|var|int16
var_903 = relay.var("var_903", dtype = "int16", shape = (13,))#candidate|903|(13,)|var|int16
var_904 = relay.var("var_904", dtype = "float32", shape = (540, 1))#candidate|904|(540, 1)|var|float32
var_905 = relay.var("var_905", dtype = "float64", shape = (384,))#candidate|905|(384,)|var|float64
var_906 = relay.var("var_906", dtype = "float32", shape = (1296, 1))#candidate|906|(1296, 1)|var|float32
output = func_901(var_902,var_903,var_904,var_905,var_906,)
func_907 = relay.Function([var_902,var_903,var_904,var_905,var_906,], output)
mutated_mod['func_907'] = func_907
mutated_mod = relay.transform.InferType()(mutated_mod)
const_944 = relay.const(-6.652413, dtype = "float32")#candidate|944|()|const|float32
var_945 = relay.var("var_945", dtype = "float32", shape = (2, 7, 16))#candidate|945|(2, 7, 16)|var|float32
bop_946 = relay.power(const_944.astype('float32'), var_945.astype('float32')) # shape=(2, 7, 16)
var_953 = relay.var("var_953", dtype = "float32", shape = (13, 12))#candidate|953|(13, 12)|var|float32
bop_954 = relay.power(const_944.astype('float32'), var_953.astype('float32')) # shape=(13, 12)
func_274_call = mod.get_global_var('func_274')
func_278_call = mutated_mod.get_global_var('func_278')
const_958 = relay.const([-3,-8,1,-1,-10,-8,-10,-6,3,7,5,-1,2,-3,-2,-3,-7,1,-2,7,-9,-2,7,7,-4,-7,6,-3,-3,-7,1,2,-10,-5,7,-2,-6,-5,-2,2,9,-5,7,-3,-4,-7,-10,-4,4,-1,-1,7,-9,10,-5,7,10,-8,10,9,-2,1,-7,-2,-6,2,-8,-7,-1,10,7,-7,1,-8,-9,-7,5,-4,-4,-5,-1,-10,-6,-8,1,-3,7,-9,-7,9,6,-6,-5,5,-7,4,7,-7,-8,-2,-2,1,-6,6,-9,-9,3,8,-4,-1,-1,-8,-6,3,-9,5,1,3,-6,3,5,10,5,-8,-1,1,4,2,4,6,-4,9,6,-5,10,-10,7,-3,-10,-3,-1,-4,-4,5,-4,5,3,-3,5,-3,-5,-10,-7,-9,5,7,-6,1,7,-10,-10,-9,1,3,-2,-1,-1,3,5,4,-4,7,2,-2,5,-2,-8,-7,-4,5,7,7,8,-8,2,4,-3,-7,-1,3,-10,-3,7,9,2,-9,1,-9,-8,5,-6,-7,2,-3,-1,-10,-1,-1], dtype = "int32")#candidate|958|(208,)|const|int32
call_957 = relay.TupleGetItem(func_274_call(relay.reshape(const_944.astype('int32'), []), relay.reshape(const_958.astype('int32'), [2, 13, 8]), ), 0)
call_959 = relay.TupleGetItem(func_278_call(relay.reshape(const_944.astype('int32'), []), relay.reshape(const_958.astype('int32'), [2, 13, 8]), ), 0)
func_298_call = mod.get_global_var('func_298')
func_301_call = mutated_mod.get_global_var('func_301')
var_963 = relay.var("var_963", dtype = "int32", shape = (3,))#candidate|963|(3,)|var|int32
call_962 = relay.TupleGetItem(func_298_call(relay.reshape(var_963.astype('int32'), [3,]), relay.reshape(var_963.astype('int32'), [3,]), ), 0)
call_964 = relay.TupleGetItem(func_301_call(relay.reshape(var_963.astype('int32'), [3,]), relay.reshape(var_963.astype('int32'), [3,]), ), 0)
output = relay.Tuple([bop_946,bop_954,call_957,const_958,call_962,var_963,])
output2 = relay.Tuple([bop_946,bop_954,call_959,const_958,call_964,var_963,])
func_968 = relay.Function([var_945,var_953,var_963,], output)
mod['func_968'] = func_968
mod = relay.transform.InferType()(mod)
mutated_mod['func_968'] = func_968
mutated_mod = relay.transform.InferType()(mutated_mod)
func_968_call = mutated_mod.get_global_var('func_968')
var_970 = relay.var("var_970", dtype = "float32", shape = (2, 7, 16))#candidate|970|(2, 7, 16)|var|float32
var_971 = relay.var("var_971", dtype = "float32", shape = (13, 12))#candidate|971|(13, 12)|var|float32
var_972 = relay.var("var_972", dtype = "int32", shape = (3,))#candidate|972|(3,)|var|int32
call_969 = func_968_call(var_970,var_971,var_972,)
output = call_969
func_973 = relay.Function([var_970,var_971,var_972,], output)
mutated_mod['func_973'] = func_973
mutated_mod = relay.transform.InferType()(mutated_mod)
var_984 = relay.var("var_984", dtype = "uint8", shape = (5, 16, 9))#candidate|984|(5, 16, 9)|var|uint8
var_985 = relay.var("var_985", dtype = "uint8", shape = (5, 16, 9))#candidate|985|(5, 16, 9)|var|uint8
bop_986 = relay.logical_xor(var_984.astype('uint8'), relay.reshape(var_985.astype('uint8'), relay.shape_of(var_984))) # shape=(5, 16, 9)
bop_990 = relay.less(bop_986.astype('bool'), relay.reshape(var_984.astype('bool'), relay.shape_of(bop_986))) # shape=(5, 16, 9)
bop_995 = relay.subtract(bop_986.astype('int32'), relay.reshape(bop_990.astype('int32'), relay.shape_of(bop_986))) # shape=(5, 16, 9)
output = bop_995
output2 = bop_995
func_998 = relay.Function([var_984,var_985,], output)
mod['func_998'] = func_998
mod = relay.transform.InferType()(mod)
mutated_mod['func_998'] = func_998
mutated_mod = relay.transform.InferType()(mutated_mod)
func_998_call = mutated_mod.get_global_var('func_998')
var_1000 = relay.var("var_1000", dtype = "uint8", shape = (5, 16, 9))#candidate|1000|(5, 16, 9)|var|uint8
var_1001 = relay.var("var_1001", dtype = "uint8", shape = (5, 16, 9))#candidate|1001|(5, 16, 9)|var|uint8
call_999 = func_998_call(var_1000,var_1001,)
output = call_999
func_1002 = relay.Function([var_1000,var_1001,], output)
mutated_mod['func_1002'] = func_1002
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1060 = relay.var("var_1060", dtype = "int64", shape = (10, 7))#candidate|1060|(10, 7)|var|int64
var_1061 = relay.var("var_1061", dtype = "int64", shape = (10, 7))#candidate|1061|(10, 7)|var|int64
bop_1062 = relay.equal(var_1060.astype('bool'), relay.reshape(var_1061.astype('bool'), relay.shape_of(var_1060))) # shape=(10, 7)
output = bop_1062
output2 = bop_1062
func_1065 = relay.Function([var_1060,var_1061,], output)
mod['func_1065'] = func_1065
mod = relay.transform.InferType()(mod)
mutated_mod['func_1065'] = func_1065
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1065_call = mutated_mod.get_global_var('func_1065')
var_1067 = relay.var("var_1067", dtype = "int64", shape = (10, 7))#candidate|1067|(10, 7)|var|int64
var_1068 = relay.var("var_1068", dtype = "int64", shape = (10, 7))#candidate|1068|(10, 7)|var|int64
call_1066 = func_1065_call(var_1067,var_1068,)
output = call_1066
func_1069 = relay.Function([var_1067,var_1068,], output)
mutated_mod['func_1069'] = func_1069
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1092 = relay.var("var_1092", dtype = "int64", shape = (12, 15, 12))#candidate|1092|(12, 15, 12)|var|int64
var_1093 = relay.var("var_1093", dtype = "int64", shape = (12, 15, 12))#candidate|1093|(12, 15, 12)|var|int64
bop_1094 = relay.greater(var_1092.astype('bool'), relay.reshape(var_1093.astype('bool'), relay.shape_of(var_1092))) # shape=(12, 15, 12)
bop_1097 = relay.less_equal(bop_1094.astype('bool'), relay.reshape(var_1092.astype('bool'), relay.shape_of(bop_1094))) # shape=(12, 15, 12)
bop_1100 = relay.bitwise_or(var_1093.astype('int8'), relay.reshape(bop_1094.astype('int8'), relay.shape_of(var_1093))) # shape=(12, 15, 12)
bop_1104 = relay.minimum(bop_1094.astype('uint16'), relay.reshape(var_1093.astype('uint16'), relay.shape_of(bop_1094))) # shape=(12, 15, 12)
bop_1107 = relay.multiply(var_1092.astype('int64'), relay.reshape(bop_1097.astype('int64'), relay.shape_of(var_1092))) # shape=(12, 15, 12)
bop_1111 = relay.left_shift(var_1093.astype('int8'), relay.reshape(bop_1104.astype('int8'), relay.shape_of(var_1093))) # shape=(12, 15, 12)
func_111_call = mod.get_global_var('func_111')
func_113_call = mutated_mod.get_global_var('func_113')
var_1123 = relay.var("var_1123", dtype = "int16", shape = (3, 2))#candidate|1123|(3, 2)|var|int16
call_1122 = relay.TupleGetItem(func_111_call(relay.reshape(var_1123.astype('int16'), [6,])), 2)
call_1124 = relay.TupleGetItem(func_113_call(relay.reshape(var_1123.astype('int16'), [6,])), 2)
func_320_call = mod.get_global_var('func_320')
func_323_call = mutated_mod.get_global_var('func_323')
const_1130 = relay.const([-6.810285,7.740716,4.020055,3.913974,5.362267,-9.966724,4.526121,3.018788,4.709432,1.144890,1.958547,9.919185,5.175005,7.778921,6.599732,7.389316,8.313939,5.254756,0.058297,2.426832,9.468096,-4.679190,-9.984407,-8.418121,9.637358,0.134303,-2.626707,5.229807], dtype = "float32")#candidate|1130|(28,)|const|float32
call_1129 = relay.TupleGetItem(func_320_call(relay.reshape(const_1130.astype('float32'), [4, 7]), relay.reshape(const_1130.astype('float32'), [4, 7]), ), 0)
call_1131 = relay.TupleGetItem(func_323_call(relay.reshape(const_1130.astype('float32'), [4, 7]), relay.reshape(const_1130.astype('float32'), [4, 7]), ), 0)
uop_1133 = relay.sqrt(const_1130.astype('float64')) # shape=(28,)
output = relay.Tuple([bop_1100,bop_1107,bop_1111,call_1122,var_1123,call_1129,uop_1133,])
output2 = relay.Tuple([bop_1100,bop_1107,bop_1111,call_1124,var_1123,call_1131,uop_1133,])
func_1135 = relay.Function([var_1092,var_1093,var_1123,], output)
mod['func_1135'] = func_1135
mod = relay.transform.InferType()(mod)
mutated_mod['func_1135'] = func_1135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1135_call = mutated_mod.get_global_var('func_1135')
var_1137 = relay.var("var_1137", dtype = "int64", shape = (12, 15, 12))#candidate|1137|(12, 15, 12)|var|int64
var_1138 = relay.var("var_1138", dtype = "int64", shape = (12, 15, 12))#candidate|1138|(12, 15, 12)|var|int64
var_1139 = relay.var("var_1139", dtype = "int16", shape = (3, 2))#candidate|1139|(3, 2)|var|int16
call_1136 = func_1135_call(var_1137,var_1138,var_1139,)
output = call_1136
func_1140 = relay.Function([var_1137,var_1138,var_1139,], output)
mutated_mod['func_1140'] = func_1140
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1198 = relay.var("var_1198", dtype = "int64", shape = (1, 5))#candidate|1198|(1, 5)|var|int64
var_1199 = relay.var("var_1199", dtype = "int64", shape = (3, 5))#candidate|1199|(3, 5)|var|int64
bop_1200 = relay.bitwise_or(var_1198.astype('int64'), var_1199.astype('int64')) # shape=(3, 5)
output = relay.Tuple([bop_1200,])
output2 = relay.Tuple([bop_1200,])
func_1203 = relay.Function([var_1198,var_1199,], output)
mod['func_1203'] = func_1203
mod = relay.transform.InferType()(mod)
mutated_mod['func_1203'] = func_1203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1203_call = mutated_mod.get_global_var('func_1203')
var_1205 = relay.var("var_1205", dtype = "int64", shape = (1, 5))#candidate|1205|(1, 5)|var|int64
var_1206 = relay.var("var_1206", dtype = "int64", shape = (3, 5))#candidate|1206|(3, 5)|var|int64
call_1204 = func_1203_call(var_1205,var_1206,)
output = call_1204
func_1207 = relay.Function([var_1205,var_1206,], output)
mutated_mod['func_1207'] = func_1207
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1223 = relay.var("var_1223", dtype = "float64", shape = (4, 8))#candidate|1223|(4, 8)|var|float64
uop_1224 = relay.sin(var_1223.astype('float64')) # shape=(4, 8)
func_771_call = mod.get_global_var('func_771')
func_774_call = mutated_mod.get_global_var('func_774')
const_1227 = relay.const([-5,5,-9,-7,7,3,-9,-5,9,5,7,-3,-9,7,-1,1,7,-2,-3,5,-4,-7,9,9,5,9,8,-5,9,4,4,7,-3,10,-8,7,5,9,3,3,-2,8,-6,-6,-8,-4,8,-6,2,7,10,6,-6,-1,-2,7,-9,-3,1,-2,10,3,-1,6,-6,-7,-9,-4,-7,3,1,5,-6,-9,-8,6,-8,5,-10,3,8,-4,3,1,5,1,-6,8,-5,-7,-7,-2,-1,-2,-1,-7,-7,5], dtype = "int32")#candidate|1227|(98,)|const|int32
call_1226 = relay.TupleGetItem(func_771_call(relay.reshape(const_1227.astype('int32'), [7, 14]), relay.reshape(const_1227.astype('int32'), [7, 14]), ), 0)
call_1228 = relay.TupleGetItem(func_774_call(relay.reshape(const_1227.astype('int32'), [7, 14]), relay.reshape(const_1227.astype('int32'), [7, 14]), ), 0)
output = relay.Tuple([uop_1224,call_1226,const_1227,])
output2 = relay.Tuple([uop_1224,call_1228,const_1227,])
func_1230 = relay.Function([var_1223,], output)
mod['func_1230'] = func_1230
mod = relay.transform.InferType()(mod)
mutated_mod['func_1230'] = func_1230
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1231 = relay.var("var_1231", dtype = "float64", shape = (4, 8))#candidate|1231|(4, 8)|var|float64
func_1230_call = mutated_mod.get_global_var('func_1230')
call_1232 = func_1230_call(var_1231)
output = call_1232
func_1233 = relay.Function([var_1231], output)
mutated_mod['func_1233'] = func_1233
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1235 = relay.var("var_1235", dtype = "float32", shape = (9, 7))#candidate|1235|(9, 7)|var|float32
uop_1236 = relay.sqrt(var_1235.astype('float32')) # shape=(9, 7)
output = relay.Tuple([uop_1236,])
output2 = relay.Tuple([uop_1236,])
func_1239 = relay.Function([var_1235,], output)
mod['func_1239'] = func_1239
mod = relay.transform.InferType()(mod)
var_1240 = relay.var("var_1240", dtype = "float32", shape = (9, 7))#candidate|1240|(9, 7)|var|float32
output = func_1239(var_1240)
func_1241 = relay.Function([var_1240], output)
mutated_mod['func_1241'] = func_1241
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1250 = relay.var("var_1250", dtype = "uint16", shape = (7,))#candidate|1250|(7,)|var|uint16
var_1251 = relay.var("var_1251", dtype = "uint16", shape = (7,))#candidate|1251|(7,)|var|uint16
bop_1252 = relay.less(var_1250.astype('bool'), relay.reshape(var_1251.astype('bool'), relay.shape_of(var_1250))) # shape=(7,)
uop_1256 = relay.erf(bop_1252.astype('float32')) # shape=(7,)
output = relay.Tuple([uop_1256,])
output2 = relay.Tuple([uop_1256,])
func_1262 = relay.Function([var_1250,var_1251,], output)
mod['func_1262'] = func_1262
mod = relay.transform.InferType()(mod)
mutated_mod['func_1262'] = func_1262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1262_call = mutated_mod.get_global_var('func_1262')
var_1264 = relay.var("var_1264", dtype = "uint16", shape = (7,))#candidate|1264|(7,)|var|uint16
var_1265 = relay.var("var_1265", dtype = "uint16", shape = (7,))#candidate|1265|(7,)|var|uint16
call_1263 = func_1262_call(var_1264,var_1265,)
output = call_1263
func_1266 = relay.Function([var_1264,var_1265,], output)
mutated_mod['func_1266'] = func_1266
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1283 = relay.var("var_1283", dtype = "int64", shape = (11,))#candidate|1283|(11,)|var|int64
var_1284 = relay.var("var_1284", dtype = "int64", shape = (11,))#candidate|1284|(11,)|var|int64
bop_1285 = relay.bitwise_or(var_1283.astype('int64'), relay.reshape(var_1284.astype('int64'), relay.shape_of(var_1283))) # shape=(11,)
func_274_call = mod.get_global_var('func_274')
func_278_call = mutated_mod.get_global_var('func_278')
var_1295 = relay.var("var_1295", dtype = "int32", shape = ())#candidate|1295|()|var|int32
var_1296 = relay.var("var_1296", dtype = "int32", shape = (208,))#candidate|1296|(208,)|var|int32
call_1294 = relay.TupleGetItem(func_274_call(relay.reshape(var_1295.astype('int32'), []), relay.reshape(var_1296.astype('int32'), [2, 13, 8]), ), 0)
call_1297 = relay.TupleGetItem(func_278_call(relay.reshape(var_1295.astype('int32'), []), relay.reshape(var_1296.astype('int32'), [2, 13, 8]), ), 0)
bop_1298 = relay.mod(bop_1285.astype('float32'), relay.reshape(var_1283.astype('float32'), relay.shape_of(bop_1285))) # shape=(11,)
output = relay.Tuple([call_1294,var_1295,var_1296,bop_1298,])
output2 = relay.Tuple([call_1297,var_1295,var_1296,bop_1298,])
func_1306 = relay.Function([var_1283,var_1284,var_1295,var_1296,], output)
mod['func_1306'] = func_1306
mod = relay.transform.InferType()(mod)
var_1307 = relay.var("var_1307", dtype = "int64", shape = (11,))#candidate|1307|(11,)|var|int64
var_1308 = relay.var("var_1308", dtype = "int64", shape = (11,))#candidate|1308|(11,)|var|int64
var_1309 = relay.var("var_1309", dtype = "int32", shape = ())#candidate|1309|()|var|int32
var_1310 = relay.var("var_1310", dtype = "int32", shape = (208,))#candidate|1310|(208,)|var|int32
output = func_1306(var_1307,var_1308,var_1309,var_1310,)
func_1311 = relay.Function([var_1307,var_1308,var_1309,var_1310,], output)
mutated_mod['func_1311'] = func_1311
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1398 = relay.const([[2.743173,-3.064533,-9.176888,-5.560577],[-4.313681,9.074603,-5.439511,8.613870],[-5.874424,7.516582,9.733833,1.474019],[-2.907763,1.154293,-2.053153,-9.634871],[6.476219,-0.778683,7.342083,-1.437196],[-8.794929,1.224605,-2.969712,2.952755],[-6.761555,7.370296,-2.814290,5.895989],[0.251625,4.324928,3.373308,4.899902],[4.306898,-4.659254,2.743045,-7.962731]], dtype = "float32")#candidate|1398|(9, 4)|const|float32
uop_1399 = relay.asin(const_1398.astype('float32')) # shape=(9, 4)
uop_1401 = relay.asinh(const_1398.astype('float32')) # shape=(9, 4)
func_229_call = mod.get_global_var('func_229')
func_236_call = mutated_mod.get_global_var('func_236')
const_1404 = relay.const([[-3.160473,-2.537802,6.030993,-9.726072,9.201743,-1.070164,-2.865743,-6.883583,-2.696151,-8.186997,-4.500409,4.774837,-0.402277,-9.675441,3.318258,-4.617690,6.060756,4.578023,-3.140078,3.984618,7.612121,1.076620,-5.532057,-0.776191,6.287527,6.323245,4.898991,-7.506340,7.751697,-5.382110,-0.641995,-4.250865,-3.130279,-3.586628,1.674805,-0.856199,-4.150628,1.426606,9.347779,7.640853,-0.072611,1.090959,0.838438,9.250714,-0.368043,-8.102981,6.807482,5.517113,-2.532219,-9.455825,9.470661,-2.541063,-6.903129,-8.479750,-1.669359,-1.492146,-6.516139,-9.952222,-8.872227,-9.003322,0.095150,7.905746,9.344216,-9.803529,-4.001417,-4.522010,6.539312,1.759365,-0.103549,-6.383035,-2.537917,0.331989,-6.581551,-6.647226,1.651500,1.344055,3.962291,6.830270,1.120294,7.628637,-7.900601,9.351244,-2.078219,-6.274292,-4.508666,8.297416,4.494543,7.420772,-1.191873,-0.617156,-7.558713,7.944782,-5.147473,0.851812,-4.855582,-0.352333,-0.572987,2.195727,-3.455587,1.511948,-2.790645,3.991796,0.738798,7.662555,7.666374,1.596179,2.386516,7.258197,-2.472468,-5.911744,0.230296,9.097933,-5.667686,1.896073,-0.095771,-9.938040,9.963171,4.273135,-1.800626,0.330318,-1.206600,-7.695819,7.378733,-6.265403,-0.374320,-3.152621,9.271387,4.855327,-2.178476,-4.012936,7.085437,2.228608,8.632297,5.415366,7.097584,2.057192,8.683708,-3.715685,7.507759,-2.301713,6.932268,-2.901236,7.984584,-4.375794,-2.953825,-7.760013,0.225774,-7.296706,-7.481610,5.732539,-6.962674,-2.207029,-1.875097,-1.254958,9.302891,1.777166,-6.387609,1.067042,6.009155,4.598873,-9.493667,9.173199,-5.874532,-3.897755,1.703559,-8.010157,-1.112488,4.620986,6.388673,2.649645,5.926659,4.341130,-4.201601,4.117859,1.399795,3.569514,-8.334835,1.812919,-3.047198,-3.564306,5.890145,-9.735075,2.908289,-3.794159,9.340471,8.988658,-9.068193,-7.763850,1.962012,-0.423187,7.708249,-5.545008,-5.976099,-3.287754,-1.128637,-1.567084,1.961600,3.926848,2.312834,-0.112000,7.496309,6.181933,-4.991383,-0.496871,6.603384,-1.132280,-9.631989,-8.956953,8.940772,-1.637828,7.653037,3.790723,2.488190,4.952260,6.700936,1.310522,5.271870,-7.725754,1.857797,9.493086,-0.129983,3.319202,6.812342,8.024178,-0.205819,-4.677453,6.242312,-8.918448,-3.223604,6.186771,1.428378,5.985354,0.259197,6.375431,-2.883021,5.233624,-8.952642,-0.940843,-8.533319,-4.381984,6.788849,6.069121,6.173494,7.026160,8.701352,0.350920,3.431120,-3.864715,-4.256543,7.432820,-2.429372,0.897823,6.538166,-0.499187,-9.668048,-0.960819,9.764861,-3.873187,-1.259957,1.741617,-2.157384,-0.296833,1.982693,-7.965895,-0.620398,-3.993861,-9.460014,-9.676387,1.584723,8.594616,0.388288,2.163371,2.190158,6.323458,6.405423,-0.771932,6.581041,-7.635340,3.606076,7.139476,-8.269530,-9.614732,1.271642,0.384714,-3.653745,-1.970277,-2.721835,-9.269196,7.549180,4.190543,-8.637879,-9.019005,5.178291,-9.705167,6.590270,-2.663353,-4.653339,-1.151094,9.882135,-5.084199,5.525407,-1.066091,9.240071,4.474311,-1.516814,7.262600,-2.283828,2.750718,-4.973731,-9.943544,3.686376,-8.739011,-8.223206,8.988125,-6.738569,2.897447,7.172357,0.900532,-2.297803,9.162245,-5.222844,-9.106334,2.174418,-5.026594,5.648669,7.034760,5.834946,-2.198828,8.338055,-6.004255,-3.003333,7.521996,0.494368,-0.408179,6.798302,-1.714158,-7.439401,0.614194,-1.677534,-6.531562,-7.641518,-2.197832,2.707472,9.405043,4.243648,-5.446908,6.742345,6.241997,-0.244642,1.169372,2.390664,5.038714,-5.973618,1.345579,-8.821745,-1.287467,-6.009873,6.979151,-3.463231,-2.014609,-9.621103,6.187459,-1.774238,-9.224567,-7.022440,-4.052573,8.695370,8.760949,-0.844457,3.452287,-7.067158,-5.187864,-4.415336,-9.991341,-6.047542,-1.945715,4.323741,0.039146,-7.529291,0.631916,7.152084,2.994857,1.833669,-4.332806,6.077370,2.764479,5.319666,-0.525822,5.555051,-4.862340,9.017656,-9.540115,-7.919588,-2.781678,8.112106,4.236050,-0.008609,9.136564,-4.286831,2.744374,9.076351,5.966621,-4.703596,4.487387,5.521735,-9.726455,-9.010648,0.032478,-8.068230,-3.719216,7.088777,-3.126159,-4.733714,-8.666023,1.586142,-1.727030,-5.144104,7.281370,-3.628896,-5.963589,1.022107,-1.120473,1.634976,-0.350249,-9.000645,1.757508,0.125345,5.818785,8.030651,-1.556862,8.790138,-5.214691,-7.981749,1.249063,-5.888700,-3.308870,-2.679092,3.716062,0.517205,3.341702,-5.178733,0.635587,-2.200661,0.312409,-4.889875,-1.713022,0.828859,5.710508,-7.079416,-3.180419,-6.210123,-9.039628,0.788260,-8.490959,-4.120502,-6.453125,-0.478508,-8.288074,-1.137881,7.861003,7.581421,3.524451,-7.073733,-5.532830,0.434118,8.923082,-2.761933,-8.249935,0.353342,-3.512251,-8.200693,5.763684,-9.343593,0.724547,6.859811,-7.341508,-5.142623,9.027024,-9.543566,0.480961,-3.487218,-7.776328,9.213906,6.640597,9.567897,-1.663799,-9.875706,0.392191,6.707840,-3.334384,5.844223,6.916846,-1.879379,-7.285579,-6.818415,-1.634411,-0.404608,0.510057,5.085809,-8.652112,-7.388786,-5.994161,-9.375219,-6.497847,-4.526119,4.036828,4.980696,4.001749,7.051244,-7.594536,0.516139,0.361972,1.775660,2.780831,9.090927,-5.189616,-3.152994,-4.688711,-2.501557,-4.629695,2.669469,-5.020361,-3.215600,-6.157521,3.013907,-4.692471,0.021739,-8.056699,-7.745970,8.663249,6.027699,-7.664793,-5.446783,9.227046,4.915616,8.058825,3.500899,8.259379,3.970159,1.630194,-8.574587,-8.324183,6.256789,0.670198,-6.359461,3.641748,-0.683579,-8.648433,0.765372,9.316657,6.449456,2.853064,-1.161759,9.984037,4.923712,-6.883116,-6.550530,0.361299,2.613123,8.973031,-3.192729,0.216389,-3.758170,1.563711,6.644119,-9.268103,-0.417901,5.232829,-8.583857,-4.518190,-8.616484,-1.829469,1.806655,-6.934582,-0.693355,2.768938,7.751934,8.296012,-3.421335,8.273148,4.447017,-4.522627,3.700575,-3.726645,-6.086129,6.884323,1.779483,2.883132,-1.095624,8.672923,-5.946230,4.947922,0.088943,3.373053,2.614376,-7.628547,4.117969,-5.869356,-6.426259,-1.029053,-7.010590,0.926492,4.119358,-1.867001,1.128987,-7.544312,-4.770291,9.533504,-4.155724,1.374126,6.741819,-6.577561,5.046435,6.470514,4.853730,-6.274932,-3.859448,2.116664,6.296788,1.101573,1.884220,-2.195124,0.096709,-3.998938,-1.058198,7.453806,9.258219,-9.686626,8.442066,-6.932356,-8.446219,-7.151873,8.938466,-5.792066,3.564077,0.286570,-0.796789,9.559299,9.648851,7.922947,2.762971,3.861165,9.813631,3.951469,3.925239,5.337458,0.843237,-9.054580,-4.522383,0.855437,-5.398148,-0.832757,-1.434638,-4.835284,7.542971,3.692961,7.944156,0.810685,0.600339,0.378094,0.931687,-2.017241,-3.609010,9.231574,5.710360,-4.265139,6.164554,-9.218204,-8.143641,4.834824,3.554328,3.222075,0.553826,6.106463,8.320518,5.995686,7.705581,4.967316,7.277824,-7.398911,6.458456,-5.890120,-8.803957,-1.484343,-6.818023,-1.274706,5.641182,-5.179471,2.542937,8.199421,-0.617166,4.704625,-9.312328,8.802175,9.385271,-0.044031,-6.089306,3.922839,-0.691947,-7.311139,4.358441,-6.126663,-5.539487,5.728211,-5.084639,-6.469107,3.939172,-0.422971,5.306165,2.060916,-5.141621,3.972838,6.822076,2.732806,7.565096,-3.583802,-6.849103,9.654624,9.111494,-1.944144,4.099321,-8.377437,-6.684798,-5.227055,-5.000121,-7.006900,5.852844,3.766455,-3.736640,-4.426191,-8.352644,-2.458004,6.051933,2.858478,-0.145293,-1.389049,2.555744,0.933833,-4.947930,7.370912,8.975397,4.267652,2.727725,5.499402,6.862398,8.679935,-4.168433,-9.810440,2.282194,-8.138521,-1.401824,8.285762,8.944768,5.794463,-4.671836,-1.726774,3.727609,5.232619,4.685988,-9.127685,-7.719265,-0.471166,-9.398059,2.392023,7.521679,4.443741,-8.930301,2.708294,8.940652,3.298925,7.258287,-3.837880,0.885151,5.533073,-3.641434,7.247419,-1.350465,-3.663522,1.814446,-8.262223,6.926665,-3.803712,2.826145,-2.116066,-5.938646,-9.063890,3.494588,-4.088868,-9.082822,2.271029,-4.457727,-4.130257,7.923498,8.913389,-0.169170,9.166004,7.749615,9.917470,8.605867,-3.101856,-5.886129,2.084572,3.705969,-1.893315,4.640354,-2.748600,4.271624,-4.516056,6.451575,2.681642,-0.864251,-0.490845,-6.136972,-5.699613,6.204491,7.065148,0.785896,2.560751,6.479495,6.802108,-9.220934,-9.814805,-9.951656,-3.472347,-1.488887,3.223795,-1.934681,-7.884350,5.300112,-9.973138,3.670025,-4.630765,-8.093720,1.361213,-2.869251,-7.375793,7.255693,-6.066385,-6.221213,5.421861,-0.423099,3.846349,-1.086202,7.479579,-9.630400,-8.017878,3.917523,-2.634435,2.787668,1.594208,-6.023531,-7.435137,-6.173804,7.662362,3.493528,3.036466,4.498882,-2.593523,0.794862,-6.404964,5.569574,0.686281,0.413000,-8.308357,-7.968779,-2.772706,4.662383,-4.362236,5.653315,-1.259800,-7.622328,-7.271799,-4.469803,-6.646715,-1.495243,0.308270,0.551097,5.745301,2.522539,4.031244,3.035039,-9.381439,-6.276749,8.941084,6.904588,-3.837014,6.167802,2.040038,7.755489,0.186271,-9.976137,5.894053,-7.751472,0.630367,-1.937645,2.701331,-5.740797,5.439573,-4.616200,8.543785,-1.544244,4.411689,-9.650515,-2.750596,-6.351152,-7.351167,-8.980199,6.611872,-8.568850,-7.694028,4.237860,-8.900974,-8.118534,3.255643,-3.464743,-4.757076,-6.719190,6.911226,-6.279899,0.456578,5.745698,-2.130710,0.686343,-0.377152,-2.638555,9.372285,-8.377876,0.179220,6.969176,4.959847,1.760292,-7.041355,-7.192009,6.169400,0.899324,9.669629,-7.059954,8.045380,5.740962,2.536573,-2.384113,-0.999530,-1.500130,1.971777,-5.483788,-4.508952,-0.922976,0.051913,-3.446378,-6.884543,1.435080,-7.737011,9.843762,-7.366515,-2.913662,-9.123852,-5.247053,6.636392,-8.437541,-8.801172,-2.157025,7.274532,0.444514,3.493549,2.283626,-8.880455,3.752143,-7.580511,-1.139576,-6.136260,-6.937736,0.117588,4.963775,6.284402,-1.642547,-0.474782,-4.769055,5.445233,-8.294260,1.259570,-1.787176,3.130635,9.845129,-5.184824,-4.042343,-5.030668,7.058155,1.460737,-3.308321,1.578261,-6.669421,6.669208,1.649541,-8.014186,2.443780,2.651554,6.256012,-9.385648,-9.857413,-5.970853,7.869664,3.102883,1.817908,1.756777,0.805876,-7.691511,-6.133506,3.214015,-6.910449,2.772692,7.167756,-2.256493,9.200345,8.232446,3.878537,-0.763774,-2.901545,-7.748872,-9.954298,-3.115665,-6.327531,0.128807,-5.293114,-8.513535,3.526035,7.127794,-6.652195,8.178707,-7.931178,2.232273,2.801864,-1.275221,7.331340,9.899125,-3.179075,1.282220,-8.081982,7.399413,0.662381,1.673873,0.294427,-8.254589,-5.714123,-6.137912,-8.699264,1.098271,3.533797,-4.959324,-8.183249,8.971832,5.750883,9.167304,4.053588,-4.753856,-9.256242,9.850465,-1.311172,2.988755,-7.697135,5.505126,1.207398,-5.638008,-3.286027,2.287319,-2.496842,0.459781,8.521652,5.248496,8.902242,-4.498706,8.051589,-1.782594,4.995450,6.964448,1.050705,-4.187142,7.698558,1.386652,9.383675,-2.527761,8.897905,9.699062,-3.510970,-4.393559,6.119847,0.175436,-5.551753,-0.953344,0.359460,4.278034,4.748961,8.603675,-5.133078,-1.507038,7.799843,4.186156,2.320749,2.123705,7.953715,0.392460,-1.960561,-1.231926,-5.030322,-4.653708,-6.783658,-1.418269,-1.016020,-6.869167,0.522079,-2.330423,8.048453,8.447701,5.965614,-1.187376,-5.632293,6.857030,-7.071710,-0.459575,-5.738660,-9.334561,-9.053928,-7.022291,-3.735192,-7.139462,-6.962288,-5.544241,-2.636103,-6.289413,-1.986772,1.252582,-2.455876,-8.470251,-2.384499,-6.389845,2.051412,2.427327,7.717836,-3.932744,-4.997805,4.077953,-3.347886,-0.963608,-8.692106,-1.163101,4.647449,6.339498,-0.013279,-8.686807,-1.187247,0.908307,4.015195,-1.238143,8.221656,-4.655172,9.471294,-9.213516,2.634101,-0.945435,8.896680,-5.304016,-7.158257,-5.069465,5.166254,7.492789,2.372376,-1.483266,6.655233,-6.478520,9.710900,-9.357522,-9.064007,-0.243025,6.309857,4.297965,8.606671,8.472104,-1.282053,-8.301347,-0.061047,1.171873,3.108566,-9.279191,-4.507556,7.779544,3.051952,-0.657683,-4.168134,2.349637,-0.831302,-6.350149,5.887509,9.263492,0.116645,3.208286,-5.776228,-8.603754,-7.759101,-5.201410,4.969593,4.425550,-3.051801,-3.796757,-0.883936,-8.402970,6.914885,5.772776,1.427402,-7.306264,-1.588606,-8.770689,-7.405394,-5.613830,-9.872149,-0.384101,-4.964123,-6.649626,3.793166,1.000592,5.168888,-5.567405,-6.889248,7.523634,2.333323,6.673431,6.600474,-4.437825,-2.131920,7.580014,7.378064,-4.725657,9.934002,-1.537963,3.245512,-8.526287,-3.978388,4.089944,-0.491422,-1.746964,-7.579105,-2.588823,3.335194,-4.646850,2.947646,-5.878281,1.022093,0.740310,-9.732503,4.623519,0.533846,-1.885605,3.538477,3.357645,-2.257811,7.496249,9.924106,-8.706887,-6.425497,-4.192315,-3.521178,-5.792222,0.999009,-8.616613,-0.848320,1.204635,-2.220289,0.919723,-6.975887,6.899610,-2.478118,7.087078,-9.108246,-3.319171,-5.498645,2.461043,-3.725871,-8.532498,7.191935,8.275560,9.222328,1.650648,-1.460473,1.148776,9.963884,3.638093,5.434781,1.876600,-0.635632,-4.231544,-3.320790,-9.738730,4.158525,-8.071313,5.421620,-3.521978,4.960321,-8.071827]], dtype = "float32")#candidate|1404|(1, 1296)|const|float32
const_1405 = relay.const([-6,-5,-6,-7,6,3], dtype = "int16")#candidate|1405|(6,)|const|int16
call_1403 = relay.TupleGetItem(func_229_call(relay.reshape(const_1404.astype('float32'), [12, 12, 9]), relay.reshape(const_1404.astype('float32'), [12, 12, 9]), relay.reshape(const_1404.astype('float32'), [12, 12, 9]), relay.reshape(const_1405.astype('int16'), [6,]), relay.reshape(const_1404.astype('float64'), [12, 12, 9]), ), 3)
call_1406 = relay.TupleGetItem(func_236_call(relay.reshape(const_1404.astype('float32'), [12, 12, 9]), relay.reshape(const_1404.astype('float32'), [12, 12, 9]), relay.reshape(const_1404.astype('float32'), [12, 12, 9]), relay.reshape(const_1405.astype('int16'), [6,]), relay.reshape(const_1404.astype('float64'), [12, 12, 9]), ), 3)
func_320_call = mod.get_global_var('func_320')
func_323_call = mutated_mod.get_global_var('func_323')
var_1412 = relay.var("var_1412", dtype = "float32", shape = (14, 2))#candidate|1412|(14, 2)|var|float32
call_1411 = relay.TupleGetItem(func_320_call(relay.reshape(var_1412.astype('float32'), [4, 7]), relay.reshape(var_1412.astype('float32'), [4, 7]), ), 1)
call_1413 = relay.TupleGetItem(func_323_call(relay.reshape(var_1412.astype('float32'), [4, 7]), relay.reshape(var_1412.astype('float32'), [4, 7]), ), 1)
bop_1414 = relay.logical_xor(uop_1401.astype('uint8'), relay.reshape(uop_1399.astype('uint8'), relay.shape_of(uop_1401))) # shape=(9, 4)
uop_1425 = relay.sin(uop_1399.astype('float64')) # shape=(9, 4)
bop_1432 = relay.less_equal(uop_1425.astype('bool'), relay.reshape(uop_1401.astype('bool'), relay.shape_of(uop_1425))) # shape=(9, 4)
output = relay.Tuple([call_1403,const_1404,const_1405,call_1411,var_1412,bop_1414,bop_1432,])
output2 = relay.Tuple([call_1406,const_1404,const_1405,call_1413,var_1412,bop_1414,bop_1432,])
func_1444 = relay.Function([var_1412,], output)
mod['func_1444'] = func_1444
mod = relay.transform.InferType()(mod)
var_1445 = relay.var("var_1445", dtype = "float32", shape = (14, 2))#candidate|1445|(14, 2)|var|float32
output = func_1444(var_1445)
func_1446 = relay.Function([var_1445], output)
mutated_mod['func_1446'] = func_1446
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1464 = relay.var("var_1464", dtype = "float32", shape = (4, 2, 14))#candidate|1464|(4, 2, 14)|var|float32
uop_1465 = relay.asin(var_1464.astype('float32')) # shape=(4, 2, 14)
bop_1469 = relay.logical_and(var_1464.astype('bool'), relay.reshape(uop_1465.astype('bool'), relay.shape_of(var_1464))) # shape=(4, 2, 14)
uop_1472 = relay.asinh(uop_1465.astype('float32')) # shape=(4, 2, 14)
func_840_call = mod.get_global_var('func_840')
func_843_call = mutated_mod.get_global_var('func_843')
const_1475 = relay.const([-2.818693,-8.027217,-0.358032,2.738595,1.045541,7.188581,-3.467566,3.343392,-9.834709,-7.465653,-5.833831], dtype = "float32")#candidate|1475|(11,)|const|float32
call_1474 = relay.TupleGetItem(func_840_call(relay.reshape(const_1475.astype('float32'), [11,]), relay.reshape(const_1475.astype('float32'), [11,]), ), 0)
call_1476 = relay.TupleGetItem(func_843_call(relay.reshape(const_1475.astype('float32'), [11,]), relay.reshape(const_1475.astype('float32'), [11,]), ), 0)
output = relay.Tuple([bop_1469,uop_1472,call_1474,const_1475,])
output2 = relay.Tuple([bop_1469,uop_1472,call_1476,const_1475,])
func_1477 = relay.Function([var_1464,], output)
mod['func_1477'] = func_1477
mod = relay.transform.InferType()(mod)
var_1478 = relay.var("var_1478", dtype = "float32", shape = (4, 2, 14))#candidate|1478|(4, 2, 14)|var|float32
output = func_1477(var_1478)
func_1479 = relay.Function([var_1478], output)
mutated_mod['func_1479'] = func_1479
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1484 = relay.var("var_1484", dtype = "uint8", shape = (4, 14))#candidate|1484|(4, 14)|var|uint8
var_1485 = relay.var("var_1485", dtype = "uint8", shape = (4, 14))#candidate|1485|(4, 14)|var|uint8
bop_1486 = relay.left_shift(var_1484.astype('uint8'), relay.reshape(var_1485.astype('uint8'), relay.shape_of(var_1484))) # shape=(4, 14)
bop_1492 = relay.minimum(var_1485.astype('float32'), relay.reshape(var_1484.astype('float32'), relay.shape_of(var_1485))) # shape=(4, 14)
func_572_call = mod.get_global_var('func_572')
func_575_call = mutated_mod.get_global_var('func_575')
var_1496 = relay.var("var_1496", dtype = "float64", shape = (384,))#candidate|1496|(384,)|var|float64
call_1495 = relay.TupleGetItem(func_572_call(relay.reshape(var_1496.astype('float64'), [16, 8, 3]), relay.reshape(var_1496.astype('float64'), [16, 8, 3]), ), 0)
call_1497 = relay.TupleGetItem(func_575_call(relay.reshape(var_1496.astype('float64'), [16, 8, 3]), relay.reshape(var_1496.astype('float64'), [16, 8, 3]), ), 0)
uop_1498 = relay.atanh(var_1485.astype('float64')) # shape=(4, 14)
bop_1501 = relay.floor_mod(uop_1498.astype('float64'), relay.reshape(var_1484.astype('float64'), relay.shape_of(uop_1498))) # shape=(4, 14)
func_708_call = mod.get_global_var('func_708')
func_716_call = mutated_mod.get_global_var('func_716')
const_1507 = relay.const([-2.357011,-0.752646,-1.278219,-4.950268,-6.711943,-5.876878,-8.557002,2.513976,-7.866961,-0.244451,-6.373287,9.697776,9.434273,8.302843,8.779196,-2.806205,0.960703,-3.592941,-7.524909,2.174862,-2.962538,5.690828,-7.084706,3.069375,9.097855,2.257246,4.637152,7.672558,-9.500712,2.808706,4.879735,-6.127689,1.445719,-1.603719,4.955355,-9.449505,5.127706,-3.183494,4.678666,9.362479,-8.487313,-5.295070,2.896113,-5.709029,-5.014921,3.429899,4.828368,8.166275,8.739855,-3.119678,5.538406,-3.536430,8.406621,-1.744200,-5.501927,2.936785,8.142162,3.749187,8.551389,-9.392021,4.932866,1.401107,9.460471,2.782535,-4.536929,-5.880383,0.301243,9.896900,2.445119,9.047218,2.161127,-7.082430,-9.124143,9.816366,-7.130876,1.499531,5.534339,-2.384510,6.901409,4.420186,-7.933611,1.380455,-9.848557,-9.347213,3.595318,-5.138426,-6.586471,5.844094,-4.697827,5.562663,-1.313465,-0.156746,3.673545,8.068734,4.854601,8.570952,-7.760885,4.126488,5.226234,-0.664579,2.896268,6.349434,-3.905271,-2.052985,5.625443,9.907482,-9.747778,1.100689,-3.727087,7.500517,-2.246498,0.034201,7.129409,0.035789,-8.841864,3.564221,-2.766117,-7.337275,5.979104,2.173731,-5.382865,2.004405,9.677180,-6.633648,5.241938,7.803251,-4.069309,-2.964304,9.545687,-8.566395,8.714788,6.041023,-7.728419,-6.965804,-3.722274,-6.965943,-6.940040,2.128211,3.225734,-2.517561,2.227055,-8.018182,-9.435098,-5.128863,-0.060749,-0.004309,-7.196762,-4.925490,2.520076,0.443900,-5.823136,-7.745574,7.388500,-9.861127,2.725789,1.944635,-8.041734,9.522160,-5.268678,-8.723500,-3.294197,-6.647748,-8.069521,-5.653344,-0.898352,1.570817,5.865027,4.356886,-8.740478,2.153437,-9.229309,-3.598116,-3.301533,-5.397568,8.784283,-5.590311,9.450829,8.388799,2.717791,5.565885,1.055756,-8.849779,-5.772337,7.398527,-0.569751,-2.783270,9.988890,9.683698,-9.844153,-6.646124,2.244943,-0.096486,9.479536,-8.154929,2.563717,-0.148396,1.350944,2.106257,8.434081,-0.445354,-6.644481,-3.909803,2.136898,0.255505,7.480464,-6.847361,-6.993412,6.304225,-7.316519,-9.708797,4.540531,-9.737792,-1.565094,-0.526599,-7.820738,4.012788,-1.013423,-9.200390,1.227546,7.634516,2.170023,0.775586,-6.391786,3.344537,6.849203,-8.707120,5.989373,5.804628,7.774832,2.016936,-6.791812,-8.513305,-2.802674,-3.636341,-8.924610,1.866092,0.432353,-7.878660,8.198650,-2.061082,8.534797,-5.725986,1.612710,-3.046371,8.711442,-3.546651,-4.638311,-1.907843,2.764753,0.498842,2.151647,7.384006,6.323612,-0.180684,-4.518270,1.476887,-8.937673,-7.525506,4.782281,-7.175550,-4.410534,-2.070313,4.044350,7.443900,-7.452760,-2.798357,6.838281,-9.797735,6.021443,-8.144284,-4.004336,-5.492490,2.635977,-2.252448,5.700771,1.515274,-3.570175,1.583418,8.166964,-5.515628,7.014283,2.771608,2.956096,8.122949,-0.895420,-9.651921,-4.670365,4.635467,4.507474,-2.806621,-0.525903,-1.061689,-9.113832,-4.795137,-9.427413,9.688052,-7.114407,0.045451,-0.400746,-7.882984,-6.465697,6.016142,6.849809,-4.659395,8.904205,-7.007299,-4.176901,-1.465319,-1.547790,-7.107720,1.542398,-6.467404,-6.729484,6.150591,-9.550453,-1.615501,-3.343526,3.667295,-5.516158,-7.992114,8.597404,-2.850241,6.992418,-2.146994,4.859322,6.934977,-0.819848,-7.258340,0.723908,5.702327,-5.211712,-1.905563,-5.949445,-1.874854,7.269660,-8.641164,1.610431,-1.521730,1.796488,-6.435055,-3.201264,8.141779,5.191185,3.477562,-3.602516,7.919182,-5.602860,4.730937,8.979786,-4.303901,2.118281,2.826297,9.649356,7.304816,-1.398473,2.330568,5.870968,7.201617,7.908973,4.391499,-4.785736,-4.213468,-2.360780,2.834332,5.780390,-6.897941,-0.482456,-6.482177,-3.590710,-3.273266,5.789352,1.272833,-1.021673,-4.341751,9.403905,5.319392,-1.192154,3.886585,-7.757151,-8.785848,-4.943587,-0.976658,9.284391,-5.488355,-9.713453,-7.020564,-6.572041,4.936105,7.879237,-0.494009,8.596279,-8.373103,1.446503,2.421559,-6.902714,-7.691576,-8.446725,5.487054,5.373861,3.542470,-1.584948,4.690052,0.302322,6.168776,-8.372580,-4.544163,-6.462773,0.798704,-7.455468,9.546193,5.130955,1.739681,-4.793743,6.378838,-0.244155,0.901934,-2.487685,5.815574,8.707427,-6.568140,8.540876,-8.751123,0.727301,3.615018,-5.703470,-4.809504,-4.316118,6.595605,-2.043807,-7.195128,-5.032621,1.404201,0.566239,-9.867999,-3.305634,-7.938645,9.899441,7.783058,7.539591,-9.607027,4.298681,6.403747,-3.682720,-5.245892,1.543041,9.027351,-6.905368,-4.385593,-5.721063,3.925152,-0.062556,-6.421944,-7.746257,-9.997450,-6.907619,0.527400,-7.314885,-2.464541,7.045495,9.266763,9.639933,-3.367948,-0.455495,4.602604,-3.554638,2.930283,6.272829,-3.051565,4.213554,3.605133,-5.768780,3.389874,7.584586,1.132299,-2.487750,3.014161,-8.099107,9.909841,-7.159147,9.460078,8.411356,0.484608,-2.148490,-1.744132,1.073484,9.467060,-0.652817,-3.862156,-8.503780,1.946336,-0.190982,0.962384,-0.359564,1.603380,6.510199,5.822213,7.886708,0.140592,3.962852,1.307690,9.180001,-3.568180,4.361343,2.530173,-7.150649,-3.021148,7.298787,3.233056,2.774951,2.581010,0.465734,8.555721,6.635160,-7.851622,3.445925,7.005530,0.870529,-5.515320,-1.940962,-6.204716,-7.404842,-1.561866,-7.667424,-7.529001,-2.657276,4.046301,-0.092511,0.136758,7.227862,-9.496755,0.451961,-1.490886,9.532702,-2.613131,-9.225725,4.144436,9.344343,9.509386,8.688496,2.261751], dtype = "float32")#candidate|1507|(540,)|const|float32
var_1508 = relay.var("var_1508", dtype = "int16", shape = (3, 2))#candidate|1508|(3, 2)|var|int16
const_1509 = relay.const([[9.649261,0.407905,6.706446,5.277813,3.921960,-6.338921,-7.118487,-4.623685,-6.517927,-3.290310,7.310729,-2.776254,9.970985,6.364730,-2.199697,-2.361496,8.533917,9.041003,0.381006,1.285457,-9.071588,7.314442,-8.879811,-8.759494,3.974197,5.586180,5.546469,-7.021928,7.576830,-1.135123,1.977208,-3.764972,0.915585,8.791472,-4.299840,7.231644,9.381064,9.751245,-7.093973,-8.040224,0.078684,-1.072377,5.900041,7.399396,-8.363407,-8.066010,-3.135091,0.632214,9.885829,-2.045160,5.912241,-8.753974,5.843852,-8.478109,7.819698,4.821983,-9.041807,-9.974548,-7.043770,2.726619,3.506488,-3.721698,-6.739605,0.946901,8.322448,9.767949,3.433271,6.929984,4.726010,-5.791526,-2.232146,7.496486,-7.686481,-2.859669,9.238748,7.928484,8.091190,-0.907586,9.425008,9.792094,-0.202980,-0.694419,-6.468815,-3.054412,6.669292,9.428590,-9.423127,1.352472,-4.387294,-4.727076,8.670540,-8.513415,3.575828,-3.111157,1.925975,1.844149,-3.108895,8.223974,6.690437,-2.902957,9.846918,-9.896639,8.999703,-3.491475,4.421260,6.477170,-5.772738,-7.669044,6.445272,6.454779,-5.804124,-1.257140,-9.735228,-0.742222,0.232177,-6.556369,-7.667734,-0.930707,-1.846319,8.429677,6.606359,-8.995589,-8.216106,-9.552885,2.272097,-9.741053,-2.419470,-1.719655,8.759885,0.038954,-2.332635,0.135812,-9.094699,-2.580280,-1.751632,9.060259,-7.592762,1.542661,-2.314728,-0.663944,9.333565,3.609600,1.618635,-7.009751,-4.376728,1.050141,-9.254416,0.545029,4.477717,6.716851,7.363833,0.506192,7.244314,3.127984,-1.324976,2.439149,-5.755346,-8.754203,6.290343,-2.439756,-5.337624,-7.221879,-7.539789,4.341505,3.850148,1.901317,5.647621,-8.013386,-8.273494,-9.968018,-8.200990,-3.921929,4.291529,-8.174803,-3.776477,-6.463653,7.381191,3.201721,4.801376,8.891679,8.642327,1.863884,4.634879,7.755112,8.302236,7.076508,-9.034628,8.060562,-2.056699,-1.516601,-4.675397,2.818230,5.987546,-1.038575,0.219676,3.679191,-2.720401,-6.311342,-1.332534,8.625761,5.940731,6.755212,0.355270,2.550991,6.474858,-9.074880,6.815089,6.924919,-2.874264,9.094039,4.526373,-8.691019,6.387003,4.329447,8.633186,-4.416109],[8.409106,-1.028714,-0.890415,-2.853231,4.566586,2.239219,-9.840840,3.250681,-3.867994,4.818350,6.590270,-2.779629,-5.322357,-3.521023,-0.729574,-3.245211,3.782492,-7.054616,2.990922,9.666020,8.520998,6.371642,9.463710,-2.291310,3.153891,4.156119,-7.858858,8.514542,2.780854,-6.157051,-0.367817,-4.846868,4.818198,5.789448,7.922852,1.132117,-6.492786,5.951434,4.722128,9.845540,7.968759,4.880479,-1.355041,-2.083601,-4.926329,-9.502592,3.421788,-6.678398,7.340983,4.650667,-6.403099,-4.368203,9.987461,-5.448734,8.381677,6.885289,-3.504508,-8.918594,-2.565873,7.094260,6.389969,4.144065,-8.502689,0.695314,-1.787493,-7.689977,0.970779,2.444782,-9.491081,7.180213,9.228879,-6.212583,1.477271,0.371487,1.558107,8.749402,-4.853752,-2.099665,-7.646996,-2.605903,-6.426149,-8.161463,4.364547,8.909816,6.052511,-7.339829,7.799264,3.893348,6.893658,-5.582744,5.494070,-6.019788,5.293514,-6.589763,-7.296879,-6.382671,1.961192,8.024364,-3.597441,1.925793,0.894009,-0.611396,-9.516580,-1.174854,-3.774692,7.386598,-3.895477,8.828536,-7.902787,3.095434,3.703693,9.496231,-7.793767,8.132189,1.285502,4.037553,-5.346413,-2.248121,9.840390,3.395649,2.524251,9.256860,-4.958787,2.313143,-0.102213,3.085120,-9.911738,-9.460812,9.036933,2.018215,-0.249907,-3.138043,9.962893,-5.393535,9.441275,-6.388011,-4.523889,-3.711598,3.183151,3.004666,-2.786040,8.967405,8.048604,-8.162507,5.687341,-2.906713,-9.834000,2.239575,9.289657,-6.358437,0.649921,2.203446,-4.068098,-4.597300,-6.400231,6.714161,-7.825820,4.541445,-0.048886,9.879949,-9.695729,-7.118923,-7.101566,-2.287289,2.235334,-8.391479,1.593161,-2.321099,9.441224,0.285966,-5.562668,-7.567405,9.425129,-3.108865,4.614942,-8.628832,6.604587,-2.261161,-2.291509,8.369501,3.815770,-3.962203,-6.888508,-9.020553,8.605226,9.851455,-5.182149,-7.228158,7.790547,-7.722757,-7.314073,-0.089405,2.054123,2.083694,2.669875,7.565899,-9.218724,-4.156917,-2.709260,-1.644916,-2.169039,8.030912,-6.737773,0.264989,-2.770515,-8.426389,-5.686087,5.619444,-0.381929,4.012999,6.653554,-1.830935,-9.092964,-7.827406,-2.377581,-7.970144],[-2.978395,8.649058,5.100397,3.266205,-1.449810,2.014791,-2.427793,-8.741782,4.130522,5.143774,-2.799392,1.752641,-1.615299,3.608078,-6.142182,4.199647,4.093344,4.255345,3.029626,0.631514,9.651841,-0.796388,9.375584,-0.979108,-4.154313,8.311870,0.555051,1.961641,3.795817,-3.268803,-0.218623,-9.263894,7.835410,3.543156,-7.134301,-6.360620,9.143143,-2.062048,-5.130654,5.715950,-9.168331,8.607717,0.187311,6.427233,-4.034944,7.056628,4.310229,-0.728181,0.100211,-7.669193,-0.859754,2.544316,2.790804,-0.264253,-0.841414,9.995626,5.826588,7.106829,7.216185,7.704405,-2.934433,1.081821,-6.976051,-2.454020,1.312456,-9.929620,-7.512375,4.763178,4.168711,3.281447,4.298076,-7.418649,4.151652,-0.876671,-1.589250,-7.252536,-5.248003,-9.692421,-1.469219,-8.104820,3.178474,7.273060,4.530931,-6.442076,9.393217,-0.471347,-0.385276,1.961328,-5.346604,-6.703156,5.020044,-0.581797,-2.830487,-7.841455,2.783087,-9.113500,7.900239,-7.795564,-5.070389,5.313177,-7.648686,4.905612,-2.612854,6.786274,-4.131816,7.510423,-3.900042,3.547733,7.584151,9.990291,-2.460914,3.455844,-3.527242,-8.125139,-7.887648,-0.815113,-6.024064,8.338307,-2.195306,6.573030,9.379176,-7.275538,-3.477260,-2.573755,6.278366,8.318757,-9.047379,-0.554580,-7.593935,2.994665,-8.949315,-7.256849,9.475299,-3.057994,-7.315602,-8.702828,-7.820150,4.841203,-6.467702,-8.243608,-0.878418,-0.436303,5.251897,3.691640,2.718063,-4.614373,-7.637593,-7.149283,2.332337,8.671853,2.780670,3.114718,-8.083052,-7.780783,-2.214840,-2.690285,-9.895489,3.306413,6.606515,-7.380153,-5.475909,1.466792,2.119686,-6.940227,-1.797920,-8.036714,-8.718132,2.517813,-2.396551,7.187375,5.908846,0.440301,-1.163702,1.204608,2.048638,3.540193,-0.457666,-4.989330,-6.215645,-5.244563,-4.700509,-1.015879,-6.472367,2.957251,-5.988709,-6.960978,9.564545,1.160238,-3.086396,7.546475,-7.803404,8.756599,2.279115,-2.282055,3.022129,-7.446713,3.903947,-7.666444,5.124300,1.098704,-3.425215,3.772120,1.147713,-5.227592,2.991063,-6.973795,-2.530365,-3.724431,9.206456,0.742045,-6.547281,5.118794,9.474469,5.052088,8.790758,-7.439026],[-9.520198,0.966020,-1.257052,-7.450018,-8.739049,-1.751846,-0.615482,-1.697600,0.678350,-7.485857,-4.045577,-8.871511,4.303459,-7.984533,-3.818681,1.364449,-1.542976,-3.991184,-3.597419,-6.190405,8.575104,6.282022,6.089678,-3.457294,0.132470,-0.553679,-5.503626,7.835622,5.255365,-3.927989,-4.846296,-0.781355,9.360160,-9.949194,9.182880,-8.936682,7.340566,2.114174,5.524035,9.967170,-9.412756,-1.706283,-5.785967,1.669463,2.329906,1.264342,6.713239,-2.182342,5.474238,-2.108247,7.750291,8.753840,-1.490841,-4.336731,-4.522996,-1.428922,6.101214,7.512246,3.244808,7.845897,0.476972,-7.783193,8.415714,1.891494,4.029791,2.273364,-2.451344,9.646144,0.127191,-4.601017,-2.733148,1.681931,-3.267353,6.348716,7.821701,-2.460416,-4.833809,6.268701,-1.212264,-6.042136,-8.145910,-7.701487,-7.011981,4.952666,7.992775,-3.312733,-1.969029,-7.729137,-0.777702,-7.371661,-6.252799,-4.907639,-0.626722,-9.700479,-6.570164,-8.380348,1.096481,9.885979,2.298613,3.914471,4.284768,-5.953368,4.348941,-8.155461,-8.744105,7.017645,0.500217,9.110106,3.905163,-2.449357,-1.781023,-2.695777,-0.560615,-0.833431,-0.754123,-9.458897,2.124135,-1.788619,9.446987,-5.719879,2.246208,1.969173,-1.451520,-0.062620,-6.125985,4.119466,-5.560682,-8.810492,-4.100233,-0.207463,9.554609,-9.128789,2.639022,1.078522,4.564727,-1.351534,-4.329233,3.577215,4.086582,-5.025910,1.187192,-5.392434,-2.581011,-4.641743,7.596125,9.428096,8.344490,9.423404,-3.060264,-5.371378,3.011729,9.237305,-6.371042,-6.619608,-8.227932,9.743068,-3.075834,3.353131,8.473688,7.253741,-1.419878,1.311756,-0.086364,-8.864153,9.456054,-6.882374,-4.045779,-4.359779,7.471883,-0.279343,-2.078131,6.790847,2.752883,9.803232,-6.384815,-9.595845,2.503201,-0.057707,-4.290923,5.326668,4.113164,-6.815390,9.522405,-3.574074,1.673019,-9.639318,2.451612,0.978858,6.277782,2.820199,0.329663,-2.438670,7.195166,4.726878,-8.990709,7.507481,-7.320776,5.642432,8.384927,-9.321216,-5.842483,-1.592735,-1.799144,-5.614175,-1.486245,0.936667,4.579844,-0.781438,6.272488,7.975113,-3.406518,5.749874,-5.789580,-3.918024,0.499793,0.415329],[-4.962493,5.883554,5.393952,-5.817209,3.004160,2.257685,2.178419,2.245907,6.566358,-7.221891,3.259464,6.496580,-8.151462,5.566685,-8.995599,5.749011,-9.520802,-9.855118,3.136845,9.725034,-3.731304,9.962763,8.656583,-8.174418,9.115788,-0.522614,5.055961,1.828337,-6.951883,4.764736,3.386295,6.080927,9.965527,8.834413,-1.278037,0.091026,9.732960,-8.159628,7.978677,-8.453120,-1.276684,5.790622,-8.483452,6.178038,-3.340875,0.601782,-0.534242,4.792991,-0.357822,-1.421826,-5.009844,-5.170963,-8.825427,-9.972578,2.340938,2.034788,5.579236,0.405317,2.040368,-5.672579,2.001184,0.395747,-7.463629,7.883093,2.109632,0.309180,9.839793,5.027947,1.683377,4.783151,-6.519692,-9.225984,-1.353287,8.180924,-4.299821,2.439160,-0.408999,9.029797,8.522223,1.909402,-8.751302,-2.027289,-8.817192,-5.849519,0.635352,2.330442,-6.621198,-5.886339,8.353593,-4.492661,1.100316,-4.532750,-5.630308,1.149338,-8.908229,-4.427341,6.246355,6.670422,-9.411594,6.640451,2.195937,-5.259301,-1.087760,-4.408068,-6.983238,-7.355309,-2.174005,5.046732,-5.848612,8.776525,-1.829046,-1.114193,-4.719367,5.487989,0.042859,3.444620,2.589045,-0.954331,-8.194727,-4.760189,2.954938,-9.176261,5.610565,-3.982931,-2.157738,-1.004764,6.663486,8.113339,-6.857793,-4.233723,6.966735,4.999636,6.974119,7.686199,-2.790668,6.644763,-2.854739,-6.040459,8.997006,9.063537,-0.235230,-7.567784,-3.493090,9.845711,5.263538,-6.842157,9.964818,7.235166,8.752981,-6.692338,-9.539899,3.591807,-5.122866,-6.641722,-5.705567,0.304293,-1.542581,-4.558574,4.228200,7.442662,-1.961312,-7.818094,2.353699,-1.223879,-0.627400,1.270891,-7.420171,3.941251,-7.214128,0.236333,1.761473,6.545161,-0.146950,2.959834,5.854570,-6.771594,-3.794617,-3.428374,9.833308,8.090335,2.779674,-0.695150,2.807402,-5.766061,-3.013908,4.783135,7.516943,1.040371,-4.140222,3.917786,9.394568,4.982954,-9.795685,-5.440363,4.636220,4.959905,-5.607288,-5.625943,2.697494,7.798143,-0.385613,-6.523562,6.067979,-2.813089,-9.201807,7.974643,0.477659,6.016861,-8.372714,7.280784,9.239436,4.786039,8.324162,-6.711179,-9.620433,-0.295017],[-6.590392,-1.223322,-6.458988,9.014349,5.352141,-4.976708,-9.354462,-5.497475,7.521876,-0.472050,8.286817,-9.159966,6.542214,6.564290,-9.448608,0.781990,-8.505177,-5.277261,-9.726015,3.960315,9.088628,-8.431184,-0.012180,-0.456654,1.018059,-7.839312,-5.632805,2.095290,3.818605,-3.386029,-9.676702,-5.586478,3.790012,2.112933,9.157226,8.186660,-5.103857,-6.495041,1.479141,3.337710,3.469327,5.974000,-3.614945,2.347369,2.581046,-9.399862,1.418638,1.155986,4.916808,-4.482580,8.750713,6.989602,-2.597028,-7.852761,7.214288,-6.614811,-6.829402,-6.149051,-1.984438,-4.255293,1.614572,9.189621,-5.121236,-4.488307,4.171888,-2.075036,-2.676548,-0.738811,3.309292,-5.248046,-0.266863,2.368254,-3.444602,-5.380666,8.909138,3.502541,6.596815,-9.373101,2.141655,7.436008,6.985408,6.306455,-0.734167,-6.644169,8.091664,-0.397939,4.285389,-6.900888,6.099560,-2.410156,7.849928,-7.688226,-9.113815,-5.613617,4.579383,-2.684527,6.201668,-5.130665,-8.274721,5.527134,-3.326810,2.383420,4.834036,2.099942,-4.224762,-4.602884,9.337053,-0.218411,4.465026,5.585896,0.466634,8.801127,-9.609902,-9.124980,5.092514,-0.024174,0.532669,1.280383,3.856046,0.786861,5.119443,6.824924,-6.862800,-4.027838,2.323324,-5.125863,-7.806948,0.355878,-1.144681,1.609065,-1.888271,1.053932,4.134685,-6.134686,9.987437,2.964405,0.832579,-1.200703,-6.526251,1.364021,-7.485809,-3.689401,-8.853316,8.342598,0.272368,-5.965965,-1.711209,4.048488,-1.576011,-8.430962,-4.662144,-4.732277,8.841595,4.482030,-9.085042,2.197271,0.594626,8.302250,7.151455,-7.008477,4.983279,-1.684784,-7.880935,1.356223,-3.609010,-3.280095,2.513288,-8.747963,4.513185,5.264004,8.124202,7.233658,-7.310548,-4.023502,3.910045,2.952120,1.846597,9.317165,7.417677,-4.293357,-8.676626,-5.655671,-5.590848,-0.246503,7.975238,6.451373,-3.981166,0.218816,6.761735,7.346348,-9.669823,8.777900,-4.975101,7.525799,5.111347,3.526668,-4.143955,-2.386486,7.152888,9.520056,-0.513075,5.207740,4.678138,5.554163,-3.307850,5.021266,0.547278,-0.365327,0.242993,-9.118562,2.819312,5.162414,2.085098,-4.406234,-9.796754,1.811913]], dtype = "float32")#candidate|1509|(6, 216)|const|float32
call_1506 = relay.TupleGetItem(func_708_call(relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(var_1496.astype('float64'), [24, 16]), relay.reshape(var_1508.astype('int16'), [6,]), relay.reshape(const_1509.astype('float32'), [1296,]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), ), 1)
call_1510 = relay.TupleGetItem(func_716_call(relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(var_1496.astype('float64'), [24, 16]), relay.reshape(var_1508.astype('int16'), [6,]), relay.reshape(const_1509.astype('float32'), [1296,]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), ), 1)
bop_1511 = relay.divide(bop_1501.astype('float32'), relay.reshape(var_1485.astype('float32'), relay.shape_of(bop_1501))) # shape=(4, 14)
func_708_call = mod.get_global_var('func_708')
func_716_call = mutated_mod.get_global_var('func_716')
call_1514 = relay.TupleGetItem(func_708_call(relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(call_1495.astype('float64'), [24, 16]), relay.reshape(var_1508.astype('int16'), [6,]), relay.reshape(const_1509.astype('float32'), [1296,]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), ), 9)
call_1515 = relay.TupleGetItem(func_716_call(relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(call_1495.astype('float64'), [24, 16]), relay.reshape(var_1508.astype('int16'), [6,]), relay.reshape(const_1509.astype('float32'), [1296,]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), relay.reshape(const_1507.astype('float32'), [9, 15, 4]), ), 9)
uop_1518 = relay.asin(bop_1501.astype('float32')) # shape=(4, 14)
output = relay.Tuple([bop_1486,bop_1492,call_1495,var_1496,call_1506,const_1507,var_1508,const_1509,bop_1511,call_1514,uop_1518,])
output2 = relay.Tuple([bop_1486,bop_1492,call_1497,var_1496,call_1510,const_1507,var_1508,const_1509,bop_1511,call_1515,uop_1518,])
F = relay.Function([var_1484,var_1485,var_1496,var_1508,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1484,var_1485,var_1496,var_1508,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1484= np.array([[4,-8,10,-9,-8,7,1,-6,-2,4,-5,-7,8,5],[-6,-4,2,7,5,-9,3,10,6,7,-10,-5,1,-2],[-9,10,9,-6,-8,-3,10,-6,7,-7,4,4,-6,-1],[-2,9,-1,-9,-3,-9,1,-5,-5,-6,-7,-9,6,6]], dtype='uint8')
module1.set_input('var_1484', input_1484)
input_1485= np.array([[-4,-2,-1,-10,-9,1,5,4,6,-8,10,-7,-4,9],[2,5,-6,2,7,-2,-2,-10,-4,2,-6,5,4,-5],[8,10,3,6,2,9,-2,8,3,-1,-6,9,5,8],[-7,10,6,5,-7,9,1,-1,-8,-6,-8,-7,2,-6]], dtype='uint8')
module1.set_input('var_1485', input_1485)
input_1496= np.array([1.384435,8.741273,-4.887437,-6.406505,-9.420515,6.245602,-4.683315,-3.703937,-3.064094,-0.080378,-4.269412,-0.630425,-4.345592,-4.587697,-7.218547,-2.494209,-4.309405,-8.760136,0.195953,6.877080,4.993262,-4.142627,-7.026400,5.489202,-5.362279,-1.444980,-0.902500,8.452879,3.123874,5.924797,-6.040236,2.700934,-1.137788,-6.959249,-8.291995,0.355369,-0.355707,2.306958,-5.303152,5.928541,2.311352,7.069547,2.251482,-7.859342,-0.095528,-9.540832,2.426024,6.321670,-8.236181,6.427038,2.000846,-1.223574,-0.155705,-3.486804,-8.948119,3.484644,-8.586022,1.262527,1.498471,-5.578286,-9.370638,8.898904,-4.949051,5.205877,-1.339945,-5.287621,7.545080,8.539225,-8.208291,2.378771,-4.786233,-1.601336,3.479271,-8.103390,0.502737,3.458711,1.165326,9.403735,6.022774,-1.641835,8.179339,-4.842578,-4.737792,1.275980,3.912224,4.193325,0.790115,-9.564885,-5.837687,-4.411540,5.798999,3.878853,-5.441673,7.768031,5.702609,7.929760,-6.252623,9.602639,3.025900,4.665913,1.658136,-3.220281,3.100333,-3.764771,7.254727,6.738783,-8.269634,-1.600077,-3.800378,-3.798352,0.165598,-5.930147,0.357459,-3.146950,-5.076102,-6.227354,8.569778,9.439431,3.150237,-0.296630,-9.180515,-9.212581,-4.419042,8.108585,-7.209044,-9.244537,7.738857,5.356489,-6.027337,9.347565,7.843456,9.390707,3.261455,5.684300,-2.610025,7.078950,-8.267741,0.915435,-8.930772,2.540859,-5.156785,9.134613,-6.231941,7.820919,-1.873738,-0.085102,-9.703772,-3.961176,-5.270562,-7.506690,5.968882,4.688306,4.785425,-2.613767,6.444128,-1.239430,7.759582,9.634224,-8.031322,8.422073,9.449253,3.088080,4.432268,6.978531,8.554068,-4.311626,-5.641857,-5.373793,-6.514694,0.622228,-2.297424,4.642854,0.767511,-4.132362,7.805437,2.826804,7.286127,-8.555574,-7.002130,-1.246990,-5.243775,7.527895,-7.154532,-9.637968,-9.871276,-2.656523,-9.856387,1.426406,-9.852566,8.604927,6.296448,-8.451820,7.426063,3.295951,4.378647,-8.360933,-8.795976,-1.651751,5.830594,5.255796,-7.959896,2.551224,2.103635,8.192818,-0.374004,-2.854619,5.453611,-8.583713,4.545932,-0.213030,3.928534,-6.546673,-2.992348,-1.357068,-7.674586,-7.433791,8.533043,3.662964,-7.741025,-7.977692,6.109840,-1.028533,9.855024,-1.734406,-5.974506,5.635854,8.238231,4.465542,-0.376115,9.651513,4.621589,-1.905518,5.826295,0.916126,-4.605380,-9.428120,-5.855280,-9.433850,8.248649,7.782507,8.008173,7.571514,-1.531939,1.702640,-7.080444,8.188064,-8.561400,-5.496942,6.165521,0.916373,6.022373,-9.613758,-5.579764,-9.090020,2.309761,8.688320,-3.762093,2.992512,1.864615,-8.951616,1.608804,3.610947,6.150460,-2.056746,2.546223,-1.673042,6.253720,9.205545,9.344187,-9.879690,8.799551,1.178669,-9.164086,-1.408447,4.252619,-8.374989,4.680465,-7.728034,9.602581,4.026221,-1.064581,-3.201520,-4.714355,0.712059,2.317445,-3.101191,3.538787,-0.378226,-4.734716,7.779895,4.405743,3.722868,4.711017,3.926305,-2.624593,-6.252053,-4.710279,-5.319181,-0.221715,-2.304826,4.419252,-0.727964,4.284555,3.863705,3.328771,8.906067,-4.528830,7.972783,5.375328,-8.624189,-0.964520,-6.080270,0.605862,9.872459,3.616821,1.046455,2.431716,3.015523,6.075772,-8.383231,-6.784215,8.622416,-4.449711,-2.989142,-4.414915,3.666659,2.712181,7.299996,2.651295,-5.046859,0.880687,6.704050,9.572592,3.339058,0.473732,-9.059246,9.389445,-6.766259,-7.807115,8.803503,-2.581608,2.631533,5.536076,-9.724564,-1.888139,0.919691,6.608374,-0.096890,3.272101,9.842167,3.806735,-9.333556,5.701950,1.750575,-7.071234,-2.417732,9.497020,-5.460724,9.698301,7.211005,-2.546049,5.571511,-3.587116,-5.204346,3.797925,-4.193511,4.921902,2.821801,-3.345378,5.089119,-7.111700,9.454690,0.658542,-0.845493,-4.391296,-8.568523,-3.421367,-1.815497,8.795094,-7.899251,-6.897363,-5.978263,-2.082213,7.897476], dtype='float64')
module1.set_input('var_1496', input_1496)
input_1508= np.array([[2,-8],[-8,7],[-6,-9]], dtype='int16')
module1.set_input('var_1508', input_1508)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res3 = intrp3.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res4 = intrp4.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
res1_8 = module1.get_output(8).asnumpy()
res2_8 = res2[8].asnumpy()
res3_8 = res3[8].asnumpy()
res4_8 = res4[8].asnumpy()
np.testing.assert_allclose(res1_8 ,res2_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res3_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_8 ,res4_8, atol=1e-3, rtol=1e-3)
(res1_8 == res2_8).all()
(res1_8 == res3_8).all()
(res1_8 == res4_8).all()
res1_9 = module1.get_output(9).asnumpy()
res2_9 = res2[9].asnumpy()
res3_9 = res3[9].asnumpy()
res4_9 = res4[9].asnumpy()
np.testing.assert_allclose(res1_9 ,res2_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res3_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_9 ,res4_9, atol=1e-3, rtol=1e-3)
(res1_9 == res2_9).all()
(res1_9 == res3_9).all()
(res1_9 == res4_9).all()
res1_10 = module1.get_output(10).asnumpy()
res2_10 = res2[10].asnumpy()
res3_10 = res3[10].asnumpy()
res4_10 = res4[10].asnumpy()
np.testing.assert_allclose(res1_10 ,res2_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res3_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_10 ,res4_10, atol=1e-3, rtol=1e-3)
(res1_10 == res2_10).all()
(res1_10 == res3_10).all()
(res1_10 == res4_10).all()
module5.set_input('var_1484', input_1484)
module5.set_input('var_1485', input_1485)
module5.set_input('var_1496', input_1496)
module5.set_input('var_1508', input_1508)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res7 = intrp7.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res8 = intrp8.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
res5_8 = module5.get_output(8).asnumpy()
res6_8 = res6[8].asnumpy()
res7_8 = res7[8].asnumpy()
res8_8 = res8[8].asnumpy()
np.testing.assert_allclose(res5_8 ,res6_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res7_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_8 ,res8_8, atol=1e-3, rtol=1e-3)
(res5_8 == res6_8).all()
(res5_8 == res7_8).all()
(res5_8 == res8_8).all()
res5_9 = module5.get_output(9).asnumpy()
res6_9 = res6[9].asnumpy()
res7_9 = res7[9].asnumpy()
res8_9 = res8[9].asnumpy()
np.testing.assert_allclose(res5_9 ,res6_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res7_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_9 ,res8_9, atol=1e-3, rtol=1e-3)
(res5_9 == res6_9).all()
(res5_9 == res7_9).all()
(res5_9 == res8_9).all()
res5_10 = module5.get_output(10).asnumpy()
res6_10 = res6[10].asnumpy()
res7_10 = res7[10].asnumpy()
res8_10 = res8[10].asnumpy()
np.testing.assert_allclose(res5_10 ,res6_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res7_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_10 ,res8_10, atol=1e-3, rtol=1e-3)
(res5_10 == res6_10).all()
(res5_10 == res7_10).all()
(res5_10 == res8_10).all()
module9.set_input('var_1484', input_1484)
module9.set_input('var_1485', input_1485)
module9.set_input('var_1496', input_1496)
module9.set_input('var_1508', input_1508)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res11 = intrp11.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res12 = intrp12.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
res9_8 = module9.get_output(8).asnumpy()
res10_8 = res10[8].asnumpy()
res11_8 = res11[8].asnumpy()
res12_8 = res12[8].asnumpy()
np.testing.assert_allclose(res9_8 ,res10_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res11_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_8 ,res12_8, atol=1e-3, rtol=1e-3)
(res9_8 == res10_8).all()
(res9_8 == res11_8).all()
(res9_8 == res12_8).all()
res9_9 = module9.get_output(9).asnumpy()
res10_9 = res10[9].asnumpy()
res11_9 = res11[9].asnumpy()
res12_9 = res12[9].asnumpy()
np.testing.assert_allclose(res9_9 ,res10_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res11_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_9 ,res12_9, atol=1e-3, rtol=1e-3)
(res9_9 == res10_9).all()
(res9_9 == res11_9).all()
(res9_9 == res12_9).all()
res9_10 = module9.get_output(10).asnumpy()
res10_10 = res10[10].asnumpy()
res11_10 = res11[10].asnumpy()
res12_10 = res12[10].asnumpy()
np.testing.assert_allclose(res9_10 ,res10_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res11_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_10 ,res12_10, atol=1e-3, rtol=1e-3)
(res9_10 == res10_10).all()
(res9_10 == res11_10).all()
(res9_10 == res12_10).all()
module13.set_input('var_1484', input_1484)
module13.set_input('var_1485', input_1485)
module13.set_input('var_1496', input_1496)
module13.set_input('var_1508', input_1508)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res15 = intrp15.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res16 = intrp16.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
res13_8 = module13.get_output(8).asnumpy()
res14_8 = res14[8].asnumpy()
res15_8 = res15[8].asnumpy()
res16_8 = res16[8].asnumpy()
np.testing.assert_allclose(res13_8 ,res14_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res15_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_8 ,res16_8, atol=1e-3, rtol=1e-3)
(res13_8 == res14_8).all()
(res13_8 == res15_8).all()
(res13_8 == res16_8).all()
res13_9 = module13.get_output(9).asnumpy()
res14_9 = res14[9].asnumpy()
res15_9 = res15[9].asnumpy()
res16_9 = res16[9].asnumpy()
np.testing.assert_allclose(res13_9 ,res14_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res15_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_9 ,res16_9, atol=1e-3, rtol=1e-3)
(res13_9 == res14_9).all()
(res13_9 == res15_9).all()
(res13_9 == res16_9).all()
res13_10 = module13.get_output(10).asnumpy()
res14_10 = res14[10].asnumpy()
res15_10 = res15[10].asnumpy()
res16_10 = res16[10].asnumpy()
np.testing.assert_allclose(res13_10 ,res14_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res15_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_10 ,res16_10, atol=1e-3, rtol=1e-3)
(res13_10 == res14_10).all()
(res13_10 == res15_10).all()
(res13_10 == res16_10).all()
module17.set_input('var_1484', input_1484)
module17.set_input('var_1485', input_1485)
module17.set_input('var_1496', input_1496)
module17.set_input('var_1508', input_1508)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res19 = intrp19.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res20 = intrp20.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
res17_8 = module17.get_output(8).asnumpy()
res18_8 = res18[8].asnumpy()
res19_8 = res19[8].asnumpy()
res20_8 = res20[8].asnumpy()
np.testing.assert_allclose(res17_8 ,res18_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res19_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_8 ,res20_8, atol=1e-3, rtol=1e-3)
(res17_8 == res18_8).all()
(res17_8 == res19_8).all()
(res17_8 == res20_8).all()
res17_9 = module17.get_output(9).asnumpy()
res18_9 = res18[9].asnumpy()
res19_9 = res19[9].asnumpy()
res20_9 = res20[9].asnumpy()
np.testing.assert_allclose(res17_9 ,res18_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res19_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_9 ,res20_9, atol=1e-3, rtol=1e-3)
(res17_9 == res18_9).all()
(res17_9 == res19_9).all()
(res17_9 == res20_9).all()
res17_10 = module17.get_output(10).asnumpy()
res18_10 = res18[10].asnumpy()
res19_10 = res19[10].asnumpy()
res20_10 = res20[10].asnumpy()
np.testing.assert_allclose(res17_10 ,res18_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res19_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_10 ,res20_10, atol=1e-3, rtol=1e-3)
(res17_10 == res18_10).all()
(res17_10 == res19_10).all()
(res17_10 == res20_10).all()
module21.set_input('var_1484', input_1484)
module21.set_input('var_1485', input_1485)
module21.set_input('var_1496', input_1496)
module21.set_input('var_1508', input_1508)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res23 = intrp23.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res24 = intrp24.evaluate()(input_1484, input_1485, input_1496, input_1508, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()
res21_8 = module21.get_output(8).asnumpy()
res22_8 = res22[8].asnumpy()
res23_8 = res23[8].asnumpy()
res24_8 = res24[8].asnumpy()
np.testing.assert_allclose(res21_8 ,res22_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res23_8, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_8 ,res24_8, atol=1e-3, rtol=1e-3)
(res21_8 == res22_8).all()
(res21_8 == res23_8).all()
(res21_8 == res24_8).all()
res21_9 = module21.get_output(9).asnumpy()
res22_9 = res22[9].asnumpy()
res23_9 = res23[9].asnumpy()
res24_9 = res24[9].asnumpy()
np.testing.assert_allclose(res21_9 ,res22_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res23_9, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_9 ,res24_9, atol=1e-3, rtol=1e-3)
(res21_9 == res22_9).all()
(res21_9 == res23_9).all()
(res21_9 == res24_9).all()
res21_10 = module21.get_output(10).asnumpy()
res22_10 = res22[10].asnumpy()
res23_10 = res23[10].asnumpy()
res24_10 = res24[10].asnumpy()
np.testing.assert_allclose(res21_10 ,res22_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res23_10, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_10 ,res24_10, atol=1e-3, rtol=1e-3)
(res21_10 == res22_10).all()
(res21_10 == res23_10).all()
(res21_10 == res24_10).all()

'''42: TVMFuncCall
41: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
40: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
39: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
38: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
37: tvm::transform::Pass::operator()(tvm::IRModule) const
36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
35: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
34: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
33: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
31: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
30: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
29: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
28: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
27: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
26: _ZN3tvm5relay16MixedModeMutato
25: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
24: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
23: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
22: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
21: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
20: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
19: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
18: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
17: _ZN3tvm5relay16MixedModeMutato
16: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
15: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
14: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
13: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
12: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
11: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
10: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
9: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
8: tvm::transform::Pass::operator()(tvm::IRModule) const
7: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
6: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
5: tvm::transform::Pass::operator()(tvm::IRModule) const
4: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
3: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
1: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
0: tvm::DiagnosticContext::Render()

'''