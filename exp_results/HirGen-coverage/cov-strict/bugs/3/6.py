import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
const_18 = relay.const([[[-4,-9,-8,-6,-4,-3,-3,10,7,-6,-6,10,-4],[9,5,1,9,-4,8,9,7,2,8,5,1,-6]],[[-4,-3,5,-10,-9,2,2,4,-6,-4,7,-2,8],[-4,-9,-8,-5,3,-10,-2,5,-7,-10,7,-6,-8]],[[6,1,7,3,-4,-9,1,-10,-5,1,8,7,9],[-3,-4,9,1,4,-3,-4,-9,9,4,-2,-4,1]],[[3,10,-3,-8,-6,-8,6,2,10,-8,8,-10,7],[-5,7,2,7,1,-7,-6,-5,-7,-8,-2,-7,-9]],[[10,-1,-5,9,-6,1,5,1,2,-4,-4,10,3],[10,6,9,3,4,-8,-10,-6,-8,-5,-2,8,4]],[[10,-4,9,5,5,1,3,6,10,6,6,-6,2],[-8,7,-2,9,10,-2,-3,-6,-7,-2,8,8,10]],[[7,7,-6,-10,8,-8,10,4,2,8,-4,4,-9],[-9,-8,1,3,-5,-2,1,-6,6,8,7,9,-7]],[[2,8,6,8,-4,-1,8,9,-10,-1,-1,2,7],[1,-7,-9,-10,2,-4,-9,-1,9,-6,-9,-9,3]],[[-7,1,-6,-2,-1,-4,7,4,-6,2,-5,7,7],[8,-8,8,-5,3,-1,4,7,-2,4,8,3,7]],[[10,9,-2,5,-9,-5,-2,-8,5,-7,-10,7,-7],[3,-2,5,-4,9,-5,-6,-7,-1,-9,-6,-10,7]],[[3,3,-6,7,-7,-9,-1,7,-5,10,-3,-3,-9],[9,3,7,-7,-4,-7,2,-5,4,-9,2,1,-6]],[[-3,9,9,9,-3,7,-9,4,6,-9,-6,7,-4],[-1,-10,-1,7,7,7,9,-6,-9,-1,-10,-6,-8]],[[-10,8,-3,-8,6,-10,-9,-1,4,-6,10,5,6],[-6,2,5,-8,-7,3,-6,7,4,-2,2,-8,-8]],[[2,8,7,-2,-10,5,3,-1,-9,7,-4,10,7],[3,2,2,5,4,5,-4,-5,5,1,6,4,4]],[[4,5,9,7,-9,5,-10,-9,5,2,-2,-1,6],[3,-9,-7,2,-4,-9,-10,9,-6,4,-6,7,-2]]], dtype = "int8")#candidate|18|(15, 2, 13)|const|int8
var_19 = relay.var("var_19", dtype = "int8", shape = (15, 2, 13))#candidate|19|(15, 2, 13)|var|int8
bop_20 = relay.subtract(const_18.astype('int8'), relay.reshape(var_19.astype('int8'), relay.shape_of(const_18))) # shape=(15, 2, 13)
output = relay.Tuple([bop_20,])
output2 = relay.Tuple([bop_20,])
func_25 = relay.Function([var_19,], output)
mod['func_25'] = func_25
mod = relay.transform.InferType()(mod)
var_26 = relay.var("var_26", dtype = "int8", shape = (15, 2, 13))#candidate|26|(15, 2, 13)|var|int8
output = func_25(var_26)
func_27 = relay.Function([var_26], output)
mutated_mod['func_27'] = func_27
mutated_mod = relay.transform.InferType()(mutated_mod)
const_29 = relay.const([[-1.854254,-0.919250,9.171975,-5.185910,7.712377,-2.617399,-1.677075],[-4.322626,-7.104907,-1.659568,-9.543477,4.590747,4.624069,5.012283],[6.549550,-5.552173,4.149612,3.532226,4.299186,3.007406,8.144704],[0.956488,5.261118,2.729245,-5.815200,3.796863,-8.352391,5.436560],[-4.620521,-9.091938,1.883211,6.839232,1.770328,5.369536,-6.104186],[-8.194772,-5.725601,2.496590,8.771116,5.375740,-7.855682,8.739039],[-9.186924,8.764556,1.903721,-9.233907,-1.245788,-6.339922,6.808961],[1.538017,-6.399578,3.558896,2.625917,7.528686,6.812687,4.342438],[0.542411,-0.166187,2.420377,-5.990307,-8.131012,8.384931,1.121121],[-0.607882,2.130005,-5.706808,1.447478,-8.272864,8.015122,-5.226307],[8.269278,-6.775307,-1.822665,-3.590897,-3.096264,-0.116614,8.734428],[-8.779537,9.788456,7.778103,-9.987071,2.072486,-2.270276,-7.539462],[6.798175,-6.788169,-8.574245,1.066485,-1.200131,-6.896790,1.814570],[1.975927,-9.035935,9.711645,-4.185536,-5.897017,-0.627834,9.229463],[-5.717852,-0.356987,-7.375150,-0.604058,-1.531742,6.495745,4.246225]], dtype = "float32")#candidate|29|(15, 7)|const|float32
uop_30 = relay.sinh(const_29.astype('float32')) # shape=(15, 7)
const_32 = relay.const([[0.391636,6.531300,8.972761,9.911935,-9.869701,-9.251436,3.056519],[0.991250,-3.964345,0.269529,6.294644,8.099927,7.611326,3.818070],[0.294145,9.944279,4.036577,-8.325999,-9.445908,-7.859568,3.046370],[8.055081,-3.813582,7.658372,-1.425178,4.967884,7.345980,7.502433],[1.296374,-1.061091,-6.133342,7.709166,-0.527261,-6.428917,1.468311],[-1.029637,9.391879,-0.315613,-9.167407,-1.068724,-3.208314,8.942571],[3.072020,9.661067,7.340749,1.892833,0.516358,5.671973,-3.484947],[-2.779171,-2.676412,-0.177148,8.288401,6.319050,-8.904233,-1.946178],[6.345238,-6.327250,-7.802954,-8.220447,-4.765322,0.898599,-2.370435],[1.263460,-4.076414,9.619219,-5.125350,7.052661,-7.061674,-6.755351],[-1.425671,2.369671,-0.943689,-1.739128,1.072851,-0.188182,-7.239481],[1.264390,-5.211367,5.537940,7.765096,6.297935,-5.460856,0.998556],[9.047736,5.406700,-7.937404,2.256433,9.509605,2.780439,-5.327234],[-2.259332,-8.172659,-5.787341,-9.477417,4.125144,-7.994048,-9.260041],[3.348418,5.688661,2.052333,9.500998,7.775230,-0.765732,-8.179604]], dtype = "float32")#candidate|32|(15, 7)|const|float32
bop_33 = relay.less_equal(uop_30.astype('bool'), relay.reshape(const_32.astype('bool'), relay.shape_of(uop_30))) # shape=(15, 7)
func_25_call = mod.get_global_var('func_25')
func_27_call = mutated_mod.get_global_var('func_27')
var_39 = relay.var("var_39", dtype = "int8", shape = (390,))#candidate|39|(390,)|var|int8
call_38 = relay.TupleGetItem(func_25_call(relay.reshape(var_39.astype('int8'), [15, 2, 13])), 0)
call_40 = relay.TupleGetItem(func_27_call(relay.reshape(var_39.astype('int8'), [15, 2, 13])), 0)
output = relay.Tuple([bop_33,call_38,var_39,])
output2 = relay.Tuple([bop_33,call_40,var_39,])
func_47 = relay.Function([var_39,], output)
mod['func_47'] = func_47
mod = relay.transform.InferType()(mod)
mutated_mod['func_47'] = func_47
mutated_mod = relay.transform.InferType()(mutated_mod)
var_48 = relay.var("var_48", dtype = "int8", shape = (390,))#candidate|48|(390,)|var|int8
func_47_call = mutated_mod.get_global_var('func_47')
call_49 = func_47_call(var_48)
output = call_49
func_50 = relay.Function([var_48], output)
mutated_mod['func_50'] = func_50
mutated_mod = relay.transform.InferType()(mutated_mod)
var_142 = relay.var("var_142", dtype = "float64", shape = (11,))#candidate|142|(11,)|var|float64
uop_143 = relay.sqrt(var_142.astype('float64')) # shape=(11,)
output = uop_143
output2 = uop_143
func_150 = relay.Function([var_142,], output)
mod['func_150'] = func_150
mod = relay.transform.InferType()(mod)
mutated_mod['func_150'] = func_150
mutated_mod = relay.transform.InferType()(mutated_mod)
var_151 = relay.var("var_151", dtype = "float64", shape = (11,))#candidate|151|(11,)|var|float64
func_150_call = mutated_mod.get_global_var('func_150')
call_152 = func_150_call(var_151)
output = call_152
func_153 = relay.Function([var_151], output)
mutated_mod['func_153'] = func_153
mutated_mod = relay.transform.InferType()(mutated_mod)
var_168 = relay.var("var_168", dtype = "float32", shape = (8, 1, 1))#candidate|168|(8, 1, 1)|var|float32
const_169 = relay.const([[[-9.709208],[9.435557],[-9.500003],[-9.467975],[-8.603348],[8.826136],[-3.108157]],[[-6.611915],[7.940886],[1.698446],[8.275091],[1.291105],[3.810281],[-9.088943]],[[-6.429538],[-9.268998],[-1.554277],[4.360105],[-4.030001],[-2.130304],[-3.680215]],[[3.705595],[2.600118],[2.005841],[4.661041],[-9.768280],[1.901605],[-0.505940]],[[-0.166262],[0.935626],[4.758644],[-1.568243],[-4.792271],[-4.103782],[7.602456]],[[0.514276],[-9.014694],[-2.031762],[6.036056],[1.469965],[1.921205],[0.378242]],[[0.159379],[9.516655],[0.909871],[3.689199],[-0.591909],[-5.921523],[3.985394]],[[5.722281],[4.374642],[4.932963],[2.100122],[-7.588990],[2.469527],[7.867650]]], dtype = "float32")#candidate|169|(8, 7, 1)|const|float32
bop_170 = relay.mod(var_168.astype('float32'), const_169.astype('float32')) # shape=(8, 7, 1)
bop_176 = relay.greater_equal(const_169.astype('bool'), relay.reshape(bop_170.astype('bool'), relay.shape_of(const_169))) # shape=(8, 7, 1)
output = bop_176
output2 = bop_176
func_180 = relay.Function([var_168,], output)
mod['func_180'] = func_180
mod = relay.transform.InferType()(mod)
var_181 = relay.var("var_181", dtype = "float32", shape = (8, 1, 1))#candidate|181|(8, 1, 1)|var|float32
output = func_180(var_181)
func_182 = relay.Function([var_181], output)
mutated_mod['func_182'] = func_182
mutated_mod = relay.transform.InferType()(mutated_mod)
var_204 = relay.var("var_204", dtype = "float64", shape = (9, 6))#candidate|204|(9, 6)|var|float64
uop_205 = relay.erf(var_204.astype('float64')) # shape=(9, 6)
output = uop_205
output2 = uop_205
func_215 = relay.Function([var_204,], output)
mod['func_215'] = func_215
mod = relay.transform.InferType()(mod)
mutated_mod['func_215'] = func_215
mutated_mod = relay.transform.InferType()(mutated_mod)
var_216 = relay.var("var_216", dtype = "float64", shape = (9, 6))#candidate|216|(9, 6)|var|float64
func_215_call = mutated_mod.get_global_var('func_215')
call_217 = func_215_call(var_216)
output = call_217
func_218 = relay.Function([var_216], output)
mutated_mod['func_218'] = func_218
mutated_mod = relay.transform.InferType()(mutated_mod)
var_276 = relay.var("var_276", dtype = "float64", shape = (9,))#candidate|276|(9,)|var|float64
uop_277 = relay.atanh(var_276.astype('float64')) # shape=(9,)
bop_281 = relay.less(var_276.astype('bool'), relay.reshape(uop_277.astype('bool'), relay.shape_of(var_276))) # shape=(9,)
output = relay.Tuple([bop_281,])
output2 = relay.Tuple([bop_281,])
func_286 = relay.Function([var_276,], output)
mod['func_286'] = func_286
mod = relay.transform.InferType()(mod)
var_287 = relay.var("var_287", dtype = "float64", shape = (9,))#candidate|287|(9,)|var|float64
output = func_286(var_287)
func_288 = relay.Function([var_287], output)
mutated_mod['func_288'] = func_288
mutated_mod = relay.transform.InferType()(mutated_mod)
const_301 = relay.const([[[-0.912187,6.896654,-9.459590],[5.692117,-8.812764,4.298230],[-8.535604,5.331041,-1.922003],[0.861216,0.681412,-6.381459],[-3.312277,8.332959,1.757348],[-8.638372,-5.830544,-8.678241],[-8.396824,-5.452527,3.105781],[8.926269,-3.682403,1.566643],[-4.248124,4.010126,-1.065963],[1.605322,4.687915,4.937341],[9.115537,8.386979,4.626303],[-4.081439,3.760989,-7.345387],[-7.150979,6.026279,-7.313871],[-8.997002,5.562683,-0.357982],[2.059728,-0.924887,5.563658]],[[9.331525,7.233906,-9.479564],[6.028589,-2.970954,4.636430],[4.620238,3.108924,3.888559],[3.261133,-1.780946,0.939750],[0.036529,-6.921432,-0.352545],[6.507094,-6.707441,-4.493264],[3.237641,7.743689,-6.620339],[-0.462004,-0.885046,-4.422761],[5.635755,8.181094,7.401952],[9.929777,6.463076,-0.423686],[2.924181,-7.796982,9.549735],[-1.448458,-6.460573,-1.387361],[-7.071900,-4.353203,-9.356030],[-7.629831,9.798704,1.885926],[4.776432,5.084486,-5.512040]],[[-6.300943,4.562899,8.107215],[9.424420,1.717476,3.827471],[-3.299661,-5.860850,1.026621],[-0.398687,-8.219836,2.022747],[-5.450565,-0.224446,-5.625843],[9.175924,-4.020475,6.830147],[8.257460,3.304290,-0.980857],[0.384512,4.867855,6.253009],[-9.467195,-5.746679,5.778963],[1.428635,-0.669438,8.681814],[-5.510923,5.981881,6.821046],[5.039916,1.658290,1.658600],[7.629303,8.446118,-3.323792],[8.210526,-5.759674,-7.270423],[-3.537274,3.798510,3.337317]],[[3.779650,7.937934,3.505233],[6.302139,-1.631109,8.118331],[-5.377435,-3.971219,6.544941],[-4.692405,3.111986,0.271632],[2.032614,2.061584,-6.606522],[8.231792,8.583064,4.014950],[-1.583064,8.587261,4.605594],[-1.923754,4.456134,6.415702],[-9.440466,-9.261688,-0.042379],[9.199680,9.650755,-8.883025],[0.721082,8.089642,9.827828],[9.419370,4.587016,-9.129191],[-4.043711,-5.566955,0.306462],[-8.279717,0.945913,6.594225],[-3.366236,6.706407,-3.130952]],[[-1.404868,-2.202324,-8.366034],[-8.626161,9.259151,-6.445932],[-2.435106,-3.010505,-3.154508],[7.394933,4.412608,6.300404],[-4.621477,4.092375,3.960897],[-7.473543,-7.182917,6.304131],[-0.977530,-4.498407,2.383947],[2.405310,2.148675,-7.495112],[4.692730,0.393638,9.339108],[9.981951,-2.799109,0.410040],[-6.308558,5.001595,-3.694610],[4.433326,-4.529656,-4.230788],[-8.888536,-4.149119,-1.828338],[-3.715343,-3.366332,-6.874976],[-8.287366,5.902424,8.749573]],[[7.923285,-4.853341,-5.340221],[0.689272,3.350039,0.366123],[-9.476583,1.996567,-0.619876],[8.764592,7.622290,-0.404623],[7.079320,-3.631821,1.582151],[-2.490942,6.854705,-6.116627],[9.471599,-0.346422,0.719716],[5.056263,2.444011,-6.251518],[-2.333068,-5.235051,3.018709],[8.596400,-9.416939,-4.504206],[8.839023,-9.829621,2.161668],[-2.428543,-6.261874,-7.568120],[9.993826,4.316245,-9.005003],[-1.332285,-1.281261,8.947548],[6.305916,-9.346533,-7.153237]],[[0.296375,0.204382,-8.443011],[-9.440241,-6.033673,4.490789],[5.694758,-0.817925,-5.133387],[-4.506248,3.144585,5.151205],[9.704891,6.741879,-1.706309],[-7.613918,-5.754419,2.448213],[-4.888311,8.650270,0.759681],[1.742600,8.061609,3.180810],[6.812137,-9.730657,-6.567497],[6.719308,-3.258393,-6.756562],[-1.848745,2.888686,-4.013430],[6.172507,-6.896432,7.807468],[-6.401225,-1.528634,-8.629539],[3.743132,-2.674308,-8.056273],[8.856165,-3.211746,0.246557]],[[4.546728,4.966813,-0.446107],[5.108788,-9.588907,-9.196150],[2.974876,6.347267,8.974292],[-0.847103,2.808272,-1.015149],[9.013121,9.422100,-3.565075],[-6.119280,-5.071115,-8.053222],[-6.114793,-9.885325,7.705157],[-5.454049,8.631495,5.944251],[-7.118886,3.827755,-4.683511],[4.071986,-1.290598,0.548470],[1.027945,-6.813389,5.052399],[-8.675050,-2.501014,-0.088991],[-2.819173,7.130242,-5.070649],[-1.786389,-9.253382,-5.475953],[4.637254,-0.630103,-1.005061]],[[-2.617391,-4.366842,5.572529],[9.762804,3.107547,1.532106],[-7.574698,-5.244648,9.458671],[-3.062768,4.390204,-2.211045],[9.974605,-5.242161,9.649329],[1.817434,-3.144803,-5.117586],[6.268600,-5.977184,4.356024],[-1.501661,0.472569,6.520439],[-9.000006,-2.677481,-0.567390],[6.345102,-0.526954,-8.785201],[9.980094,-4.237278,9.333598],[4.726566,-0.684529,8.384162],[6.315336,2.951540,-7.123759],[-9.633997,-3.865160,2.261049],[3.613798,-2.786219,-3.225256]],[[3.877314,-3.899156,7.075995],[-8.586763,-3.573917,-8.141370],[-4.355708,-2.278520,-6.268614],[9.297862,3.548883,0.286578],[-1.508525,0.812803,7.558561],[8.011211,7.007306,-5.145159],[9.872598,-2.803086,3.898583],[3.187151,-0.004730,-5.263245],[6.790610,4.579568,8.518819],[1.552662,4.211764,1.532410],[-5.177258,4.958394,-3.623969],[-9.697913,-8.933901,-7.416969],[-0.619342,-3.791642,3.137961],[2.539814,-6.287533,6.201543],[-5.254985,5.313652,5.704753]]], dtype = "float32")#candidate|301|(10, 15, 3)|const|float32
uop_302 = relay.sigmoid(const_301.astype('float32')) # shape=(10, 15, 3)
uop_304 = relay.log2(uop_302.astype('float32')) # shape=(10, 15, 3)
var_308 = relay.var("var_308", dtype = "float32", shape = (10, 15, 3))#candidate|308|(10, 15, 3)|var|float32
bop_309 = relay.floor_divide(uop_302.astype('float32'), relay.reshape(var_308.astype('float32'), relay.shape_of(uop_302))) # shape=(10, 15, 3)
bop_317 = relay.right_shift(uop_302.astype('uint16'), relay.reshape(bop_309.astype('uint16'), relay.shape_of(uop_302))) # shape=(10, 15, 3)
uop_325 = relay.asin(bop_317.astype('float64')) # shape=(10, 15, 3)
bop_332 = relay.right_shift(uop_304.astype('int32'), relay.reshape(uop_302.astype('int32'), relay.shape_of(uop_304))) # shape=(10, 15, 3)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
var_338 = relay.var("var_338", dtype = "float64", shape = (9,))#candidate|338|(9,)|var|float64
call_337 = relay.TupleGetItem(func_286_call(relay.reshape(var_338.astype('float64'), [9,])), 0)
call_339 = relay.TupleGetItem(func_288_call(relay.reshape(var_338.astype('float64'), [9,])), 0)
func_150_call = mod.get_global_var('func_150')
func_153_call = mutated_mod.get_global_var('func_153')
var_341 = relay.var("var_341", dtype = "float64", shape = (11,))#candidate|341|(11,)|var|float64
call_340 = func_150_call(relay.reshape(var_341.astype('float64'), [11,]))
call_342 = func_150_call(relay.reshape(var_341.astype('float64'), [11,]))
func_150_call = mod.get_global_var('func_150')
func_153_call = mutated_mod.get_global_var('func_153')
call_344 = func_150_call(relay.reshape(var_341.astype('float64'), [11,]))
call_345 = func_150_call(relay.reshape(var_341.astype('float64'), [11,]))
var_347 = relay.var("var_347", dtype = "float64", shape = (10, 15, 3))#candidate|347|(10, 15, 3)|var|float64
bop_348 = relay.greater(uop_325.astype('bool'), relay.reshape(var_347.astype('bool'), relay.shape_of(uop_325))) # shape=(10, 15, 3)
uop_351 = relay.sinh(uop_302.astype('float64')) # shape=(10, 15, 3)
func_215_call = mod.get_global_var('func_215')
func_218_call = mutated_mod.get_global_var('func_218')
const_354 = relay.const([-6.039520,4.692115,0.594121,4.515848,-9.165653,-1.449830,7.051551,-7.489797,-1.894691,8.790218,9.173118,9.497643,4.055844,-5.564515,1.214125,-2.060190,-7.639209,8.707285,-0.337486,2.173808,-2.387748,-4.653708,-8.635203,-0.606075,1.262586,-5.086935,6.921314,2.571204,-7.328736,4.699928,-8.518305,8.487157,-1.656895,-6.776671,-0.711190,7.735584,3.318776,-6.373310,-5.934603,-4.515654,8.526175,-4.502069,7.918397,1.606739,3.878310,1.479593,-2.454990,9.609915,6.261032,-3.155192,7.496239,-0.464219,4.494406,-2.053409], dtype = "float64")#candidate|354|(54,)|const|float64
call_353 = func_215_call(relay.reshape(const_354.astype('float64'), [9, 6]))
call_355 = func_215_call(relay.reshape(const_354.astype('float64'), [9, 6]))
uop_356 = relay.log(uop_325.astype('float64')) # shape=(10, 15, 3)
uop_358 = relay.log10(uop_356.astype('float32')) # shape=(10, 15, 3)
var_361 = relay.var("var_361", dtype = "float32", shape = (10, 15, 3))#candidate|361|(10, 15, 3)|var|float32
bop_362 = relay.logical_xor(uop_358.astype('uint16'), relay.reshape(var_361.astype('uint16'), relay.shape_of(uop_358))) # shape=(10, 15, 3)
output = relay.Tuple([bop_332,call_337,var_338,call_340,var_341,call_344,bop_348,uop_351,call_353,const_354,bop_362,])
output2 = relay.Tuple([bop_332,call_339,var_338,call_342,var_341,call_345,bop_348,uop_351,call_355,const_354,bop_362,])
func_365 = relay.Function([var_308,var_338,var_341,var_347,var_361,], output)
mod['func_365'] = func_365
mod = relay.transform.InferType()(mod)
mutated_mod['func_365'] = func_365
mutated_mod = relay.transform.InferType()(mutated_mod)
func_365_call = mutated_mod.get_global_var('func_365')
var_367 = relay.var("var_367", dtype = "float32", shape = (10, 15, 3))#candidate|367|(10, 15, 3)|var|float32
var_368 = relay.var("var_368", dtype = "float64", shape = (9,))#candidate|368|(9,)|var|float64
var_369 = relay.var("var_369", dtype = "float64", shape = (11,))#candidate|369|(11,)|var|float64
var_370 = relay.var("var_370", dtype = "float64", shape = (10, 15, 3))#candidate|370|(10, 15, 3)|var|float64
var_371 = relay.var("var_371", dtype = "float32", shape = (10, 15, 3))#candidate|371|(10, 15, 3)|var|float32
call_366 = func_365_call(var_367,var_368,var_369,var_370,var_371,)
output = call_366
func_372 = relay.Function([var_367,var_368,var_369,var_370,var_371,], output)
mutated_mod['func_372'] = func_372
mutated_mod = relay.transform.InferType()(mutated_mod)
var_377 = relay.var("var_377", dtype = "float64", shape = (8, 1))#candidate|377|(8, 1)|var|float64
uop_378 = relay.tan(var_377.astype('float64')) # shape=(8, 1)
var_385 = relay.var("var_385", dtype = "float64", shape = (8, 9))#candidate|385|(8, 9)|var|float64
bop_386 = relay.greater(uop_378.astype('bool'), var_385.astype('bool')) # shape=(8, 9)
bop_389 = relay.multiply(uop_378.astype('int16'), bop_386.astype('int16')) # shape=(8, 9)
bop_397 = relay.subtract(bop_386.astype('uint64'), uop_378.astype('uint64')) # shape=(8, 9)
var_401 = relay.var("var_401", dtype = "uint64", shape = (8, 9))#candidate|401|(8, 9)|var|uint64
bop_402 = relay.less(bop_397.astype('bool'), relay.reshape(var_401.astype('bool'), relay.shape_of(bop_397))) # shape=(8, 9)
var_405 = relay.var("var_405", dtype = "uint64", shape = (8, 9))#candidate|405|(8, 9)|var|uint64
bop_406 = relay.logical_xor(var_401.astype('int16'), relay.reshape(var_405.astype('int16'), relay.shape_of(var_401))) # shape=(8, 9)
uop_413 = relay.tan(bop_389.astype('float32')) # shape=(8, 9)
func_150_call = mod.get_global_var('func_150')
func_153_call = mutated_mod.get_global_var('func_153')
var_417 = relay.var("var_417", dtype = "float64", shape = (11,))#candidate|417|(11,)|var|float64
call_416 = func_150_call(relay.reshape(var_417.astype('float64'), [11,]))
call_418 = func_150_call(relay.reshape(var_417.astype('float64'), [11,]))
bop_420 = relay.logical_or(uop_413.astype('bool'), relay.reshape(bop_389.astype('bool'), relay.shape_of(uop_413))) # shape=(8, 9)
func_215_call = mod.get_global_var('func_215')
func_218_call = mutated_mod.get_global_var('func_218')
var_428 = relay.var("var_428", dtype = "float64", shape = (54, 1))#candidate|428|(54, 1)|var|float64
call_427 = func_215_call(relay.reshape(var_428.astype('float64'), [9, 6]))
call_429 = func_215_call(relay.reshape(var_428.astype('float64'), [9, 6]))
uop_439 = relay.log(bop_402.astype('float64')) # shape=(8, 9)
bop_446 = relay.mod(bop_420.astype('float32'), uop_378.astype('float32')) # shape=(8, 9)
output = relay.Tuple([bop_406,call_416,var_417,call_427,var_428,uop_439,bop_446,])
output2 = relay.Tuple([bop_406,call_418,var_417,call_429,var_428,uop_439,bop_446,])
func_453 = relay.Function([var_377,var_385,var_401,var_405,var_417,var_428,], output)
mod['func_453'] = func_453
mod = relay.transform.InferType()(mod)
var_454 = relay.var("var_454", dtype = "float64", shape = (8, 1))#candidate|454|(8, 1)|var|float64
var_455 = relay.var("var_455", dtype = "float64", shape = (8, 9))#candidate|455|(8, 9)|var|float64
var_456 = relay.var("var_456", dtype = "uint64", shape = (8, 9))#candidate|456|(8, 9)|var|uint64
var_457 = relay.var("var_457", dtype = "uint64", shape = (8, 9))#candidate|457|(8, 9)|var|uint64
var_458 = relay.var("var_458", dtype = "float64", shape = (11,))#candidate|458|(11,)|var|float64
var_459 = relay.var("var_459", dtype = "float64", shape = (54, 1))#candidate|459|(54, 1)|var|float64
output = func_453(var_454,var_455,var_456,var_457,var_458,var_459,)
func_460 = relay.Function([var_454,var_455,var_456,var_457,var_458,var_459,], output)
mutated_mod['func_460'] = func_460
mutated_mod = relay.transform.InferType()(mutated_mod)
var_473 = relay.var("var_473", dtype = "float32", shape = (15, 13, 16))#candidate|473|(15, 13, 16)|var|float32
var_474 = relay.var("var_474", dtype = "float32", shape = (15, 13, 16))#candidate|474|(15, 13, 16)|var|float32
bop_475 = relay.power(var_473.astype('float32'), relay.reshape(var_474.astype('float32'), relay.shape_of(var_473))) # shape=(15, 13, 16)
output = relay.Tuple([bop_475,])
output2 = relay.Tuple([bop_475,])
func_478 = relay.Function([var_473,var_474,], output)
mod['func_478'] = func_478
mod = relay.transform.InferType()(mod)
var_479 = relay.var("var_479", dtype = "float32", shape = (15, 13, 16))#candidate|479|(15, 13, 16)|var|float32
var_480 = relay.var("var_480", dtype = "float32", shape = (15, 13, 16))#candidate|480|(15, 13, 16)|var|float32
output = func_478(var_479,var_480,)
func_481 = relay.Function([var_479,var_480,], output)
mutated_mod['func_481'] = func_481
mutated_mod = relay.transform.InferType()(mutated_mod)
var_532 = relay.var("var_532", dtype = "float32", shape = (8, 15, 13))#candidate|532|(8, 15, 13)|var|float32
uop_533 = relay.sqrt(var_532.astype('float32')) # shape=(8, 15, 13)
func_215_call = mod.get_global_var('func_215')
func_218_call = mutated_mod.get_global_var('func_218')
var_540 = relay.var("var_540", dtype = "float64", shape = (54,))#candidate|540|(54,)|var|float64
call_539 = func_215_call(relay.reshape(var_540.astype('float64'), [9, 6]))
call_541 = func_215_call(relay.reshape(var_540.astype('float64'), [9, 6]))
bop_542 = relay.equal(uop_533.astype('bool'), relay.reshape(var_532.astype('bool'), relay.shape_of(uop_533))) # shape=(8, 15, 13)
output = relay.Tuple([call_539,var_540,bop_542,])
output2 = relay.Tuple([call_541,var_540,bop_542,])
func_547 = relay.Function([var_532,var_540,], output)
mod['func_547'] = func_547
mod = relay.transform.InferType()(mod)
var_548 = relay.var("var_548", dtype = "float32", shape = (8, 15, 13))#candidate|548|(8, 15, 13)|var|float32
var_549 = relay.var("var_549", dtype = "float64", shape = (54,))#candidate|549|(54,)|var|float64
output = func_547(var_548,var_549,)
func_550 = relay.Function([var_548,var_549,], output)
mutated_mod['func_550'] = func_550
mutated_mod = relay.transform.InferType()(mutated_mod)
var_602 = relay.var("var_602", dtype = "float32", shape = (10, 6, 4))#candidate|602|(10, 6, 4)|var|float32
uop_603 = relay.asinh(var_602.astype('float32')) # shape=(10, 6, 4)
bop_606 = relay.logical_or(uop_603.astype('bool'), relay.reshape(var_602.astype('bool'), relay.shape_of(uop_603))) # shape=(10, 6, 4)
uop_609 = relay.tan(uop_603.astype('float32')) # shape=(10, 6, 4)
uop_611 = relay.acosh(var_602.astype('float32')) # shape=(10, 6, 4)
bop_613 = relay.less_equal(uop_611.astype('bool'), relay.reshape(uop_609.astype('bool'), relay.shape_of(uop_611))) # shape=(10, 6, 4)
output = relay.Tuple([bop_606,bop_613,])
output2 = relay.Tuple([bop_606,bop_613,])
func_616 = relay.Function([var_602,], output)
mod['func_616'] = func_616
mod = relay.transform.InferType()(mod)
mutated_mod['func_616'] = func_616
mutated_mod = relay.transform.InferType()(mutated_mod)
var_617 = relay.var("var_617", dtype = "float32", shape = (10, 6, 4))#candidate|617|(10, 6, 4)|var|float32
func_616_call = mutated_mod.get_global_var('func_616')
call_618 = func_616_call(var_617)
output = call_618
func_619 = relay.Function([var_617], output)
mutated_mod['func_619'] = func_619
mutated_mod = relay.transform.InferType()(mutated_mod)
var_626 = relay.var("var_626", dtype = "uint8", shape = (6, 7, 13))#candidate|626|(6, 7, 13)|var|uint8
var_627 = relay.var("var_627", dtype = "uint8", shape = (6, 7, 13))#candidate|627|(6, 7, 13)|var|uint8
bop_628 = relay.right_shift(var_626.astype('uint8'), relay.reshape(var_627.astype('uint8'), relay.shape_of(var_626))) # shape=(6, 7, 13)
bop_635 = relay.bitwise_or(var_626.astype('uint64'), relay.reshape(bop_628.astype('uint64'), relay.shape_of(var_626))) # shape=(6, 7, 13)
uop_644 = relay.log10(bop_628.astype('float32')) # shape=(6, 7, 13)
bop_646 = relay.bitwise_xor(uop_644.astype('uint32'), relay.reshape(bop_628.astype('uint32'), relay.shape_of(uop_644))) # shape=(6, 7, 13)
bop_651 = relay.greater_equal(bop_646.astype('bool'), relay.reshape(bop_628.astype('bool'), relay.shape_of(bop_646))) # shape=(6, 7, 13)
bop_654 = relay.floor_mod(bop_651.astype('float32'), relay.reshape(bop_635.astype('float32'), relay.shape_of(bop_651))) # shape=(6, 7, 13)
output = bop_654
output2 = bop_654
func_660 = relay.Function([var_626,var_627,], output)
mod['func_660'] = func_660
mod = relay.transform.InferType()(mod)
var_661 = relay.var("var_661", dtype = "uint8", shape = (6, 7, 13))#candidate|661|(6, 7, 13)|var|uint8
var_662 = relay.var("var_662", dtype = "uint8", shape = (6, 7, 13))#candidate|662|(6, 7, 13)|var|uint8
output = func_660(var_661,var_662,)
func_663 = relay.Function([var_661,var_662,], output)
mutated_mod['func_663'] = func_663
mutated_mod = relay.transform.InferType()(mutated_mod)
const_703 = relay.const([[-9.013883,-2.148592,-4.463199,0.266973,-1.677808],[-4.524917,0.512221,-9.718317,0.758025,0.030258],[7.488364,-4.472001,-7.514071,-0.396355,8.044202],[-4.203963,-7.173638,2.572306,7.024736,0.403799],[-1.190931,6.001652,-3.288380,2.220054,7.897756],[-2.595796,7.344853,-8.716427,1.207244,4.406917],[-6.787361,0.419036,-8.607928,-3.156478,2.375143],[3.891426,3.501703,-2.834316,-3.809892,3.103391]], dtype = "float64")#candidate|703|(8, 5)|const|float64
uop_704 = relay.cosh(const_703.astype('float64')) # shape=(8, 5)
uop_710 = relay.cos(uop_704.astype('float32')) # shape=(8, 5)
func_286_call = mod.get_global_var('func_286')
func_288_call = mutated_mod.get_global_var('func_288')
const_715 = relay.const([9.403733,-3.658746,-4.789545,8.489978,6.008104,3.338987,4.087243,-7.465706,5.591416], dtype = "float64")#candidate|715|(9,)|const|float64
call_714 = relay.TupleGetItem(func_286_call(relay.reshape(const_715.astype('float64'), [9,])), 0)
call_716 = relay.TupleGetItem(func_288_call(relay.reshape(const_715.astype('float64'), [9,])), 0)
bop_718 = relay.floor_divide(uop_710.astype('float32'), relay.reshape(const_703.astype('float32'), relay.shape_of(uop_710))) # shape=(8, 5)
bop_721 = relay.multiply(uop_704.astype('int16'), relay.reshape(const_703.astype('int16'), relay.shape_of(uop_704))) # shape=(8, 5)
func_180_call = mod.get_global_var('func_180')
func_182_call = mutated_mod.get_global_var('func_182')
const_726 = relay.const([-7.180069,9.064213,-0.998975,3.697584,5.372295,-1.093972,-9.534952,-8.032937], dtype = "float32")#candidate|726|(8,)|const|float32
call_725 = func_180_call(relay.reshape(const_726.astype('float32'), [8, 1, 1]))
call_727 = func_180_call(relay.reshape(const_726.astype('float32'), [8, 1, 1]))
bop_728 = relay.add(uop_710.astype('uint32'), relay.reshape(bop_718.astype('uint32'), relay.shape_of(uop_710))) # shape=(8, 5)
bop_731 = relay.left_shift(uop_710.astype('uint32'), relay.reshape(uop_704.astype('uint32'), relay.shape_of(uop_710))) # shape=(8, 5)
uop_742 = relay.log(uop_710.astype('float64')) # shape=(8, 5)
const_747 = relay.const([[7.602823,1.773971,-9.960674,3.821963,-1.092229],[-2.110192,1.623449,-7.719325,-6.955557,5.583293],[-4.116388,6.663627,6.873688,9.615737,-0.614141],[-4.336955,-4.207814,3.584027,-9.498228,0.917919],[1.131857,6.398682,-6.036988,-8.757700,-7.354804],[-3.455740,-9.591498,-4.015041,-2.925367,-0.603885],[9.864667,0.714793,-8.820411,-3.979102,8.783534],[9.512424,1.808261,4.723854,-3.776325,-1.243998]], dtype = "float64")#candidate|747|(8, 5)|const|float64
bop_748 = relay.less(uop_742.astype('bool'), relay.reshape(const_747.astype('bool'), relay.shape_of(uop_742))) # shape=(8, 5)
bop_752 = relay.logical_and(bop_728.astype('bool'), relay.reshape(uop_710.astype('bool'), relay.shape_of(bop_728))) # shape=(8, 5)
uop_759 = relay.log10(bop_748.astype('float64')) # shape=(8, 5)
bop_761 = relay.logical_or(bop_721.astype('bool'), relay.reshape(uop_759.astype('bool'), relay.shape_of(bop_721))) # shape=(8, 5)
bop_769 = relay.not_equal(uop_742.astype('bool'), relay.reshape(bop_721.astype('bool'), relay.shape_of(uop_742))) # shape=(8, 5)
func_547_call = mod.get_global_var('func_547')
func_550_call = mutated_mod.get_global_var('func_550')
var_773 = relay.var("var_773", dtype = "float32", shape = (1560,))#candidate|773|(1560,)|var|float32
var_774 = relay.var("var_774", dtype = "float64", shape = (54,))#candidate|774|(54,)|var|float64
call_772 = relay.TupleGetItem(func_547_call(relay.reshape(var_773.astype('float32'), [8, 15, 13]), relay.reshape(var_774.astype('float64'), [54,]), ), 2)
call_775 = relay.TupleGetItem(func_550_call(relay.reshape(var_773.astype('float32'), [8, 15, 13]), relay.reshape(var_774.astype('float64'), [54,]), ), 2)
const_777 = relay.const([[3.150081,7.441578,-6.323723,-5.720500,2.065968],[-1.819948,2.936169,0.684330,-4.353016,6.413028],[0.647765,4.326327,6.546842,-3.500606,0.138419],[3.707292,6.875144,-5.081497,2.456201,-1.344029],[-5.532724,-2.023326,7.218214,-1.941306,-9.502354],[3.316516,-5.625225,-0.688112,-6.813642,5.274578],[-4.981456,-6.796501,3.261469,-3.356547,4.365878],[-9.507614,6.169132,9.483831,-7.109591,-2.616485]], dtype = "float64")#candidate|777|(8, 5)|const|float64
bop_778 = relay.bitwise_xor(uop_742.astype('int32'), relay.reshape(const_777.astype('int32'), relay.shape_of(uop_742))) # shape=(8, 5)
func_453_call = mod.get_global_var('func_453')
func_460_call = mutated_mod.get_global_var('func_460')
const_782 = relay.const([[-5.309136],[-1.662329],[-6.923165],[-3.419136],[4.803439],[-7.741865],[9.620460],[5.878499],[8.947177],[-6.057725],[-5.526519],[-9.422938],[2.956645],[7.572824],[2.548931],[9.482370],[-2.335078],[7.195258],[-1.895642],[3.520636],[-2.249552],[-0.399926],[-4.794404],[-0.740321],[-6.562534],[-3.426460],[0.720626],[8.312861],[-1.498005],[-1.712620],[8.675592],[8.835649],[0.761915],[-4.289918],[-6.750981],[-1.526295],[9.571837],[-7.366108],[-4.723916],[9.186069],[-7.908989],[0.107947],[-5.776930],[-2.204224],[3.388736],[-2.465966],[-3.420386],[5.552633],[3.110270],[-1.066783],[6.249530],[-1.947809],[0.534986],[-1.838637],[2.064923],[-2.675557],[0.231653],[-9.717638],[-5.809415],[-8.089016],[1.856854],[-4.684922],[3.562037],[-2.365259],[6.477037],[-0.614374],[9.482134],[-3.374954],[-7.790610],[-7.778329],[-1.225157],[3.865470]], dtype = "float64")#candidate|782|(72, 1)|const|float64
var_783 = relay.var("var_783", dtype = "float64", shape = (11,))#candidate|783|(11,)|var|float64
call_781 = relay.TupleGetItem(func_453_call(relay.reshape(const_726.astype('float64'), [8, 1]), relay.reshape(const_782.astype('float64'), [8, 9]), relay.reshape(const_782.astype('uint64'), [8, 9]), relay.reshape(const_782.astype('uint64'), [8, 9]), relay.reshape(var_783.astype('float64'), [11,]), relay.reshape(var_774.astype('float64'), [54, 1]), ), 5)
call_784 = relay.TupleGetItem(func_460_call(relay.reshape(const_726.astype('float64'), [8, 1]), relay.reshape(const_782.astype('float64'), [8, 9]), relay.reshape(const_782.astype('uint64'), [8, 9]), relay.reshape(const_782.astype('uint64'), [8, 9]), relay.reshape(var_783.astype('float64'), [11,]), relay.reshape(var_774.astype('float64'), [54, 1]), ), 5)
bop_786 = relay.mod(uop_704.astype('float32'), relay.reshape(uop_742.astype('float32'), relay.shape_of(uop_704))) # shape=(8, 5)
uop_789 = relay.asin(bop_761.astype('float32')) # shape=(8, 5)
output = relay.Tuple([call_714,const_715,call_725,const_726,bop_731,bop_752,bop_769,call_772,var_773,var_774,bop_778,call_781,const_782,var_783,bop_786,uop_789,])
output2 = relay.Tuple([call_716,const_715,call_727,const_726,bop_731,bop_752,bop_769,call_775,var_773,var_774,bop_778,call_784,const_782,var_783,bop_786,uop_789,])
func_791 = relay.Function([var_773,var_774,var_783,], output)
mod['func_791'] = func_791
mod = relay.transform.InferType()(mod)
mutated_mod['func_791'] = func_791
mutated_mod = relay.transform.InferType()(mutated_mod)
func_791_call = mutated_mod.get_global_var('func_791')
var_793 = relay.var("var_793", dtype = "float32", shape = (1560,))#candidate|793|(1560,)|var|float32
var_794 = relay.var("var_794", dtype = "float64", shape = (54,))#candidate|794|(54,)|var|float64
var_795 = relay.var("var_795", dtype = "float64", shape = (11,))#candidate|795|(11,)|var|float64
call_792 = func_791_call(var_793,var_794,var_795,)
output = call_792
func_796 = relay.Function([var_793,var_794,var_795,], output)
mutated_mod['func_796'] = func_796
mutated_mod = relay.transform.InferType()(mutated_mod)
var_825 = relay.var("var_825", dtype = "int64", shape = (2,))#candidate|825|(2,)|var|int64
const_826 = relay.const([1,-6], dtype = "int64")#candidate|826|(2,)|const|int64
bop_827 = relay.not_equal(var_825.astype('bool'), relay.reshape(const_826.astype('bool'), relay.shape_of(var_825))) # shape=(2,)
uop_832 = relay.acos(bop_827.astype('float32')) # shape=(2,)
output = relay.Tuple([uop_832,])
output2 = relay.Tuple([uop_832,])
func_834 = relay.Function([var_825,], output)
mod['func_834'] = func_834
mod = relay.transform.InferType()(mod)
var_835 = relay.var("var_835", dtype = "int64", shape = (2,))#candidate|835|(2,)|var|int64
output = func_834(var_835)
func_836 = relay.Function([var_835], output)
mutated_mod['func_836'] = func_836
mutated_mod = relay.transform.InferType()(mutated_mod)
var_849 = relay.var("var_849", dtype = "int64", shape = (14, 12))#candidate|849|(14, 12)|var|int64
var_850 = relay.var("var_850", dtype = "int64", shape = (14, 12))#candidate|850|(14, 12)|var|int64
bop_851 = relay.bitwise_or(var_849.astype('int64'), relay.reshape(var_850.astype('int64'), relay.shape_of(var_849))) # shape=(14, 12)
func_365_call = mod.get_global_var('func_365')
func_372_call = mutated_mod.get_global_var('func_372')
const_862 = relay.const([[6.376469,1.510802,-8.729958],[-3.269831,-5.256636,0.504927],[0.285917,-0.222435,3.377903],[3.419076,-6.127563,-3.523412],[4.778350,-0.172085,-2.284810],[9.225170,-8.806056,-9.394765],[9.512665,5.734022,2.513225],[3.894059,1.011325,-0.788772],[-6.336756,7.903254,-0.877199],[7.122653,3.765773,7.193492],[-9.967500,-8.283525,3.360786],[9.730121,8.973127,9.615992],[-1.253514,-8.975949,-8.358588],[-7.933139,-0.049392,0.191989],[8.013419,9.900031,-0.123673],[-5.171141,2.712693,8.313146],[-7.324492,2.820719,2.747884],[-4.389235,8.157840,0.900956],[7.866744,-2.445458,-7.910869],[-7.109904,2.567893,-9.495858],[-8.209722,-2.149537,5.894176],[0.957648,-2.549520,-1.422842],[3.131611,1.014074,1.724173],[-4.952277,2.056941,-6.559234],[8.618691,7.457756,-6.383986],[-9.480137,5.156288,0.041995],[2.291928,-9.578318,5.947928],[3.097119,9.063338,-4.520319],[-6.503383,-7.003179,1.704574],[5.846448,7.572761,5.558934],[-1.805686,2.830287,-0.811936],[5.720887,6.031850,-6.895443],[-0.035051,9.535348,-6.006730],[-7.940875,-1.303573,-4.860928],[2.828319,-2.031301,2.446374],[6.235034,-4.397246,5.510761],[9.803874,-8.740551,-8.001606],[6.757210,-0.291681,-1.001853],[-8.787505,0.823093,0.712905],[2.212266,4.007760,-3.727092],[7.855701,4.172768,-3.207749],[5.774071,1.595633,-1.804074],[-6.891464,-8.715934,-3.303666],[0.987434,2.295426,0.080604],[1.697895,0.015809,3.450612],[7.123578,3.149088,-0.665799],[5.163649,1.447665,7.722226],[-5.376257,-3.113446,-7.788238],[6.314852,5.566834,9.216578],[-7.718820,0.990227,3.494315],[4.010412,-6.260124,9.459739],[-2.944307,-6.176275,4.433466],[6.963050,3.250036,-7.443791],[-4.789963,7.346537,-7.822443],[-8.522243,7.842245,2.453823],[-8.043522,4.203332,1.097361],[8.896796,3.245666,-7.045255],[6.191275,-9.309896,1.058559],[7.305225,7.792657,1.483734],[6.597892,-9.807758,-8.771679],[8.353519,-6.207289,4.332051],[-0.360949,6.817981,-2.037327],[-7.593459,5.996156,-2.048785],[-2.253988,-0.652368,-6.816664],[3.500819,3.770133,8.913488],[3.254113,2.211165,8.610068],[-4.107877,7.014786,-0.067102],[3.259200,-1.768605,9.929963],[7.497336,-6.978902,6.522861],[6.625216,-5.107968,-6.914056],[-1.982908,-5.291368,1.302453],[-4.587626,5.920210,0.108099],[9.547384,2.754304,3.706978],[-5.742563,-7.100051,-5.028099],[-6.039410,-2.548684,4.995394],[-8.349901,8.387207,6.118013],[-4.130857,-7.155457,8.496608],[0.954224,-5.960911,-2.280759],[-0.743154,-3.438332,2.533828],[-2.756307,-3.767116,-4.130649],[-2.201966,-5.429421,-1.141749],[-5.342180,5.135662,-7.270015],[2.208278,-3.097276,-1.315285],[6.802296,6.158789,4.649691],[2.288296,-4.526439,7.873214],[1.460256,8.222242,8.996726],[4.909670,7.709930,-3.108653],[7.707287,0.418311,6.713439],[2.524429,-5.885359,-9.453976],[0.184502,-1.649285,2.347248],[8.985706,0.020064,-8.575532],[-5.309001,-0.753988,2.119499],[7.597547,-7.747758,-7.433043],[6.302667,1.480665,-8.963722],[4.837265,2.387515,-0.802524],[3.618403,0.116181,-6.558264],[3.206047,1.267670,-9.988075],[-2.276582,7.349970,1.794177],[-7.790022,5.679569,-3.645791],[0.551725,-8.202826,4.971925],[-1.490451,-4.230198,5.238786],[1.042500,7.815403,0.134835],[6.209683,8.483529,-1.979357],[-9.726040,8.034530,-4.896431],[-1.311766,-4.050509,-6.761954],[5.024182,-3.986807,-4.972586],[-4.139367,5.867854,-0.755276],[-0.085555,-4.399000,2.872442],[-9.695703,-9.129835,5.643027],[5.469087,-8.000517,-2.005523],[-9.840264,3.795040,3.923281],[-1.683631,-8.766759,7.437435],[-2.142454,-7.540515,-9.362627],[-8.051740,-4.286234,-7.520582],[8.130123,9.983011,0.711758],[1.934317,0.245432,0.937907],[-9.921571,-5.615918,9.263767],[-5.361539,2.050243,-4.949696],[-9.330891,-1.730684,5.578826],[-1.698099,2.578849,7.695245],[-6.899498,-9.331780,8.284188],[-3.238249,6.539222,-6.381607],[6.129593,8.429472,-2.220148],[-9.196451,-3.297605,3.107522],[2.098276,-6.762571,6.936552],[-4.116701,-4.367784,3.762516],[-9.014121,-1.447229,-0.426155],[-0.838433,9.466657,9.318590],[6.105013,-8.925348,-0.392627],[-4.687194,5.270798,-6.157686],[-8.406462,-7.071904,5.370872],[-7.911904,-9.355289,-2.304176],[-9.141605,-0.414126,-2.166390],[9.759457,0.698871,9.403052],[2.906712,1.771648,-2.068829],[5.023860,-1.166503,-1.529010],[3.907756,1.572007,5.431932],[-4.401562,-3.597072,1.050942],[-8.642607,9.018494,-8.829903],[-7.977649,-8.674765,-9.719643],[7.433435,0.718683,-5.637194],[-2.099096,-4.691644,0.714379],[8.177761,2.649568,-1.424572],[-7.926390,8.172750,-2.394909],[-2.817707,6.893553,-0.972702],[0.507708,5.092904,-4.104426],[-9.601589,2.784353,-0.069030],[-5.420180,9.072786,-7.233814],[-8.327093,-3.280147,-5.753816],[5.741222,2.115314,8.337665]], dtype = "float32")#candidate|862|(150, 3)|const|float32
const_863 = relay.const([6.539503,-5.664639,5.612204,-1.053808,-0.918742,4.891017,7.201308,4.851460,-7.260500], dtype = "float64")#candidate|863|(9,)|const|float64
const_864 = relay.const([3.453532,-8.249549,2.829891,1.253481,-4.093538,-9.880443,6.370066,0.260278,-4.636908,-1.843245,9.033985], dtype = "float64")#candidate|864|(11,)|const|float64
call_861 = relay.TupleGetItem(func_365_call(relay.reshape(const_862.astype('float32'), [10, 15, 3]), relay.reshape(const_863.astype('float64'), [9,]), relay.reshape(const_864.astype('float64'), [11,]), relay.reshape(const_862.astype('float64'), [10, 15, 3]), relay.reshape(const_862.astype('float32'), [10, 15, 3]), ), 3)
call_865 = relay.TupleGetItem(func_372_call(relay.reshape(const_862.astype('float32'), [10, 15, 3]), relay.reshape(const_863.astype('float64'), [9,]), relay.reshape(const_864.astype('float64'), [11,]), relay.reshape(const_862.astype('float64'), [10, 15, 3]), relay.reshape(const_862.astype('float32'), [10, 15, 3]), ), 3)
output = relay.Tuple([bop_851,call_861,const_862,const_863,const_864,])
output2 = relay.Tuple([bop_851,call_865,const_862,const_863,const_864,])
func_866 = relay.Function([var_849,var_850,], output)
mod['func_866'] = func_866
mod = relay.transform.InferType()(mod)
var_867 = relay.var("var_867", dtype = "int64", shape = (14, 12))#candidate|867|(14, 12)|var|int64
var_868 = relay.var("var_868", dtype = "int64", shape = (14, 12))#candidate|868|(14, 12)|var|int64
output = func_866(var_867,var_868,)
func_869 = relay.Function([var_867,var_868,], output)
mutated_mod['func_869'] = func_869
mutated_mod = relay.transform.InferType()(mutated_mod)
const_915 = relay.const([[-2.358549,2.883232,-9.454624,7.101593,-1.841936,-7.667865,-0.442529,8.482205,-7.139330,-6.093199,-6.512401,3.776250,7.440699,8.257808,-1.538005],[5.867009,-9.169849,-6.217874,-6.717172,-7.316121,-2.649503,5.703739,-7.730197,9.669671,-0.806935,-8.325601,-1.703784,2.886304,-5.222197,-9.684795],[3.657687,8.357317,-9.511558,-6.065016,5.826930,-2.745309,0.766745,-3.974093,-1.678621,-6.302810,8.115448,-9.252279,-4.434971,-2.064956,-4.440037],[9.946609,-4.625078,6.070986,-3.431369,7.398580,-2.499119,-5.236592,-4.511172,0.309029,-9.752231,9.488917,7.708063,-9.483419,8.607298,-5.338069],[1.837768,0.491955,3.028065,9.424647,-2.161080,8.124049,-7.339994,-5.378643,9.382073,9.408281,-9.549423,0.193521,-3.282036,3.212000,-2.641992],[4.152007,-3.669939,6.886630,8.524315,6.159811,-8.630504,-7.688015,-4.427263,1.440456,9.339869,-8.006082,9.113886,4.328004,4.753165,-4.404758],[-9.248371,9.080171,-7.739307,-0.124954,4.232942,-3.349480,5.728433,-0.769162,6.991788,0.776420,6.093690,-3.123680,0.233961,-1.612003,6.356364]], dtype = "float32")#candidate|915|(7, 15)|const|float32
uop_916 = relay.exp(const_915.astype('float32')) # shape=(7, 15)
bop_919 = relay.less_equal(uop_916.astype('bool'), relay.reshape(const_915.astype('bool'), relay.shape_of(uop_916))) # shape=(7, 15)
var_922 = relay.var("var_922", dtype = "float32", shape = (7, 15))#candidate|922|(7, 15)|var|float32
bop_923 = relay.maximum(uop_916.astype('int32'), relay.reshape(var_922.astype('int32'), relay.shape_of(uop_916))) # shape=(7, 15)
uop_926 = relay.sqrt(bop_923.astype('float32')) # shape=(7, 15)
output = relay.Tuple([bop_919,uop_926,])
output2 = relay.Tuple([bop_919,uop_926,])
func_934 = relay.Function([var_922,], output)
mod['func_934'] = func_934
mod = relay.transform.InferType()(mod)
mutated_mod['func_934'] = func_934
mutated_mod = relay.transform.InferType()(mutated_mod)
var_935 = relay.var("var_935", dtype = "float32", shape = (7, 15))#candidate|935|(7, 15)|var|float32
func_934_call = mutated_mod.get_global_var('func_934')
call_936 = func_934_call(var_935)
output = call_936
func_937 = relay.Function([var_935], output)
mutated_mod['func_937'] = func_937
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1004 = relay.const(-1, dtype = "int8")#candidate|1004|()|const|int8
const_1005 = relay.const([[[-8,-8,3,-10,-3,-9,9,3,-8,-6,6,-4,-5,10,-8],[-4,8,-3,-5,-5,-5,3,6,-3,8,-7,7,7,-8,9],[-4,2,-5,2,-6,-10,-3,5,10,-4,-9,3,2,9,-7],[-6,1,2,3,-8,2,9,1,-7,-4,-9,1,1,10,-5],[-8,9,-1,5,-6,4,-1,5,9,-4,2,9,5,-9,2],[3,5,1,-2,9,-1,6,-5,5,3,-8,5,2,-7,-5],[5,1,10,5,8,10,6,-1,-8,-5,-10,-8,10,2,-1]],[[8,-7,-5,9,-10,1,-4,7,7,6,6,7,-8,4,-4],[-9,10,-9,6,4,-5,-8,-1,8,2,-2,-9,-4,5,9],[4,2,-5,-10,9,8,8,-4,-3,-9,-4,5,9,10,-9],[3,-8,-7,4,-5,1,8,1,8,-4,-1,9,2,7,-2],[-3,-10,-8,6,-4,6,6,5,-5,1,2,-8,10,-9,-5],[3,-3,-9,-10,2,7,1,3,-9,1,-8,4,1,7,2],[8,10,-8,2,-5,4,-4,5,1,6,8,4,-1,7,-5]],[[-9,-8,-6,-9,6,5,-8,-5,8,1,-7,-7,10,-5,5],[-9,7,-5,-4,3,10,10,-9,-5,2,-1,4,1,6,-2],[-8,-9,-10,7,-9,-4,10,-9,2,8,-9,-2,-6,6,10],[7,2,-2,10,-4,4,10,-5,-5,-4,-10,9,-5,-6,-9],[2,6,-1,4,-2,10,10,9,8,4,-6,-4,-8,-2,-1],[-3,-8,-7,-7,-8,-1,2,8,-7,-5,6,-5,8,9,-8],[-2,5,7,-9,-3,3,5,5,9,10,5,7,6,5,-5]],[[10,-3,-7,7,7,3,5,-7,3,-4,-2,-9,-1,4,4],[9,7,9,4,-10,-5,1,4,2,-6,10,-7,8,-6,6],[-2,-6,-6,-4,10,-1,10,-6,-4,10,5,9,-1,-10,9],[-8,10,1,8,6,1,4,-3,-6,9,6,-7,3,-2,-4],[-10,2,-6,-6,8,2,-3,-3,-5,3,6,-7,4,3,-5],[-9,-9,5,-3,10,4,5,8,-2,-10,6,-4,-10,-5,8],[-10,-6,-9,-4,3,8,-8,5,-2,9,-3,7,-10,-8,2]],[[6,5,10,-3,6,2,3,6,4,-6,9,9,-7,-5,-3],[-10,-8,1,9,-6,-1,-7,-6,2,-1,4,6,-6,-10,7],[-7,-4,-4,-6,-10,7,1,-8,9,9,-8,7,-4,-8,-3],[2,6,6,-1,-4,-5,6,7,2,-4,5,4,8,7,4],[5,-2,2,-10,10,-5,6,-8,-5,-8,-1,-3,-5,3,-8],[-1,-3,-3,-1,-7,8,-4,5,-5,4,9,6,-2,-2,-2],[4,-3,-6,-1,9,6,1,-2,-5,7,10,-9,-8,7,8]],[[10,5,-8,-10,-8,8,-6,5,7,5,-3,2,3,-3,-1],[2,-10,7,-7,-10,7,10,-8,3,7,3,-5,2,-6,10],[3,-1,10,4,6,-2,-1,-6,7,8,9,6,6,-4,10],[-2,-8,9,-10,7,4,-8,-2,-3,6,-7,-3,-1,-10,3],[-10,4,-7,-8,-3,-4,-2,1,9,-7,7,1,6,1,6],[-3,-7,4,9,5,-7,-10,-1,5,8,6,5,-5,9,4],[-10,-4,7,2,-2,-9,-6,-7,1,-1,-3,4,4,8,5]],[[-3,-10,-1,6,2,-2,6,1,5,7,-1,-2,-10,-4,4],[-10,-4,5,-9,1,-9,-4,1,10,7,3,-8,3,-3,-6],[-6,-5,1,8,-9,3,1,4,-3,7,2,10,-5,7,9],[7,2,-8,10,-2,4,-8,3,7,8,7,-6,-1,-9,-8],[-4,6,7,-8,7,-5,-5,7,4,-3,-2,2,7,-8,4],[7,-3,5,-6,-4,-2,5,1,-5,-10,5,9,9,-3,-6],[-6,-6,-7,-8,3,-5,2,-4,6,6,-8,-7,10,-4,-6]],[[1,-5,-1,-9,5,-3,-9,-4,8,2,5,6,-8,-9,-1],[-5,5,1,-4,6,-2,-4,4,8,8,-5,-2,5,7,-2],[-7,1,9,-9,-2,-4,4,7,-6,1,5,-4,-8,6,-3],[4,-9,3,6,-3,-6,3,5,-1,7,4,9,10,9,3],[-8,1,3,-5,7,-7,7,5,2,-4,8,-2,5,2,-9],[5,3,3,1,3,10,-1,2,10,3,-4,1,6,7,10],[-5,1,3,2,-6,2,-6,2,10,-3,-5,4,2,-1,-9]],[[5,8,-4,2,6,4,5,-10,10,-8,-3,-2,6,-6,-5],[10,3,-7,-8,4,8,-2,7,-9,-4,-2,7,-5,-9,2],[9,3,-9,-8,1,2,9,-4,8,7,-8,10,-2,2,7],[5,-5,8,9,2,-10,-1,8,9,-7,-9,-5,4,-5,9],[8,10,4,-7,7,-3,4,10,-9,10,-5,-5,-10,-8,-3],[1,-2,-5,2,-9,3,-8,8,-9,-6,7,9,-10,8,6],[-8,5,7,-6,5,-7,-9,-3,2,-8,-2,10,4,2,1]],[[-7,4,-6,-3,-1,-10,-5,5,8,2,8,10,7,1,9],[-7,8,6,4,8,8,-6,-1,-10,2,6,10,-1,1,8],[1,-4,-9,-3,-2,10,3,2,9,-2,6,3,3,2,-4],[-3,6,-4,-8,7,9,9,-5,5,-2,7,6,-5,3,-2],[10,4,3,-10,-4,-10,-6,7,1,-5,1,-3,1,-8,5],[-1,-5,10,2,8,1,-3,10,-8,3,4,-7,-3,-4,3],[10,4,-9,-3,8,-9,1,6,1,10,9,-10,-10,-5,3]],[[-4,1,8,6,-3,3,1,-5,7,1,1,-3,6,-3,8],[8,1,-3,1,10,-2,-7,9,10,-9,-5,-2,-1,-2,9],[4,-3,9,2,5,-6,-9,10,7,5,-2,8,7,-2,6],[8,-1,5,-8,9,-10,-10,10,-6,1,-2,-2,-7,-10,7],[-10,-7,7,-2,8,-6,-6,9,8,2,-7,-4,-7,-7,10],[6,-8,-3,-5,-7,8,-3,-2,2,-10,-1,1,5,4,8],[5,-6,-6,-9,7,6,-1,-10,3,-5,6,-9,9,8,7]],[[9,-9,6,-7,-8,1,8,7,7,9,5,7,-4,-10,-2],[-8,1,-8,-3,-4,-7,-9,8,-4,7,8,9,-6,4,5],[4,-6,1,4,7,6,-4,3,-10,9,-10,-9,-4,2,-2],[-3,10,-1,-3,6,-4,8,-7,2,-5,7,1,4,3,-5],[-3,-9,-10,-6,7,3,-4,9,-1,3,3,-3,5,10,-5],[3,3,-3,-2,6,-8,-3,1,6,-5,1,-6,-2,4,-1],[7,7,5,5,-8,1,9,10,5,5,2,8,10,3,2]],[[-3,9,10,-9,-5,5,4,-7,-7,2,-2,6,4,-2,10],[-4,-4,10,-9,9,9,-10,-2,-9,3,9,-6,7,-10,1],[-2,10,8,-10,-2,-2,4,4,-1,5,4,1,-10,2,-5],[10,7,-3,-4,3,1,9,-7,3,7,4,-1,-3,-3,-1],[-9,-8,-2,1,-4,-6,-8,-2,7,7,-3,-7,-5,-5,9],[-7,-8,-5,5,-8,8,4,8,-3,1,-9,2,-9,10,5],[10,8,-8,8,-8,-2,2,-4,-2,-3,8,7,2,7,10]]], dtype = "int8")#candidate|1005|(13, 7, 15)|const|int8
bop_1006 = relay.less(const_1004.astype('bool'), const_1005.astype('bool')) # shape=(13, 7, 15)
output = relay.Tuple([bop_1006,])
output2 = relay.Tuple([bop_1006,])
func_1009 = relay.Function([], output)
mod['func_1009'] = func_1009
mod = relay.transform.InferType()(mod)
output = func_1009()
func_1010 = relay.Function([], output)
mutated_mod['func_1010'] = func_1010
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1011 = relay.var("var_1011", dtype = "float64", shape = (1, 9))#candidate|1011|(1, 9)|var|float64
uop_1012 = relay.rsqrt(var_1011.astype('float64')) # shape=(1, 9)
bop_1014 = relay.floor_divide(uop_1012.astype('float32'), relay.reshape(var_1011.astype('float32'), relay.shape_of(uop_1012))) # shape=(1, 9)
var_1018 = relay.var("var_1018", dtype = "float64", shape = (1, 9))#candidate|1018|(1, 9)|var|float64
bop_1019 = relay.bitwise_xor(uop_1012.astype('int16'), relay.reshape(var_1018.astype('int16'), relay.shape_of(uop_1012))) # shape=(1, 9)
func_25_call = mod.get_global_var('func_25')
func_27_call = mutated_mod.get_global_var('func_27')
const_1026 = relay.const([-10,-2,8,-8,3,-9,-8,8,-10,3,5,-7,-4,8,-1,-5,-2,7,-3,9,4,10,10,-4,-5,2,-4,-4,-6,-4,-9,-9,-4,-3,3,4,-9,-9,-4,-9,-1,6,-10,6,5,4,-8,5,9,-10,-9,10,-9,-8,4,-10,8,2,8,-5,-7,7,2,-9,1,3,-2,-1,-4,3,-6,-2,-1,-2,2,2,-6,5,4,-1,3,-6,-9,-7,-5,8,3,6,4,-3,-3,6,-5,-9,6,1,-4,-4,5,5,-2,-1,-4,-9,3,7,-4,-7,-7,-5,4,10,-6,-2,-8,8,1,2,-6,-6,-2,5,7,4,-6,-4,-8,2,-3,-4,-3,-8,2,2,3,-7,2,-9,-1,2,6,2,2,-8,8,5,-4,8,3,4,-9,-8,-2,-9,-4,2,6,-3,-8,5,-3,-9,-3,3,-8,-1,9,-5,10,3,2,-5,-9,-9,1,5,4,1,5,-5,-4,-8,-10,1,9,-6,-9,-1,9,-7,6,2,-10,-9,-8,5,-1,-4,-10,-10,1,9,-7,2,2,4,-3,-10,-3,5,-3,5,7,-4,-6,-5,-2,-1,-5,-3,-10,7,-7,-6,3,-2,-4,-10,-6,-10,-1,-1,9,2,-3,-3,3,-8,-6,-1,-6,5,9,4,2,-2,-9,7,-5,4,-3,-4,-6,7,7,-10,10,-4,3,-8,10,-9,3,6,5,7,-6,2,-3,3,6,2,9,9,-2,8,-5,2,2,-5,8,5,-2,6,-8,5,4,-4,-1,-6,7,6,10,-9,6,1,7,9,-5,-5,6,8,5,-3,-4,1,3,-5,-5,-5,-10,6,2,-7,10,9,3,-4,-1,5,5,7,3,-1,8,-9,4,-6,-1,-5,-6,-5,-6,-7,7,2,-10,-10,-3,-3,-8,-9,-8,-1,9,-9,2,6,-2,-5,-9,-3,-8,-3,-5,-1,-9,-5,7,-5,4,5,-8,2,-4,-1,3,-1,6,-1,-10,-3,-5,5,6,2,4,6,6,1,4,-4,-7,-8,-9,-3,-3,10,-5,-2], dtype = "int8")#candidate|1026|(390,)|const|int8
call_1025 = relay.TupleGetItem(func_25_call(relay.reshape(const_1026.astype('int8'), [15, 2, 13])), 0)
call_1027 = relay.TupleGetItem(func_27_call(relay.reshape(const_1026.astype('int8'), [15, 2, 13])), 0)
output = relay.Tuple([bop_1014,bop_1019,call_1025,const_1026,])
output2 = relay.Tuple([bop_1014,bop_1019,call_1027,const_1026,])
func_1031 = relay.Function([var_1011,var_1018,], output)
mod['func_1031'] = func_1031
mod = relay.transform.InferType()(mod)
var_1032 = relay.var("var_1032", dtype = "float64", shape = (1, 9))#candidate|1032|(1, 9)|var|float64
var_1033 = relay.var("var_1033", dtype = "float64", shape = (1, 9))#candidate|1033|(1, 9)|var|float64
output = func_1031(var_1032,var_1033,)
func_1034 = relay.Function([var_1032,var_1033,], output)
mutated_mod['func_1034'] = func_1034
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1052 = relay.const(-3.660261, dtype = "float64")#candidate|1052|()|const|float64
var_1053 = relay.var("var_1053", dtype = "float64", shape = (3, 8))#candidate|1053|(3, 8)|var|float64
bop_1054 = relay.divide(const_1052.astype('float64'), var_1053.astype('float64')) # shape=(3, 8)
func_180_call = mod.get_global_var('func_180')
func_182_call = mutated_mod.get_global_var('func_182')
const_1059 = relay.const([-6.495681,1.853803,5.577989,-8.477904,-3.950848,7.079879,8.138243,-2.395104], dtype = "float32")#candidate|1059|(8,)|const|float32
call_1058 = func_180_call(relay.reshape(const_1059.astype('float32'), [8, 1, 1]))
call_1060 = func_180_call(relay.reshape(const_1059.astype('float32'), [8, 1, 1]))
var_1061 = relay.var("var_1061", dtype = "float64", shape = (3, 8))#candidate|1061|(3, 8)|var|float64
bop_1062 = relay.floor_mod(bop_1054.astype('float64'), relay.reshape(var_1061.astype('float64'), relay.shape_of(bop_1054))) # shape=(3, 8)
bop_1070 = relay.less(const_1052.astype('bool'), bop_1062.astype('bool')) # shape=(3, 8)
output = relay.Tuple([call_1058,const_1059,bop_1070,])
output2 = relay.Tuple([call_1060,const_1059,bop_1070,])
func_1081 = relay.Function([var_1053,var_1061,], output)
mod['func_1081'] = func_1081
mod = relay.transform.InferType()(mod)
var_1082 = relay.var("var_1082", dtype = "float64", shape = (3, 8))#candidate|1082|(3, 8)|var|float64
var_1083 = relay.var("var_1083", dtype = "float64", shape = (3, 8))#candidate|1083|(3, 8)|var|float64
output = func_1081(var_1082,var_1083,)
func_1084 = relay.Function([var_1082,var_1083,], output)
mutated_mod['func_1084'] = func_1084
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1090 = relay.var("var_1090", dtype = "float64", shape = (7, 11, 4))#candidate|1090|(7, 11, 4)|var|float64
uop_1091 = relay.sinh(var_1090.astype('float64')) # shape=(7, 11, 4)
bop_1093 = relay.maximum(var_1090.astype('float32'), relay.reshape(uop_1091.astype('float32'), relay.shape_of(var_1090))) # shape=(7, 11, 4)
bop_1097 = relay.less_equal(uop_1091.astype('bool'), relay.reshape(bop_1093.astype('bool'), relay.shape_of(uop_1091))) # shape=(7, 11, 4)
bop_1108 = relay.mod(var_1090.astype('float64'), relay.reshape(uop_1091.astype('float64'), relay.shape_of(var_1090))) # shape=(7, 11, 4)
bop_1111 = relay.greater_equal(var_1090.astype('bool'), relay.reshape(uop_1091.astype('bool'), relay.shape_of(var_1090))) # shape=(7, 11, 4)
output = relay.Tuple([bop_1097,bop_1108,bop_1111,])
output2 = relay.Tuple([bop_1097,bop_1108,bop_1111,])
func_1114 = relay.Function([var_1090,], output)
mod['func_1114'] = func_1114
mod = relay.transform.InferType()(mod)
var_1115 = relay.var("var_1115", dtype = "float64", shape = (7, 11, 4))#candidate|1115|(7, 11, 4)|var|float64
output = func_1114(var_1115)
func_1116 = relay.Function([var_1115], output)
mutated_mod['func_1116'] = func_1116
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1009_call = mod.get_global_var('func_1009')
func_1010_call = mutated_mod.get_global_var('func_1010')
call_1123 = relay.TupleGetItem(func_1009_call(), 0)
call_1124 = relay.TupleGetItem(func_1010_call(), 0)
output = relay.Tuple([call_1123,])
output2 = relay.Tuple([call_1124,])
func_1127 = relay.Function([], output)
mod['func_1127'] = func_1127
mod = relay.transform.InferType()(mod)
output = func_1127()
func_1128 = relay.Function([], output)
mutated_mod['func_1128'] = func_1128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1127_call = mod.get_global_var('func_1127')
func_1128_call = mutated_mod.get_global_var('func_1128')
call_1141 = relay.TupleGetItem(func_1127_call(), 0)
call_1142 = relay.TupleGetItem(func_1128_call(), 0)
output = relay.Tuple([call_1141,])
output2 = relay.Tuple([call_1142,])
func_1143 = relay.Function([], output)
mod['func_1143'] = func_1143
mod = relay.transform.InferType()(mod)
mutated_mod['func_1143'] = func_1143
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1143_call = mutated_mod.get_global_var('func_1143')
call_1144 = func_1143_call()
output = call_1144
func_1145 = relay.Function([], output)
mutated_mod['func_1145'] = func_1145
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1009_call = mod.get_global_var('func_1009')
func_1010_call = mutated_mod.get_global_var('func_1010')
call_1153 = relay.TupleGetItem(func_1009_call(), 0)
call_1154 = relay.TupleGetItem(func_1010_call(), 0)
output = relay.Tuple([call_1153,])
output2 = relay.Tuple([call_1154,])
func_1155 = relay.Function([], output)
mod['func_1155'] = func_1155
mod = relay.transform.InferType()(mod)
output = func_1155()
func_1156 = relay.Function([], output)
mutated_mod['func_1156'] = func_1156
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1143_call = mod.get_global_var('func_1143')
func_1145_call = mutated_mod.get_global_var('func_1145')
call_1160 = relay.TupleGetItem(func_1143_call(), 0)
call_1161 = relay.TupleGetItem(func_1145_call(), 0)
var_1170 = relay.var("var_1170", dtype = "bool", shape = (13, 7, 15))#candidate|1170|(13, 7, 15)|var|bool
bop_1171 = relay.left_shift(call_1160.astype('uint32'), relay.reshape(var_1170.astype('uint32'), relay.shape_of(call_1160))) # shape=(13, 7, 15)
bop_1174 = relay.left_shift(call_1161.astype('uint32'), relay.reshape(var_1170.astype('uint32'), relay.shape_of(call_1161))) # shape=(13, 7, 15)
func_478_call = mod.get_global_var('func_478')
func_481_call = mutated_mod.get_global_var('func_481')
var_1182 = relay.var("var_1182", dtype = "float32", shape = (3120,))#candidate|1182|(3120,)|var|float32
call_1181 = relay.TupleGetItem(func_478_call(relay.reshape(var_1182.astype('float32'), [15, 13, 16]), relay.reshape(var_1182.astype('float32'), [15, 13, 16]), ), 0)
call_1183 = relay.TupleGetItem(func_481_call(relay.reshape(var_1182.astype('float32'), [15, 13, 16]), relay.reshape(var_1182.astype('float32'), [15, 13, 16]), ), 0)
func_866_call = mod.get_global_var('func_866')
func_869_call = mutated_mod.get_global_var('func_869')
const_1192 = relay.const([2,10,-2,7,4,9,-8,10,5,6,-6,7,8,-8,-6,8,3,-7,8,6,-9,-4,1,-10,9,4,-7,-7,2,5,-4,-5,9,-1,-5,-3,-1,-3,2,1,-1,9,5,-2,-1,7,10,-4,4,-7,4,3,-8,-10,-2,-2,-5,3,-8,10,-2,9,-1,-10,-8,-3,-9,-8,7,-5,-8,-3,9,6,9,-1,3,10,2,-10,-6,-5,-1,2,-2,6,6,-6,3,6,-5,2,6,-3,-3,1,6,-4,10,7,-3,-3,-2,5,8,-7,6,-3,5,-3,9,-6,9,-3,6,-10,-3,-9,9,-10,5,1,1,6,-2,-2,4,-7,10,1,-2,-8,-3,9,10,2,-1,9,-7,-7,3,-1,9,-9,7,-6,2,-3,-2,-10,4,-8,-4,-6,-1,1,10,2,-9,-10,-2,5,-2,-10,3,-7,-1,-1], dtype = "int64")#candidate|1192|(168,)|const|int64
call_1191 = relay.TupleGetItem(func_866_call(relay.reshape(const_1192.astype('int64'), [14, 12]), relay.reshape(const_1192.astype('int64'), [14, 12]), ), 2)
call_1193 = relay.TupleGetItem(func_869_call(relay.reshape(const_1192.astype('int64'), [14, 12]), relay.reshape(const_1192.astype('int64'), [14, 12]), ), 2)
bop_1198 = relay.maximum(var_1182.astype('float32'), relay.reshape(call_1181.astype('float32'), relay.shape_of(var_1182))) # shape=(3120,)
bop_1201 = relay.maximum(var_1182.astype('float32'), relay.reshape(call_1183.astype('float32'), relay.shape_of(var_1182))) # shape=(3120,)
func_866_call = mod.get_global_var('func_866')
func_869_call = mutated_mod.get_global_var('func_869')
call_1203 = relay.TupleGetItem(func_866_call(relay.reshape(const_1192.astype('int64'), [14, 12]), relay.reshape(const_1192.astype('int64'), [14, 12]), ), 4)
call_1204 = relay.TupleGetItem(func_869_call(relay.reshape(const_1192.astype('int64'), [14, 12]), relay.reshape(const_1192.astype('int64'), [14, 12]), ), 4)
func_180_call = mod.get_global_var('func_180')
func_182_call = mutated_mod.get_global_var('func_182')
const_1207 = relay.const([-7.767882,5.463410,7.256098,-9.564288,-8.984576,-8.282853,9.519057,5.013327], dtype = "float32")#candidate|1207|(8,)|const|float32
call_1206 = func_180_call(relay.reshape(const_1207.astype('float32'), [8, 1, 1]))
call_1208 = func_180_call(relay.reshape(const_1207.astype('float32'), [8, 1, 1]))
func_150_call = mod.get_global_var('func_150')
func_153_call = mutated_mod.get_global_var('func_153')
call_1214 = func_150_call(relay.reshape(call_1203.astype('float64'), [11,]))
call_1215 = func_150_call(relay.reshape(call_1203.astype('float64'), [11,]))
bop_1216 = relay.equal(bop_1171.astype('bool'), relay.reshape(call_1160.astype('bool'), relay.shape_of(bop_1171))) # shape=(13, 7, 15)
bop_1219 = relay.equal(bop_1174.astype('bool'), relay.reshape(call_1161.astype('bool'), relay.shape_of(bop_1174))) # shape=(13, 7, 15)
const_1230 = relay.const([[-1.172662,1.610577,9.290666],[3.392548,6.973091,9.329518],[2.249383,-4.773770,3.266756],[0.384377,7.531012,5.341119],[-8.515057,-0.374118,0.979368],[7.528626,5.218995,6.492033],[-4.655483,-2.065337,-9.676610],[-0.879686,-8.633044,-2.132398],[5.151660,-4.824835,-5.824778],[-4.217057,7.751256,4.092755],[-8.972784,-9.601827,6.219630],[8.577259,2.275648,8.804910],[0.251997,3.185341,-2.765994],[4.072063,-2.237196,0.139338],[2.815497,7.312781,-3.611829],[6.185079,0.337134,-1.035109],[9.675183,-3.538677,2.724821],[-0.045437,-8.866637,-2.453254],[-3.297844,-3.083921,-7.297317],[5.032945,3.818753,-0.268362],[0.697832,-6.787955,-6.128773],[4.302945,-8.879649,-6.769784],[8.291228,-8.779718,-8.353675],[-3.422126,-7.972654,4.202326],[-3.277417,-1.902879,9.966550],[9.435129,5.885549,0.869485],[-7.992391,8.446290,0.524713],[-3.247431,7.749575,-8.139888],[-8.452297,-3.130219,9.934098],[6.731164,-2.259389,1.187323],[-9.656514,-5.502893,-0.136757],[5.272030,-1.448736,-8.413737],[-8.467635,-9.090547,8.590346],[-6.069038,7.998029,0.706577],[-9.052425,7.299398,-4.657066],[9.298667,3.975727,-6.873170],[8.804113,6.712609,0.354789],[6.385336,-1.389394,8.648803],[-9.977814,4.089368,-2.721762],[-4.896858,8.106806,9.332427],[-8.410372,2.244985,-5.677681],[-7.616521,4.919021,1.860739],[8.794206,8.208815,-7.924518],[8.528150,-2.587460,-6.490748],[5.537167,6.091639,-7.939479],[4.399665,7.516692,3.177211],[-5.105778,-5.927385,2.787568],[-7.122586,-8.871270,-8.332049],[-4.857650,-1.914050,5.663989],[9.780202,6.698818,8.871183],[6.137869,0.406254,8.742744],[-3.418899,-3.954563,-6.916593],[-0.109959,-2.887504,-4.107111],[3.054609,-8.747613,1.081122],[9.365409,9.463341,8.197474],[-8.868165,3.244449,-1.854727],[-1.438196,-5.627007,0.795127],[-6.521204,-6.121737,-0.993199],[-7.327584,7.976730,6.462719],[-9.064843,-1.592228,-1.152782],[-4.846792,-6.646073,-2.194677],[7.592219,-3.692945,8.595308],[-7.130332,3.150130,-8.264657],[8.611005,-8.491698,3.534102],[5.267040,-0.894783,2.702101],[2.454745,0.380801,6.361211],[-0.298070,4.436497,9.501642],[-4.936527,-3.294425,-1.476373],[-6.278814,3.447202,-5.791258],[-1.253524,-7.598177,6.816693],[8.393736,-0.856202,4.676546],[-2.149134,-4.056031,-9.637984],[-2.992474,4.487455,-0.995717],[5.548319,9.459852,5.113492],[-6.225195,3.083490,-0.417485],[-3.987406,2.342452,7.269592],[2.800806,2.816520,9.596693],[0.057770,-4.444049,-8.431270],[-8.408369,1.407561,5.247950],[1.830735,6.683738,-7.687605],[-6.706447,0.737821,7.482653],[-5.426729,6.189585,-3.608391],[7.667182,-0.509853,-5.340626],[-9.539187,7.471592,-5.099257],[8.004560,-2.605163,-3.045319],[-3.911193,8.928905,2.531932],[-8.879729,5.285612,6.209662],[-4.286553,0.488170,-1.868336],[-8.838925,-7.828371,7.194275],[-5.080070,3.079588,7.603362],[6.881119,-2.276572,3.903755],[-1.848137,6.263079,2.059451],[9.084158,8.922610,5.342216],[6.583478,-2.931068,0.582361],[-9.548719,-9.454727,-1.733056],[-6.290974,-3.862197,-6.462813],[-4.436286,9.641213,3.195126],[-8.253464,3.382675,3.190774],[9.280440,-8.578305,5.376096],[0.504337,9.909848,3.377161],[5.108872,3.233406,-8.072689],[-9.474060,-3.944603,-0.628959],[-4.394837,3.175615,-2.943305],[-4.674721,3.682206,8.819028],[-5.288833,-1.253986,8.455051],[6.878989,9.951624,-5.767039],[4.574592,-3.700993,-4.786434],[0.087770,5.495059,-2.825034],[2.580264,-0.234162,7.364413],[8.182112,-3.699571,4.288250],[2.771467,5.712522,-4.605964],[-2.276215,-2.350621,4.624817],[4.172846,9.778575,2.517874],[-7.693077,0.979896,6.218103],[2.991442,-3.809840,0.091956],[4.936404,1.578411,7.657865],[-9.909674,0.830902,1.518333],[2.085854,9.913219,4.258567],[2.596685,3.737579,-1.793371],[7.291731,-7.890748,-9.119861],[-2.455733,-5.999766,-6.440647],[8.531956,-3.913359,2.302428],[4.804046,-1.472041,5.312868],[-6.005714,-1.376445,2.306351],[-1.538041,-8.847976,8.031994],[-9.672954,-7.908528,6.756333],[2.715216,8.236367,3.010724],[1.206064,2.862140,4.175035],[6.784067,4.524927,6.984295],[7.105638,-2.481926,-2.176981],[-3.140587,3.464424,-7.307441],[2.406145,0.219053,6.712546],[0.723957,9.692265,-0.946793],[1.111344,-4.653279,3.578655],[-7.599144,-4.241546,-5.345068],[-0.512623,6.799558,0.485083],[-2.629365,8.541499,0.295338],[-5.679792,1.231557,-7.932845],[-4.061319,-8.892531,-0.698599],[-9.924945,-8.467957,8.027807],[-6.767638,0.011609,6.114186],[4.822624,7.686643,9.635356],[9.178406,0.245164,-6.649123],[-6.716814,0.801098,7.275684],[7.316482,-5.397616,-3.698364],[-8.073986,5.654508,2.204723],[5.266095,-1.224502,4.855998],[9.127978,8.264995,-2.492213],[-2.632028,-5.050938,8.809009],[-9.965103,-8.768948,-3.768492]], dtype = "float32")#candidate|1230|(150, 3)|const|float32
bop_1231 = relay.less(call_1191.astype('bool'), relay.reshape(const_1230.astype('bool'), relay.shape_of(call_1191))) # shape=(150, 3)
bop_1234 = relay.less(call_1193.astype('bool'), relay.reshape(const_1230.astype('bool'), relay.shape_of(call_1193))) # shape=(150, 3)
output = relay.Tuple([const_1192,bop_1198,call_1203,call_1206,const_1207,call_1214,bop_1216,bop_1231,])
output2 = relay.Tuple([const_1192,bop_1201,call_1204,call_1208,const_1207,call_1215,bop_1219,bop_1234,])
func_1241 = relay.Function([var_1170,var_1182,], output)
mod['func_1241'] = func_1241
mod = relay.transform.InferType()(mod)
var_1242 = relay.var("var_1242", dtype = "bool", shape = (13, 7, 15))#candidate|1242|(13, 7, 15)|var|bool
var_1243 = relay.var("var_1243", dtype = "float32", shape = (3120,))#candidate|1243|(3120,)|var|float32
output = func_1241(var_1242,var_1243,)
func_1244 = relay.Function([var_1242,var_1243,], output)
mutated_mod['func_1244'] = func_1244
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1282 = relay.var("var_1282", dtype = "float64", shape = (13, 16))#candidate|1282|(13, 16)|var|float64
uop_1283 = relay.log10(var_1282.astype('float64')) # shape=(13, 16)
output = uop_1283
output2 = uop_1283
func_1287 = relay.Function([var_1282,], output)
mod['func_1287'] = func_1287
mod = relay.transform.InferType()(mod)
mutated_mod['func_1287'] = func_1287
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1288 = relay.var("var_1288", dtype = "float64", shape = (13, 16))#candidate|1288|(13, 16)|var|float64
func_1287_call = mutated_mod.get_global_var('func_1287')
call_1289 = func_1287_call(var_1288)
output = call_1289
func_1290 = relay.Function([var_1288], output)
mutated_mod['func_1290'] = func_1290
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1292 = relay.var("var_1292", dtype = "float32", shape = (1, 4))#candidate|1292|(1, 4)|var|float32
var_1293 = relay.var("var_1293", dtype = "float32", shape = (16, 4))#candidate|1293|(16, 4)|var|float32
bop_1294 = relay.greater_equal(var_1292.astype('bool'), var_1293.astype('bool')) # shape=(16, 4)
bop_1300 = relay.left_shift(var_1293.astype('int64'), relay.reshape(bop_1294.astype('int64'), relay.shape_of(var_1293))) # shape=(16, 4)
output = relay.Tuple([bop_1300,])
output2 = relay.Tuple([bop_1300,])
func_1303 = relay.Function([var_1292,var_1293,], output)
mod['func_1303'] = func_1303
mod = relay.transform.InferType()(mod)
mutated_mod['func_1303'] = func_1303
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1303_call = mutated_mod.get_global_var('func_1303')
var_1305 = relay.var("var_1305", dtype = "float32", shape = (1, 4))#candidate|1305|(1, 4)|var|float32
var_1306 = relay.var("var_1306", dtype = "float32", shape = (16, 4))#candidate|1306|(16, 4)|var|float32
call_1304 = func_1303_call(var_1305,var_1306,)
output = call_1304
func_1307 = relay.Function([var_1305,var_1306,], output)
mutated_mod['func_1307'] = func_1307
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1322 = relay.var("var_1322", dtype = "uint8", shape = (5, 16, 5))#candidate|1322|(5, 16, 5)|var|uint8
var_1323 = relay.var("var_1323", dtype = "uint8", shape = (5, 16, 5))#candidate|1323|(5, 16, 5)|var|uint8
bop_1324 = relay.left_shift(var_1322.astype('uint8'), relay.reshape(var_1323.astype('uint8'), relay.shape_of(var_1322))) # shape=(5, 16, 5)
uop_1333 = relay.atanh(bop_1324.astype('float32')) # shape=(5, 16, 5)
bop_1338 = relay.divide(uop_1333.astype('float64'), relay.reshape(bop_1324.astype('float64'), relay.shape_of(uop_1333))) # shape=(5, 16, 5)
output = relay.Tuple([bop_1338,])
output2 = relay.Tuple([bop_1338,])
func_1341 = relay.Function([var_1322,var_1323,], output)
mod['func_1341'] = func_1341
mod = relay.transform.InferType()(mod)
mutated_mod['func_1341'] = func_1341
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1341_call = mutated_mod.get_global_var('func_1341')
var_1343 = relay.var("var_1343", dtype = "uint8", shape = (5, 16, 5))#candidate|1343|(5, 16, 5)|var|uint8
var_1344 = relay.var("var_1344", dtype = "uint8", shape = (5, 16, 5))#candidate|1344|(5, 16, 5)|var|uint8
call_1342 = func_1341_call(var_1343,var_1344,)
output = call_1342
func_1345 = relay.Function([var_1343,var_1344,], output)
mutated_mod['func_1345'] = func_1345
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1353 = relay.var("var_1353", dtype = "float32", shape = (15, 6))#candidate|1353|(15, 6)|var|float32
uop_1354 = relay.atanh(var_1353.astype('float32')) # shape=(15, 6)
bop_1356 = relay.bitwise_and(uop_1354.astype('int8'), relay.reshape(var_1353.astype('int8'), relay.shape_of(uop_1354))) # shape=(15, 6)
output = relay.Tuple([bop_1356,])
output2 = relay.Tuple([bop_1356,])
func_1361 = relay.Function([var_1353,], output)
mod['func_1361'] = func_1361
mod = relay.transform.InferType()(mod)
mutated_mod['func_1361'] = func_1361
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1362 = relay.var("var_1362", dtype = "float32", shape = (15, 6))#candidate|1362|(15, 6)|var|float32
func_1361_call = mutated_mod.get_global_var('func_1361')
call_1363 = func_1361_call(var_1362)
output = call_1363
func_1364 = relay.Function([var_1362], output)
mutated_mod['func_1364'] = func_1364
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1366 = relay.var("var_1366", dtype = "int32", shape = (4, 8, 12))#candidate|1366|(4, 8, 12)|var|int32
var_1367 = relay.var("var_1367", dtype = "int32", shape = (4, 8, 12))#candidate|1367|(4, 8, 12)|var|int32
bop_1368 = relay.equal(var_1366.astype('bool'), relay.reshape(var_1367.astype('bool'), relay.shape_of(var_1366))) # shape=(4, 8, 12)
bop_1373 = relay.bitwise_xor(var_1367.astype('int8'), relay.reshape(var_1366.astype('int8'), relay.shape_of(var_1367))) # shape=(4, 8, 12)
uop_1378 = relay.log(bop_1368.astype('float64')) # shape=(4, 8, 12)
bop_1380 = relay.logical_xor(uop_1378.astype('int32'), relay.reshape(var_1367.astype('int32'), relay.shape_of(uop_1378))) # shape=(4, 8, 12)
bop_1383 = relay.bitwise_and(var_1367.astype('uint8'), relay.reshape(bop_1373.astype('uint8'), relay.shape_of(var_1367))) # shape=(4, 8, 12)
bop_1390 = relay.mod(uop_1378.astype('float64'), relay.reshape(bop_1380.astype('float64'), relay.shape_of(uop_1378))) # shape=(4, 8, 12)
uop_1396 = relay.rsqrt(uop_1378.astype('float32')) # shape=(4, 8, 12)
bop_1398 = relay.minimum(uop_1396.astype('uint64'), relay.reshape(bop_1368.astype('uint64'), relay.shape_of(uop_1396))) # shape=(4, 8, 12)
func_1287_call = mod.get_global_var('func_1287')
func_1290_call = mutated_mod.get_global_var('func_1290')
var_1403 = relay.var("var_1403", dtype = "float64", shape = (208,))#candidate|1403|(208,)|var|float64
call_1402 = func_1287_call(relay.reshape(var_1403.astype('float64'), [13, 16]))
call_1404 = func_1287_call(relay.reshape(var_1403.astype('float64'), [13, 16]))
func_1081_call = mod.get_global_var('func_1081')
func_1084_call = mutated_mod.get_global_var('func_1084')
var_1407 = relay.var("var_1407", dtype = "float64", shape = (1, 24))#candidate|1407|(1, 24)|var|float64
call_1406 = relay.TupleGetItem(func_1081_call(relay.reshape(var_1407.astype('float64'), [3, 8]), relay.reshape(var_1407.astype('float64'), [3, 8]), ), 1)
call_1408 = relay.TupleGetItem(func_1084_call(relay.reshape(var_1407.astype('float64'), [3, 8]), relay.reshape(var_1407.astype('float64'), [3, 8]), ), 1)
uop_1415 = relay.cos(uop_1396.astype('float32')) # shape=(4, 8, 12)
var_1422 = relay.var("var_1422", dtype = "float32", shape = (4, 8, 12))#candidate|1422|(4, 8, 12)|var|float32
bop_1423 = relay.greater_equal(uop_1415.astype('bool'), relay.reshape(var_1422.astype('bool'), relay.shape_of(uop_1415))) # shape=(4, 8, 12)
output = relay.Tuple([bop_1383,bop_1390,bop_1398,call_1402,var_1403,call_1406,var_1407,bop_1423,])
output2 = relay.Tuple([bop_1383,bop_1390,bop_1398,call_1404,var_1403,call_1408,var_1407,bop_1423,])
F = relay.Function([var_1366,var_1367,var_1403,var_1407,var_1422,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_1366,var_1367,var_1403,var_1407,var_1422,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_1366= np.array([[[-9,7,4,-10,-9,-9,-7,10,-9,1,-4,3],[-8,5,5,1,-8,-7,4,-9,6,-4,10,-4],[6,10,-6,8,-10,-9,-9,-9,9,-9,-3,8],[8,-6,-5,-1,6,1,-6,8,-1,1,7,7],[5,-9,-6,-10,6,-3,8,3,5,8,10,9],[4,1,9,-5,4,3,-10,4,-10,-8,3,4],[3,1,-9,7,2,5,6,8,-6,9,5,-4],[2,-5,3,-3,1,-4,-8,-4,-8,2,10,1]],[[-10,-2,4,3,-7,-1,6,-1,-9,9,-3,-6],[1,5,9,-7,-6,5,4,6,-6,4,-10,-1],[7,6,3,2,-3,7,-3,-10,-1,9,-5,-9],[-3,-5,5,3,5,5,-3,-4,-4,-8,-3,-5],[7,2,-10,-5,3,9,-5,1,6,-2,2,5],[6,10,4,-6,9,5,2,-6,9,2,-10,7],[-8,4,4,-6,5,-10,1,-1,7,-2,3,3],[-3,-7,-7,-10,-1,6,6,-6,8,-9,3,9]],[[-6,-10,-9,3,5,9,-2,8,3,-1,-4,9],[4,-10,10,8,10,-4,-10,-3,7,-8,10,6],[-9,-2,3,-6,-9,-5,-6,4,-2,5,7,6],[3,-5,-9,-8,-8,-3,2,-10,-4,2,10,5],[8,6,1,9,6,-7,-7,-5,-5,-5,-6,10],[2,1,1,5,-10,-5,3,-3,10,-5,-4,1],[7,-8,3,-4,-1,-6,-2,2,-4,-3,10,5],[7,-6,-10,-2,-3,3,-8,10,3,4,10,9]],[[10,10,-9,10,7,-9,-3,6,-3,3,-8,-3],[-2,8,10,4,9,-9,-1,6,-5,4,8,-7],[1,-2,-6,9,1,-7,-5,2,7,4,-10,-3],[-5,-6,-1,6,4,10,-5,7,-6,-9,-7,5],[-4,-1,9,-1,5,9,-2,-7,-3,8,5,3],[2,-10,-5,-5,4,-3,-2,-9,-6,2,-1,6],[-5,1,-4,9,10,-4,-8,4,-7,-7,3,-7],[-2,7,-9,9,-1,-1,-9,-10,-4,4,5,4]]], dtype='int32')
module1.set_input('var_1366', input_1366)
input_1367= np.array([[[-4,2,-4,-8,-9,4,-2,-1,-7,10,7,-5],[-8,2,6,7,6,-9,10,9,-4,9,-7,-1],[-5,8,-2,-2,3,-6,-10,9,4,-6,-7,6],[-9,-1,9,9,-4,-7,-2,-9,-3,-4,-7,8],[-2,8,9,-5,2,5,8,5,-10,10,-1,9],[-5,-6,-5,-6,9,8,-9,-6,-9,-10,4,-10],[-8,-10,-3,-5,-1,1,-3,5,-2,-2,8,-9],[1,-7,-7,-1,9,-5,2,1,9,1,10,6]],[[1,-2,-5,7,10,-3,10,1,-7,4,-6,-5],[8,9,-2,-9,-2,-1,1,5,3,-10,3,-4],[10,10,-4,1,10,1,4,4,-10,6,-4,-5],[-10,10,6,4,4,10,-10,2,-10,4,3,-3],[-3,-6,-2,2,4,7,-7,-6,8,1,-8,10],[5,5,9,3,-6,9,-8,2,-4,-3,-10,4],[-6,6,7,3,9,2,-5,2,-1,-1,-5,-2],[2,1,-4,-9,-9,6,4,-10,7,-3,-6,-8]],[[-9,8,2,4,-7,7,2,-2,5,-9,-7,-2],[-10,9,-1,4,5,-5,-4,-2,-5,-2,7,8],[-2,-10,5,-3,6,-10,10,8,-8,4,-1,-10],[-5,1,-6,5,7,7,7,6,6,2,-4,1],[5,-1,-2,-1,5,3,3,9,1,-4,8,4],[8,9,-10,1,8,10,-4,8,-6,-1,7,1],[-8,10,4,1,2,3,2,7,-9,9,1,5],[8,-6,-7,-7,-1,2,-1,-7,-5,-6,8,7]],[[2,3,3,1,-3,6,-4,-7,-10,-10,4,-5],[-2,5,6,-7,6,-4,-5,10,-1,-10,-1,-10],[7,-3,9,-1,-1,-1,8,7,-8,-5,-5,-3],[-3,-1,-9,7,-3,7,8,-3,4,-8,-9,-8],[-6,-10,-10,-7,-5,9,-9,9,7,-4,-6,6],[10,-2,-8,6,5,-7,10,-8,-4,8,-1,7],[-3,-3,-7,-8,-10,6,3,4,-1,-3,-6,-5],[-7,-6,-9,6,-4,-10,-7,-8,3,9,-7,5]]], dtype='int32')
module1.set_input('var_1367', input_1367)
input_1403= np.array([1.374168,7.265474,-8.310310,-0.670622,-2.081543,-9.438007,1.302612,9.424007,4.604844,-9.049166,-0.039745,9.261022,-0.389214,9.366758,-6.521904,0.652095,3.311834,3.953901,-5.662529,6.336489,-2.061112,0.933606,3.736559,-9.229960,2.349856,1.622818,-0.342237,7.719460,-6.221964,2.616535,0.548568,-7.877604,1.943362,-3.450942,7.482430,7.320408,1.340511,-8.143326,6.976679,9.161722,0.043079,-9.869419,-7.206178,-9.111432,-0.510324,2.658408,-1.710763,-2.237608,5.812973,-8.088195,0.686746,1.833046,-6.640941,2.880344,-4.607661,5.740633,4.035957,-5.707905,0.874061,-2.001442,-1.698260,-9.820154,1.496966,-0.060412,3.607546,7.577105,-0.467347,-3.307009,-7.411201,-3.550993,-8.338556,9.715332,8.795259,4.941187,-6.204746,4.307849,4.932203,-4.384499,-8.988321,-4.948927,6.253164,-0.241338,-7.221962,-1.933726,-9.167239,1.114419,-9.060180,-1.253321,-2.456047,4.784875,6.814872,0.540548,-7.977124,4.212687,5.504118,-4.610305,-3.571256,-7.152398,5.860621,0.777153,-6.895823,9.236378,1.399618,-8.938427,9.533626,6.647284,-5.936542,-6.349611,-8.025798,-6.870605,3.277099,-5.828200,9.396187,-2.615827,2.939141,9.104122,-9.291972,0.082251,-9.789641,-2.278008,8.723081,9.991059,-6.251651,-1.369741,4.204569,-2.592681,8.610816,-4.313007,-2.330051,-5.276070,9.359008,2.802451,-2.645567,1.317790,-5.691699,-7.348667,9.596646,-6.382128,4.936486,-1.511299,8.581117,3.174504,3.565682,4.756928,-1.865357,-5.115664,3.667582,-4.338265,-6.213665,6.034450,7.859740,-4.569908,1.441068,-5.678881,3.479272,1.904540,-7.960471,2.721736,5.230458,2.464763,-7.354648,0.350867,1.468078,9.305890,1.222706,-9.468874,7.646048,-9.819441,4.432795,2.354628,5.977265,5.174356,-8.598730,-7.261165,-2.593946,7.119905,7.817233,-6.895242,-4.720813,-2.087337,-6.356878,-8.744295,5.811116,-5.567120,-9.568837,9.059638,8.348145,5.916808,0.142380,0.353500,9.716896,8.638002,8.647498,7.159326,5.426729,1.697710,-8.589445,4.852575,-9.212688,5.809481,-8.853864,8.946859,0.367418,2.756214,-4.181230,-8.198827,4.343464,-3.074372], dtype='float64')
module1.set_input('var_1403', input_1403)
input_1407= np.array([[-4.816379,1.743202,6.209972,7.354699,-0.064427,8.817714,2.573214,9.270649,0.749615,7.234989,3.729862,2.073922,1.364024,6.039006,0.978569,2.541760,4.617782,-1.547419,8.649473,9.509482,-2.465584,9.992732,4.833080,1.198526]], dtype='float64')
module1.set_input('var_1407', input_1407)
input_1422= np.array([[[0.447278,0.682780,7.228212,-5.944033,6.478129,-6.681236,9.567510,-5.905172,-4.758084,8.851184,-6.892252,9.925256],[5.203178,-7.810488,-0.180583,7.893941,-6.826931,-5.475179,9.723014,-3.594151,1.935010,-8.455398,-4.514078,9.298362],[0.329433,1.606652,2.396402,-9.499388,6.933744,5.917424,7.703411,8.452641,-4.647818,1.172072,-5.038986,-8.397146],[-5.514343,-2.349737,6.842976,1.699744,-7.443386,-3.016241,-8.696881,-0.441680,-9.714324,0.902389,-6.457955,5.785609],[-2.780501,-5.476664,2.580560,-7.903937,3.463497,-1.821514,5.452823,6.813432,-4.280829,3.373171,3.251695,-0.515049],[-3.616074,5.031215,-9.065315,9.000951,3.825349,3.958036,-9.457829,6.333779,-4.518382,-4.342350,5.320247,1.609049],[2.039747,-9.408823,-4.038009,-6.824818,-2.969427,3.135402,9.223615,-1.762883,7.668303,1.707012,6.574914,7.224138],[-1.742868,8.811688,-7.843752,-3.463070,-4.195110,-5.551805,9.359426,1.647207,-9.020204,6.055190,7.735229,-2.652757]],[[4.505043,-7.061013,-1.902921,6.305672,2.663665,7.522711,9.300070,4.685262,-3.300041,4.281677,2.955893,-8.751466],[5.031607,4.430076,5.221261,1.984302,1.777894,0.132623,-0.210914,-3.129229,-2.699017,7.281758,4.221464,4.461626],[-3.466472,-1.597782,8.714739,6.995920,-4.850585,5.587326,-0.653902,-1.114838,-9.989653,-0.152192,-5.930161,-2.550258],[-0.455477,8.255995,-5.712155,5.772453,9.879968,-5.556899,-3.929392,8.712305,-4.848092,-4.928830,-9.979973,-3.536002],[5.325950,3.976128,-4.362985,-8.578806,9.924905,-0.089995,-4.482471,-9.551956,2.784919,-7.309647,-0.265111,-3.815142],[-3.826536,1.573358,-1.926223,4.686651,-3.467947,3.094416,-9.522438,5.781679,1.582187,0.750481,-9.544046,9.513668],[6.333713,0.841687,-2.274799,-6.769474,5.828601,9.233064,-2.990373,4.600221,7.539718,4.180389,-0.289768,4.936069],[-0.893219,9.040104,-5.161215,9.564033,-1.351285,6.963026,-9.406182,5.590646,4.738092,0.022361,5.412202,5.408655]],[[-2.152262,-7.449571,7.756545,-5.152326,-2.990841,-4.772435,4.498124,-8.625136,0.408334,-6.694585,-5.524491,0.109700],[-7.992059,7.070167,3.087534,-9.081264,9.966576,-4.750620,-2.439899,-5.023877,-5.412104,5.163666,-8.699166,3.609627],[7.778679,-0.754619,3.027050,3.036627,-5.116685,2.566678,3.914756,7.548185,-2.512982,-2.754981,2.627226,3.996375],[2.805287,3.732533,9.923192,3.986718,-5.336724,-3.525401,1.016791,0.138545,-5.679556,2.269886,-7.021103,-4.660804],[-4.240127,2.077014,0.255985,8.260863,5.729990,0.229054,1.248432,1.724428,-4.706658,0.692006,5.919789,4.083219],[1.003826,-4.632378,-1.007971,-3.561406,3.188009,-3.558623,2.655261,0.297897,-9.903493,1.053387,-4.503683,9.100484],[-4.476280,-7.590838,0.263838,7.341151,1.028944,-0.700922,-8.501290,-2.478451,-9.893223,-2.111264,1.504501,-2.888451],[-0.943711,9.634387,-8.326872,0.254910,-4.139627,-7.902799,-4.911717,-3.316898,8.898024,7.879028,-8.550992,7.387725]],[[-4.436605,-6.093903,-9.640753,6.180894,-8.451531,7.709080,0.661928,7.053844,-8.781633,3.897300,1.155962,-3.058520],[-0.584358,-3.562906,-3.271603,7.545221,7.574195,-9.306943,-4.666608,5.098504,-1.523300,8.522386,7.121446,3.613379],[-4.082353,-1.071102,4.663259,1.927524,-2.678003,-0.964608,0.099015,6.208740,9.712456,-6.158320,4.050037,-0.119885],[-9.937558,8.022607,-4.274339,-2.734509,2.780067,-6.006663,8.730203,-6.785701,6.483376,-9.191564,-6.085370,6.505393],[9.798825,7.494236,1.282980,6.040858,6.689087,-3.174770,2.230104,8.772031,6.523346,7.495620,9.334489,3.915779],[-1.462062,1.729593,5.736875,-2.463193,8.488681,-6.426165,7.175697,-3.890739,-8.220222,-5.837760,0.479896,7.362304],[4.002212,-4.453607,-8.040227,7.602112,1.407710,-7.660938,-0.234331,-1.896534,-9.639970,-0.715920,-5.909620,0.387669],[0.253875,-2.727381,6.986823,-9.033290,6.846904,1.173187,-0.734544,-7.089530,3.641314,-0.740513,-1.919689,1.859703]]], dtype='float32')
module1.set_input('var_1422', input_1422)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res3 = intrp3.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res4 = intrp4.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
res1_4 = module1.get_output(4).asnumpy()
res2_4 = res2[4].asnumpy()
res3_4 = res3[4].asnumpy()
res4_4 = res4[4].asnumpy()
np.testing.assert_allclose(res1_4 ,res2_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res3_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_4 ,res4_4, atol=1e-3, rtol=1e-3)
(res1_4 == res2_4).all()
(res1_4 == res3_4).all()
(res1_4 == res4_4).all()
res1_5 = module1.get_output(5).asnumpy()
res2_5 = res2[5].asnumpy()
res3_5 = res3[5].asnumpy()
res4_5 = res4[5].asnumpy()
np.testing.assert_allclose(res1_5 ,res2_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res3_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_5 ,res4_5, atol=1e-3, rtol=1e-3)
(res1_5 == res2_5).all()
(res1_5 == res3_5).all()
(res1_5 == res4_5).all()
res1_6 = module1.get_output(6).asnumpy()
res2_6 = res2[6].asnumpy()
res3_6 = res3[6].asnumpy()
res4_6 = res4[6].asnumpy()
np.testing.assert_allclose(res1_6 ,res2_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res3_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_6 ,res4_6, atol=1e-3, rtol=1e-3)
(res1_6 == res2_6).all()
(res1_6 == res3_6).all()
(res1_6 == res4_6).all()
res1_7 = module1.get_output(7).asnumpy()
res2_7 = res2[7].asnumpy()
res3_7 = res3[7].asnumpy()
res4_7 = res4[7].asnumpy()
np.testing.assert_allclose(res1_7 ,res2_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res3_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_7 ,res4_7, atol=1e-3, rtol=1e-3)
(res1_7 == res2_7).all()
(res1_7 == res3_7).all()
(res1_7 == res4_7).all()
module5.set_input('var_1366', input_1366)
module5.set_input('var_1367', input_1367)
module5.set_input('var_1403', input_1403)
module5.set_input('var_1407', input_1407)
module5.set_input('var_1422', input_1422)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res7 = intrp7.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res8 = intrp8.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
res5_4 = module5.get_output(4).asnumpy()
res6_4 = res6[4].asnumpy()
res7_4 = res7[4].asnumpy()
res8_4 = res8[4].asnumpy()
np.testing.assert_allclose(res5_4 ,res6_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res7_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_4 ,res8_4, atol=1e-3, rtol=1e-3)
(res5_4 == res6_4).all()
(res5_4 == res7_4).all()
(res5_4 == res8_4).all()
res5_5 = module5.get_output(5).asnumpy()
res6_5 = res6[5].asnumpy()
res7_5 = res7[5].asnumpy()
res8_5 = res8[5].asnumpy()
np.testing.assert_allclose(res5_5 ,res6_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res7_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_5 ,res8_5, atol=1e-3, rtol=1e-3)
(res5_5 == res6_5).all()
(res5_5 == res7_5).all()
(res5_5 == res8_5).all()
res5_6 = module5.get_output(6).asnumpy()
res6_6 = res6[6].asnumpy()
res7_6 = res7[6].asnumpy()
res8_6 = res8[6].asnumpy()
np.testing.assert_allclose(res5_6 ,res6_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res7_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_6 ,res8_6, atol=1e-3, rtol=1e-3)
(res5_6 == res6_6).all()
(res5_6 == res7_6).all()
(res5_6 == res8_6).all()
res5_7 = module5.get_output(7).asnumpy()
res6_7 = res6[7].asnumpy()
res7_7 = res7[7].asnumpy()
res8_7 = res8[7].asnumpy()
np.testing.assert_allclose(res5_7 ,res6_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res7_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_7 ,res8_7, atol=1e-3, rtol=1e-3)
(res5_7 == res6_7).all()
(res5_7 == res7_7).all()
(res5_7 == res8_7).all()
module9.set_input('var_1366', input_1366)
module9.set_input('var_1367', input_1367)
module9.set_input('var_1403', input_1403)
module9.set_input('var_1407', input_1407)
module9.set_input('var_1422', input_1422)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res11 = intrp11.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res12 = intrp12.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
res9_4 = module9.get_output(4).asnumpy()
res10_4 = res10[4].asnumpy()
res11_4 = res11[4].asnumpy()
res12_4 = res12[4].asnumpy()
np.testing.assert_allclose(res9_4 ,res10_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res11_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_4 ,res12_4, atol=1e-3, rtol=1e-3)
(res9_4 == res10_4).all()
(res9_4 == res11_4).all()
(res9_4 == res12_4).all()
res9_5 = module9.get_output(5).asnumpy()
res10_5 = res10[5].asnumpy()
res11_5 = res11[5].asnumpy()
res12_5 = res12[5].asnumpy()
np.testing.assert_allclose(res9_5 ,res10_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res11_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_5 ,res12_5, atol=1e-3, rtol=1e-3)
(res9_5 == res10_5).all()
(res9_5 == res11_5).all()
(res9_5 == res12_5).all()
res9_6 = module9.get_output(6).asnumpy()
res10_6 = res10[6].asnumpy()
res11_6 = res11[6].asnumpy()
res12_6 = res12[6].asnumpy()
np.testing.assert_allclose(res9_6 ,res10_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res11_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_6 ,res12_6, atol=1e-3, rtol=1e-3)
(res9_6 == res10_6).all()
(res9_6 == res11_6).all()
(res9_6 == res12_6).all()
res9_7 = module9.get_output(7).asnumpy()
res10_7 = res10[7].asnumpy()
res11_7 = res11[7].asnumpy()
res12_7 = res12[7].asnumpy()
np.testing.assert_allclose(res9_7 ,res10_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res11_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_7 ,res12_7, atol=1e-3, rtol=1e-3)
(res9_7 == res10_7).all()
(res9_7 == res11_7).all()
(res9_7 == res12_7).all()
module13.set_input('var_1366', input_1366)
module13.set_input('var_1367', input_1367)
module13.set_input('var_1403', input_1403)
module13.set_input('var_1407', input_1407)
module13.set_input('var_1422', input_1422)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res15 = intrp15.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res16 = intrp16.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
res13_4 = module13.get_output(4).asnumpy()
res14_4 = res14[4].asnumpy()
res15_4 = res15[4].asnumpy()
res16_4 = res16[4].asnumpy()
np.testing.assert_allclose(res13_4 ,res14_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res15_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_4 ,res16_4, atol=1e-3, rtol=1e-3)
(res13_4 == res14_4).all()
(res13_4 == res15_4).all()
(res13_4 == res16_4).all()
res13_5 = module13.get_output(5).asnumpy()
res14_5 = res14[5].asnumpy()
res15_5 = res15[5].asnumpy()
res16_5 = res16[5].asnumpy()
np.testing.assert_allclose(res13_5 ,res14_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res15_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_5 ,res16_5, atol=1e-3, rtol=1e-3)
(res13_5 == res14_5).all()
(res13_5 == res15_5).all()
(res13_5 == res16_5).all()
res13_6 = module13.get_output(6).asnumpy()
res14_6 = res14[6].asnumpy()
res15_6 = res15[6].asnumpy()
res16_6 = res16[6].asnumpy()
np.testing.assert_allclose(res13_6 ,res14_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res15_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_6 ,res16_6, atol=1e-3, rtol=1e-3)
(res13_6 == res14_6).all()
(res13_6 == res15_6).all()
(res13_6 == res16_6).all()
res13_7 = module13.get_output(7).asnumpy()
res14_7 = res14[7].asnumpy()
res15_7 = res15[7].asnumpy()
res16_7 = res16[7].asnumpy()
np.testing.assert_allclose(res13_7 ,res14_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res15_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_7 ,res16_7, atol=1e-3, rtol=1e-3)
(res13_7 == res14_7).all()
(res13_7 == res15_7).all()
(res13_7 == res16_7).all()
module17.set_input('var_1366', input_1366)
module17.set_input('var_1367', input_1367)
module17.set_input('var_1403', input_1403)
module17.set_input('var_1407', input_1407)
module17.set_input('var_1422', input_1422)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res19 = intrp19.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res20 = intrp20.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
res17_4 = module17.get_output(4).asnumpy()
res18_4 = res18[4].asnumpy()
res19_4 = res19[4].asnumpy()
res20_4 = res20[4].asnumpy()
np.testing.assert_allclose(res17_4 ,res18_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res19_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_4 ,res20_4, atol=1e-3, rtol=1e-3)
(res17_4 == res18_4).all()
(res17_4 == res19_4).all()
(res17_4 == res20_4).all()
res17_5 = module17.get_output(5).asnumpy()
res18_5 = res18[5].asnumpy()
res19_5 = res19[5].asnumpy()
res20_5 = res20[5].asnumpy()
np.testing.assert_allclose(res17_5 ,res18_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res19_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_5 ,res20_5, atol=1e-3, rtol=1e-3)
(res17_5 == res18_5).all()
(res17_5 == res19_5).all()
(res17_5 == res20_5).all()
res17_6 = module17.get_output(6).asnumpy()
res18_6 = res18[6].asnumpy()
res19_6 = res19[6].asnumpy()
res20_6 = res20[6].asnumpy()
np.testing.assert_allclose(res17_6 ,res18_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res19_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_6 ,res20_6, atol=1e-3, rtol=1e-3)
(res17_6 == res18_6).all()
(res17_6 == res19_6).all()
(res17_6 == res20_6).all()
res17_7 = module17.get_output(7).asnumpy()
res18_7 = res18[7].asnumpy()
res19_7 = res19[7].asnumpy()
res20_7 = res20[7].asnumpy()
np.testing.assert_allclose(res17_7 ,res18_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res19_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_7 ,res20_7, atol=1e-3, rtol=1e-3)
(res17_7 == res18_7).all()
(res17_7 == res19_7).all()
(res17_7 == res20_7).all()
module21.set_input('var_1366', input_1366)
module21.set_input('var_1367', input_1367)
module21.set_input('var_1403', input_1403)
module21.set_input('var_1407', input_1407)
module21.set_input('var_1422', input_1422)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res23 = intrp23.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res24 = intrp24.evaluate()(input_1366, input_1367, input_1403, input_1407, input_1422, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()
res21_4 = module21.get_output(4).asnumpy()
res22_4 = res22[4].asnumpy()
res23_4 = res23[4].asnumpy()
res24_4 = res24[4].asnumpy()
np.testing.assert_allclose(res21_4 ,res22_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res23_4, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_4 ,res24_4, atol=1e-3, rtol=1e-3)
(res21_4 == res22_4).all()
(res21_4 == res23_4).all()
(res21_4 == res24_4).all()
res21_5 = module21.get_output(5).asnumpy()
res22_5 = res22[5].asnumpy()
res23_5 = res23[5].asnumpy()
res24_5 = res24[5].asnumpy()
np.testing.assert_allclose(res21_5 ,res22_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res23_5, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_5 ,res24_5, atol=1e-3, rtol=1e-3)
(res21_5 == res22_5).all()
(res21_5 == res23_5).all()
(res21_5 == res24_5).all()
res21_6 = module21.get_output(6).asnumpy()
res22_6 = res22[6].asnumpy()
res23_6 = res23[6].asnumpy()
res24_6 = res24[6].asnumpy()
np.testing.assert_allclose(res21_6 ,res22_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res23_6, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_6 ,res24_6, atol=1e-3, rtol=1e-3)
(res21_6 == res22_6).all()
(res21_6 == res23_6).all()
(res21_6 == res24_6).all()
res21_7 = module21.get_output(7).asnumpy()
res22_7 = res22[7].asnumpy()
res23_7 = res23[7].asnumpy()
res24_7 = res24[7].asnumpy()
np.testing.assert_allclose(res21_7 ,res22_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res23_7, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_7 ,res24_7, atol=1e-3, rtol=1e-3)
(res21_7 == res22_7).all()
(res21_7 == res23_7).all()
(res21_7 == res24_7).all()

'''57: TVMFuncCall
56: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
55: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
54: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
53: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule)
52: tvm::transform::Pass::operator()(tvm::IRModule) const
51: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
50: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
49: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
48: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
47: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
46: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
45: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
44: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
43: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
42: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
41: _ZN3tvm5relay16MixedModeMutato
40: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
39: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
38: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
37: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
36: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
35: void tvm::relay::ExpandDataflow<tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}) [clone .isra.535]
34: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
33: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
32: _ZN3tvm5relay16MixedModeMutato
31: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
30: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
29: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
28: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
27: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
26: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
25: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
24: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
23: tvm::transform::Pass::operator()(tvm::IRModule) const
22: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
21: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
20: tvm::transform::Pass::operator()(tvm::IRModule) const
19: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
18: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
17: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}>(tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
16: tvm::relay::transform::InferType()::{lambda(tvm::IRModule, tvm::transform::PassContext const&)#1}::operator()(tvm::IRModule, tvm::transform::PassContext const&) const [clone .isra.813]
15: tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)
14: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
13: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
12: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
11: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
10: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
9: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::FunctionNode const*)
8: tvm::relay::TypeInferencer::GetType(tvm::RelayExpr const&)
7: tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)
6: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2})
5: void tvm::relay::ExpandDataflow<tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#2}, tvm::relay::ExpandDataflow, tvm::relay::ExpandDataflow<{lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1}>(tvm::RelayExpr, {lambda(tvm::RelayExpr const&)#1}, tvm::relay::TypeInferencer::VisitExpr(tvm::RelayExpr const&)::{lambda(tvm::RelayExpr const&)#1})::{lambda(tvm::RelayExpr const&)#1})
4: _ZZN3tvm5relay11ExprFunctorIFNS_4TypeERK
3: tvm::relay::TypeInferencer::VisitExpr_(tvm::relay::CallNode const*)
2: tvm::relay::TypeInferencer::GeneralCall(tvm::relay::CallNode const*, tvm::runtime::Array<tvm::Type, void>)
1: _ZN3tvm17DiagnosticContext9EmitFatalERKNS_1
0: tvm::DiagnosticContext::Render()

'''