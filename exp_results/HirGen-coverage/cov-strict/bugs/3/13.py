import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
def vmobj_to_list(o, dtype="float32"):
    if isinstance(o, tvm.nd.NDArray):
        return [o]
    elif isinstance(o, tvm.runtime.container.ADT):
        result = []
        for f in o:
            result.extend(vmobj_to_list(f, dtype))
        return result
    else:
        return o


mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_0 = relay.var("var_0", dtype = "float64", shape = ())#candidate|0|()|var|float64
uop_1 = relay.erf(var_0.astype('float64')) # shape=()
output = relay.Tuple([uop_1,])
output2 = relay.Tuple([uop_1,])
func_3 = relay.Function([var_0,], output)
mod['func_3'] = func_3
mod = relay.transform.InferType()(mod)
var_4 = relay.var("var_4", dtype = "float64", shape = ())#candidate|4|()|var|float64
output = func_3(var_4)
func_5 = relay.Function([var_4], output)
mutated_mod['func_5'] = func_5
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7 = relay.var("var_7", dtype = "int32", shape = (15,))#candidate|7|(15,)|var|int32
var_8 = relay.var("var_8", dtype = "int32", shape = (15,))#candidate|8|(15,)|var|int32
bop_9 = relay.subtract(var_7.astype('int32'), relay.reshape(var_8.astype('int32'), relay.shape_of(var_7))) # shape=(15,)
uop_12 = relay.tan(var_8.astype('float32')) # shape=(15,)
bop_14 = relay.greater(var_7.astype('bool'), relay.reshape(uop_12.astype('bool'), relay.shape_of(var_7))) # shape=(15,)
bop_17 = relay.mod(bop_14.astype('float64'), relay.reshape(bop_9.astype('float64'), relay.shape_of(bop_14))) # shape=(15,)
output = bop_17
output2 = bop_17
func_20 = relay.Function([var_7,var_8,], output)
mod['func_20'] = func_20
mod = relay.transform.InferType()(mod)
mutated_mod['func_20'] = func_20
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20_call = mutated_mod.get_global_var('func_20')
var_22 = relay.var("var_22", dtype = "int32", shape = (15,))#candidate|22|(15,)|var|int32
var_23 = relay.var("var_23", dtype = "int32", shape = (15,))#candidate|23|(15,)|var|int32
call_21 = func_20_call(var_22,var_23,)
output = call_21
func_24 = relay.Function([var_22,var_23,], output)
mutated_mod['func_24'] = func_24
mutated_mod = relay.transform.InferType()(mutated_mod)
const_26 = relay.const(8.772012, dtype = "float64")#candidate|26|()|const|float64
uop_27 = relay.asin(const_26.astype('float64')) # shape=()
const_29 = relay.const([[[5.865041,9.374962,-1.487320,7.474278,3.539122,-7.690419,-8.908521,-3.102019,-1.759108,2.138845,-8.802129,-4.260251,2.380170,-4.260018],[-2.636753,2.954700,2.695937,7.103119,-0.662536,0.610091,2.382045,7.728769,4.188121,-1.010719,-1.949058,2.479131,-9.692591,-8.405547],[-7.861753,9.611605,-6.231699,-7.686353,8.955455,-5.871676,-4.016406,8.725948,8.468264,-1.664296,-0.072903,-4.699321,-6.489354,2.002158],[5.632800,-8.703200,-6.038041,0.229276,1.759527,-1.757788,2.725563,-6.764794,-1.224682,7.196648,-7.224082,-1.785818,-4.629557,-7.628333],[3.983412,0.993602,7.713615,-2.892351,4.673587,-8.511651,8.815677,3.826428,6.910491,-2.185158,1.510926,4.870549,9.047437,5.233503]],[[1.593457,-1.568733,4.513655,4.157850,-5.433043,5.564232,9.671550,-9.420970,-0.520543,7.178410,5.447696,-7.659950,4.993654,-4.841052],[5.932818,1.293037,1.246365,3.661845,7.804622,8.274376,-8.643652,-1.481051,8.658420,-5.759272,-6.868857,4.338006,-7.333415,9.929042],[-0.725516,-8.719927,4.929508,-3.751074,-6.500119,3.422200,-9.562303,8.615195,3.119749,3.325275,-8.523266,7.496057,0.551422,-1.859309],[-0.816910,-3.545846,2.133452,-3.074841,-7.902647,-3.497025,5.798045,-7.268637,-1.944604,-3.728268,9.702217,-5.074860,-0.070293,9.761123],[6.638044,0.950338,0.955975,-5.617737,-7.015962,6.344229,6.286794,8.484139,7.119562,-8.312797,8.335875,-3.167112,-1.530994,-0.508465]],[[-6.273087,0.924858,4.868588,0.664912,-7.598770,-2.577136,-4.552367,0.126496,3.643974,-2.966679,-3.042100,-6.912069,-3.979434,1.719944],[-9.447012,9.375997,8.882582,-4.647548,4.713988,5.341366,8.180592,-3.065611,3.995045,5.057010,1.910773,9.273494,-1.378414,5.056752],[-5.327503,-6.327659,2.743894,3.161080,-6.774229,4.833339,3.681645,4.017878,-2.918879,1.097313,4.347499,-8.634872,-2.260099,-4.645259],[-0.097026,3.595600,-7.402933,8.265987,9.894812,-3.669768,-7.862214,2.112514,-0.452330,-3.728330,3.204502,-7.705675,-6.391929,5.076760],[3.534837,3.276286,0.935448,-3.671641,-4.817213,5.528878,0.864044,2.761323,-0.234121,5.840552,8.445325,1.919592,0.751779,0.113383]],[[1.656116,0.578839,7.054576,-9.545769,3.149156,-8.078981,-0.183751,-2.252531,-2.288335,2.279339,-5.758891,4.991144,-3.561740,-2.859631],[8.096679,8.526302,-5.745821,3.326704,5.330250,1.100684,-2.868847,6.467573,9.992565,-7.192629,8.959434,-2.293987,3.855749,-0.809857],[3.793539,5.075275,-3.219274,9.430229,6.259024,-6.256190,-8.996976,-0.431023,-0.855928,0.870194,1.723799,2.646669,4.958459,-6.193484],[7.349073,-1.994994,-5.236937,4.841309,-8.931278,0.309980,3.407898,-1.304157,6.079780,3.690397,-8.669417,-8.474389,-1.846367,6.613930],[4.896171,-5.403406,-9.264947,2.285708,6.212709,9.603680,5.370764,3.439049,3.512190,-3.579352,-8.846524,-0.860787,-0.574800,-4.606288]],[[-9.401636,-3.967767,-8.911301,-3.400677,1.747586,5.201057,9.201853,-4.914442,9.917602,5.177426,-8.571574,-7.647998,7.866933,7.832845],[2.803121,2.778150,8.088308,3.881135,-8.616991,-0.101494,-7.677630,-0.216610,9.433094,-2.569525,7.628368,3.745329,-7.701469,-9.930254],[-8.590470,4.425237,-0.396296,7.078046,8.967978,3.606490,-8.373271,1.748887,6.012691,-8.583357,8.832984,2.498192,0.461363,-1.336949],[-7.555630,5.927322,-9.640974,-3.714461,0.799139,6.590737,7.472153,7.305686,-1.370621,-0.680257,-0.634288,-0.966702,3.523793,-7.570407],[-3.200352,-4.743909,-8.059861,7.635040,2.751058,0.634563,6.749628,2.834224,2.247617,2.401488,8.774660,9.934112,-3.566102,8.582919]],[[1.824424,-9.677012,-4.614437,1.788201,2.332349,-2.588589,-8.702694,5.835623,-9.450561,-7.533763,9.622161,1.801754,1.497290,8.498885],[8.070285,-0.015532,-6.723456,-2.094503,7.562018,3.445156,8.457919,2.357889,0.630486,9.178575,7.044747,0.481648,9.822699,-1.197084],[3.362553,3.206634,-0.285458,-7.132096,-4.952521,-6.592847,-1.432004,-8.466437,2.353254,1.738455,2.157717,-4.189729,9.181206,8.697279],[-5.374340,4.783313,3.783504,-5.986406,-8.593839,5.271268,-1.577214,1.026382,6.454874,-4.955405,8.326061,-4.984716,-1.131762,-2.763416],[-1.331922,2.548012,3.843784,1.269465,7.655950,-6.558453,-4.189249,-9.914888,0.274218,8.177237,-2.457873,1.921775,6.675413,-5.573563]],[[-7.253634,5.917503,-8.092105,-1.382615,-6.086944,1.130932,6.603105,0.494215,5.387730,-2.671452,3.884598,8.557357,0.531390,-6.544959],[-7.007991,7.894699,1.305653,-4.187615,4.572812,7.580152,-3.902902,1.511202,-3.364025,6.822689,-5.247534,2.060793,2.476478,7.269974],[3.925430,2.934283,-4.823092,7.574668,-4.551636,-4.213622,-5.577992,8.883607,-0.996939,-4.041813,5.637036,-0.367804,-1.197187,-0.444269],[-5.151775,-3.813747,9.800392,-5.948710,-0.379626,0.939565,1.510351,-9.081454,3.627898,-4.407281,-6.360322,-9.811695,-3.541422,-5.048845],[-6.290410,-7.850278,-1.728181,0.282547,-6.925569,-9.559584,7.350476,1.932183,2.508273,-1.705020,7.550044,-0.064144,0.876713,-4.053931]],[[9.722120,-1.550217,1.765295,-0.184074,-6.754015,5.787901,8.536749,8.629441,9.913707,2.934371,5.005773,8.474436,-8.951126,-9.409481],[-7.902765,6.876438,3.261071,-3.833600,-1.995211,3.987598,-2.846121,-0.394342,-3.248481,-9.455885,-3.485114,-2.000475,8.391047,1.702422],[1.260167,7.701654,-3.425229,5.023981,2.707216,-3.158177,-7.970387,-3.605262,-3.959761,4.629067,-8.304401,-3.929816,9.808254,-5.468132],[-3.332042,2.779836,-9.513227,9.926667,0.737420,-4.951420,-4.605914,6.747591,-4.113405,3.497985,-2.440924,2.680081,-3.934936,2.080861],[-8.835133,-4.240377,9.385801,-8.304601,1.847214,-4.433204,-4.891006,3.095839,5.591362,-9.849074,-8.968590,-1.164438,-9.418366,5.229820]],[[9.149714,-6.137798,8.110975,-8.550265,-4.412319,-6.643347,8.949006,9.139647,1.602697,-7.645902,8.965251,0.444326,2.946171,-3.872611],[3.644094,-5.758939,-4.841896,7.229951,-9.332088,5.032127,-6.973826,-1.033999,-7.969701,-4.133562,-3.049586,7.236338,3.635339,1.520417],[-1.069786,-8.729133,1.674869,9.408687,8.019154,3.982192,-1.017144,8.825085,-5.426775,-3.559889,8.690129,9.708630,-5.073080,2.379485],[5.566004,-8.915958,-6.291537,0.989193,8.798484,6.682299,4.459099,-5.248983,3.837625,2.191953,6.530136,3.666369,-0.985218,-6.225890],[0.494989,-0.772963,-1.163887,-2.194349,4.580527,8.368163,-5.169772,9.210330,2.753946,-5.329629,7.759606,5.106376,8.228321,5.223136]],[[6.348075,-2.807321,4.276356,4.141486,5.987861,-1.600765,8.634624,-7.909258,0.216495,-5.792118,2.375905,0.551453,-8.058258,-6.554633],[3.796945,0.655568,6.198998,2.443630,-4.455748,2.678499,8.482537,-0.776590,5.163210,-0.023823,-3.971471,3.566165,1.849202,5.088589],[0.861553,-0.336700,7.853961,1.322715,1.413675,-6.721806,7.633488,-7.030252,6.730340,-6.303191,1.873101,3.421444,4.534295,5.239121],[-7.327647,-6.966420,-0.719557,-3.762643,-9.564047,0.140091,1.339276,9.418450,9.929354,4.012231,-1.015892,5.709553,-8.800387,8.761047],[9.603066,2.672679,9.976447,-8.848256,-3.986115,-5.695436,-0.883581,-5.138170,7.760634,4.562007,1.608376,0.820921,-9.450795,6.454237]],[[-6.073994,-7.436193,-9.995180,1.186605,1.021792,7.358395,-2.327000,-8.537530,9.820568,-4.963285,-1.679066,7.585405,-6.971852,6.767636],[4.834671,-7.159885,3.017164,-8.072226,-6.331872,-3.550721,4.531941,0.950100,8.272649,-5.355734,-8.173173,9.236672,-2.539462,1.594017],[9.292793,6.169465,3.970219,-1.790945,-8.061770,-4.388767,-6.009671,-2.429927,9.730589,-7.915268,4.322675,4.351735,5.194677,-0.803074],[-6.081439,8.422152,-0.237129,-8.824195,-9.523555,1.309688,0.823537,9.384571,-0.065829,4.911667,4.512735,-2.461768,9.697013,-5.101038],[-4.752204,-7.263099,-5.937762,-6.930650,6.299521,2.479655,-6.716922,-0.443901,-9.382665,3.839201,-9.975705,-9.782217,-7.702091,-8.632345]],[[1.274909,0.798995,-7.273887,-5.192869,8.283876,1.631410,1.020184,-0.552409,7.425308,-2.074832,-1.926488,-9.951947,-6.278156,-8.010155],[9.957171,-2.949875,4.444362,-6.756627,-8.207738,4.890164,-5.343826,-7.896163,0.828154,6.390337,2.331652,-5.257315,4.970697,-7.191925],[-2.444565,2.297005,-5.671542,-6.083907,7.445270,0.818927,2.314399,1.365411,6.019024,9.782655,-4.100151,-1.884471,-6.034171,6.622741],[8.068601,-1.877986,-7.377039,-2.884863,3.122341,-9.874170,4.511373,-7.325633,-4.134424,-8.990715,3.097725,-7.985302,-3.927263,-6.475205],[-5.393304,9.734833,7.554428,4.617886,6.438780,-9.736214,-1.139058,5.334915,-1.544050,-4.276128,0.826815,2.335695,-9.808629,-8.148909]],[[-5.915460,-4.429649,-3.769480,-4.125996,0.992716,1.935966,3.958991,0.862238,-4.598868,-3.262065,0.507817,-5.950722,3.842919,3.498455],[6.222504,2.910083,-0.193119,-5.300928,9.874404,8.385871,-5.507361,9.816552,-4.882619,9.434159,9.268143,-4.078063,-6.035917,0.243092],[-1.142608,-7.891410,-3.644284,2.776948,5.283603,1.305427,-4.619813,7.081663,5.534404,4.398636,6.736255,-3.889211,-6.925445,7.641864],[6.399106,-8.227101,-4.838153,-9.307684,-4.075178,0.503997,6.818959,-9.983325,3.606989,5.793448,-2.239284,5.137342,3.578921,-3.899830],[-0.594690,3.789417,-1.229910,0.189073,-0.743289,5.665959,8.886636,-9.947393,0.961755,-4.432673,-7.941678,5.294301,-0.326203,-3.376939]],[[2.858150,1.546135,7.152769,6.448950,2.336747,-2.054179,-1.688362,-6.333467,-9.670325,5.094206,-3.411933,9.908214,2.099869,2.515397],[2.298825,7.148787,1.403053,-7.304962,8.734357,-2.163496,-6.198329,-9.469265,5.448229,-2.297980,4.138886,9.435317,8.833817,-8.457985],[-5.613806,8.812462,-7.279713,-9.539264,4.809537,-9.066925,-0.154631,4.566459,6.000921,-9.706612,9.764617,-9.476372,-1.138772,-7.918336],[-6.676232,-5.638864,-3.990309,-0.982951,-5.026651,-3.798719,5.438858,9.571061,-0.269851,-9.827522,-7.182367,-9.477998,9.038546,8.139703],[-0.435313,-0.420481,-1.825816,3.602176,-7.757042,8.486993,-7.960894,-4.858864,-7.573703,-5.126284,8.712633,-9.876726,6.816075,3.524682]],[[-7.940753,-9.529741,-0.426332,1.132871,1.321869,4.969662,2.366550,-0.005019,5.824725,5.396021,-6.921679,-8.015506,5.975992,-8.454524],[2.202477,6.791615,-3.162386,-0.439299,-9.057915,3.018666,5.556134,3.919071,-0.520392,-3.203689,5.708079,2.223834,8.829227,9.440087],[9.182357,6.641948,1.310387,-9.218835,-0.854111,-8.229169,-2.004271,-2.893295,-0.293682,-9.820819,-0.832510,-7.790593,5.366695,0.494872],[0.568473,7.292572,-8.375106,2.823307,1.754696,9.932058,2.388478,6.046029,-3.895286,5.761113,3.008055,6.716034,-1.769608,3.893375],[0.173585,8.698219,2.001971,5.256736,8.804779,3.312137,-9.325797,3.625743,-3.156526,-4.331626,-9.423297,-9.072429,8.520314,8.915439]],[[6.818866,7.527591,-5.550411,-3.493561,4.597065,3.687923,-7.355159,-0.491466,-9.868520,-0.714663,-0.202054,5.485818,-3.526932,-8.437808],[5.770126,-8.609061,6.178646,2.785214,-2.552895,7.991645,-5.233781,-1.805761,-1.103431,0.920513,-4.505390,0.584293,-1.337775,-4.243467],[-4.991724,6.775912,-6.979337,4.712780,9.941271,4.513201,-9.926499,-3.443968,-7.527229,0.946242,7.456947,7.967614,9.843646,-2.076150],[4.805028,-3.178829,5.837928,9.888743,8.289342,7.884503,5.414894,-4.529937,-6.441612,-9.809777,-7.312549,4.731230,9.949258,8.767100],[7.008031,-1.329436,-8.065362,0.794543,-1.536895,-8.062013,2.656633,5.883493,-2.103386,-0.113217,-4.796585,8.427406,-9.563822,-6.317189]]], dtype = "float64")#candidate|29|(16, 5, 14)|const|float64
bop_30 = relay.left_shift(const_26.astype('int8'), const_29.astype('int8')) # shape=(16, 5, 14)
uop_33 = relay.atan(bop_30.astype('float64')) # shape=(16, 5, 14)
var_35 = relay.var("var_35", dtype = "float64", shape = ())#candidate|35|()|var|float64
bop_36 = relay.greater_equal(const_26.astype('bool'), var_35.astype('bool')) # shape=()
const_39 = relay.const([[[3,-4,-3,-3,-9,-4,2,10,10,-5,-2,-3,1,2],[-7,5,5,10,2,5,-4,2,-2,-1,-10,5,3,4],[3,10,-2,-10,4,-7,3,-6,10,5,2,8,-4,3],[-2,-3,-4,-5,-10,5,4,8,3,-4,-4,7,-7,-6],[-10,8,8,7,6,8,6,8,5,-9,2,3,2,-1]],[[-5,-2,8,6,-3,9,4,5,-1,2,-9,-4,4,-8],[-7,9,-6,8,-1,9,9,1,-5,7,-9,2,2,2],[5,-6,7,-6,-4,-6,-1,7,2,5,-6,5,-1,-7],[7,9,-7,4,-10,-6,5,7,6,-5,-4,10,-1,7],[-4,-5,4,-10,-10,-5,-5,5,5,-3,8,3,-8,-5]],[[-8,1,9,-10,3,-3,6,-5,1,8,-2,6,9,-5],[2,6,-2,-1,-6,-1,-3,-3,-4,-10,8,10,-9,1],[8,4,6,8,-8,7,10,-2,6,-3,-6,5,9,4],[-2,7,-3,-7,-3,-4,-6,5,-3,-2,-6,9,-6,-4],[8,6,-6,-9,3,5,3,-7,4,-8,2,-6,-4,10]],[[7,-6,3,4,-4,8,1,5,3,-4,7,4,1,-8],[4,5,-2,-6,-5,-6,-3,8,8,-9,-7,-9,-4,-2],[2,-10,-9,-8,7,8,4,3,-10,1,-6,8,5,6],[2,-6,9,1,-2,9,-2,-5,4,-4,-9,-10,-7,-8],[8,2,1,4,-6,10,-5,1,-9,-6,4,-5,6,10]],[[8,8,2,-7,9,-5,-10,7,5,5,-6,-6,10,5],[-9,-3,-3,-4,-10,7,4,-8,-8,-10,-5,-6,-7,-9],[-4,-4,9,1,-6,-4,7,10,3,8,3,4,-4,-6],[3,-7,-2,-1,6,-3,-8,-3,-10,8,10,-5,-5,-2],[-1,7,8,2,-5,-10,-8,5,4,3,-2,-7,9,9]],[[1,1,10,8,4,-7,-5,-9,-4,1,4,-9,-6,-1],[8,-9,1,-3,-9,-10,-2,-9,-6,2,-5,-7,6,5],[4,-7,6,-1,5,8,6,-7,5,-7,-6,-2,-1,-2],[-8,-1,3,-5,3,7,-2,3,3,8,8,2,6,7],[-6,6,-5,6,-4,-10,7,-6,2,-8,-1,-4,6,5]],[[1,-1,2,-9,-6,-7,-6,-1,2,-1,-9,9,9,-1],[1,-9,9,-7,9,7,3,-10,-9,-9,8,-5,-10,9],[10,-6,-7,1,-5,8,-8,-3,-9,7,4,10,7,1],[2,9,-1,2,10,-7,-4,10,1,3,6,9,8,-2],[-5,-4,-4,-8,10,6,-3,-6,7,1,1,8,-3,-9]],[[-6,-6,5,-7,-7,-5,-3,8,5,3,1,-10,7,4],[-6,-1,-4,-3,-8,-10,-3,1,-8,-2,-2,5,-8,-8],[4,4,-4,2,1,7,-4,-4,1,-3,-4,-2,-1,-2],[1,-3,-1,-4,-2,-5,2,4,-8,-4,-6,10,3,8],[8,-2,-1,3,-4,9,3,-10,-5,-2,-3,-3,-5,-10]],[[-4,2,-10,10,-1,-3,2,-2,-3,10,7,10,10,10],[8,-2,10,-6,-10,4,-1,-8,-9,8,5,2,1,3],[-7,5,-4,-8,2,-7,-2,6,7,6,6,-8,3,-2],[-1,-8,-7,2,1,-6,-5,5,-5,1,-5,-8,3,2],[7,2,9,6,2,-5,-9,-6,-7,4,-4,-6,3,1]],[[-1,4,7,3,6,9,-9,-3,-9,-5,-1,-10,3,5],[-7,4,9,5,-3,-9,-8,-9,7,5,8,-2,-8,-6],[-6,7,-7,-3,-6,-2,7,-8,-2,-3,-6,4,-8,-6],[9,-7,5,10,2,10,-4,-9,-6,7,5,-6,8,-8],[6,-5,6,-10,4,2,-7,-8,-5,-3,3,6,10,10]],[[3,6,-1,-4,3,-7,8,-6,2,-6,-8,-5,-1,-10],[6,-10,-9,-6,-9,9,-6,10,-6,9,-8,-4,-5,9],[1,-6,-3,-5,5,5,4,6,2,6,-4,-7,-1,1],[1,4,3,-10,6,-1,9,-5,-1,4,8,-3,-6,-7],[1,-5,-9,-6,-8,-9,4,-5,5,5,-10,-9,-9,-3]],[[3,2,-9,8,-3,-10,-3,-5,-8,-9,10,-9,10,-1],[2,-4,7,9,-10,-3,3,3,-10,-2,-9,-1,2,-9],[2,3,-7,9,2,9,-4,4,4,3,8,-6,6,-5],[-9,-5,8,5,5,-9,-3,-1,-1,-4,4,2,-7,-10],[6,-3,2,8,-8,-3,-8,-1,3,7,7,-10,3,5]],[[-10,2,10,5,-5,-10,-9,-7,-7,7,10,-3,-9,10],[-7,-1,1,5,9,3,-4,-9,8,-9,4,-5,1,-3],[-3,4,9,-6,-9,2,-2,3,8,8,-8,8,-4,8],[3,8,8,3,-7,8,2,3,-6,2,10,7,9,-2],[2,-10,5,8,-2,-1,-10,5,10,5,-6,-8,-9,4]],[[4,-10,-8,-1,2,6,-10,5,5,-1,-1,9,-5,4],[5,1,6,6,-6,8,-6,-4,-1,-4,10,-9,4,-8],[8,3,10,3,-7,-1,-7,1,-3,-8,3,-1,9,-5],[10,4,-5,-1,2,2,-4,10,-2,-5,-3,9,6,10],[10,2,1,7,-4,-1,-2,-4,6,8,-5,2,5,-8]],[[3,-10,-5,4,8,-2,-2,7,-5,-2,6,-8,-2,-3],[-6,-10,10,2,2,-1,-9,-3,5,-5,-2,1,7,-1],[4,8,4,8,9,9,-8,-4,-3,-6,-6,9,9,7],[3,-7,-1,-6,-6,-1,4,8,2,9,-8,4,-9,3],[-2,4,-8,2,-7,-6,-3,-7,9,-1,9,6,6,-5]],[[-10,-2,9,-10,8,-8,-2,-7,-1,4,-4,-1,-6,4],[7,-6,8,-1,-6,5,5,-9,8,-10,4,1,10,3],[-8,-7,-6,2,-2,2,6,-2,-3,-5,-8,-1,2,2],[-5,7,4,10,8,-6,7,-8,7,3,2,-4,5,-5],[-9,-9,6,8,8,9,-10,-6,-3,9,4,-2,9,9]]], dtype = "int8")#candidate|39|(16, 5, 14)|const|int8
bop_40 = relay.bitwise_and(bop_30.astype('int64'), relay.reshape(const_39.astype('int64'), relay.shape_of(bop_30))) # shape=(16, 5, 14)
bop_43 = relay.subtract(uop_33.astype('int64'), const_26.astype('int64')) # shape=(16, 5, 14)
bop_46 = relay.logical_xor(uop_33.astype('uint16'), bop_36.astype('uint16')) # shape=(16, 5, 14)
uop_49 = relay.asinh(bop_36.astype('float32')) # shape=()
uop_51 = relay.log10(uop_33.astype('float32')) # shape=(16, 5, 14)
uop_53 = relay.acosh(uop_51.astype('float32')) # shape=(16, 5, 14)
bop_55 = relay.multiply(uop_53.astype('uint64'), relay.reshape(bop_40.astype('uint64'), relay.shape_of(uop_53))) # shape=(16, 5, 14)
var_58 = relay.var("var_58", dtype = "int64", shape = (16, 5, 14))#candidate|58|(16, 5, 14)|var|int64
bop_59 = relay.floor_mod(bop_40.astype('float32'), relay.reshape(var_58.astype('float32'), relay.shape_of(bop_40))) # shape=(16, 5, 14)
uop_62 = relay.sin(uop_51.astype('float32')) # shape=(16, 5, 14)
bop_64 = relay.right_shift(uop_62.astype('int16'), var_35.astype('int16')) # shape=(16, 5, 14)
bop_67 = relay.greater(uop_53.astype('bool'), relay.reshape(uop_33.astype('bool'), relay.shape_of(uop_53))) # shape=(16, 5, 14)
output = relay.Tuple([uop_27,bop_43,bop_46,uop_49,bop_55,bop_59,bop_64,bop_67,])
output2 = relay.Tuple([uop_27,bop_43,bop_46,uop_49,bop_55,bop_59,bop_64,bop_67,])
func_70 = relay.Function([var_35,var_58,], output)
mod['func_70'] = func_70
mod = relay.transform.InferType()(mod)
mutated_mod['func_70'] = func_70
mutated_mod = relay.transform.InferType()(mutated_mod)
func_70_call = mutated_mod.get_global_var('func_70')
var_72 = relay.var("var_72", dtype = "float64", shape = ())#candidate|72|()|var|float64
var_73 = relay.var("var_73", dtype = "int64", shape = (16, 5, 14))#candidate|73|(16, 5, 14)|var|int64
call_71 = func_70_call(var_72,var_73,)
output = call_71
func_74 = relay.Function([var_72,var_73,], output)
mutated_mod['func_74'] = func_74
mutated_mod = relay.transform.InferType()(mutated_mod)
const_76 = relay.const([[[-8.862762,-7.198297,-5.280652,7.003847,2.976481,-9.272178,-5.717197,-0.501813,-6.202433,-3.089006,2.813750],[6.615726,1.842517,4.549320,-9.123900,2.732003,-6.487585,6.127833,4.638155,-0.954208,-4.265324,7.436774],[-8.760541,-7.928054,-7.716139,-3.027694,6.730206,-3.539302,3.169706,-9.930795,6.202200,6.907653,6.355820],[-0.256158,5.450431,6.221825,7.757087,-8.935158,-7.432349,-7.639623,1.751844,-4.157315,-6.307259,-1.054833]]], dtype = "float64")#candidate|76|(1, 4, 11)|const|float64
uop_77 = relay.sigmoid(const_76.astype('float64')) # shape=(1, 4, 11)
bop_79 = relay.not_equal(uop_77.astype('bool'), relay.reshape(const_76.astype('bool'), relay.shape_of(uop_77))) # shape=(1, 4, 11)
output = bop_79
output2 = bop_79
func_82 = relay.Function([], output)
mod['func_82'] = func_82
mod = relay.transform.InferType()(mod)
mutated_mod['func_82'] = func_82
mutated_mod = relay.transform.InferType()(mutated_mod)
func_82_call = mutated_mod.get_global_var('func_82')
call_83 = func_82_call()
output = call_83
func_84 = relay.Function([], output)
mutated_mod['func_84'] = func_84
mutated_mod = relay.transform.InferType()(mutated_mod)
func_82_call = mod.get_global_var('func_82')
func_84_call = mutated_mod.get_global_var('func_84')
call_85 = func_82_call()
call_86 = func_82_call()
uop_87 = relay.exp(call_85.astype('float64')) # shape=(1, 4, 11)
uop_89 = relay.exp(call_86.astype('float64')) # shape=(1, 4, 11)
uop_90 = relay.atanh(uop_87.astype('float32')) # shape=(1, 4, 11)
uop_92 = relay.atanh(uop_89.astype('float32')) # shape=(1, 4, 11)
bop_93 = relay.logical_or(uop_90.astype('bool'), relay.reshape(uop_87.astype('bool'), relay.shape_of(uop_90))) # shape=(1, 4, 11)
bop_96 = relay.logical_or(uop_92.astype('bool'), relay.reshape(uop_89.astype('bool'), relay.shape_of(uop_92))) # shape=(1, 4, 11)
bop_97 = relay.power(bop_93.astype('float64'), relay.reshape(uop_87.astype('float64'), relay.shape_of(bop_93))) # shape=(1, 4, 11)
bop_100 = relay.power(bop_96.astype('float64'), relay.reshape(uop_89.astype('float64'), relay.shape_of(bop_96))) # shape=(1, 4, 11)
bop_101 = relay.bitwise_or(bop_93.astype('uint8'), relay.reshape(bop_97.astype('uint8'), relay.shape_of(bop_93))) # shape=(1, 4, 11)
bop_104 = relay.bitwise_or(bop_96.astype('uint8'), relay.reshape(bop_100.astype('uint8'), relay.shape_of(bop_96))) # shape=(1, 4, 11)
uop_105 = relay.tan(bop_101.astype('float64')) # shape=(1, 4, 11)
uop_107 = relay.tan(bop_104.astype('float64')) # shape=(1, 4, 11)
uop_108 = relay.sigmoid(uop_87.astype('float32')) # shape=(1, 4, 11)
uop_110 = relay.sigmoid(uop_89.astype('float32')) # shape=(1, 4, 11)
uop_111 = relay.exp(uop_105.astype('float32')) # shape=(1, 4, 11)
uop_113 = relay.exp(uop_107.astype('float32')) # shape=(1, 4, 11)
bop_114 = relay.equal(uop_105.astype('bool'), relay.reshape(bop_97.astype('bool'), relay.shape_of(uop_105))) # shape=(1, 4, 11)
bop_117 = relay.equal(uop_107.astype('bool'), relay.reshape(bop_100.astype('bool'), relay.shape_of(uop_107))) # shape=(1, 4, 11)
bop_118 = relay.right_shift(uop_111.astype('uint64'), relay.reshape(bop_97.astype('uint64'), relay.shape_of(uop_111))) # shape=(1, 4, 11)
bop_121 = relay.right_shift(uop_113.astype('uint64'), relay.reshape(bop_100.astype('uint64'), relay.shape_of(uop_113))) # shape=(1, 4, 11)
bop_122 = relay.bitwise_or(uop_105.astype('uint8'), relay.reshape(call_85.astype('uint8'), relay.shape_of(uop_105))) # shape=(1, 4, 11)
bop_125 = relay.bitwise_or(uop_107.astype('uint8'), relay.reshape(call_86.astype('uint8'), relay.shape_of(uop_107))) # shape=(1, 4, 11)
uop_126 = relay.atan(bop_118.astype('float32')) # shape=(1, 4, 11)
uop_128 = relay.atan(bop_121.astype('float32')) # shape=(1, 4, 11)
bop_129 = relay.multiply(uop_126.astype('int8'), relay.reshape(bop_101.astype('int8'), relay.shape_of(uop_126))) # shape=(1, 4, 11)
bop_132 = relay.multiply(uop_128.astype('int8'), relay.reshape(bop_104.astype('int8'), relay.shape_of(uop_128))) # shape=(1, 4, 11)
uop_133 = relay.rsqrt(bop_129.astype('float32')) # shape=(1, 4, 11)
uop_135 = relay.rsqrt(bop_132.astype('float32')) # shape=(1, 4, 11)
uop_136 = relay.sqrt(uop_133.astype('float64')) # shape=(1, 4, 11)
uop_138 = relay.sqrt(uop_135.astype('float64')) # shape=(1, 4, 11)
const_139 = relay.const([[[-3.760511,-4.070042,-0.388648,0.371263,-1.226569,5.437262,9.418358,-4.197668,8.892967,8.652494,6.932585],[-4.312445,-9.107753,0.416909,-4.001277,0.031049,6.593640,7.185109,-1.853005,6.595815,-6.619509,-0.446537],[4.653454,1.033205,-8.793206,-4.157623,-7.047855,-2.876020,0.672125,8.952467,-2.158233,-5.052959,-0.229529],[1.147026,-8.527250,-1.632608,1.238971,5.231456,2.726893,6.348385,8.324533,-8.030464,-7.335387,-3.220252]],[[-1.021511,8.297627,2.675046,0.548562,-9.041023,-4.294645,3.135709,3.255321,-4.361955,6.813172,9.261887],[0.655038,6.215198,-0.925750,-9.682335,0.361283,-4.518987,2.732439,-6.866464,4.851582,3.217673,5.071162],[-1.289639,1.617161,3.457978,7.325876,3.271221,6.665904,-9.377536,9.129428,3.816461,9.608818,0.186904],[7.488487,7.565866,-0.287228,-7.424135,-6.823587,-7.148254,9.982478,-3.707754,-2.959948,-7.299766,-8.257877]],[[3.240901,2.012747,-7.111784,-9.220499,-7.434426,7.972154,4.101260,-9.046265,-5.868115,-8.373406,3.845247],[-5.329134,-4.012051,5.053910,8.679849,3.584862,8.709026,1.198674,-5.434642,-0.615854,4.301418,-2.495101],[9.158825,-5.207687,4.102997,2.029053,2.081421,5.033513,-3.595999,-7.673281,-7.524851,8.219740,-1.288592],[-5.883501,-6.274080,3.597414,-4.007993,-1.374663,9.620998,6.398115,-3.061656,1.365352,6.893675,3.909062]],[[6.413908,1.641406,-1.870440,-9.019193,5.580579,4.903520,5.725821,0.656995,-9.221975,2.573759,-8.731214],[2.775702,0.804280,-2.292675,1.632640,3.665251,9.028151,-8.487848,9.977329,7.045680,6.612087,-1.691889],[1.547309,8.373993,-6.556912,4.368316,3.537217,7.299397,4.840949,9.578416,9.185811,-2.508860,0.517802],[-0.574926,6.773923,7.214502,-3.897716,3.919375,8.385894,-2.956109,4.692815,9.126585,-4.911956,-0.824793]],[[-4.463007,-8.833485,-0.107092,3.020267,3.454916,-5.641951,4.769814,-6.527907,8.044898,3.000114,-7.801210],[-8.065234,-2.899814,-8.419963,-5.007166,-7.330270,4.688622,0.941847,7.247641,6.330002,-7.708718,2.949385],[-6.789982,-9.171593,0.469250,-1.035065,2.407510,-7.944578,-5.039047,-1.157440,0.637090,-9.759667,3.369744],[-4.692715,-7.994513,9.363352,2.556342,-4.998654,-0.072727,7.795032,-5.175577,3.977059,2.034252,2.389495]],[[8.638920,-2.093292,1.827675,6.533678,-9.572427,3.299054,4.830985,-4.211236,-6.454263,-1.963024,5.274519],[-0.777183,-7.702480,6.629567,8.646456,0.591039,-3.717472,4.614619,-2.389812,-9.379706,-1.830474,9.618565],[-7.521104,-8.756142,-4.259162,-0.408685,4.332268,-4.362623,-6.714424,3.302959,-0.266320,-4.858249,-0.656206],[-0.804330,-3.636260,-8.320479,0.366173,0.489090,7.882424,-1.485460,-9.649953,4.658315,7.791320,2.024227]],[[6.275726,-0.920944,-4.267225,-5.860862,-1.948961,3.988238,2.274373,-8.781486,-1.589940,-8.324259,9.877387],[9.927498,0.907216,0.113731,-8.604826,0.014800,9.105841,-8.709178,-9.258229,9.977201,1.895658,-2.596910],[-0.801259,0.272520,-6.981182,-2.727094,-6.841381,6.836090,-6.512902,2.191399,-6.911195,-2.920220,-4.863222],[1.614912,9.067663,5.835960,9.609936,9.708942,-9.110293,-9.720898,-2.268789,4.392161,7.780971,8.277258]],[[5.327889,-3.331127,9.437705,-1.283886,3.172047,-3.906485,-6.210303,-4.526217,8.719265,4.259834,-1.703580],[-6.342850,-5.647573,-3.600717,2.110832,2.631170,-0.283724,-4.659393,-1.996264,2.044141,-8.899287,-0.386253],[1.345091,-4.204650,-3.492229,4.430616,-5.378181,9.086981,2.067696,-9.897672,7.427846,2.541133,1.857938],[0.287297,-1.123696,-8.494799,4.530978,0.750814,1.038640,7.550226,7.134602,-8.093443,9.291507,-5.091949]]], dtype = "float64")#candidate|139|(8, 4, 11)|const|float64
bop_140 = relay.minimum(uop_136.astype('uint64'), const_139.astype('uint64')) # shape=(8, 4, 11)
bop_143 = relay.minimum(uop_138.astype('uint64'), const_139.astype('uint64')) # shape=(8, 4, 11)
uop_144 = relay.rsqrt(bop_140.astype('float32')) # shape=(8, 4, 11)
uop_146 = relay.rsqrt(bop_143.astype('float32')) # shape=(8, 4, 11)
var_147 = relay.var("var_147", dtype = "float32", shape = (9, 4, 11))#candidate|147|(9, 4, 11)|var|float32
bop_148 = relay.divide(uop_126.astype('float64'), var_147.astype('float64')) # shape=(9, 4, 11)
bop_151 = relay.divide(uop_128.astype('float64'), var_147.astype('float64')) # shape=(9, 4, 11)
bop_152 = relay.not_equal(uop_144.astype('bool'), uop_111.astype('bool')) # shape=(8, 4, 11)
bop_155 = relay.not_equal(uop_146.astype('bool'), uop_113.astype('bool')) # shape=(8, 4, 11)
bop_156 = relay.greater(uop_144.astype('bool'), uop_105.astype('bool')) # shape=(8, 4, 11)
bop_159 = relay.greater(uop_146.astype('bool'), uop_107.astype('bool')) # shape=(8, 4, 11)
uop_160 = relay.exp(uop_136.astype('float64')) # shape=(1, 4, 11)
uop_162 = relay.exp(uop_138.astype('float64')) # shape=(1, 4, 11)
uop_163 = relay.erf(uop_144.astype('float32')) # shape=(8, 4, 11)
uop_165 = relay.erf(uop_146.astype('float32')) # shape=(8, 4, 11)
var_166 = relay.var("var_166", dtype = "float32", shape = (8, 4, 11))#candidate|166|(8, 4, 11)|var|float32
bop_167 = relay.multiply(uop_163.astype('int16'), relay.reshape(var_166.astype('int16'), relay.shape_of(uop_163))) # shape=(8, 4, 11)
bop_170 = relay.multiply(uop_165.astype('int16'), relay.reshape(var_166.astype('int16'), relay.shape_of(uop_165))) # shape=(8, 4, 11)
bop_171 = relay.minimum(uop_163.astype('float32'), uop_90.astype('float32')) # shape=(8, 4, 11)
bop_174 = relay.minimum(uop_165.astype('float32'), uop_92.astype('float32')) # shape=(8, 4, 11)
output = relay.Tuple([uop_108,bop_114,bop_122,bop_148,bop_152,bop_156,uop_160,bop_167,bop_171,])
output2 = relay.Tuple([uop_110,bop_117,bop_125,bop_151,bop_155,bop_159,uop_162,bop_170,bop_174,])
func_175 = relay.Function([var_147,var_166,], output)
mod['func_175'] = func_175
mod = relay.transform.InferType()(mod)
var_176 = relay.var("var_176", dtype = "float32", shape = (9, 4, 11))#candidate|176|(9, 4, 11)|var|float32
var_177 = relay.var("var_177", dtype = "float32", shape = (8, 4, 11))#candidate|177|(8, 4, 11)|var|float32
output = func_175(var_176,var_177,)
func_178 = relay.Function([var_176,var_177,], output)
mutated_mod['func_178'] = func_178
mutated_mod = relay.transform.InferType()(mutated_mod)
var_180 = relay.var("var_180", dtype = "float32", shape = ())#candidate|180|()|var|float32
uop_181 = relay.log10(var_180.astype('float32')) # shape=()
uop_183 = relay.atanh(uop_181.astype('float64')) # shape=()
uop_185 = relay.log10(uop_183.astype('float32')) # shape=()
output = relay.Tuple([uop_185,])
output2 = relay.Tuple([uop_185,])
func_187 = relay.Function([var_180,], output)
mod['func_187'] = func_187
mod = relay.transform.InferType()(mod)
var_188 = relay.var("var_188", dtype = "float32", shape = ())#candidate|188|()|var|float32
output = func_187(var_188)
func_189 = relay.Function([var_188], output)
mutated_mod['func_189'] = func_189
mutated_mod = relay.transform.InferType()(mutated_mod)
var_191 = relay.var("var_191", dtype = "float32", shape = (9, 10, 8))#candidate|191|(9, 10, 8)|var|float32
uop_192 = relay.acosh(var_191.astype('float32')) # shape=(9, 10, 8)
bop_194 = relay.greater(uop_192.astype('bool'), relay.reshape(var_191.astype('bool'), relay.shape_of(uop_192))) # shape=(9, 10, 8)
var_197 = relay.var("var_197", dtype = "float32", shape = (9, 10, 8))#candidate|197|(9, 10, 8)|var|float32
bop_198 = relay.less_equal(uop_192.astype('bool'), relay.reshape(var_197.astype('bool'), relay.shape_of(uop_192))) # shape=(9, 10, 8)
bop_201 = relay.bitwise_xor(bop_194.astype('int8'), relay.reshape(uop_192.astype('int8'), relay.shape_of(bop_194))) # shape=(9, 10, 8)
uop_204 = relay.asinh(bop_194.astype('float64')) # shape=(9, 10, 8)
uop_206 = relay.sigmoid(uop_204.astype('float64')) # shape=(9, 10, 8)
bop_208 = relay.bitwise_and(uop_204.astype('uint8'), relay.reshape(bop_194.astype('uint8'), relay.shape_of(uop_204))) # shape=(9, 10, 8)
bop_211 = relay.right_shift(bop_208.astype('int32'), relay.reshape(var_191.astype('int32'), relay.shape_of(bop_208))) # shape=(9, 10, 8)
uop_214 = relay.log10(bop_211.astype('float64')) # shape=(9, 10, 8)
uop_216 = relay.rsqrt(bop_194.astype('float64')) # shape=(9, 10, 8)
bop_218 = relay.equal(uop_214.astype('bool'), relay.reshape(uop_192.astype('bool'), relay.shape_of(uop_214))) # shape=(9, 10, 8)
uop_221 = relay.sigmoid(uop_214.astype('float32')) # shape=(9, 10, 8)
uop_223 = relay.acos(uop_206.astype('float64')) # shape=(9, 10, 8)
bop_225 = relay.less_equal(uop_221.astype('bool'), relay.reshape(var_191.astype('bool'), relay.shape_of(uop_221))) # shape=(9, 10, 8)
bop_228 = relay.right_shift(uop_204.astype('int16'), relay.reshape(bop_211.astype('int16'), relay.shape_of(uop_204))) # shape=(9, 10, 8)
uop_231 = relay.sinh(bop_211.astype('float32')) # shape=(9, 10, 8)
uop_233 = relay.atanh(bop_225.astype('float64')) # shape=(9, 10, 8)
output = relay.Tuple([bop_198,bop_201,uop_216,bop_218,uop_223,bop_228,uop_231,uop_233,])
output2 = relay.Tuple([bop_198,bop_201,uop_216,bop_218,uop_223,bop_228,uop_231,uop_233,])
func_235 = relay.Function([var_191,var_197,], output)
mod['func_235'] = func_235
mod = relay.transform.InferType()(mod)
mutated_mod['func_235'] = func_235
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mutated_mod.get_global_var('func_235')
var_237 = relay.var("var_237", dtype = "float32", shape = (9, 10, 8))#candidate|237|(9, 10, 8)|var|float32
var_238 = relay.var("var_238", dtype = "float32", shape = (9, 10, 8))#candidate|238|(9, 10, 8)|var|float32
call_236 = func_235_call(var_237,var_238,)
output = call_236
func_239 = relay.Function([var_237,var_238,], output)
mutated_mod['func_239'] = func_239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_241 = relay.var("var_241", dtype = "float64", shape = (8, 16, 4))#candidate|241|(8, 16, 4)|var|float64
uop_242 = relay.cosh(var_241.astype('float64')) # shape=(8, 16, 4)
func_175_call = mod.get_global_var('func_175')
func_178_call = mutated_mod.get_global_var('func_178')
var_245 = relay.var("var_245", dtype = "float32", shape = (396,))#candidate|245|(396,)|var|float32
const_246 = relay.const([3.601603,-7.115258,-9.332956,2.563138,6.724323,5.262037,-8.068747,-0.935492,-4.616760,-6.489794,-4.637461,-4.611944,-6.541091,3.844324,5.412624,6.807743,0.665714,5.695230,-7.206050,-3.805869,5.918694,9.315102,2.870836,6.279448,-0.057862,6.935180,-2.600823,9.162027,-2.672342,-0.594042,-8.576255,-1.597959,-8.741313,0.910024,0.940373,-4.170465,6.459171,-6.413607,7.480812,-5.500762,1.739143,7.343891,4.101123,9.612126,8.354276,5.720318,6.728366,5.845759,-1.869998,-4.496184,-7.969635,-2.284763,3.243649,1.595610,-0.415236,-1.210190,8.651470,1.881821,1.054657,-9.875700,-9.080049,-0.366248,-0.752679,0.400764,5.075964,-0.174429,-2.615062,9.130945,1.333342,4.637064,0.974689,8.030855,9.642885,3.378833,7.074819,4.356213,-5.612311,7.350228,-1.489024,9.394049,4.928900,8.231684,-3.327944,9.546053,9.161978,1.353945,-0.462299,-1.422646,2.048369,-8.898469,0.340318,-1.657415,-4.237665,-0.898899,5.437998,-2.273656,6.107249,-7.821457,-5.211018,4.464596,-5.690559,-4.884355,-0.161726,-1.277257,6.672537,-6.405415,0.236041,-0.391877,7.199169,-3.739403,-1.948338,1.171332,-9.466949,7.740792,5.318866,2.214144,5.692770,-3.652993,-5.375998,8.473569,-3.814358,-8.772116,-6.872452,1.108017,-2.248228,-7.903022,-4.226785,-0.878811,-2.140420,3.771926,1.685035,7.295679,9.425384,-3.411818,8.319443,6.959369,3.269336,3.965087,-6.623900,0.810700,-2.850512,8.497509,4.978027,1.338198,4.271590,6.986631,0.332660,0.239531,4.094694,-6.511060,8.691397,-4.375911,-2.524573,-0.496281,-1.269104,3.963074,-2.766506,5.357420,-3.651685,7.501491,6.947327,-8.541703,6.034156,8.946448,2.851581,9.619753,1.249116,-3.175997,9.084419,-4.446295,-2.956502,-8.469312,-8.428281,8.371919,3.253545,-4.989643,2.352917,3.532927,-8.643051,2.938478,3.391218,-3.452553,-1.577229,-2.633905,-4.881548,3.556430,-4.579912,2.949461,1.258039,8.337326,0.172200,-3.313333,8.659829,7.879926,-5.755987,8.493632,-2.916347,9.020310,-9.431475,-4.241247,-8.610660,-0.227538,-7.913989,-3.155744,-8.888062,-2.601832,5.175841,-9.006483,-0.215817,3.932085,0.750022,-0.306992,-9.320827,-4.021433,5.113298,1.495886,8.018578,-0.943389,9.371153,6.095952,7.197748,3.994295,-1.552581,1.628433,-7.130798,-4.336811,8.862765,8.007885,-7.848662,5.825614,-7.110287,3.097548,-4.886728,8.679763,-6.557496,6.639890,-9.584814,1.122530,-9.619428,-8.594186,9.109803,-1.628957,9.615288,-4.247514,-3.945781,-2.357072,2.189746,-0.180130,9.543549,8.084963,-4.008916,6.553697,-7.206713,-5.513877,5.559849,9.012852,5.552492,-0.891712,1.922203,-2.574553,-8.444893,-7.324972,-4.161650,6.622361,6.835345,-9.193796,9.652355,-6.683098,-8.964250,-3.074460,9.988176,-1.375632,-2.316367,-8.334619,4.273583,8.954128,7.860089,3.886081,-7.478408,3.990302,-6.065597,0.473336,-5.622539,2.343790,-5.216414,-8.853930,9.361898,-5.476315,7.568625,8.427743,7.492785,-0.425708,-4.845656,8.417916,-9.235883,-9.353006,-5.931165,-4.468196,-2.743426,1.988251,-9.859233,-1.562947,-1.574681,0.602171,2.602352,-8.660611,8.947255,1.108164,5.985091,-6.512755,-4.064245,-5.319768,-2.453199,0.451670,-6.747667,-0.752175,-4.194596,-1.604493,0.995502,3.358795,-3.067293,-9.589263,-2.584662,5.545765,-6.200087,-5.748244,3.134023,1.037433,0.185484,-9.151275,4.596722,-3.267056,8.047996,-7.220734,-7.190716,-4.389564,9.336944,-6.538175,-0.865052,2.257650,1.041215,6.821466,-4.048269,2.307092,1.201237,9.294978,-8.095144,5.657676,-9.114896,-7.487173,0.865572,4.570020], dtype = "float32")#candidate|246|(352,)|const|float32
call_244 = relay.TupleGetItem(func_175_call(relay.reshape(var_245.astype('float32'), [9, 4, 11]), relay.reshape(const_246.astype('float32'), [8, 4, 11]), ), 7)
call_247 = relay.TupleGetItem(func_178_call(relay.reshape(var_245.astype('float32'), [9, 4, 11]), relay.reshape(const_246.astype('float32'), [8, 4, 11]), ), 7)
func_3_call = mod.get_global_var('func_3')
func_5_call = mutated_mod.get_global_var('func_5')
var_249 = relay.var("var_249", dtype = "float64", shape = ())#candidate|249|()|var|float64
call_248 = relay.TupleGetItem(func_3_call(relay.reshape(var_249.astype('float64'), [])), 0)
call_250 = relay.TupleGetItem(func_5_call(relay.reshape(var_249.astype('float64'), [])), 0)
bop_251 = relay.bitwise_or(call_244.astype('uint64'), call_248.astype('uint64')) # shape=(8, 4, 11)
bop_254 = relay.bitwise_or(call_247.astype('uint64'), call_250.astype('uint64')) # shape=(8, 4, 11)
func_187_call = mod.get_global_var('func_187')
func_189_call = mutated_mod.get_global_var('func_189')
call_255 = relay.TupleGetItem(func_187_call(relay.reshape(call_248.astype('float32'), [])), 0)
call_256 = relay.TupleGetItem(func_189_call(relay.reshape(call_248.astype('float32'), [])), 0)
uop_257 = relay.sigmoid(call_244.astype('float32')) # shape=(8, 4, 11)
uop_259 = relay.sigmoid(call_247.astype('float32')) # shape=(8, 4, 11)
uop_260 = relay.tan(uop_242.astype('float32')) # shape=(8, 16, 4)
func_70_call = mod.get_global_var('func_70')
func_74_call = mutated_mod.get_global_var('func_74')
var_263 = relay.var("var_263", dtype = "int64", shape = (1120,))#candidate|263|(1120,)|var|int64
call_262 = relay.TupleGetItem(func_70_call(relay.reshape(var_249.astype('float64'), []), relay.reshape(var_263.astype('int64'), [16, 5, 14]), ), 3)
call_264 = relay.TupleGetItem(func_74_call(relay.reshape(var_249.astype('float64'), []), relay.reshape(var_263.astype('int64'), [16, 5, 14]), ), 3)
uop_265 = relay.acosh(uop_260.astype('float32')) # shape=(8, 16, 4)
bop_267 = relay.floor_mod(uop_260.astype('float64'), var_249.astype('float64')) # shape=(8, 16, 4)
var_270 = relay.var("var_270", dtype = "float32", shape = (8, 16, 4))#candidate|270|(8, 16, 4)|var|float32
bop_271 = relay.left_shift(uop_265.astype('int32'), relay.reshape(var_270.astype('int32'), relay.shape_of(uop_265))) # shape=(8, 16, 4)
bop_274 = relay.not_equal(uop_265.astype('bool'), call_255.astype('bool')) # shape=(8, 16, 4)
bop_277 = relay.not_equal(uop_265.astype('bool'), call_256.astype('bool')) # shape=(8, 16, 4)
uop_278 = relay.asinh(uop_260.astype('float32')) # shape=(8, 16, 4)
bop_280 = relay.power(uop_257.astype('float64'), var_249.astype('float64')) # shape=(8, 4, 11)
bop_283 = relay.power(uop_259.astype('float64'), var_249.astype('float64')) # shape=(8, 4, 11)
func_235_call = mod.get_global_var('func_235')
func_239_call = mutated_mod.get_global_var('func_239')
const_285 = relay.const([-2.665441,-4.698616,6.308801,-5.985771,-1.692789,-5.313318,6.334138,1.300619,5.065931,-3.721609,-4.707575,-8.308330,-4.891341,0.724131,0.073556,-4.805537,-6.914334,7.926471,-7.150012,-9.067430,-8.945387,-7.440880,-2.484245,1.196952,0.043535,-6.422796,6.178106,5.409168,6.290698,5.792652,3.480505,-2.971167,3.012559,1.875831,2.614661,-0.993101,9.142155,-1.548704,8.264917,4.978168,6.459391,-8.345300,3.488698,-3.420580,-7.019967,9.199871,9.123221,-3.044693,-4.491015,-2.877834,8.567209,6.007368,5.658664,-2.732858,5.841339,1.773835,7.591269,-6.434853,2.864513,-4.099520,-0.610870,-1.748141,9.049530,-7.039593,-8.037139,-9.930895,-6.922296,-6.666098,1.364555,-5.756199,2.315576,2.515377,7.631213,3.290616,-2.418633,-3.188514,5.444481,-8.300538,5.405743,-7.658567,0.538695,-8.410213,-1.890981,8.140238,2.024384,5.315089,7.008033,-2.047879,-9.245126,-3.214272,1.015142,4.175527,2.477460,6.634227,5.467898,-7.494568,-6.322056,-8.266658,-1.422702,-8.332073,6.327470,-7.715532,-9.964515,4.503747,-4.934594,6.193762,-7.706984,-6.774791,-9.592839,2.087947,-0.253993,-9.287389,-3.917395,8.324930,-6.649886,-3.260594,4.593667,1.770586,6.908715,-3.994149,-4.456907,6.865137,4.582039,-7.539117,-3.160966,1.936777,1.135026,2.430348,-3.253976,-6.590320,1.448092,-2.234096,7.651055,-3.263178,-3.169799,-6.155726,3.967532,4.119461,-2.842202,-8.252810,0.791791,6.876775,-1.086101,-5.767418,4.153585,7.765426,-9.244806,-8.484258,7.031845,-7.898751,2.737343,-5.578621,7.506984,2.417980,1.197290,-9.482672,8.443377,-2.394577,-5.654546,-8.820271,9.356541,-8.705377,1.861724,-3.876138,-4.283273,-3.379735,5.472148,-1.505104,4.940896,-4.049440,7.503844,6.399515,-8.746638,-9.761948,5.368876,7.824774,9.658437,-3.722537,-0.577380,2.145124,2.601435,-5.631183,3.396175,6.894586,8.099830,0.979958,-9.085609,2.526686,-7.201407,-5.894925,1.671672,7.550072,5.902301,6.214396,-7.629179,-8.336191,7.740483,-7.150220,5.805550,3.575331,-3.193482,-9.769872,4.026881,1.808302,5.232396,3.864954,6.235363,0.371360,-5.267381,-7.884786,-3.076835,5.145807,-3.633109,-9.403862,7.146773,-7.946660,-4.251419,3.046393,-9.891047,-7.595280,-8.854364,-5.041993,-4.420136,-6.098394,0.424215,1.938266,-9.128115,0.643537,-3.770881,-9.996480,1.248928,7.230566,0.433934,8.197302,-7.623603,-1.681699,-9.665181,-6.936216,-2.702652,0.030325,-2.769963,8.957739,4.332669,2.745982,-1.997797,-9.089436,-5.438371,-6.039855,-6.993585,4.734569,7.920407,1.576736,3.645519,-8.168373,-0.788250,8.331492,-3.252962,2.701046,6.130644,6.721261,6.731276,5.972733,-2.699356,5.254091,3.149348,3.010768,-7.961710,-2.039420,-2.563403,-7.468619,6.526450,9.246661,-2.588687,4.747209,3.136509,-8.719282,-5.882290,-6.319188,2.481557,4.392658,2.411364,3.090283,9.764675,5.729278,-1.307277,9.680804,9.732099,9.285525,4.484169,2.831939,6.093220,1.317941,0.907878,-6.041116,-2.288971,6.539415,-4.930701,1.168643,3.622448,-3.077417,-0.169021,8.571245,-3.596542,-0.060194,2.696086,5.272613,5.115716,3.600151,-1.451562,0.232170,3.866672,-8.196957,6.360272,-9.834931,-8.996906,-6.307059,-2.761154,-3.059636,-9.596048,-5.344561,-9.125426,-5.330124,6.467101,-9.947260,-2.425203,-4.412000,8.402329,9.285657,-1.875650,4.451411,-6.644751,-7.099195,6.168623,-5.258154,7.501093,7.352663,-5.021905,5.327217,0.492904,6.845051,0.829296,-1.360082,9.823687,1.431152,3.868397,-7.044928,-2.695887,-9.855549,-0.865693,3.995080,6.394397,3.786700,-3.870558,1.196706,9.444232,0.192818,-3.678030,7.803192,-3.684621,-7.363357,5.983677,8.652270,1.204738,4.741597,-4.144747,7.832210,4.034223,7.514581,5.092381,-3.567082,-3.406900,0.515681,3.808427,-6.551941,2.080962,3.622779,1.054968,-9.245475,-1.024779,-7.916392,-4.255471,-9.779118,6.135888,3.835463,1.758382,3.193131,-7.985463,-7.982757,1.849395,5.575542,6.699210,8.988481,0.986474,1.536097,9.536010,7.911822,4.076864,9.342656,2.930267,2.037821,-1.159698,-1.874344,8.979155,-5.092412,8.664025,1.019489,-9.617798,-3.880304,-9.155433,6.220427,7.352501,3.893024,9.513623,5.702947,-5.436607,6.281590,4.225582,9.879318,-0.423352,4.774207,0.234935,9.031076,3.148812,2.427386,9.285126,7.838642,8.018993,-5.819325,-3.826255,-3.150979,-0.434249,6.928418,4.122782,7.633525,1.197509,-1.136134,0.895993,-4.668237,2.545769,5.623021,0.113270,9.182772,1.390893,3.023139,-2.256089,-6.632629,2.612586,-5.374471,-7.469308,-4.282715,3.316436,-6.018359,-2.939342,7.837154,3.810074,0.258747,-2.623662,9.822013,-0.797757,9.289938,-7.951988,8.575800,3.704792,5.126710,7.871091,9.863895,-1.175202,-0.917474,4.342709,-5.881574,-6.332359,3.146257,-3.536459,-1.281342,3.182295,3.892682,-0.351733,1.683917,9.527872,6.386836,-0.881069,3.058944,1.049046,-9.613153,6.854202,9.034489,-3.240391,-5.226552,2.968884,7.241652,-3.602972,2.420629,8.845719,8.086944,0.933679,-0.420804,3.028243,-8.685233,4.526725,1.691846,8.427781,-7.453545,8.420030,-1.130204,6.004602,6.149377,2.496150,-5.957045,4.148393,7.977773,8.991471,2.423591,9.051181,3.614362,-4.736239,1.187428,1.054280,0.092594,7.390507,6.676019,3.869811,-6.970311,0.924667,9.950264,-9.044914,8.049258,-9.825776,4.021732,-4.870230,-0.854272,1.535516,-5.378327,5.919528,-4.306825,-9.911729,-1.341664,-9.482731,-6.095382,7.986901,1.443310,-2.571765,9.536462,4.483242,-2.035734,5.279057,-8.984739,-3.451574,9.269671,-6.204467,-6.699188,-2.683079,-8.252769,-2.219313,-5.236148,-4.731601,3.273365,9.065915,-9.595322,8.989221,-6.433152,3.853524,-2.684272,-5.426169,-8.352906,0.811128,2.538722,3.890100,-6.900251,-1.394672,2.385589,-5.801322,3.670804,-0.877139,-9.959589,-7.973582,-0.597047,6.111867,6.183592,8.488284,-8.979161,6.280199,-2.792464,6.401574,-3.653517,7.932697,7.206155,-4.233095,7.459608,-0.542917,0.666283,1.846381,-8.470423,-9.196057,-0.806956,9.983103,-5.553061,-4.169154,5.067714,3.953506,9.504352,-5.217588,3.055835,1.062546,1.671935,-6.318103,-0.010643,-2.208254,4.194667,-1.454402,-4.724853,-2.676777,-0.202575,0.795802,1.626247,6.809322,-5.100038,9.755179,6.841619,-2.000348,-4.756043,6.569919,-3.601397,4.044859,-4.465653,8.181396,-7.693698,8.080872,-8.071415,-1.751038,2.050034,-9.344023,9.783631,4.996345,-1.831216,7.107631,8.630351,1.396867,3.498550,3.756465,9.571994,-9.897282,-6.840030,-9.297762,5.035435,-8.081054,7.983697,-9.783051,-2.501118,0.091071,0.235787,3.173722,7.647824,7.817292,-6.923903,-5.547295,0.650926,4.574089,-6.667655,9.017331,-7.454300,-2.066215,-0.151367,4.737516,9.729782,-6.547770,0.357922,9.152372,-4.727007,9.635877,6.422261,-9.359277,4.430051,-7.169792,-1.963248,0.870730,-9.046582,-4.643939,-3.197054,6.129779,-9.503747,-9.512724,-3.869455,-7.957986,-0.693121,3.316140,4.470631,9.492172,6.900280,-3.404379,4.999751,-0.238161,0.267426,-2.722363,-6.041547,6.590186,4.006155,1.489877,2.353772,1.526787,7.408045,0.100259,-4.344798,9.134073,9.335977,0.422326,1.805859,-5.177800,-9.213402,-3.599167,-5.413768,5.765955,-2.972507,9.875411,-7.455399,2.186732,6.577845,-1.701285,4.418388,0.043972,6.234830], dtype = "float32")#candidate|285|(720,)|const|float32
call_284 = relay.TupleGetItem(func_235_call(relay.reshape(const_285.astype('float32'), [9, 10, 8]), relay.reshape(const_285.astype('float32'), [9, 10, 8]), ), 5)
call_286 = relay.TupleGetItem(func_239_call(relay.reshape(const_285.astype('float32'), [9, 10, 8]), relay.reshape(const_285.astype('float32'), [9, 10, 8]), ), 5)
bop_287 = relay.not_equal(bop_280.astype('bool'), relay.reshape(uop_257.astype('bool'), relay.shape_of(bop_280))) # shape=(8, 4, 11)
bop_290 = relay.not_equal(bop_283.astype('bool'), relay.reshape(uop_259.astype('bool'), relay.shape_of(bop_283))) # shape=(8, 4, 11)
uop_291 = relay.asinh(uop_260.astype('float64')) # shape=(8, 16, 4)
uop_293 = relay.acos(bop_271.astype('float64')) # shape=(8, 16, 4)
var_295 = relay.var("var_295", dtype = "float64", shape = (8, 16, 4))#candidate|295|(8, 16, 4)|var|float64
bop_296 = relay.left_shift(uop_293.astype('int64'), relay.reshape(var_295.astype('int64'), relay.shape_of(uop_293))) # shape=(8, 16, 4)
bop_299 = relay.subtract(call_244.astype('uint32'), call_248.astype('uint32')) # shape=(8, 4, 11)
bop_302 = relay.subtract(call_247.astype('uint32'), call_250.astype('uint32')) # shape=(8, 4, 11)
const_303 = relay.const([[[-9,6,-7,2],[-9,-9,4,2],[-4,-8,-10,-3],[3,9,-2,1],[4,-3,-6,-6],[-6,5,1,-9],[-10,1,8,-10],[2,2,4,5],[-9,-8,5,-10],[-7,10,-2,2],[-6,1,4,4],[1,-2,-7,3],[-7,-3,-5,1],[9,1,-10,3],[-5,-9,-8,-7],[-7,5,7,-4]],[[-9,7,1,7],[1,1,-10,-5],[-1,-5,7,7],[4,10,10,-8],[-2,-4,-4,2],[10,5,6,-6],[-6,5,7,-9],[-5,-2,4,3],[-4,-6,-9,-2],[-10,8,10,-4],[-5,2,-2,-2],[-10,2,-4,-8],[4,-7,-4,2],[7,-1,-4,-5],[-5,-2,8,4],[8,-1,-10,1]],[[5,-7,-6,-3],[10,1,-1,6],[3,-3,-4,10],[10,6,-2,-4],[-4,8,-1,-4],[6,-5,-4,-5],[1,-10,4,6],[-3,3,-1,4],[9,7,2,-9],[9,-7,6,-9],[-1,-1,1,8],[2,-7,10,8],[3,7,7,6],[-3,6,-7,8],[6,-3,-7,-10],[4,-1,1,4]],[[-3,1,-9,5],[-4,-3,7,-8],[-1,1,4,8],[-1,10,8,-7],[-5,2,-7,-7],[-7,-1,4,-9],[-2,2,4,-2],[8,-6,-8,-9],[3,-8,-6,9],[-7,-10,-2,5],[-9,-10,8,-7],[-5,-7,8,-5],[-7,1,-10,-9],[-3,-8,-7,-8],[4,1,-1,-10],[-3,-9,-3,2]],[[-7,-3,5,4],[2,4,-6,6],[-2,2,5,-8],[-1,9,-1,-3],[-8,-7,-10,-1],[-2,-10,9,10],[4,3,-4,-10],[-9,-8,-4,1],[7,2,-9,-8],[10,-1,7,-10],[-3,-2,3,-1],[-1,-3,10,-4],[1,4,3,-1],[1,1,3,-9],[-4,3,-3,2],[-5,-8,10,-4]],[[1,9,2,-6],[3,-1,1,-3],[10,-4,10,6],[2,2,9,-3],[4,4,-3,10],[-2,-2,-10,-9],[9,-5,1,6],[-9,-5,6,7],[-9,7,3,-8],[8,-9,-5,1],[4,-4,-1,-10],[1,-7,3,-7],[8,8,1,8],[6,-8,-8,4],[8,8,-8,-8],[-6,-6,-10,5]],[[6,1,9,-5],[-7,-7,-3,-8],[9,-8,6,8],[2,3,4,2],[-1,-7,2,-7],[-6,-3,-5,10],[7,-5,-8,5],[4,4,5,-1],[-10,-7,10,-3],[-6,7,-7,7],[9,-9,4,6],[1,9,-9,2],[-9,-4,-3,-7],[-3,-2,3,6],[-3,6,-8,-7],[-4,5,-7,3]],[[-8,-4,1,-9],[6,-5,-3,9],[-6,3,-9,1],[9,7,4,3],[-8,-2,8,5],[3,5,1,-3],[-10,8,-9,3],[8,-5,1,-4],[-4,-7,-10,-8],[-2,-10,-10,-9],[9,10,-10,-5],[4,-3,-7,5],[5,-4,4,-7],[-7,-1,-2,-7],[-2,9,3,-2],[-4,-3,2,-2]]], dtype = "int64")#candidate|303|(8, 16, 4)|const|int64
bop_304 = relay.greater_equal(bop_296.astype('bool'), relay.reshape(const_303.astype('bool'), relay.shape_of(bop_296))) # shape=(8, 16, 4)
uop_307 = relay.erf(bop_274.astype('float32')) # shape=(8, 16, 4)
uop_309 = relay.erf(bop_277.astype('float32')) # shape=(8, 16, 4)
bop_310 = relay.bitwise_and(bop_304.astype('uint64'), relay.reshape(bop_296.astype('uint64'), relay.shape_of(bop_304))) # shape=(8, 16, 4)
uop_313 = relay.log2(uop_265.astype('float32')) # shape=(8, 16, 4)
bop_315 = relay.maximum(uop_291.astype('float32'), relay.reshape(uop_278.astype('float32'), relay.shape_of(uop_291))) # shape=(8, 16, 4)
const_318 = relay.const([[[False,False,False,True],[True,True,False,False],[False,True,False,True],[True,True,False,True],[True,False,False,False],[True,False,False,False],[True,True,True,False],[False,False,False,False],[True,False,True,False],[False,True,False,False],[True,True,True,False],[False,True,True,False],[False,False,False,True],[False,False,True,False],[True,False,False,True],[True,False,True,False]],[[False,False,False,False],[False,False,True,True],[True,False,True,False],[False,True,False,False],[True,False,True,True],[False,True,True,True],[True,True,True,False],[True,False,False,False],[True,False,False,True],[True,True,False,False],[False,True,False,False],[False,False,False,True],[False,True,True,False],[False,False,False,False],[False,True,False,True],[True,True,True,False]],[[True,False,True,False],[True,True,True,True],[True,True,True,True],[False,True,True,False],[True,False,True,True],[False,True,True,False],[False,False,False,True],[True,True,False,False],[True,True,True,True],[True,False,False,False],[True,False,True,True],[True,False,False,False],[False,True,False,True],[False,True,True,False],[True,True,True,False],[True,True,True,False]],[[True,False,True,False],[False,False,False,True],[False,True,True,True],[False,True,False,False],[False,False,True,False],[True,True,False,True],[False,True,True,True],[True,False,False,False],[False,True,False,False],[True,False,False,True],[True,True,True,True],[False,True,False,False],[True,True,False,False],[False,False,True,True],[True,True,False,False],[True,False,False,False]],[[False,False,False,True],[False,False,True,False],[True,False,True,True],[True,True,True,False],[True,True,False,True],[True,False,False,True],[True,True,True,False],[True,False,False,True],[False,True,True,True],[True,False,True,True],[False,False,False,True],[False,False,True,True],[True,True,False,True],[True,True,False,False],[False,True,True,True],[True,True,True,False]],[[False,False,True,False],[False,False,True,False],[False,True,True,False],[True,False,True,True],[True,False,False,True],[True,False,True,True],[True,False,False,True],[False,True,True,False],[True,False,False,True],[False,True,True,False],[True,False,True,False],[False,False,True,False],[False,True,True,True],[True,False,False,True],[True,True,False,True],[False,True,True,False]],[[True,False,True,True],[True,True,True,False],[True,False,True,False],[True,False,False,True],[False,True,True,True],[True,True,False,False],[False,False,True,True],[True,True,True,False],[True,False,True,False],[True,True,True,True],[True,False,True,False],[False,True,False,False],[False,True,False,True],[False,False,False,True],[True,True,False,False],[False,True,True,True]],[[True,False,False,True],[True,True,False,True],[True,True,True,True],[False,True,False,False],[False,False,True,True],[False,True,False,True],[True,False,False,True],[True,True,True,False],[True,True,True,True],[False,True,False,True],[False,True,False,False],[True,False,False,True],[False,False,False,True],[True,False,False,False],[False,False,False,True],[True,True,False,True]]], dtype = "bool")#candidate|318|(8, 16, 4)|const|bool
bop_319 = relay.greater(bop_274.astype('bool'), relay.reshape(const_318.astype('bool'), relay.shape_of(bop_274))) # shape=(8, 16, 4)
bop_322 = relay.greater(bop_277.astype('bool'), relay.reshape(const_318.astype('bool'), relay.shape_of(bop_277))) # shape=(8, 16, 4)
uop_323 = relay.acos(uop_307.astype('float64')) # shape=(8, 16, 4)
uop_325 = relay.acos(uop_309.astype('float64')) # shape=(8, 16, 4)
bop_326 = relay.equal(bop_296.astype('bool'), var_249.astype('bool')) # shape=(8, 16, 4)
output = relay.Tuple([var_245,const_246,bop_251,call_262,var_263,bop_267,call_284,const_285,bop_287,bop_299,bop_310,uop_313,bop_315,bop_319,uop_323,bop_326,])
output2 = relay.Tuple([var_245,const_246,bop_254,call_264,var_263,bop_267,call_286,const_285,bop_290,bop_302,bop_310,uop_313,bop_315,bop_322,uop_325,bop_326,])
func_329 = relay.Function([var_241,var_245,var_249,var_263,var_270,var_295,], output)
mod['func_329'] = func_329
mod = relay.transform.InferType()(mod)
mutated_mod['func_329'] = func_329
mutated_mod = relay.transform.InferType()(mutated_mod)
func_329_call = mutated_mod.get_global_var('func_329')
var_331 = relay.var("var_331", dtype = "float64", shape = (8, 16, 4))#candidate|331|(8, 16, 4)|var|float64
var_332 = relay.var("var_332", dtype = "float32", shape = (396,))#candidate|332|(396,)|var|float32
var_333 = relay.var("var_333", dtype = "float64", shape = ())#candidate|333|()|var|float64
var_334 = relay.var("var_334", dtype = "int64", shape = (1120,))#candidate|334|(1120,)|var|int64
var_335 = relay.var("var_335", dtype = "float32", shape = (8, 16, 4))#candidate|335|(8, 16, 4)|var|float32
var_336 = relay.var("var_336", dtype = "float64", shape = (8, 16, 4))#candidate|336|(8, 16, 4)|var|float64
call_330 = func_329_call(var_331,var_332,var_333,var_334,var_335,var_336,)
output = call_330
func_337 = relay.Function([var_331,var_332,var_333,var_334,var_335,var_336,], output)
mutated_mod['func_337'] = func_337
mutated_mod = relay.transform.InferType()(mutated_mod)
const_339 = relay.const(-8.421674, dtype = "float64")#candidate|339|()|const|float64
uop_340 = relay.cosh(const_339.astype('float64')) # shape=()
const_342 = relay.const(-0.574472, dtype = "float64")#candidate|342|()|const|float64
bop_343 = relay.divide(const_339.astype('float32'), const_342.astype('float32')) # shape=()
var_346 = relay.var("var_346", dtype = "float64", shape = ())#candidate|346|()|var|float64
bop_347 = relay.divide(uop_340.astype('float32'), var_346.astype('float32')) # shape=()
bop_350 = relay.right_shift(uop_340.astype('uint32'), const_339.astype('uint32')) # shape=()
uop_353 = relay.atan(uop_340.astype('float32')) # shape=()
bop_355 = relay.floor_divide(bop_347.astype('float32'), bop_350.astype('float32')) # shape=()
uop_358 = relay.acos(uop_353.astype('float64')) # shape=()
uop_360 = relay.cos(uop_353.astype('float64')) # shape=()
bop_362 = relay.floor_divide(uop_360.astype('float64'), var_346.astype('float64')) # shape=()
bop_365 = relay.greater_equal(uop_358.astype('bool'), bop_355.astype('bool')) # shape=()
uop_368 = relay.cos(uop_360.astype('float64')) # shape=()
output = relay.Tuple([bop_343,bop_362,bop_365,uop_368,])
output2 = relay.Tuple([bop_343,bop_362,bop_365,uop_368,])
F = relay.Function([var_346,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_346,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
	relay.transform.ToBasicBlockNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
input_346= np.array(-0.149336, dtype='float64')
module1.set_input('var_346', input_346)
module1.set_input(**params)
module1.run()
res2 = intrp2.evaluate()(input_346, )
res3 = intrp3.evaluate()(input_346, )
res4 = intrp4.evaluate()(input_346, )
res2 = vmobj_to_list(res2)
res3 = vmobj_to_list(res3)
res4 = vmobj_to_list(res4)
res1_0 = module1.get_output(0).asnumpy()
res2_0 = res2[0].asnumpy()
res3_0 = res3[0].asnumpy()
res4_0 = res4[0].asnumpy()
np.testing.assert_allclose(res1_0 ,res2_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res3_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_0 ,res4_0, atol=1e-3, rtol=1e-3)
(res1_0 == res2_0).all()
(res1_0 == res3_0).all()
(res1_0 == res4_0).all()
res1_1 = module1.get_output(1).asnumpy()
res2_1 = res2[1].asnumpy()
res3_1 = res3[1].asnumpy()
res4_1 = res4[1].asnumpy()
np.testing.assert_allclose(res1_1 ,res2_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res3_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_1 ,res4_1, atol=1e-3, rtol=1e-3)
(res1_1 == res2_1).all()
(res1_1 == res3_1).all()
(res1_1 == res4_1).all()
res1_2 = module1.get_output(2).asnumpy()
res2_2 = res2[2].asnumpy()
res3_2 = res3[2].asnumpy()
res4_2 = res4[2].asnumpy()
np.testing.assert_allclose(res1_2 ,res2_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res3_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_2 ,res4_2, atol=1e-3, rtol=1e-3)
(res1_2 == res2_2).all()
(res1_2 == res3_2).all()
(res1_2 == res4_2).all()
res1_3 = module1.get_output(3).asnumpy()
res2_3 = res2[3].asnumpy()
res3_3 = res3[3].asnumpy()
res4_3 = res4[3].asnumpy()
np.testing.assert_allclose(res1_3 ,res2_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res3_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res1_3 ,res4_3, atol=1e-3, rtol=1e-3)
(res1_3 == res2_3).all()
(res1_3 == res3_3).all()
(res1_3 == res4_3).all()
module5.set_input('var_346', input_346)
module5.set_input(**params)
module5.run()
res6 = intrp6.evaluate()(input_346, )
res7 = intrp7.evaluate()(input_346, )
res8 = intrp8.evaluate()(input_346, )
res6 = vmobj_to_list(res6)
res7 = vmobj_to_list(res7)
res8 = vmobj_to_list(res8)
res5_0 = module5.get_output(0).asnumpy()
res6_0 = res6[0].asnumpy()
res7_0 = res7[0].asnumpy()
res8_0 = res8[0].asnumpy()
np.testing.assert_allclose(res5_0 ,res6_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res7_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_0 ,res8_0, atol=1e-3, rtol=1e-3)
(res5_0 == res6_0).all()
(res5_0 == res7_0).all()
(res5_0 == res8_0).all()
res5_1 = module5.get_output(1).asnumpy()
res6_1 = res6[1].asnumpy()
res7_1 = res7[1].asnumpy()
res8_1 = res8[1].asnumpy()
np.testing.assert_allclose(res5_1 ,res6_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res7_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_1 ,res8_1, atol=1e-3, rtol=1e-3)
(res5_1 == res6_1).all()
(res5_1 == res7_1).all()
(res5_1 == res8_1).all()
res5_2 = module5.get_output(2).asnumpy()
res6_2 = res6[2].asnumpy()
res7_2 = res7[2].asnumpy()
res8_2 = res8[2].asnumpy()
np.testing.assert_allclose(res5_2 ,res6_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res7_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_2 ,res8_2, atol=1e-3, rtol=1e-3)
(res5_2 == res6_2).all()
(res5_2 == res7_2).all()
(res5_2 == res8_2).all()
res5_3 = module5.get_output(3).asnumpy()
res6_3 = res6[3].asnumpy()
res7_3 = res7[3].asnumpy()
res8_3 = res8[3].asnumpy()
np.testing.assert_allclose(res5_3 ,res6_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res7_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res5_3 ,res8_3, atol=1e-3, rtol=1e-3)
(res5_3 == res6_3).all()
(res5_3 == res7_3).all()
(res5_3 == res8_3).all()
module9.set_input('var_346', input_346)
module9.set_input(**params)
module9.run()
res10 = intrp10.evaluate()(input_346, )
res11 = intrp11.evaluate()(input_346, )
res12 = intrp12.evaluate()(input_346, )
res10 = vmobj_to_list(res10)
res11 = vmobj_to_list(res11)
res12 = vmobj_to_list(res12)
res9_0 = module9.get_output(0).asnumpy()
res10_0 = res10[0].asnumpy()
res11_0 = res11[0].asnumpy()
res12_0 = res12[0].asnumpy()
np.testing.assert_allclose(res9_0 ,res10_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res11_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_0 ,res12_0, atol=1e-3, rtol=1e-3)
(res9_0 == res10_0).all()
(res9_0 == res11_0).all()
(res9_0 == res12_0).all()
res9_1 = module9.get_output(1).asnumpy()
res10_1 = res10[1].asnumpy()
res11_1 = res11[1].asnumpy()
res12_1 = res12[1].asnumpy()
np.testing.assert_allclose(res9_1 ,res10_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res11_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_1 ,res12_1, atol=1e-3, rtol=1e-3)
(res9_1 == res10_1).all()
(res9_1 == res11_1).all()
(res9_1 == res12_1).all()
res9_2 = module9.get_output(2).asnumpy()
res10_2 = res10[2].asnumpy()
res11_2 = res11[2].asnumpy()
res12_2 = res12[2].asnumpy()
np.testing.assert_allclose(res9_2 ,res10_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res11_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_2 ,res12_2, atol=1e-3, rtol=1e-3)
(res9_2 == res10_2).all()
(res9_2 == res11_2).all()
(res9_2 == res12_2).all()
res9_3 = module9.get_output(3).asnumpy()
res10_3 = res10[3].asnumpy()
res11_3 = res11[3].asnumpy()
res12_3 = res12[3].asnumpy()
np.testing.assert_allclose(res9_3 ,res10_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res11_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res9_3 ,res12_3, atol=1e-3, rtol=1e-3)
(res9_3 == res10_3).all()
(res9_3 == res11_3).all()
(res9_3 == res12_3).all()
module13.set_input('var_346', input_346)
module13.set_input(**params)
module13.run()
res14 = intrp14.evaluate()(input_346, )
res15 = intrp15.evaluate()(input_346, )
res16 = intrp16.evaluate()(input_346, )
res14 = vmobj_to_list(res14)
res15 = vmobj_to_list(res15)
res16 = vmobj_to_list(res16)
res13_0 = module13.get_output(0).asnumpy()
res14_0 = res14[0].asnumpy()
res15_0 = res15[0].asnumpy()
res16_0 = res16[0].asnumpy()
np.testing.assert_allclose(res13_0 ,res14_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res15_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_0 ,res16_0, atol=1e-3, rtol=1e-3)
(res13_0 == res14_0).all()
(res13_0 == res15_0).all()
(res13_0 == res16_0).all()
res13_1 = module13.get_output(1).asnumpy()
res14_1 = res14[1].asnumpy()
res15_1 = res15[1].asnumpy()
res16_1 = res16[1].asnumpy()
np.testing.assert_allclose(res13_1 ,res14_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res15_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_1 ,res16_1, atol=1e-3, rtol=1e-3)
(res13_1 == res14_1).all()
(res13_1 == res15_1).all()
(res13_1 == res16_1).all()
res13_2 = module13.get_output(2).asnumpy()
res14_2 = res14[2].asnumpy()
res15_2 = res15[2].asnumpy()
res16_2 = res16[2].asnumpy()
np.testing.assert_allclose(res13_2 ,res14_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res15_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_2 ,res16_2, atol=1e-3, rtol=1e-3)
(res13_2 == res14_2).all()
(res13_2 == res15_2).all()
(res13_2 == res16_2).all()
res13_3 = module13.get_output(3).asnumpy()
res14_3 = res14[3].asnumpy()
res15_3 = res15[3].asnumpy()
res16_3 = res16[3].asnumpy()
np.testing.assert_allclose(res13_3 ,res14_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res15_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res13_3 ,res16_3, atol=1e-3, rtol=1e-3)
(res13_3 == res14_3).all()
(res13_3 == res15_3).all()
(res13_3 == res16_3).all()
module17.set_input('var_346', input_346)
module17.set_input(**params)
module17.run()
res18 = intrp18.evaluate()(input_346, )
res19 = intrp19.evaluate()(input_346, )
res20 = intrp20.evaluate()(input_346, )
res18 = vmobj_to_list(res18)
res19 = vmobj_to_list(res19)
res20 = vmobj_to_list(res20)
res17_0 = module17.get_output(0).asnumpy()
res18_0 = res18[0].asnumpy()
res19_0 = res19[0].asnumpy()
res20_0 = res20[0].asnumpy()
np.testing.assert_allclose(res17_0 ,res18_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res19_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_0 ,res20_0, atol=1e-3, rtol=1e-3)
(res17_0 == res18_0).all()
(res17_0 == res19_0).all()
(res17_0 == res20_0).all()
res17_1 = module17.get_output(1).asnumpy()
res18_1 = res18[1].asnumpy()
res19_1 = res19[1].asnumpy()
res20_1 = res20[1].asnumpy()
np.testing.assert_allclose(res17_1 ,res18_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res19_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_1 ,res20_1, atol=1e-3, rtol=1e-3)
(res17_1 == res18_1).all()
(res17_1 == res19_1).all()
(res17_1 == res20_1).all()
res17_2 = module17.get_output(2).asnumpy()
res18_2 = res18[2].asnumpy()
res19_2 = res19[2].asnumpy()
res20_2 = res20[2].asnumpy()
np.testing.assert_allclose(res17_2 ,res18_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res19_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_2 ,res20_2, atol=1e-3, rtol=1e-3)
(res17_2 == res18_2).all()
(res17_2 == res19_2).all()
(res17_2 == res20_2).all()
res17_3 = module17.get_output(3).asnumpy()
res18_3 = res18[3].asnumpy()
res19_3 = res19[3].asnumpy()
res20_3 = res20[3].asnumpy()
np.testing.assert_allclose(res17_3 ,res18_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res19_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res17_3 ,res20_3, atol=1e-3, rtol=1e-3)
(res17_3 == res18_3).all()
(res17_3 == res19_3).all()
(res17_3 == res20_3).all()
module21.set_input('var_346', input_346)
module21.set_input(**params)
module21.run()
res22 = intrp22.evaluate()(input_346, )
res23 = intrp23.evaluate()(input_346, )
res24 = intrp24.evaluate()(input_346, )
res22 = vmobj_to_list(res22)
res23 = vmobj_to_list(res23)
res24 = vmobj_to_list(res24)
res21_0 = module21.get_output(0).asnumpy()
res22_0 = res22[0].asnumpy()
res23_0 = res23[0].asnumpy()
res24_0 = res24[0].asnumpy()
np.testing.assert_allclose(res21_0 ,res22_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res23_0, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_0 ,res24_0, atol=1e-3, rtol=1e-3)
(res21_0 == res22_0).all()
(res21_0 == res23_0).all()
(res21_0 == res24_0).all()
res21_1 = module21.get_output(1).asnumpy()
res22_1 = res22[1].asnumpy()
res23_1 = res23[1].asnumpy()
res24_1 = res24[1].asnumpy()
np.testing.assert_allclose(res21_1 ,res22_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res23_1, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_1 ,res24_1, atol=1e-3, rtol=1e-3)
(res21_1 == res22_1).all()
(res21_1 == res23_1).all()
(res21_1 == res24_1).all()
res21_2 = module21.get_output(2).asnumpy()
res22_2 = res22[2].asnumpy()
res23_2 = res23[2].asnumpy()
res24_2 = res24[2].asnumpy()
np.testing.assert_allclose(res21_2 ,res22_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res23_2, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_2 ,res24_2, atol=1e-3, rtol=1e-3)
(res21_2 == res22_2).all()
(res21_2 == res23_2).all()
(res21_2 == res24_2).all()
res21_3 = module21.get_output(3).asnumpy()
res22_3 = res22[3].asnumpy()
res23_3 = res23[3].asnumpy()
res24_3 = res24[3].asnumpy()
np.testing.assert_allclose(res21_3 ,res22_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res23_3, atol=1e-3, rtol=1e-3)
np.testing.assert_allclose(res21_3 ,res24_3, atol=1e-3, rtol=1e-3)
(res21_3 == res22_3).all()
(res21_3 == res23_3).all()
(res21_3 == res24_3).all()

'''74: TVMFuncCall
73: _ZNSt17_Function_handlerIFvN3tvm7runtime7TVM
72: tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) const
71: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, tvm::runtime::String const&)
70: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function const&, tvm::runtime::String)
69: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
68: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::IRModule, tvm::relay::Function, tvm::runtime::String)
67: tvm::transform::Pass::operator()(tvm::IRModule) const
66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
65: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
64: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
63: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
62: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
61: tvm::relay::tec::LowerTE(tvm::IRModule const&, tvm::runtime::String const&, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)
60: tvm::transform::Pass::operator()(tvm::IRModule) const
59: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
58: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
57: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::BaseFunc)>, tvm::VirtualDevice)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
56: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
55: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
54: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
53: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
52: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
51: _ZN3tvm5relay9transform22Devic
50: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
49: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
48: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
47: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
46: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::TupleNode const*)
45: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
44: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
43: _ZZN3tvm5relay11ExprFunctorIFNS_9RelayEx
42: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
41: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
40: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::Span, tvm::Target)
39: tvm::relay::tec::TECompilerImpl::Lower(tvm::relay::tec::CCacheKey const&, tvm::runtime::String)
38: tvm::relay::tec::TECompilerImpl::LowerInternal(tvm::relay::tec::CCacheKey const&, std::function<tvm::runtime::String (tvm::runtime::String)>)
37: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::te::Tensor, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
36: tvm::LowerSchedule(tvm::te::Schedule, tvm::runtime::Array<tvm::runtime::ObjectRef, void> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unordered_map<tvm::te::Tensor, tvm::tir::Buffer, std::hash<tvm::te::Tensor>, std::equal_to<tvm::te::Tensor>, std::allocator<std::pair<tvm::te::Tensor const, tvm::tir::Buffer> > > const&, bool)
35: tvm::LowerWithPassList(tvm::IRModule, tvm::runtime::Array<tvm::transform::Pass, void>)
34: tvm::transform::Pass::operator()(tvm::IRModule) const
33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
32: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
31: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
30: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
29: _ZNSt17_Function_handlerIFvN3tvm7
28: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::NarrowDataType(int)::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
27: tvm::tir::DataTypeRewriter::operator()(tvm::tir::Stmt)
26: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS
25: tvm::tir::DataTypeRewriter::VisitStmt_(tvm::tir::StoreNode const*)
24: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
23: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
22: _ZThn16_N3tvm3tir16DataTyp
21: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
20: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
19: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
18: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
17: _ZThn16_N3tvm3tir16DataTyp
16: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::GENode const*)
15: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
14: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS
13: _ZThn16_N3tvm3tir16DataTyp
12: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CastNode const*)
11: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CastNode const*)
10: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
9: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
8: _ZThn16_N3tvm3tir16DataTyp
7: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::CallNode const*)
6: tvm::tir::ExprMutator::VisitExpr_(tvm::tir::CallNode const*)
5: non-virtual thunk to tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
4: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprE
3: _ZThn16_N3tvm3tir16DataTyp
2: tvm::tir::DataTypeRewriter::VisitExpr_(tvm::tir::DivNode const*)
1: tvm::div(tvm::PrimExpr, tvm::PrimExpr, tvm::Span)
0: tvm::PrimExpr tvm::arith::TryConstFold<tvm::tir::Div>(tvm::PrimExpr, tvm::PrimExpr)

'''